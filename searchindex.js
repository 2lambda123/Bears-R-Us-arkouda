Search.setIndex({"docnames": ["CONTRIBUTING_LINK", "ENVIRONMENT", "autoapi/arkouda/accessor/index", "autoapi/arkouda/akscipy/_stats_py/index", "autoapi/arkouda/akscipy/index", "autoapi/arkouda/akscipy/special/_math/index", "autoapi/arkouda/akscipy/special/index", "autoapi/arkouda/alignment/index", "autoapi/arkouda/array_api/_array_object/index", "autoapi/arkouda/array_api/_constants/index", "autoapi/arkouda/array_api/_creation_functions/index", "autoapi/arkouda/array_api/_data_type_functions/index", "autoapi/arkouda/array_api/_dtypes/index", "autoapi/arkouda/array_api/_elementwise_functions/index", "autoapi/arkouda/array_api/_indexing_functions/index", "autoapi/arkouda/array_api/_manipulation_functions/index", "autoapi/arkouda/array_api/_searching_functions/index", "autoapi/arkouda/array_api/_set_functions/index", "autoapi/arkouda/array_api/_sorting_functions/index", "autoapi/arkouda/array_api/_statistical_functions/index", "autoapi/arkouda/array_api/_typing/index", "autoapi/arkouda/array_api/_utility_functions/index", "autoapi/arkouda/array_api/index", "autoapi/arkouda/array_api/linalg/index", "autoapi/arkouda/array_view/index", "autoapi/arkouda/categorical/index", "autoapi/arkouda/client/index", "autoapi/arkouda/client_dtypes/index", "autoapi/arkouda/dataframe/index", "autoapi/arkouda/dtypes/index", "autoapi/arkouda/groupbyclass/index", "autoapi/arkouda/history/index", "autoapi/arkouda/index", "autoapi/arkouda/index/index", "autoapi/arkouda/infoclass/index", "autoapi/arkouda/io/index", "autoapi/arkouda/io_util/index", "autoapi/arkouda/join/index", "autoapi/arkouda/logger/index", "autoapi/arkouda/match/index", "autoapi/arkouda/matcher/index", "autoapi/arkouda/numeric/index", "autoapi/arkouda/pdarrayclass/index", "autoapi/arkouda/pdarraycreation/index", "autoapi/arkouda/pdarraysetops/index", "autoapi/arkouda/plotting/index", "autoapi/arkouda/random/_generator/index", "autoapi/arkouda/random/_legacy/index", "autoapi/arkouda/random/index", "autoapi/arkouda/row/index", "autoapi/arkouda/security/index", "autoapi/arkouda/segarray/index", "autoapi/arkouda/series/index", "autoapi/arkouda/sorting/index", "autoapi/arkouda/strings/index", "autoapi/arkouda/timeclass/index", "autoapi/arkouda/util/index", "autoapi/index", "developer/ADDING_FEATURES", "developer/BENCHMARK", "developer/GASNET", "developer/MEMORY", "developer/RELEASE_PROCESS", "developer/TIPS", "developer/USER_BUGS", "developer/dev_menu", "examples", "file_io/CSV", "file_io/HDF5", "file_io/IMPORT_EXPORT", "file_io/PARQUET", "file_io/io_menu", "index", "quickstart", "server/index", "setup/BUILD", "setup/LINUX_INSTALL", "setup/MAC_INSTALL", "setup/MODULAR", "setup/REQUIREMENTS", "setup/WINDOWS_INSTALL", "setup/install_menu", "setup/testing", "usage", "usage/IO", "usage/Index", "usage/argsort", "usage/arithmetic", "usage/arrayview", "usage/categorical", "usage/creation", "usage/dataframe", "usage/groupby", "usage/histogram", "usage/indexing", "usage/pdarray", "usage/segarray", "usage/series", "usage/setops", "usage/startup", "usage/strings"], "filenames": ["CONTRIBUTING_LINK.md", "ENVIRONMENT.md", "autoapi/arkouda/accessor/index.rst", "autoapi/arkouda/akscipy/_stats_py/index.rst", "autoapi/arkouda/akscipy/index.rst", "autoapi/arkouda/akscipy/special/_math/index.rst", "autoapi/arkouda/akscipy/special/index.rst", "autoapi/arkouda/alignment/index.rst", "autoapi/arkouda/array_api/_array_object/index.rst", "autoapi/arkouda/array_api/_constants/index.rst", "autoapi/arkouda/array_api/_creation_functions/index.rst", "autoapi/arkouda/array_api/_data_type_functions/index.rst", "autoapi/arkouda/array_api/_dtypes/index.rst", "autoapi/arkouda/array_api/_elementwise_functions/index.rst", "autoapi/arkouda/array_api/_indexing_functions/index.rst", "autoapi/arkouda/array_api/_manipulation_functions/index.rst", "autoapi/arkouda/array_api/_searching_functions/index.rst", "autoapi/arkouda/array_api/_set_functions/index.rst", "autoapi/arkouda/array_api/_sorting_functions/index.rst", "autoapi/arkouda/array_api/_statistical_functions/index.rst", "autoapi/arkouda/array_api/_typing/index.rst", "autoapi/arkouda/array_api/_utility_functions/index.rst", "autoapi/arkouda/array_api/index.rst", "autoapi/arkouda/array_api/linalg/index.rst", "autoapi/arkouda/array_view/index.rst", "autoapi/arkouda/categorical/index.rst", "autoapi/arkouda/client/index.rst", "autoapi/arkouda/client_dtypes/index.rst", "autoapi/arkouda/dataframe/index.rst", "autoapi/arkouda/dtypes/index.rst", "autoapi/arkouda/groupbyclass/index.rst", "autoapi/arkouda/history/index.rst", "autoapi/arkouda/index.rst", "autoapi/arkouda/index/index.rst", "autoapi/arkouda/infoclass/index.rst", "autoapi/arkouda/io/index.rst", "autoapi/arkouda/io_util/index.rst", "autoapi/arkouda/join/index.rst", "autoapi/arkouda/logger/index.rst", "autoapi/arkouda/match/index.rst", "autoapi/arkouda/matcher/index.rst", "autoapi/arkouda/numeric/index.rst", "autoapi/arkouda/pdarrayclass/index.rst", "autoapi/arkouda/pdarraycreation/index.rst", "autoapi/arkouda/pdarraysetops/index.rst", "autoapi/arkouda/plotting/index.rst", "autoapi/arkouda/random/_generator/index.rst", "autoapi/arkouda/random/_legacy/index.rst", "autoapi/arkouda/random/index.rst", "autoapi/arkouda/row/index.rst", "autoapi/arkouda/security/index.rst", "autoapi/arkouda/segarray/index.rst", "autoapi/arkouda/series/index.rst", "autoapi/arkouda/sorting/index.rst", "autoapi/arkouda/strings/index.rst", "autoapi/arkouda/timeclass/index.rst", "autoapi/arkouda/util/index.rst", "autoapi/index.rst", "developer/ADDING_FEATURES.md", "developer/BENCHMARK.md", "developer/GASNET.md", "developer/MEMORY.md", "developer/RELEASE_PROCESS.md", "developer/TIPS.md", "developer/USER_BUGS.md", "developer/dev_menu.rst", "examples.rst", "file_io/CSV.md", "file_io/HDF5.md", "file_io/IMPORT_EXPORT.md", "file_io/PARQUET.md", "file_io/io_menu.rst", "index.rst", "quickstart.rst", "server/index.rst", "setup/BUILD.md", "setup/LINUX_INSTALL.md", "setup/MAC_INSTALL.md", "setup/MODULAR.md", "setup/REQUIREMENTS.md", "setup/WINDOWS_INSTALL.md", "setup/install_menu.rst", "setup/testing.rst", "usage.rst", "usage/IO.rst", "usage/Index.rst", "usage/argsort.rst", "usage/arithmetic.rst", "usage/arrayview.rst", "usage/categorical.rst", "usage/creation.rst", "usage/dataframe.rst", "usage/groupby.rst", "usage/histogram.rst", "usage/indexing.rst", "usage/pdarray.rst", "usage/segarray.rst", "usage/series.rst", "usage/setops.rst", "usage/startup.rst", "usage/strings.rst"], "titles": ["Contributing", "Environment Variables", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.accessor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.akscipy._stats_py</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.akscipy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.akscipy.special._math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.akscipy.special</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.alignment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._array_object</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._constants</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._creation_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._data_type_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._dtypes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._elementwise_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._indexing_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._manipulation_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._searching_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._set_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._sorting_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._statistical_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._typing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._utility_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api.linalg</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_view</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.categorical</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.client</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.client_dtypes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.dataframe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.dtypes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.groupbyclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.index</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.infoclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.io</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.io_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.join</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.match</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.numeric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.pdarrayclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.pdarraycreation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.pdarraysetops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.plotting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.random._generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.random._legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.row</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.security</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.segarray</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.series</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.sorting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.strings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.timeclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.util</span></code>", "API Reference", "Adding Your First Feature", "PyTest Benchmarks", "GASNet Development", "Reducing Memory Usage of Arkouda Builds", "Release Process", "Speeding up Arkouda Compilation", "Tips for Reproducing User Bugs", "Developer Documentation", "Examples", "CSV", "HDF5", "Import/Export", "Parquet", "File I/O", "Arkouda Documentation", "Quickstart", "Chapel API Reference", "Building the Server", "Linux", "MacOS", "Modular Server Builds", "Requirements", "Windows (WSL2)", "Installation", "Performance Testing", "Usage Guide", "Data I/O", "Indexs in Arkouda", "Sorting", "Arithmetic and Numeric Operations", "ArrayView in Arkouda", "Categoricals", "Creating Arrays", "DataFrames in Arkouda", "GroupBy", "Summarizing Data", "Indexing and Assignment", "The <code class=\"docutils literal notranslate\"><span class=\"pre\">pdarray</span></code> class", "SegArrays in Arkouda", "Series in Arkouda", "Array Set Operations", "Startup", "Strings in Arkouda"], "terms": {"i": [0, 1, 3, 4, 5, 6, 7, 8, 11, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 73, 75, 76, 77, 78, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "an": [0, 1, 7, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 66, 67, 68, 69, 70, 73, 76, 80, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "open": [0, 7, 25, 28, 32, 33, 35, 36, 42, 46, 48, 51, 54, 55, 80], "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 68, 73, 75, 76, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 97, 98, 99, 100], "project": [0, 59, 62, 75], "we": [0, 1, 8, 28, 32, 33, 35, 41, 42, 46, 48, 54, 58, 59, 60, 62, 64, 66, 67, 70, 75, 76, 77, 79, 80, 93, 95], "love": 0, "see": [0, 1, 7, 8, 11, 13, 14, 15, 16, 17, 18, 20, 21, 30, 32, 41, 42, 45, 46, 48, 52, 54, 55, 56, 58, 59, 62, 63, 64, 73, 75, 78, 84, 87, 89, 92, 93, 95, 96, 97, 98, 100], "new": [0, 24, 25, 28, 30, 32, 33, 35, 36, 38, 39, 40, 41, 42, 45, 46, 48, 51, 52, 54, 58, 62, 63, 64, 79, 91, 92, 95, 96, 97, 100], "contributor": [0, 3, 4, 32], "welcom": 0, "via": [0, 1, 25, 28, 30, 32, 42, 43, 54, 58, 75, 76, 77, 84, 89, 92, 94, 95, 100], "most": [0, 1, 27, 30, 32, 40, 52, 54, 59, 61, 62, 66, 68, 73, 75, 77, 80, 84, 90, 92, 95, 97, 100], "fall": 0, "under": [0, 2, 24, 25, 27, 28, 30, 32, 33, 35, 42, 43, 51, 52, 54, 55, 59, 62, 84, 88, 89, 92, 95, 100], "broad": 0, "categori": [0, 25, 32, 53, 62, 68, 83, 86, 89], "If": [0, 1, 7, 24, 25, 26, 27, 28, 30, 32, 33, 35, 36, 39, 40, 41, 42, 43, 44, 46, 48, 51, 52, 54, 55, 58, 60, 61, 62, 63, 67, 68, 70, 73, 75, 76, 77, 78, 80, 81, 84, 87, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100], "your": [0, 1, 28, 32, 33, 35, 42, 54, 60, 61, 62, 64, 65, 73, 75, 76, 77, 78, 79, 80, 81, 91, 99, 100], "doesn": [0, 62, 75], "t": [0, 8, 20, 28, 32, 35, 54, 55, 58, 62, 63, 64, 75, 76, 77, 80, 82, 100], "fit": [0, 59, 62, 84], "either": [0, 25, 30, 32, 34, 35, 41, 42, 43, 44, 47, 48, 51, 52, 78, 80, 84, 96, 97, 98], "pleas": [0, 25, 27, 28, 30, 32, 33, 35, 42, 51, 52, 54, 55, 60, 62, 63, 66, 68, 70, 71, 75, 76, 77, 78, 89, 91, 92], "add": [0, 1, 13, 24, 25, 28, 30, 32, 35, 46, 48, 51, 52, 58, 62, 75, 76, 77, 78, 80, 91, 92], "anywai": [0, 90], "provid": [0, 11, 24, 25, 28, 30, 32, 33, 35, 42, 46, 48, 51, 54, 56, 59, 61, 66, 67, 68, 70, 71, 75, 76, 77, 79, 84, 87, 91, 92, 96], "much": [0, 7, 24, 25, 28, 32, 35, 42, 51, 54, 61, 66, 68, 84, 88, 89, 95, 100], "detail": [0, 11, 20, 32, 34, 42, 59, 62, 75, 76, 77, 79, 93, 99, 100], "possibl": [0, 28, 32, 35, 41, 51, 54, 55, 58, 59, 62, 66, 75, 80, 84, 96, 100], "It": [0, 8, 27, 28, 32, 42, 50, 51, 56, 60, 61, 64, 66, 67, 68, 70, 73, 75, 76, 77, 80, 91, 92, 96], "alwai": [0, 30, 32, 35, 42, 55, 67, 84, 87, 89, 91, 92, 93, 95, 100], "good": [0, 62, 64], "idea": [0, 62, 64, 67, 84], "current": [0, 24, 25, 26, 28, 30, 32, 33, 34, 35, 41, 42, 43, 46, 48, 50, 54, 61, 62, 63, 67, 68, 69, 70, 76, 77, 81, 84, 85, 87, 89, 90, 91, 92, 93, 95, 96, 99, 100], "list": [0, 7, 8, 10, 15, 20, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 41, 42, 43, 44, 45, 51, 52, 54, 55, 56, 58, 59, 60, 62, 63, 64, 66, 67, 71, 73, 75, 77, 78, 81, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100], "make": [0, 1, 25, 27, 28, 32, 41, 55, 58, 59, 60, 61, 62, 64, 73, 75, 76, 77, 78, 80, 89, 91], "sure": [0, 28, 32, 33, 35, 42, 54, 62, 80], "alreadi": [0, 1, 25, 28, 30, 32, 33, 35, 42, 51, 52, 54, 55, 63, 67, 68, 70, 75, 89, 92, 98], "present": [0, 7, 25, 27, 28, 32, 33, 35, 41, 42, 44, 51, 52, 54, 66, 68, 84, 93, 98], "us": [0, 1, 3, 4, 7, 8, 20, 25, 26, 27, 28, 30, 31, 32, 33, 35, 38, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 65, 67, 68, 69, 70, 76, 77, 80, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "github": [0, 3, 4, 32, 62, 64, 75, 76, 77, 81], "markdown": 0, "especi": [0, 25, 28, 32, 64, 77, 89], "block": [0, 25, 32, 44, 54, 58, 66, 73, 90], "veri": [0, 28, 32, 66, 90, 91], "appreci": 0, "when": [0, 1, 7, 24, 25, 27, 28, 30, 32, 33, 35, 41, 42, 44, 51, 52, 54, 55, 56, 58, 59, 62, 63, 64, 66, 68, 70, 73, 75, 77, 78, 79, 80, 84, 87, 89, 91, 92, 95, 96, 98], "includ": [0, 1, 7, 28, 30, 32, 33, 34, 35, 41, 42, 54, 55, 58, 59, 62, 67, 68, 73, 75, 76, 78, 84, 87, 91, 92, 95, 96], "follow": [0, 1, 3, 4, 7, 26, 32, 41, 58, 59, 60, 62, 73, 75, 76, 77, 78, 79, 80, 81, 87, 89, 92, 95, 96, 98, 99, 100], "inform": [0, 1, 8, 11, 13, 14, 15, 16, 17, 18, 20, 21, 25, 26, 30, 32, 34, 42, 54, 59, 62, 63, 64, 66, 67, 68, 70, 71, 73, 75, 76, 77, 78, 79, 89, 96, 98, 100], "summari": [0, 28, 32], "problem": [0, 59, 73, 82], "what": [0, 29, 32, 46, 48, 51, 58, 62, 63, 64, 78, 99], "behavior": [0, 8, 28, 32, 42, 43, 46, 47, 48, 87, 88, 90, 91, 100], "did": [0, 26], "you": [0, 1, 25, 27, 28, 30, 32, 33, 35, 42, 51, 52, 54, 55, 58, 59, 60, 62, 63, 64, 65, 66, 68, 69, 73, 75, 76, 77, 78, 79, 80, 81, 91, 92, 94], "observ": [0, 3, 4, 32, 42, 87], "encount": [0, 32, 35], "expect": [0, 3, 4, 24, 28, 30, 32, 33, 35, 42, 54, 59, 68, 76, 77, 84, 88, 92, 95], "thi": [0, 1, 3, 4, 8, 20, 24, 25, 26, 27, 28, 30, 32, 33, 35, 38, 41, 42, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 73, 75, 76, 77, 78, 80, 81, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100], "known": [0, 32, 41], "work": [0, 25, 28, 32, 35, 42, 44, 49, 54, 63, 66, 68, 70, 73, 76, 77, 78, 84, 89, 91, 94, 98, 100], "around": [0, 8, 20, 27, 32, 62, 64], "step": [0, 10, 30, 32, 59, 60, 61, 64, 75, 78, 81, 98, 99], "reproduc": [0, 32, 46, 47, 48, 65, 90], "simplifi": [0, 59], "program": [0, 25, 27, 28, 30, 32, 33, 42, 51, 52, 54, 55, 73, 92, 99], "demonstr": [0, 58], "configur": [0, 1, 32, 59, 66, 73, 77, 80, 85, 91, 97], "": [0, 1, 2, 7, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 41, 42, 50, 51, 52, 54, 55, 58, 61, 62, 66, 75, 76, 77, 80, 81, 82, 84, 87, 88, 89, 91, 92, 93, 95, 96, 97, 99, 100], "output": [0, 1, 24, 25, 27, 28, 30, 32, 33, 35, 41, 42, 46, 48, 51, 54, 62, 66, 70, 73, 84, 87, 92, 93, 95, 98, 99], "ak": [0, 1, 3, 4, 5, 6, 7, 13, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 39, 41, 42, 43, 44, 45, 46, 47, 48, 51, 53, 54, 55, 56, 58, 63, 64, 66, 67, 73, 75, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100], "get_config": [0, 26], "like": [0, 2, 7, 27, 28, 30, 32, 42, 46, 48, 55, 60, 62, 63, 64, 66, 69, 73, 75, 78, 84, 85, 91, 92, 94, 97, 99, 100], "arkoudavers": 0, "version": [0, 3, 4, 25, 32, 56, 59, 62, 68, 73, 75, 76, 77, 79, 80], "server": [0, 1, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 38, 39, 42, 43, 47, 48, 50, 51, 52, 54, 55, 61, 63, 64, 76, 77, 80, 82, 83, 87, 88, 89, 90, 91, 92, 93, 95, 96, 100], "wa": [0, 24, 25, 27, 28, 30, 32, 33, 35, 41, 42, 51, 52, 54, 55, 63, 68, 69, 75, 77, 84, 92, 95, 96], "built": [0, 24, 25, 32, 42, 54, 60, 62, 63, 64, 73, 75, 77, 78, 84, 88, 89, 95, 100], "Be": [0, 28, 32, 33, 35, 42, 54, 58], "specif": [0, 8, 20, 28, 32, 35, 46, 48, 64, 67, 68, 69, 76, 78, 83, 84, 91], "exampl": [0, 3, 4, 5, 6, 7, 20, 24, 25, 26, 28, 30, 32, 33, 35, 39, 41, 42, 43, 44, 45, 46, 47, 48, 51, 53, 54, 55, 56, 59, 62, 68, 73, 75, 77, 78, 80, 84, 86, 87, 88, 90, 91, 92, 93, 95, 96, 98, 99, 100], "appropri": [0, 28, 32, 35, 58, 62, 69, 73, 75, 79, 84], "base": [0, 1, 2, 3, 4, 7, 8, 17, 20, 24, 25, 27, 28, 31, 32, 33, 35, 38, 41, 42, 46, 48, 49, 53, 55, 62, 75, 77, 81, 83, 84, 85, 86, 87, 88, 89, 91, 95, 97, 100], "anoth": [0, 28, 30, 32, 35, 41, 42, 54, 68, 73, 77, 80, 84, 91, 92, 94, 95, 96, 100], "librari": [0, 1, 58, 80, 100], "e": [0, 1, 2, 7, 9, 25, 27, 28, 30, 32, 35, 41, 42, 43, 51, 54, 55, 58, 62, 63, 64, 76, 77, 79, 84, 87, 89, 90, 92, 96, 99, 100], "numpi": [0, 3, 4, 5, 6, 8, 20, 24, 25, 27, 29, 30, 32, 33, 37, 41, 42, 43, 51, 52, 54, 55, 58, 59, 66, 79, 82, 84, 87, 88, 89, 90, 93, 94, 95, 96, 98, 100], "panda": [0, 28, 32, 33, 35, 43, 52, 55, 58, 69, 71, 79, 84, 85, 89, 91], "scipi": [0, 3, 4, 32, 79], "link": [0, 1, 32, 35, 55, 62, 75, 76], "support": [0, 25, 27, 28, 29, 30, 32, 33, 35, 36, 41, 42, 43, 44, 46, 48, 50, 51, 52, 54, 55, 58, 66, 69, 73, 76, 77, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100], "document": [0, 1, 57, 58, 59, 63, 64, 66, 71, 77, 78], "refer": [0, 3, 4, 28, 30, 32, 63, 66, 75, 77, 79, 92], "don": [0, 28, 32, 35, 54, 63, 64, 80], "have": [0, 1, 5, 6, 7, 25, 28, 30, 32, 33, 35, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 54, 55, 58, 61, 62, 63, 64, 66, 67, 68, 70, 75, 76, 77, 78, 79, 84, 87, 89, 90, 91, 92, 95, 96, 97], "anyth": [0, 32, 42, 62], "mind": [0, 20, 66, 80], "check": [0, 1, 7, 20, 24, 25, 28, 30, 32, 33, 35, 41, 42, 51, 54, 56, 58, 62, 63, 64, 82, 89, 98, 99, 100], "out": [0, 26, 28, 32, 41, 51, 63, 64, 67, 68, 70, 75, 78, 93, 94, 96], "our": [0, 32, 42, 58, 59, 61, 62, 66, 68, 73, 75, 80, 81, 84], "outstand": 0, "filter": [0, 28, 31, 32, 51, 84], "label": [0, 25, 28, 30, 32, 33, 45, 52, 89, 91, 92, 97], "first": [0, 7, 28, 30, 32, 35, 36, 41, 42, 43, 44, 52, 54, 56, 60, 64, 65, 66, 67, 68, 73, 75, 76, 78, 83, 84, 87, 90, 91, 92, 93, 97, 100], "identifi": [0, 7, 25, 32, 35, 42, 95], "befor": [0, 32, 55, 59, 75, 84], "start": [0, 7, 8, 10, 20, 25, 30, 32, 33, 37, 39, 42, 43, 51, 53, 54, 55, 68, 83, 86, 89, 90, 92, 94, 96, 100], "onc": [0, 28, 32, 35, 42, 52, 54, 60, 61, 62, 64, 66, 67, 70, 75, 80], "find": [0, 7, 25, 28, 30, 32, 40, 42, 44, 50, 52, 54, 56, 59, 62, 65, 76, 87, 92, 93, 98, 100], "creat": [0, 24, 25, 27, 28, 30, 32, 33, 35, 36, 40, 42, 43, 45, 51, 52, 54, 55, 57, 58, 59, 62, 64, 68, 70, 73, 75, 76, 77, 78, 79, 80, 83, 84, 88, 89, 91, 92, 93, 95], "intend": [0, 25, 27, 28, 32, 41, 42, 51, 54, 67, 73, 76, 77, 85, 91, 97], "leav": [0, 32, 41, 93], "comment": [0, 63, 78], "indic": [0, 7, 11, 14, 17, 24, 25, 26, 27, 28, 30, 32, 33, 35, 37, 39, 41, 42, 44, 51, 52, 53, 54, 55, 56, 66, 68, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 100], "mention": [0, 64], "bear": [0, 62, 76, 77], "r": [0, 28, 32, 59, 62, 66, 76, 77, 82], "u": [0, 27, 32, 43, 55, 62, 76, 77, 84], "dev": [0, 76, 77, 79], "awar": 0, "assign": [0, 25, 28, 30, 32, 52, 67, 68, 83, 89, 92, 96, 100], "avoid": [0, 61, 64], "anyon": 0, "duplic": [0, 28, 32, 91], "need": [0, 8, 25, 28, 32, 35, 42, 51, 52, 54, 58, 59, 62, 63, 64, 67, 75, 76, 77, 78, 80, 84, 91, 97], "assist": [0, 78], "want": [0, 1, 28, 32, 73, 77, 79, 91], "discuss": 0, "design": [0, 62, 84], "someon": [0, 62], "tag": [0, 32, 35, 38, 62, 64], "reach": 0, "git": [0, 64, 76, 77], "fork": [0, 75, 76, 77, 81], "workflow": [0, 32, 35, 62, 78, 84], "recommend": [0, 32, 41, 46, 48, 60, 64, 70, 76, 79, 80, 81, 91, 96], "simpl": [0, 20, 66, 78, 93], "branch": [0, 58, 59, 62, 75], "own": [0, 1, 32, 55, 96, 100], "standard": [0, 8, 25, 30, 32, 42, 43, 46, 47, 48, 55, 58, 59, 60, 87, 92, 93], "laid": 0, "pep8": 0, "continu": [0, 62], "integr": [0, 30, 32, 35, 42, 43, 47, 48, 62, 84, 90, 92], "ha": [0, 8, 25, 27, 28, 30, 32, 33, 35, 41, 42, 43, 44, 51, 52, 54, 55, 60, 62, 63, 67, 68, 78, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97], "linter": 0, "flake8": [0, 79], "verifi": [0, 1, 28, 32, 69, 84, 91], "all": [0, 7, 21, 24, 25, 26, 28, 30, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 51, 54, 55, 56, 58, 59, 62, 63, 64, 67, 68, 70, 73, 76, 77, 78, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 100], "meet": 0, "requir": [0, 7, 8, 20, 26, 28, 30, 32, 33, 35, 37, 42, 43, 52, 60, 61, 63, 64, 68, 69, 70, 73, 78, 84, 90, 91, 92], "isort": 0, "black": 0, "typic": [0, 27, 32, 58, 63, 64, 89], "order": [0, 3, 4, 24, 25, 27, 28, 30, 32, 35, 41, 42, 43, 44, 51, 52, 53, 54, 56, 60, 68, 70, 75, 83, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 100], "ensur": [0, 28, 32, 41, 62, 68, 75, 77, 91, 95], "consist": [0, 28, 32, 41, 66, 87, 91], "util": [0, 32, 35, 57, 62, 75, 76, 77], "line": [0, 32, 36, 63, 67, 73, 78, 88, 99], "length": [0, 7, 25, 30, 32, 33, 35, 37, 39, 43, 44, 47, 48, 50, 51, 52, 54, 59, 68, 82, 87, 90, 92, 96, 97, 98, 100], "105": [0, 26], "paramet": [0, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 77, 84, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "example_featur": 0, "py": [0, 1, 58, 59, 63, 75, 78, 79, 82], "fix": [0, 32, 41, 55, 62, 80, 100], "reformat": [0, 84], "done": [0, 28, 32, 64, 75, 78, 91], "1": [0, 1, 3, 4, 5, 6, 7, 10, 18, 23, 24, 25, 26, 28, 30, 32, 33, 35, 37, 39, 41, 42, 43, 44, 46, 47, 48, 51, 52, 53, 54, 56, 57, 59, 60, 62, 63, 66, 67, 68, 71, 73, 76, 77, 78, 79, 80, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100], "file": [0, 1, 20, 24, 25, 28, 30, 32, 33, 35, 36, 42, 50, 51, 54, 58, 60, 63, 64, 69, 70, 73, 75, 76, 77, 79, 80, 92, 100], "For": [0, 2, 7, 25, 30, 32, 35, 39, 43, 46, 47, 48, 53, 54, 55, 56, 58, 59, 63, 66, 71, 73, 75, 76, 77, 78, 81, 84, 86, 90, 92, 93, 94, 95, 96, 98, 100], "user": [0, 1, 24, 25, 27, 28, 30, 32, 33, 35, 38, 41, 42, 43, 45, 50, 51, 52, 54, 55, 56, 59, 62, 65, 66, 68, 69, 71, 73, 75, 76, 77, 78, 79, 80, 81, 84, 88, 89, 92, 95, 100], "pycharm": 0, "nice": 0, "interoper": 0, "tool": [0, 76, 77], "style": [0, 25, 27, 28, 30, 32, 33, 42, 51, 52, 54, 55, 91, 92, 95], "doc": [0, 3, 4, 28, 32, 58, 75, 76, 88], "string": [0, 1, 3, 4, 7, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 50, 51, 52, 53, 55, 56, 57, 58, 59, 62, 78, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98], "look": [0, 1, 58, 62, 63, 66, 78, 84, 99], "similar": [0, 32, 35, 54, 59, 66, 84, 95, 96, 100], "surround": 0, "function": [0, 1, 8, 20, 25, 52, 54, 59, 62, 63, 66, 67, 69, 70, 73, 78, 83, 84, 85, 88, 89, 91, 92, 93, 95, 96, 97, 98, 100], "space": [0, 1, 7, 32, 41, 43, 54, 55, 59, 75, 78, 90, 93, 100], "The": [0, 1, 2, 3, 4, 7, 8, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 60, 62, 66, 67, 68, 69, 73, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100], "ci": 0, "fail": [0, 28, 32, 35, 41, 62, 84, 91, 95], "tab": [0, 62, 75], "ar": [0, 1, 7, 8, 20, 25, 27, 28, 30, 32, 33, 35, 41, 42, 43, 44, 46, 48, 50, 51, 52, 53, 54, 55, 59, 60, 62, 63, 64, 66, 67, 68, 70, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100], "lowercamelcas": 0, "variabl": [0, 30, 32, 35, 37, 42, 50, 51, 54, 59, 60, 76, 77, 78, 87, 92, 96, 100], "name": [0, 1, 2, 7, 20, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 38, 42, 43, 47, 48, 51, 52, 54, 55, 56, 59, 60, 62, 66, 67, 68, 70, 75, 77, 78, 79, 83, 84, 85, 89, 90, 91, 92, 97], "procedur": 0, "var": [0, 1, 19, 30, 32, 42, 58, 83, 87, 92, 93], "ax": [0, 15], "0": [0, 3, 4, 5, 6, 7, 10, 15, 19, 20, 24, 25, 26, 28, 30, 32, 33, 35, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 51, 52, 53, 54, 55, 56, 58, 59, 60, 66, 67, 68, 73, 76, 77, 79, 80, 82, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "real": [0, 13, 32, 43, 47, 48, 62, 68], "proc": [0, 58], "printit": 0, "x": [0, 3, 4, 5, 6, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 27, 28, 29, 30, 32, 35, 41, 42, 45, 51, 54, 56, 66, 80, 84, 87, 88, 89, 91, 92, 95, 96, 100], "writeln": 0, "uppercamelcas": 0, "class": [0, 43, 59, 83, 84, 85, 88, 89, 91, 92, 96, 97, 100], "foo": [0, 2, 32], "foopar": 0, "re": [0, 25, 26, 28, 30, 32, 75, 92, 99, 100], "confirm": [0, 62], "again": [0, 64, 66, 67, 75, 76], "realli": [0, 32, 54], "behav": [0, 24, 32, 88], "properli": [0, 63, 68, 76, 77], "thing": [0, 8, 20, 66], "note": [0, 1, 2, 3, 4, 7, 8, 20, 24, 25, 26, 27, 28, 30, 32, 33, 35, 36, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 60, 64, 66, 68, 70, 75, 77, 78, 80, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100], "test_": 0, "begin": [0, 32, 54, 94, 100], "otherwis": [0, 24, 25, 28, 29, 30, 32, 33, 35, 39, 42, 43, 44, 51, 52, 54, 58, 81, 84, 88, 89, 91, 92, 95, 96, 98, 100], "pytest": [0, 65, 79], "ini": [0, 59], "so": [0, 1, 25, 27, 28, 30, 32, 35, 41, 42, 51, 52, 54, 59, 61, 62, 63, 64, 78, 79, 80, 84, 87, 88, 91, 92, 97, 98], "dure": [0, 1, 32, 35, 64, 66, 68, 69, 78, 79], "wiki": [0, 3, 4, 32], "more": [0, 1, 7, 8, 11, 13, 14, 15, 16, 17, 18, 20, 21, 24, 25, 28, 32, 33, 35, 41, 42, 52, 54, 55, 58, 59, 60, 62, 63, 64, 66, 68, 70, 71, 73, 75, 76, 77, 79, 84, 88, 89, 91, 95, 96, 100], "info": [0, 1, 25, 28, 32, 34, 38, 42, 54], "how": [0, 24, 25, 27, 28, 32, 33, 35, 41, 42, 51, 54, 58, 59, 62, 67, 79, 88, 92, 95], "http": [0, 3, 4, 11, 28, 32, 56, 58, 76, 77, 88], "com": [0, 3, 4, 32, 76, 77], "unit": [0, 1, 26, 28, 32, 41, 55], "categoricaltest": 0, "v": [0, 32, 51, 62, 76, 82, 96], "print": [0, 1, 25, 26, 28, 32, 34, 42, 49, 54, 80, 99], "m": [0, 32, 39, 41, 51, 55, 59, 75, 80, 100], "categorical_test": 0, "singl": [0, 2, 7, 8, 20, 24, 25, 27, 28, 30, 32, 33, 35, 37, 41, 42, 44, 46, 48, 51, 54, 63, 64, 66, 68, 70, 75, 78, 82, 84, 90, 91, 92, 94, 96, 98], "from": [0, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 38, 39, 41, 42, 43, 45, 46, 47, 48, 51, 52, 54, 58, 59, 60, 62, 63, 64, 66, 67, 68, 73, 75, 76, 78, 80, 82, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100], "foo_test": 0, "server_util": [0, 1], "parallel_start_test": 0, "d": [0, 8, 20, 25, 32, 43, 44, 45, 46, 48, 51, 54, 55, 66, 82, 96, 98, 100], "post": [0, 62], "local": [0, 1, 24, 25, 26, 28, 30, 32, 33, 35, 42, 51, 52, 54, 55, 59, 60, 68, 73, 75, 76, 77, 84, 90, 92, 97, 99], "catch": 0, "common": [0, 7, 30, 32, 44, 58, 80, 84, 92, 98, 100], "failur": [0, 32, 35, 75, 84], "earli": 0, "usual": [0, 30, 32, 58, 92], "mypi": [0, 79], "everi": [0, 1, 28, 32, 59, 91, 100], "should": [0, 1, 8, 20, 25, 28, 29, 30, 32, 35, 41, 42, 43, 52, 54, 56, 58, 62, 63, 64, 66, 67, 68, 69, 73, 75, 76, 77, 79, 84, 91, 92, 95, 99], "least": [0, 27, 28, 32, 42, 51, 53, 54, 86, 96], "one": [0, 1, 2, 7, 8, 20, 25, 28, 29, 30, 32, 33, 35, 36, 41, 42, 43, 44, 46, 48, 51, 52, 54, 58, 59, 62, 64, 66, 67, 68, 70, 73, 76, 77, 78, 79, 80, 84, 87, 89, 90, 91, 92, 96, 98, 100], "associ": [0, 1, 32, 35, 52, 56, 59, 62, 84, 96, 97], "number": [0, 1, 7, 24, 25, 26, 27, 28, 30, 31, 32, 33, 35, 37, 40, 41, 42, 43, 46, 47, 48, 51, 52, 54, 55, 59, 60, 62, 63, 64, 66, 68, 76, 78, 80, 82, 84, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100], "titl": [0, 32, 54, 62], "bodi": 0, "close": [0, 7, 32, 43, 55, 58, 66, 90], "keyword": [0, 25, 32, 46, 48, 51, 52, 90, 97], "doubt": [0, 62], "take": [0, 14, 27, 30, 32, 38, 42, 46, 48, 60, 61, 63, 64, 66, 69, 84, 92], "some": [0, 8, 25, 28, 32, 60, 66, 70, 75, 76, 89, 91, 96, 100], "99999": 0, "pr": [0, 62], "implement": [0, 8, 25, 26, 27, 31, 32, 41, 42, 44, 46, 48, 50, 51, 54, 58, 67, 73, 87, 90, 99, 100], "arg": [0, 7, 32, 43, 51, 55, 58, 78, 90, 92], "super": 0, "cool": 0, "help": [0, 27, 32, 78], "keep": [0, 7, 28, 32, 66, 77, 80, 84, 91], "part": [0, 8, 20, 32, 51, 54, 80, 100], "those": [0, 8, 20, 32, 53, 66, 76, 78, 86, 94], "As": [0, 32, 41, 42, 52, 62, 67, 69, 76, 77, 84, 87, 95, 97, 100], "person": 0, "who": [0, 76, 77], "left": [0, 7, 27, 28, 32, 41, 42, 53, 54, 55, 86, 93, 100], "feedback": 0, "resolv": [0, 61, 73, 80], "convers": [0, 25, 84, 89, 95, 100], "decid": 0, "author": 0, "address": [0, 26, 27, 32, 99], "try": [0, 29, 32, 33, 35, 42, 80], "feel": 0, "readi": [0, 60, 62, 76, 77], "necessari": [0, 58, 62, 75, 80], "track": [0, 63, 70], "ani": [0, 7, 21, 24, 25, 28, 30, 32, 33, 34, 35, 36, 41, 42, 43, 46, 48, 51, 52, 54, 58, 59, 62, 64, 68, 70, 76, 77, 83, 87, 91, 92, 93, 95, 96, 100], "which": [0, 7, 24, 25, 26, 27, 28, 30, 32, 33, 35, 41, 42, 43, 44, 46, 47, 48, 51, 52, 53, 54, 55, 58, 59, 61, 62, 64, 66, 75, 76, 77, 78, 82, 84, 86, 87, 88, 89, 90, 91, 92, 95, 96, 98, 99, 100], "outsid": [0, 67, 78], "scope": [0, 78], "member": 0, "quit": [0, 73], "bit": [0, 11, 25, 27, 32, 41, 42, 43, 51, 54, 59, 63, 84, 88, 90, 91, 95], "experi": [0, 84], "unsur": 0, "ask": 0, "2": [0, 3, 4, 5, 6, 7, 24, 25, 28, 30, 32, 33, 35, 39, 41, 42, 43, 44, 46, 47, 48, 51, 52, 53, 54, 56, 58, 59, 60, 62, 66, 67, 68, 75, 76, 77, 78, 79, 80, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100], "concurr": [0, 84], "approv": 0, "limit": [0, 8, 24, 25, 32, 37, 42, 43, 54, 55, 67, 70, 73, 84, 88, 89, 91, 95, 100], "except": [0, 7, 32, 42, 58, 66, 76, 100], "after": [0, 25, 28, 32, 54, 62, 64, 75, 91, 100], "pass": [0, 1, 7, 20, 25, 27, 28, 30, 32, 35, 41, 42, 46, 48, 51, 52, 54, 62, 84, 91, 92, 97], "conflict": 0, "ideal": [0, 62], "rebas": 0, "master": [0, 62, 75], "prefer": [0, 77, 79, 81], "wrote": 0, "best": [0, 7], "practic": [0, 30, 32, 42, 78, 87, 92], "els": [0, 58, 62], "To": [0, 1, 28, 30, 32, 41, 46, 48, 55, 58, 59, 60, 64, 67, 73, 75, 77, 78, 88, 89, 91, 93, 95, 100], "commit": [0, 62], "histori": [0, 26, 32, 57, 62], "allow": [0, 3, 4, 25, 27, 28, 32, 33, 35, 38, 42, 43, 46, 47, 48, 51, 54, 59, 60, 66, 68, 69, 71, 78, 80, 84, 90, 96], "easi": [0, 32, 38, 59, 62, 66, 75], "manipul": 0, "squash": 0, "web": [0, 62], "interfac": [0, 62], "pierce314159": 0, "ethan": 0, "debandi99": 0, "consensu": [0, 62], "There": [1, 30, 32, 35, 59, 66, 75, 80, 90, 98], "can": [1, 7, 20, 24, 25, 27, 28, 30, 32, 33, 35, 41, 42, 43, 44, 47, 48, 50, 51, 52, 54, 55, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 73, 75, 76, 77, 78, 79, 80, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100], "role": 1, "develop": [1, 25, 62, 63, 64, 76, 77, 78, 81, 84], "highlight": [1, 62, 66], "variou": [1, 67], "avail": [1, 26, 32, 35, 42, 46, 48, 59, 64, 68, 80, 84, 93], "separ": [1, 8, 27, 28, 32, 33, 35, 36, 42, 54, 59, 67, 68, 78, 84, 95, 100], "section": [1, 32, 41, 59, 61, 62, 63, 64, 66, 68, 73, 75, 79, 87], "These": [1, 20, 66, 68, 71, 73, 84], "env": [1, 32, 63, 73, 75, 76, 77, 79], "arkouda_serv": [1, 26, 29, 32, 60, 63, 64, 73, 75, 78, 99], "arkouda_server_connection_info": 1, "set": [1, 7, 24, 25, 27, 28, 30, 32, 33, 35, 38, 41, 42, 43, 44, 50, 51, 52, 54, 55, 59, 60, 62, 67, 68, 75, 76, 77, 78, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 100], "write": [1, 24, 25, 28, 32, 33, 35, 36, 38, 42, 51, 52, 54, 59, 62, 67, 84, 88], "port": [1, 25, 26, 28, 32, 35, 42, 51, 54, 63, 73, 82, 99], "startup": [1, 73, 83], "tune": 1, "buffer": 1, "messag": [1, 24, 25, 26, 28, 32, 33, 38, 42, 43, 51, 54, 58, 73, 84], "aggreg": [1, 28, 30, 32, 51, 56, 66, 83, 84, 92], "sort": [1, 7, 18, 25, 28, 30, 32, 41, 42, 44, 51, 52, 54, 57, 62, 82, 83, 87, 89, 90, 92, 93, 98, 100], "non": [1, 7, 25, 30, 32, 40, 41, 42, 43, 44, 46, 47, 48, 53, 54, 61, 84, 86, 87, 90, 92, 93, 94, 100], "crazi": 1, "system": [1, 24, 25, 32, 42, 50, 54, 58, 59, 77, 78, 79, 80, 81, 84, 87, 88, 89, 95, 99, 100], "thei": [1, 20, 25, 26, 27, 28, 30, 32, 33, 35, 42, 51, 52, 54, 55, 60, 62, 67, 68, 69, 76, 77, 84, 88, 89, 92, 97], "per": [1, 24, 25, 26, 28, 30, 32, 33, 35, 42, 51, 54, 58, 59, 64, 68, 78, 84, 87, 92], "task": [1, 26], "content": [1, 67, 84], "between": [1, 25, 26, 32, 37, 41, 42, 43, 54, 55, 59, 66, 78, 90, 93, 95, 100], "compet": 1, "arkouda_server_aggregation_dst_buff_s": 1, "commun": [1, 32, 53, 62, 77, 86, 90], "arkouda_server_aggregation_src_buff_s": 1, "arkouda_server_aggregation_yield_frequ": 1, "frequenc": [1, 3, 4, 32, 55], "yield": [1, 24, 25, 28, 32, 33, 35, 42, 51, 54, 91, 94], "default": [1, 3, 4, 7, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 38, 39, 41, 42, 43, 44, 46, 47, 48, 50, 51, 52, 54, 55, 56, 59, 61, 67, 68, 73, 77, 78, 82, 84, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100], "1024": [1, 32, 42], "build": [1, 30, 32, 59, 62, 65, 73, 76, 80, 92, 99], "chpl_flag": [1, 61], "A": [1, 2, 24, 25, 26, 27, 28, 30, 31, 32, 35, 41, 42, 43, 45, 46, 48, 50, 51, 52, 54, 62, 66, 72, 82, 84, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 100], "automat": [1, 25, 32, 35, 52, 68, 84, 89, 97], "chpl": [1, 58, 63, 75, 76, 77, 78], "addit": [1, 30, 32, 41, 45, 46, 48, 58, 60, 68, 70, 76, 95, 98, 99], "ones": [1, 10, 26, 32, 41, 43, 59, 63, 82, 83, 87, 90], "here": [1, 32, 54, 56, 59, 60, 63, 64, 65, 66, 68, 70, 75, 77, 78, 79, 80, 81, 99], "smemtrack": 1, "true": [1, 7, 10, 11, 18, 24, 25, 26, 27, 28, 30, 32, 33, 35, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 54, 55, 56, 59, 66, 77, 84, 85, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100], "lhdf5": 1, "lhdf5_hl": 1, "lzmq": 1, "liconv": 1, "lidn2": 1, "fast": [1, 25, 32, 54], "unless": [1, 32, 35, 41, 46, 48, 54, 100], "arkouda_develop": [1, 63], "o1": 1, "mutual": 1, "exclus": [1, 32, 37, 43, 44, 46, 47, 48, 66, 90, 94, 98], "arkouda_quick_compil": [1, 63, 77], "loop": 1, "invari": 1, "code": [1, 3, 4, 25, 32, 33, 35, 53, 58, 62, 63, 66, 68, 73, 78, 83, 86, 89], "motion": 1, "ccflag": 1, "o0": 1, "arkouda_print_passes_fil": 1, "time": [1, 25, 26, 28, 30, 32, 33, 35, 37, 41, 42, 46, 48, 51, 52, 54, 55, 59, 61, 63, 64, 67, 68, 70, 78, 82, 84, 89, 92, 93, 96, 98, 100], "specifi": [1, 7, 8, 11, 15, 24, 27, 28, 30, 32, 33, 35, 36, 42, 43, 45, 46, 47, 48, 51, 52, 54, 55, 56, 59, 63, 69, 84, 87, 88, 90, 91, 92, 96], "mainli": 1, "nightli": 1, "infrastructur": 1, "chpl_debug_flag": 1, "regex_max_captur": 1, "integ": [1, 25, 27, 28, 30, 32, 35, 37, 41, 42, 43, 44, 46, 48, 55, 68, 83, 87, 88, 89, 90, 91, 92, 95, 96, 98, 100], "chang": [1, 27, 28, 32, 33, 35, 42, 46, 48, 59, 62, 64, 73, 76, 77, 79, 84, 87, 91], "maximum": [1, 26, 28, 30, 32, 33, 42, 43, 47, 48, 59, 84, 87, 90, 91, 92, 93], "captur": [1, 39, 100], "group": [1, 25, 28, 30, 32, 39, 51, 52, 53, 54, 59, 66, 68, 83, 86, 89, 91, 92, 97, 98, 100], "access": [1, 2, 26, 32, 35, 50, 52, 54, 66, 71, 77, 83, 84, 99], "match": [1, 20, 24, 25, 28, 30, 32, 33, 35, 40, 41, 42, 43, 51, 52, 54, 55, 57, 59, 83, 84, 87, 88, 90, 92, 95, 97, 99], "20": [1, 3, 4, 7, 28, 32, 41, 46, 48, 62, 66, 79, 80, 87, 88, 94], "folk": 1, "instal": [1, 32, 42, 63, 80, 99], "anaconda": [1, 73, 75, 80, 81], "through": [1, 32, 41, 58, 60, 62, 73, 77], "instruct": [1, 32, 54, 73, 76, 77, 79, 80, 81, 99], "altern": [1, 62, 63, 75, 77, 80], "setup": [1, 75, 80], "them": [1, 28, 32, 35, 44, 54, 62, 76, 84, 91, 98], "explicitli": [1, 28, 32, 44, 78, 98], "arkouda_zmq_path": 1, "zmq": [1, 75], "arkouda_hdf5_path": 1, "hdf5": [1, 24, 25, 28, 30, 32, 33, 35, 42, 51, 54, 67, 69, 70, 71, 75, 79, 84, 92, 100], "arkouda_arrow_path": 1, "arrow": [1, 79], "arkouda_iconv_path": 1, "iconv": [1, 75, 79], "arkouda_idn2_path": 1, "idn2": [1, 75, 79], "ld_library_path": 1, "lib": [1, 75, 80, 98], "arkouda_skip_check_dep": 1, "skip": [1, 30, 32, 35, 54, 76, 84, 92, 98, 100], "autom": [1, 62], "do": [1, 7, 24, 25, 26, 28, 30, 32, 33, 35, 41, 42, 51, 52, 54, 59, 63, 64, 76, 78, 79, 81, 87, 88, 91, 92, 97], "repeat": [1, 25, 32, 51, 89, 96], "sinc": [1, 8, 32, 41, 46, 48, 64, 89, 91, 95, 100], "dep": [1, 75, 76, 77], "been": [1, 25, 26, 28, 32, 35, 42, 44, 51, 54, 60, 61, 62, 75, 78, 87, 89, 90], "up": [1, 7, 25, 26, 28, 30, 32, 35, 41, 42, 44, 51, 54, 58, 61, 64, 65, 75, 76, 77, 78, 84, 87, 88, 89, 90, 98, 100], "arkouda_server_user_modul": [1, 78], "absolut": [1, 32, 41, 55, 78, 87], "must": [1, 5, 6, 7, 25, 26, 27, 28, 30, 32, 33, 35, 41, 42, 43, 44, 45, 46, 48, 51, 52, 54, 55, 58, 60, 63, 66, 67, 73, 75, 76, 78, 87, 90, 91, 92, 94, 95, 96, 97, 99, 100], "also": [1, 7, 8, 25, 27, 30, 32, 37, 41, 43, 44, 51, 52, 54, 61, 63, 66, 67, 69, 70, 71, 73, 76, 80, 84, 90, 94, 95, 96, 98, 100], "servermodul": [1, 63, 64, 78], "cfg": [1, 63, 64, 78], "regist": [1, 25, 27, 28, 30, 32, 33, 34, 42, 51, 52, 54, 55, 56, 58, 83, 92], "readm": 1, "verbos": [1, 32, 34, 38], "arkouda_verbos": 1, "arkouda_server_host": 1, "hostnam": [1, 25, 26, 28, 32, 35, 42, 51, 54, 63, 73, 82, 99], "arkouda_server_port": 1, "arkouda_client_timeout": 1, "control": [1, 27, 32, 41, 95], "timeout": [1, 26, 99], "arkouda_full_stack_test": 1, "option": [1, 7, 25, 26, 27, 28, 30, 31, 32, 33, 35, 39, 42, 43, 44, 45, 46, 47, 48, 51, 52, 54, 55, 58, 59, 62, 68, 73, 75, 76, 77, 79, 82, 84, 90, 91, 92, 97, 98, 99, 100], "test_data_url": 1, "readalltest": 1, "read_all_test": 1, "arkouda_numlocal": 1, "where": [1, 16, 25, 26, 28, 30, 32, 33, 35, 36, 37, 41, 42, 43, 44, 50, 51, 54, 56, 58, 59, 60, 61, 68, 76, 77, 83, 84, 92, 93, 94, 95, 96, 98, 99, 100], "found": [1, 7, 28, 32, 33, 35, 42, 54, 58, 59, 66, 70, 77, 78, 80], "arkouda_hom": 1, "locat": [1, 30, 32, 33, 41, 42, 50, 52, 54, 59, 62, 64, 75, 80, 87, 92, 97, 100], "execut": [1, 26, 31, 32, 35, 42, 54, 58, 60, 61, 63, 64, 67, 75, 76, 78, 89, 99], "warn": [1, 32, 35, 38, 54, 84, 100], "subject": [1, 32, 55], "futur": [1, 27, 32, 35, 46, 48, 54, 84, 93], "intern": [1, 8, 20, 32, 37, 42, 54, 62], "arkouda_client_directori": [1, 50], "parent": [1, 28, 32, 40], "token": [1, 26, 50, 73, 99], "txt": 1, "arkouda_tunnel_serv": 1, "ssh": 1, "tunnel": 1, "url": [1, 26, 73, 75, 99], "arkouda_key_fil": 1, "keyfil": 1, "arkouda_password": 1, "password": [1, 80], "arkouda_log_level": [1, 32], "side": [1, 24, 25, 26, 28, 30, 32, 33, 34, 35, 39, 42, 43, 51, 52, 54, 55, 58, 62, 63, 73, 78, 80, 84, 87, 88, 89, 92, 93, 94, 95, 96, 99, 100], "log": [1, 3, 4, 5, 6, 13, 30, 32, 38, 41, 43, 45, 54, 83, 87, 92], "level": [1, 32, 38, 44, 52, 59, 63, 67, 68, 75, 76, 77, 78, 81, 84, 97, 98], "arkouda_client_mod": 1, "mode": [1, 24, 25, 27, 30, 32, 33, 35, 42, 51, 54, 83, 90, 92], "ui": 1, "api": [1, 8, 11, 13, 14, 15, 16, 17, 18, 20, 21, 28, 30, 32, 56, 58, 72, 92, 95], "displai": [1, 27, 28, 32, 45, 56, 75, 80, 91], "splash": 1, "cachedaccessor": [2, 32], "str": [2, 10, 11, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 50, 51, 52, 54, 55, 56, 59, 67, 84, 85, 87, 88, 89, 90, 91, 92, 95, 99, 100], "custom": [2, 32, 38, 58, 67, 75, 93], "properti": [2, 8, 20, 28, 32, 33, 42, 51, 52, 55, 58, 68], "object": [2, 7, 8, 10, 20, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 54, 55, 56, 58, 67, 68, 69, 70, 71, 80, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], "descriptor": [2, 32, 54], "cach": [2, 25, 32, 54], "param": [2, 25, 32, 33, 35, 42, 51, 54, 59], "namespac": [2, 8, 20, 32, 35], "g": [2, 25, 27, 28, 30, 32, 35, 41, 42, 51, 54, 55, 56, 63, 64, 66, 76, 84, 87, 89, 90, 92, 96, 99, 100], "df": [2, 28, 32, 66, 91], "type": [2, 3, 4, 5, 6, 7, 8, 11, 20, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 69, 75, 79, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 99, 100], "extens": [2, 25, 32, 33, 35, 42, 51, 54, 75, 84], "method": [2, 8, 25, 26, 27, 28, 30, 31, 32, 35, 41, 42, 43, 46, 47, 48, 50, 51, 54, 61, 66, 67, 83, 84, 89, 90, 92, 93, 95], "cl": [2, 32], "__init__": [2, 32], "assum": [2, 28, 30, 32, 35, 43, 44, 52, 62, 67, 68, 69, 76, 77, 81, 84, 91, 92, 97, 98], "seri": [2, 28, 32, 43, 55, 57], "datafram": [2, 32, 33, 35, 45, 49, 52, 57, 69, 84, 97], "index": [2, 7, 10, 24, 25, 27, 28, 30, 32, 35, 37, 39, 42, 43, 44, 51, 52, 54, 57, 59, 66, 75, 82, 83, 84, 87, 89, 92, 93, 96, 97, 100], "argument": [2, 7, 27, 28, 30, 32, 41, 42, 46, 48, 51, 52, 54, 56, 58, 73, 78, 97], "data": [2, 11, 24, 25, 27, 28, 29, 30, 32, 33, 35, 41, 42, 43, 44, 45, 51, 52, 53, 54, 55, 56, 58, 59, 66, 69, 71, 72, 83, 85, 86, 88, 89, 90, 92, 96, 97, 99, 100], "datetimeaccessor": [2, 32], "stringaccessor": [2, 32], "date_oper": [2, 32], "string_oper": [2, 32], "power_divergenceresult": [3, 4, 32], "namedtupl": [3, 4, 17, 32], "statist": [3, 4, 30, 32, 42, 59, 83, 87, 92], "pvalu": [3, 4, 32], "result": [3, 4, 7, 25, 28, 30, 32, 33, 35, 37, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 54, 55, 58, 59, 66, 67, 68, 69, 77, 84, 87, 90, 91, 92, 95, 96, 97, 100], "power": [3, 4, 13, 32, 42, 72, 94], "diverg": [3, 4, 32], "test": [3, 4, 7, 25, 28, 32, 35, 44, 60, 62, 63, 64, 66, 73, 78, 91, 98], "float64": [3, 4, 5, 6, 12, 29, 30, 32, 41, 42, 43, 44, 47, 48, 53, 59, 67, 68, 82, 86, 87, 90, 91, 92, 93, 95, 98], "chisquar": [3, 4, 32], "f_ob": [3, 4, 32], "f_exp": [3, 4, 32], "none": [3, 4, 7, 8, 10, 14, 15, 16, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 59, 76, 77, 84, 85, 89, 90, 91, 92, 93, 95, 97, 99], "ddof": [3, 4, 30, 32, 42, 55, 87, 92, 93], "comput": [3, 4, 5, 6, 25, 26, 28, 30, 32, 37, 41, 42, 51, 54, 58, 66, 84, 87, 89, 91, 92, 93, 95, 96, 98, 100], "chi": [3, 4, 32], "squar": [3, 4, 13, 30, 32, 41, 42, 87, 92], "p": [3, 4, 7, 32, 42, 43], "valu": [3, 4, 7, 8, 17, 24, 25, 26, 27, 28, 30, 32, 33, 35, 36, 37, 41, 42, 43, 44, 46, 47, 48, 51, 52, 54, 55, 56, 59, 66, 68, 70, 77, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 99, 100], "pdarrai": [3, 4, 5, 6, 7, 24, 25, 27, 28, 30, 32, 33, 35, 37, 39, 41, 42, 43, 44, 46, 47, 48, 51, 52, 53, 54, 55, 56, 58, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 100], "int": [3, 4, 7, 8, 10, 11, 14, 15, 16, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 50, 51, 52, 54, 55, 56, 58, 68, 84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100], "delta": [3, 4, 30, 32, 37, 42, 87, 92, 93], "degre": [3, 4, 30, 32, 41, 42, 87, 92, 93], "freedom": [3, 4, 30, 32, 42, 87, 92, 93], "return": [3, 4, 5, 6, 7, 11, 20, 24, 25, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 67, 69, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100], "akstat": [3, 4, 32], "import": [3, 4, 5, 6, 25, 27, 28, 32, 35, 41, 45, 50, 54, 58, 62, 68, 73, 75, 78, 91, 93, 99], "connect": [3, 4, 5, 6, 26, 28, 32, 43, 50, 58, 63, 80, 83, 84, 91], "arrai": [3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 30, 32, 33, 35, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 58, 59, 67, 68, 73, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97, 100], "10": [3, 4, 7, 25, 28, 30, 32, 35, 41, 42, 43, 45, 46, 47, 48, 51, 52, 53, 54, 56, 58, 59, 66, 75, 77, 79, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97], "30": [3, 4, 7, 32, 63, 79, 88], "8": [3, 4, 5, 6, 28, 30, 32, 35, 41, 42, 43, 46, 47, 48, 51, 53, 54, 59, 66, 67, 77, 79, 84, 86, 87, 88, 90, 91, 92, 94, 95, 96], "333333333333334": [3, 4, 32], "03960235520756414": [3, 4, 32], "stat": [3, 4, 32, 59], "power_diverg": [3, 4, 32], "en": [3, 4, 32, 58], "wikipedia": [3, 4, 32], "org": [3, 4, 11, 28, 32, 56, 58, 88], "squared_test": [3, 4, 32], "gener": [3, 4, 11, 20, 25, 26, 28, 31, 32, 37, 38, 41, 42, 43, 45, 46, 47, 48, 50, 52, 55, 57, 58, 59, 63, 64, 66, 67, 68, 70, 75, 76, 80, 82, 84, 87, 90, 97], "html": [3, 4, 11, 28, 32, 56, 58, 75, 88], "lambda_": [3, 4, 32], "lambda": [3, 4, 32], "pearson": [3, 4, 28, 32, 42], "cressi": [3, 4, 32], "read": [3, 4, 24, 25, 28, 32, 33, 35, 36, 42, 52, 54, 67, 68, 69, 70, 88, 100], "likelihood": [3, 4, 30, 32, 42, 87, 92], "freeman": [3, 4, 32], "tukei": [3, 4, 32], "mod": [3, 4, 32, 42], "neyman": [3, 4, 32], "correspond": [3, 4, 7, 25, 27, 28, 30, 32, 33, 35, 36, 37, 39, 41, 42, 43, 50, 51, 52, 54, 58, 68, 70, 84, 87, 89, 91, 92, 93, 94, 96, 97, 100], "5": [3, 4, 5, 6, 7, 24, 25, 26, 28, 30, 32, 41, 42, 43, 44, 46, 47, 48, 51, 53, 54, 59, 66, 67, 68, 70, 77, 79, 84, 86, 87, 88, 90, 91, 92, 94, 95, 96, 98, 100], "3": [3, 4, 5, 6, 24, 28, 30, 32, 33, 35, 39, 41, 42, 43, 44, 45, 46, 47, 48, 51, 53, 54, 56, 58, 59, 66, 67, 68, 76, 77, 79, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 98, 100], "y": [3, 4, 5, 6, 32, 41, 42, 45, 60, 76], "109302162163285": [3, 4, 32], "04380595350226197": [3, 4, 32], "modifi": [3, 4, 28, 32, 63, 91], "scale": [3, 4, 25, 32, 45, 61, 66, 72], "2024": [3, 4, 32], "v1": [3, 4, 32], "12": [3, 4, 7, 28, 30, 32, 35, 41, 51, 54, 56, 59, 79, 87, 88, 92, 94, 96], "special": [4, 27, 32, 52, 57, 95, 97], "xlogi": [5, 6, 32], "pdarrayclass": [5, 6, 24, 25, 27, 28, 30, 32, 33, 35, 37, 39, 41, 43, 44, 47, 48, 51, 52, 53, 54, 57, 91], "np": [5, 6, 8, 11, 13, 14, 15, 16, 17, 18, 20, 21, 24, 25, 28, 29, 30, 32, 37, 41, 42, 43, 45, 51, 54, 55, 66, 84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 100], "datatyp": [5, 6, 32, 43, 68], "castabl": [5, 6, 32], "4": [5, 6, 24, 25, 28, 30, 32, 35, 39, 41, 42, 43, 44, 46, 47, 48, 51, 53, 54, 56, 59, 66, 68, 76, 77, 79, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 98, 100], "6": [5, 6, 7, 24, 28, 30, 32, 35, 41, 42, 43, 44, 51, 54, 56, 59, 66, 76, 77, 79, 80, 82, 84, 87, 88, 90, 91, 92, 93, 94, 96, 98, 100], "7": [5, 6, 28, 30, 32, 41, 42, 43, 44, 46, 47, 48, 51, 53, 56, 66, 76, 77, 79, 84, 86, 87, 88, 90, 91, 92, 94, 96, 98], "6094379124341003": [5, 6, 32], "5835189384561099": [5, 6, 32], "8377304471659395": [5, 6, 32], "317766166719343": [5, 6, 32], "00000000000000000": [5, 6, 28, 32, 91], "4657359027997265": [5, 6, 32], "4930614433405491": [5, 6, 32], "9314718055994531": [5, 6, 32], "nonuniqueerror": 7, "valueerror": [7, 25, 26, 28, 30, 32, 33, 35, 36, 37, 41, 42, 43, 44, 47, 48, 51, 52, 53, 54, 84, 86, 87, 89, 90, 92, 93, 96, 97, 99, 100], "inappropri": 7, "correct": [7, 19, 28, 32, 58, 63, 76, 80, 82, 91], "map": [7, 25, 26, 27, 28, 32, 35, 36, 54, 56, 84, 91, 100], "multipl": [7, 28, 32, 35, 41, 51, 55, 58, 59, 60, 66, 68, 70, 71, 78, 82, 84, 85, 87, 91, 96], "spars": [7, 30, 32, 56, 92, 95], "sequenc": [7, 25, 27, 32, 33, 41, 42, 43, 44, 51, 53, 56, 86, 90, 95, 96, 98, 100], "dens": [7, 25, 30, 32, 92], "replac": [7, 28, 32, 35, 40, 42, 51, 54, 60, 62, 68, 77, 78, 79, 96, 100], "queri": [7, 84], "item": [7, 25, 28, 32, 42, 43, 44, 52, 56, 89, 91, 97, 98], "search": [7, 25, 32, 39, 44, 54, 83, 89], "each": [7, 24, 25, 26, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 48, 51, 52, 54, 55, 56, 58, 59, 66, 68, 75, 78, 84, 87, 88, 89, 91, 92, 93, 95, 96, 97, 98, 100], "row": [7, 28, 30, 32, 33, 35, 42, 44, 51, 53, 54, 57, 66, 67, 84, 86, 91, 92, 96, 98], "same": [7, 24, 25, 27, 28, 30, 32, 33, 35, 41, 42, 43, 44, 50, 51, 52, 53, 54, 55, 62, 66, 67, 68, 70, 76, 77, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100], "shape": [7, 8, 10, 15, 20, 24, 25, 28, 32, 33, 41, 42, 46, 48, 52, 54, 56, 68, 83, 87, 88, 89, 95], "dtype": [7, 8, 10, 11, 19, 20, 24, 25, 28, 30, 32, 33, 35, 37, 40, 41, 42, 43, 44, 46, 47, 48, 51, 53, 54, 55, 57, 58, 59, 66, 82, 83, 84, 87, 88, 90, 91, 92, 93, 94, 95, 98, 100], "its": [7, 11, 13, 14, 15, 16, 17, 18, 21, 25, 29, 32, 33, 41, 42, 51, 52, 54, 62, 68, 77, 87, 95, 96, 97, 100], "int64": [7, 12, 25, 27, 28, 29, 30, 32, 33, 35, 37, 39, 41, 42, 43, 44, 46, 47, 48, 51, 53, 54, 55, 58, 59, 66, 67, 68, 82, 84, 86, 87, 89, 90, 91, 92, 93, 95, 96, 98, 100], "in1d_interv": 7, "val": [7, 29, 30, 32, 51, 52, 56, 92, 96], "interv": [7, 32, 41, 43, 46, 48, 55, 90, 93], "symmetr": [7, 32, 44, 51, 66, 83, 98], "fals": [7, 16, 18, 19, 21, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 46, 47, 48, 51, 52, 54, 55, 56, 59, 66, 82, 84, 85, 87, 89, 90, 91, 92, 95, 96, 98, 100], "membership": [7, 32, 44, 98], "half": [7, 32, 46, 48], "python": [7, 8, 20, 24, 25, 26, 27, 31, 32, 42, 43, 44, 50, 52, 54, 59, 72, 75, 80, 81, 83, 84, 87, 88, 89, 90, 91, 94, 95, 100], "float": [7, 10, 11, 19, 26, 28, 32, 41, 42, 43, 46, 47, 48, 87, 90, 91, 93, 95], "tupl": [7, 8, 10, 11, 15, 16, 19, 20, 21, 25, 27, 28, 29, 30, 32, 37, 41, 42, 43, 44, 47, 48, 51, 52, 54, 56, 66, 84, 89, 90, 91, 92, 93, 95, 97, 98, 100], "overlap": [7, 28, 32, 40, 54, 100], "lower_bounds_inclus": 7, "upper_bounds_exclus": 7, "bool": [7, 10, 11, 12, 15, 16, 18, 19, 21, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 59, 68, 82, 84, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100], "boolean": [7, 11, 25, 28, 30, 32, 39, 41, 42, 44, 51, 52, 54, 66, 68, 87, 89, 91, 92, 94, 95, 96, 97, 98, 100], "contain": [7, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 39, 41, 42, 43, 44, 45, 51, 52, 53, 54, 55, 57, 58, 59, 63, 64, 66, 67, 68, 73, 78, 82, 83, 84, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 100], "rang": [7, 25, 28, 32, 33, 35, 37, 41, 42, 43, 46, 47, 48, 51, 52, 54, 55, 82, 84, 87, 90, 91, 93, 97, 100], "defin": [7, 8, 20, 25, 27, 28, 29, 30, 31, 32, 33, 35, 38, 41, 42, 43, 51, 52, 54, 55, 58, 62, 88, 89, 90, 91, 92, 93, 95], "low": [7, 27, 28, 32, 41, 42, 43, 46, 47, 48, 66, 84, 90], "high": [7, 27, 28, 32, 41, 42, 43, 46, 47, 48, 66, 90], "inclus": [7, 28, 32, 41, 42, 43, 46, 47, 48, 55, 87, 90, 94], "equival": [7, 24, 25, 28, 30, 32, 35, 41, 42, 43, 44, 53, 54, 55, 63, 66, 86, 87, 88, 90, 98], "But": 7, "faster": [7, 25, 32, 44, 63, 89, 98], "mani": [7, 25, 59, 89, 92], "second": [7, 26, 32, 36, 41, 43, 44, 52, 54, 55, 56, 58, 59, 63, 66, 87, 90, 95, 97, 98, 99, 100], "trivial": 7, "size": [7, 8, 20, 24, 25, 28, 29, 30, 32, 33, 35, 37, 41, 42, 43, 46, 47, 48, 51, 52, 53, 54, 55, 56, 59, 66, 68, 69, 70, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 100], "interval_lookup": 7, "kei": [7, 25, 28, 30, 32, 33, 34, 35, 36, 41, 44, 52, 58, 66, 68, 78, 80, 85, 91, 92, 97, 98], "fillvalu": 7, "tiebreak": 7, "hierarch": 7, "appli": [7, 28, 30, 32, 41, 59, 87, 91, 92, 100], "over": [7, 25, 28, 32, 35, 41, 42, 46, 48, 51, 54, 82, 87, 88, 89, 91, 93, 95, 96, 100], "express": [7, 25, 32, 35, 54, 59, 83, 84, 89, 91, 94, 95], "upper_bounds_inclus": 7, "entri": [7, 28, 32, 42, 52, 54, 58, 59, 91], "scalar": [7, 25, 32, 41, 42, 51, 52, 58, 59, 82, 83, 89, 93, 94, 96, 97], "numer": [7, 28, 32, 42, 43, 45, 52, 53, 57, 68, 83, 84, 86, 89, 95, 97, 100], "than": [7, 8, 24, 25, 28, 30, 32, 33, 35, 41, 42, 43, 44, 46, 48, 51, 52, 53, 54, 60, 62, 63, 70, 84, 86, 88, 89, 90, 91, 92, 95, 98, 100], "lowest": [7, 28, 32, 42, 43, 46, 48], "chosen": [7, 32, 41, 42, 87, 95, 96], "given": [7, 20, 25, 28, 30, 32, 35, 42, 43, 44, 46, 48, 54, 55, 56, 59, 79, 84, 89, 90, 91, 92, 100], "valid": [7, 20, 25, 32, 35, 41, 43, 52, 54, 84, 89, 95, 100], "is_cosort": 7, "iff": [7, 25, 32, 33, 42, 52, 54, 55, 87, 93], "cosort": 7, "were": [7, 24, 30, 32, 33, 35, 42, 51, 54, 63, 78, 88, 92, 96, 100], "column": [7, 25, 28, 30, 32, 33, 35, 42, 45, 51, 52, 53, 54, 66, 67, 70, 71, 84, 86, 92, 96, 97], "tabl": [7, 26, 32, 34, 42, 51, 54, 58, 59, 79, 95, 96], "cosorted": 7, "rais": [7, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 54, 55, 58, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100], "typeerror": [7, 25, 27, 28, 29, 30, 32, 33, 35, 37, 38, 41, 42, 43, 44, 47, 48, 51, 52, 53, 54, 55, 58, 84, 86, 87, 89, 90, 92, 93, 97, 98, 100], "left_align": 7, "right": [7, 27, 28, 32, 42, 46, 48, 53, 54, 55, 62, 86, 91, 94, 99, 100], "two": [7, 23, 25, 27, 28, 30, 32, 33, 37, 41, 42, 43, 44, 51, 52, 54, 55, 56, 66, 67, 76, 78, 84, 87, 90, 92, 98, 100], "impli": [7, 94], "discard": [7, 25, 89], "appear": [7, 25, 28, 30, 32, 33, 35, 42, 44, 52, 54, 62, 92, 93], "lookup": [7, 32, 33, 52], "domain": 7, "uniqu": [7, 17, 25, 28, 30, 32, 33, 41, 42, 44, 51, 52, 54, 66, 68, 83, 84, 89, 92, 93, 94, 96, 97, 98, 100], "treat": [7, 24, 27, 28, 29, 32, 53, 59, 66, 86, 88, 91], "evalu": [7, 32, 42, 87, 93], "while": [7, 32, 35, 53, 64, 68, 70, 75, 80, 84, 86], "cannot": [7, 24, 25, 27, 28, 30, 32, 33, 35, 41, 42, 43, 51, 52, 54, 55, 70, 80, 84, 88, 89, 92, 95, 100], "other": [7, 25, 27, 28, 30, 32, 33, 35, 41, 42, 43, 46, 48, 51, 53, 54, 55, 59, 63, 64, 66, 84, 85, 86, 87, 89, 92, 96, 98, 100], "complex": [7, 73], "achiev": [7, 75], "arang": [7, 10, 24, 28, 30, 32, 35, 41, 42, 43, 44, 45, 51, 58, 66, 83, 84, 87, 88, 90, 91, 92, 93, 94, 95, 96, 98], "desir": [7, 26, 27, 32, 41, 42, 43, 46, 47, 48, 50, 59, 60, 73, 78, 87, 90, 93, 95, 99, 100], "word": [7, 32, 46, 48], "keys1": 7, "twenti": 7, "_": [7, 32, 39, 54, 100], "keys2": 7, "three": [7, 32, 43, 44, 54, 55, 75, 90, 94, 95, 100], "four": [7, 32, 44, 54, 55, 90, 100], "five": [7, 32, 44, 54, 90, 100], "21": [7, 32, 41, 87, 88], "22": [7, 87, 88], "23": [7, 88], "24": [7, 32, 41, 42, 59, 79, 87, 88], "25": [7, 30, 32, 35, 42, 43, 88, 90, 92], "args1": 7, "thirti": 7, "args2": 7, "aku": [7, 32, 33, 49, 85], "direct": [7, 62, 68, 75], "intermedi": 7, "revkei": 7, "revindic": 7, "revarg": 7, "idx": [7, 28, 32, 66], "right_align": 7, "hand": [7, 62, 94], "logic": [7, 24, 25, 32, 41, 43, 47, 48, 51, 54, 58, 83, 88, 90, 93, 96], "surviv": 7, "search_interv": 7, "uint": [7, 28, 32, 35, 42, 43, 54, 67], "compon": [7, 25, 27, 28, 30, 32, 33, 34, 42, 51, 52, 54, 55, 56, 59, 68, 70, 92], "dimens": [7, 24, 25, 28, 32, 41, 42, 54, 66, 68, 88, 89, 95, 96], "multi": [7, 24, 27, 30, 32, 35, 44, 52, 66, 85, 88, 90, 92, 95, 97, 98], "dimension": [7, 24, 32, 41, 43, 52, 84, 88, 95, 97], "satisfi": [7, 28, 32, 35], "condit": [7, 16, 28, 32, 41, 42, 87], "11": [7, 28, 32, 41, 51, 56, 59, 64, 66, 67, 87, 88, 91, 93, 94, 96], "end": [7, 25, 28, 32, 37, 39, 41, 42, 43, 51, 54, 55, 61, 83, 89, 90, 94, 96, 100], "9": [7, 25, 28, 30, 32, 35, 41, 42, 43, 51, 53, 54, 56, 59, 66, 76, 77, 84, 86, 87, 88, 90, 91, 92, 93, 94, 96, 100], "15": [7, 25, 28, 32, 46, 48, 54, 77, 88, 94], "bi_start": 7, "bigint_from_uint_arrai": [7, 32, 42, 43], "cast": [7, 8, 27, 32, 41, 42, 43, 54, 58, 83, 84, 90, 100], "uint64": [7, 12, 27, 29, 30, 32, 41, 42, 43, 47, 48, 53, 59, 68, 82, 86, 87, 90, 91, 93, 95, 100], "bi_end": 7, "bi_val": 7, "92233720368547758091": 7, "92233720368547758090": 7, "166020696663385964564": 7, "36893488147419103233": 7, "92233720368547758085": 7, "92233720368547758095": 7, "110680464442257309696": 7, "110680464442257309708": 7, "166020696663385964574": 7, "unsqueez": 7, "zero_up": 7, "wrapper": [8, 11, 13, 14, 15, 16, 17, 18, 20, 21, 27, 32, 95], "ndarrai": [8, 20, 24, 25, 32, 42, 43, 45, 51, 54, 66, 84, 87, 88, 89, 95, 96, 100], "differ": [8, 25, 26, 27, 28, 30, 32, 33, 35, 37, 41, 42, 43, 44, 50, 51, 52, 54, 55, 56, 58, 59, 64, 66, 67, 68, 70, 76, 77, 83, 84, 88, 90, 91, 92, 93, 98, 99], "particular": [8, 78], "promot": [8, 58], "rule": [8, 32, 41, 95], "subset": [8, 25, 26, 28, 31, 32, 51, 78, 87, 91, 96], "goal": 8, "minim": [8, 28, 32, 63, 64, 90, 91], "compliant": 8, "onli": [8, 20, 25, 28, 30, 32, 33, 35, 39, 41, 42, 43, 44, 46, 48, 51, 52, 53, 54, 58, 59, 61, 63, 64, 66, 68, 70, 75, 78, 79, 81, 82, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100], "subclass": 8, "n": [8, 20, 25, 28, 30, 32, 35, 41, 42, 43, 44, 46, 47, 48, 51, 52, 54, 55, 67, 77, 79, 82, 87, 88, 89, 90, 91, 92, 96, 97], "docstr": [8, 11, 13, 14, 15, 16, 17, 18, 20, 21, 58], "restrict": [8, 20], "usag": [8, 20, 65, 73, 82, 96, 99], "attribut": [8, 24, 25, 28, 33, 35, 42, 54, 55, 84, 88, 95], "underscor": [8, 20], "construct": [8, 20, 25, 32, 43, 46, 48, 51, 54, 58, 66, 83, 92, 94], "directli": [8, 20, 25, 32, 42, 52, 53, 54, 66, 75, 86, 88, 89, 91, 95, 100], "rather": [8, 20, 25, 28, 32, 54], "creation": [8, 20, 25, 58, 62, 83], "asarrai": [8, 10, 20], "devic": [8, 10, 20], "_type": [8, 10, 11, 19], "mt": [8, 20], "ndim": [8, 20, 24, 25, 32, 42, 54, 83, 88, 89, 95], "ellipsi": [8, 10, 11, 15, 16, 19, 20, 21, 32, 42, 43, 47, 48, 56], "to_devic": [8, 20], "stream": [8, 20, 63], "to_ndarrai": [8, 20, 24, 25, 27, 32, 33, 41, 42, 43, 45, 51, 54, 55, 66, 83, 84, 88, 89, 93, 95, 96, 100], "convert": [8, 20, 24, 25, 27, 28, 32, 33, 41, 42, 43, 51, 52, 54, 55, 56, 67, 84, 88, 89, 91, 95, 96, 97, 98, 100], "tolist": [8, 20], "nest": [8, 20, 32, 35, 68, 84], "inf": [9, 32, 41], "nan": [9, 28, 30, 32, 41, 52, 91, 92, 95], "pi": [9, 32, 41], "stop": [10, 26, 32, 43, 90, 94], "_array_object": [10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 23], "obj": [10, 32, 35, 56], "nestedsequ": 10, "supportsbufferprotocol": [10, 20], "copi": [10, 11, 15, 24, 28, 32, 33, 35, 51, 53, 96], "empti": [10, 27, 28, 30, 32, 35, 41, 42, 44, 51, 52, 54, 75, 87, 90, 91, 93, 97], "empty_lik": 10, "ey": 10, "n_row": 10, "n_col": 10, "k": [10, 32, 42, 59, 87, 93], "from_dlpack": 10, "full": [10, 25, 32, 39, 41, 43, 45, 54, 55, 61, 63, 73, 75, 77, 81, 89, 100], "fill_valu": [10, 32, 43], "full_lik": [10, 32, 43], "linspac": [10, 30, 32, 41, 43, 83, 87, 90, 92, 95], "num": [10, 26, 29, 32, 41], "endpoint": [10, 32, 46, 48], "meshgrid": 10, "xy": 10, "ones_lik": [10, 32, 43, 83, 90], "tril": 10, "triu": 10, "zero": [10, 30, 32, 41, 42, 43, 62, 83, 90, 92, 94, 95], "zeros_lik": [10, 32, 43, 83, 90], "astyp": [11, 32, 42, 54], "can_cast": 11, "from_": 11, "compat": [11, 13, 14, 15, 16, 17, 18, 21, 25, 28, 32, 42, 51, 55, 56, 91, 92], "finfo_object": 11, "ep": 11, "max": [11, 19, 30, 32, 41, 42, 51, 54, 59, 83, 87, 92, 93, 100], "min": [11, 19, 30, 32, 41, 42, 51, 59, 83, 87, 92, 93], "smallest_norm": 11, "iinfo_object": 11, "isdtyp": 11, "kind": [11, 29, 32], "whether": [11, 25, 28, 30, 32, 35, 39, 41, 44, 51, 52, 54, 55, 66, 84, 89, 96, 97, 98, 100], "latest": [11, 32, 56, 58, 76, 77, 80], "api_specif": [11, 32, 56], "result_typ": 11, "arrays_and_dtyp": 11, "complex128": [12, 29, 32], "complex64": [12, 29, 32], "float32": [12, 29, 32, 87, 90, 93], "int16": [12, 29, 32, 87, 90, 93, 95, 100], "int32": [12, 29, 32, 87, 90, 93, 95, 100], "int8": [12, 29, 32, 87, 90, 93, 95, 100], "uint16": [12, 29, 32, 87, 90, 93, 95, 100], "uint32": [12, 29, 32, 35, 84, 87, 90, 93, 95, 100], "uint8": [12, 29, 32, 41, 54, 68, 87, 90, 93, 95, 100], "ab": [13, 32, 41, 55, 83, 87], "aco": 13, "arcco": [13, 32, 41], "acosh": 13, "arccosh": [13, 32, 41], "x1": [13, 16, 23], "x2": [13, 16, 23], "asin": 13, "arcsin": [13, 32, 41], "asinh": 13, "arcsinh": [13, 32, 41], "atan": 13, "arctan": [13, 32, 41], "atan2": 13, "arctan2": [13, 32, 41], "atanh": 13, "arctanh": [13, 32, 41], "bitwise_and": 13, "bitwise_invert": 13, "invert": [13, 30, 32, 44, 98], "bitwise_left_shift": 13, "left_shift": 13, "bitwise_or": 13, "bitwise_right_shift": 13, "right_shift": 13, "bitwise_xor": 13, "ceil": [13, 32, 41], "conj": 13, "co": [13, 30, 32, 41, 43, 83, 87, 92], "cosh": [13, 32, 41], "divid": [13, 32, 42], "equal": [13, 28, 32, 37, 41, 46, 48, 68, 70, 93, 96], "exp": [13, 32, 41, 43, 83, 87], "expm1": [13, 32, 41], "floor": [13, 32, 41, 42], "floor_divid": [13, 32, 42], "greater": [13, 32, 43, 46, 48, 90], "greater_equ": 13, "imag": 13, "isfinit": [13, 32, 41], "isinf": [13, 32, 41], "isnan": [13, 32, 41], "less": [13, 25, 30, 32, 33, 42, 46, 48, 51, 54], "less_equ": 13, "log10": [13, 32, 41], "log1p": [13, 32, 41], "log2": [13, 32, 41], "logaddexp": 13, "logical_and": 13, "logical_not": 13, "logical_or": 13, "logical_xor": 13, "multipli": [13, 30, 32, 46, 48, 58, 92], "neg": [13, 32, 43, 46, 48, 51, 61, 90, 94, 96], "not_equ": 13, "posit": [13, 28, 32, 39, 40, 42, 52, 54, 94, 97, 100], "pow": 13, "remaind": [13, 32, 42, 54, 100], "round": [13, 32, 41, 59], "sign": [13, 32, 35, 41, 42, 46, 48, 84, 91, 95], "sin": [13, 32, 41, 83, 87], "sinh": [13, 32, 41], "sqrt": [13, 30, 32, 42, 87, 92], "subtract": 13, "tan": [13, 32, 41], "tanh": [13, 32, 41], "trunc": [13, 32, 41], "axi": [14, 15, 16, 18, 19, 21, 23, 28, 32, 33, 45, 51, 52, 53, 86, 91, 96, 97], "broadcast_arrai": 15, "broadcast_to": 15, "broadcast": [15, 30, 32, 41, 42, 56, 83, 87, 92], "concat": [15, 28, 32, 33, 51, 52, 91, 97], "concaten": [15, 25, 28, 32, 44, 51, 52, 54, 56, 58, 83, 96, 97, 100], "expand_dim": 15, "flip": 15, "permute_dim": 15, "transpos": [15, 32, 51, 84], "reshap": [15, 24, 32, 42, 83, 88], "roll": 15, "shift": 15, "squeez": 15, "stack": [15, 100], "argmax": [16, 30, 32, 42, 51, 83, 87, 92, 93], "keepdim": [16, 19, 21], "argmin": [16, 30, 32, 42, 51, 83, 87, 92, 93], "nonzero": [16, 30, 32, 40, 54, 100], "uniqueallresult": 17, "count": [17, 28, 30, 32, 40, 41, 42, 51, 52, 54, 59, 66, 83, 87, 92, 96, 100], "inverse_indic": 17, "uniquecountsresult": 17, "uniqueinverseresult": 17, "unique_al": 17, "unique_count": 17, "unique_invers": 17, "unique_valu": [17, 32, 41, 42, 93], "argsort": [18, 25, 26, 28, 30, 32, 33, 42, 53, 83, 86, 87, 89, 91, 92, 100], "descend": [18, 28, 32, 43, 52, 90, 91, 97], "stabl": [18, 32, 53, 86, 88], "mean": [19, 26, 28, 30, 32, 35, 42, 43, 46, 48, 50, 51, 54, 59, 83, 84, 87, 92, 93], "prod": [19, 30, 32, 42, 51, 83, 87, 92, 93], "std": [19, 30, 32, 42, 55, 83, 87, 92, 93], "sum": [19, 30, 32, 41, 42, 51, 55, 56, 83, 87, 92, 93], "annot": 20, "aren": [20, 76, 77], "signatur": [20, 31, 58], "input": [20, 25, 27, 28, 30, 41, 42, 43, 44, 51, 53, 55, 58, 62, 84, 86, 87, 89, 92, 95, 97, 98], "pycapsul": 20, "supportsdlpack": 20, "protocol": 20, "proto": 20, "def": [20, 58, 67, 78], "meth": 20, "self": [20, 25, 28, 32, 42, 51, 54, 84, 85, 88, 89, 91, 95, 96, 97, 100], "Such": 20, "primarili": [20, 84], "static": [20, 25, 28, 30, 32, 33, 42, 51, 52, 54, 92], "checker": 20, "recogn": 20, "structur": [20, 25, 28, 32, 51, 66, 70, 91, 92, 95, 96, 100], "subtyp": 20, "duck": 20, "c": [20, 24, 28, 32, 33, 42, 43, 44, 45, 51, 54, 59, 61, 63, 76, 82, 88, 91, 95, 96, 98, 100], "func": 20, "pep": 20, "544": 20, "decor": 20, "runtime_check": 20, "act": [20, 32, 42, 58], "runtim": [20, 26, 61], "presenc": 20, "ignor": [20, 28, 30, 32, 35, 41, 55, 84, 91, 95], "genproto": 20, "linalg": [22, 32, 57], "matmul": 23, "matrix": [23, 28, 30, 32, 56, 92], "product": [23, 30, 32, 41, 42, 43, 84, 87, 88, 92, 93], "matrix_transpos": 23, "tensordot": 23, "vecdot": 23, "arrayview": [24, 32, 35, 41, 42, 83, 84, 95], "row_major": [24, 32, 42, 88], "view": [24, 32, 62, 66, 71, 75, 81, 88, 95], "arraryview": [24, 32, 88], "similarli": [24, 32, 59, 66, 88], "store": [24, 27, 28, 30, 32, 33, 35, 43, 47, 48, 50, 54, 59, 67, 68, 71, 80, 84, 88, 89, 90, 92, 96, 100], "being": [24, 28, 32, 33, 35, 41, 42, 52, 66, 68, 69, 70, 78, 84, 88, 91, 94, 97], "element": [24, 25, 28, 30, 32, 36, 37, 39, 41, 42, 43, 44, 51, 52, 54, 55, 58, 66, 78, 83, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 100], "int_scalar": [24, 25, 28, 29, 30, 32, 35, 41, 42, 43, 47, 48, 51, 53, 54, 55, 86, 87, 88, 90, 92, 93, 95], "items": [24, 32, 42, 43, 54, 83, 84, 88, 95], "byte": [24, 25, 28, 29, 32, 35, 37, 42, 43, 54, 68, 73, 84, 88, 89, 91, 95, 100], "By": [24, 25, 27, 28, 30, 32, 33, 35, 41, 42, 44, 51, 54, 55, 88, 92, 98, 100], "f": [24, 25, 32, 41, 42, 43, 54, 73, 76, 77, 79, 84, 87, 88, 100], "column_major": [24, 32, 42, 88], "objtyp": [24, 25, 28, 30, 32, 33, 42, 51, 52, 54, 68], "to_hdf": [24, 25, 27, 28, 30, 32, 33, 35, 42, 51, 54, 68, 71, 83, 84, 92], "prefix_path": [24, 25, 27, 28, 30, 32, 33, 35, 42, 51, 54, 92], "dataset": [24, 25, 27, 28, 30, 32, 33, 35, 42, 51, 54, 67, 68, 70, 71, 92, 100], "truncat": [24, 25, 27, 30, 32, 33, 35, 41, 42, 51, 54, 68, 70, 92], "file_typ": [24, 25, 27, 28, 30, 32, 33, 35, 42, 51, 54, 92], "distribut": [24, 25, 27, 28, 30, 32, 33, 35, 42, 43, 45, 46, 47, 48, 51, 54, 73, 76, 77, 84, 87, 88, 89, 90, 92, 95, 98, 100], "save": [24, 25, 28, 30, 32, 33, 35, 42, 51, 54, 59, 60, 62, 63, 68, 69, 70, 84, 89, 92, 98], "path": [24, 28, 32, 33, 35, 36, 42, 50, 59, 64, 75, 76, 77, 78, 80, 84], "append": [24, 25, 28, 30, 32, 33, 35, 42, 44, 51, 54, 68, 70, 83, 90, 92, 100], "overwrit": [24, 25, 28, 30, 32, 33, 35, 42, 51, 54, 92, 95], "exist": [24, 25, 26, 28, 30, 32, 33, 35, 36, 42, 43, 51, 54, 68, 70, 75, 90, 91, 92, 99], "format": [24, 25, 26, 27, 28, 32, 33, 34, 35, 42, 50, 51, 54, 58, 66, 68, 69, 70, 78, 91, 96, 99, 100], "date": [24, 32, 55, 62], "to_list": [24, 25, 27, 32, 33, 42, 51, 52, 54, 66, 84, 88, 95, 96, 100], "transfer": [24, 25, 28, 32, 35, 42, 51, 54, 59, 84, 88, 89, 91, 95, 96, 100], "client": [24, 25, 28, 32, 42, 43, 54, 55, 57, 69, 75, 76, 77, 78, 79, 80, 83, 88, 89, 91, 95, 96, 100], "exce": [24, 25, 28, 32, 42, 43, 47, 48, 54, 55, 84, 88, 89, 90, 91, 95, 100], "maxtransferbyt": [24, 25, 28, 32, 42, 43, 54, 55, 84, 88, 89, 91, 95, 100], "runtimeerror": [24, 25, 26, 28, 30, 32, 33, 34, 35, 39, 41, 42, 43, 44, 51, 52, 54, 55, 84, 87, 88, 89, 90, 92, 93, 95, 98, 99, 100], "error": [24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 38, 39, 41, 42, 43, 51, 52, 54, 55, 58, 68, 70, 80, 84, 87, 88, 89, 91, 92, 93, 95, 99, 100], "thrown": [24, 25, 28, 32, 33, 34, 35, 39, 42, 43, 51, 52, 54, 84, 87, 88, 89, 93, 95, 100], "receiv": [24, 25, 26, 28, 32, 33, 35, 42, 51, 54, 84, 88, 95, 99], "doe": [24, 25, 26, 28, 30, 32, 33, 35, 36, 42, 43, 45, 51, 52, 54, 63, 66, 68, 70, 84, 88, 89, 90, 91, 92, 95, 97, 99, 100], "protect": [24, 25, 32, 42, 43, 54, 84, 88, 89, 95, 100], "overflow": [24, 25, 32, 41, 42, 54, 84, 88, 89, 95, 100], "memori": [24, 25, 26, 28, 32, 33, 35, 42, 51, 54, 64, 65, 68, 73, 84, 88, 89, 95, 100], "run": [24, 25, 26, 28, 32, 35, 41, 42, 51, 54, 63, 64, 66, 73, 75, 76, 77, 79, 80, 82, 84, 88, 89, 95, 96, 99, 100], "assumpt": [24, 25, 32, 42, 43, 54, 84, 88, 89, 95, 100], "mai": [24, 25, 28, 32, 33, 35, 42, 43, 44, 46, 48, 54, 66, 68, 73, 75, 77, 79, 80, 84, 88, 89, 90, 91, 95, 100], "overrid": [24, 25, 27, 32, 42, 43, 54, 63, 84, 88, 89, 95, 100], "larger": [24, 25, 32, 42, 43, 54, 62, 66, 84, 88, 89, 95, 100], "proce": [24, 25, 32, 42, 43, 54, 84, 88, 89, 95, 100], "caution": [24, 25, 32, 42, 43, 54, 84, 88, 89, 95, 100], "update_hdf": [24, 25, 27, 28, 30, 32, 33, 35, 42, 51, 54], "repack": [24, 25, 27, 28, 30, 32, 33, 35, 42, 51, 54], "ad": [24, 25, 27, 28, 32, 33, 35, 38, 42, 51, 54, 63, 65, 66, 70, 75, 84, 99], "directori": [24, 25, 28, 30, 32, 33, 35, 36, 42, 50, 51, 54, 59, 60, 63, 64, 73, 75, 76, 77, 78, 79, 80, 81, 82, 92], "filenam": [24, 25, 28, 30, 32, 33, 35, 42, 51, 54, 59, 84, 92], "prefix": [24, 25, 28, 30, 32, 33, 35, 42, 51, 54, 55, 83, 92, 100], "share": [24, 25, 28, 30, 32, 33, 42, 51, 54, 62, 80, 92], "releas": [24, 25, 28, 32, 33, 35, 42, 51, 54, 59, 64, 65, 76, 77], "delet": [24, 25, 26, 27, 28, 30, 32, 33, 35, 42, 51, 52, 54, 55, 59, 64, 73, 92], "inaccess": [24, 25, 28, 32, 33, 35, 42, 51, 54], "overwritten": [24, 25, 28, 32, 33, 35, 42, 51, 54, 68, 70], "remov": [24, 25, 28, 32, 33, 35, 42, 51, 54, 59, 63, 79, 91, 96, 100], "remain": [24, 25, 28, 32, 33, 35, 42, 51, 54, 76, 84, 85, 91, 97], "better": [24, 25, 28, 32, 33, 35, 42, 51, 54], "perform": [24, 25, 28, 30, 32, 33, 35, 37, 41, 42, 44, 51, 54, 59, 61, 62, 63, 66, 67, 69, 75, 83, 84, 87, 90, 91, 92, 95], "caus": [24, 25, 28, 32, 33, 35, 42, 51, 54, 73, 75], "expand": [24, 25, 28, 32, 33, 35, 42, 51, 54, 56, 84], "success": [24, 25, 26, 28, 32, 33, 35, 37, 41, 42, 51, 54, 95, 99], "file_format": [24, 25, 28, 32, 33, 35, 42, 51, 54], "_local": [24, 25, 28, 32, 33, 35, 42, 51, 54, 68], "determin": [24, 25, 28, 30, 32, 33, 35, 42, 51, 54, 56, 62, 68, 78, 84, 89, 91, 92], "becaus": [24, 25, 28, 32, 33, 35, 41, 43, 47, 48, 51, 54, 63, 66, 67, 68, 69, 73, 84, 89, 90, 91, 96, 100], "kwarg": [25, 30, 32, 43, 49, 55, 56, 89, 92], "repres": [25, 27, 30, 32, 51, 52, 54, 55, 59, 68, 89, 92, 100], "belong": [25, 89], "often": [25, 89, 93], "speed": [25, 32, 44, 61, 65, 78, 89, 90, 98], "oper": [25, 26, 27, 28, 30, 32, 33, 35, 42, 50, 51, 53, 54, 58, 59, 62, 69, 73, 79, 81, 82, 83, 86, 91, 92, 94, 99], "cost": [25, 89], "initi": [25, 26, 32, 42, 43, 46, 47, 48, 59, 77, 82, 89, 90, 95, 99], "navalu": [25, 89], "miss": [25, 89], "null": [25, 32, 35, 54, 68, 89, 100], "permut": [25, 28, 30, 32, 53, 54, 56, 68, 83, 86, 89, 92, 98], "segment": [25, 30, 32, 35, 37, 51, 54, 56, 68, 83, 84, 89, 92, 96, 98, 100], "offset": [25, 30, 32, 35, 43, 54, 68, 84, 89, 98, 100], "union": [25, 26, 28, 32, 34, 35, 37, 41, 42, 43, 44, 47, 48, 51, 53, 54, 66, 83, 84, 86, 87, 89, 90, 93, 98, 100], "nlevel": [25, 83, 89], "distinct": [25, 28, 32, 89], "rank": [25, 32, 42, 43, 54, 68, 83, 84, 89, 90, 94], "binop": [25, 28, 32, 35, 42, 51, 54], "registerablepiec": 25, "requiredpiec": 25, "attach": [25, 27, 28, 30, 32, 33, 42, 51, 52, 54, 55, 56, 83, 92], "user_defined_nam": [25, 27, 28, 30, 32, 33, 42, 51, 52, 54, 55, 92], "deprec": [25, 28, 30, 32, 33, 35, 42, 51, 52, 54, 55, 62, 84, 92], "is_regist": [25, 27, 28, 30, 32, 33, 42, 51, 52, 54, 55, 56, 83, 92], "unregist": [25, 27, 28, 30, 32, 33, 42, 51, 52, 54, 55, 56, 83, 92], "unregister_categorical_by_nam": 25, "merg": [25, 28, 32, 62], "synchron": 25, "interleav": [25, 28, 32, 44, 90], "greatli": [25, 32, 44, 90], "improv": [25, 32, 44, 62, 63, 78, 90], "determinist": [25, 32, 44, 90], "expens": 25, "slower": [25, 100], "substr": [25, 27, 32, 54, 83, 89], "str_scalar": [25, 29, 32, 40, 54, 89, 100], "regex": [25, 32, 54, 89, 100], "regular": [25, 32, 54, 83, 89], "handl": [25, 26, 28, 32, 41, 54, 69, 84, 89, 91, 95, 100], "re2": [25, 32, 54, 75, 89, 100], "lookahead": [25, 32, 54, 89, 100], "lookbehind": [25, 32, 54, 89, 100], "rasi": [25, 32, 54, 89, 100], "startswith": [25, 32, 54, 83, 89, 100], "endswith": [25, 32, 54, 83, 89, 100], "significantli": [25, 63, 89], "instead": [25, 27, 28, 30, 32, 35, 42, 46, 48, 54, 59, 82, 84, 87, 89, 92, 100], "classmethod": [25, 27, 28, 32, 33, 51, 52, 89], "from_cod": [25, 83, 89], "pre": [25, 56, 89], "constructor": [25, 32, 46, 48, 51, 66, 89], "normal": [25, 26, 27, 28, 30, 32, 42, 43, 46, 47, 48, 55, 58, 87, 89, 91, 92], "from_return_msg": [25, 27, 28, 30, 32, 33, 51, 52, 54], "rep_msg": [25, 27, 28, 30, 32, 33, 51, 54, 78], "place": [25, 27, 28, 30, 32, 33, 35, 38, 42, 50, 51, 52, 54, 55, 56, 60, 64, 87, 91, 92], "togeth": [25, 28, 30, 32, 54, 56, 91, 92, 98], "instanc": [25, 27, 28, 30, 32, 42, 43, 52, 54, 59, 70, 75, 78, 84, 87, 91, 92, 93, 95, 100], "guarante": [25, 32, 53, 54, 86, 100], "lie": [25, 32, 54], "contigu": [25, 32, 37, 54], "necessarili": [25, 32, 54], "groupbi": [25, 28, 30, 32, 35, 51, 54, 56, 83, 89, 100], "simpli": [25, 26, 32, 41, 90], "even": [25, 28, 30, 32, 42, 68, 87, 91, 92, 99], "128": [25, 32, 41, 51, 54], "hash": [25, 32, 41, 51, 53, 54, 86], "ith": [25, 32, 51, 54], "siphash128": [25, 32, 54], "balanc": [25, 32, 54], "dictionari": [25, 26, 28, 30, 32, 35, 36, 54, 56, 78, 84, 91, 92], "realist": [25, 32, 54], "about": [25, 26, 32, 34, 42, 54, 55, 58, 59, 63, 73, 78, 87, 88, 100], "probabl": [25, 32, 46, 48, 54], "collis": [25, 32, 41, 54], "neglig": [25, 32, 54], "in1d": [25, 32, 44, 58, 66, 83, 89, 98, 100], "against": [25, 32, 51, 54, 59, 66, 84, 96, 100], "intersect1d": [25, 32, 44, 51, 58, 66, 83, 96, 98], "union1d": [25, 32, 44, 51, 58, 66, 83, 96, 98], "consid": [25, 62, 100], "wise": [25, 32, 41, 42, 83, 88], "b": [25, 26, 28, 30, 32, 33, 35, 37, 41, 42, 43, 44, 45, 46, 48, 51, 52, 53, 54, 66, 82, 86, 87, 91, 92, 93, 94, 95, 96, 98, 100], "arbitrarili": 25, "larg": [25, 59, 87], "cat": [25, 32, 35, 80], "cattwo": 25, "json": [25, 26, 32, 34, 42, 50, 54], "bool_": [25, 32, 42, 54, 55, 87, 93], "registri": [25, 28, 30, 32, 33, 34, 42, 52, 54, 55, 56, 92], "registrationerror": [25, 27, 28, 30, 32, 33, 42, 51, 52, 54, 55, 92], "mi": [25, 32, 33, 52, 55], "immun": [25, 27, 28, 30, 32, 33, 42, 51, 52, 54, 55, 92], "until": [25, 27, 28, 30, 32, 33, 42, 51, 52, 54, 55, 64, 92], "isna": 25, "parse_hdf_categor": 25, "dict": [25, 26, 28, 30, 32, 34, 35, 36, 49, 56, 91, 92], "conjunct": [25, 84, 89, 100], "load_al": [25, 28, 32, 33, 35, 42, 54, 71], "reconstitut": 25, "convent": 25, "In": [25, 28, 30, 32, 35, 41, 42, 46, 48, 54, 58, 59, 60, 62, 63, 66, 73, 75, 76, 78, 80, 84, 87, 92, 93, 94, 96, 99, 100], "call": [25, 26, 27, 28, 30, 32, 35, 42, 43, 47, 48, 51, 52, 54, 58, 66, 70, 73, 75, 77, 78, 84, 87, 88, 90, 91, 92, 95, 99], "pretty_print_info": [25, 32, 42, 54], "human": [25, 32, 34, 42, 54], "readabl": [25, 32, 34, 35, 42, 54, 68, 84], "underli": [25, 27, 28, 30, 32, 33, 41, 51, 52, 55, 92], "root": [25, 27, 28, 30, 32, 33, 42, 52, 55, 59, 68, 76, 84, 87, 92], "now": [25, 27, 28, 30, 32, 33, 42, 46, 48, 51, 52, 54, 55, 56, 58, 63, 64, 67, 70, 75, 76, 77, 92], "updat": [25, 27, 28, 30, 32, 33, 35, 42, 45, 51, 52, 54, 55, 70, 75, 80, 84, 92], "modif": [25, 27, 28, 30, 32, 33, 42, 51, 52, 54, 55, 78, 91, 92], "origin": [25, 27, 28, 30, 32, 33, 35, 39, 41, 42, 44, 51, 52, 54, 55, 87, 89, 90, 91, 92, 96, 100], "fluid": [25, 27, 28, 30, 32, 33, 42, 51, 52, 54, 55, 92], "unabl": [25, 27, 28, 30, 32, 33, 42, 52, 54, 55, 92], "reset_categori": 25, "recomput": [25, 32, 35], "unus": [25, 32, 35, 84], "slice": [25, 28, 32, 42, 66, 83, 88, 89, 91, 96, 100], "case": [25, 26, 30, 32, 33, 35, 41, 42, 46, 48, 52, 54, 55, 59, 61, 66, 67, 68, 70, 75, 76, 78, 80, 87, 97], "elimin": [25, 70], "categorical_arrai": 25, "compress": [25, 28, 32, 33, 35, 42, 51, 54, 59, 94, 96], "parquet": [25, 28, 30, 32, 33, 35, 42, 51, 54, 59, 67, 69, 71, 84, 92], "collect": [25, 28, 30, 32, 33, 35, 42, 49, 51, 54, 76, 92], "chunk": [25, 32, 33, 35, 42, 51, 54], "within": [25, 26, 28, 30, 31, 32, 33, 35, 42, 43, 46, 48, 51, 54, 58, 59, 68, 70, 90, 91, 92, 96], "written": [25, 28, 30, 32, 33, 35, 36, 38, 42, 51, 52, 54, 67, 68, 69, 70, 71, 75, 84, 92, 95], "impact": [25, 30, 32, 33, 42, 51, 61, 62, 64, 92], "snappi": [25, 28, 32, 33, 35, 42, 51, 54, 59, 70, 75], "gzip": [25, 28, 32, 33, 35, 42, 51, 54, 59, 70], "brotli": [25, 28, 32, 33, 35, 42, 51, 54, 59, 70], "zstd": [25, 28, 32, 33, 35, 42, 51, 54, 59, 70], "lz4": [25, 28, 32, 33, 35, 42, 51, 54, 59, 70], "neither": [25, 32, 33, 42, 43, 54, 55, 90, 100], "nor": [25, 32, 33, 42, 43, 54, 90, 100], "state": [25, 32, 46, 48, 54, 62], "charact": [25, 26, 27, 31, 32, 43, 54, 78, 100], "set_categori": 25, "new_categori": 25, "old": [25, 62], "unchang": 25, "na": [25, 68], "standardize_categori": 25, "remap": 25, "load": [25, 28, 32, 33, 35, 42, 51, 54, 67, 68, 70, 71, 80, 84], "produc": [25, 32, 54, 89, 100], "to_parquet": [25, 28, 32, 33, 35, 42, 51, 54, 70, 71, 84], "On": [25, 26, 99], "due": [25, 32, 35, 67, 70, 84], "issu": [25, 28, 30, 32, 58, 62, 75, 80, 92, 96], "visibl": [25, 26, 32, 33, 35, 42, 51, 54, 99], "permiss": [25, 32, 33, 42, 51, 54], "form": [25, 29, 32, 33, 42, 50, 51, 54, 62, 78, 100], "numlocal": [25, 26, 28, 32, 33, 35, 42, 51, 54, 99], "effici": [25, 28, 32, 33, 42, 54, 96, 100], "o": [25, 28, 32, 33, 42, 50, 51, 54, 81, 83], "reli": [25, 32, 33, 42, 51, 54, 92], "send": [25, 26, 28, 32, 35, 42, 43, 51, 54, 58, 84, 91, 99], "node": [25, 28, 32, 35, 42, 51, 54, 59, 68, 82, 84], "1234": [25, 28, 32, 35, 42, 51, 54, 62], "1235": [25, 28, 32, 35, 42, 51, 54], "1236": [25, 28, 32, 35, 42, 51, 54], "1237": [25, 28, 32, 35, 42, 51, 54], "receive_arrai": [25, 28, 32, 42, 51, 54], "complet": [25, 26, 28, 32, 42, 51, 54, 58, 60, 62, 75, 77, 99, 100], "op": [25, 27, 28, 32, 35, 42, 51, 54, 59], "previous": [25, 28, 30, 32, 33, 35, 42, 51, 52, 54, 55, 92], "attempt": [25, 28, 30, 32, 33, 35, 42, 51, 52, 53, 54, 55, 75, 84, 91, 92], "without": [25, 28, 32, 35, 42, 64, 73, 75, 84, 91], "localhost": [26, 73, 99], "5555": [26, 73, 99], "access_token": [26, 99], "connect_url": [26, 73, 99], "access_channel": [26, 99], "channel": [26, 99], "machin": [26, 59, 60, 63, 73, 76, 77, 99], "whicn": [26, 99], "interpret": [26, 32, 35, 59, 84, 99], "socket": [26, 99], "enabl": [26, 32, 38, 42, 50, 63, 75, 76, 78, 84, 99], "authent": [26, 50, 73, 99], "tcp": [26, 73, 99], "token_valu": [26, 99], "zmqchannel": [26, 99], "connectionerror": [26, 99], "pars": [26, 27, 32, 33, 42, 58, 99], "seen": [26, 99], "disconnect": [26, 32, 42], "generate_histori": 26, "num_command": [26, 31], "command_filt": [26, 31], "command": [26, 31, 32, 42, 58, 59, 60, 62, 64, 73, 75, 77, 78, 79, 80, 99], "shell": [26, 31, 32, 35, 77, 84], "jupyt": [26, 31, 73], "notebook": [26, 31, 73], "ipython": [26, 31, 73], "cmd_filter": 26, "retriev": [26, 31, 32, 34, 42, 50, 52, 62], "select": [26, 28, 31, 32, 35, 51, 58, 62, 75, 81, 91, 96], "10000": 26, "randint": [26, 30, 32, 41, 43, 47, 48, 53, 66, 83, 86, 87, 90, 92, 93], "500": [26, 60, 63], "457": 26, "647": 26, "9362": 26, "9602": 26, "9683": 26, "get": [26, 28, 29, 31, 32, 35, 41, 51, 58, 59, 62, 63, 64, 76, 80, 84, 88, 95, 96], "serverhostnam": 26, "serverport": 26, "numpu": 26, "processor": [26, 59], "maxtaskpar": 26, "physicalmemori": 26, "get_mem_avail": 26, "as_perc": 26, "amount": [26, 28, 32, 42, 78, 91, 100], "kb": [26, 28, 32], "mb": [26, 28, 32], "gb": [26, 28, 32], "tb": 26, "pb": 26, "percent": 26, "get_mem_statu": 26, "statu": 26, "total_mem": 26, "total": [26, 30, 32, 35, 54, 59, 84, 92], "physic": [26, 39, 100], "host": [26, 50, 75], "avail_mem": 26, "arkouda_mem_alloc": 26, "alloc": 26, "chapel": [26, 32, 41, 46, 48, 58, 61, 63, 68, 72, 73, 75, 78, 79, 80, 81, 95, 99, 100], "process": [26, 32, 34, 35, 52, 58, 65, 68, 73, 80, 84, 96, 100], "pct_avail_mem": 26, "percentag": 26, "locale_id": 26, "id": [26, 59, 80, 92], "locale_hostnam": 26, "get_mem_us": 26, "symbol": [26, 32, 34, 42, 51, 54, 58, 95], "get_server_command": 26, "commandmap": [26, 58, 78], "print_server_command": 26, "ruok": 26, "imok": 26, "imnotok": 26, "occur": [26, 28, 30, 32, 35, 40, 41, 42, 52, 54, 58, 75, 92, 93, 97, 100], "basic": [26, 32, 33, 42, 50, 62, 80, 88, 95], "wai": [26, 59, 63, 68, 73, 78, 87, 89, 90, 91, 95, 100], "quick": [26, 63], "healthcheck": 26, "respons": [26, 28, 32, 54, 58], "both": [26, 28, 32, 35, 37, 42, 44, 55, 63, 66, 68, 69, 73, 75, 84, 89, 98, 100], "latter": [26, 100], "shutdown": [26, 63, 64, 78], "symtabl": 26, "shut": [26, 73, 78], "down": [26, 61, 62, 64, 73, 75, 78], "bitvector": [27, 32], "width": [27, 32, 100], "64": [27, 32, 41, 42, 43, 47, 48, 59, 90, 91, 95], "revers": [27, 30, 32], "vector": [27, 30, 32, 83, 92], "flag": [27, 32, 35, 45, 59, 64, 78, 99], "field": [27, 32, 43, 54, 62, 84, 100], "signific": [27, 32, 41, 42, 53, 62, 78, 86, 87], "binari": [27, 32, 43, 76, 77, 87], "thin": [27, 32], "mostli": [27, 32], "affect": [27, 32], "conserv": [27, 32], "special_objtyp": [27, 32, 55], "opeq": [27, 32, 42], "export": [27, 32, 35, 41, 60, 63, 75, 76, 77, 80, 93], "callback": [27, 32], "callabl": [27, 28, 32, 91], "msb_left": [27, 32], "pad": [27, 32, 62], "show_int": [27, 32], "back": [27, 30, 32, 58, 61, 64, 84, 92], "represent": [27, 32, 42], "accord": [27, 28, 32, 41, 91, 95], "ipv4": [27, 32, 35, 84], "ip": [27, 32], "export_uint": [27, 32], "ipaddress": [27, 32], "ip_address": [27, 32, 33, 85], "helper": [27, 32, 56], "proof": [27, 32], "made": [27, 28, 32, 54, 100], "accomod": [27, 32], "ipv6": [27, 32], "prevent": [27, 32, 35, 42, 51, 67, 68, 76, 96], "inadvert": [27, 32], "is_ipv4": [27, 32], "ip2": [27, 32], "well": [27, 32, 59, 66, 79], "deal": [27, 32], "is_ipv6": [27, 32], "initialdata": [28, 32, 91], "userdict": [28, 32, 49], "homogen": [28, 32, 91], "frame": [28, 32, 52, 91, 97], "stringifi": [28, 32, 91], "usernam": [28, 32, 50, 91], "alic": [28, 32, 91], "bob": [28, 32, 91], "carol": [28, 32, 91], "userid": [28, 32, 91, 92], "111": [28, 32, 54, 91], "222": [28, 32, 91], "333": [28, 32, 91], "dai": [28, 32, 55, 62, 91, 92], "slightli": [28, 32, 35, 91], "stride": [28, 32, 37, 43, 90, 91, 94], "col1": [28, 32, 91], "col2": [28, 32, 91], "u0": [28, 32, 33], "multiindex": [28, 32, 33, 52, 85, 97], "use_seri": [28, 32, 91], "as_index": [28, 32, 91], "dropna": [28, 30, 32, 83, 91, 92], "groupbyclass": [28, 32, 44, 52, 57, 91, 98], "drop": [28, 30, 32, 42, 62, 87, 92], "kept": [28, 30, 32, 51, 91, 92], "0x7f2cf23e10c0": [28, 32, 91], "onto": [28, 32, 54, 100], "sens": [28, 32], "whose": [28, 32, 51, 52, 54, 97], "df1": [28, 32], "df2": [28, 32], "apply_permut": [28, 32, 91], "perm": [28, 32, 53, 56, 86, 91], "entir": [28, 32, 51, 54, 59, 64, 91, 96], "unsort": [28, 32, 91], "arbitrari": [28, 32, 91], "invers": [28, 32, 41, 56, 91], "perm_arri": [28, 32, 91], "ascend": [28, 30, 32, 33, 41, 42, 52, 85, 91, 93, 97], "coargsort": [28, 32, 53, 83, 86, 89, 91, 100], "sorted_df1": [28, 32, 91], "sorted_df2": [28, 32, 91], "my_table_nam": [28, 32], "col3": [28, 32, 91], "essenti": [28, 32, 42, 51, 54, 91, 96], "deep": [28, 32, 51, 91], "reflect": [28, 32, 77, 91, 96], "shallow": [28, 32, 91], "vice": [28, 32, 84, 91], "versa": [28, 32, 84, 91], "caller": [28, 32, 91], "df_deep": [28, 32, 91], "df_shallow": [28, 32, 91], "corr": [28, 32, 42], "pairwis": [28, 32], "correl": [28, 32, 42], "inplac": [28, 32, 91], "datefram": [28, 32, 91], "drop_dupl": [28, 32, 91], "duplcat": [28, 32, 91], "iter": [28, 32, 35, 43, 53, 59, 83, 84, 86], "dedup": [28, 32, 91], "last": [28, 32, 42, 43, 52, 53, 54, 62, 78, 86, 91, 97, 99, 100], "filter_by_rang": [28, 32], "highest": [28, 32, 42, 43], "unlimit": [28, 32], "qualifi": [28, 32], "filtered_df": [28, 32], "from_panda": [28, 32], "pd_df": [28, 32, 66, 91], "pd": [28, 32, 35, 43, 55, 56, 66, 84, 91], "core": [28, 31, 32, 59, 62, 91], "ak_df": [28, 32, 45, 91], "alia": [28, 30, 32, 51, 55, 91, 92], "head": [28, 32, 52, 62], "quickli": [28, 32, 60, 91], "tail": [28, 32, 43, 52], "mismatch": [28, 30, 32, 75, 92], "unregister_dataframe_by_nam": [28, 32], "isin": [28, 32, 52], "show": [28, 32, 35, 45, 75, 84, 88, 92], "col_a": [28, 32], "col_b": [28, 32], "position": [28, 32], "other_df": [28, 32], "col_c": [28, 32], "infer": [28, 29, 30, 32, 35, 43, 68, 84], "my_dir": [28, 32], "my_data_locale0000": [28, 32], "my_data": [28, 32], "pathlib": [28, 32, 36, 50], "my_path": [28, 32], "join": [28, 32, 51, 54, 57, 58, 83], "getcwd": [28, 32], "hdf5_output": [28, 32], "mkdir": [28, 32], "exist_ok": [28, 32], "memory_usag": [28, 32], "One": [28, 30, 32, 42, 52, 66, 92, 97], "1000": [28, 32, 33, 37, 85, 93], "00": [28, 32, 59], "inner": [28, 32, 37], "left_suffix": [28, 32], "_x": [28, 32], "right_suffix": [28, 32], "_y": [28, 32], "databas": [28, 32], "pydata": [28, 32], "intersect": [28, 32, 44, 51, 66, 83, 98], "suffix": [28, 32, 35, 51, 54, 68, 83, 100], "left_df": [28, 32], "right_df": [28, 32], "col2_x": [28, 32], "col2_i": [28, 32], "read_csv": [28, 32, 35, 67, 71], "col_delim": [28, 32, 33, 35, 42, 54], "csv": [28, 32, 33, 35, 42, 54, 71, 84], "header": [28, 32, 33, 35, 42, 54, 84], "delimit": [28, 32, 33, 35, 36, 42, 52, 54, 59, 62, 67, 84, 100], "allow_error": [28, 32, 33, 35, 42, 54, 84], "unknown": [28, 32, 33, 35, 42, 43, 54], "arkouda_typ": [28, 32, 33, 35, 42, 54], "to_csv": [28, 32, 33, 35, 42, 54, 67, 71], "newlin": [28, 32, 33, 35, 42, 54, 67], "unlik": [28, 32, 35, 54, 55], "utf": [28, 32, 35, 54], "csv_output": [28, 32], "_locale0000": [28, 32], "renam": [28, 32], "mapper": [28, 32, 91], "nonexist": [28, 32, 91], "99": [28, 32, 59, 91], "lower": [28, 32, 46, 48, 54, 68, 91], "reset_index": [28, 32, 91], "longer": [28, 32, 43, 68, 79, 91], "correctli": [28, 32, 80, 91], "perm_df": [28, 32, 91], "sampl": [28, 32, 41, 43, 46, 47, 48], "random": [28, 32, 43, 45, 57, 59, 82, 83], "disk": [28, 32, 33, 35, 42, 54, 100], "preserv": [28, 32, 52, 97, 100], "sort_index": [28, 32, 52, 97], "sort_valu": [28, 32, 52, 91, 97], "denot": [28, 32, 33, 35, 42, 54, 55], "NOT": [28, 32, 33, 35, 41, 42, 54, 75, 84, 95], "across": [28, 32, 35, 68, 84], "hdf_output": [28, 32], "to_panda": [28, 32, 33, 52, 55, 66, 91, 97], "datalimit": [28, 32, 91], "retain_index": [28, 32, 91], "megabyt": [28, 32, 91], "request": [28, 30, 32, 36, 42, 43, 54, 58, 62, 90, 91, 92], "estim": [28, 30, 32, 42, 87, 91, 92], "convert_categor": [28, 32, 35], "categor": [28, 30, 32, 33, 35, 41, 44, 52, 53, 56, 57, 83, 84, 85, 86, 87, 90, 91, 92, 93, 95, 97, 98], "parquet_output": [28, 32], "update_nrow": [28, 32], "diffaggreg": [28, 32], "differenc": [28, 32], "14": [28, 30, 32, 46, 48, 59, 66, 67, 76, 87, 88, 92, 94], "16": [28, 32, 41, 46, 48, 56, 59, 60, 61, 76, 77, 87, 88, 94], "18": [28, 32, 42, 46, 48, 59, 87, 88, 94], "intx": [28, 32], "ident": [28, 32, 56, 87, 95], "point": [28, 32, 33, 37, 41, 42, 43, 47, 48, 52, 80, 90, 91, 95], "intersect_df": [28, 32], "invert_permut": [28, 32, 56], "arkouda_supported_dtyp": [29, 32], "dtypeobject": [29, 32], "scalardtyp": [29, 32], "all_scalar": [29, 32, 43, 90], "enum": [29, 32, 38, 41, 68], "bigint": [29, 32, 41, 42, 43, 59, 84, 90, 95], "bittyp": [29, 32], "bool_scalar": [29, 32], "check_np_dtyp": [29, 32], "dt": [29, 32, 37, 41, 52, 95], "assert": [29, 32], "float_scalar": [29, 32, 42, 43, 47, 48], "get_byteord": [29, 32], "concret": [29, 32], "byteord": [29, 32], "turn": [29, 32, 52, 63, 73, 97], "get_server_byteord": [29, 32], "inttyp": [29, 32], "issupportednumb": [29, 32], "numeric_scalar": [29, 32, 41, 42, 43, 46, 47, 48, 87, 90], "numpy_scalar": [29, 32, 42, 87], "resolve_scalar_dtyp": [29, 32], "str_": [29, 32, 87, 89, 93, 100], "translate_np_dtyp": [29, 32], "split": [29, 32, 40, 54, 62, 83], "unsupport": [29, 30, 32, 35, 50, 53, 84, 98], "groupby_reduction_typ": [30, 32], "groupabl": [30, 32, 44, 92, 98], "assume_sort": [30, 32, 92, 98], "prepar": [30, 32, 75, 92], "nkei": [30, 32, 52, 83, 92], "unique_kei": [30, 32, 83, 92], "ngroup": [30, 32, 83, 92], "logger": [30, 32, 54, 57, 83, 92], "arkoudalogg": [30, 32, 38, 54, 92], "nativ": [30, 32, 69, 70, 77, 84, 92, 96], "inherit": [30, 32, 92, 95], "overload": [30, 32, 92], "_get_grouping_kei": [30, 32, 92], "reduct": [30, 32, 42, 82, 83, 92, 93], "AND": [30, 32, 51, 83, 92], "bitwis": [30, 32, 92, 95], "reduc": [30, 32, 63, 65, 92], "OR": [30, 32, 51, 62, 83, 92], "xor": [30, 32, 42, 51, 83, 92], "skipna": [30, 32, 92], "calcul": [30, 32, 35, 42, 44, 59, 68, 84, 87, 92, 93, 98], "77777777777777768": [30, 32, 92], "55555555555555536": [30, 32, 92], "33333333333333348": [30, 32, 92], "11111111111111116": [30, 32, 92], "77777777777777779": [30, 32, 92], "55555555555555558": [30, 32, 92], "33333333333333337": [30, 32, 92], "33333333333333326": [30, 32, 92], "group_ani": [30, 32, 92], "group_argmaxima": [30, 32, 92], "minimum": [30, 32, 42, 43, 76, 87, 92, 93], "group_argminima": [30, 32, 92], "unregister_groupby_by_nam": [30, 32, 83, 92], "fill": [30, 32, 42, 43, 46, 48, 59, 82, 90, 92], "constant": [30, 32, 42, 83, 92], "put": [30, 32, 64, 92], "analog": [30, 32, 55, 92], "tensor": [30, 32, 92], "replic": [30, 32, 92], "With": [30, 32, 78, 88, 92, 94], "build_from_compon": [30, 32, 83, 92], "init": [30, 32, 77, 92], "rebuild": [30, 32, 58, 61, 63, 64, 92], "orig_kei": [30, 32, 92], "groupable_element_typ": [30, 32, 52, 92, 97], "maxima": [30, 32, 92], "group_maxima": [30, 32, 92], "averag": [30, 32, 42, 43, 59, 87, 92], "group_mean": [30, 32, 92], "6666666666666665": [30, 32, 92], "7999999999999998": [30, 32, 92], "median": [30, 32, 59, 83, 92], "group_median": [30, 32, 92], "75": [30, 32, 43, 90, 92], "minima": [30, 32, 92], "group_minima": [30, 32, 92], "modal": [30, 32, 92], "most_common": [30, 32, 56, 83, 92], "nuniqu": [30, 32, 51, 83, 92], "group_nuniqu": [30, 32, 92], "group_product": [30, 32, 92], "108": [30, 32, 92], "00000000000003": [30, 32, 92], "9999999999999982": [30, 32, 92], "deviat": [30, 32, 42, 43, 55, 87, 92, 93], "group_std": [30, 32, 92], "len": [30, 32, 42, 51, 54, 87, 92, 94, 96, 100], "howev": [30, 32, 41, 42, 68, 75, 79, 80, 87, 89, 92], "divisor": [30, 32, 42, 87, 92], "unbias": [30, 32, 42, 87, 92], "varianc": [30, 32, 42, 87, 92, 93], "infinit": [30, 32, 41, 42, 87, 92], "popul": [30, 32, 36, 40, 42, 87, 92], "se": [30, 32, 42, 87, 92], "5275252316519465": [30, 32, 92], "0954451150103321": [30, 32, 92], "group_sum": [30, 32, 92], "segarrai": [30, 32, 35, 41, 57, 83, 84, 91, 92], "group_var": [30, 32, 92], "hypothet": [30, 32, 37, 42, 87, 92], "333333333333333": [30, 32, 92], "go": [30, 32, 62, 64, 76, 80, 90], "suppli": [30, 32, 35, 43, 51, 68, 70, 71, 90, 91], "row_start": [30, 32], "nnz": [30, 32], "row_numb": [30, 32], "pda": [30, 32, 41, 42, 43, 53, 55, 58, 86, 87, 90, 93, 95, 98], "return_group": [30, 32, 98], "return_indic": [30, 32, 98], "come": [30, 32, 64, 84, 90, 98], "applic": [30, 32, 41, 84, 90, 92, 98], "along": [30, 32, 41, 43, 90, 98], "consider": [30, 32, 98, 100], "historyretriev": 31, "abstract": 31, "_filter_arkouda_command": 31, "repl": [31, 32, 40, 54, 100], "notebookhistoryretriev": 31, "historyaccessor": 31, "shellhistoryretriev": 31, "akscipi": [32, 57], "array_api": [32, 57], "accessor": [32, 57], "align": [32, 33, 57], "array_view": [32, 35, 57, 88], "client_dtyp": [32, 35, 57], "infoclass": [32, 57], "io": [32, 57, 58, 59, 69, 70, 71], "io_util": [32, 57], "matcher": [32, 57], "pdarraycr": [32, 42, 57], "pdarraysetop": [32, 51, 57, 58, 96], "plot": [32, 41, 57, 84, 93], "secur": [32, 41, 57], "timeclass": [32, 35, 57], "allsymbol": [32, 34], "__allsymbols__": [32, 34], "datetim": [32, 35, 43, 55, 59, 84], "_base_unit": [32, 55], "_abstractbasetim": [32, 55], "datetimeindex": [32, 55], "timeseri": [32, 55], "datetime64": [32, 43, 55], "carri": [32, 55], "Not": [32, 35, 41, 55, 59, 91], "sensit": [32, 55], "sec": [32, 55, 59], "accept": [32, 52, 55, 59, 97], "week": [32, 55, 92], "w": [32, 39, 55, 100], "hour": [32, 55], "h": [32, 41, 45, 55, 82, 93, 99], "minut": [32, 55], "millisecond": [32, 55], "l": [32, 35, 55, 60, 62, 66, 67, 75, 84], "microsecond": [32, 55], "nanosecond": [32, 43, 55], "combin": [32, 54, 55, 64], "mix": [32, 54, 55, 59, 88], "day_of_week": [32, 55], "day_of_year": [32, 55], "dayofweek": [32, 55, 92], "dayofyear": [32, 55], "is_leap_year": [32, 55], "month": [32, 55, 62], "weekdai": [32, 55], "weekofyear": [32, 55], "year": [32, 55], "supported_opeq": [32, 55], "supported_with_datetim": [32, 55], "supported_with_pdarrai": [32, 55], "supported_with_r_datetim": [32, 55], "supported_with_r_pdarrai": [32, 55], "supported_with_r_timedelta": [32, 55], "supported_with_timedelta": [32, 55], "isocalendar": [32, 55], "errormod": [32, 41, 95], "enumer": [32, 38, 41], "deriv": [32, 35, 36, 38, 41, 54, 95], "return_valid": [32, 41, 95], "strict": [32, 41, 95], "seed": [32, 43, 46, 47, 48, 59, 82, 90], "expos": [32, 46, 48, 95], "drawn": [32, 43, 46, 47, 48, 90], "varieti": [32, 46, 48], "default_rng": [32, 46, 48], "akint64": [32, 43, 46, 47, 48], "discret": [32, 46, 48], "uniform": [32, 41, 43, 46, 47, 48, 53, 84, 86, 87, 90], "abov": [32, 46, 48, 59, 64, 66, 73, 75, 76, 91, 100], "largest": [32, 42, 46, 48, 52, 87, 97], "uniformli": [32, 43, 46, 47, 48, 90], "rng": [32, 46, 48, 55], "13": [32, 41, 46, 48, 56, 59, 76, 79, 87, 88, 93, 94], "47108547995356098": [32, 46, 48], "055256829926011691": [32, 46, 48], "62511314008006458": [32, 46, 48], "16400145561571539": [32, 46, 48], "standard_norm": [32, 43, 46, 47, 48], "draw": [32, 43, 46, 47, 48], "stdev": [32, 46, 48], "mu": [32, 43, 46, 47, 48], "sigma": [32, 43, 46, 47, 48], "1923875335537315": [32, 46, 48], "8797352989638163": [32, 46, 48], "7085325853376141": [32, 46, 48], "021728052940979934": [32, 46, 48], "boundari": [32, 46, 48, 55], "upper": [32, 46, 48, 54, 62], "030785499755523249": [32, 46, 48], "08505865366367038": [32, 46, 48], "38552048588998722": [32, 46, 48], "allow_list": [32, 33, 85], "max_list_s": [32, 33, 85], "maintain": [32, 33, 35, 51, 69, 84], "older": [32, 33, 42, 68, 76], "is_uniqu": [32, 33], "rtype": [32, 33, 52], "abc": [32, 33, 67], "factori": [32, 33, 54], "insensit": [32, 33, 42, 54, 59], "save_al": [32, 33, 35, 42, 71], "set_dtyp": [32, 33, 85], "repons": [32, 33, 42, 54], "to_dict": [32, 33], "len_suffix": [32, 51], "_length": [32, 51], "loglevel": [32, 38], "critic": [32, 38], "debug": [32, 38, 58, 60, 64], "registeredsymbol": [32, 34], "__registeredsymbols__": [32, 34], "individu": [32, 49, 60, 100], "seg_suffix": [32, 51], "_segment": [32, 51, 68], "non_empti": [32, 51], "vertic": [32, 51, 52, 96], "increas": [32, 51, 96], "horizont": [32, 51, 52, 96, 97], "sub": [32, 40, 51, 54, 83, 100], "pair": [32, 36, 37, 41, 51, 96], "append_singl": [32, 51, 83, 96], "prepend": [32, 51, 54, 83, 100], "could": [32, 42, 45, 51, 54, 63, 78, 100], "unord": [32, 51], "yet": [32, 51, 75, 84, 88], "discard_empti": [32, 51], "from_multi_arrai": [32, 51], "from_part": [32, 51, 54], "flatten": [32, 37, 51, 54, 68, 83, 96], "face": [32, 51, 62, 95], "get_jth": [32, 51, 83, 96], "j": [32, 51, 60, 61, 76, 77, 96], "return_origin": [32, 51, 54, 96], "th": [32, 41, 51, 87, 96], "backward": [32, 51, 56, 96], "bound": [32, 42, 43, 47, 48, 51, 55, 90, 96], "origin_indic": [32, 51, 54, 96], "get_length_n": [32, 51, 83, 96], "long": [32, 51, 54, 64, 96], "mask": [32, 51, 54, 96], "get_ngram": [32, 51, 83, 96], "gram": [32, 51, 96], "came": [32, 51, 96], "ngram": [32, 51, 83], "get_prefix": [32, 51, 54, 83, 96], "proper": [32, 41, 51, 54, 56, 96], "enough": [32, 51, 54, 68, 76, 77, 96], "get_suffix": [32, 51, 54, 83, 96], "1d": [32, 44, 51, 52, 96, 97, 98], "seg_a": [32, 51, 96], "seg_b": [32, 51, 96], "segment_nam": [32, 51], "value_nam": [32, 51], "prepend_singl": [32, 51, 83, 96], "read_hdf": [32, 35, 51, 71, 84], "remove_repeat": [32, 51, 83, 96], "return_multipl": [32, 51, 96], "condens": [32, 51, 96], "norepeat": [32, 51, 96], "set_jth": [32, 51, 83, 96], "setdiff": [32, 51, 83, 96], "setdiff1d": [32, 44, 51, 58, 66, 83, 96, 98], "setxor": [32, 51, 83, 96], "setxor1d": [32, 44, 51, 58, 66, 83, 96, 98], "segarr": [32, 51, 96], "unregister_segarray_by_nam": [32, 51], "enter": [32, 52, 84, 97], "_locindex": [32, 52], "supported_scalar": [32, 52], "iat": [32, 52], "_ilocindex": [32, 52], "iloc": [32, 52], "loc": [32, 52], "str_acc": [32, 52], "registerd": [32, 52], "index_label": [32, 52], "value_label": [32, 52], "verticl": [32, 52, 97], "diff": [32, 52], "consecut": [32, 43, 52, 90], "repmsg": [32, 52, 58], "has_repeat_label": [32, 52], "lst": [32, 52], "scaler": [32, 52, 97], "pdconcat": [32, 52, 97], "give": [32, 42, 52, 67, 79, 97, 99], "smallest": [32, 42, 52, 87, 97], "to_datafram": [32, 52], "topn": [32, 52, 97], "top": [32, 52, 58, 63, 68, 75, 76, 77, 81, 97], "validate_kei": [32, 52], "might": [32, 52, 75, 77, 78], "keyerror": [32, 52], "indexerror": [32, 52], "validate_v": [32, 52], "value_count": [32, 41, 42, 52, 83, 93, 97], "frequent": [32, 52, 78, 97], "strings_pdarrai": [32, 54], "bytes_s": [32, 54], "resid": [32, 42, 54, 95], "encapsul": [32, 43, 50, 54], "composit": [32, 54], "raw": [32, 54, 100], "nbyte": [32, 43, 54, 84], "compos": [32, 43, 54, 73, 84], "shorthand": [32, 42, 54], "cached_regex_pattern": [32, 54], "pattern": [32, 39, 40, 54, 62, 66, 92, 100], "capit": [32, 54], "letter": [32, 54], "capitilz": [32, 54], "lowercas": [32, 43, 54], "decod": [32, 54], "fromencod": [32, 54], "toencod": [32, 54], "encod": [32, 54, 59, 100], "strings_start": [32, 54, 100], "ing": [32, 54, 100], "strings_end": [32, 54, 100], "find_loc": [32, 40, 54, 83, 100], "postit": [32, 54, 100], "positon": [32, 54, 100], "findal": [32, 40, 54, 83, 100], "num_match": [32, 54, 100], "return_match_origin": [32, 39, 40, 54, 100], "conta": [32, 54, 100], "1_2___": [32, 39, 54, 100], "____": [32, 39, 54, 100], "__4___5____6___7": [32, 39, 54, 100], "___": [32, 54, 100], "__": [32, 39, 54, 100], "return_seg": [32, 40, 54, 100], "unpack": [32, 54, 73, 77, 100], "flat": [32, 54, 100], "peel": [32, 54, 83, 100], "rpeel": [32, 54, 83, 100], "orig": [32, 54, 100], "six": [32, 54, 100], "one_two": [32, 54, 100], "three_____four____f": [32, 54, 100], "under_flat": [32, 54, 100], "under_map": [32, 54, 100], "offset_attrib": [32, 54], "bytes_attrib": [32, 54], "assembl": [32, 54], "entiti": [32, 54], "fullmatch": [32, 54, 83, 100], "whole": [32, 54, 62, 100], "span": [32, 54, 100], "get_byt": [32, 54], "getter": [32, 54], "110": [32, 54], "101": [32, 54], "116": [32, 54], "119": [32, 54], "104": [32, 54], "114": [32, 54], "get_length": [32, 54], "get_offset": [32, 54], "compil": [32, 54, 61, 64, 65, 75, 76, 77, 78, 80], "ssegmentedstr": [32, 54], "usehash": [32, 54], "mere": [32, 54], "isalnum": [32, 54], "alphanumer": [32, 54], "islow": [32, 54], "isupp": [32, 54], "istitl": [32, 54], "not_alnum": [32, 54], "alnum": [32, 54], "strings0": [32, 54], "strings1": [32, 54], "strings2": [32, 54], "isalpha": [32, 54], "alphabet": [32, 54], "not_alpha": [32, 54], "alpha": [32, 54, 59, 82], "stringa": [32, 54], "stringb": [32, 54], "stringc": [32, 54], "isdigit": [32, 54], "digit": [32, 53, 54, 86], "not_digit": [32, 54], "120": [32, 54], "121": [32, 54], "122": [32, 54], "isempti": [32, 54], "not_empti": [32, 54], "isspac": [32, 54], "whitespac": [32, 35, 54], "not_spac": [32, 54], "u0009": [32, 54], "u000b": [32, 54], "u000c": [32, 54], "u000d": [32, 54], "u0009nu000bu000cu000d": [32, 54], "titlecas": [32, 54], "uppercas": [32, 43, 54], "lstick": [32, 54, 83, 100], "insert": [32, 54, 100], "experiment": [32, 54, 100], "stick": [32, 54, 64, 83, 100], "includedelimit": [32, 54, 100], "keepparti": [32, 54, 100], "fromright": [32, 54, 100], "off": [32, 54, 63, 100], "partit": [32, 54, 100], "sought": [32, 54, 100], "purge_cached_regex_pattern": [32, 54], "purg": [32, 54], "later": [32, 42, 54, 79], "former": [32, 42, 54, 100], "free": [32, 42, 54], "registr": [32, 42, 54], "rpartit": [32, 54, 100], "compar": [32, 54, 62, 82, 84, 100], "strings_arrai": [32, 54, 68], "save_offset": [32, 54], "upon": [32, 41, 54, 77, 78, 81, 87], "maxsplit": [32, 40, 54, 100], "occurr": [32, 40, 41, 42, 54, 87, 93, 100], "5____6___7": [32, 54, 100], "ior": [32, 54, 100], "toleft": [32, 54, 100], "strip": [32, 54], "char": [32, 54], "lead": [32, 42, 54], "trail": [32, 42, 54], "omit": [32, 54, 55, 59, 68], "1string": [32, 54], "obtain": [32, 40, 54, 100], "substitut": [32, 40, 54, 73, 75, 100], "substitu": [32, 54, 100], "subn": [32, 54, 83, 100], "new_str": [32, 54, 100], "number_of_substit": [32, 54, 100], "segstr": [32, 54], "hello": [32, 54, 84, 100], "my": [32, 54, 63, 84, 100], "world": [32, 54, 84, 100], "u5": [32, 54, 84, 100], "unregister_strings_by_nam": [32, 54], "timedelta": [32, 35, 43, 55, 84], "durat": [32, 55], "timedeltaindex": [32, 55], "timedelta64": [32, 55], "total_second": [32, 55], "val_suffix": [32, 51], "_valu": [32, 51, 68], "akab": 32, "akbool": 32, "akcast": 32, "target": [32, 36, 41, 43, 59, 61, 62, 75, 84, 90, 94, 95], "never": [32, 41, 95], "uninterpret": [32, 41, 95], "63": [32, 41, 42, 95], "succeed": [32, 41, 95], "safe": [32, 41, 62, 95], "underflow": [32, 41, 95], "precis": [32, 35, 41, 84, 95], "capac": [32, 41, 95], "hold": [32, 41, 95], "akfloat64": 32, "akuint64": 32, "third": [32, 43, 62, 90], "max_bit": [32, 42, 43, 59, 84, 90, 95], "zerodivisionerror": [32, 42, 43, 90], "decreas": [32, 42, 43, 63, 87, 90, 93], "cosin": [32, 41, 87], "At": [32, 41, 42, 87], "elsewher": [32, 41, 42, 87], "retain": [32, 41, 42, 56, 87], "hyperbol": [32, 41], "sine": [32, 41, 87], "tangent": [32, 41], "denom": [32, 41], "angl": [32, 41], "radian": [32, 41], "rai": [32, 41], "denomin": [32, 41, 42], "placement": [32, 41], "circl": [32, 41], "argmaxk": [32, 42, 83, 87, 93], "maxmum": [32, 42, 87], "outperform": [32, 42, 87], "grow": [32, 42, 87], "beyond": [32, 42, 66, 87], "certain": [32, 42, 60, 78, 87], "depend": [32, 42, 68, 76, 77, 80, 81, 87, 96], "million": [32, 41, 42, 87], "degrad": [32, 42, 87], "argmink": [32, 42, 83, 87, 93], "algorithm": [32, 41, 53, 56, 73, 86], "sortingalgorithm": [32, 53, 86], "radixsortlsd": [32, 53, 86], "radix": [32, 53, 86], "resili": [32, 53, 86], "intens": [32, 53, 66, 86, 90], "dequ": [32, 43, 84], "malform": [32, 43, 84], "overwhelm": [32, 43, 84], "bandwidth": [32, 43, 84], "pdrrai": [32, 41, 43, 84], "twice": [32, 43, 84], "recurs": [32, 43, 84], "respect": [32, 41, 42, 43, 44, 55, 62, 84, 90], "attach_al": [32, 56], "attach_pdarrai": [32, 42], "unregister_pdarray_by_nam": [32, 42], "list_registri": [32, 34, 42], "100": [32, 41, 42, 45, 59, 66, 87], "my_zero": [32, 42], "potenti": [32, 42], "reconnect": [32, 42], "bigint_to_uint_arrai": [32, 42, 43], "18446744073709551616": [32, 42, 43], "18446744073709551617": [32, 42, 43], "18446744073709551618": [32, 42, 43], "18446744073709551619": [32, 42, 43], "18446744073709551620": [32, 42, 43], "broadcast_dim": [32, 56], "sa": [32, 56], "sb": [32, 56], "broadcast_to_shap": [32, 42], "clear": [32, 42], "clz": [32, 42], "lz": [32, 42], "62": [32, 42, 59], "61": [32, 42], "60": [32, 42], "move": [32, 53, 64, 66, 86, 90, 96], "forward": [32, 53, 80, 86, 96], "thu": [32, 35, 43, 53, 58, 68, 69, 86, 96], "lexicograph": [32, 53, 62, 86], "convert_if_categor": [32, 56], "cov": [32, 42], "covari": [32, 42], "create_pdarrai": [32, 58], "gpu": [32, 42], "ctz": [32, 42], "cumprod": [32, 41, 83, 87], "cumul": [32, 41, 45, 82, 87], "5728783400481925": [32, 41, 87], "0472855509390593": [32, 41, 87], "33": [32, 41, 87], "78523998586553": [32, 41, 87], "134": [32, 41, 87], "05309592737584": [32, 41, 87], "450": [32, 41, 87], "21589865655358": [32, 41, 87], "cumsum": [32, 41, 83, 87], "1598310770203937": [32, 41, 87], "4110385860243131": [32, 41, 87], "1622479306453748": [32, 41, 87], "710615785506533": [32, 41, 87], "945880905466208": [32, 41, 87], "date_rang": [32, 55], "period": [32, 55], "freq": [32, 55], "tz": [32, 55], "impos": [32, 55], "dateoffset": [32, 55], "5h": [32, 55], "offset_alias": [32, 55], "alias": [32, 55], "tzinfo": [32, 55], "zone": [32, 55], "asia": [32, 55], "hong_kong": [32, 55], "timezon": [32, 55], "naiv": [32, 55], "midnight": [32, 55], "effect": [32, 55, 64, 98], "Of": [32, 55], "exactli": [32, 55], "linearli": [32, 43, 55, 90], "learn": [32, 55, 58, 73], "pcg64": [32, 46, 48], "manner": [32, 46, 48, 58], "unstabl": [32, 46, 48], "unalt": [32, 46, 48], "deg2rad": [32, 41], "disableverbos": [32, 38], "disabl": [32, 38, 60], "defaultt": [32, 38], "divmod": [32, 42], "dividend": [32, 42], "floordivis": [32, 42], "modular": [32, 42, 64], "divis": [32, 42], "quotient": [32, 42], "No": [32, 42, 75, 80], "div": [32, 42], "enableverbos": [32, 38], "exponenti": [32, 41, 87], "7182818284590451": [32, 41, 87], "3890560989306504": [32, 41, 87], "085536923187668": [32, 41, 87], "54": [32, 41, 87], "598150033144236": [32, 41, 87], "84010843172504": [32, 41, 87], "46": [32, 41, 87], "454368507659211": [32, 41, 87], "5571769623557188": [32, 41, 87], "494295836924771": [32, 41, 87], "478894913238722": [32, 41, 87], "minu": [32, 41], "exp1m": [32, 41], "19": [32, 41, 56, 88, 94], "53": [32, 41], "45": [32, 41], "32": [32, 41, 42, 50, 59, 66, 68, 76, 77], "read_path": [32, 35, 84], "dataset_nam": [32, 35, 84], "ak_data": [32, 35, 84], "write_fil": [32, 35, 84], "return_obj": [32, 35, 84], "read_parquet": [32, 35, 71, 84], "import_data": [32, 35, 69, 84], "fmod": [32, 42], "from_seri": [32, 43], "overridden": [32, 43, 50], "situat": [32, 43], "57600036956445599": [32, 43], "41619265571741659": [32, 43], "6615356693784662": [32, 43], "choic": [32, 43, 75], "to_datetim": [32, 43], "2018": [32, 43], "01": [32, 43, 59, 62, 64], "1514764800000000000": [32, 43], "parseabl": [32, 43, 90], "deleg": [32, 41, 43, 47, 48, 90, 93], "accordingli": [32, 43, 68, 90], "generic_concat": [32, 56], "getarkoudalogg": 32, "handler": 32, "logformat": 32, "default_log_format": 32, "conveni": [32, 76, 77, 84], "instanti": 32, "streamhandl": 32, "consol": 32, "lineno": 32, "levelnam": 32, "dynam": 32, "get_callback": [32, 56], "get_column": [32, 35, 67, 71], "get_dataset": [32, 35, 67, 71, 84], "column_delim": [32, 35, 84], "read_nest": [32, 35, 84], "get_filetyp": [32, 35], "get_null_indic": [32, 35], "datasetnam": [32, 35, 84], "siphash": [32, 41], "risk": [32, 41, 68], "few": [32, 41, 66], "small": [32, 41, 68, 84], "strongli": [32, 41], "cryptograph": [32, 41], "emploi": [32, 41], "adversari": [32, 41], "engin": [32, 41], "linear": [32, 41, 100], "subsequ": [32, 41, 68], "xore": [32, 41], "cancel": [32, 41], "henc": [32, 41], "rotat": [32, 41, 42], "ordin": [32, 41], "hist_al": [32, 45], "col": [32, 45], "grid": [32, 45], "histogram": [32, 41, 45, 83], "visual": [32, 45], "randn": [32, 45], "bin": [32, 41, 42, 45, 75, 76, 77, 80, 93], "evenli": [32, 41, 43, 90, 93], "edg": [32, 41, 45, 93], "notimplementederror": [32, 41, 58, 93], "histogram2d": [32, 41, 93], "matplotlib": [32, 41, 45, 79, 93], "pyplot": [32, 41, 45, 93], "plt": [32, 41, 45, 93], "nbin": [32, 41, 93], "bi": [32, 41], "coordin": [32, 41, 88], "nx": [32, 41, 59], "ny": [32, 41], "hist": [32, 41], "x_edg": [32, 41], "y_edg": [32, 41], "histogramdd": [32, 41], "multidimension": [32, 41], "nd": [32, 41], "z": [32, 41], "glob": [32, 35, 84], "runtimewarn": [32, 35, 84], "pda1": [32, 44, 98], "pda2": [32, 44, 98], "assume_uniqu": [32, 44, 98], "indexof1d": [32, 44], "arr": [32, 44], "multia": [32, 44, 98], "multib": [32, 44, 98], "issupportedint": 32, "as_compon": [32, 56], "is_sort": [32, 42, 83, 87, 93], "monoton": [32, 42, 87, 93], "finit": [32, 41], "list_symbol_t": [32, 34], "path_prefix": [32, 35], "calc_string_offset": [32, 35, 84], "detect": [32, 35, 68, 84], "termin": [32, 35, 68, 73, 80, 99], "invalid": [32, 35, 84], "filenotfound": [32, 35], "cwd": [32, 35, 42], "name_prefix_local": [32, 35, 42], "filetyp": [32, 35, 84], "datsetnam": [32, 35], "read_": [32, 35], "natur": [32, 41, 87], "logarithm": [32, 41, 87], "3025850929940459": [32, 41, 87], "6051701859880918": [32, 41, 87], "3219280948873626": [32, 41, 87], "6438561897747253": [32, 41, 87], "plu": [32, 41], "h5l": [32, 35], "imit": [32, 35], "technic": [32, 35], "ls_csv": [32, 35, 67, 71], "maxk": [32, 42, 78, 83, 87, 93], "degred": [32, 42, 87], "mink": [32, 42, 78, 83, 87, 93], "complementari": [32, 42], "Ones": [32, 43, 90], "pariti": [32, 42], "odd": [32, 42], "mydtyp": [32, 42, 95], "attributi": [32, 42, 95], "opeqop": [32, 42], "coeffici": [32, 42], "format_oth": [32, 42], "itself": [32, 42, 62], "popcount": [32, 42], "fastest": [32, 42], "fortran": [32, 42, 95], "rotl": [32, 42], "rotr": [32, 42], "h5": [32, 35, 42, 84], "slice_bit": [32, 42], "bottom": [32, 42, 62], "65": [32, 42], "0b101111111111111111111111111111111111111111111111111111111111111111": [32, 42], "0b10": [32, 42], "numeric_and_bool_scalar": [32, 42], "to_cuda": [32, 42], "numba": [32, 42], "devicend": [32, 42], "builtin": [32, 42], "devicendarrai": [32, 42], "importerror": [32, 42], "cuda": [32, 42], "modulenotfounderror": [32, 42], "cours": [32, 42], "name_prefix": [32, 35, 42, 84], "to_parqet": [32, 42], "attahc": [32, 42], "plot_dist": [32, 45], "xlabel": [32, 45], "newfig": [32, 45], "graph": [32, 45, 92], "figur": [32, 45, 64], "below": [32, 45, 59, 60, 66, 75, 76, 77, 79, 84, 91], "pwr": [32, 42], "uniniti": [32, 42], "vari": [32, 42, 66, 75, 77, 79, 81, 96], "27": [32, 42, 59, 66, 88], "pretty_print_inform": [32, 34], "rad2deg": [32, 41], "pull": [32, 35, 43, 62, 68], "undefin": [32, 43, 47, 48, 90], "92176432277231968": [32, 43, 47, 48, 90], "083130710959903542": [32, 43, 47, 48, 90], "68894208386667544": [32, 43, 47, 48, 90], "9160772326374946": [32, 43, 47, 48, 90], "353429832157099": [32, 43, 47, 48, 90], "5392023718621486": [32, 43, 47, 48, 90], "random_strings_lognorm": [32, 43], "logmean": [32, 43], "logstd": [32, 43], "printabl": [32, 43], "lognorm": [32, 43], "heavi": [32, 43], "toward": [32, 43], "tvkjte": [32, 43], "abocorhfm": [32, 43], "ludmmgtb": [32, 43], "kwoqnphz": [32, 43], "vsxrrl": [32, 43], "fp": [32, 43], "3q4kc": [32, 43], "hf": [32, 43], "ie": [32, 43], "djkba": [32, 43], "5oz1": [32, 43], "random_strings_uniform": [32, 43], "minlen": [32, 43], "maxlen": [32, 43], "tvkj": [32, 43], "ewab": [32, 43], "hfmd": [32, 43], "4k": [32, 43], "hff": [32, 43], "stricttyp": [32, 35, 84], "tell": [32, 35, 59, 84], "versu": [32, 35, 84], "independ": [32, 35, 50, 84], "sequenti": [32, 35, 84], "dset_nam": [32, 35], "strict_typ": [32, 35], "tag_data": [32, 35], "tagdata": [32, 35], "read_tagged_data": [32, 35], "record": [32, 35], "filename_cod": [32, 35], "filname_cod": [32, 35], "col_nam": [32, 35], "sent": [32, 35, 69], "receive_datafram": [32, 35], "send_arrai": [32, 35], "register_al": [32, 56], "myarrai": [32, 56], "restor": [32, 35], "snapshot": [32, 35], "alongsid": [32, 35], "rot": [32, 42], "160": [32, 42], "384": [32, 42], "896": [32, 42], "2048": [32, 42], "4608": [32, 42], "512": [32, 42], "256": [32, 42, 59], "96": [32, 42], "56": [32, 42, 67], "nearest": [32, 41], "14159": [32, 41], "wrong": [32, 35, 99], "skew": 32, "bia": 32, "weight": 32, "9442193396379163": 32, "4142135623730951": [32, 42], "7320508075688772": [32, 42], "68586185091150265": [32, 43, 47, 48], "1723810583573375": [32, 43, 47, 48], "567584107142031": [32, 43, 47, 48], "timedelta_rang": [32, 55], "invok": [32, 43, 47, 48], "30013431967121934": [32, 43, 47, 48], "47383036230759112": [32, 43, 47, 48], "0441791878997098": [32, 43, 47, 48], "unregister_al": [32, 56], "return_count": [32, 41, 93], "choos": [32, 41, 62, 77, 80, 87, 99], "claus": [32, 41, 87], "unequ": [32, 41, 87], "a1": [32, 37, 41, 87], "a2": [32, 37, 41, 87], "cond": [32, 41, 87], "s1": [32, 41, 87], "s2": [32, 41, 87], "c1": [32, 41, 87], "c2": [32, 41, 87], "write_log": [32, 38], "log_msg": [32, 38], "clientgeneratedlog": [32, 38], "log_lvl": [32, 38], "identif": [32, 38], "delimited_file_to_dict": 36, "unsupportedoper": 36, "dict_to_delimited_fil": 36, "oerror": 36, "get_directori": 36, "write_line_to_fil": 36, "unsupportedopt": 36, "compute_join_s": 37, "gen_rang": 37, "actual": [37, 58, 67], "join_on_eq_with_dt": 37, "t1": 37, "t2": 37, "pred": 37, "result_limit": 37, "window": [37, 50, 73, 81], "predic": 37, "timestamp": 37, "milli": 37, "result_array_on": 37, "true_dt": 37, "abs_dt": 37, "pos_dt": 37, "parent_entry_nam": [39, 40], "match_typ": [39, 40, 83, 100], "matchtyp": [39, 40, 100], "find_match": [39, 83, 100], "group_num": [39, 100], "return_group_origin": [39, 100], "isaac": [39, 100], "newton": [39, 100], "calculu": [39, 100], "gottfri": [39, 100], "leibniz": [39, 100], "math": [39, 100], "indici": [39, 100], "locationsinfo": 40, "get_match": 40, "return_num_sub": 40, "generate_token": 50, "secret": 50, "token_hex": 50, "hexidecim": 50, "generate_username_token_json": 50, "get_arkouda_client_directori": 50, "platform": 50, "artifact": 50, "home": [50, 75, 78], "environ": [50, 59, 73, 78, 79], "get_home_directori": 50, "expandus": 50, "get_usernam": 50, "environmenterror": 50, "linux": [50, 59, 75, 80, 81], "maco": [50, 73, 76, 81], "aka": 50, "darwin": [50, 77], "username_token": 50, "enrich_inplac": 56, "keynam": 56, "seg": 56, "earlier": [56, 66], "report_mem": 56, "sparse_sum_help": 56, "idx1": 56, "idx2": 56, "val1": 56, "val2": 56, "matric": 56, "vals1": 56, "vals2": 56, "inds2": 56, "28": [56, 88], "page": [57, 62, 75], "auto": [57, 62], "arkouda": [57, 59, 62, 64, 65, 69, 71, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 92, 93, 94, 95, 98], "sphinx": [57, 75, 79], "autoapi": [57, 79], "guid": [58, 73, 75, 76, 77], "describ": [58, 62], "walk": [58, 60, 73], "times2": 58, "conform": 58, "somewher": 58, "subdirectori": 58, "numpydoc": 58, "readthedoc": 58, "generic_msg": [58, 78], "repli": 58, "possibli": 58, "typecheck": 58, "doubl": 58, "isinst": 58, "cmd": [58, 78], "arg1": 58, "__all__": 58, "contribut": 58, "machineri": 58, "broken": 58, "dispatch": 58, "arraysetop": [58, 98], "arraysetopsmsg": 58, "modul": [58, 63, 64, 73, 84, 100], "sake": 58, "simplic": 58, "happen": [58, 62], "serverdaemon": 58, "times2msg": 58, "gensymentri": 58, "getgenerictypearrayentri": 58, "tosymentri": 58, "symentri": 58, "st": 58, "addentri": 58, "servererrorstr": 58, "src": [58, 78], "respond": 58, "reqmsg": 58, "msgarg": 58, "borrow": 58, "messagearg": 58, "symtab": 58, "msgtupl": 58, "throw": 58, "vname": 58, "nextnam": 58, "gent": 58, "getgenerictypedarrayentri": 58, "getvalueof": 58, "av": 58, "createsymentri": 58, "attrib": 58, "aslogg": 58, "getmodulenam": [58, 78], "getroutinenam": 58, "getlinenumb": 58, "msgtype": 58, "errormsg": 58, "ret": 58, "final": [58, 59, 62, 75], "resisterfunct": 58, "abl": [58, 62, 68, 69, 75, 84], "launch": [58, 80, 83], "script": [58, 63, 77, 78, 82], "undoubl": 58, "overview": 59, "simplest": 59, "navig": [59, 62, 75, 76, 77, 79], "python3": [59, 63, 75, 76], "autosav": 59, "storag": 59, "benchmark_v2": 59, "commandlin": 59, "0001_0d4865d7c9453adc6af6409568da326845c358b9_20230406_165330": 59, "Will": 59, "counter_nam": 59, "trial": [59, 82], "comma": [59, 67, 75], "NO": 59, "comparison": [59, 67, 89, 95, 96, 100], "maxbit": 59, "wraparound": 59, "unaffect": 59, "index_s": [59, 82], "gather": [59, 83], "scatter": [59, 83], "value_s": [59, 82], "idna": 59, "ascii": 59, "io_only_writ": 59, "io_only_read": 59, "io_only_delet": 59, "io_files_per_loc": 59, "io_compress": 59, "io_path": 59, "ak_io_benchmark": 59, "measur": [59, 82], "rate": 59, "encoding_benchmark": 59, "arkouda_root": 59, "cpython": 59, "64bit": 59, "0014_31de39be8b19c76d073a8999def6673a305c250d_20230405_145759_uncommit": 59, "strings_encodedecod": 59, "stddev": 59, "iqr": 59, "outlier": 59, "bench_encod": 59, "3304": 59, "2561": 59, "7544": 59, "5306": 59, "8075": 59, "9012": 59, "210": 59, "3306": 59, "79": 59, "3805": 59, "02": 59, "8800": 59, "7336": 59, "6465": 59, "58": 59, "4231": 59, "5246": 59, "267": 59, "8380": 59, "bench_decod": 59, "4444": 59, "03": 59, "4177": 59, "7852": 59, "4097": 59, "5622": 59, "04": [59, 80], "5837": 59, "264": 59, "1882": 59, "4621": 59, "9177": 59, "2250": 59, "6125": 59, "50": [59, 66], "0197": 59, "17": [59, 66, 88, 94], "9991": 59, "90": 59, "236": 59, "6864": 59, "88": 59, "0015_31de39be8b19c76d073a8999def6673a305c250d_20230405_145947_uncommit": 59, "4298": 59, "6450": 59, "5541": 59, "0889": 59, "5801": 59, "1436": 59, "281": 59, "3620": 59, "4875": 59, "5255": 59, "7912": 59, "07": 59, "4328": 59, "87": 59, "5652": 59, "4869": 59, "39": 59, "263": 59, "7659": 59, "94": 59, "lot": 59, "benefici": [59, 70], "purpos": [59, 62, 85, 91, 97], "main": [59, 62, 68], "area": 59, "care": 59, "lesser": 59, "extent": 59, "cpu": 59, "architectur": 59, "ran": [59, 63], "350": 59, "relat": [59, 62, 66], "machine_info": 59, "msi": 59, "x86_64": [59, 76, 80], "python_compil": 59, "gcc": [59, 76], "python_implement": 59, "python_implementation_vers": 59, "python_vers": 59, "python_build": 59, "nov": 59, "26": [59, 88], "2020": 59, "57": 59, "microsoft": [59, 80], "wsl2": [59, 81], "cpuinfo_vers": 59, "cpuinfo_version_str": 59, "arch": 59, "arch_string_raw": 59, "vendor_id_raw": 59, "genuineintel": 59, "brand_raw": 59, "intel": 59, "tm": 59, "i7": 59, "8750h": 59, "20ghz": 59, "hz_advertised_friendli": 59, "2000": 59, "ghz": 59, "hz_actual_friendli": 59, "2080": 59, "hz_advertis": 59, "2200000000": 59, "hz_actual": 59, "2207999000": 59, "model": 59, "158": 59, "famili": 59, "3dnowprefetch": 59, "abm": 59, "adx": 59, "ae": 59, "apic": 59, "arch_cap": 59, "avx": 59, "avx2": 59, "bmi1": 59, "bmi2": 59, "clflush": 59, "clflushopt": 59, "cmov": 59, "constant_tsc": 59, "cpuid": 59, "cx16": 59, "cx8": 59, "de": 59, "erm": 59, "f16c": 59, "flush_l1d": 59, "fma": 59, "fpu": 59, "fsgsbase": 59, "fxsr": 59, "ht": 59, "hypervisor": 59, "ibpb": 59, "ibr": 59, "invpcid": 59, "invpcid_singl": 59, "lahf_lm": 59, "lm": 59, "mca": 59, "mce": 59, "mmx": 59, "movb": 59, "msr": 59, "mtrr": 59, "nopl": 59, "osxsav": 59, "pae": 59, "pat": 59, "pcid": 59, "pclmulqdq": 59, "pdpe1gb": 59, "pge": 59, "pni": 59, "popcnt": 59, "pse": 59, "pse36": 59, "pti": 59, "rdrand": 59, "rdrnd": 59, "rdseed": 59, "rdtscp": 59, "rep_good": 59, "sep": 59, "smap": 59, "smep": 59, "ss": 59, "ssbd": 59, "sse": 59, "sse2": 59, "sse4_1": 59, "sse4_2": 59, "ssse3": 59, "stibp": 59, "syscal": 59, "tsc": 59, "vme": 59, "xgetbv1": 59, "xsave": 59, "xsavec": 59, "xsaveopt": 59, "xtopologi": 59, "l3_cache_s": 59, "9437184": 59, "l2_cache_s": 59, "mib": 59, "l1_data_cache_s": 59, "196608": 59, "l1_instruction_cache_s": 59, "l2_cache_line_s": 59, "l2_cache_associ": 59, "commit_info": 59, "31de39be8b19c76d073a8999def6673a305c250d": 59, "2023": [59, 73, 76], "04t16": 59, "author_tim": 59, "04t12": 59, "dirti": 59, "2324_pytest_benchmark_doc": 59, "fullnam": 59, "extra_info": 59, "descript": [59, 62, 66, 83], "problem_s": 59, "transfer_r": 59, "0002": 59, "gib": 59, "disable_gc": 59, "timer": 59, "perf_count": 59, "min_round": 59, "max_tim": 59, "min_tim": 59, "5e": 59, "06": 59, "warmup": 59, "004066600000442122": 59, "007168699999965611": 59, "0048064200000226265": 59, "001326192548940973": 59, "004246700000294368": 59, "0009575499998391024": 59, "q1": 59, "004131924999910552": 59, "q3": 59, "005089474999749655": 59, "iqr_outli": 59, "stddev_outli": 59, "ld15iqr": 59, "hd15iqr": 59, "208": 59, "0550596900172": 59, "024032100000113132": 59, "00383609999971668": 59, "0043372999998609885": 59, "004057779999857303": 59, "00018361238254747651": 59, "0040258999997604406": 59, "0002090000002681336": 59, "0039507749997937935": 59, "004159775000061927": 59, "246": 59, "44017172817806": 59, "020288899999286514": 59, "05t15": 59, "09": [59, 76], "097392": 59, "pai": 59, "attent": 59, "featur": [60, 61, 62, 63, 65, 75, 78, 84, 92], "chpl_comm": [60, 76, 77], "gasnet_spawnfn": 60, "gasnet_route_output": 60, "chpl_gasnet_cfg_opt": 60, "ibv": 60, "gasnet_quiet": 60, "gasnet_masterip": 60, "127": 60, "gasnet_workerip": 60, "chpl_test_timeout": 60, "chpl_rt_oversubscrib": 60, "ye": 60, "gasnetsetup": 60, "cd": [60, 73, 76, 77, 79], "chpl_home": [60, 76, 77], "nl": [60, 73, 99], "would": [60, 64, 69, 84, 87, 92], "too": [61, 84], "backend": [61, 75], "parallel": [61, 84, 95, 98], "leverag": [61, 76], "increment": [61, 62], "everyth": [61, 62], "cut": [61, 62, 64], "somewhat": 61, "heroic": 61, "acceler": 61, "makebinari": 61, "bottleneck": 61, "tend": 61, "chpl_target_compil": 61, "clang": [61, 76], "gnu": [61, 80], "j16": 61, "outlin": [62, 68], "taken": [62, 78], "evolv": 62, "gain": 62, "team": 62, "action": 62, "click": [62, 75, 81], "draft": 62, "button": 62, "bring": 62, "text": [62, 67, 84], "box": 62, "publish": 62, "scheme": 62, "yyyi": 62, "mm": 62, "dd": 62, "v2022": 62, "31": [62, 80], "dot": 62, "hei": 62, "mistak": 62, "ok": 62, "dash": 62, "etc": [62, 76, 80], "underneath": 62, "excel": 62, "next": [62, 64, 75, 78, 99], "major": [62, 67, 85, 91, 97], "minor": 62, "review": 62, "Or": 62, "straight": 62, "green": 62, "believ": 62, "loos": 62, "remot": [62, 76, 77, 99], "upstream": [62, 76, 77], "someth": [62, 63, 99], "fetch": [62, 64], "previou": [62, 64, 77], "recent": 62, "ellips": 62, "prev": 62, "onlin": [62, 80], "concis": 62, "onelin": 62, "graphic": 62, "gitk": 62, "push": [62, 75], "strive": 62, "hyperlink": 62, "reason": [62, 64, 77], "guidelin": [62, 100], "substanti": 62, "bug": [62, 65], "smaller": [62, 67, 84], "coupl": 63, "unset": [63, 77], "optim": 63, "wors": 63, "matter": 63, "hit": 63, "chpl_develop": [63, 77], "rebuilt": 63, "homebrew": [63, 75], "shouldn": [63, 64], "worri": 63, "biggest": 63, "involv": [63, 81], "focus": 63, "just": [63, 64, 95], "crucial": 63, "saveusedmodul": [63, 64, 78], "piec": 63, "benchmark": [63, 65, 78, 82], "interact": [63, 67, 71, 72, 73, 77, 79], "session": [63, 73], "usedmodul": [63, 64, 78], "ctrl": 63, "easiest": 63, "mv": [63, 64], "arkouda_config_fil": [63, 78], "know": 63, "ll": [63, 64, 75], "suggest": [64, 80], "gasnet": [64, 65, 76, 77], "report": 64, "pretti": 64, "frustrat": 64, "past": 64, "recompil": 64, "checkout": 64, "v2023": [64, 73], "isn": 64, "mine": 64, "wherev": 64, "rememb": [64, 66], "won": 64, "overnight": 64, "hog": 64, "ve": [64, 76, 77], "got": 64, "forget": [64, 80], "techniqu": 64, "unnecessari": 64, "tip": [65, 75], "aim": 66, "introduct": 66, "commonli": 66, "exhaust": [66, 68], "ak_arr": 66, "easili": 66, "np_arr": 66, "52": 66, "84": 66, "80": 66, "71": 66, "aid": [66, 68], "transit": 66, "toolset": 66, "IN": 66, "ak_in1d": 66, "ak_int": 66, "m1": 66, "m2": 66, "ak_in1dmult": 66, "ak_in1dmulti": 66, "ak_intmult": 66, "though": 66, "extrem": [66, 68, 70], "let": 66, "sever": [66, 68, 84, 87, 90], "column_nam": 66, "column_data": 66, "fname": 66, "john": 66, "jane": 66, "jake": 66, "lname": 66, "smith": 66, "brown": 66, "ag": 66, "37": 66, "35": 66, "salari": 66, "75000": 66, "77000": 66, "100000": 66, "35000": 66, "f_name": 66, "l_name": 66, "notic": 66, "demo": 66, "computation": 66, "interest": 66, "cola": 67, "colb": 67, "colc": 67, "ghi": 67, "arkodua": [67, 68], "flexibl": 68, "adher": 68, "portion": 68, "isbool": 68, "file_vers": 68, "arkouda_vers": 68, "c_string": 68, "mark": 68, "therefor": 68, "unflatten": 68, "reconstruct": 68, "number_of_dimens": 68, "array_of_size_rank": 68, "current_arkouda_vers": 68, "na_cod": 68, "unique_key_idx": 68, "key_": 68, "notifi": 68, "elect": [68, 69], "ONE": 68, "explicit": [68, 95], "still": [68, 100], "orient": [70, 89, 91, 95, 100], "writ": 70, "paruqet": 70, "ineffiec": 70, "fact": 70, "analyt": 72, "supercomput": 72, "visit": [73, 76, 77], "conda": [73, 75, 76, 77, 79], "yml": [73, 76, 77, 79], "download": [73, 76, 77, 81], "05": 73, "tar": [73, 75, 76, 77], "xzf": [73, 77], "gz": [73, 75, 76, 77], "listen": [73, 99], "your_machin": 73, "chapel_vers": 73, "15461882265": 73, "token_str": 73, "node01": [73, 99], "hang": 73, "exit": [73, 80], "prerequisit": [75, 76, 77], "proceed": 75, "manag": [75, 76, 77, 79, 81], "mac": [75, 77], "makefil": 75, "zeromq": [75, 79], "eval": 75, "anaconda3": [75, 76, 77], "pip": [75, 76, 77], "grep": [75, 80], "opt": [75, 76, 77], "caskroom": [75, 77], "miniforg": 75, "site": 75, "rpath": 75, "boost": 75, "cpp": 75, "thrift": 75, "utf8proc": 75, "virtual": 75, "venv": [75, 76], "activ": [75, 76, 77, 92], "upgrad": [75, 79], "wheel": 75, "clean": 75, "deactiv": 75, "rm": 75, "rf": 75, "dist": 75, "whl": 75, "chpldoc": [75, 76], "frontend": 75, "browser": 75, "ghpage": 75, "scroll": 75, "folder": 75, "homepag": 75, "md": [75, 76, 77], "sudo": [76, 80], "apt": 76, "m4": 76, "perl": 76, "bash": [76, 77], "mawk": 76, "pkg": 76, "config": [76, 78], "cmake": [76, 79], "llvm": [76, 77, 80], "libclang": 76, "cpp14": 76, "libedit": 76, "repo": [76, 77, 81], "encourag": [76, 77], "your_fork": [76, 77], "further": [76, 77, 81], "highli": 76, "archiv": 76, "x86": 76, "wget": 76, "sh": [76, 77], "bashrc": [76, 77, 80], "packag": [76, 77, 79, 81], "pythonpath": [76, 77], "live": [76, 77], "pwd": [76, 77], "quickstart": [76, 77, 81], "particularli": [76, 78], "regard": 76, "distro": 76, "cento": 76, "consequ": 76, "newer": 76, "devtoolset": 76, "softwar": 76, "explod": 76, "lang": 76, "xvf": 76, "setchplenv": [76, 77], "chplconfig": 76, "chpl_re2": [76, 77], "bundl": [76, 77], "chpl_llvm": [76, 77], "chpl_gmp": [76, 77], "linux64": 76, "yum": 76, "devel": 76, "gawk": 76, "curl": 76, "incompat": 76, "el7": 76, "scl": 76, "rh": 76, "cm_version": 76, "kitwar": 76, "licens": 76, "subdir": 76, "simul": [76, 77], "manual": 77, "brew": 77, "cask": 77, "exact": 77, "chipset": 77, "2022": 77, "macosx": 77, "arm64": 77, "progress": 77, "life": [77, 79], "cycl": [77, 79], "sync": 77, "zsh": 77, "gmp": 77, "rc": 77, "path_to_chpl": 77, "chpl_target_cpu": 77, "path_to_ark": 77, "reactiv": 77, "zshrc": 77, "successfulli": 77, "hello3": 77, "datapar": 77, "defautl": 77, "funcion": 78, "prior": 78, "exclud": 78, "valuabl": 78, "switch": [78, 88], "totestmsg": 78, "testmsg": 78, "addition": [78, 85], "kextrememsg": 78, "registerfunct": 78, "minkmsg": 78, "maxkmsg": 78, "accomplish": [78, 84], "approach": [78, 96], "test_command": 78, "__dict__": 78, "sometim": [78, 88, 95], "difficult": 78, "discov": 78, "inspect": [78, 84], "wish": 78, "pyzmq": 79, "typeguard": 79, "tabul": 79, "pyfiglet": 79, "h5py": [79, 84], "pyarrow": [79, 84], "pexpect": 79, "argpars": 79, "furo": 79, "myst": 79, "parser": 79, "linkifi": 79, "ast": 79, "931": 79, "990": 79, "yaml": 79, "env_nam": 79, "yaml_fil": 79, "prune": 79, "path_to_arkouda": 79, "strategi": [79, 80, 84], "eager": 79, "subsystem": 80, "wsl": 80, "rout": 80, "ubuntu": 80, "tutori": 80, "app": 80, "account": 80, "symlink": 80, "lt": 80, "tblgen": 80, "libtinfow": 80, "ln": 80, "libtic": 80, "plan": [80, 81, 93, 95], "powershel": 80, "vcxsrv": 80, "x410": 80, "whichev": 80, "firewal": 80, "xserver": 80, "hous": 80, "conf": 80, "nameserv": 80, "awk": 80, "serv": 81, "clone": 81, "100000000": 82, "arithmet": [83, 95], "scan": 83, "summar": [83, 84], "dedupl": 83, "setop": 83, "columnar": 84, "spread": 84, "mpi": 84, "layer": 84, "pipelin": [84, 100], "aggress": 84, "hundr": 84, "thousand": 84, "ingest": [84, 100], "customiz": 84, "schema": 84, "taht": 84, "autoclass": 85, "offer": [85, 91, 97, 100], "mathemat": 87, "multiplex": 87, "29": 88, "advanc": 88, "talk": 88, "cartesian": 88, "wherea": [88, 100], "discourag": [88, 89, 91, 95, 96, 100], "forc": [88, 89, 91, 95, 100], "concept": 89, "almost": [89, 91, 95, 100], "liter": [89, 100], "alon": [89, 100], "unrel": 90, "movement": 90, "unsign": 91, "ieee": [91, 95], "1073741824": 91, "workhors": 92, "scienc": 92, "extract": 92, "imagin": 92, "bydayofweek": 92, "numid": 92, "013": 93, "36": 93, "934176000000015": 93, "07734942223993": 93, "syntax": 94, "assig": 94, "42": 94, "ind": 94, "matlab": 94, "outer": 94, "touch": 94, "expans": 94, "lim": 94, "backbon": 95, "And": 95, "incorpor": 95, "implicit": 95, "loss": 96, "functioanl": 96, "strucutur": 96, "abil": 96, "shown": 99, "sai": 99, "went": 99, "reachabl": 99, "wide": 100, "compris": 100, "whenev": 100, "threshold": 100, "pipe": 100, "googl": 100, "sacrific": 100, "notabl": 100, "exchang": 100}, "objects": {"": [[32, 0, 0, "-", "arkouda"]], "arkouda": [[32, 1, 1, "", "ARKOUDA_SUPPORTED_DTYPES"], [32, 1, 1, "", "AllSymbols"], [88, 2, 1, "", "ArrayView"], [32, 2, 1, "", "BitVector"], [32, 5, 1, "", "BitVectorizer"], [32, 2, 1, "", "CachedAccessor"], [89, 2, 1, "", "Categorical"], [32, 1, 1, "", "DTypeObjects"], [32, 1, 1, "", "DTypes"], [91, 2, 1, "", "DataFrame"], [32, 2, 1, "id81", "Datetime"], [32, 2, 1, "", "DatetimeAccessor"], [32, 2, 1, "", "DiffAggregate"], [32, 2, 1, "", "ErrorMode"], [32, 2, 1, "", "Fields"], [32, 1, 1, "", "GROUPBY_REDUCTION_TYPES"], [32, 2, 1, "", "Generator"], [92, 2, 1, "", "GroupBy"], [32, 2, 1, "", "IPv4"], [85, 2, 1, "", "Index"], [32, 1, 1, "", "LEN_SUFFIX"], [32, 2, 1, "", "LogLevel"], [32, 2, 1, "", "MultiIndex"], [32, 2, 1, "", "Power_divergenceResult"], [32, 2, 1, "", "Properties"], [32, 1, 1, "", "RegisteredSymbols"], [32, 7, 1, "id296", "RegistrationError"], [32, 2, 1, "", "Row"], [32, 1, 1, "", "SEG_SUFFIX"], [32, 1, 1, "", "ScalarDTypes"], [32, 2, 1, "", "SegArray"], [97, 2, 1, "", "Series"], [32, 2, 1, "", "StringAccessor"], [32, 2, 1, "id433", "Strings"], [32, 2, 1, "id501", "Timedelta"], [32, 1, 1, "", "VAL_SUFFIX"], [87, 5, 1, "", "abs"], [2, 0, 0, "-", "accessor"], [32, 5, 1, "", "akabs"], [32, 1, 1, "id523", "akbool"], [32, 5, 1, "id524", "akcast"], [32, 1, 1, "", "akfloat64"], [32, 1, 1, "id525", "akint64"], [4, 0, 0, "-", "akscipy"], [32, 1, 1, "id526", "akuint64"], [7, 0, 0, "-", "alignment"], [87, 5, 1, "", "all"], [32, 1, 1, "", "all_scalars"], [87, 5, 1, "", "any"], [90, 5, 1, "", "arange"], [32, 5, 1, "", "arccos"], [32, 5, 1, "", "arccosh"], [32, 5, 1, "", "arcsin"], [32, 5, 1, "", "arcsinh"], [32, 5, 1, "", "arctan"], [32, 5, 1, "", "arctan2"], [32, 5, 1, "", "arctanh"], [87, 5, 1, "", "argmax"], [87, 5, 1, "", "argmaxk"], [87, 5, 1, "", "argmin"], [87, 5, 1, "", "argmink"], [86, 5, 1, "", "argsort"], [84, 5, 1, "", "array"], [22, 0, 0, "-", "array_api"], [24, 0, 0, "-", "array_view"], [32, 5, 1, "", "attach"], [32, 5, 1, "", "attach_all"], [32, 5, 1, "", "attach_pdarray"], [32, 1, 1, "", "bigint"], [32, 5, 1, "", "bigint_from_uint_arrays"], [32, 1, 1, "id535", "bitType"], [32, 1, 1, "", "bool"], [32, 1, 1, "", "bool_scalars"], [32, 5, 1, "id537", "broadcast"], [32, 5, 1, "", "broadcast_dims"], [32, 5, 1, "", "broadcast_to_shape"], [95, 5, 1, "", "cast"], [25, 0, 0, "-", "categorical"], [32, 5, 1, "", "ceil"], [32, 5, 1, "", "check_np_dtype"], [32, 5, 1, "", "chisquare"], [32, 5, 1, "", "clear"], [26, 0, 0, "-", "client"], [27, 0, 0, "-", "client_dtypes"], [32, 5, 1, "", "clz"], [86, 5, 1, "", "coargsort"], [32, 1, 1, "", "complex128"], [32, 1, 1, "", "complex64"], [90, 5, 1, "", "concatenate"], [99, 5, 1, "", "connect"], [32, 5, 1, "", "convert_if_categorical"], [32, 5, 1, "", "corr"], [87, 5, 1, "", "cos"], [32, 5, 1, "", "cosh"], [32, 5, 1, "", "cov"], [32, 5, 1, "id543", "create_pdarray"], [32, 5, 1, "", "ctz"], [87, 5, 1, "", "cumprod"], [87, 5, 1, "", "cumsum"], [28, 0, 0, "-", "dataframe"], [32, 5, 1, "", "date_operators"], [32, 5, 1, "id545", "date_range"], [32, 5, 1, "", "default_rng"], [32, 5, 1, "", "deg2rad"], [32, 5, 1, "", "disableVerbose"], [32, 5, 1, "", "divmod"], [32, 5, 1, "", "dtype"], [29, 0, 0, "-", "dtypes"], [32, 5, 1, "", "enableVerbose"], [87, 5, 1, "", "exp"], [32, 5, 1, "", "expm1"], [84, 5, 1, "", "export"], [32, 1, 1, "", "float32"], [32, 1, 1, "", "float64"], [32, 1, 1, "", "float_scalars"], [32, 5, 1, "", "floor"], [32, 5, 1, "", "fmod"], [32, 5, 1, "id546", "from_series"], [32, 5, 1, "", "full"], [32, 5, 1, "", "full_like"], [32, 5, 1, "", "generic_concat"], [32, 5, 1, "", "getArkoudaLogger"], [32, 5, 1, "", "get_byteorder"], [32, 5, 1, "", "get_callback"], [32, 5, 1, "", "get_columns"], [84, 5, 1, "", "get_datasets"], [32, 5, 1, "", "get_filetype"], [32, 5, 1, "", "get_null_indices"], [32, 5, 1, "", "get_server_byteorder"], [30, 0, 0, "-", "groupbyclass"], [32, 5, 1, "", "hash"], [32, 5, 1, "", "hist_all"], [93, 5, 1, "", "histogram"], [32, 5, 1, "", "histogram2d"], [32, 5, 1, "", "histogramdd"], [31, 0, 0, "-", "history"], [84, 5, 1, "", "import_data"], [98, 5, 1, "", "in1d"], [33, 0, 0, "-", "index"], [32, 5, 1, "", "indexof1d"], [34, 0, 0, "-", "infoclass"], [32, 5, 1, "", "information"], [32, 1, 1, "", "int16"], [32, 1, 1, "", "int32"], [32, 1, 1, "id550", "int64"], [32, 1, 1, "", "int8"], [32, 1, 1, "id552", "intTypes"], [32, 1, 1, "id554", "int_scalars"], [32, 5, 1, "", "intersect"], [98, 5, 1, "", "intersect1d"], [32, 5, 1, "", "intx"], [32, 5, 1, "", "invert_permutation"], [35, 0, 0, "-", "io"], [36, 0, 0, "-", "io_util"], [32, 5, 1, "", "ip_address"], [32, 5, 1, "id556", "isSupportedInt"], [32, 5, 1, "", "isSupportedNumber"], [32, 5, 1, "", "is_ipv4"], [32, 5, 1, "", "is_ipv6"], [32, 5, 1, "", "is_registered"], [87, 5, 1, "", "is_sorted"], [32, 5, 1, "", "isfinite"], [32, 5, 1, "", "isinf"], [32, 5, 1, "id558", "isnan"], [37, 0, 0, "-", "join"], [90, 5, 1, "", "linspace"], [32, 5, 1, "", "list_registry"], [32, 5, 1, "", "list_symbol_table"], [32, 5, 1, "", "load"], [32, 5, 1, "", "load_all"], [87, 5, 1, "", "log"], [32, 5, 1, "", "log10"], [32, 5, 1, "", "log1p"], [32, 5, 1, "", "log2"], [38, 0, 0, "-", "logger"], [32, 5, 1, "", "ls"], [32, 5, 1, "", "ls_csv"], [39, 0, 0, "-", "match"], [40, 0, 0, "-", "matcher"], [87, 5, 1, "", "max"], [87, 5, 1, "", "maxk"], [87, 5, 1, "", "mean"], [32, 5, 1, "", "merge"], [87, 5, 1, "", "min"], [87, 5, 1, "", "mink"], [32, 5, 1, "", "mod"], [41, 0, 0, "-", "numeric"], [32, 1, 1, "", "numeric_scalars"], [32, 1, 1, "", "numpy_scalars"], [90, 5, 1, "", "ones"], [90, 5, 1, "", "ones_like"], [32, 5, 1, "", "parity"], [95, 2, 1, "", "pdarray"], [42, 0, 0, "-", "pdarrayclass"], [43, 0, 0, "-", "pdarraycreation"], [44, 0, 0, "-", "pdarraysetops"], [32, 5, 1, "", "plot_dist"], [45, 0, 0, "-", "plotting"], [32, 5, 1, "", "popcount"], [32, 5, 1, "", "power"], [32, 5, 1, "", "power_divergence"], [32, 5, 1, "", "pretty_print_information"], [87, 5, 1, "", "prod"], [32, 5, 1, "", "rad2deg"], [90, 5, 1, "", "randint"], [48, 0, 0, "-", "random"], [32, 5, 1, "", "random_strings_lognormal"], [32, 5, 1, "", "random_strings_uniform"], [84, 5, 1, "", "read"], [32, 5, 1, "", "read_csv"], [32, 5, 1, "", "read_hdf"], [32, 5, 1, "", "read_parquet"], [32, 5, 1, "", "read_tagged_data"], [32, 5, 1, "", "receive"], [32, 5, 1, "", "receive_dataframe"], [32, 5, 1, "", "register_all"], [32, 5, 1, "", "resolve_scalar_dtype"], [32, 5, 1, "", "restore"], [32, 5, 1, "", "rotl"], [32, 5, 1, "", "rotr"], [32, 5, 1, "", "round"], [49, 0, 0, "-", "row"], [32, 5, 1, "", "save_all"], [50, 0, 0, "-", "security"], [51, 0, 0, "-", "segarray"], [52, 0, 0, "-", "series"], [98, 5, 1, "", "setdiff1d"], [98, 5, 1, "", "setxor1d"], [32, 5, 1, "", "sign"], [87, 5, 1, "", "sin"], [32, 5, 1, "", "sinh"], [32, 5, 1, "", "skew"], [32, 5, 1, "", "snapshot"], [32, 5, 1, "", "sort"], [53, 0, 0, "-", "sorting"], [32, 5, 1, "", "sqrt"], [32, 5, 1, "", "square"], [32, 5, 1, "id804", "standard_normal"], [87, 5, 1, "", "std"], [32, 1, 1, "id805", "str_"], [32, 1, 1, "", "str_scalars"], [32, 5, 1, "", "string_operators"], [54, 0, 0, "-", "strings"], [87, 5, 1, "", "sum"], [32, 5, 1, "", "tan"], [32, 5, 1, "", "tanh"], [55, 0, 0, "-", "timeclass"], [32, 5, 1, "id806", "timedelta_range"], [32, 5, 1, "", "to_csv"], [32, 5, 1, "", "to_hdf"], [32, 5, 1, "", "to_parquet"], [32, 5, 1, "", "translate_np_dtype"], [32, 5, 1, "", "trunc"], [32, 1, 1, "", "uint16"], [32, 1, 1, "", "uint32"], [32, 1, 1, "", "uint64"], [32, 1, 1, "", "uint8"], [32, 5, 1, "id807", "uniform"], [98, 5, 1, "", "union1d"], [98, 5, 1, "", "unique"], [32, 5, 1, "", "unregister"], [32, 5, 1, "", "unregister_all"], [32, 5, 1, "", "unregister_pdarray_by_name"], [32, 5, 1, "", "update_hdf"], [56, 0, 0, "-", "util"], [93, 5, 1, "", "value_counts"], [87, 5, 1, "", "var"], [87, 5, 1, "", "where"], [32, 5, 1, "", "write_log"], [32, 5, 1, "", "xlogy"], [90, 5, 1, "", "zeros"], [90, 5, 1, "", "zeros_like"]], "arkouda.ArrayView": [[88, 3, 1, "", "base"], [88, 3, 1, "", "dtype"], [88, 3, 1, "", "itemsize"], [88, 3, 1, "", "ndim"], [32, 3, 1, "", "objType"], [88, 3, 1, "", "order"], [88, 3, 1, "", "shape"], [88, 3, 1, "", "size"], [32, 4, 1, "", "to_hdf"], [32, 4, 1, "", "to_list"], [88, 5, 1, "", "to_ndarray"], [32, 4, 1, "", "update_hdf"]], "arkouda.BitVector": [[32, 3, 1, "", "conserves"], [32, 4, 1, "", "format"], [32, 4, 1, "", "from_return_msg"], [32, 4, 1, "", "opeq"], [32, 4, 1, "", "register"], [32, 3, 1, "", "special_objType"], [32, 4, 1, "", "to_list"], [32, 4, 1, "", "to_ndarray"]], "arkouda.Categorical": [[89, 3, 1, "", "categories"], [89, 3, 1, "", "codes"], [89, 4, 1, "", "contains"], [89, 4, 1, "", "endswith"], [89, 4, 1, "", "from_codes"], [89, 3, 1, "", "ndim"], [89, 3, 1, "", "nlevels"], [89, 3, 1, "", "permutation"], [89, 3, 1, "", "segments"], [89, 3, 1, "", "shape"], [89, 3, 1, "", "size"], [89, 4, 1, "", "startswith"], [89, 5, 1, "", "to_ndarray"]], "arkouda.DataFrame": [[32, 4, 1, "id9", "GroupBy"], [32, 4, 1, "id10", "append"], [91, 5, 1, "", "apply_permutation"], [91, 5, 1, "", "argsort"], [32, 4, 1, "id13", "attach"], [91, 5, 1, "", "coargsort"], [32, 6, 1, "id1", "columns"], [91, 5, 1, "", "concat"], [91, 5, 1, "", "copy"], [32, 4, 1, "id17", "corr"], [91, 5, 1, "", "drop"], [91, 5, 1, "", "drop_duplicates"], [32, 6, 1, "id2", "dtypes"], [32, 6, 1, "id3", "empty"], [32, 4, 1, "id20", "filter_by_range"], [32, 4, 1, "id21", "from_pandas"], [32, 4, 1, "id22", "from_return_msg"], [91, 5, 1, "", "groupby"], [91, 5, 1, "", "head"], [32, 6, 1, "id4", "index"], [32, 6, 1, "id5", "info"], [32, 4, 1, "id25", "is_registered"], [32, 4, 1, "id26", "isin"], [32, 4, 1, "id27", "load"], [32, 4, 1, "id28", "memory_usage"], [32, 4, 1, "id29", "merge"], [32, 3, 1, "id8", "objType"], [32, 4, 1, "id30", "read_csv"], [32, 4, 1, "id31", "register"], [91, 5, 1, "", "rename"], [91, 5, 1, "", "reset_index"], [32, 4, 1, "id34", "sample"], [32, 4, 1, "id35", "save"], [32, 6, 1, "id6", "shape"], [32, 6, 1, "id7", "size"], [32, 4, 1, "id36", "sort_index"], [91, 5, 1, "", "sort_values"], [91, 5, 1, "", "tail"], [32, 4, 1, "id39", "to_csv"], [32, 4, 1, "id40", "to_hdf"], [91, 5, 1, "", "to_pandas"], [32, 4, 1, "id42", "to_parquet"], [32, 4, 1, "id43", "transfer"], [32, 4, 1, "id44", "unregister"], [32, 4, 1, "id45", "unregister_dataframe_by_name"], [32, 4, 1, "id46", "update_hdf"], [32, 4, 1, "id47", "update_nrows"]], "arkouda.Datetime": [[32, 6, 1, "id82", "date"], [32, 6, 1, "id83", "day"], [32, 6, 1, "id84", "day_of_week"], [32, 6, 1, "id85", "day_of_year"], [32, 6, 1, "id86", "dayofweek"], [32, 6, 1, "id87", "dayofyear"], [32, 6, 1, "id88", "hour"], [32, 6, 1, "id89", "is_leap_year"], [32, 4, 1, "id108", "is_registered"], [32, 4, 1, "id109", "isocalendar"], [32, 6, 1, "id90", "microsecond"], [32, 6, 1, "id91", "millisecond"], [32, 6, 1, "id92", "minute"], [32, 6, 1, "id93", "month"], [32, 6, 1, "id94", "nanosecond"], [32, 4, 1, "id110", "register"], [32, 6, 1, "id95", "second"], [32, 3, 1, "id100", "special_objType"], [32, 4, 1, "id111", "sum"], [32, 3, 1, "id101", "supported_opeq"], [32, 3, 1, "id102", "supported_with_datetime"], [32, 3, 1, "id103", "supported_with_pdarray"], [32, 3, 1, "id104", "supported_with_r_datetime"], [32, 3, 1, "id105", "supported_with_r_pdarray"], [32, 3, 1, "id106", "supported_with_r_timedelta"], [32, 3, 1, "id107", "supported_with_timedelta"], [32, 4, 1, "id112", "to_pandas"], [32, 4, 1, "id113", "unregister"], [32, 6, 1, "id96", "week"], [32, 6, 1, "id97", "weekday"], [32, 6, 1, "id98", "weekofyear"], [32, 6, 1, "id99", "year"]], "arkouda.DiffAggregate": [[32, 3, 1, "", "gb"], [32, 3, 1, "", "values"]], "arkouda.ErrorMode": [[32, 3, 1, "", "ignore"], [32, 3, 1, "", "return_validity"], [32, 3, 1, "", "strict"]], "arkouda.Fields": [[32, 4, 1, "", "format"], [32, 4, 1, "", "opeq"]], "arkouda.Generator": [[32, 4, 1, "", "integers"], [32, 4, 1, "", "random"], [32, 4, 1, "", "standard_normal"], [32, 4, 1, "", "uniform"]], "arkouda.GroupBy": [[92, 4, 1, "", "AND"], [92, 4, 1, "", "OR"], [32, 3, 1, "id256", "Reductions"], [92, 4, 1, "", "XOR"], [92, 4, 1, "", "aggregate"], [92, 4, 1, "", "all"], [92, 4, 1, "", "any"], [92, 4, 1, "", "argmax"], [92, 4, 1, "", "argmin"], [92, 4, 1, "", "attach"], [92, 4, 1, "", "broadcast"], [92, 4, 1, "", "build_from_components"], [92, 4, 1, "", "count"], [92, 3, 1, "", "dropna"], [92, 4, 1, "", "first"], [32, 4, 1, "id271", "from_return_msg"], [92, 4, 1, "", "is_registered"], [92, 3, 1, "", "logger"], [92, 4, 1, "", "max"], [92, 4, 1, "", "mean"], [92, 4, 1, "", "median"], [92, 4, 1, "", "min"], [92, 4, 1, "", "mode"], [92, 4, 1, "", "most_common"], [92, 3, 1, "", "ngroups"], [92, 3, 1, "", "nkeys"], [92, 4, 1, "", "nunique"], [32, 3, 1, "id257", "objType"], [92, 3, 1, "", "permutation"], [92, 4, 1, "", "prod"], [92, 4, 1, "", "register"], [92, 3, 1, "", "segments"], [92, 4, 1, "id0", "size"], [92, 4, 1, "", "std"], [92, 4, 1, "", "sum"], [92, 4, 1, "", "to_hdf"], [92, 4, 1, "", "unique"], [92, 3, 1, "", "unique_keys"], [92, 4, 1, "", "unregister"], [92, 4, 1, "", "unregister_groupby_by_name"], [32, 4, 1, "id289", "update_hdf"], [92, 4, 1, "", "var"]], "arkouda.IPv4": [[32, 4, 1, "", "export_uint"], [32, 4, 1, "", "format"], [32, 4, 1, "", "normalize"], [32, 4, 1, "", "opeq"], [32, 4, 1, "", "register"], [32, 3, 1, "", "special_objType"], [32, 4, 1, "", "to_hdf"], [32, 4, 1, "", "to_list"], [32, 4, 1, "", "to_ndarray"], [32, 4, 1, "", "update_hdf"]], "arkouda.Index": [[85, 5, 1, "", "argsort"], [85, 5, 1, "", "concat"], [32, 4, 1, "", "factory"], [32, 4, 1, "", "from_return_msg"], [32, 6, 1, "", "index"], [32, 4, 1, "", "is_registered"], [32, 6, 1, "", "is_unique"], [85, 5, 1, "", "lookup"], [32, 3, 1, "", "objType"], [32, 4, 1, "", "register"], [32, 4, 1, "", "save"], [85, 5, 1, "", "set_dtype"], [32, 6, 1, "", "shape"], [32, 4, 1, "", "to_csv"], [32, 4, 1, "", "to_dict"], [32, 4, 1, "", "to_hdf"], [32, 4, 1, "", "to_list"], [32, 4, 1, "", "to_ndarray"], [32, 4, 1, "", "to_pandas"], [32, 4, 1, "", "to_parquet"], [32, 4, 1, "", "unregister"], [32, 4, 1, "", "update_hdf"]], "arkouda.LogLevel": [[32, 3, 1, "", "CRITICAL"], [32, 3, 1, "", "DEBUG"], [32, 3, 1, "", "ERROR"], [32, 3, 1, "", "INFO"], [32, 3, 1, "", "WARN"]], "arkouda.MultiIndex": [[85, 5, 1, "", "argsort"], [85, 5, 1, "", "concat"], [32, 6, 1, "", "index"], [32, 4, 1, "", "is_registered"], [85, 5, 1, "", "lookup"], [32, 3, 1, "", "objType"], [32, 4, 1, "", "register"], [85, 5, 1, "", "set_dtype"], [32, 4, 1, "", "to_dict"], [32, 4, 1, "", "to_hdf"], [32, 4, 1, "", "to_list"], [32, 4, 1, "", "to_ndarray"], [32, 4, 1, "", "to_pandas"], [32, 4, 1, "", "unregister"], [32, 4, 1, "", "update_hdf"]], "arkouda.Power_divergenceResult": [[32, 3, 1, "", "pvalue"], [32, 3, 1, "", "statistic"]], "arkouda.SegArray": [[32, 4, 1, "", "AND"], [32, 4, 1, "", "OR"], [32, 4, 1, "", "XOR"], [32, 4, 1, "", "aggregate"], [32, 4, 1, "", "all"], [32, 4, 1, "", "any"], [96, 5, 1, "", "append"], [96, 5, 1, "", "append_single"], [32, 4, 1, "", "argmax"], [32, 4, 1, "", "argmin"], [32, 4, 1, "", "attach"], [32, 4, 1, "", "concat"], [32, 4, 1, "", "copy"], [32, 4, 1, "", "filter"], [32, 4, 1, "", "from_multi_array"], [32, 4, 1, "", "from_parts"], [32, 4, 1, "", "from_return_msg"], [96, 5, 1, "", "get_jth"], [96, 5, 1, "", "get_length_n"], [96, 5, 1, "", "get_ngrams"], [96, 5, 1, "", "get_prefixes"], [96, 5, 1, "", "get_suffixes"], [32, 6, 1, "", "grouping"], [32, 4, 1, "", "hash"], [96, 5, 1, "", "intersect"], [32, 4, 1, "", "is_registered"], [32, 4, 1, "", "load"], [32, 4, 1, "", "max"], [32, 4, 1, "", "mean"], [32, 4, 1, "", "min"], [32, 6, 1, "", "non_empty"], [32, 4, 1, "", "nunique"], [32, 3, 1, "", "objType"], [96, 5, 1, "", "prepend_single"], [32, 4, 1, "", "prod"], [32, 4, 1, "", "read_hdf"], [32, 4, 1, "", "register"], [96, 5, 1, "", "remove_repeats"], [32, 4, 1, "", "save"], [96, 5, 1, "", "set_jth"], [96, 5, 1, "", "setdiff"], [96, 5, 1, "", "setxor"], [32, 4, 1, "", "sum"], [32, 4, 1, "", "to_hdf"], [32, 4, 1, "", "to_list"], [96, 5, 1, "", "to_ndarray"], [32, 4, 1, "", "to_parquet"], [32, 4, 1, "", "transfer"], [96, 5, 1, "", "union"], [32, 4, 1, "", "unique"], [32, 4, 1, "", "unregister"], [32, 4, 1, "", "unregister_segarray_by_name"], [32, 4, 1, "", "update_hdf"]], "arkouda.Series": [[32, 4, 1, "", "add"], [32, 6, 1, "", "at"], [32, 4, 1, "", "attach"], [32, 4, 1, "", "concat"], [32, 4, 1, "", "diff"], [32, 3, 1, "", "dt"], [32, 4, 1, "", "from_return_msg"], [32, 4, 1, "", "has_repeat_labels"], [97, 5, 1, "", "head"], [32, 6, 1, "", "iat"], [32, 6, 1, "", "iloc"], [32, 4, 1, "", "is_registered"], [32, 4, 1, "", "isin"], [32, 6, 1, "", "loc"], [97, 5, 1, "id0", "locate"], [32, 3, 1, "", "objType"], [97, 5, 1, "", "pdconcat"], [32, 4, 1, "", "register"], [32, 6, 1, "", "shape"], [97, 5, 1, "", "sort_index"], [97, 5, 1, "", "sort_values"], [32, 3, 1, "", "str_acc"], [97, 5, 1, "", "tail"], [32, 4, 1, "", "to_dataframe"], [32, 4, 1, "", "to_list"], [97, 5, 1, "", "to_pandas"], [97, 5, 1, "", "topn"], [32, 4, 1, "", "unregister"], [32, 4, 1, "", "validate_key"], [32, 4, 1, "", "validate_val"], [97, 5, 1, "", "value_counts"]], "arkouda.Strings": [[32, 3, 1, "id441", "BinOps"], [32, 4, 1, "id443", "astype"], [32, 4, 1, "id444", "attach"], [32, 4, 1, "id445", "cached_regex_patterns"], [32, 4, 1, "id446", "capitalize"], [100, 4, 1, "", "contains"], [32, 4, 1, "id448", "decode"], [32, 3, 1, "id439", "dtype"], [32, 4, 1, "id449", "encode"], [100, 4, 1, "", "endswith"], [32, 3, 1, "id434", "entry"], [100, 4, 1, "", "find_locations"], [100, 4, 1, "", "findall"], [100, 4, 1, "", "flatten"], [32, 4, 1, "id454", "from_parts"], [32, 4, 1, "id455", "from_return_msg"], [100, 4, 1, "", "fullmatch"], [32, 4, 1, "id457", "get_bytes"], [32, 4, 1, "id458", "get_lengths"], [32, 4, 1, "id459", "get_offsets"], [32, 4, 1, "id460", "get_prefixes"], [32, 4, 1, "id461", "get_suffixes"], [32, 4, 1, "id462", "group"], [32, 4, 1, "id463", "hash"], [32, 4, 1, "id464", "info"], [32, 4, 1, "id465", "is_registered"], [32, 4, 1, "id466", "isalnum"], [32, 4, 1, "id467", "isalpha"], [32, 4, 1, "id468", "isdigit"], [32, 4, 1, "id469", "isempty"], [32, 4, 1, "id470", "islower"], [32, 4, 1, "id471", "isspace"], [32, 4, 1, "id472", "istitle"], [32, 4, 1, "id473", "isupper"], [32, 3, 1, "id440", "logger"], [32, 4, 1, "id474", "lower"], [100, 4, 1, "", "lstick"], [100, 4, 1, "", "match"], [32, 3, 1, "id436", "nbytes"], [32, 3, 1, "id437", "ndim"], [32, 3, 1, "id442", "objType"], [100, 4, 1, "", "peel"], [32, 4, 1, "id478", "pretty_print_info"], [32, 4, 1, "id479", "purge_cached_regex_patterns"], [32, 4, 1, "id480", "register"], [100, 4, 1, "", "rpeel"], [32, 4, 1, "id482", "save"], [100, 4, 1, "", "search"], [32, 3, 1, "id438", "shape"], [32, 3, 1, "id435", "size"], [100, 4, 1, "", "split"], [100, 4, 1, "", "startswith"], [100, 4, 1, "", "stick"], [32, 4, 1, "id487", "strip"], [100, 4, 1, "", "sub"], [100, 4, 1, "", "subn"], [32, 4, 1, "id490", "title"], [32, 4, 1, "id491", "to_csv"], [32, 4, 1, "id492", "to_hdf"], [32, 4, 1, "id493", "to_list"], [100, 5, 1, "", "to_ndarray"], [32, 4, 1, "id495", "to_parquet"], [32, 4, 1, "id496", "transfer"], [32, 4, 1, "id497", "unregister"], [32, 4, 1, "id498", "unregister_strings_by_name"], [32, 4, 1, "id499", "update_hdf"], [32, 4, 1, "id500", "upper"]], "arkouda.Timedelta": [[32, 4, 1, "id515", "abs"], [32, 6, 1, "id502", "components"], [32, 6, 1, "id503", "days"], [32, 4, 1, "id516", "is_registered"], [32, 6, 1, "id504", "microseconds"], [32, 6, 1, "id505", "nanoseconds"], [32, 4, 1, "id517", "register"], [32, 6, 1, "id506", "seconds"], [32, 3, 1, "id507", "special_objType"], [32, 4, 1, "id518", "std"], [32, 4, 1, "id519", "sum"], [32, 3, 1, "id508", "supported_opeq"], [32, 3, 1, "id509", "supported_with_datetime"], [32, 3, 1, "id510", "supported_with_pdarray"], [32, 3, 1, "id511", "supported_with_r_datetime"], [32, 3, 1, "id512", "supported_with_r_pdarray"], [32, 3, 1, "id513", "supported_with_r_timedelta"], [32, 3, 1, "id514", "supported_with_timedelta"], [32, 4, 1, "id520", "to_pandas"], [32, 4, 1, "id521", "total_seconds"], [32, 4, 1, "id522", "unregister"]], "arkouda.accessor": [[2, 2, 1, "", "CachedAccessor"], [2, 2, 1, "", "DatetimeAccessor"], [2, 2, 1, "", "Properties"], [2, 2, 1, "", "StringAccessor"], [2, 5, 1, "", "date_operators"], [2, 5, 1, "", "string_operators"]], "arkouda.akscipy": [[4, 2, 1, "", "Power_divergenceResult"], [3, 0, 0, "-", "_stats_py"], [4, 5, 1, "", "chisquare"], [4, 5, 1, "", "power_divergence"], [6, 0, 0, "-", "special"]], "arkouda.akscipy.Power_divergenceResult": [[4, 3, 1, "", "pvalue"], [4, 3, 1, "", "statistic"]], "arkouda.akscipy._stats_py": [[3, 2, 1, "", "Power_divergenceResult"], [3, 5, 1, "", "chisquare"], [3, 5, 1, "", "power_divergence"]], "arkouda.akscipy._stats_py.Power_divergenceResult": [[3, 3, 1, "", "pvalue"], [3, 3, 1, "", "statistic"]], "arkouda.akscipy.special": [[5, 0, 0, "-", "_math"], [6, 5, 1, "", "xlogy"]], "arkouda.akscipy.special._math": [[5, 5, 1, "", "xlogy"]], "arkouda.alignment": [[7, 7, 1, "", "NonUniqueError"], [7, 5, 1, "", "align"], [7, 5, 1, "", "find"], [7, 5, 1, "", "in1d_intervals"], [7, 5, 1, "", "interval_lookup"], [7, 5, 1, "", "is_cosorted"], [7, 5, 1, "", "left_align"], [7, 5, 1, "", "lookup"], [7, 5, 1, "", "right_align"], [7, 5, 1, "", "search_intervals"], [7, 5, 1, "", "unsqueeze"], [7, 5, 1, "", "zero_up"]], "arkouda.array_api": [[8, 0, 0, "-", "_array_object"], [9, 0, 0, "-", "_constants"], [10, 0, 0, "-", "_creation_functions"], [11, 0, 0, "-", "_data_type_functions"], [12, 0, 0, "-", "_dtypes"], [13, 0, 0, "-", "_elementwise_functions"], [14, 0, 0, "-", "_indexing_functions"], [15, 0, 0, "-", "_manipulation_functions"], [16, 0, 0, "-", "_searching_functions"], [17, 0, 0, "-", "_set_functions"], [18, 0, 0, "-", "_sorting_functions"], [19, 0, 0, "-", "_statistical_functions"], [20, 0, 0, "-", "_typing"], [21, 0, 0, "-", "_utility_functions"], [23, 0, 0, "-", "linalg"]], "arkouda.array_api._array_object": [[8, 2, 1, "", "Array"]], "arkouda.array_api._array_object.Array": [[8, 6, 1, "", "T"], [8, 6, 1, "", "device"], [8, 6, 1, "", "dtype"], [8, 6, 1, "", "mT"], [8, 6, 1, "", "ndim"], [8, 6, 1, "", "shape"], [8, 6, 1, "", "size"], [8, 4, 1, "", "to_device"], [8, 4, 1, "", "to_ndarray"], [8, 4, 1, "", "tolist"]], "arkouda.array_api._constants": [[9, 1, 1, "", "e"], [9, 1, 1, "", "inf"], [9, 1, 1, "", "nan"], [9, 1, 1, "", "pi"]], "arkouda.array_api._creation_functions": [[10, 5, 1, "", "arange"], [10, 5, 1, "", "asarray"], [10, 5, 1, "", "empty"], [10, 5, 1, "", "empty_like"], [10, 5, 1, "", "eye"], [10, 5, 1, "", "from_dlpack"], [10, 5, 1, "", "full"], [10, 5, 1, "", "full_like"], [10, 5, 1, "", "linspace"], [10, 5, 1, "", "meshgrid"], [10, 5, 1, "", "ones"], [10, 5, 1, "", "ones_like"], [10, 5, 1, "", "tril"], [10, 5, 1, "", "triu"], [10, 5, 1, "", "zeros"], [10, 5, 1, "", "zeros_like"]], "arkouda.array_api._data_type_functions": [[11, 5, 1, "", "astype"], [11, 5, 1, "", "can_cast"], [11, 2, 1, "", "finfo_object"], [11, 2, 1, "", "iinfo_object"], [11, 5, 1, "", "isdtype"], [11, 5, 1, "", "result_type"]], "arkouda.array_api._data_type_functions.finfo_object": [[11, 3, 1, "", "bits"], [11, 3, 1, "", "dtype"], [11, 3, 1, "", "eps"], [11, 3, 1, "", "max"], [11, 3, 1, "", "min"], [11, 3, 1, "", "smallest_normal"]], "arkouda.array_api._data_type_functions.iinfo_object": [[11, 3, 1, "", "bits"], [11, 3, 1, "", "dtype"], [11, 3, 1, "", "max"], [11, 3, 1, "", "min"]], "arkouda.array_api._dtypes": [[12, 1, 1, "", "bool"], [12, 1, 1, "", "complex128"], [12, 1, 1, "", "complex64"], [12, 1, 1, "", "float32"], [12, 1, 1, "", "float64"], [12, 1, 1, "", "int16"], [12, 1, 1, "", "int32"], [12, 1, 1, "", "int64"], [12, 1, 1, "", "int8"], [12, 1, 1, "", "uint16"], [12, 1, 1, "", "uint32"], [12, 1, 1, "", "uint64"], [12, 1, 1, "", "uint8"]], "arkouda.array_api._elementwise_functions": [[13, 5, 1, "", "abs"], [13, 5, 1, "", "acos"], [13, 5, 1, "", "acosh"], [13, 5, 1, "", "add"], [13, 5, 1, "", "asin"], [13, 5, 1, "", "asinh"], [13, 5, 1, "", "atan"], [13, 5, 1, "", "atan2"], [13, 5, 1, "", "atanh"], [13, 5, 1, "", "bitwise_and"], [13, 5, 1, "", "bitwise_invert"], [13, 5, 1, "", "bitwise_left_shift"], [13, 5, 1, "", "bitwise_or"], [13, 5, 1, "", "bitwise_right_shift"], [13, 5, 1, "", "bitwise_xor"], [13, 5, 1, "", "ceil"], [13, 5, 1, "", "conj"], [13, 5, 1, "", "cos"], [13, 5, 1, "", "cosh"], [13, 5, 1, "", "divide"], [13, 5, 1, "", "equal"], [13, 5, 1, "", "exp"], [13, 5, 1, "", "expm1"], [13, 5, 1, "", "floor"], [13, 5, 1, "", "floor_divide"], [13, 5, 1, "", "greater"], [13, 5, 1, "", "greater_equal"], [13, 5, 1, "", "imag"], [13, 5, 1, "", "isfinite"], [13, 5, 1, "", "isinf"], [13, 5, 1, "", "isnan"], [13, 5, 1, "", "less"], [13, 5, 1, "", "less_equal"], [13, 5, 1, "", "log"], [13, 5, 1, "", "log10"], [13, 5, 1, "", "log1p"], [13, 5, 1, "", "log2"], [13, 5, 1, "", "logaddexp"], [13, 5, 1, "", "logical_and"], [13, 5, 1, "", "logical_not"], [13, 5, 1, "", "logical_or"], [13, 5, 1, "", "logical_xor"], [13, 5, 1, "", "multiply"], [13, 5, 1, "", "negative"], [13, 5, 1, "", "not_equal"], [13, 5, 1, "", "positive"], [13, 5, 1, "", "pow"], [13, 5, 1, "", "real"], [13, 5, 1, "", "remainder"], [13, 5, 1, "", "round"], [13, 5, 1, "", "sign"], [13, 5, 1, "", "sin"], [13, 5, 1, "", "sinh"], [13, 5, 1, "", "sqrt"], [13, 5, 1, "", "square"], [13, 5, 1, "", "subtract"], [13, 5, 1, "", "tan"], [13, 5, 1, "", "tanh"], [13, 5, 1, "", "trunc"]], "arkouda.array_api._indexing_functions": [[14, 5, 1, "", "take"]], "arkouda.array_api._manipulation_functions": [[15, 5, 1, "", "broadcast_arrays"], [15, 5, 1, "", "broadcast_to"], [15, 5, 1, "", "concat"], [15, 5, 1, "", "expand_dims"], [15, 5, 1, "", "flip"], [15, 5, 1, "", "permute_dims"], [15, 5, 1, "", "reshape"], [15, 5, 1, "", "roll"], [15, 5, 1, "", "squeeze"], [15, 5, 1, "", "stack"]], "arkouda.array_api._searching_functions": [[16, 5, 1, "", "argmax"], [16, 5, 1, "", "argmin"], [16, 5, 1, "", "nonzero"], [16, 5, 1, "", "where"]], "arkouda.array_api._set_functions": [[17, 2, 1, "", "UniqueAllResult"], [17, 2, 1, "", "UniqueCountsResult"], [17, 2, 1, "", "UniqueInverseResult"], [17, 5, 1, "", "unique_all"], [17, 5, 1, "", "unique_counts"], [17, 5, 1, "", "unique_inverse"], [17, 5, 1, "", "unique_values"]], "arkouda.array_api._set_functions.UniqueAllResult": [[17, 3, 1, "", "counts"], [17, 3, 1, "", "indices"], [17, 3, 1, "", "inverse_indices"], [17, 3, 1, "", "values"]], "arkouda.array_api._set_functions.UniqueCountsResult": [[17, 3, 1, "", "counts"], [17, 3, 1, "", "values"]], "arkouda.array_api._set_functions.UniqueInverseResult": [[17, 3, 1, "", "inverse_indices"], [17, 3, 1, "", "values"]], "arkouda.array_api._sorting_functions": [[18, 5, 1, "", "argsort"], [18, 5, 1, "", "sort"]], "arkouda.array_api._statistical_functions": [[19, 5, 1, "", "max"], [19, 5, 1, "", "mean"], [19, 5, 1, "", "min"], [19, 5, 1, "", "prod"], [19, 5, 1, "", "std"], [19, 5, 1, "", "sum"], [19, 5, 1, "", "var"]], "arkouda.array_api._typing": [[20, 2, 1, "", "Array"], [20, 1, 1, "", "Device"], [20, 1, 1, "", "Dtype"], [20, 1, 1, "", "PyCapsule"], [20, 1, 1, "", "SupportsBufferProtocol"], [20, 2, 1, "", "SupportsDLPack"]], "arkouda.array_api._typing.Array": [[20, 6, 1, "", "T"], [20, 6, 1, "", "device"], [20, 6, 1, "", "dtype"], [20, 6, 1, "", "mT"], [20, 6, 1, "", "ndim"], [20, 6, 1, "", "shape"], [20, 6, 1, "", "size"], [20, 4, 1, "", "to_device"], [20, 4, 1, "", "to_ndarray"], [20, 4, 1, "", "tolist"]], "arkouda.array_api._utility_functions": [[21, 5, 1, "", "all"], [21, 5, 1, "", "any"]], "arkouda.array_api.linalg": [[23, 5, 1, "", "matmul"], [23, 5, 1, "", "matrix_transpose"], [23, 5, 1, "", "tensordot"], [23, 5, 1, "", "vecdot"]], "arkouda.array_view": [[24, 2, 1, "", "ArrayView"]], "arkouda.array_view.ArrayView": [[24, 3, 1, "", "base"], [24, 3, 1, "", "dtype"], [24, 3, 1, "", "itemsize"], [24, 3, 1, "", "ndim"], [24, 3, 1, "", "objType"], [24, 3, 1, "", "order"], [24, 3, 1, "", "shape"], [24, 3, 1, "", "size"], [24, 4, 1, "", "to_hdf"], [24, 4, 1, "", "to_list"], [24, 4, 1, "", "to_ndarray"], [24, 4, 1, "", "update_hdf"]], "arkouda.categorical": [[25, 2, 1, "", "Categorical"]], "arkouda.categorical.Categorical": [[25, 3, 1, "", "BinOps"], [25, 3, 1, "", "RegisterablePieces"], [25, 3, 1, "", "RequiredPieces"], [25, 4, 1, "", "argsort"], [25, 4, 1, "", "attach"], [25, 3, 1, "", "categories"], [25, 3, 1, "", "codes"], [25, 4, 1, "", "concatenate"], [25, 4, 1, "", "contains"], [25, 3, 1, "", "dtype"], [25, 4, 1, "", "endswith"], [25, 4, 1, "", "from_codes"], [25, 4, 1, "", "from_return_msg"], [25, 4, 1, "", "group"], [25, 4, 1, "", "hash"], [25, 4, 1, "", "in1d"], [25, 4, 1, "", "info"], [25, 4, 1, "", "is_registered"], [25, 4, 1, "", "isna"], [25, 3, 1, "", "ndim"], [25, 3, 1, "", "nlevels"], [25, 3, 1, "", "objType"], [25, 4, 1, "", "parse_hdf_categoricals"], [25, 3, 1, "id0", "permutation"], [25, 4, 1, "", "pretty_print_info"], [25, 4, 1, "", "register"], [25, 4, 1, "", "reset_categories"], [25, 4, 1, "", "save"], [25, 3, 1, "id1", "segments"], [25, 4, 1, "", "set_categories"], [25, 3, 1, "", "shape"], [25, 3, 1, "", "size"], [25, 4, 1, "", "sort"], [25, 4, 1, "", "standardize_categories"], [25, 4, 1, "", "startswith"], [25, 4, 1, "", "to_hdf"], [25, 4, 1, "", "to_list"], [25, 4, 1, "", "to_ndarray"], [25, 4, 1, "", "to_parquet"], [25, 4, 1, "", "transfer"], [25, 4, 1, "", "unique"], [25, 4, 1, "", "unregister"], [25, 4, 1, "", "unregister_categorical_by_name"], [25, 4, 1, "", "update_hdf"]], "arkouda.client": [[26, 5, 1, "", "connect"], [26, 5, 1, "", "disconnect"], [26, 5, 1, "", "generate_history"], [26, 5, 1, "", "get_config"], [26, 5, 1, "", "get_mem_avail"], [26, 5, 1, "", "get_mem_status"], [26, 5, 1, "", "get_mem_used"], [26, 5, 1, "", "get_server_commands"], [26, 5, 1, "", "print_server_commands"], [26, 5, 1, "", "ruok"], [26, 5, 1, "", "shutdown"]], "arkouda.client_dtypes": [[27, 2, 1, "", "BitVector"], [27, 5, 1, "", "BitVectorizer"], [27, 2, 1, "", "Fields"], [27, 2, 1, "", "IPv4"], [27, 5, 1, "", "ip_address"], [27, 5, 1, "", "is_ipv4"], [27, 5, 1, "", "is_ipv6"]], "arkouda.client_dtypes.BitVector": [[27, 3, 1, "", "conserves"], [27, 4, 1, "", "format"], [27, 4, 1, "", "from_return_msg"], [27, 4, 1, "", "opeq"], [27, 4, 1, "", "register"], [27, 3, 1, "", "special_objType"], [27, 4, 1, "", "to_list"], [27, 4, 1, "", "to_ndarray"]], "arkouda.client_dtypes.Fields": [[27, 4, 1, "", "format"], [27, 4, 1, "", "opeq"]], "arkouda.client_dtypes.IPv4": [[27, 4, 1, "", "export_uint"], [27, 4, 1, "", "format"], [27, 4, 1, "", "normalize"], [27, 4, 1, "", "opeq"], [27, 4, 1, "", "register"], [27, 3, 1, "", "special_objType"], [27, 4, 1, "", "to_hdf"], [27, 4, 1, "", "to_list"], [27, 4, 1, "", "to_ndarray"], [27, 4, 1, "", "update_hdf"]], "arkouda.dataframe": [[28, 2, 1, "", "DataFrame"], [28, 2, 1, "", "DiffAggregate"], [28, 5, 1, "", "intersect"], [28, 5, 1, "", "intx"], [28, 5, 1, "", "invert_permutation"], [28, 5, 1, "", "merge"]], "arkouda.dataframe.DataFrame": [[28, 4, 1, "", "GroupBy"], [28, 4, 1, "", "append"], [28, 4, 1, "", "apply_permutation"], [28, 4, 1, "", "argsort"], [28, 4, 1, "", "attach"], [28, 4, 1, "", "coargsort"], [28, 6, 1, "", "columns"], [28, 4, 1, "", "concat"], [28, 4, 1, "", "copy"], [28, 4, 1, "", "corr"], [28, 4, 1, "", "drop"], [28, 4, 1, "", "drop_duplicates"], [28, 6, 1, "", "dtypes"], [28, 6, 1, "", "empty"], [28, 4, 1, "", "filter_by_range"], [28, 4, 1, "", "from_pandas"], [28, 4, 1, "", "from_return_msg"], [28, 4, 1, "", "groupby"], [28, 4, 1, "", "head"], [28, 6, 1, "", "index"], [28, 6, 1, "", "info"], [28, 4, 1, "", "is_registered"], [28, 4, 1, "", "isin"], [28, 4, 1, "", "load"], [28, 4, 1, "", "memory_usage"], [28, 4, 1, "", "merge"], [28, 3, 1, "", "objType"], [28, 4, 1, "", "read_csv"], [28, 4, 1, "", "register"], [28, 4, 1, "", "rename"], [28, 4, 1, "", "reset_index"], [28, 4, 1, "", "sample"], [28, 4, 1, "", "save"], [28, 6, 1, "", "shape"], [28, 6, 1, "", "size"], [28, 4, 1, "", "sort_index"], [28, 4, 1, "", "sort_values"], [28, 4, 1, "", "tail"], [28, 4, 1, "", "to_csv"], [28, 4, 1, "", "to_hdf"], [28, 4, 1, "", "to_pandas"], [28, 4, 1, "", "to_parquet"], [28, 4, 1, "", "transfer"], [28, 4, 1, "", "unregister"], [28, 4, 1, "", "unregister_dataframe_by_name"], [28, 4, 1, "", "update_hdf"], [28, 4, 1, "", "update_nrows"]], "arkouda.dataframe.DiffAggregate": [[28, 3, 1, "", "gb"], [28, 3, 1, "", "values"]], "arkouda.dtypes": [[29, 1, 1, "", "ARKOUDA_SUPPORTED_DTYPES"], [29, 1, 1, "", "DTypeObjects"], [29, 1, 1, "", "DTypes"], [29, 1, 1, "", "ScalarDTypes"], [29, 1, 1, "", "all_scalars"], [29, 1, 1, "", "bigint"], [29, 1, 1, "", "bitType"], [29, 1, 1, "", "bool"], [29, 1, 1, "", "bool_scalars"], [29, 5, 1, "", "check_np_dtype"], [29, 1, 1, "", "complex128"], [29, 1, 1, "", "complex64"], [29, 5, 1, "", "dtype"], [29, 1, 1, "", "float32"], [29, 1, 1, "", "float64"], [29, 1, 1, "", "float_scalars"], [29, 5, 1, "", "get_byteorder"], [29, 5, 1, "", "get_server_byteorder"], [29, 1, 1, "", "int16"], [29, 1, 1, "", "int32"], [29, 1, 1, "", "int64"], [29, 1, 1, "", "int8"], [29, 1, 1, "", "intTypes"], [29, 1, 1, "", "int_scalars"], [29, 5, 1, "", "isSupportedNumber"], [29, 1, 1, "", "numeric_scalars"], [29, 1, 1, "", "numpy_scalars"], [29, 5, 1, "", "resolve_scalar_dtype"], [29, 1, 1, "", "str_"], [29, 1, 1, "", "str_scalars"], [29, 5, 1, "", "translate_np_dtype"], [29, 1, 1, "", "uint16"], [29, 1, 1, "", "uint32"], [29, 1, 1, "", "uint64"], [29, 1, 1, "", "uint8"]], "arkouda.groupbyclass": [[30, 1, 1, "", "GROUPBY_REDUCTION_TYPES"], [30, 2, 1, "", "GroupBy"], [30, 5, 1, "", "broadcast"], [30, 5, 1, "", "unique"]], "arkouda.groupbyclass.GroupBy": [[30, 4, 1, "", "AND"], [30, 4, 1, "", "OR"], [30, 3, 1, "", "Reductions"], [30, 4, 1, "", "XOR"], [30, 4, 1, "", "aggregate"], [30, 4, 1, "", "all"], [30, 4, 1, "", "any"], [30, 4, 1, "", "argmax"], [30, 4, 1, "", "argmin"], [30, 4, 1, "", "attach"], [30, 4, 1, "", "broadcast"], [30, 4, 1, "", "build_from_components"], [30, 4, 1, "", "count"], [30, 3, 1, "", "dropna"], [30, 4, 1, "", "first"], [30, 4, 1, "", "from_return_msg"], [30, 4, 1, "", "is_registered"], [30, 3, 1, "", "logger"], [30, 4, 1, "", "max"], [30, 4, 1, "", "mean"], [30, 4, 1, "", "median"], [30, 4, 1, "", "min"], [30, 4, 1, "", "mode"], [30, 4, 1, "", "most_common"], [30, 3, 1, "", "ngroups"], [30, 3, 1, "", "nkeys"], [30, 4, 1, "", "nunique"], [30, 3, 1, "", "objType"], [30, 3, 1, "", "permutation"], [30, 4, 1, "", "prod"], [30, 4, 1, "", "register"], [30, 3, 1, "", "segments"], [30, 4, 1, "id0", "size"], [30, 4, 1, "", "std"], [30, 4, 1, "", "sum"], [30, 4, 1, "", "to_hdf"], [30, 4, 1, "", "unique"], [30, 3, 1, "", "unique_keys"], [30, 4, 1, "", "unregister"], [30, 4, 1, "", "unregister_groupby_by_name"], [30, 4, 1, "", "update_hdf"], [30, 4, 1, "", "var"]], "arkouda.history": [[31, 2, 1, "", "HistoryRetriever"], [31, 2, 1, "", "NotebookHistoryRetriever"], [31, 2, 1, "", "ShellHistoryRetriever"]], "arkouda.history.HistoryRetriever": [[31, 4, 1, "", "retrieve"]], "arkouda.history.NotebookHistoryRetriever": [[31, 4, 1, "", "retrieve"]], "arkouda.history.ShellHistoryRetriever": [[31, 4, 1, "", "retrieve"]], "arkouda.index": [[33, 2, 1, "", "Index"], [33, 2, 1, "", "MultiIndex"]], "arkouda.index.Index": [[33, 4, 1, "", "argsort"], [33, 4, 1, "", "concat"], [33, 4, 1, "", "factory"], [33, 4, 1, "", "from_return_msg"], [33, 6, 1, "", "index"], [33, 4, 1, "", "is_registered"], [33, 6, 1, "", "is_unique"], [33, 4, 1, "", "lookup"], [33, 3, 1, "", "objType"], [33, 4, 1, "", "register"], [33, 4, 1, "", "save"], [33, 4, 1, "", "set_dtype"], [33, 6, 1, "", "shape"], [33, 4, 1, "", "to_csv"], [33, 4, 1, "", "to_dict"], [33, 4, 1, "", "to_hdf"], [33, 4, 1, "", "to_list"], [33, 4, 1, "", "to_ndarray"], [33, 4, 1, "", "to_pandas"], [33, 4, 1, "", "to_parquet"], [33, 4, 1, "", "unregister"], [33, 4, 1, "", "update_hdf"]], "arkouda.index.MultiIndex": [[33, 4, 1, "", "argsort"], [33, 4, 1, "", "concat"], [33, 6, 1, "", "index"], [33, 4, 1, "", "is_registered"], [33, 4, 1, "", "lookup"], [33, 3, 1, "", "objType"], [33, 4, 1, "", "register"], [33, 4, 1, "", "set_dtype"], [33, 4, 1, "", "to_dict"], [33, 4, 1, "", "to_hdf"], [33, 4, 1, "", "to_list"], [33, 4, 1, "", "to_ndarray"], [33, 4, 1, "", "to_pandas"], [33, 4, 1, "", "unregister"], [33, 4, 1, "", "update_hdf"]], "arkouda.infoclass": [[34, 1, 1, "", "AllSymbols"], [34, 1, 1, "", "RegisteredSymbols"], [34, 5, 1, "", "information"], [34, 5, 1, "", "list_registry"], [34, 5, 1, "", "list_symbol_table"], [34, 5, 1, "", "pretty_print_information"]], "arkouda.io": [[35, 5, 1, "", "export"], [35, 5, 1, "", "get_columns"], [35, 5, 1, "", "get_datasets"], [35, 5, 1, "", "get_filetype"], [35, 5, 1, "", "get_null_indices"], [35, 5, 1, "", "import_data"], [35, 5, 1, "", "load"], [35, 5, 1, "", "load_all"], [35, 5, 1, "", "ls"], [35, 5, 1, "", "ls_csv"], [35, 5, 1, "", "read"], [35, 5, 1, "", "read_csv"], [35, 5, 1, "", "read_hdf"], [35, 5, 1, "", "read_parquet"], [35, 5, 1, "", "read_tagged_data"], [35, 5, 1, "", "receive"], [35, 5, 1, "", "receive_dataframe"], [35, 5, 1, "", "restore"], [35, 5, 1, "", "save_all"], [35, 5, 1, "", "snapshot"], [35, 5, 1, "", "to_csv"], [35, 5, 1, "", "to_hdf"], [35, 5, 1, "", "to_parquet"], [35, 5, 1, "", "update_hdf"]], "arkouda.io_util": [[36, 5, 1, "", "delimited_file_to_dict"], [36, 5, 1, "", "dict_to_delimited_file"], [36, 5, 1, "", "get_directory"], [36, 5, 1, "", "write_line_to_file"]], "arkouda.join": [[37, 5, 1, "", "compute_join_size"], [37, 5, 1, "", "gen_ranges"], [37, 5, 1, "", "join_on_eq_with_dt"]], "arkouda.logger": [[38, 2, 1, "", "LogLevel"], [38, 5, 1, "", "disableVerbose"], [38, 5, 1, "", "enableVerbose"], [38, 5, 1, "", "write_log"]], "arkouda.logger.LogLevel": [[38, 3, 1, "", "CRITICAL"], [38, 3, 1, "", "DEBUG"], [38, 3, 1, "", "ERROR"], [38, 3, 1, "", "INFO"], [38, 3, 1, "", "WARN"]], "arkouda.match": [[39, 2, 1, "", "Match"]], "arkouda.match.Match": [[100, 4, 1, "", "end"], [100, 4, 1, "", "find_matches"], [100, 4, 1, "", "group"], [100, 4, 1, "", "match_type"], [100, 4, 1, "", "matched"], [100, 4, 1, "", "start"]], "arkouda.matcher": [[40, 2, 1, "", "Matcher"]], "arkouda.matcher.Matcher": [[40, 3, 1, "", "LocationsInfo"], [40, 4, 1, "", "find_locations"], [40, 4, 1, "", "findall"], [40, 4, 1, "", "get_match"], [40, 4, 1, "", "split"], [40, 4, 1, "", "sub"]], "arkouda.numeric": [[41, 2, 1, "", "ErrorMode"], [41, 5, 1, "", "abs"], [41, 5, 1, "", "arccos"], [41, 5, 1, "", "arccosh"], [41, 5, 1, "", "arcsin"], [41, 5, 1, "", "arcsinh"], [41, 5, 1, "", "arctan"], [41, 5, 1, "", "arctan2"], [41, 5, 1, "", "arctanh"], [41, 5, 1, "", "cast"], [41, 5, 1, "", "ceil"], [41, 5, 1, "", "cos"], [41, 5, 1, "", "cosh"], [41, 5, 1, "", "cumprod"], [41, 5, 1, "", "cumsum"], [41, 5, 1, "", "deg2rad"], [41, 5, 1, "", "exp"], [41, 5, 1, "", "expm1"], [41, 5, 1, "", "floor"], [41, 5, 1, "", "hash"], [41, 5, 1, "", "histogram"], [41, 5, 1, "", "histogram2d"], [41, 5, 1, "", "histogramdd"], [41, 5, 1, "", "isfinite"], [41, 5, 1, "", "isinf"], [41, 5, 1, "", "isnan"], [41, 5, 1, "", "log"], [41, 5, 1, "", "log10"], [41, 5, 1, "", "log1p"], [41, 5, 1, "", "log2"], [41, 5, 1, "", "rad2deg"], [41, 5, 1, "", "round"], [41, 5, 1, "", "sign"], [41, 5, 1, "", "sin"], [41, 5, 1, "", "sinh"], [41, 5, 1, "", "square"], [41, 5, 1, "", "tan"], [41, 5, 1, "", "tanh"], [41, 5, 1, "", "trunc"], [41, 5, 1, "", "value_counts"], [41, 5, 1, "", "where"]], "arkouda.numeric.ErrorMode": [[41, 3, 1, "", "ignore"], [41, 3, 1, "", "return_validity"], [41, 3, 1, "", "strict"]], "arkouda.pdarray": [[32, 3, 1, "id751", "BinOps"], [32, 3, 1, "id752", "OpEqOps"], [93, 4, 1, "", "all"], [93, 4, 1, "", "any"], [93, 4, 1, "", "argmax"], [93, 4, 1, "", "argmaxk"], [93, 4, 1, "", "argmin"], [93, 4, 1, "", "argmink"], [32, 4, 1, "id760", "astype"], [32, 4, 1, "id761", "attach"], [32, 4, 1, "id762", "bigint_to_uint_arrays"], [32, 4, 1, "id763", "clz"], [32, 4, 1, "id764", "corr"], [32, 4, 1, "id765", "cov"], [32, 4, 1, "id766", "ctz"], [95, 3, 1, "", "dtype"], [32, 4, 1, "id767", "fill"], [32, 4, 1, "id768", "format_other"], [32, 4, 1, "id769", "info"], [32, 4, 1, "id770", "is_registered"], [93, 4, 1, "", "is_sorted"], [95, 3, 1, "", "itemsize"], [93, 4, 1, "", "max"], [32, 6, 1, "id750", "max_bits"], [93, 4, 1, "", "maxk"], [93, 4, 1, "", "mean"], [93, 4, 1, "", "min"], [93, 4, 1, "", "mink"], [95, 3, 1, "", "name"], [95, 3, 1, "", "ndim"], [32, 3, 1, "id753", "objType"], [32, 4, 1, "id777", "opeq"], [32, 4, 1, "id778", "parity"], [32, 4, 1, "id779", "popcount"], [32, 4, 1, "id780", "pretty_print_info"], [93, 4, 1, "", "prod"], [32, 4, 1, "id782", "register"], [32, 4, 1, "id783", "reshape"], [32, 4, 1, "id784", "rotl"], [32, 4, 1, "id785", "rotr"], [32, 4, 1, "id786", "save"], [95, 3, 1, "", "shape"], [95, 3, 1, "", "size"], [32, 4, 1, "id787", "slice_bits"], [93, 4, 1, "", "std"], [93, 4, 1, "", "sum"], [32, 4, 1, "id790", "to_csv"], [32, 4, 1, "id793", "to_cuda"], [32, 4, 1, "id794", "to_hdf"], [32, 4, 1, "id795", "to_list"], [95, 5, 1, "", "to_ndarray"], [32, 4, 1, "id797", "to_parquet"], [32, 4, 1, "id798", "transfer"], [32, 4, 1, "id799", "unregister"], [32, 4, 1, "id800", "update_hdf"], [32, 4, 1, "id801", "value_counts"], [93, 4, 1, "", "var"]], "arkouda.pdarrayclass": [[42, 7, 1, "", "RegistrationError"], [42, 5, 1, "", "all"], [42, 5, 1, "", "any"], [42, 5, 1, "", "argmax"], [42, 5, 1, "", "argmaxk"], [42, 5, 1, "", "argmin"], [42, 5, 1, "", "argmink"], [42, 5, 1, "", "attach_pdarray"], [42, 5, 1, "", "broadcast_to_shape"], [42, 5, 1, "", "clear"], [42, 5, 1, "", "clz"], [42, 5, 1, "", "corr"], [42, 5, 1, "", "cov"], [42, 5, 1, "", "ctz"], [42, 5, 1, "", "divmod"], [42, 5, 1, "", "fmod"], [42, 5, 1, "", "is_sorted"], [42, 5, 1, "", "max"], [42, 5, 1, "", "maxk"], [42, 5, 1, "", "mean"], [42, 5, 1, "", "min"], [42, 5, 1, "", "mink"], [42, 5, 1, "", "mod"], [42, 5, 1, "", "parity"], [42, 2, 1, "", "pdarray"], [42, 5, 1, "", "popcount"], [42, 5, 1, "", "power"], [42, 5, 1, "", "prod"], [42, 5, 1, "", "rotl"], [42, 5, 1, "", "rotr"], [42, 5, 1, "", "sqrt"], [42, 5, 1, "", "std"], [42, 5, 1, "", "sum"], [42, 5, 1, "", "unregister_pdarray_by_name"], [42, 5, 1, "", "var"]], "arkouda.pdarrayclass.pdarray": [[42, 3, 1, "", "BinOps"], [42, 3, 1, "", "OpEqOps"], [42, 4, 1, "", "all"], [42, 4, 1, "", "any"], [42, 4, 1, "", "argmax"], [42, 4, 1, "", "argmaxk"], [42, 4, 1, "", "argmin"], [42, 4, 1, "", "argmink"], [42, 4, 1, "", "astype"], [42, 4, 1, "", "attach"], [42, 4, 1, "", "bigint_to_uint_arrays"], [42, 4, 1, "", "clz"], [42, 4, 1, "", "corr"], [42, 4, 1, "", "cov"], [42, 4, 1, "", "ctz"], [42, 3, 1, "", "dtype"], [42, 4, 1, "", "fill"], [42, 4, 1, "", "format_other"], [42, 4, 1, "", "info"], [42, 4, 1, "", "is_registered"], [42, 4, 1, "", "is_sorted"], [42, 3, 1, "", "itemsize"], [42, 4, 1, "", "max"], [42, 6, 1, "", "max_bits"], [42, 4, 1, "", "maxk"], [42, 4, 1, "", "mean"], [42, 4, 1, "", "min"], [42, 4, 1, "", "mink"], [42, 3, 1, "", "name"], [42, 3, 1, "", "ndim"], [42, 3, 1, "", "objType"], [42, 4, 1, "", "opeq"], [42, 4, 1, "", "parity"], [42, 4, 1, "", "popcount"], [42, 4, 1, "", "pretty_print_info"], [42, 4, 1, "", "prod"], [42, 4, 1, "", "register"], [42, 4, 1, "", "reshape"], [42, 4, 1, "", "rotl"], [42, 4, 1, "", "rotr"], [42, 4, 1, "", "save"], [42, 3, 1, "", "shape"], [42, 3, 1, "", "size"], [42, 4, 1, "", "slice_bits"], [42, 4, 1, "", "std"], [42, 4, 1, "", "sum"], [42, 4, 1, "", "to_csv"], [42, 4, 1, "", "to_cuda"], [42, 4, 1, "", "to_hdf"], [42, 4, 1, "", "to_list"], [42, 4, 1, "", "to_ndarray"], [42, 4, 1, "", "to_parquet"], [42, 4, 1, "", "transfer"], [42, 4, 1, "", "unregister"], [42, 4, 1, "", "update_hdf"], [42, 4, 1, "", "value_counts"], [42, 4, 1, "", "var"]], "arkouda.pdarraycreation": [[43, 5, 1, "", "arange"], [43, 5, 1, "", "array"], [43, 5, 1, "", "bigint_from_uint_arrays"], [43, 5, 1, "", "from_series"], [43, 5, 1, "", "full"], [43, 5, 1, "", "full_like"], [43, 5, 1, "", "linspace"], [43, 5, 1, "", "ones"], [43, 5, 1, "", "ones_like"], [43, 5, 1, "", "randint"], [43, 5, 1, "", "random_strings_lognormal"], [43, 5, 1, "", "random_strings_uniform"], [43, 5, 1, "", "standard_normal"], [43, 5, 1, "", "uniform"], [43, 5, 1, "", "zeros"], [43, 5, 1, "", "zeros_like"]], "arkouda.pdarraysetops": [[44, 5, 1, "", "concatenate"], [44, 5, 1, "", "in1d"], [44, 5, 1, "", "indexof1d"], [44, 5, 1, "", "intersect1d"], [44, 5, 1, "", "setdiff1d"], [44, 5, 1, "", "setxor1d"], [44, 5, 1, "", "union1d"]], "arkouda.plotting": [[45, 5, 1, "", "hist_all"], [45, 5, 1, "", "plot_dist"]], "arkouda.random": [[48, 2, 1, "", "Generator"], [46, 0, 0, "-", "_generator"], [47, 0, 0, "-", "_legacy"], [48, 5, 1, "", "default_rng"], [48, 5, 1, "", "randint"], [48, 5, 1, "", "standard_normal"], [48, 5, 1, "", "uniform"]], "arkouda.random.Generator": [[48, 4, 1, "", "integers"], [48, 4, 1, "", "random"], [48, 4, 1, "", "standard_normal"], [48, 4, 1, "", "uniform"]], "arkouda.random._generator": [[46, 2, 1, "", "Generator"], [46, 5, 1, "", "default_rng"]], "arkouda.random._generator.Generator": [[46, 4, 1, "", "integers"], [46, 4, 1, "", "random"], [46, 4, 1, "", "standard_normal"], [46, 4, 1, "", "uniform"]], "arkouda.random._legacy": [[47, 5, 1, "", "randint"], [47, 5, 1, "", "standard_normal"], [47, 5, 1, "", "uniform"]], "arkouda.row": [[49, 2, 1, "", "Row"]], "arkouda.security": [[50, 5, 1, "", "generate_token"], [50, 5, 1, "", "generate_username_token_json"], [50, 5, 1, "", "get_arkouda_client_directory"], [50, 5, 1, "", "get_home_directory"], [50, 5, 1, "", "get_username"], [50, 1, 1, "", "username_tokenizer"]], "arkouda.segarray": [[51, 1, 1, "", "LEN_SUFFIX"], [51, 1, 1, "", "SEG_SUFFIX"], [51, 2, 1, "", "SegArray"], [51, 1, 1, "", "VAL_SUFFIX"], [51, 5, 1, "", "segarray"]], "arkouda.segarray.SegArray": [[51, 4, 1, "", "AND"], [51, 4, 1, "", "OR"], [51, 4, 1, "", "XOR"], [51, 4, 1, "", "aggregate"], [51, 4, 1, "", "all"], [51, 4, 1, "", "any"], [51, 4, 1, "", "append"], [51, 4, 1, "", "append_single"], [51, 4, 1, "", "argmax"], [51, 4, 1, "", "argmin"], [51, 4, 1, "", "attach"], [51, 4, 1, "", "concat"], [51, 4, 1, "", "copy"], [51, 4, 1, "", "filter"], [51, 4, 1, "", "from_multi_array"], [51, 4, 1, "", "from_parts"], [51, 4, 1, "", "from_return_msg"], [51, 4, 1, "", "get_jth"], [51, 4, 1, "", "get_length_n"], [51, 4, 1, "", "get_ngrams"], [51, 4, 1, "", "get_prefixes"], [51, 4, 1, "", "get_suffixes"], [51, 6, 1, "", "grouping"], [51, 4, 1, "", "hash"], [51, 4, 1, "", "intersect"], [51, 4, 1, "", "is_registered"], [51, 4, 1, "", "load"], [51, 4, 1, "", "max"], [51, 4, 1, "", "mean"], [51, 4, 1, "", "min"], [51, 6, 1, "", "non_empty"], [51, 4, 1, "", "nunique"], [51, 3, 1, "", "objType"], [51, 4, 1, "", "prepend_single"], [51, 4, 1, "", "prod"], [51, 4, 1, "", "read_hdf"], [51, 4, 1, "", "register"], [51, 4, 1, "", "remove_repeats"], [51, 4, 1, "", "save"], [51, 4, 1, "", "set_jth"], [51, 4, 1, "", "setdiff"], [51, 4, 1, "", "setxor"], [51, 4, 1, "", "sum"], [51, 4, 1, "", "to_hdf"], [51, 4, 1, "", "to_list"], [51, 4, 1, "", "to_ndarray"], [51, 4, 1, "", "to_parquet"], [51, 4, 1, "", "transfer"], [51, 4, 1, "", "union"], [51, 4, 1, "", "unique"], [51, 4, 1, "", "unregister"], [51, 4, 1, "", "unregister_segarray_by_name"], [51, 4, 1, "", "update_hdf"]], "arkouda.series": [[52, 2, 1, "", "Series"]], "arkouda.series.Series": [[52, 4, 1, "", "add"], [52, 6, 1, "", "at"], [52, 4, 1, "", "attach"], [52, 4, 1, "", "concat"], [52, 4, 1, "", "diff"], [52, 3, 1, "", "dt"], [52, 4, 1, "", "from_return_msg"], [52, 4, 1, "", "has_repeat_labels"], [52, 4, 1, "", "head"], [52, 6, 1, "", "iat"], [52, 6, 1, "", "iloc"], [52, 4, 1, "", "is_registered"], [52, 4, 1, "", "isin"], [52, 6, 1, "", "loc"], [52, 4, 1, "", "locate"], [52, 3, 1, "", "objType"], [52, 4, 1, "", "pdconcat"], [52, 4, 1, "", "register"], [52, 6, 1, "", "shape"], [52, 4, 1, "", "sort_index"], [52, 4, 1, "", "sort_values"], [52, 3, 1, "", "str_acc"], [52, 4, 1, "", "tail"], [52, 4, 1, "", "to_dataframe"], [52, 4, 1, "", "to_list"], [52, 4, 1, "", "to_pandas"], [52, 4, 1, "", "topn"], [52, 4, 1, "", "unregister"], [52, 4, 1, "", "validate_key"], [52, 4, 1, "", "validate_val"], [52, 4, 1, "", "value_counts"]], "arkouda.sorting": [[53, 5, 1, "", "argsort"], [53, 5, 1, "", "coargsort"], [53, 5, 1, "", "sort"]], "arkouda.strings": [[54, 2, 1, "", "Strings"]], "arkouda.strings.Strings": [[54, 3, 1, "", "BinOps"], [54, 4, 1, "", "astype"], [54, 4, 1, "", "attach"], [54, 4, 1, "", "cached_regex_patterns"], [54, 4, 1, "", "capitalize"], [54, 4, 1, "", "contains"], [54, 4, 1, "", "decode"], [54, 3, 1, "", "dtype"], [54, 4, 1, "", "encode"], [54, 4, 1, "", "endswith"], [54, 3, 1, "", "entry"], [54, 4, 1, "", "find_locations"], [54, 4, 1, "", "findall"], [54, 4, 1, "", "flatten"], [54, 4, 1, "", "from_parts"], [54, 4, 1, "", "from_return_msg"], [54, 4, 1, "", "fullmatch"], [54, 4, 1, "", "get_bytes"], [54, 4, 1, "", "get_lengths"], [54, 4, 1, "", "get_offsets"], [54, 4, 1, "", "get_prefixes"], [54, 4, 1, "", "get_suffixes"], [54, 4, 1, "", "group"], [54, 4, 1, "", "hash"], [54, 4, 1, "", "info"], [54, 4, 1, "", "is_registered"], [54, 4, 1, "", "isalnum"], [54, 4, 1, "", "isalpha"], [54, 4, 1, "", "isdigit"], [54, 4, 1, "", "isempty"], [54, 4, 1, "", "islower"], [54, 4, 1, "", "isspace"], [54, 4, 1, "", "istitle"], [54, 4, 1, "", "isupper"], [54, 3, 1, "", "logger"], [54, 4, 1, "", "lower"], [54, 4, 1, "", "lstick"], [54, 4, 1, "", "match"], [54, 3, 1, "", "nbytes"], [54, 3, 1, "", "ndim"], [54, 3, 1, "", "objType"], [54, 4, 1, "", "peel"], [54, 4, 1, "", "pretty_print_info"], [54, 4, 1, "", "purge_cached_regex_patterns"], [54, 4, 1, "", "register"], [54, 4, 1, "", "rpeel"], [54, 4, 1, "", "save"], [54, 4, 1, "", "search"], [54, 3, 1, "", "shape"], [54, 3, 1, "", "size"], [54, 4, 1, "", "split"], [54, 4, 1, "", "startswith"], [54, 4, 1, "", "stick"], [54, 4, 1, "", "strip"], [54, 4, 1, "", "sub"], [54, 4, 1, "", "subn"], [54, 4, 1, "", "title"], [54, 4, 1, "", "to_csv"], [54, 4, 1, "", "to_hdf"], [54, 4, 1, "", "to_list"], [54, 4, 1, "", "to_ndarray"], [54, 4, 1, "", "to_parquet"], [54, 4, 1, "", "transfer"], [54, 4, 1, "", "unregister"], [54, 4, 1, "", "unregister_strings_by_name"], [54, 4, 1, "", "update_hdf"], [54, 4, 1, "", "upper"]], "arkouda.timeclass": [[55, 2, 1, "", "Datetime"], [55, 2, 1, "", "Timedelta"], [55, 5, 1, "", "date_range"], [55, 5, 1, "", "timedelta_range"]], "arkouda.timeclass.Datetime": [[55, 6, 1, "", "date"], [55, 6, 1, "", "day"], [55, 6, 1, "", "day_of_week"], [55, 6, 1, "", "day_of_year"], [55, 6, 1, "", "dayofweek"], [55, 6, 1, "", "dayofyear"], [55, 6, 1, "", "hour"], [55, 6, 1, "", "is_leap_year"], [55, 4, 1, "", "is_registered"], [55, 4, 1, "", "isocalendar"], [55, 6, 1, "", "microsecond"], [55, 6, 1, "", "millisecond"], [55, 6, 1, "", "minute"], [55, 6, 1, "", "month"], [55, 6, 1, "", "nanosecond"], [55, 4, 1, "", "register"], [55, 6, 1, "", "second"], [55, 3, 1, "", "special_objType"], [55, 4, 1, "", "sum"], [55, 3, 1, "", "supported_opeq"], [55, 3, 1, "", "supported_with_datetime"], [55, 3, 1, "", "supported_with_pdarray"], [55, 3, 1, "", "supported_with_r_datetime"], [55, 3, 1, "", "supported_with_r_pdarray"], [55, 3, 1, "", "supported_with_r_timedelta"], [55, 3, 1, "", "supported_with_timedelta"], [55, 4, 1, "", "to_pandas"], [55, 4, 1, "", "unregister"], [55, 6, 1, "", "week"], [55, 6, 1, "", "weekday"], [55, 6, 1, "", "weekofyear"], [55, 6, 1, "", "year"]], "arkouda.timeclass.Timedelta": [[55, 4, 1, "", "abs"], [55, 6, 1, "", "components"], [55, 6, 1, "", "days"], [55, 4, 1, "", "is_registered"], [55, 6, 1, "", "microseconds"], [55, 6, 1, "", "nanoseconds"], [55, 4, 1, "", "register"], [55, 6, 1, "", "seconds"], [55, 3, 1, "", "special_objType"], [55, 4, 1, "", "std"], [55, 4, 1, "", "sum"], [55, 3, 1, "", "supported_opeq"], [55, 3, 1, "", "supported_with_datetime"], [55, 3, 1, "", "supported_with_pdarray"], [55, 3, 1, "", "supported_with_r_datetime"], [55, 3, 1, "", "supported_with_r_pdarray"], [55, 3, 1, "", "supported_with_r_timedelta"], [55, 3, 1, "", "supported_with_timedelta"], [55, 4, 1, "", "to_pandas"], [55, 4, 1, "", "total_seconds"], [55, 4, 1, "", "unregister"]], "arkouda.util": [[56, 5, 1, "", "attach"], [56, 5, 1, "", "attach_all"], [56, 5, 1, "", "broadcast_dims"], [56, 5, 1, "", "concatenate"], [56, 5, 1, "", "convert_if_categorical"], [56, 5, 1, "", "enrich_inplace"], [56, 5, 1, "", "expand"], [56, 5, 1, "", "generic_concat"], [56, 5, 1, "", "get_callback"], [56, 5, 1, "", "identity"], [56, 5, 1, "", "invert_permutation"], [56, 5, 1, "", "is_registered"], [56, 5, 1, "", "most_common"], [56, 5, 1, "", "register"], [56, 5, 1, "", "register_all"], [56, 5, 1, "", "report_mem"], [56, 5, 1, "", "sparse_sum_help"], [56, 5, 1, "", "unregister"], [56, 5, 1, "", "unregister_all"]]}, "objtypes": {"0": "py:module", "1": "py:data", "2": "py:class", "3": "py:attribute", "4": "py:method", "5": "py:function", "6": "py:property", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "data", "Python data"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "method", "Python method"], "5": ["py", "function", "Python function"], "6": ["py", "property", "Python property"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"contribut": 0, "ad": [0, 1, 58, 78], "issu": 0, "bug": [0, 64], "report": 0, "featur": [0, 58, 85, 91, 97], "request": 0, "develop": [0, 60, 65, 79], "arkouda": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 61, 63, 66, 67, 68, 70, 72, 73, 75, 76, 77, 78, 85, 88, 91, 96, 97, 99, 100], "code": 0, "convent": 0, "lint": 0, "python3": 0, "chapel": [0, 1, 60, 74, 76, 77], "test": [0, 1, 59, 82], "run": [0, 1, 59, 60, 78], "python": [0, 1, 58, 66, 73, 76, 77, 79, 99], "write": [0, 68, 70, 71], "pull": 0, "review": 0, "core": 0, "team": 0, "onli": 0, "merg": 0, "releas": [0, 62], "process": [0, 62, 78], "environ": [1, 60, 63, 75, 76, 77], "variabl": [1, 63, 75], "compil": [1, 63], "makefil": 1, "flag": 1, "depend": [1, 73, 75, 79], "path": 1, "modul": [1, 2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 78], "from": [1, 77, 84], "outsid": 1, "src": 1, "directori": 1, "client": [1, 26, 58, 73, 84, 99], "accessor": 2, "content": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "class": [2, 3, 4, 8, 11, 17, 20, 24, 25, 27, 28, 30, 31, 32, 33, 38, 39, 40, 41, 42, 46, 48, 49, 51, 52, 54, 55, 95], "function": [2, 3, 4, 5, 6, 7, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 23, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 53, 55, 56, 58, 71, 87], "akscipi": [3, 4, 5, 6], "_stats_pi": 3, "subpackag": [4, 32], "packag": [4, 6, 22, 32, 48, 75], "special": [5, 6], "_math": 5, "align": 7, "array_api": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "_array_object": 8, "_constant": 9, "_creation_funct": 10, "_data_type_funct": 11, "_dtype": 12, "_elementwise_funct": 13, "_indexing_funct": 14, "_manipulation_funct": 15, "_searching_funct": 16, "_set_funct": 17, "_sorting_funct": 18, "_statistical_funct": 19, "_type": 20, "attribut": [20, 29, 30, 32, 34, 50, 51, 68], "_utility_funct": 21, "submodul": [22, 32], "linalg": 23, "array_view": 24, "categor": [25, 68, 70, 89], "client_dtyp": 27, "datafram": [28, 66, 67, 68, 70, 91], "dtype": [29, 85], "groupbyclass": 30, "histori": 31, "input": [32, 52], "return": [32, 44, 98], "type": [32, 44, 67, 68, 70, 91, 95, 98], "index": [33, 67, 68, 70, 85, 88, 91, 94], "infoclass": 34, "io": 35, "io_util": 36, "join": [37, 100], "logger": 38, "match": [39, 100], "matcher": 40, "numer": [41, 87], "pdarrayclass": 42, "pdarraycr": 43, "pdarraysetop": 44, "plot": 45, "random": [46, 47, 48, 90], "_gener": 46, "_legaci": 47, "row": 49, "secur": 50, "segarrai": [51, 68, 70, 96], "seri": [52, 97], "sort": [53, 86, 91, 97], "string": [54, 67, 68, 70, 100], "timeclass": 55, "util": 56, "api": [57, 67, 68, 69, 70, 71, 74], "refer": [57, 67, 68, 69, 70, 74], "your": 58, "first": 58, "interfac": 58, "exampl": [58, 66, 67], "server": [58, 73, 75, 78, 84, 99], "pytest": 59, "benchmark": 59, "The": [59, 95], "full": [59, 64], "suit": 59, "argument": [59, 82], "singl": 59, "file": [59, 67, 68, 71, 78, 84], "read": [59, 71, 84], "json": 59, "output": 59, "gasnet": 60, "configur": [60, 68, 75, 78], "build": [60, 61, 63, 64, 75, 77, 78], "reduc": [61, 82], "memori": 61, "usag": [61, 83], "step": [62, 76, 77], "instruct": 62, "gener": [62, 71], "note": 62, "diff": 62, "git": 62, "log": 62, "speed": 63, "up": 63, "alwai": 63, "set": [63, 66, 96, 98], "us": [63, 66, 73, 75, 78, 79], "modular": [63, 75, 78], "system": 63, "tip": 64, "reproduc": 64, "user": 64, "save": [64, 78], "effici": 64, "document": [65, 72, 75], "arrai": [66, 90, 96, 98], "pdarrai": [66, 67, 68, 70, 94, 95], "creation": [66, 88], "export": [66, 69, 71, 84], "object": [66, 100], "oper": [66, 87, 89, 95, 96, 98, 100], "creat": [66, 90], "import": [66, 69, 71, 84], "panda": [66, 97], "map": 66, "basic": 66, "interact": 66, "groupbi": [66, 68, 91, 92], "csv": 67, "support": [67, 68, 70, 71, 84], "data": [67, 68, 70, 84, 91, 93, 95], "format": [67, 71, 84], "without": 67, "header": 67, "hdf5": 68, "metadata": 68, "schema": 68, "arrayview": [68, 88], "mode": [68, 70], "distribut": [68, 75], "legaci": 68, "parquet": 70, "compress": 70, "i": [71, 84, 100], "o": [71, 84, 100], "l": 71, "quickstart": 73, "instal": [73, 75, 76, 77, 79, 81], "launch": [73, 99], "connect": [73, 99], "3": [73, 99], "shutdown": 73, "disconnect": 73, "get": 75, "start": 75, "recommend": [75, 77], "manual": 75, "all": 75, "individu": 75, "arrow": 75, "troubleshoot": 75, "linux": 76, "updat": [76, 77, 79], "kernel": 76, "clone": [76, 77], "repositori": [76, 77], "anaconda": [76, 77, 79], "ubuntu": 76, "rhel": 76, "next": [76, 77], "maco": 77, "sourc": 77, "homebrew": 77, "specifi": 78, "custom": 78, "new": 78, "an": 78, "requir": [79, 81], "list": 79, "specif": [79, 96, 100], "pip": 79, "window": 80, "wsl2": 80, "overview": 81, "guid": [81, 83], "perform": [82, 96, 100], "argsort": [82, 85], "posit": 82, "name": [82, 95], "gather": [82, 94], "scan": [82, 87], "scatter": [82, 94], "stream": 82, "between": 84, "larg": 84, "dataset": 84, "preprocess": 84, "disk": 84, "chang": 85, "lookup": [85, 97], "concat": 85, "arithmet": 87, "vector": 87, "scalar": 87, "element": [87, 96], "wise": 87, "reduct": 87, "where": 87, "iter": [88, 89, 91, 95, 96, 100], "construct": 89, "constant": 90, "regular": [90, 100], "concaten": [90, 91], "drop": 91, "copi": 91, "filter": 91, "permut": 91, "tail": [91, 97], "head": [91, 97], "renam": 91, "column": 91, "append": [91, 96], "reset": 91, "dedupl": [91, 96], "summar": 93, "descript": 93, "statist": 93, "histogram": 93, "valu": [93, 97], "count": [93, 97], "assign": 94, "integ": 94, "slice": 94, "logic": 94, "rank": 95, "cast": 95, "reshap": 95, "method": [96, 100], "prefix": 96, "suffix": 96, "ngram": 96, "sub": 96, "size": 96, "access": 96, "prepend": 96, "setop": 96, "union": 96, "intersect": 96, "differ": 96, "symmetr": 96, "integr": 97, "startup": 99, "substr": 100, "search": 100, "split": 100, "flatten": 100, "express": 100}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"Contributing": [[0, "contributing"]], "Adding Issues": [[0, "adding-issues"]], "Bug Reports": [[0, "bug-reports"]], "Feature Requests": [[0, "feature-requests"]], "Developing Arkouda": [[0, "developing-arkouda"]], "Coding Conventions and Linting": [[0, "coding-conventions-and-linting"]], "Python3": [[0, "python3"]], "Chapel": [[0, "chapel"]], "Testing": [[0, "testing"], [1, "testing"]], "Running python tests": [[0, "running-python-tests"]], "Running chapel tests": [[0, "running-chapel-tests"]], "Writing Pull Requests": [[0, "writing-pull-requests"]], "Reviewing Pull Requests": [[0, "reviewing-pull-requests"]], "Core Development Team Only": [[0, "core-development-team-only"]], "Merging Pull Requests": [[0, "merging-pull-requests"]], "Release Process": [[0, "release-process"], [62, "release-process"]], "Environment Variables": [[1, "environment-variables"], [75, "environment-variables"]], "Running": [[1, "running"]], "Compilation / Makefile": [[1, "compilation-makefile"]], "Chapel Compiler Flags": [[1, "chapel-compiler-flags"]], "Dependency Paths": [[1, "dependency-paths"]], "Adding a Module from Outside the Arkouda src Directory": [[1, "adding-a-module-from-outside-the-arkouda-src-directory"]], "Python Client": [[1, "python-client"]], "arkouda.accessor": [[2, "module-arkouda.accessor"]], "Module Contents": [[2, "module-contents"], [3, "module-contents"], [5, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"]], "Classes": [[2, "classes"], [3, "classes"], [4, "classes"], [8, "classes"], [11, "classes"], [17, "classes"], [20, "classes"], [24, "classes"], [25, "classes"], [27, "classes"], [28, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [46, "classes"], [48, "classes"], [49, "classes"], [51, "classes"], [52, "classes"], [54, "classes"], [55, "classes"]], "Functions": [[2, "functions"], [3, "functions"], [4, "functions"], [5, "functions"], [6, "functions"], [7, "functions"], [10, "functions"], [11, "functions"], [13, "functions"], [14, "functions"], [15, "functions"], [16, "functions"], [17, "functions"], [18, "functions"], [19, "functions"], [21, "functions"], [23, "functions"], [26, "functions"], [27, "functions"], [28, "functions"], [29, "functions"], [30, "functions"], [32, "functions"], [34, "functions"], [35, "functions"], [36, "functions"], [37, "functions"], [38, "functions"], [41, "functions"], [42, "functions"], [43, "functions"], [44, "functions"], [45, "functions"], [46, "functions"], [47, "functions"], [48, "functions"], [50, "functions"], [51, "functions"], [53, "functions"], [55, "functions"], [56, "functions"]], "arkouda.akscipy._stats_py": [[3, "module-arkouda.akscipy._stats_py"]], "arkouda.akscipy": [[4, "module-arkouda.akscipy"]], "Subpackages": [[4, "subpackages"], [32, "subpackages"]], "Package Contents": [[4, "package-contents"], [6, "package-contents"], [22, "package-contents"], [32, "package-contents"], [48, "package-contents"]], "arkouda.akscipy.special._math": [[5, "module-arkouda.akscipy.special._math"]], "arkouda.akscipy.special": [[6, "module-arkouda.akscipy.special"]], "arkouda.alignment": [[7, "module-arkouda.alignment"]], "arkouda.array_api._array_object": [[8, "module-arkouda.array_api._array_object"]], "arkouda.array_api._constants": [[9, "module-arkouda.array_api._constants"]], "arkouda.array_api._creation_functions": [[10, "module-arkouda.array_api._creation_functions"]], "arkouda.array_api._data_type_functions": [[11, "module-arkouda.array_api._data_type_functions"]], "arkouda.array_api._dtypes": [[12, "module-arkouda.array_api._dtypes"]], "arkouda.array_api._elementwise_functions": [[13, "module-arkouda.array_api._elementwise_functions"]], "arkouda.array_api._indexing_functions": [[14, "module-arkouda.array_api._indexing_functions"]], "arkouda.array_api._manipulation_functions": [[15, "module-arkouda.array_api._manipulation_functions"]], "arkouda.array_api._searching_functions": [[16, "module-arkouda.array_api._searching_functions"]], "arkouda.array_api._set_functions": [[17, "module-arkouda.array_api._set_functions"]], "arkouda.array_api._sorting_functions": [[18, "module-arkouda.array_api._sorting_functions"]], "arkouda.array_api._statistical_functions": [[19, "module-arkouda.array_api._statistical_functions"]], "arkouda.array_api._typing": [[20, "module-arkouda.array_api._typing"]], "Attributes": [[20, "attributes"], [29, "attributes"], [30, "attributes"], [32, "attributes"], [34, "attributes"], [50, "attributes"], [51, "attributes"]], "arkouda.array_api._utility_functions": [[21, "module-arkouda.array_api._utility_functions"]], "arkouda.array_api": [[22, "module-arkouda.array_api"]], "Submodules": [[22, "submodules"], [32, "submodules"]], "arkouda.array_api.linalg": [[23, "module-arkouda.array_api.linalg"]], "arkouda.array_view": [[24, "module-arkouda.array_view"]], "arkouda.categorical": [[25, "module-arkouda.categorical"]], "arkouda.client": [[26, "module-arkouda.client"]], "arkouda.client_dtypes": [[27, "module-arkouda.client_dtypes"]], "arkouda.dataframe": [[28, "module-arkouda.dataframe"]], "arkouda.dtypes": [[29, "module-arkouda.dtypes"]], "arkouda.groupbyclass": [[30, "module-arkouda.groupbyclass"]], "arkouda.history": [[31, "module-arkouda.history"]], "arkouda": [[32, "module-arkouda"]], "Input": [[32, "input"], [52, "input"]], "Return Type": [[32, "return-type"], [32, "id549"], [44, "return-type"], [98, "return-type"]], "arkouda.index": [[33, "module-arkouda.index"]], "arkouda.infoclass": [[34, "module-arkouda.infoclass"]], "arkouda.io": [[35, "module-arkouda.io"]], "arkouda.io_util": [[36, "module-arkouda.io_util"]], "arkouda.join": [[37, "module-arkouda.join"]], "arkouda.logger": [[38, "module-arkouda.logger"]], "arkouda.match": [[39, "module-arkouda.match"]], "arkouda.matcher": [[40, "module-arkouda.matcher"]], "arkouda.numeric": [[41, "module-arkouda.numeric"]], "arkouda.pdarrayclass": [[42, "module-arkouda.pdarrayclass"]], "arkouda.pdarraycreation": [[43, "module-arkouda.pdarraycreation"]], "arkouda.pdarraysetops": [[44, "module-arkouda.pdarraysetops"]], "arkouda.plotting": [[45, "module-arkouda.plotting"]], "arkouda.random._generator": [[46, "module-arkouda.random._generator"]], "arkouda.random._legacy": [[47, "module-arkouda.random._legacy"]], "arkouda.random": [[48, "module-arkouda.random"]], "arkouda.row": [[49, "module-arkouda.row"]], "arkouda.security": [[50, "module-arkouda.security"]], "arkouda.segarray": [[51, "module-arkouda.segarray"]], "arkouda.series": [[52, "module-arkouda.series"]], "arkouda.sorting": [[53, "module-arkouda.sorting"]], "arkouda.strings": [[54, "module-arkouda.strings"]], "arkouda.timeclass": [[55, "module-arkouda.timeclass"]], "arkouda.util": [[56, "module-arkouda.util"]], "API Reference": [[57, "api-reference"], [67, "api-reference"], [68, "api-reference"], [69, "api-reference"], [70, "api-reference"]], "Adding Your First Feature": [[58, "adding-your-first-feature"]], "Adding Python Functionality (Client Interface)": [[58, "adding-python-functionality-client-interface"]], "Example": [[58, "example"], [58, "id1"]], "Adding Functionality to the Arkouda Server": [[58, "adding-functionality-to-the-arkouda-server"]], "PyTest Benchmarks": [[59, "pytest-benchmarks"]], "Running The Full Suite": [[59, "running-the-full-suite"]], "Benchmark Arguments": [[59, "benchmark-arguments"]], "Running Single Files or Tests": [[59, "running-single-files-or-tests"]], "Reading the JSON Output": [[59, "reading-the-json-output"]], "GASNet Development": [[60, "gasnet-development"]], "Environment Configuration": [[60, "environment-configuration"]], "Build Chapel with GASNet": [[60, "build-chapel-with-gasnet"]], "Build Arkouda": [[60, "build-arkouda"]], "Run Arkouda": [[60, "run-arkouda"]], "Reducing Memory Usage of Arkouda Builds": [[61, "reducing-memory-usage-of-arkouda-builds"]], "Step-by-step instructions": [[62, "step-by-step-instructions"]], "Generating release notes": [[62, "generating-release-notes"]], "Diff the git logs": [[62, "diff-the-git-logs"]], "Speeding up Arkouda Compilation": [[63, "speeding-up-arkouda-compilation"]], "Environment Variables to Always Set": [[63, "environment-variables-to-always-set"]], "Using the Modular Build System": [[63, "using-the-modular-build-system"]], "Tips for Reproducing User Bugs": [[64, "tips-for-reproducing-user-bugs"]], "Saving Full Builds": [[64, "saving-full-builds"]], "Reproducing User Bugs Efficiently": [[64, "reproducing-user-bugs-efficiently"]], "Developer Documentation": [[65, "developer-documentation"]], "Examples": [[66, "examples"]], "Arkouda Arrays": [[66, "arkouda-arrays"]], "pdarray Creation": [[66, "pdarray-creation"]], "Exporting pdarray Objects": [[66, "exporting-pdarray-objects"]], "pdarray Set operations": [[66, "pdarray-set-operations"]], "Arkouda DataFrames": [[66, "arkouda-dataframes"]], "Creating & Using a DataFrame": [[66, "creating-using-a-dataframe"]], "Importing Pandas DataFrame": [[66, "importing-pandas-dataframe"]], "Python Mapping": [[66, "python-mapping"]], "Basic Interaction": [[66, "basic-interaction"]], "Exporting to Pandas": [[66, "exporting-to-pandas"]], "GroupBy": [[66, "groupby"], [68, "groupby"], [68, "id5"], [91, "groupby"], [92, "groupby"]], "pdarrays": [[66, "pdarrays"]], "DataFrames": [[66, "dataframes"]], "CSV": [[67, "csv"]], "Support Arkouda Data Types": [[67, "support-arkouda-data-types"]], "File Formatting": [[67, "file-formatting"]], "Example Files": [[67, "example-files"]], "Arkouda Formatted File": [[67, "arkouda-formatted-file"]], "File Without Header": [[67, "file-without-header"]], "Data Formatting": [[67, "data-formatting"]], "pdarray": [[67, "pdarray"], [68, "pdarray"], [68, "id1"], [70, "pdarray"]], "Strings": [[67, "strings"], [68, "strings"], [68, "id2"], [70, "strings"]], "Index": [[67, "index"], [68, "index"], [70, "index"]], "DataFrame": [[67, "dataframe"], [68, "dataframe"], [70, "dataframe"]], "HDF5": [[68, "hdf5"]], "File Configuration": [[68, "file-configuration"]], "Supported Arkouda Data Types": [[68, "supported-arkouda-data-types"], [70, "supported-arkouda-data-types"]], "MetaData Attributes": [[68, "metadata-attributes"]], "Data Schema": [[68, "data-schema"]], "ArrayView": [[68, "arrayview"]], "SegArray": [[68, "segarray"], [68, "id4"], [70, "segarray"]], "Categorical": [[68, "categorical"], [68, "id3"], [70, "categorical"]], "Supported Write Modes": [[68, "supported-write-modes"], [70, "supported-write-modes"]], "Data Distribution": [[68, "data-distribution"]], "Legacy File Support": [[68, "legacy-file-support"]], "Import/Export": [[69, "import-export"], [84, "import-export"]], "Export": [[69, "export"]], "Import": [[69, "import"]], "Parquet": [[70, "parquet"]], "Compression": [[70, "compression"]], "File I/O": [[71, "file-i-o"]], "Supported File Formats:": [[71, null]], "Import/Export Support": [[71, "import-export-support"]], "General I/O API": [[71, "general-i-o-api"]], "Write": [[71, "write"]], "Read": [[71, "read"]], "ls Functionality": [[71, "ls-functionality"]], "Arkouda Documentation": [[72, "arkouda-documentation"]], "Quickstart": [[73, "quickstart"]], "Install Dependencies": [[73, "install-dependencies"]], "Install Arkouda": [[73, "install-arkouda"]], "Launching the Server": [[73, "launching-the-server"]], "Connect the Python 3 Client": [[73, "connect-the-python-3-client"]], "Shutdown/Disconnect": [[73, "shutdown-disconnect"]], "Using Arkouda": [[73, "using-arkouda"]], "Chapel API Reference": [[74, "chapel-api-reference"]], "Building the Server": [[75, "building-the-server"]], "Getting Started": [[75, "getting-started"]], "Dependency Configuration": [[75, "dependency-configuration"]], "Using Environment Installed Dependencies (Recommended)": [[75, "using-environment-installed-dependencies-recommended"]], "Installing Dependencies Manually": [[75, "installing-dependencies-manually"]], "Dependencies": [[75, "dependencies"]], "All Dependencies": [[75, "all-dependencies"]], "Individual Installs": [[75, "individual-installs"]], "Arrow Install Troubleshooting": [[75, "arrow-install-troubleshooting"]], "Distributable Package": [[75, "distributable-package"]], "Build the Server": [[75, "build-the-server"]], "Building the Arkouda Documentation": [[75, "building-the-arkouda-documentation"]], "Modular Building": [[75, "modular-building"]], "Linux": [[76, "linux"]], "Update Kernel": [[76, "update-kernel"]], "Clone Arkouda Repository": [[76, "clone-arkouda-repository"], [77, "clone-arkouda-repository"]], "Python Environment - Anaconda (Linux)": [[76, "python-environment-anaconda-linux"]], "Chapel Installation": [[76, "chapel-installation"]], "Install Chapel (Ubuntu)": [[76, "install-chapel-ubuntu"]], "Install Chapel (RHEL)": [[76, "install-chapel-rhel"]], "Next Steps": [[76, "next-steps"], [77, "next-steps"]], "MacOS": [[77, "macos"]], "Python Environment - Anaconda": [[77, "python-environment-anaconda"]], "Updating Environment": [[77, "updating-environment"]], "Anaconda": [[77, "anaconda"]], "Install Chapel": [[77, "install-chapel"]], "Build from Source (Recommended)": [[77, "build-from-source-recommended"]], "Homebrew": [[77, "homebrew"]], "Modular Server Builds": [[78, "modular-server-builds"]], "Specifying a custom configuration file": [[78, "specifying-a-custom-configuration-file"]], "Adding new modules into the build process": [[78, "adding-new-modules-into-the-build-process"]], "Saving modules used in an Arkouda server run": [[78, "saving-modules-used-in-an-arkouda-server-run"]], "Requirements": [[79, "requirements"], [81, "requirements"]], "Dependency List": [[79, "dependency-list"]], "Python Dependencies": [[79, "python-dependencies"]], "Developer Specific": [[79, "developer-specific"]], "Installing/Updating Python Dependencies": [[79, "installing-updating-python-dependencies"]], "Using Anaconda": [[79, "using-anaconda"]], "Using Pip": [[79, "using-pip"]], "Windows (WSL2)": [[80, "windows-wsl2"]], "Installation": [[81, "installation"]], "Overview": [[81, "overview"]], "Install Guides": [[81, "install-guides"]], "Performance Testing": [[82, "performance-testing"]], "Argsort": [[82, "argsort"]], "Positional Arguments": [[82, "positional-arguments"], [82, "positional-arguments"], [82, "positional-arguments"], [82, "positional-arguments"], [82, "positional-arguments"], [82, "positional-arguments"]], "Named Arguments": [[82, "named-arguments"], [82, "named-arguments"], [82, "named-arguments"], [82, "named-arguments"], [82, "named-arguments"], [82, "named-arguments"]], "Gather": [[82, "gather"]], "Reduce": [[82, "reduce"]], "Scan": [[82, "scan"]], "Scatter": [[82, "scatter"]], "Stream": [[82, "stream"]], "Usage Guide": [[83, "usage-guide"]], "Data I/O": [[84, "data-i-o"]], "Between client and server": [[84, "between-client-and-server"]], "Large Datasets": [[84, "large-datasets"]], "Supported File Formats": [[84, "supported-file-formats"]], "Data Preprocessing": [[84, "data-preprocessing"]], "Reading data from disk": [[84, "reading-data-from-disk"]], "Indexs in Arkouda": [[85, "indexs-in-arkouda"]], "Features": [[85, "features"], [91, "features"], [97, "features"]], "Change Dtype": [[85, "change-dtype"]], "ArgSort": [[85, "argsort"]], "Lookup": [[85, "lookup"], [97, "lookup"], [97, "id1"]], "Concat": [[85, "concat"]], "Sorting": [[86, "sorting"], [91, "sorting"], [97, "sorting"]], "Arithmetic and Numeric Operations": [[87, "arithmetic-and-numeric-operations"]], "Vector and Scalar Arithmetic": [[87, "vector-and-scalar-arithmetic"]], "Element-wise Functions": [[87, "element-wise-functions"]], "Scans": [[87, "scans"]], "Reductions": [[87, "reductions"]], "Where": [[87, "where"]], "ArrayView in Arkouda": [[88, "arrayview-in-arkouda"]], "Creation": [[88, "creation"]], "Indexing": [[88, "indexing"]], "Iteration": [[88, "iteration"], [89, "iteration"], [91, "iteration"], [95, "iteration"], [96, "iteration"], [100, "iteration"]], "Categoricals": [[89, "categoricals"]], "Construction": [[89, "construction"]], "Operations": [[89, "operations"], [100, "operations"]], "Creating Arrays": [[90, "creating-arrays"]], "Constant": [[90, "constant"]], "Regular": [[90, "regular"]], "Random": [[90, "random"]], "Concatenation": [[90, "concatenation"]], "DataFrames in Arkouda": [[91, "dataframes-in-arkouda"]], "Data Types": [[91, "data-types"]], "Drop": [[91, "drop"]], "Copy": [[91, "copy"]], "Filter": [[91, "filter"]], "Permutations": [[91, "permutations"]], "Tail/Head of Data": [[91, "tail-head-of-data"]], "Rename Columns": [[91, "rename-columns"]], "Append": [[91, "append"]], "Concatenate": [[91, "concatenate"]], "Reset Indexes": [[91, "reset-indexes"]], "Deduplication": [[91, "deduplication"], [96, "deduplication"]], "Summarizing Data": [[93, "summarizing-data"]], "Descriptive Statistics": [[93, "descriptive-statistics"]], "Histogram": [[93, "histogram"]], "Value Counts": [[93, "value-counts"], [97, "value-counts"]], "Indexing and Assignment": [[94, "indexing-and-assignment"]], "Integer": [[94, "integer"]], "Slice": [[94, "slice"]], "Gather/Scatter (pdarray)": [[94, "gather-scatter-pdarray"]], "Integer pdarray index": [[94, "integer-pdarray-index"]], "Logical indexing": [[94, "logical-indexing"]], "The pdarray class": [[95, "the-pdarray-class"]], "Data Type": [[95, "data-type"]], "Rank": [[95, "rank"]], "Name": [[95, "name"]], "Operators": [[95, "operators"]], "Type Casting": [[95, "type-casting"]], "Reshape": [[95, "reshape"]], "SegArrays in Arkouda": [[96, "segarrays-in-arkouda"]], "Performance": [[96, "performance"], [100, "performance"]], "Operation": [[96, "operation"]], "SegArray Specific Methods": [[96, "segarray-specific-methods"]], "Prefix & Suffix": [[96, "prefix-suffix"]], "NGrams": [[96, "ngrams"]], "Sub-array of Size": [[96, "sub-array-of-size"]], "Access/Set Specific Elements in Sub-Array": [[96, "access-set-specific-elements-in-sub-array"]], "Append & Prepend": [[96, "append-prepend"]], "SegArray SetOps": [[96, "segarray-setops"]], "Union": [[96, "union"]], "Intersect": [[96, "intersect"]], "Set Difference": [[96, "set-difference"]], "Symmetric Difference": [[96, "symmetric-difference"]], "Series in Arkouda": [[97, "series-in-arkouda"]], "Head/Tail": [[97, "head-tail"]], "Pandas Integration": [[97, "pandas-integration"]], "Array Set Operations": [[98, "array-set-operations"]], "Startup": [[99, "startup"]], "Launch arkouda server": [[99, "launch-arkouda-server"]], "Connect a Python 3 client": [[99, "connect-a-python-3-client"]], "Strings in Arkouda": [[100, "strings-in-arkouda"]], "I/O": [[100, "i-o"]], "String-Specific Methods": [[100, "string-specific-methods"]], "Substring search": [[100, "substring-search"]], "Splitting and joining": [[100, "splitting-and-joining"]], "Flattening": [[100, "flattening"]], "Regular Expressions": [[100, "regular-expressions"]], "Match Object": [[100, "match-object"]]}, "indexentries": {"cachedaccessor (class in arkouda.accessor)": [[2, "arkouda.accessor.CachedAccessor"]], "datetimeaccessor (class in arkouda.accessor)": [[2, "arkouda.accessor.DatetimeAccessor"]], "properties (class in arkouda.accessor)": [[2, "arkouda.accessor.Properties"]], "stringaccessor (class in arkouda.accessor)": [[2, "arkouda.accessor.StringAccessor"]], "arkouda.accessor": [[2, "module-arkouda.accessor"]], "date_operators() (in module arkouda.accessor)": [[2, "arkouda.accessor.date_operators"]], "module": [[2, "module-arkouda.accessor"], [3, "module-arkouda.akscipy._stats_py"], [4, "module-arkouda.akscipy"], [5, "module-arkouda.akscipy.special._math"], [6, "module-arkouda.akscipy.special"], [7, "module-arkouda.alignment"], [8, "module-arkouda.array_api._array_object"], [9, "module-arkouda.array_api._constants"], [10, "module-arkouda.array_api._creation_functions"], [11, "module-arkouda.array_api._data_type_functions"], [12, "module-arkouda.array_api._dtypes"], [13, "module-arkouda.array_api._elementwise_functions"], [14, "module-arkouda.array_api._indexing_functions"], [15, "module-arkouda.array_api._manipulation_functions"], [16, "module-arkouda.array_api._searching_functions"], [17, "module-arkouda.array_api._set_functions"], [18, "module-arkouda.array_api._sorting_functions"], [19, "module-arkouda.array_api._statistical_functions"], [20, "module-arkouda.array_api._typing"], [21, "module-arkouda.array_api._utility_functions"], [22, "module-arkouda.array_api"], [23, "module-arkouda.array_api.linalg"], [24, "module-arkouda.array_view"], [25, "module-arkouda.categorical"], [26, "module-arkouda.client"], [27, "module-arkouda.client_dtypes"], [28, "module-arkouda.dataframe"], [29, "module-arkouda.dtypes"], [30, "module-arkouda.groupbyclass"], [31, "module-arkouda.history"], [32, "module-arkouda"], [33, "module-arkouda.index"], [34, "module-arkouda.infoclass"], [35, "module-arkouda.io"], [36, "module-arkouda.io_util"], [37, "module-arkouda.join"], [38, "module-arkouda.logger"], [39, "module-arkouda.match"], [40, "module-arkouda.matcher"], [41, "module-arkouda.numeric"], [42, "module-arkouda.pdarrayclass"], [43, "module-arkouda.pdarraycreation"], [44, "module-arkouda.pdarraysetops"], [45, "module-arkouda.plotting"], [46, "module-arkouda.random._generator"], [47, "module-arkouda.random._legacy"], [48, "module-arkouda.random"], [49, "module-arkouda.row"], [50, "module-arkouda.security"], [51, "module-arkouda.segarray"], [52, "module-arkouda.series"], [53, "module-arkouda.sorting"], [54, "module-arkouda.strings"], [55, "module-arkouda.timeclass"], [56, "module-arkouda.util"]], "string_operators() (in module arkouda.accessor)": [[2, "arkouda.accessor.string_operators"]], "power_divergenceresult (class in arkouda.akscipy._stats_py)": [[3, "arkouda.akscipy._stats_py.Power_divergenceResult"]], "arkouda.akscipy._stats_py": [[3, "module-arkouda.akscipy._stats_py"]], "chisquare() (in module arkouda.akscipy._stats_py)": [[3, "arkouda.akscipy._stats_py.chisquare"]], "power_divergence() (in module arkouda.akscipy._stats_py)": [[3, "arkouda.akscipy._stats_py.power_divergence"]], "pvalue (arkouda.akscipy._stats_py.power_divergenceresult attribute)": [[3, "arkouda.akscipy._stats_py.Power_divergenceResult.pvalue"]], "statistic (arkouda.akscipy._stats_py.power_divergenceresult attribute)": [[3, "arkouda.akscipy._stats_py.Power_divergenceResult.statistic"]], "power_divergenceresult (class in arkouda.akscipy)": [[4, "arkouda.akscipy.Power_divergenceResult"]], "arkouda.akscipy": [[4, "module-arkouda.akscipy"]], "chisquare() (in module arkouda.akscipy)": [[4, "arkouda.akscipy.chisquare"]], "power_divergence() (in module arkouda.akscipy)": [[4, "arkouda.akscipy.power_divergence"]], "pvalue (arkouda.akscipy.power_divergenceresult attribute)": [[4, "arkouda.akscipy.Power_divergenceResult.pvalue"]], "statistic (arkouda.akscipy.power_divergenceresult attribute)": [[4, "arkouda.akscipy.Power_divergenceResult.statistic"]], "arkouda.akscipy.special._math": [[5, "module-arkouda.akscipy.special._math"]], "xlogy() (in module arkouda.akscipy.special._math)": [[5, "arkouda.akscipy.special._math.xlogy"]], "arkouda.akscipy.special": [[6, "module-arkouda.akscipy.special"]], "xlogy() (in module arkouda.akscipy.special)": [[6, "arkouda.akscipy.special.xlogy"]], "nonuniqueerror": [[7, "arkouda.alignment.NonUniqueError"]], "align() (in module arkouda.alignment)": [[7, "arkouda.alignment.align"]], "arkouda.alignment": [[7, "module-arkouda.alignment"]], "find() (in module arkouda.alignment)": [[7, "arkouda.alignment.find"]], "in1d_intervals() (in module arkouda.alignment)": [[7, "arkouda.alignment.in1d_intervals"]], "interval_lookup() (in module arkouda.alignment)": [[7, "arkouda.alignment.interval_lookup"]], "is_cosorted() (in module arkouda.alignment)": [[7, "arkouda.alignment.is_cosorted"]], "left_align() (in module arkouda.alignment)": [[7, "arkouda.alignment.left_align"]], "lookup() (in module arkouda.alignment)": [[7, "arkouda.alignment.lookup"]], "right_align() (in module arkouda.alignment)": [[7, "arkouda.alignment.right_align"]], "search_intervals() (in module arkouda.alignment)": [[7, "arkouda.alignment.search_intervals"]], "unsqueeze() (in module arkouda.alignment)": [[7, "arkouda.alignment.unsqueeze"]], "zero_up() (in module arkouda.alignment)": [[7, "arkouda.alignment.zero_up"]], "array (class in arkouda.array_api._array_object)": [[8, "arkouda.array_api._array_object.Array"]], "t (arkouda.array_api._array_object.array property)": [[8, "arkouda.array_api._array_object.Array.T"]], "arkouda.array_api._array_object": [[8, "module-arkouda.array_api._array_object"]], "device (arkouda.array_api._array_object.array property)": [[8, "arkouda.array_api._array_object.Array.device"]], "dtype (arkouda.array_api._array_object.array property)": [[8, "arkouda.array_api._array_object.Array.dtype"]], "mt (arkouda.array_api._array_object.array property)": [[8, "arkouda.array_api._array_object.Array.mT"]], "ndim (arkouda.array_api._array_object.array property)": [[8, "arkouda.array_api._array_object.Array.ndim"]], "shape (arkouda.array_api._array_object.array property)": [[8, "arkouda.array_api._array_object.Array.shape"]], "size (arkouda.array_api._array_object.array property)": [[8, "arkouda.array_api._array_object.Array.size"]], "to_device() (arkouda.array_api._array_object.array method)": [[8, "arkouda.array_api._array_object.Array.to_device"]], "to_ndarray() (arkouda.array_api._array_object.array method)": [[8, "arkouda.array_api._array_object.Array.to_ndarray"]], "tolist() (arkouda.array_api._array_object.array method)": [[8, "arkouda.array_api._array_object.Array.tolist"]], "arkouda.array_api._constants": [[9, "module-arkouda.array_api._constants"]], "e (in module arkouda.array_api._constants)": [[9, "arkouda.array_api._constants.e"]], "inf (in module arkouda.array_api._constants)": [[9, "arkouda.array_api._constants.inf"]], "nan (in module arkouda.array_api._constants)": [[9, "arkouda.array_api._constants.nan"]], "pi (in module arkouda.array_api._constants)": [[9, "arkouda.array_api._constants.pi"]], "arange() (in module arkouda.array_api._creation_functions)": [[10, "arkouda.array_api._creation_functions.arange"]], "arkouda.array_api._creation_functions": [[10, "module-arkouda.array_api._creation_functions"]], "asarray() (in module arkouda.array_api._creation_functions)": [[10, "arkouda.array_api._creation_functions.asarray"]], "empty() (in module arkouda.array_api._creation_functions)": [[10, "arkouda.array_api._creation_functions.empty"]], "empty_like() (in module arkouda.array_api._creation_functions)": [[10, "arkouda.array_api._creation_functions.empty_like"]], "eye() (in module arkouda.array_api._creation_functions)": [[10, "arkouda.array_api._creation_functions.eye"]], "from_dlpack() (in module arkouda.array_api._creation_functions)": [[10, "arkouda.array_api._creation_functions.from_dlpack"]], "full() (in module arkouda.array_api._creation_functions)": [[10, "arkouda.array_api._creation_functions.full"]], "full_like() (in module arkouda.array_api._creation_functions)": [[10, "arkouda.array_api._creation_functions.full_like"]], "linspace() (in module arkouda.array_api._creation_functions)": [[10, "arkouda.array_api._creation_functions.linspace"]], "meshgrid() (in module arkouda.array_api._creation_functions)": [[10, "arkouda.array_api._creation_functions.meshgrid"]], "ones() (in module arkouda.array_api._creation_functions)": [[10, "arkouda.array_api._creation_functions.ones"]], "ones_like() (in module arkouda.array_api._creation_functions)": [[10, "arkouda.array_api._creation_functions.ones_like"]], "tril() (in module arkouda.array_api._creation_functions)": [[10, "arkouda.array_api._creation_functions.tril"]], "triu() (in module arkouda.array_api._creation_functions)": [[10, "arkouda.array_api._creation_functions.triu"]], "zeros() (in module arkouda.array_api._creation_functions)": [[10, "arkouda.array_api._creation_functions.zeros"]], "zeros_like() (in module arkouda.array_api._creation_functions)": [[10, "arkouda.array_api._creation_functions.zeros_like"]], "arkouda.array_api._data_type_functions": [[11, "module-arkouda.array_api._data_type_functions"]], "astype() (in module arkouda.array_api._data_type_functions)": [[11, "arkouda.array_api._data_type_functions.astype"]], "bits (arkouda.array_api._data_type_functions.finfo_object attribute)": [[11, "arkouda.array_api._data_type_functions.finfo_object.bits"]], "bits (arkouda.array_api._data_type_functions.iinfo_object attribute)": [[11, "arkouda.array_api._data_type_functions.iinfo_object.bits"]], "can_cast() (in module arkouda.array_api._data_type_functions)": [[11, "arkouda.array_api._data_type_functions.can_cast"]], "dtype (arkouda.array_api._data_type_functions.finfo_object attribute)": [[11, "arkouda.array_api._data_type_functions.finfo_object.dtype"]], "dtype (arkouda.array_api._data_type_functions.iinfo_object attribute)": [[11, "arkouda.array_api._data_type_functions.iinfo_object.dtype"]], "eps (arkouda.array_api._data_type_functions.finfo_object attribute)": [[11, "arkouda.array_api._data_type_functions.finfo_object.eps"]], "finfo_object (class in arkouda.array_api._data_type_functions)": [[11, "arkouda.array_api._data_type_functions.finfo_object"]], "iinfo_object (class in arkouda.array_api._data_type_functions)": [[11, "arkouda.array_api._data_type_functions.iinfo_object"]], "isdtype() (in module arkouda.array_api._data_type_functions)": [[11, "arkouda.array_api._data_type_functions.isdtype"]], "max (arkouda.array_api._data_type_functions.finfo_object attribute)": [[11, "arkouda.array_api._data_type_functions.finfo_object.max"]], "max (arkouda.array_api._data_type_functions.iinfo_object attribute)": [[11, "arkouda.array_api._data_type_functions.iinfo_object.max"]], "min (arkouda.array_api._data_type_functions.finfo_object attribute)": [[11, "arkouda.array_api._data_type_functions.finfo_object.min"]], "min (arkouda.array_api._data_type_functions.iinfo_object attribute)": [[11, "arkouda.array_api._data_type_functions.iinfo_object.min"]], "result_type() (in module arkouda.array_api._data_type_functions)": [[11, "arkouda.array_api._data_type_functions.result_type"]], "smallest_normal (arkouda.array_api._data_type_functions.finfo_object attribute)": [[11, "arkouda.array_api._data_type_functions.finfo_object.smallest_normal"]], "arkouda.array_api._dtypes": [[12, "module-arkouda.array_api._dtypes"]], "bool (in module arkouda.array_api._dtypes)": [[12, "arkouda.array_api._dtypes.bool"]], "complex128 (in module arkouda.array_api._dtypes)": [[12, "arkouda.array_api._dtypes.complex128"]], "complex64 (in module arkouda.array_api._dtypes)": [[12, "arkouda.array_api._dtypes.complex64"]], "float32 (in module arkouda.array_api._dtypes)": [[12, "arkouda.array_api._dtypes.float32"]], "float64 (in module arkouda.array_api._dtypes)": [[12, "arkouda.array_api._dtypes.float64"]], "int16 (in module arkouda.array_api._dtypes)": [[12, "arkouda.array_api._dtypes.int16"]], "int32 (in module arkouda.array_api._dtypes)": [[12, "arkouda.array_api._dtypes.int32"]], "int64 (in module arkouda.array_api._dtypes)": [[12, "arkouda.array_api._dtypes.int64"]], "int8 (in module arkouda.array_api._dtypes)": [[12, "arkouda.array_api._dtypes.int8"]], "uint16 (in module arkouda.array_api._dtypes)": [[12, "arkouda.array_api._dtypes.uint16"]], "uint32 (in module arkouda.array_api._dtypes)": [[12, "arkouda.array_api._dtypes.uint32"]], "uint64 (in module arkouda.array_api._dtypes)": [[12, "arkouda.array_api._dtypes.uint64"]], "uint8 (in module arkouda.array_api._dtypes)": [[12, "arkouda.array_api._dtypes.uint8"]], "abs() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.abs"]], "acos() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.acos"]], "acosh() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.acosh"]], "add() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.add"]], "arkouda.array_api._elementwise_functions": [[13, "module-arkouda.array_api._elementwise_functions"]], "asin() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.asin"]], "asinh() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.asinh"]], "atan() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.atan"]], "atan2() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.atan2"]], "atanh() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.atanh"]], "bitwise_and() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.bitwise_and"]], "bitwise_invert() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.bitwise_invert"]], "bitwise_left_shift() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.bitwise_left_shift"]], "bitwise_or() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.bitwise_or"]], "bitwise_right_shift() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.bitwise_right_shift"]], "bitwise_xor() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.bitwise_xor"]], "ceil() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.ceil"]], "conj() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.conj"]], "cos() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.cos"]], "cosh() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.cosh"]], "divide() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.divide"]], "equal() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.equal"]], "exp() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.exp"]], "expm1() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.expm1"]], "floor() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.floor"]], "floor_divide() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.floor_divide"]], "greater() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.greater"]], "greater_equal() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.greater_equal"]], "imag() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.imag"]], "isfinite() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.isfinite"]], "isinf() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.isinf"]], "isnan() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.isnan"]], "less() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.less"]], "less_equal() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.less_equal"]], "log() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.log"]], "log10() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.log10"]], "log1p() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.log1p"]], "log2() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.log2"]], "logaddexp() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.logaddexp"]], "logical_and() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.logical_and"]], "logical_not() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.logical_not"]], "logical_or() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.logical_or"]], "logical_xor() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.logical_xor"]], "multiply() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.multiply"]], "negative() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.negative"]], "not_equal() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.not_equal"]], "positive() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.positive"]], "pow() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.pow"]], "real() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.real"]], "remainder() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.remainder"]], "round() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.round"]], "sign() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.sign"]], "sin() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.sin"]], "sinh() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.sinh"]], "sqrt() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.sqrt"]], "square() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.square"]], "subtract() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.subtract"]], "tan() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.tan"]], "tanh() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.tanh"]], "trunc() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.trunc"]], "arkouda.array_api._indexing_functions": [[14, "module-arkouda.array_api._indexing_functions"]], "take() (in module arkouda.array_api._indexing_functions)": [[14, "arkouda.array_api._indexing_functions.take"]], "arkouda.array_api._manipulation_functions": [[15, "module-arkouda.array_api._manipulation_functions"]], "broadcast_arrays() (in module arkouda.array_api._manipulation_functions)": [[15, "arkouda.array_api._manipulation_functions.broadcast_arrays"]], "broadcast_to() (in module arkouda.array_api._manipulation_functions)": [[15, "arkouda.array_api._manipulation_functions.broadcast_to"]], "concat() (in module arkouda.array_api._manipulation_functions)": [[15, "arkouda.array_api._manipulation_functions.concat"]], "expand_dims() (in module arkouda.array_api._manipulation_functions)": [[15, "arkouda.array_api._manipulation_functions.expand_dims"]], "flip() (in module arkouda.array_api._manipulation_functions)": [[15, "arkouda.array_api._manipulation_functions.flip"]], "permute_dims() (in module arkouda.array_api._manipulation_functions)": [[15, "arkouda.array_api._manipulation_functions.permute_dims"]], "reshape() (in module arkouda.array_api._manipulation_functions)": [[15, "arkouda.array_api._manipulation_functions.reshape"]], "roll() (in module arkouda.array_api._manipulation_functions)": [[15, "arkouda.array_api._manipulation_functions.roll"]], "squeeze() (in module arkouda.array_api._manipulation_functions)": [[15, "arkouda.array_api._manipulation_functions.squeeze"]], "stack() (in module arkouda.array_api._manipulation_functions)": [[15, "arkouda.array_api._manipulation_functions.stack"]], "argmax() (in module arkouda.array_api._searching_functions)": [[16, "arkouda.array_api._searching_functions.argmax"]], "argmin() (in module arkouda.array_api._searching_functions)": [[16, "arkouda.array_api._searching_functions.argmin"]], "arkouda.array_api._searching_functions": [[16, "module-arkouda.array_api._searching_functions"]], "nonzero() (in module arkouda.array_api._searching_functions)": [[16, "arkouda.array_api._searching_functions.nonzero"]], "where() (in module arkouda.array_api._searching_functions)": [[16, "arkouda.array_api._searching_functions.where"]], "uniqueallresult (class in arkouda.array_api._set_functions)": [[17, "arkouda.array_api._set_functions.UniqueAllResult"]], "uniquecountsresult (class in arkouda.array_api._set_functions)": [[17, "arkouda.array_api._set_functions.UniqueCountsResult"]], "uniqueinverseresult (class in arkouda.array_api._set_functions)": [[17, "arkouda.array_api._set_functions.UniqueInverseResult"]], "arkouda.array_api._set_functions": [[17, "module-arkouda.array_api._set_functions"]], "counts (arkouda.array_api._set_functions.uniqueallresult attribute)": [[17, "arkouda.array_api._set_functions.UniqueAllResult.counts"]], "counts (arkouda.array_api._set_functions.uniquecountsresult attribute)": [[17, "arkouda.array_api._set_functions.UniqueCountsResult.counts"]], "indices (arkouda.array_api._set_functions.uniqueallresult attribute)": [[17, "arkouda.array_api._set_functions.UniqueAllResult.indices"]], "inverse_indices (arkouda.array_api._set_functions.uniqueallresult attribute)": [[17, "arkouda.array_api._set_functions.UniqueAllResult.inverse_indices"]], "inverse_indices (arkouda.array_api._set_functions.uniqueinverseresult attribute)": [[17, "arkouda.array_api._set_functions.UniqueInverseResult.inverse_indices"]], "unique_all() (in module arkouda.array_api._set_functions)": [[17, "arkouda.array_api._set_functions.unique_all"]], "unique_counts() (in module arkouda.array_api._set_functions)": [[17, "arkouda.array_api._set_functions.unique_counts"]], "unique_inverse() (in module arkouda.array_api._set_functions)": [[17, "arkouda.array_api._set_functions.unique_inverse"]], "unique_values() (in module arkouda.array_api._set_functions)": [[17, "arkouda.array_api._set_functions.unique_values"]], "values (arkouda.array_api._set_functions.uniqueallresult attribute)": [[17, "arkouda.array_api._set_functions.UniqueAllResult.values"]], "values (arkouda.array_api._set_functions.uniquecountsresult attribute)": [[17, "arkouda.array_api._set_functions.UniqueCountsResult.values"]], "values (arkouda.array_api._set_functions.uniqueinverseresult attribute)": [[17, "arkouda.array_api._set_functions.UniqueInverseResult.values"]], "argsort() (in module arkouda.array_api._sorting_functions)": [[18, "arkouda.array_api._sorting_functions.argsort"]], "arkouda.array_api._sorting_functions": [[18, "module-arkouda.array_api._sorting_functions"]], "sort() (in module arkouda.array_api._sorting_functions)": [[18, "arkouda.array_api._sorting_functions.sort"]], "arkouda.array_api._statistical_functions": [[19, "module-arkouda.array_api._statistical_functions"]], "max() (in module arkouda.array_api._statistical_functions)": [[19, "arkouda.array_api._statistical_functions.max"]], "mean() (in module arkouda.array_api._statistical_functions)": [[19, "arkouda.array_api._statistical_functions.mean"]], "min() (in module arkouda.array_api._statistical_functions)": [[19, "arkouda.array_api._statistical_functions.min"]], "prod() (in module arkouda.array_api._statistical_functions)": [[19, "arkouda.array_api._statistical_functions.prod"]], "std() (in module arkouda.array_api._statistical_functions)": [[19, "arkouda.array_api._statistical_functions.std"]], "sum() (in module arkouda.array_api._statistical_functions)": [[19, "arkouda.array_api._statistical_functions.sum"]], "var() (in module arkouda.array_api._statistical_functions)": [[19, "arkouda.array_api._statistical_functions.var"]], "array (class in arkouda.array_api._typing)": [[20, "arkouda.array_api._typing.Array"]], "device (in module arkouda.array_api._typing)": [[20, "arkouda.array_api._typing.Device"]], "dtype (in module arkouda.array_api._typing)": [[20, "arkouda.array_api._typing.Dtype"]], "pycapsule (in module arkouda.array_api._typing)": [[20, "arkouda.array_api._typing.PyCapsule"]], "supportsbufferprotocol (in module arkouda.array_api._typing)": [[20, "arkouda.array_api._typing.SupportsBufferProtocol"]], "supportsdlpack (class in arkouda.array_api._typing)": [[20, "arkouda.array_api._typing.SupportsDLPack"]], "t (arkouda.array_api._typing.array property)": [[20, "arkouda.array_api._typing.Array.T"]], "arkouda.array_api._typing": [[20, "module-arkouda.array_api._typing"]], "device (arkouda.array_api._typing.array property)": [[20, "arkouda.array_api._typing.Array.device"]], "dtype (arkouda.array_api._typing.array property)": [[20, "arkouda.array_api._typing.Array.dtype"]], "mt (arkouda.array_api._typing.array property)": [[20, "arkouda.array_api._typing.Array.mT"]], "ndim (arkouda.array_api._typing.array property)": [[20, "arkouda.array_api._typing.Array.ndim"]], "shape (arkouda.array_api._typing.array property)": [[20, "arkouda.array_api._typing.Array.shape"]], "size (arkouda.array_api._typing.array property)": [[20, "arkouda.array_api._typing.Array.size"]], "to_device() (arkouda.array_api._typing.array method)": [[20, "arkouda.array_api._typing.Array.to_device"]], "to_ndarray() (arkouda.array_api._typing.array method)": [[20, "arkouda.array_api._typing.Array.to_ndarray"]], "tolist() (arkouda.array_api._typing.array method)": [[20, "arkouda.array_api._typing.Array.tolist"]], "all() (in module arkouda.array_api._utility_functions)": [[21, "arkouda.array_api._utility_functions.all"]], "any() (in module arkouda.array_api._utility_functions)": [[21, "arkouda.array_api._utility_functions.any"]], "arkouda.array_api._utility_functions": [[21, "module-arkouda.array_api._utility_functions"]], "arkouda.array_api": [[22, "module-arkouda.array_api"]], "arkouda.array_api.linalg": [[23, "module-arkouda.array_api.linalg"]], "matmul() (in module arkouda.array_api.linalg)": [[23, "arkouda.array_api.linalg.matmul"]], "matrix_transpose() (in module arkouda.array_api.linalg)": [[23, "arkouda.array_api.linalg.matrix_transpose"]], "tensordot() (in module arkouda.array_api.linalg)": [[23, "arkouda.array_api.linalg.tensordot"]], "vecdot() (in module arkouda.array_api.linalg)": [[23, "arkouda.array_api.linalg.vecdot"]], "arrayview (class in arkouda.array_view)": [[24, "arkouda.array_view.ArrayView"]], "arkouda.array_view": [[24, "module-arkouda.array_view"]], "base (arkouda.array_view.arrayview attribute)": [[24, "arkouda.array_view.ArrayView.base"]], "dtype (arkouda.array_view.arrayview attribute)": [[24, "arkouda.array_view.ArrayView.dtype"]], "itemsize (arkouda.array_view.arrayview attribute)": [[24, "arkouda.array_view.ArrayView.itemsize"]], "ndim (arkouda.array_view.arrayview attribute)": [[24, "arkouda.array_view.ArrayView.ndim"]], "objtype (arkouda.array_view.arrayview attribute)": [[24, "arkouda.array_view.ArrayView.objType"]], "order (arkouda.array_view.arrayview attribute)": [[24, "arkouda.array_view.ArrayView.order"]], "shape (arkouda.array_view.arrayview attribute)": [[24, "arkouda.array_view.ArrayView.shape"]], "size (arkouda.array_view.arrayview attribute)": [[24, "arkouda.array_view.ArrayView.size"]], "to_hdf() (arkouda.array_view.arrayview method)": [[24, "arkouda.array_view.ArrayView.to_hdf"]], "to_list() (arkouda.array_view.arrayview method)": [[24, "arkouda.array_view.ArrayView.to_list"]], "to_ndarray() (arkouda.array_view.arrayview method)": [[24, "arkouda.array_view.ArrayView.to_ndarray"]], "update_hdf() (arkouda.array_view.arrayview method)": [[24, "arkouda.array_view.ArrayView.update_hdf"]], "binops (arkouda.categorical.categorical attribute)": [[25, "arkouda.categorical.Categorical.BinOps"]], "categorical (class in arkouda.categorical)": [[25, "arkouda.categorical.Categorical"]], "registerablepieces (arkouda.categorical.categorical attribute)": [[25, "arkouda.categorical.Categorical.RegisterablePieces"]], "requiredpieces (arkouda.categorical.categorical attribute)": [[25, "arkouda.categorical.Categorical.RequiredPieces"]], "argsort() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.argsort"]], "arkouda.categorical": [[25, "module-arkouda.categorical"]], "attach() (arkouda.categorical.categorical static method)": [[25, "arkouda.categorical.Categorical.attach"]], "categories (arkouda.categorical.categorical attribute)": [[25, "arkouda.categorical.Categorical.categories"]], "codes (arkouda.categorical.categorical attribute)": [[25, "arkouda.categorical.Categorical.codes"]], "concatenate() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.concatenate"]], "contains() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.contains"]], "dtype (arkouda.categorical.categorical attribute)": [[25, "arkouda.categorical.Categorical.dtype"]], "endswith() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.endswith"]], "from_codes() (arkouda.categorical.categorical class method)": [[25, "arkouda.categorical.Categorical.from_codes"]], "from_return_msg() (arkouda.categorical.categorical class method)": [[25, "arkouda.categorical.Categorical.from_return_msg"]], "group() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.group"]], "hash() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.hash"]], "in1d() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.in1d"]], "info() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.info"]], "is_registered() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.is_registered"]], "isna() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.isna"]], "ndim (arkouda.categorical.categorical attribute)": [[25, "arkouda.categorical.Categorical.ndim"]], "nlevels (arkouda.categorical.categorical attribute)": [[25, "arkouda.categorical.Categorical.nlevels"]], "objtype (arkouda.categorical.categorical attribute)": [[25, "arkouda.categorical.Categorical.objType"]], "parse_hdf_categoricals() (arkouda.categorical.categorical static method)": [[25, "arkouda.categorical.Categorical.parse_hdf_categoricals"]], "permutation (arkouda.categorical.categorical attribute)": [[25, "arkouda.categorical.Categorical.permutation"], [25, "id0"]], "pretty_print_info() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.pretty_print_info"]], "register() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.register"]], "reset_categories() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.reset_categories"]], "save() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.save"]], "segments (arkouda.categorical.categorical attribute)": [[25, "arkouda.categorical.Categorical.segments"], [25, "id1"]], "set_categories() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.set_categories"]], "shape (arkouda.categorical.categorical attribute)": [[25, "arkouda.categorical.Categorical.shape"]], "size (arkouda.categorical.categorical attribute)": [[25, "arkouda.categorical.Categorical.size"]], "sort() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.sort"]], "standardize_categories() (arkouda.categorical.categorical class method)": [[25, "arkouda.categorical.Categorical.standardize_categories"]], "startswith() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.startswith"]], "to_hdf() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.to_hdf"]], "to_list() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.to_list"]], "to_ndarray() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.to_ndarray"]], "to_parquet() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.to_parquet"]], "transfer() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.transfer"]], "unique() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.unique"]], "unregister() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.unregister"]], "unregister_categorical_by_name() (arkouda.categorical.categorical static method)": [[25, "arkouda.categorical.Categorical.unregister_categorical_by_name"]], "update_hdf() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.update_hdf"]], "arkouda.client": [[26, "module-arkouda.client"]], "connect() (in module arkouda.client)": [[26, "arkouda.client.connect"]], "disconnect() (in module arkouda.client)": [[26, "arkouda.client.disconnect"]], "generate_history() (in module arkouda.client)": [[26, "arkouda.client.generate_history"]], "get_config() (in module arkouda.client)": [[26, "arkouda.client.get_config"]], "get_mem_avail() (in module arkouda.client)": [[26, "arkouda.client.get_mem_avail"]], "get_mem_status() (in module arkouda.client)": [[26, "arkouda.client.get_mem_status"]], "get_mem_used() (in module arkouda.client)": [[26, "arkouda.client.get_mem_used"]], "get_server_commands() (in module arkouda.client)": [[26, "arkouda.client.get_server_commands"]], "print_server_commands() (in module arkouda.client)": [[26, "arkouda.client.print_server_commands"]], "ruok() (in module arkouda.client)": [[26, "arkouda.client.ruok"]], "shutdown() (in module arkouda.client)": [[26, "arkouda.client.shutdown"]], "bitvector (class in arkouda.client_dtypes)": [[27, "arkouda.client_dtypes.BitVector"]], "bitvectorizer() (in module arkouda.client_dtypes)": [[27, "arkouda.client_dtypes.BitVectorizer"]], "fields (class in arkouda.client_dtypes)": [[27, "arkouda.client_dtypes.Fields"]], "ipv4 (class in arkouda.client_dtypes)": [[27, "arkouda.client_dtypes.IPv4"]], "arkouda.client_dtypes": [[27, "module-arkouda.client_dtypes"]], "conserves (arkouda.client_dtypes.bitvector attribute)": [[27, "arkouda.client_dtypes.BitVector.conserves"]], "export_uint() (arkouda.client_dtypes.ipv4 method)": [[27, "arkouda.client_dtypes.IPv4.export_uint"]], "format() (arkouda.client_dtypes.bitvector method)": [[27, "arkouda.client_dtypes.BitVector.format"]], "format() (arkouda.client_dtypes.fields method)": [[27, "arkouda.client_dtypes.Fields.format"]], "format() (arkouda.client_dtypes.ipv4 method)": [[27, "arkouda.client_dtypes.IPv4.format"]], "from_return_msg() (arkouda.client_dtypes.bitvector class method)": [[27, "arkouda.client_dtypes.BitVector.from_return_msg"]], "ip_address() (in module arkouda.client_dtypes)": [[27, "arkouda.client_dtypes.ip_address"]], "is_ipv4() (in module arkouda.client_dtypes)": [[27, "arkouda.client_dtypes.is_ipv4"]], "is_ipv6() (in module arkouda.client_dtypes)": [[27, "arkouda.client_dtypes.is_ipv6"]], "normalize() (arkouda.client_dtypes.ipv4 method)": [[27, "arkouda.client_dtypes.IPv4.normalize"]], "opeq() (arkouda.client_dtypes.bitvector method)": [[27, "arkouda.client_dtypes.BitVector.opeq"]], "opeq() (arkouda.client_dtypes.fields method)": [[27, "arkouda.client_dtypes.Fields.opeq"]], "opeq() (arkouda.client_dtypes.ipv4 method)": [[27, "arkouda.client_dtypes.IPv4.opeq"]], "register() (arkouda.client_dtypes.bitvector method)": [[27, "arkouda.client_dtypes.BitVector.register"]], "register() (arkouda.client_dtypes.ipv4 method)": [[27, "arkouda.client_dtypes.IPv4.register"]], "special_objtype (arkouda.client_dtypes.bitvector attribute)": [[27, "arkouda.client_dtypes.BitVector.special_objType"]], "special_objtype (arkouda.client_dtypes.ipv4 attribute)": [[27, "arkouda.client_dtypes.IPv4.special_objType"]], "to_hdf() (arkouda.client_dtypes.ipv4 method)": [[27, "arkouda.client_dtypes.IPv4.to_hdf"]], "to_list() (arkouda.client_dtypes.bitvector method)": [[27, "arkouda.client_dtypes.BitVector.to_list"]], "to_list() (arkouda.client_dtypes.ipv4 method)": [[27, "arkouda.client_dtypes.IPv4.to_list"]], "to_ndarray() (arkouda.client_dtypes.bitvector method)": [[27, "arkouda.client_dtypes.BitVector.to_ndarray"]], "to_ndarray() (arkouda.client_dtypes.ipv4 method)": [[27, "arkouda.client_dtypes.IPv4.to_ndarray"]], "update_hdf() (arkouda.client_dtypes.ipv4 method)": [[27, "arkouda.client_dtypes.IPv4.update_hdf"]], "dataframe (class in arkouda.dataframe)": [[28, "arkouda.dataframe.DataFrame"]], "diffaggregate (class in arkouda.dataframe)": [[28, "arkouda.dataframe.DiffAggregate"]], "groupby() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.GroupBy"], [28, "arkouda.dataframe.DataFrame.groupby"]], "append() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.append"]], "apply_permutation() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.apply_permutation"]], "argsort() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.argsort"]], "arkouda.dataframe": [[28, "module-arkouda.dataframe"]], "attach() (arkouda.dataframe.dataframe static method)": [[28, "arkouda.dataframe.DataFrame.attach"]], "coargsort() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.coargsort"]], "columns (arkouda.dataframe.dataframe property)": [[28, "arkouda.dataframe.DataFrame.columns"]], "concat() (arkouda.dataframe.dataframe class method)": [[28, "arkouda.dataframe.DataFrame.concat"]], "copy() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.copy"]], "corr() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.corr"]], "drop() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.drop"]], "drop_duplicates() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.drop_duplicates"]], "dtypes (arkouda.dataframe.dataframe property)": [[28, "arkouda.dataframe.DataFrame.dtypes"]], "empty (arkouda.dataframe.dataframe property)": [[28, "arkouda.dataframe.DataFrame.empty"]], "filter_by_range() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.filter_by_range"]], "from_pandas() (arkouda.dataframe.dataframe class method)": [[28, "arkouda.dataframe.DataFrame.from_pandas"]], "from_return_msg() (arkouda.dataframe.dataframe class method)": [[28, "arkouda.dataframe.DataFrame.from_return_msg"]], "gb (arkouda.dataframe.diffaggregate attribute)": [[28, "arkouda.dataframe.DiffAggregate.gb"]], "head() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.head"]], "index (arkouda.dataframe.dataframe property)": [[28, "arkouda.dataframe.DataFrame.index"]], "info (arkouda.dataframe.dataframe property)": [[28, "arkouda.dataframe.DataFrame.info"]], "intersect() (in module arkouda.dataframe)": [[28, "arkouda.dataframe.intersect"]], "intx() (in module arkouda.dataframe)": [[28, "arkouda.dataframe.intx"]], "invert_permutation() (in module arkouda.dataframe)": [[28, "arkouda.dataframe.invert_permutation"]], "is_registered() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.is_registered"]], "isin() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.isin"]], "load() (arkouda.dataframe.dataframe class method)": [[28, "arkouda.dataframe.DataFrame.load"]], "memory_usage() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.memory_usage"]], "merge() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.merge"]], "merge() (in module arkouda.dataframe)": [[28, "arkouda.dataframe.merge"]], "objtype (arkouda.dataframe.dataframe attribute)": [[28, "arkouda.dataframe.DataFrame.objType"]], "read_csv() (arkouda.dataframe.dataframe class method)": [[28, "arkouda.dataframe.DataFrame.read_csv"]], "register() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.register"]], "rename() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.rename"]], "reset_index() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.reset_index"]], "sample() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.sample"]], "save() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.save"]], "shape (arkouda.dataframe.dataframe property)": [[28, "arkouda.dataframe.DataFrame.shape"]], "size (arkouda.dataframe.dataframe property)": [[28, "arkouda.dataframe.DataFrame.size"]], "sort_index() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.sort_index"]], "sort_values() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.sort_values"]], "tail() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.tail"]], "to_csv() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.to_csv"]], "to_hdf() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.to_hdf"]], "to_pandas() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.to_pandas"]], "to_parquet() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.to_parquet"]], "transfer() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.transfer"]], "unregister() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.unregister"]], "unregister_dataframe_by_name() (arkouda.dataframe.dataframe static method)": [[28, "arkouda.dataframe.DataFrame.unregister_dataframe_by_name"]], "update_hdf() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.update_hdf"]], "update_nrows() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.update_nrows"]], "values (arkouda.dataframe.diffaggregate attribute)": [[28, "arkouda.dataframe.DiffAggregate.values"]], "arkouda_supported_dtypes (in module arkouda.dtypes)": [[29, "arkouda.dtypes.ARKOUDA_SUPPORTED_DTYPES"]], "dtypeobjects (in module arkouda.dtypes)": [[29, "arkouda.dtypes.DTypeObjects"]], "dtypes (in module arkouda.dtypes)": [[29, "arkouda.dtypes.DTypes"]], "scalardtypes (in module arkouda.dtypes)": [[29, "arkouda.dtypes.ScalarDTypes"]], "all_scalars (in module arkouda.dtypes)": [[29, "arkouda.dtypes.all_scalars"]], "arkouda.dtypes": [[29, "module-arkouda.dtypes"]], "bigint (in module arkouda.dtypes)": [[29, "arkouda.dtypes.bigint"]], "bittype (in module arkouda.dtypes)": [[29, "arkouda.dtypes.bitType"]], "bool (in module arkouda.dtypes)": [[29, "arkouda.dtypes.bool"]], "bool_scalars (in module arkouda.dtypes)": [[29, "arkouda.dtypes.bool_scalars"]], "check_np_dtype() (in module arkouda.dtypes)": [[29, "arkouda.dtypes.check_np_dtype"]], "complex128 (in module arkouda.dtypes)": [[29, "arkouda.dtypes.complex128"]], "complex64 (in module arkouda.dtypes)": [[29, "arkouda.dtypes.complex64"]], "dtype() (in module arkouda.dtypes)": [[29, "arkouda.dtypes.dtype"]], "float32 (in module arkouda.dtypes)": [[29, "arkouda.dtypes.float32"]], "float64 (in module arkouda.dtypes)": [[29, "arkouda.dtypes.float64"]], "float_scalars (in module arkouda.dtypes)": [[29, "arkouda.dtypes.float_scalars"]], "get_byteorder() (in module arkouda.dtypes)": [[29, "arkouda.dtypes.get_byteorder"]], "get_server_byteorder() (in module arkouda.dtypes)": [[29, "arkouda.dtypes.get_server_byteorder"]], "int16 (in module arkouda.dtypes)": [[29, "arkouda.dtypes.int16"]], "int32 (in module arkouda.dtypes)": [[29, "arkouda.dtypes.int32"]], "int64 (in module arkouda.dtypes)": [[29, "arkouda.dtypes.int64"]], "int8 (in module arkouda.dtypes)": [[29, "arkouda.dtypes.int8"]], "inttypes (in module arkouda.dtypes)": [[29, "arkouda.dtypes.intTypes"]], "int_scalars (in module arkouda.dtypes)": [[29, "arkouda.dtypes.int_scalars"]], "issupportednumber() (in module arkouda.dtypes)": [[29, "arkouda.dtypes.isSupportedNumber"]], "numeric_scalars (in module arkouda.dtypes)": [[29, "arkouda.dtypes.numeric_scalars"]], "numpy_scalars (in module arkouda.dtypes)": [[29, "arkouda.dtypes.numpy_scalars"]], "resolve_scalar_dtype() (in module arkouda.dtypes)": [[29, "arkouda.dtypes.resolve_scalar_dtype"]], "str_ (in module arkouda.dtypes)": [[29, "arkouda.dtypes.str_"]], "str_scalars (in module arkouda.dtypes)": [[29, "arkouda.dtypes.str_scalars"]], "translate_np_dtype() (in module arkouda.dtypes)": [[29, "arkouda.dtypes.translate_np_dtype"]], "uint16 (in module arkouda.dtypes)": [[29, "arkouda.dtypes.uint16"]], "uint32 (in module arkouda.dtypes)": [[29, "arkouda.dtypes.uint32"]], "uint64 (in module arkouda.dtypes)": [[29, "arkouda.dtypes.uint64"]], "uint8 (in module arkouda.dtypes)": [[29, "arkouda.dtypes.uint8"]], "and() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.AND"]], "groupby_reduction_types (in module arkouda.groupbyclass)": [[30, "arkouda.groupbyclass.GROUPBY_REDUCTION_TYPES"]], "groupby (class in arkouda.groupbyclass)": [[30, "arkouda.groupbyclass.GroupBy"]], "or() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.OR"]], "reductions (arkouda.groupbyclass.groupby attribute)": [[30, "arkouda.groupbyclass.GroupBy.Reductions"]], "xor() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.XOR"]], "aggregate() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.aggregate"]], "all() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.all"]], "any() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.any"]], "argmax() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.argmax"]], "argmin() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.argmin"]], "arkouda.groupbyclass": [[30, "module-arkouda.groupbyclass"]], "attach() (arkouda.groupbyclass.groupby static method)": [[30, "arkouda.groupbyclass.GroupBy.attach"]], "broadcast() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.broadcast"]], "broadcast() (in module arkouda.groupbyclass)": [[30, "arkouda.groupbyclass.broadcast"]], "build_from_components() (arkouda.groupbyclass.groupby static method)": [[30, "arkouda.groupbyclass.GroupBy.build_from_components"]], "count() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.count"]], "dropna (arkouda.groupbyclass.groupby attribute)": [[30, "arkouda.groupbyclass.GroupBy.dropna"]], "first() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.first"]], "from_return_msg() (arkouda.groupbyclass.groupby static method)": [[30, "arkouda.groupbyclass.GroupBy.from_return_msg"]], "is_registered() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.is_registered"]], "logger (arkouda.groupbyclass.groupby attribute)": [[30, "arkouda.groupbyclass.GroupBy.logger"]], "max() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.max"]], "mean() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.mean"]], "median() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.median"]], "min() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.min"]], "mode() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.mode"]], "most_common() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.most_common"]], "ngroups (arkouda.groupbyclass.groupby attribute)": [[30, "arkouda.groupbyclass.GroupBy.ngroups"]], "nkeys (arkouda.groupbyclass.groupby attribute)": [[30, "arkouda.groupbyclass.GroupBy.nkeys"]], "nunique() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.nunique"]], "objtype (arkouda.groupbyclass.groupby attribute)": [[30, "arkouda.groupbyclass.GroupBy.objType"]], "permutation (arkouda.groupbyclass.groupby attribute)": [[30, "arkouda.groupbyclass.GroupBy.permutation"]], "prod() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.prod"]], "register() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.register"]], "segments (arkouda.groupbyclass.groupby attribute)": [[30, "arkouda.groupbyclass.GroupBy.segments"]], "size (arkouda.groupbyclass.groupby attribute)": [[30, "arkouda.groupbyclass.GroupBy.size"]], "size() (arkouda.groupbyclass.groupby method)": [[30, "id0"]], "std() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.std"]], "sum() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.sum"]], "to_hdf() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.to_hdf"]], "unique() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.unique"]], "unique() (in module arkouda.groupbyclass)": [[30, "arkouda.groupbyclass.unique"]], "unique_keys (arkouda.groupbyclass.groupby attribute)": [[30, "arkouda.groupbyclass.GroupBy.unique_keys"]], "unregister() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.unregister"]], "unregister_groupby_by_name() (arkouda.groupbyclass.groupby static method)": [[30, "arkouda.groupbyclass.GroupBy.unregister_groupby_by_name"]], "update_hdf() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.update_hdf"]], "var() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.var"]], "historyretriever (class in arkouda.history)": [[31, "arkouda.history.HistoryRetriever"]], "notebookhistoryretriever (class in arkouda.history)": [[31, "arkouda.history.NotebookHistoryRetriever"]], "shellhistoryretriever (class in arkouda.history)": [[31, "arkouda.history.ShellHistoryRetriever"]], "arkouda.history": [[31, "module-arkouda.history"]], "retrieve() (arkouda.history.historyretriever method)": [[31, "arkouda.history.HistoryRetriever.retrieve"]], "retrieve() (arkouda.history.notebookhistoryretriever method)": [[31, "arkouda.history.NotebookHistoryRetriever.retrieve"]], "retrieve() (arkouda.history.shellhistoryretriever method)": [[31, "arkouda.history.ShellHistoryRetriever.retrieve"]], "and() (arkouda.groupby method)": [[32, "arkouda.GroupBy.AND"], [32, "id126"], [32, "id170"], [32, "id214"], [32, "id258"], [92, "arkouda.GroupBy.AND"]], "and() (arkouda.segarray method)": [[32, "arkouda.SegArray.AND"]], "arkouda_supported_dtypes (in module arkouda)": [[32, "arkouda.ARKOUDA_SUPPORTED_DTYPES"]], "allsymbols (in module arkouda)": [[32, "arkouda.AllSymbols"]], "arrayview (class in arkouda)": [[32, "arkouda.ArrayView"], [88, "arkouda.ArrayView"]], "binops (arkouda.strings attribute)": [[32, "arkouda.Strings.BinOps"], [32, "id305"], [32, "id373"], [32, "id441"]], "binops (arkouda.pdarray attribute)": [[32, "arkouda.pdarray.BinOps"], [32, "id571"], [32, "id631"], [32, "id691"], [32, "id751"]], "bitvector (class in arkouda)": [[32, "arkouda.BitVector"]], "bitvectorizer() (in module arkouda)": [[32, "arkouda.BitVectorizer"]], "critical (arkouda.loglevel attribute)": [[32, "arkouda.LogLevel.CRITICAL"]], "cachedaccessor (class in arkouda)": [[32, "arkouda.CachedAccessor"]], "debug (arkouda.loglevel attribute)": [[32, "arkouda.LogLevel.DEBUG"]], "dtypeobjects (in module arkouda)": [[32, "arkouda.DTypeObjects"]], "dtypes (in module arkouda)": [[32, "arkouda.DTypes"]], "dataframe (class in arkouda)": [[32, "arkouda.DataFrame"], [32, "id0"], [91, "arkouda.DataFrame"]], "datetime (class in arkouda)": [[32, "arkouda.Datetime"], [32, "id48"], [32, "id81"]], "datetimeaccessor (class in arkouda)": [[32, "arkouda.DatetimeAccessor"]], "diffaggregate (class in arkouda)": [[32, "arkouda.DiffAggregate"]], "error (arkouda.loglevel attribute)": [[32, "arkouda.LogLevel.ERROR"]], "errormode (class in arkouda)": [[32, "arkouda.ErrorMode"]], "fields (class in arkouda)": [[32, "arkouda.Fields"]], "groupby_reduction_types (in module arkouda)": [[32, "arkouda.GROUPBY_REDUCTION_TYPES"]], "generator (class in arkouda)": [[32, "arkouda.Generator"]], "groupby (class in arkouda)": [[32, "arkouda.GroupBy"], [32, "id115"], [32, "id159"], [32, "id203"], [32, "id247"], [92, "arkouda.GroupBy"]], "groupby() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.GroupBy"], [32, "id9"], [32, "arkouda.DataFrame.groupby"], [32, "id23"]], "info (arkouda.loglevel attribute)": [[32, "arkouda.LogLevel.INFO"]], "ipv4 (class in arkouda)": [[32, "arkouda.IPv4"]], "index (class in arkouda)": [[32, "arkouda.Index"], [85, "arkouda.Index"]], "len_suffix (in module arkouda)": [[32, "arkouda.LEN_SUFFIX"]], "loglevel (class in arkouda)": [[32, "arkouda.LogLevel"]], "multiindex (class in arkouda)": [[32, "arkouda.MultiIndex"]], "or() (arkouda.groupby method)": [[32, "arkouda.GroupBy.OR"], [32, "id127"], [32, "id171"], [32, "id215"], [32, "id259"], [92, "arkouda.GroupBy.OR"]], "or() (arkouda.segarray method)": [[32, "arkouda.SegArray.OR"]], "opeqops (arkouda.pdarray attribute)": [[32, "arkouda.pdarray.OpEqOps"], [32, "id572"], [32, "id632"], [32, "id692"], [32, "id752"]], "power_divergenceresult (class in arkouda)": [[32, "arkouda.Power_divergenceResult"]], "properties (class in arkouda)": [[32, "arkouda.Properties"]], "reductions (arkouda.groupby attribute)": [[32, "arkouda.GroupBy.Reductions"], [32, "id124"], [32, "id168"], [32, "id212"], [32, "id256"]], "registeredsymbols (in module arkouda)": [[32, "arkouda.RegisteredSymbols"]], "registrationerror": [[32, "arkouda.RegistrationError"], [32, "id293"], [32, "id294"], [32, "id295"], [32, "id296"], [42, "arkouda.pdarrayclass.RegistrationError"]], "row (class in arkouda)": [[32, "arkouda.Row"]], "seg_suffix (in module arkouda)": [[32, "arkouda.SEG_SUFFIX"]], "scalardtypes (in module arkouda)": [[32, "arkouda.ScalarDTypes"]], "segarray (class in arkouda)": [[32, "arkouda.SegArray"]], "series (class in arkouda)": [[32, "arkouda.Series"], [97, "arkouda.Series"]], "stringaccessor (class in arkouda)": [[32, "arkouda.StringAccessor"]], "strings (class in arkouda)": [[32, "arkouda.Strings"], [32, "id297"], [32, "id365"], [32, "id433"]], "timedelta (class in arkouda)": [[32, "arkouda.Timedelta"], [32, "id501"]], "val_suffix (in module arkouda)": [[32, "arkouda.VAL_SUFFIX"]], "warn (arkouda.loglevel attribute)": [[32, "arkouda.LogLevel.WARN"]], "xor() (arkouda.groupby method)": [[32, "arkouda.GroupBy.XOR"], [32, "id128"], [32, "id172"], [32, "id216"], [32, "id260"], [92, "arkouda.GroupBy.XOR"]], "xor() (arkouda.segarray method)": [[32, "arkouda.SegArray.XOR"]], "abs() (arkouda.timedelta method)": [[32, "arkouda.Timedelta.abs"], [32, "id515"]], "abs() (in module arkouda)": [[32, "arkouda.abs"], [87, "arkouda.abs"]], "add() (arkouda.series method)": [[32, "arkouda.Series.add"]], "aggregate() (arkouda.groupby method)": [[32, "arkouda.GroupBy.aggregate"], [32, "id129"], [32, "id173"], [32, "id217"], [32, "id261"], [92, "arkouda.GroupBy.aggregate"]], "aggregate() (arkouda.segarray method)": [[32, "arkouda.SegArray.aggregate"]], "akabs() (in module arkouda)": [[32, "arkouda.akabs"]], "akbool (in module arkouda)": [[32, "arkouda.akbool"], [32, "id523"]], "akcast() (in module arkouda)": [[32, "arkouda.akcast"], [32, "id524"]], "akfloat64 (in module arkouda)": [[32, "arkouda.akfloat64"]], "akint64 (in module arkouda)": [[32, "arkouda.akint64"], [32, "id525"]], "akuint64 (in module arkouda)": [[32, "arkouda.akuint64"], [32, "id526"]], "all() (arkouda.groupby method)": [[32, "arkouda.GroupBy.all"], [32, "id130"], [32, "id174"], [32, "id218"], [32, "id262"], [92, "arkouda.GroupBy.all"]], "all() (arkouda.segarray method)": [[32, "arkouda.SegArray.all"]], "all() (arkouda.pdarray method)": [[32, "arkouda.pdarray.all"], [32, "id574"], [32, "id634"], [32, "id694"], [32, "id754"], [93, "arkouda.pdarray.all"]], "all() (in module arkouda)": [[32, "arkouda.all"], [87, "arkouda.all"]], "all_scalars (in module arkouda)": [[32, "arkouda.all_scalars"]], "any() (arkouda.groupby method)": [[32, "arkouda.GroupBy.any"], [32, "id131"], [32, "id175"], [32, "id219"], [32, "id263"], [92, "arkouda.GroupBy.any"]], "any() (arkouda.segarray method)": [[32, "arkouda.SegArray.any"]], "any() (arkouda.pdarray method)": [[32, "arkouda.pdarray.any"], [32, "id575"], [32, "id635"], [32, "id695"], [32, "id755"], [93, "arkouda.pdarray.any"]], "any() (in module arkouda)": [[32, "arkouda.any"], [87, "arkouda.any"]], "append() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.append"], [32, "id10"]], "append() (arkouda.segarray method)": [[32, "arkouda.SegArray.append"]], "append_single() (arkouda.segarray method)": [[32, "arkouda.SegArray.append_single"]], "apply_permutation() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.apply_permutation"], [32, "id11"]], "arange() (in module arkouda)": [[32, "arkouda.arange"], [32, "id527"], [32, "id528"], [32, "id529"], [32, "id530"], [90, "arkouda.arange"]], "arccos() (in module arkouda)": [[32, "arkouda.arccos"]], "arccosh() (in module arkouda)": [[32, "arkouda.arccosh"]], "arcsin() (in module arkouda)": [[32, "arkouda.arcsin"]], "arcsinh() (in module arkouda)": [[32, "arkouda.arcsinh"]], "arctan() (in module arkouda)": [[32, "arkouda.arctan"]], "arctan2() (in module arkouda)": [[32, "arkouda.arctan2"]], "arctanh() (in module arkouda)": [[32, "arkouda.arctanh"]], "argmax() (arkouda.groupby method)": [[32, "arkouda.GroupBy.argmax"], [32, "id132"], [32, "id176"], [32, "id220"], [32, "id264"], [92, "arkouda.GroupBy.argmax"]], "argmax() (arkouda.segarray method)": [[32, "arkouda.SegArray.argmax"]], "argmax() (arkouda.pdarray method)": [[32, "arkouda.pdarray.argmax"], [32, "id576"], [32, "id636"], [32, "id696"], [32, "id756"], [93, "arkouda.pdarray.argmax"]], "argmax() (in module arkouda)": [[32, "arkouda.argmax"], [87, "arkouda.argmax"]], "argmaxk() (arkouda.pdarray method)": [[32, "arkouda.pdarray.argmaxk"], [32, "id577"], [32, "id637"], [32, "id697"], [32, "id757"], [93, "arkouda.pdarray.argmaxk"]], "argmaxk() (in module arkouda)": [[32, "arkouda.argmaxk"], [87, "arkouda.argmaxk"]], "argmin() (arkouda.groupby method)": [[32, "arkouda.GroupBy.argmin"], [32, "id133"], [32, "id177"], [32, "id221"], [32, "id265"], [92, "arkouda.GroupBy.argmin"]], "argmin() (arkouda.segarray method)": [[32, "arkouda.SegArray.argmin"]], "argmin() (arkouda.pdarray method)": [[32, "arkouda.pdarray.argmin"], [32, "id578"], [32, "id638"], [32, "id698"], [32, "id758"], [93, "arkouda.pdarray.argmin"]], "argmin() (in module arkouda)": [[32, "arkouda.argmin"], [87, "arkouda.argmin"]], "argmink() (arkouda.pdarray method)": [[32, "arkouda.pdarray.argmink"], [32, "id579"], [32, "id639"], [32, "id699"], [32, "id759"], [93, "arkouda.pdarray.argmink"]], "argmink() (in module arkouda)": [[32, "arkouda.argmink"], [87, "arkouda.argmink"]], "argsort() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.argsort"], [32, "id12"]], "argsort() (arkouda.index method)": [[32, "arkouda.Index.argsort"]], "argsort() (arkouda.multiindex method)": [[32, "arkouda.MultiIndex.argsort"]], "argsort() (in module arkouda)": [[32, "arkouda.argsort"], [32, "id531"], [86, "arkouda.argsort"]], "arkouda": [[32, "module-arkouda"]], "array() (in module arkouda)": [[32, "arkouda.array"], [32, "id532"], [32, "id533"], [32, "id534"], [84, "arkouda.array"]], "astype() (arkouda.strings method)": [[32, "arkouda.Strings.astype"], [32, "id307"], [32, "id375"], [32, "id443"]], "astype() (arkouda.pdarray method)": [[32, "arkouda.pdarray.astype"], [32, "id580"], [32, "id640"], [32, "id700"], [32, "id760"]], "at (arkouda.series property)": [[32, "arkouda.Series.at"]], "attach() (arkouda.dataframe static method)": [[32, "arkouda.DataFrame.attach"], [32, "id13"]], "attach() (arkouda.groupby static method)": [[32, "arkouda.GroupBy.attach"], [32, "id134"], [32, "id178"], [32, "id222"], [32, "id266"], [92, "arkouda.GroupBy.attach"]], "attach() (arkouda.segarray class method)": [[32, "arkouda.SegArray.attach"]], "attach() (arkouda.series static method)": [[32, "arkouda.Series.attach"]], "attach() (arkouda.strings static method)": [[32, "arkouda.Strings.attach"], [32, "id308"], [32, "id376"], [32, "id444"]], "attach() (arkouda.pdarray static method)": [[32, "arkouda.pdarray.attach"], [32, "id581"], [32, "id641"], [32, "id701"], [32, "id761"]], "attach() (in module arkouda)": [[32, "arkouda.attach"]], "attach_all() (in module arkouda)": [[32, "arkouda.attach_all"]], "attach_pdarray() (in module arkouda)": [[32, "arkouda.attach_pdarray"]], "base (arkouda.arrayview attribute)": [[32, "arkouda.ArrayView.base"], [88, "arkouda.ArrayView.base"]], "bigint (in module arkouda)": [[32, "arkouda.bigint"]], "bigint_from_uint_arrays() (in module arkouda)": [[32, "arkouda.bigint_from_uint_arrays"]], "bigint_to_uint_arrays() (arkouda.pdarray method)": [[32, "arkouda.pdarray.bigint_to_uint_arrays"], [32, "id582"], [32, "id642"], [32, "id702"], [32, "id762"]], "bittype (in module arkouda)": [[32, "arkouda.bitType"], [32, "id535"]], "bool (in module arkouda)": [[32, "arkouda.bool"]], "bool_scalars (in module arkouda)": [[32, "arkouda.bool_scalars"]], "broadcast() (arkouda.groupby method)": [[32, "arkouda.GroupBy.broadcast"], [32, "id135"], [32, "id179"], [32, "id223"], [32, "id267"], [92, "arkouda.GroupBy.broadcast"]], "broadcast() (in module arkouda)": [[32, "arkouda.broadcast"], [32, "id536"], [32, "id537"]], "broadcast_dims() (in module arkouda)": [[32, "arkouda.broadcast_dims"]], "broadcast_to_shape() (in module arkouda)": [[32, "arkouda.broadcast_to_shape"]], "build_from_components() (arkouda.groupby static method)": [[32, "arkouda.GroupBy.build_from_components"], [32, "id136"], [32, "id180"], [32, "id224"], [32, "id268"], [92, "arkouda.GroupBy.build_from_components"]], "cached_regex_patterns() (arkouda.strings method)": [[32, "arkouda.Strings.cached_regex_patterns"], [32, "id309"], [32, "id377"], [32, "id445"]], "capitalize() (arkouda.strings method)": [[32, "arkouda.Strings.capitalize"], [32, "id310"], [32, "id378"], [32, "id446"]], "cast() (in module arkouda)": [[32, "arkouda.cast"], [32, "id538"], [95, "arkouda.cast"]], "ceil() (in module arkouda)": [[32, "arkouda.ceil"]], "check_np_dtype() (in module arkouda)": [[32, "arkouda.check_np_dtype"]], "chisquare() (in module arkouda)": [[32, "arkouda.chisquare"]], "clear() (in module arkouda)": [[32, "arkouda.clear"]], "clz() (arkouda.pdarray method)": [[32, "arkouda.pdarray.clz"], [32, "id583"], [32, "id643"], [32, "id703"], [32, "id763"]], "clz() (in module arkouda)": [[32, "arkouda.clz"]], "coargsort() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.coargsort"], [32, "id14"]], "coargsort() (in module arkouda)": [[32, "arkouda.coargsort"], [32, "id539"], [86, "arkouda.coargsort"]], "columns (arkouda.dataframe property)": [[32, "arkouda.DataFrame.columns"], [32, "id1"]], "complex128 (in module arkouda)": [[32, "arkouda.complex128"]], "complex64 (in module arkouda)": [[32, "arkouda.complex64"]], "components (arkouda.timedelta property)": [[32, "arkouda.Timedelta.components"], [32, "id502"]], "concat() (arkouda.dataframe class method)": [[32, "arkouda.DataFrame.concat"], [32, "id15"]], "concat() (arkouda.index method)": [[32, "arkouda.Index.concat"]], "concat() (arkouda.multiindex method)": [[32, "arkouda.MultiIndex.concat"]], "concat() (arkouda.segarray class method)": [[32, "arkouda.SegArray.concat"]], "concat() (arkouda.series static method)": [[32, "arkouda.Series.concat"]], "concatenate() (in module arkouda)": [[32, "arkouda.concatenate"], [32, "id540"], [90, "arkouda.concatenate"]], "conserves (arkouda.bitvector attribute)": [[32, "arkouda.BitVector.conserves"]], "contains() (arkouda.strings method)": [[32, "arkouda.Strings.contains"], [32, "id311"], [32, "id379"], [32, "id447"], [100, "arkouda.Strings.contains"]], "convert_if_categorical() (in module arkouda)": [[32, "arkouda.convert_if_categorical"]], "copy() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.copy"], [32, "id16"]], "copy() (arkouda.segarray method)": [[32, "arkouda.SegArray.copy"]], "corr() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.corr"], [32, "id17"]], "corr() (arkouda.pdarray method)": [[32, "arkouda.pdarray.corr"], [32, "id584"], [32, "id644"], [32, "id704"], [32, "id764"]], "corr() (in module arkouda)": [[32, "arkouda.corr"]], "cos() (in module arkouda)": [[32, "arkouda.cos"], [87, "arkouda.cos"]], "cosh() (in module arkouda)": [[32, "arkouda.cosh"]], "count() (arkouda.groupby method)": [[32, "arkouda.GroupBy.count"], [32, "id137"], [32, "id181"], [32, "id225"], [32, "id269"], [92, "arkouda.GroupBy.count"]], "cov() (arkouda.pdarray method)": [[32, "arkouda.pdarray.cov"], [32, "id585"], [32, "id645"], [32, "id705"], [32, "id765"]], "cov() (in module arkouda)": [[32, "arkouda.cov"]], "create_pdarray() (in module arkouda)": [[32, "arkouda.create_pdarray"], [32, "id541"], [32, "id542"], [32, "id543"]], "ctz() (arkouda.pdarray method)": [[32, "arkouda.pdarray.ctz"], [32, "id586"], [32, "id646"], [32, "id706"], [32, "id766"]], "ctz() (in module arkouda)": [[32, "arkouda.ctz"]], "cumprod() (in module arkouda)": [[32, "arkouda.cumprod"], [87, "arkouda.cumprod"]], "cumsum() (in module arkouda)": [[32, "arkouda.cumsum"], [32, "id544"], [87, "arkouda.cumsum"]], "date (arkouda.datetime property)": [[32, "arkouda.Datetime.date"], [32, "id49"], [32, "id82"]], "date_operators() (in module arkouda)": [[32, "arkouda.date_operators"]], "date_range() (in module arkouda)": [[32, "arkouda.date_range"], [32, "id545"]], "day (arkouda.datetime property)": [[32, "arkouda.Datetime.day"], [32, "id50"], [32, "id83"]], "day_of_week (arkouda.datetime property)": [[32, "arkouda.Datetime.day_of_week"], [32, "id51"], [32, "id84"]], "day_of_year (arkouda.datetime property)": [[32, "arkouda.Datetime.day_of_year"], [32, "id52"], [32, "id85"]], "dayofweek (arkouda.datetime property)": [[32, "arkouda.Datetime.dayofweek"], [32, "id53"], [32, "id86"]], "dayofyear (arkouda.datetime property)": [[32, "arkouda.Datetime.dayofyear"], [32, "id54"], [32, "id87"]], "days (arkouda.timedelta property)": [[32, "arkouda.Timedelta.days"], [32, "id503"]], "decode() (arkouda.strings method)": [[32, "arkouda.Strings.decode"], [32, "id312"], [32, "id380"], [32, "id448"]], "default_rng() (in module arkouda)": [[32, "arkouda.default_rng"]], "deg2rad() (in module arkouda)": [[32, "arkouda.deg2rad"]], "diff() (arkouda.series method)": [[32, "arkouda.Series.diff"]], "disableverbose() (in module arkouda)": [[32, "arkouda.disableVerbose"]], "divmod() (in module arkouda)": [[32, "arkouda.divmod"]], "drop() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.drop"], [32, "id18"]], "drop_duplicates() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.drop_duplicates"], [32, "id19"]], "dropna (arkouda.groupby attribute)": [[32, "arkouda.GroupBy.dropna"], [32, "id123"], [32, "id167"], [32, "id211"], [32, "id255"], [92, "arkouda.GroupBy.dropna"]], "dt (arkouda.series attribute)": [[32, "arkouda.Series.dt"]], "dtype (arkouda.arrayview attribute)": [[32, "arkouda.ArrayView.dtype"], [88, "arkouda.ArrayView.dtype"]], "dtype (arkouda.strings attribute)": [[32, "arkouda.Strings.dtype"], [32, "id303"], [32, "id371"], [32, "id439"]], "dtype (arkouda.pdarray attribute)": [[32, "arkouda.pdarray.dtype"], [32, "id565"], [32, "id625"], [32, "id685"], [32, "id745"], [95, "arkouda.pdarray.dtype"]], "dtype() (in module arkouda)": [[32, "arkouda.dtype"]], "dtypes (arkouda.dataframe property)": [[32, "arkouda.DataFrame.dtypes"], [32, "id2"]], "empty (arkouda.dataframe property)": [[32, "arkouda.DataFrame.empty"], [32, "id3"]], "enableverbose() (in module arkouda)": [[32, "arkouda.enableVerbose"]], "encode() (arkouda.strings method)": [[32, "arkouda.Strings.encode"], [32, "id313"], [32, "id381"], [32, "id449"]], "endswith() (arkouda.strings method)": [[32, "arkouda.Strings.endswith"], [32, "id314"], [32, "id382"], [32, "id450"], [100, "arkouda.Strings.endswith"]], "entry (arkouda.strings attribute)": [[32, "arkouda.Strings.entry"], [32, "id298"], [32, "id366"], [32, "id434"]], "exp() (in module arkouda)": [[32, "arkouda.exp"], [87, "arkouda.exp"]], "expm1() (in module arkouda)": [[32, "arkouda.expm1"]], "export() (in module arkouda)": [[32, "arkouda.export"], [84, "arkouda.export"]], "export_uint() (arkouda.ipv4 method)": [[32, "arkouda.IPv4.export_uint"]], "factory() (arkouda.index static method)": [[32, "arkouda.Index.factory"]], "fill() (arkouda.pdarray method)": [[32, "arkouda.pdarray.fill"], [32, "id587"], [32, "id647"], [32, "id707"], [32, "id767"]], "filter() (arkouda.segarray method)": [[32, "arkouda.SegArray.filter"]], "filter_by_range() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.filter_by_range"], [32, "id20"]], "find_locations() (arkouda.strings method)": [[32, "arkouda.Strings.find_locations"], [32, "id315"], [32, "id383"], [32, "id451"], [100, "arkouda.Strings.find_locations"]], "findall() (arkouda.strings method)": [[32, "arkouda.Strings.findall"], [32, "id316"], [32, "id384"], [32, "id452"], [100, "arkouda.Strings.findall"]], "first() (arkouda.groupby method)": [[32, "arkouda.GroupBy.first"], [32, "id138"], [32, "id182"], [32, "id226"], [32, "id270"], [92, "arkouda.GroupBy.first"]], "flatten() (arkouda.strings method)": [[32, "arkouda.Strings.flatten"], [32, "id317"], [32, "id385"], [32, "id453"], [100, "arkouda.Strings.flatten"]], "float32 (in module arkouda)": [[32, "arkouda.float32"]], "float64 (in module arkouda)": [[32, "arkouda.float64"]], "float_scalars (in module arkouda)": [[32, "arkouda.float_scalars"]], "floor() (in module arkouda)": [[32, "arkouda.floor"]], "fmod() (in module arkouda)": [[32, "arkouda.fmod"]], "format() (arkouda.bitvector method)": [[32, "arkouda.BitVector.format"]], "format() (arkouda.fields method)": [[32, "arkouda.Fields.format"]], "format() (arkouda.ipv4 method)": [[32, "arkouda.IPv4.format"]], "format_other() (arkouda.pdarray method)": [[32, "arkouda.pdarray.format_other"], [32, "id588"], [32, "id648"], [32, "id708"], [32, "id768"]], "from_multi_array() (arkouda.segarray class method)": [[32, "arkouda.SegArray.from_multi_array"]], "from_pandas() (arkouda.dataframe class method)": [[32, "arkouda.DataFrame.from_pandas"], [32, "id21"]], "from_parts() (arkouda.segarray class method)": [[32, "arkouda.SegArray.from_parts"]], "from_parts() (arkouda.strings static method)": [[32, "arkouda.Strings.from_parts"], [32, "id318"], [32, "id386"], [32, "id454"]], "from_return_msg() (arkouda.bitvector class method)": [[32, "arkouda.BitVector.from_return_msg"]], "from_return_msg() (arkouda.dataframe class method)": [[32, "arkouda.DataFrame.from_return_msg"], [32, "id22"]], "from_return_msg() (arkouda.groupby static method)": [[32, "arkouda.GroupBy.from_return_msg"], [32, "id139"], [32, "id183"], [32, "id227"], [32, "id271"]], "from_return_msg() (arkouda.index class method)": [[32, "arkouda.Index.from_return_msg"]], "from_return_msg() (arkouda.segarray class method)": [[32, "arkouda.SegArray.from_return_msg"]], "from_return_msg() (arkouda.series class method)": [[32, "arkouda.Series.from_return_msg"]], "from_return_msg() (arkouda.strings static method)": [[32, "arkouda.Strings.from_return_msg"], [32, "id319"], [32, "id387"], [32, "id455"]], "from_series() (in module arkouda)": [[32, "arkouda.from_series"], [32, "id546"]], "full() (in module arkouda)": [[32, "arkouda.full"]], "full_like() (in module arkouda)": [[32, "arkouda.full_like"]], "fullmatch() (arkouda.strings method)": [[32, "arkouda.Strings.fullmatch"], [32, "id320"], [32, "id388"], [32, "id456"], [100, "arkouda.Strings.fullmatch"]], "gb (arkouda.diffaggregate attribute)": [[32, "arkouda.DiffAggregate.gb"]], "generic_concat() (in module arkouda)": [[32, "arkouda.generic_concat"]], "getarkoudalogger() (in module arkouda)": [[32, "arkouda.getArkoudaLogger"]], "get_byteorder() (in module arkouda)": [[32, "arkouda.get_byteorder"]], "get_bytes() (arkouda.strings method)": [[32, "arkouda.Strings.get_bytes"], [32, "id321"], [32, "id389"], [32, "id457"]], "get_callback() (in module arkouda)": [[32, "arkouda.get_callback"]], "get_columns() (in module arkouda)": [[32, "arkouda.get_columns"]], "get_datasets() (in module arkouda)": [[32, "arkouda.get_datasets"], [84, "arkouda.get_datasets"]], "get_filetype() (in module arkouda)": [[32, "arkouda.get_filetype"]], "get_jth() (arkouda.segarray method)": [[32, "arkouda.SegArray.get_jth"]], "get_length_n() (arkouda.segarray method)": [[32, "arkouda.SegArray.get_length_n"]], "get_lengths() (arkouda.strings method)": [[32, "arkouda.Strings.get_lengths"], [32, "id322"], [32, "id390"], [32, "id458"]], "get_ngrams() (arkouda.segarray method)": [[32, "arkouda.SegArray.get_ngrams"]], "get_null_indices() (in module arkouda)": [[32, "arkouda.get_null_indices"]], "get_offsets() (arkouda.strings method)": [[32, "arkouda.Strings.get_offsets"], [32, "id323"], [32, "id391"], [32, "id459"]], "get_prefixes() (arkouda.segarray method)": [[32, "arkouda.SegArray.get_prefixes"]], "get_prefixes() (arkouda.strings method)": [[32, "arkouda.Strings.get_prefixes"], [32, "id324"], [32, "id392"], [32, "id460"]], "get_server_byteorder() (in module arkouda)": [[32, "arkouda.get_server_byteorder"]], "get_suffixes() (arkouda.segarray method)": [[32, "arkouda.SegArray.get_suffixes"]], "get_suffixes() (arkouda.strings method)": [[32, "arkouda.Strings.get_suffixes"], [32, "id325"], [32, "id393"], [32, "id461"]], "group() (arkouda.strings method)": [[32, "arkouda.Strings.group"], [32, "id326"], [32, "id394"], [32, "id462"]], "grouping (arkouda.segarray property)": [[32, "arkouda.SegArray.grouping"]], "has_repeat_labels() (arkouda.series method)": [[32, "arkouda.Series.has_repeat_labels"]], "hash() (arkouda.segarray method)": [[32, "arkouda.SegArray.hash"]], "hash() (arkouda.strings method)": [[32, "arkouda.Strings.hash"], [32, "id327"], [32, "id395"], [32, "id463"]], "hash() (in module arkouda)": [[32, "arkouda.hash"]], "head() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.head"], [32, "id24"]], "head() (arkouda.series method)": [[32, "arkouda.Series.head"]], "hist_all() (in module arkouda)": [[32, "arkouda.hist_all"]], "histogram() (in module arkouda)": [[32, "arkouda.histogram"], [32, "id547"], [93, "arkouda.histogram"]], "histogram2d() (in module arkouda)": [[32, "arkouda.histogram2d"]], "histogramdd() (in module arkouda)": [[32, "arkouda.histogramdd"]], "hour (arkouda.datetime property)": [[32, "arkouda.Datetime.hour"], [32, "id55"], [32, "id88"]], "iat (arkouda.series property)": [[32, "arkouda.Series.iat"]], "ignore (arkouda.errormode attribute)": [[32, "arkouda.ErrorMode.ignore"]], "iloc (arkouda.series property)": [[32, "arkouda.Series.iloc"]], "import_data() (in module arkouda)": [[32, "arkouda.import_data"], [84, "arkouda.import_data"]], "in1d() (in module arkouda)": [[32, "arkouda.in1d"], [32, "id548"], [98, "arkouda.in1d"]], "index (arkouda.dataframe property)": [[32, "arkouda.DataFrame.index"], [32, "id4"]], "index (arkouda.index property)": [[32, "arkouda.Index.index"]], "index (arkouda.multiindex property)": [[32, "arkouda.MultiIndex.index"]], "indexof1d() (in module arkouda)": [[32, "arkouda.indexof1d"]], "info (arkouda.dataframe property)": [[32, "arkouda.DataFrame.info"], [32, "id5"]], "info() (arkouda.strings method)": [[32, "arkouda.Strings.info"], [32, "id328"], [32, "id396"], [32, "id464"]], "info() (arkouda.pdarray method)": [[32, "arkouda.pdarray.info"], [32, "id589"], [32, "id649"], [32, "id709"], [32, "id769"]], "information() (in module arkouda)": [[32, "arkouda.information"]], "int16 (in module arkouda)": [[32, "arkouda.int16"]], "int32 (in module arkouda)": [[32, "arkouda.int32"]], "int64 (in module arkouda)": [[32, "arkouda.int64"], [32, "id550"]], "int8 (in module arkouda)": [[32, "arkouda.int8"]], "inttypes (in module arkouda)": [[32, "arkouda.intTypes"], [32, "id551"], [32, "id552"]], "int_scalars (in module arkouda)": [[32, "arkouda.int_scalars"], [32, "id553"], [32, "id554"]], "integers() (arkouda.generator method)": [[32, "arkouda.Generator.integers"]], "intersect() (arkouda.segarray method)": [[32, "arkouda.SegArray.intersect"]], "intersect() (in module arkouda)": [[32, "arkouda.intersect"]], "intersect1d() (in module arkouda)": [[32, "arkouda.intersect1d"], [98, "arkouda.intersect1d"]], "intx() (in module arkouda)": [[32, "arkouda.intx"]], "invert_permutation() (in module arkouda)": [[32, "arkouda.invert_permutation"]], "ip_address() (in module arkouda)": [[32, "arkouda.ip_address"]], "issupportedint() (in module arkouda)": [[32, "arkouda.isSupportedInt"], [32, "id555"], [32, "id556"]], "issupportednumber() (in module arkouda)": [[32, "arkouda.isSupportedNumber"]], "is_ipv4() (in module arkouda)": [[32, "arkouda.is_ipv4"]], "is_ipv6() (in module arkouda)": [[32, "arkouda.is_ipv6"]], "is_leap_year (arkouda.datetime property)": [[32, "arkouda.Datetime.is_leap_year"], [32, "id56"], [32, "id89"]], "is_registered() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.is_registered"], [32, "id25"]], "is_registered() (arkouda.datetime method)": [[32, "arkouda.Datetime.is_registered"], [32, "id108"], [32, "id75"]], "is_registered() (arkouda.groupby method)": [[32, "arkouda.GroupBy.is_registered"], [32, "id140"], [32, "id184"], [32, "id228"], [32, "id272"], [92, "arkouda.GroupBy.is_registered"]], "is_registered() (arkouda.index method)": [[32, "arkouda.Index.is_registered"]], "is_registered() (arkouda.multiindex method)": [[32, "arkouda.MultiIndex.is_registered"]], "is_registered() (arkouda.segarray method)": [[32, "arkouda.SegArray.is_registered"]], "is_registered() (arkouda.series method)": [[32, "arkouda.Series.is_registered"]], "is_registered() (arkouda.strings method)": [[32, "arkouda.Strings.is_registered"], [32, "id329"], [32, "id397"], [32, "id465"]], "is_registered() (arkouda.timedelta method)": [[32, "arkouda.Timedelta.is_registered"], [32, "id516"]], "is_registered() (arkouda.pdarray method)": [[32, "arkouda.pdarray.is_registered"], [32, "id590"], [32, "id650"], [32, "id710"], [32, "id770"]], "is_registered() (in module arkouda)": [[32, "arkouda.is_registered"]], "is_sorted() (arkouda.pdarray method)": [[32, "arkouda.pdarray.is_sorted"], [32, "id591"], [32, "id651"], [32, "id711"], [32, "id771"], [93, "arkouda.pdarray.is_sorted"]], "is_sorted() (in module arkouda)": [[32, "arkouda.is_sorted"], [32, "id557"], [87, "arkouda.is_sorted"]], "is_unique (arkouda.index property)": [[32, "arkouda.Index.is_unique"]], "isalnum() (arkouda.strings method)": [[32, "arkouda.Strings.isalnum"], [32, "id330"], [32, "id398"], [32, "id466"]], "isalpha() (arkouda.strings method)": [[32, "arkouda.Strings.isalpha"], [32, "id331"], [32, "id399"], [32, "id467"]], "isdigit() (arkouda.strings method)": [[32, "arkouda.Strings.isdigit"], [32, "id332"], [32, "id400"], [32, "id468"]], "isempty() (arkouda.strings method)": [[32, "arkouda.Strings.isempty"], [32, "id333"], [32, "id401"], [32, "id469"]], "isfinite() (in module arkouda)": [[32, "arkouda.isfinite"]], "isin() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.isin"], [32, "id26"]], "isin() (arkouda.series method)": [[32, "arkouda.Series.isin"]], "isinf() (in module arkouda)": [[32, "arkouda.isinf"]], "islower() (arkouda.strings method)": [[32, "arkouda.Strings.islower"], [32, "id334"], [32, "id402"], [32, "id470"]], "isnan() (in module arkouda)": [[32, "arkouda.isnan"], [32, "id558"]], "isocalendar() (arkouda.datetime method)": [[32, "arkouda.Datetime.isocalendar"], [32, "id109"], [32, "id76"]], "isspace() (arkouda.strings method)": [[32, "arkouda.Strings.isspace"], [32, "id335"], [32, "id403"], [32, "id471"]], "istitle() (arkouda.strings method)": [[32, "arkouda.Strings.istitle"], [32, "id336"], [32, "id404"], [32, "id472"]], "isupper() (arkouda.strings method)": [[32, "arkouda.Strings.isupper"], [32, "id337"], [32, "id405"], [32, "id473"]], "itemsize (arkouda.arrayview attribute)": [[32, "arkouda.ArrayView.itemsize"], [88, "arkouda.ArrayView.itemsize"]], "itemsize (arkouda.pdarray attribute)": [[32, "arkouda.pdarray.itemsize"], [32, "id569"], [32, "id629"], [32, "id689"], [32, "id749"], [95, "arkouda.pdarray.itemsize"]], "linspace() (in module arkouda)": [[32, "arkouda.linspace"], [90, "arkouda.linspace"]], "list_registry() (in module arkouda)": [[32, "arkouda.list_registry"]], "list_symbol_table() (in module arkouda)": [[32, "arkouda.list_symbol_table"]], "load() (arkouda.dataframe class method)": [[32, "arkouda.DataFrame.load"], [32, "id27"]], "load() (arkouda.segarray class method)": [[32, "arkouda.SegArray.load"]], "load() (in module arkouda)": [[32, "arkouda.load"]], "load_all() (in module arkouda)": [[32, "arkouda.load_all"]], "loc (arkouda.series property)": [[32, "arkouda.Series.loc"]], "locate() (arkouda.series method)": [[32, "arkouda.Series.locate"]], "log() (in module arkouda)": [[32, "arkouda.log"], [87, "arkouda.log"]], "log10() (in module arkouda)": [[32, "arkouda.log10"]], "log1p() (in module arkouda)": [[32, "arkouda.log1p"]], "log2() (in module arkouda)": [[32, "arkouda.log2"]], "logger (arkouda.groupby attribute)": [[32, "arkouda.GroupBy.logger"], [32, "id122"], [32, "id166"], [32, "id210"], [32, "id254"], [92, "arkouda.GroupBy.logger"]], "logger (arkouda.strings attribute)": [[32, "arkouda.Strings.logger"], [32, "id304"], [32, "id372"], [32, "id440"]], "lookup() (arkouda.index method)": [[32, "arkouda.Index.lookup"]], "lookup() (arkouda.multiindex method)": [[32, "arkouda.MultiIndex.lookup"]], "lower() (arkouda.strings method)": [[32, "arkouda.Strings.lower"], [32, "id338"], [32, "id406"], [32, "id474"]], "ls() (in module arkouda)": [[32, "arkouda.ls"]], "ls_csv() (in module arkouda)": [[32, "arkouda.ls_csv"]], "lstick() (arkouda.strings method)": [[32, "arkouda.Strings.lstick"], [32, "id339"], [32, "id407"], [32, "id475"], [100, "arkouda.Strings.lstick"]], "match() (arkouda.strings method)": [[32, "arkouda.Strings.match"], [32, "id340"], [32, "id408"], [32, "id476"], [100, "arkouda.Strings.match"]], "max() (arkouda.groupby method)": [[32, "arkouda.GroupBy.max"], [32, "id141"], [32, "id185"], [32, "id229"], [32, "id273"], [92, "arkouda.GroupBy.max"]], "max() (arkouda.segarray method)": [[32, "arkouda.SegArray.max"]], "max() (arkouda.pdarray method)": [[32, "arkouda.pdarray.max"], [32, "id592"], [32, "id652"], [32, "id712"], [32, "id772"], [93, "arkouda.pdarray.max"]], "max() (in module arkouda)": [[32, "arkouda.max"], [87, "arkouda.max"]], "max_bits (arkouda.pdarray property)": [[32, "arkouda.pdarray.max_bits"], [32, "id570"], [32, "id630"], [32, "id690"], [32, "id750"]], "maxk() (arkouda.pdarray method)": [[32, "arkouda.pdarray.maxk"], [32, "id593"], [32, "id653"], [32, "id713"], [32, "id773"], [93, "arkouda.pdarray.maxk"]], "maxk() (in module arkouda)": [[32, "arkouda.maxk"], [87, "arkouda.maxk"]], "mean() (arkouda.groupby method)": [[32, "arkouda.GroupBy.mean"], [32, "id142"], [32, "id186"], [32, "id230"], [32, "id274"], [92, "arkouda.GroupBy.mean"]], "mean() (arkouda.segarray method)": [[32, "arkouda.SegArray.mean"]], "mean() (arkouda.pdarray method)": [[32, "arkouda.pdarray.mean"], [32, "id594"], [32, "id654"], [32, "id714"], [32, "id774"], [93, "arkouda.pdarray.mean"]], "mean() (in module arkouda)": [[32, "arkouda.mean"], [87, "arkouda.mean"]], "median() (arkouda.groupby method)": [[32, "arkouda.GroupBy.median"], [32, "id143"], [32, "id187"], [32, "id231"], [32, "id275"], [92, "arkouda.GroupBy.median"]], "memory_usage() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.memory_usage"], [32, "id28"]], "merge() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.merge"], [32, "id29"]], "merge() (in module arkouda)": [[32, "arkouda.merge"]], "microsecond (arkouda.datetime property)": [[32, "arkouda.Datetime.microsecond"], [32, "id57"], [32, "id90"]], "microseconds (arkouda.timedelta property)": [[32, "arkouda.Timedelta.microseconds"], [32, "id504"]], "millisecond (arkouda.datetime property)": [[32, "arkouda.Datetime.millisecond"], [32, "id58"], [32, "id91"]], "min() (arkouda.groupby method)": [[32, "arkouda.GroupBy.min"], [32, "id144"], [32, "id188"], [32, "id232"], [32, "id276"], [92, "arkouda.GroupBy.min"]], "min() (arkouda.segarray method)": [[32, "arkouda.SegArray.min"]], "min() (arkouda.pdarray method)": [[32, "arkouda.pdarray.min"], [32, "id595"], [32, "id655"], [32, "id715"], [32, "id775"], [93, "arkouda.pdarray.min"]], "min() (in module arkouda)": [[32, "arkouda.min"], [87, "arkouda.min"]], "mink() (arkouda.pdarray method)": [[32, "arkouda.pdarray.mink"], [32, "id596"], [32, "id656"], [32, "id716"], [32, "id776"], [93, "arkouda.pdarray.mink"]], "mink() (in module arkouda)": [[32, "arkouda.mink"], [87, "arkouda.mink"]], "minute (arkouda.datetime property)": [[32, "arkouda.Datetime.minute"], [32, "id59"], [32, "id92"]], "mod() (in module arkouda)": [[32, "arkouda.mod"]], "mode() (arkouda.groupby method)": [[32, "arkouda.GroupBy.mode"], [32, "id145"], [32, "id189"], [32, "id233"], [32, "id277"], [92, "arkouda.GroupBy.mode"]], "month (arkouda.datetime property)": [[32, "arkouda.Datetime.month"], [32, "id60"], [32, "id93"]], "most_common() (arkouda.groupby method)": [[32, "arkouda.GroupBy.most_common"], [32, "id146"], [32, "id190"], [32, "id234"], [32, "id278"], [92, "arkouda.GroupBy.most_common"]], "name (arkouda.pdarray attribute)": [[32, "arkouda.pdarray.name"], [32, "id564"], [32, "id624"], [32, "id684"], [32, "id744"], [95, "arkouda.pdarray.name"]], "nanosecond (arkouda.datetime property)": [[32, "arkouda.Datetime.nanosecond"], [32, "id61"], [32, "id94"]], "nanoseconds (arkouda.timedelta property)": [[32, "arkouda.Timedelta.nanoseconds"], [32, "id505"]], "nbytes (arkouda.strings attribute)": [[32, "arkouda.Strings.nbytes"], [32, "id300"], [32, "id368"], [32, "id436"]], "ndim (arkouda.arrayview attribute)": [[32, "arkouda.ArrayView.ndim"], [88, "arkouda.ArrayView.ndim"]], "ndim (arkouda.strings attribute)": [[32, "arkouda.Strings.ndim"], [32, "id301"], [32, "id369"], [32, "id437"]], "ndim (arkouda.pdarray attribute)": [[32, "arkouda.pdarray.ndim"], [32, "id567"], [32, "id627"], [32, "id687"], [32, "id747"], [95, "arkouda.pdarray.ndim"]], "ngroups (arkouda.groupby attribute)": [[32, "arkouda.GroupBy.ngroups"], [32, "id120"], [32, "id164"], [32, "id208"], [32, "id252"], [92, "arkouda.GroupBy.ngroups"]], "nkeys (arkouda.groupby attribute)": [[32, "arkouda.GroupBy.nkeys"], [32, "id116"], [32, "id160"], [32, "id204"], [32, "id248"], [92, "arkouda.GroupBy.nkeys"]], "non_empty (arkouda.segarray property)": [[32, "arkouda.SegArray.non_empty"]], "normalize() (arkouda.ipv4 method)": [[32, "arkouda.IPv4.normalize"]], "numeric_scalars (in module arkouda)": [[32, "arkouda.numeric_scalars"]], "numpy_scalars (in module arkouda)": [[32, "arkouda.numpy_scalars"]], "nunique() (arkouda.groupby method)": [[32, "arkouda.GroupBy.nunique"], [32, "id147"], [32, "id191"], [32, "id235"], [32, "id279"], [92, "arkouda.GroupBy.nunique"]], "nunique() (arkouda.segarray method)": [[32, "arkouda.SegArray.nunique"]], "objtype (arkouda.arrayview attribute)": [[32, "arkouda.ArrayView.objType"]], "objtype (arkouda.dataframe attribute)": [[32, "arkouda.DataFrame.objType"], [32, "id8"]], "objtype (arkouda.groupby attribute)": [[32, "arkouda.GroupBy.objType"], [32, "id125"], [32, "id169"], [32, "id213"], [32, "id257"]], "objtype (arkouda.index attribute)": [[32, "arkouda.Index.objType"]], "objtype (arkouda.multiindex attribute)": [[32, "arkouda.MultiIndex.objType"]], "objtype (arkouda.segarray attribute)": [[32, "arkouda.SegArray.objType"]], "objtype (arkouda.series attribute)": [[32, "arkouda.Series.objType"]], "objtype (arkouda.strings attribute)": [[32, "arkouda.Strings.objType"], [32, "id306"], [32, "id374"], [32, "id442"]], "objtype (arkouda.pdarray attribute)": [[32, "arkouda.pdarray.objType"], [32, "id573"], [32, "id633"], [32, "id693"], [32, "id753"]], "ones() (in module arkouda)": [[32, "arkouda.ones"], [32, "id559"], [32, "id560"], [90, "arkouda.ones"]], "ones_like() (in module arkouda)": [[32, "arkouda.ones_like"], [90, "arkouda.ones_like"]], "opeq() (arkouda.bitvector method)": [[32, "arkouda.BitVector.opeq"]], "opeq() (arkouda.fields method)": [[32, "arkouda.Fields.opeq"]], "opeq() (arkouda.ipv4 method)": [[32, "arkouda.IPv4.opeq"]], "opeq() (arkouda.pdarray method)": [[32, "arkouda.pdarray.opeq"], [32, "id597"], [32, "id657"], [32, "id717"], [32, "id777"]], "order (arkouda.arrayview attribute)": [[32, "arkouda.ArrayView.order"], [88, "arkouda.ArrayView.order"]], "parity() (arkouda.pdarray method)": [[32, "arkouda.pdarray.parity"], [32, "id598"], [32, "id658"], [32, "id718"], [32, "id778"]], "parity() (in module arkouda)": [[32, "arkouda.parity"]], "pdarray (class in arkouda)": [[32, "arkouda.pdarray"], [32, "id563"], [32, "id623"], [32, "id683"], [32, "id743"], [95, "arkouda.pdarray"]], "pdconcat() (arkouda.series static method)": [[32, "arkouda.Series.pdconcat"]], "peel() (arkouda.strings method)": [[32, "arkouda.Strings.peel"], [32, "id341"], [32, "id409"], [32, "id477"], [100, "arkouda.Strings.peel"]], "permutation (arkouda.groupby attribute)": [[32, "arkouda.GroupBy.permutation"], [32, "id118"], [32, "id162"], [32, "id206"], [32, "id250"], [92, "arkouda.GroupBy.permutation"]], "plot_dist() (in module arkouda)": [[32, "arkouda.plot_dist"]], "popcount() (arkouda.pdarray method)": [[32, "arkouda.pdarray.popcount"], [32, "id599"], [32, "id659"], [32, "id719"], [32, "id779"]], "popcount() (in module arkouda)": [[32, "arkouda.popcount"]], "power() (in module arkouda)": [[32, "arkouda.power"]], "power_divergence() (in module arkouda)": [[32, "arkouda.power_divergence"]], "prepend_single() (arkouda.segarray method)": [[32, "arkouda.SegArray.prepend_single"]], "pretty_print_info() (arkouda.strings method)": [[32, "arkouda.Strings.pretty_print_info"], [32, "id342"], [32, "id410"], [32, "id478"]], "pretty_print_info() (arkouda.pdarray method)": [[32, "arkouda.pdarray.pretty_print_info"], [32, "id600"], [32, "id660"], [32, "id720"], [32, "id780"]], "pretty_print_information() (in module arkouda)": [[32, "arkouda.pretty_print_information"]], "prod() (arkouda.groupby method)": [[32, "arkouda.GroupBy.prod"], [32, "id148"], [32, "id192"], [32, "id236"], [32, "id280"], [92, "arkouda.GroupBy.prod"]], "prod() (arkouda.segarray method)": [[32, "arkouda.SegArray.prod"]], "prod() (arkouda.pdarray method)": [[32, "arkouda.pdarray.prod"], [32, "id601"], [32, "id661"], [32, "id721"], [32, "id781"], [93, "arkouda.pdarray.prod"]], "prod() (in module arkouda)": [[32, "arkouda.prod"], [87, "arkouda.prod"]], "purge_cached_regex_patterns() (arkouda.strings method)": [[32, "arkouda.Strings.purge_cached_regex_patterns"], [32, "id343"], [32, "id411"], [32, "id479"]], "pvalue (arkouda.power_divergenceresult attribute)": [[32, "arkouda.Power_divergenceResult.pvalue"]], "rad2deg() (in module arkouda)": [[32, "arkouda.rad2deg"]], "randint() (in module arkouda)": [[32, "arkouda.randint"], [32, "id803"], [90, "arkouda.randint"]], "random() (arkouda.generator method)": [[32, "arkouda.Generator.random"]], "random_strings_lognormal() (in module arkouda)": [[32, "arkouda.random_strings_lognormal"]], "random_strings_uniform() (in module arkouda)": [[32, "arkouda.random_strings_uniform"]], "read() (in module arkouda)": [[32, "arkouda.read"], [84, "arkouda.read"]], "read_csv() (arkouda.dataframe class method)": [[32, "arkouda.DataFrame.read_csv"], [32, "id30"]], "read_csv() (in module arkouda)": [[32, "arkouda.read_csv"]], "read_hdf() (arkouda.segarray class method)": [[32, "arkouda.SegArray.read_hdf"]], "read_hdf() (in module arkouda)": [[32, "arkouda.read_hdf"]], "read_parquet() (in module arkouda)": [[32, "arkouda.read_parquet"]], "read_tagged_data() (in module arkouda)": [[32, "arkouda.read_tagged_data"]], "receive() (in module arkouda)": [[32, "arkouda.receive"]], "receive_dataframe() (in module arkouda)": [[32, "arkouda.receive_dataframe"]], "register() (arkouda.bitvector method)": [[32, "arkouda.BitVector.register"]], "register() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.register"], [32, "id31"]], "register() (arkouda.datetime method)": [[32, "arkouda.Datetime.register"], [32, "id110"], [32, "id77"]], "register() (arkouda.groupby method)": [[32, "arkouda.GroupBy.register"], [32, "id149"], [32, "id193"], [32, "id237"], [32, "id281"], [92, "arkouda.GroupBy.register"]], "register() (arkouda.ipv4 method)": [[32, "arkouda.IPv4.register"]], "register() (arkouda.index method)": [[32, "arkouda.Index.register"]], "register() (arkouda.multiindex method)": [[32, "arkouda.MultiIndex.register"]], "register() (arkouda.segarray method)": [[32, "arkouda.SegArray.register"]], "register() (arkouda.series method)": [[32, "arkouda.Series.register"]], "register() (arkouda.strings method)": [[32, "arkouda.Strings.register"], [32, "id344"], [32, "id412"], [32, "id480"]], "register() (arkouda.timedelta method)": [[32, "arkouda.Timedelta.register"], [32, "id517"]], "register() (arkouda.pdarray method)": [[32, "arkouda.pdarray.register"], [32, "id602"], [32, "id662"], [32, "id722"], [32, "id782"]], "register_all() (in module arkouda)": [[32, "arkouda.register_all"]], "remove_repeats() (arkouda.segarray method)": [[32, "arkouda.SegArray.remove_repeats"]], "rename() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.rename"], [32, "id32"]], "reset_index() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.reset_index"], [32, "id33"]], "reshape() (arkouda.pdarray method)": [[32, "arkouda.pdarray.reshape"], [32, "id603"], [32, "id663"], [32, "id723"], [32, "id783"]], "resolve_scalar_dtype() (in module arkouda)": [[32, "arkouda.resolve_scalar_dtype"]], "restore() (in module arkouda)": [[32, "arkouda.restore"]], "return_validity (arkouda.errormode attribute)": [[32, "arkouda.ErrorMode.return_validity"]], "rotl() (arkouda.pdarray method)": [[32, "arkouda.pdarray.rotl"], [32, "id604"], [32, "id664"], [32, "id724"], [32, "id784"]], "rotl() (in module arkouda)": [[32, "arkouda.rotl"]], "rotr() (arkouda.pdarray method)": [[32, "arkouda.pdarray.rotr"], [32, "id605"], [32, "id665"], [32, "id725"], [32, "id785"]], "rotr() (in module arkouda)": [[32, "arkouda.rotr"]], "round() (in module arkouda)": [[32, "arkouda.round"]], "rpeel() (arkouda.strings method)": [[32, "arkouda.Strings.rpeel"], [32, "id345"], [32, "id413"], [32, "id481"], [100, "arkouda.Strings.rpeel"]], "sample() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.sample"], [32, "id34"]], "save() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.save"], [32, "id35"]], "save() (arkouda.index method)": [[32, "arkouda.Index.save"]], "save() (arkouda.segarray method)": [[32, "arkouda.SegArray.save"]], "save() (arkouda.strings method)": [[32, "arkouda.Strings.save"], [32, "id346"], [32, "id414"], [32, "id482"]], "save() (arkouda.pdarray method)": [[32, "arkouda.pdarray.save"], [32, "id606"], [32, "id666"], [32, "id726"], [32, "id786"]], "save_all() (in module arkouda)": [[32, "arkouda.save_all"]], "search() (arkouda.strings method)": [[32, "arkouda.Strings.search"], [32, "id347"], [32, "id415"], [32, "id483"], [100, "arkouda.Strings.search"]], "second (arkouda.datetime property)": [[32, "arkouda.Datetime.second"], [32, "id62"], [32, "id95"]], "seconds (arkouda.timedelta property)": [[32, "arkouda.Timedelta.seconds"], [32, "id506"]], "segarray() (in module arkouda)": [[32, "arkouda.segarray"]], "segments (arkouda.groupby attribute)": [[32, "arkouda.GroupBy.segments"], [32, "id121"], [32, "id165"], [32, "id209"], [32, "id253"], [92, "arkouda.GroupBy.segments"]], "set_dtype() (arkouda.index method)": [[32, "arkouda.Index.set_dtype"]], "set_dtype() (arkouda.multiindex method)": [[32, "arkouda.MultiIndex.set_dtype"]], "set_jth() (arkouda.segarray method)": [[32, "arkouda.SegArray.set_jth"]], "setdiff() (arkouda.segarray method)": [[32, "arkouda.SegArray.setdiff"]], "setdiff1d() (in module arkouda)": [[32, "arkouda.setdiff1d"], [98, "arkouda.setdiff1d"]], "setxor() (arkouda.segarray method)": [[32, "arkouda.SegArray.setxor"]], "setxor1d() (in module arkouda)": [[32, "arkouda.setxor1d"], [98, "arkouda.setxor1d"]], "shape (arkouda.arrayview attribute)": [[32, "arkouda.ArrayView.shape"], [88, "arkouda.ArrayView.shape"]], "shape (arkouda.dataframe property)": [[32, "arkouda.DataFrame.shape"], [32, "id6"]], "shape (arkouda.index property)": [[32, "arkouda.Index.shape"]], "shape (arkouda.series property)": [[32, "arkouda.Series.shape"]], "shape (arkouda.strings attribute)": [[32, "arkouda.Strings.shape"], [32, "id302"], [32, "id370"], [32, "id438"]], "shape (arkouda.pdarray attribute)": [[32, "arkouda.pdarray.shape"], [32, "id568"], [32, "id628"], [32, "id688"], [32, "id748"], [95, "arkouda.pdarray.shape"]], "sign() (in module arkouda)": [[32, "arkouda.sign"]], "sin() (in module arkouda)": [[32, "arkouda.sin"], [87, "arkouda.sin"]], "sinh() (in module arkouda)": [[32, "arkouda.sinh"]], "size (arkouda.arrayview attribute)": [[32, "arkouda.ArrayView.size"], [88, "arkouda.ArrayView.size"]], "size (arkouda.dataframe property)": [[32, "arkouda.DataFrame.size"], [32, "id7"]], "size (arkouda.groupby attribute)": [[32, "arkouda.GroupBy.size"], [32, "id117"], [32, "id161"], [32, "id205"], [32, "id249"], [92, "arkouda.GroupBy.size"]], "size (arkouda.strings attribute)": [[32, "arkouda.Strings.size"], [32, "id299"], [32, "id367"], [32, "id435"]], "size (arkouda.pdarray attribute)": [[32, "arkouda.pdarray.size"], [32, "id566"], [32, "id626"], [32, "id686"], [32, "id746"], [95, "arkouda.pdarray.size"]], "size() (arkouda.groupby method)": [[32, "id114"], [32, "id150"], [32, "id194"], [32, "id238"], [32, "id282"], [92, "id0"]], "skew() (in module arkouda)": [[32, "arkouda.skew"]], "slice_bits() (arkouda.pdarray method)": [[32, "arkouda.pdarray.slice_bits"], [32, "id607"], [32, "id667"], [32, "id727"], [32, "id787"]], "snapshot() (in module arkouda)": [[32, "arkouda.snapshot"]], "sort() (in module arkouda)": [[32, "arkouda.sort"]], "sort_index() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.sort_index"], [32, "id36"]], "sort_index() (arkouda.series method)": [[32, "arkouda.Series.sort_index"]], "sort_values() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.sort_values"], [32, "id37"]], "sort_values() (arkouda.series method)": [[32, "arkouda.Series.sort_values"]], "special_objtype (arkouda.bitvector attribute)": [[32, "arkouda.BitVector.special_objType"]], "special_objtype (arkouda.datetime attribute)": [[32, "arkouda.Datetime.special_objType"], [32, "id100"], [32, "id67"]], "special_objtype (arkouda.ipv4 attribute)": [[32, "arkouda.IPv4.special_objType"]], "special_objtype (arkouda.timedelta attribute)": [[32, "arkouda.Timedelta.special_objType"], [32, "id507"]], "split() (arkouda.strings method)": [[32, "arkouda.Strings.split"], [32, "id348"], [32, "id416"], [32, "id484"], [100, "arkouda.Strings.split"]], "sqrt() (in module arkouda)": [[32, "arkouda.sqrt"]], "square() (in module arkouda)": [[32, "arkouda.square"]], "standard_normal() (arkouda.generator method)": [[32, "arkouda.Generator.standard_normal"]], "standard_normal() (in module arkouda)": [[32, "arkouda.standard_normal"], [32, "id804"]], "startswith() (arkouda.strings method)": [[32, "arkouda.Strings.startswith"], [32, "id349"], [32, "id417"], [32, "id485"], [100, "arkouda.Strings.startswith"]], "statistic (arkouda.power_divergenceresult attribute)": [[32, "arkouda.Power_divergenceResult.statistic"]], "std() (arkouda.groupby method)": [[32, "arkouda.GroupBy.std"], [32, "id151"], [32, "id195"], [32, "id239"], [32, "id283"], [92, "arkouda.GroupBy.std"]], "std() (arkouda.timedelta method)": [[32, "arkouda.Timedelta.std"], [32, "id518"]], "std() (arkouda.pdarray method)": [[32, "arkouda.pdarray.std"], [32, "id608"], [32, "id668"], [32, "id728"], [32, "id788"], [93, "arkouda.pdarray.std"]], "std() (in module arkouda)": [[32, "arkouda.std"], [87, "arkouda.std"]], "stick() (arkouda.strings method)": [[32, "arkouda.Strings.stick"], [32, "id350"], [32, "id418"], [32, "id486"], [100, "arkouda.Strings.stick"]], "str_ (in module arkouda)": [[32, "arkouda.str_"], [32, "id805"]], "str_acc (arkouda.series attribute)": [[32, "arkouda.Series.str_acc"]], "str_scalars (in module arkouda)": [[32, "arkouda.str_scalars"]], "strict (arkouda.errormode attribute)": [[32, "arkouda.ErrorMode.strict"]], "string_operators() (in module arkouda)": [[32, "arkouda.string_operators"]], "strip() (arkouda.strings method)": [[32, "arkouda.Strings.strip"], [32, "id351"], [32, "id419"], [32, "id487"]], "sub() (arkouda.strings method)": [[32, "arkouda.Strings.sub"], [32, "id352"], [32, "id420"], [32, "id488"], [100, "arkouda.Strings.sub"]], "subn() (arkouda.strings method)": [[32, "arkouda.Strings.subn"], [32, "id353"], [32, "id421"], [32, "id489"], [100, "arkouda.Strings.subn"]], "sum() (arkouda.datetime method)": [[32, "arkouda.Datetime.sum"], [32, "id111"], [32, "id78"]], "sum() (arkouda.groupby method)": [[32, "arkouda.GroupBy.sum"], [32, "id152"], [32, "id196"], [32, "id240"], [32, "id284"], [92, "arkouda.GroupBy.sum"]], "sum() (arkouda.segarray method)": [[32, "arkouda.SegArray.sum"]], "sum() (arkouda.timedelta method)": [[32, "arkouda.Timedelta.sum"], [32, "id519"]], "sum() (arkouda.pdarray method)": [[32, "arkouda.pdarray.sum"], [32, "id609"], [32, "id669"], [32, "id729"], [32, "id789"], [93, "arkouda.pdarray.sum"]], "sum() (in module arkouda)": [[32, "arkouda.sum"], [87, "arkouda.sum"]], "supported_opeq (arkouda.datetime attribute)": [[32, "arkouda.Datetime.supported_opeq"], [32, "id101"], [32, "id68"]], "supported_opeq (arkouda.timedelta attribute)": [[32, "arkouda.Timedelta.supported_opeq"], [32, "id508"]], "supported_with_datetime (arkouda.datetime attribute)": [[32, "arkouda.Datetime.supported_with_datetime"], [32, "id102"], [32, "id69"]], "supported_with_datetime (arkouda.timedelta attribute)": [[32, "arkouda.Timedelta.supported_with_datetime"], [32, "id509"]], "supported_with_pdarray (arkouda.datetime attribute)": [[32, "arkouda.Datetime.supported_with_pdarray"], [32, "id103"], [32, "id70"]], "supported_with_pdarray (arkouda.timedelta attribute)": [[32, "arkouda.Timedelta.supported_with_pdarray"], [32, "id510"]], "supported_with_r_datetime (arkouda.datetime attribute)": [[32, "arkouda.Datetime.supported_with_r_datetime"], [32, "id104"], [32, "id71"]], "supported_with_r_datetime (arkouda.timedelta attribute)": [[32, "arkouda.Timedelta.supported_with_r_datetime"], [32, "id511"]], "supported_with_r_pdarray (arkouda.datetime attribute)": [[32, "arkouda.Datetime.supported_with_r_pdarray"], [32, "id105"], [32, "id72"]], "supported_with_r_pdarray (arkouda.timedelta attribute)": [[32, "arkouda.Timedelta.supported_with_r_pdarray"], [32, "id512"]], "supported_with_r_timedelta (arkouda.datetime attribute)": [[32, "arkouda.Datetime.supported_with_r_timedelta"], [32, "id106"], [32, "id73"]], "supported_with_r_timedelta (arkouda.timedelta attribute)": [[32, "arkouda.Timedelta.supported_with_r_timedelta"], [32, "id513"]], "supported_with_timedelta (arkouda.datetime attribute)": [[32, "arkouda.Datetime.supported_with_timedelta"], [32, "id107"], [32, "id74"]], "supported_with_timedelta (arkouda.timedelta attribute)": [[32, "arkouda.Timedelta.supported_with_timedelta"], [32, "id514"]], "tail() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.tail"], [32, "id38"]], "tail() (arkouda.series method)": [[32, "arkouda.Series.tail"]], "tan() (in module arkouda)": [[32, "arkouda.tan"]], "tanh() (in module arkouda)": [[32, "arkouda.tanh"]], "timedelta_range() (in module arkouda)": [[32, "arkouda.timedelta_range"], [32, "id806"]], "title() (arkouda.strings method)": [[32, "arkouda.Strings.title"], [32, "id354"], [32, "id422"], [32, "id490"]], "to_csv() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.to_csv"], [32, "id39"]], "to_csv() (arkouda.index method)": [[32, "arkouda.Index.to_csv"]], "to_csv() (arkouda.strings method)": [[32, "arkouda.Strings.to_csv"], [32, "id355"], [32, "id423"], [32, "id491"]], "to_csv() (arkouda.pdarray method)": [[32, "arkouda.pdarray.to_csv"], [32, "id610"], [32, "id670"], [32, "id730"], [32, "id790"]], "to_csv() (in module arkouda)": [[32, "arkouda.to_csv"]], "to_cuda() (arkouda.pdarray method)": [[32, "arkouda.pdarray.to_cuda"], [32, "id613"], [32, "id673"], [32, "id733"], [32, "id793"]], "to_dataframe() (arkouda.series method)": [[32, "arkouda.Series.to_dataframe"]], "to_dict() (arkouda.index method)": [[32, "arkouda.Index.to_dict"]], "to_dict() (arkouda.multiindex method)": [[32, "arkouda.MultiIndex.to_dict"]], "to_hdf() (arkouda.arrayview method)": [[32, "arkouda.ArrayView.to_hdf"]], "to_hdf() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.to_hdf"], [32, "id40"]], "to_hdf() (arkouda.groupby method)": [[32, "arkouda.GroupBy.to_hdf"], [32, "id153"], [32, "id197"], [32, "id241"], [32, "id285"], [92, "arkouda.GroupBy.to_hdf"]], "to_hdf() (arkouda.ipv4 method)": [[32, "arkouda.IPv4.to_hdf"]], "to_hdf() (arkouda.index method)": [[32, "arkouda.Index.to_hdf"]], "to_hdf() (arkouda.multiindex method)": [[32, "arkouda.MultiIndex.to_hdf"]], "to_hdf() (arkouda.segarray method)": [[32, "arkouda.SegArray.to_hdf"]], "to_hdf() (arkouda.strings method)": [[32, "arkouda.Strings.to_hdf"], [32, "id356"], [32, "id424"], [32, "id492"]], "to_hdf() (arkouda.pdarray method)": [[32, "arkouda.pdarray.to_hdf"], [32, "id614"], [32, "id674"], [32, "id734"], [32, "id794"]], "to_hdf() (in module arkouda)": [[32, "arkouda.to_hdf"]], "to_list() (arkouda.arrayview method)": [[32, "arkouda.ArrayView.to_list"]], "to_list() (arkouda.bitvector method)": [[32, "arkouda.BitVector.to_list"]], "to_list() (arkouda.ipv4 method)": [[32, "arkouda.IPv4.to_list"]], "to_list() (arkouda.index method)": [[32, "arkouda.Index.to_list"]], "to_list() (arkouda.multiindex method)": [[32, "arkouda.MultiIndex.to_list"]], "to_list() (arkouda.segarray method)": [[32, "arkouda.SegArray.to_list"]], "to_list() (arkouda.series method)": [[32, "arkouda.Series.to_list"]], "to_list() (arkouda.strings method)": [[32, "arkouda.Strings.to_list"], [32, "id357"], [32, "id425"], [32, "id493"]], "to_list() (arkouda.pdarray method)": [[32, "arkouda.pdarray.to_list"], [32, "id615"], [32, "id675"], [32, "id735"], [32, "id795"]], "to_ndarray() (arkouda.arrayview method)": [[32, "arkouda.ArrayView.to_ndarray"]], "to_ndarray() (arkouda.bitvector method)": [[32, "arkouda.BitVector.to_ndarray"]], "to_ndarray() (arkouda.ipv4 method)": [[32, "arkouda.IPv4.to_ndarray"]], "to_ndarray() (arkouda.index method)": [[32, "arkouda.Index.to_ndarray"]], "to_ndarray() (arkouda.multiindex method)": [[32, "arkouda.MultiIndex.to_ndarray"]], "to_ndarray() (arkouda.segarray method)": [[32, "arkouda.SegArray.to_ndarray"]], "to_ndarray() (arkouda.strings method)": [[32, "arkouda.Strings.to_ndarray"], [32, "id358"], [32, "id426"], [32, "id494"]], "to_ndarray() (arkouda.pdarray method)": [[32, "arkouda.pdarray.to_ndarray"], [32, "id616"], [32, "id676"], [32, "id736"], [32, "id796"]], "to_pandas() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.to_pandas"], [32, "id41"]], "to_pandas() (arkouda.datetime method)": [[32, "arkouda.Datetime.to_pandas"], [32, "id112"], [32, "id79"]], "to_pandas() (arkouda.index method)": [[32, "arkouda.Index.to_pandas"]], "to_pandas() (arkouda.multiindex method)": [[32, "arkouda.MultiIndex.to_pandas"]], "to_pandas() (arkouda.series method)": [[32, "arkouda.Series.to_pandas"]], "to_pandas() (arkouda.timedelta method)": [[32, "arkouda.Timedelta.to_pandas"], [32, "id520"]], "to_parquet() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.to_parquet"], [32, "id42"]], "to_parquet() (arkouda.index method)": [[32, "arkouda.Index.to_parquet"]], "to_parquet() (arkouda.segarray method)": [[32, "arkouda.SegArray.to_parquet"]], "to_parquet() (arkouda.strings method)": [[32, "arkouda.Strings.to_parquet"], [32, "id359"], [32, "id427"], [32, "id495"]], "to_parquet() (arkouda.pdarray method)": [[32, "arkouda.pdarray.to_parquet"], [32, "id617"], [32, "id677"], [32, "id737"], [32, "id797"]], "to_parquet() (in module arkouda)": [[32, "arkouda.to_parquet"]], "topn() (arkouda.series method)": [[32, "arkouda.Series.topn"]], "total_seconds() (arkouda.timedelta method)": [[32, "arkouda.Timedelta.total_seconds"], [32, "id521"]], "transfer() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.transfer"], [32, "id43"]], "transfer() (arkouda.segarray method)": [[32, "arkouda.SegArray.transfer"]], "transfer() (arkouda.strings method)": [[32, "arkouda.Strings.transfer"], [32, "id360"], [32, "id428"], [32, "id496"]], "transfer() (arkouda.pdarray method)": [[32, "arkouda.pdarray.transfer"], [32, "id618"], [32, "id678"], [32, "id738"], [32, "id798"]], "translate_np_dtype() (in module arkouda)": [[32, "arkouda.translate_np_dtype"]], "trunc() (in module arkouda)": [[32, "arkouda.trunc"]], "uint16 (in module arkouda)": [[32, "arkouda.uint16"]], "uint32 (in module arkouda)": [[32, "arkouda.uint32"]], "uint64 (in module arkouda)": [[32, "arkouda.uint64"]], "uint8 (in module arkouda)": [[32, "arkouda.uint8"]], "uniform() (arkouda.generator method)": [[32, "arkouda.Generator.uniform"]], "uniform() (in module arkouda)": [[32, "arkouda.uniform"], [32, "id807"]], "union() (arkouda.segarray method)": [[32, "arkouda.SegArray.union"]], "union1d() (in module arkouda)": [[32, "arkouda.union1d"], [98, "arkouda.union1d"]], "unique() (arkouda.groupby method)": [[32, "arkouda.GroupBy.unique"], [32, "id154"], [32, "id198"], [32, "id242"], [32, "id286"], [92, "arkouda.GroupBy.unique"]], "unique() (arkouda.segarray method)": [[32, "arkouda.SegArray.unique"]], "unique() (in module arkouda)": [[32, "arkouda.unique"], [32, "id808"], [98, "arkouda.unique"]], "unique_keys (arkouda.groupby attribute)": [[32, "arkouda.GroupBy.unique_keys"], [32, "id119"], [32, "id163"], [32, "id207"], [32, "id251"], [92, "arkouda.GroupBy.unique_keys"]], "unregister() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.unregister"], [32, "id44"]], "unregister() (arkouda.datetime method)": [[32, "arkouda.Datetime.unregister"], [32, "id113"], [32, "id80"]], "unregister() (arkouda.groupby method)": [[32, "arkouda.GroupBy.unregister"], [32, "id155"], [32, "id199"], [32, "id243"], [32, "id287"], [92, "arkouda.GroupBy.unregister"]], "unregister() (arkouda.index method)": [[32, "arkouda.Index.unregister"]], "unregister() (arkouda.multiindex method)": [[32, "arkouda.MultiIndex.unregister"]], "unregister() (arkouda.segarray method)": [[32, "arkouda.SegArray.unregister"]], "unregister() (arkouda.series method)": [[32, "arkouda.Series.unregister"]], "unregister() (arkouda.strings method)": [[32, "arkouda.Strings.unregister"], [32, "id361"], [32, "id429"], [32, "id497"]], "unregister() (arkouda.timedelta method)": [[32, "arkouda.Timedelta.unregister"], [32, "id522"]], "unregister() (arkouda.pdarray method)": [[32, "arkouda.pdarray.unregister"], [32, "id619"], [32, "id679"], [32, "id739"], [32, "id799"]], "unregister() (in module arkouda)": [[32, "arkouda.unregister"]], "unregister_all() (in module arkouda)": [[32, "arkouda.unregister_all"]], "unregister_dataframe_by_name() (arkouda.dataframe static method)": [[32, "arkouda.DataFrame.unregister_dataframe_by_name"], [32, "id45"]], "unregister_groupby_by_name() (arkouda.groupby static method)": [[32, "arkouda.GroupBy.unregister_groupby_by_name"], [32, "id156"], [32, "id200"], [32, "id244"], [32, "id288"], [92, "arkouda.GroupBy.unregister_groupby_by_name"]], "unregister_pdarray_by_name() (in module arkouda)": [[32, "arkouda.unregister_pdarray_by_name"]], "unregister_segarray_by_name() (arkouda.segarray static method)": [[32, "arkouda.SegArray.unregister_segarray_by_name"]], "unregister_strings_by_name() (arkouda.strings static method)": [[32, "arkouda.Strings.unregister_strings_by_name"], [32, "id362"], [32, "id430"], [32, "id498"]], "update_hdf() (arkouda.arrayview method)": [[32, "arkouda.ArrayView.update_hdf"]], "update_hdf() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.update_hdf"], [32, "id46"]], "update_hdf() (arkouda.groupby method)": [[32, "arkouda.GroupBy.update_hdf"], [32, "id157"], [32, "id201"], [32, "id245"], [32, "id289"]], "update_hdf() (arkouda.ipv4 method)": [[32, "arkouda.IPv4.update_hdf"]], "update_hdf() (arkouda.index method)": [[32, "arkouda.Index.update_hdf"]], "update_hdf() (arkouda.multiindex method)": [[32, "arkouda.MultiIndex.update_hdf"]], "update_hdf() (arkouda.segarray method)": [[32, "arkouda.SegArray.update_hdf"]], "update_hdf() (arkouda.strings method)": [[32, "arkouda.Strings.update_hdf"], [32, "id363"], [32, "id431"], [32, "id499"]], "update_hdf() (arkouda.pdarray method)": [[32, "arkouda.pdarray.update_hdf"], [32, "id620"], [32, "id680"], [32, "id740"], [32, "id800"]], "update_hdf() (in module arkouda)": [[32, "arkouda.update_hdf"]], "update_nrows() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.update_nrows"], [32, "id47"]], "upper() (arkouda.strings method)": [[32, "arkouda.Strings.upper"], [32, "id364"], [32, "id432"], [32, "id500"]], "validate_key() (arkouda.series method)": [[32, "arkouda.Series.validate_key"]], "validate_val() (arkouda.series method)": [[32, "arkouda.Series.validate_val"]], "value_counts() (arkouda.series method)": [[32, "arkouda.Series.value_counts"]], "value_counts() (arkouda.pdarray method)": [[32, "arkouda.pdarray.value_counts"], [32, "id621"], [32, "id681"], [32, "id741"], [32, "id801"]], "value_counts() (in module arkouda)": [[32, "arkouda.value_counts"], [93, "arkouda.value_counts"]], "values (arkouda.diffaggregate attribute)": [[32, "arkouda.DiffAggregate.values"]], "var() (arkouda.groupby method)": [[32, "arkouda.GroupBy.var"], [32, "id158"], [32, "id202"], [32, "id246"], [32, "id290"], [92, "arkouda.GroupBy.var"]], "var() (arkouda.pdarray method)": [[32, "arkouda.pdarray.var"], [32, "id622"], [32, "id682"], [32, "id742"], [32, "id802"], [93, "arkouda.pdarray.var"]], "var() (in module arkouda)": [[32, "arkouda.var"], [87, "arkouda.var"]], "week (arkouda.datetime property)": [[32, "arkouda.Datetime.week"], [32, "id63"], [32, "id96"]], "weekday (arkouda.datetime property)": [[32, "arkouda.Datetime.weekday"], [32, "id64"], [32, "id97"]], "weekofyear (arkouda.datetime property)": [[32, "arkouda.Datetime.weekofyear"], [32, "id65"], [32, "id98"]], "where() (in module arkouda)": [[32, "arkouda.where"], [32, "id809"], [87, "arkouda.where"]], "write_log() (in module arkouda)": [[32, "arkouda.write_log"]], "xlogy() (in module arkouda)": [[32, "arkouda.xlogy"]], "year (arkouda.datetime property)": [[32, "arkouda.Datetime.year"], [32, "id66"], [32, "id99"]], "zeros() (in module arkouda)": [[32, "arkouda.zeros"], [32, "id810"], [32, "id811"], [90, "arkouda.zeros"]], "zeros_like() (in module arkouda)": [[32, "arkouda.zeros_like"], [90, "arkouda.zeros_like"]], "index (class in arkouda.index)": [[33, "arkouda.index.Index"]], "multiindex (class in arkouda.index)": [[33, "arkouda.index.MultiIndex"]], "argsort() (arkouda.index.index method)": [[33, "arkouda.index.Index.argsort"]], "argsort() (arkouda.index.multiindex method)": [[33, "arkouda.index.MultiIndex.argsort"]], "arkouda.index": [[33, "module-arkouda.index"]], "concat() (arkouda.index.index method)": [[33, "arkouda.index.Index.concat"]], "concat() (arkouda.index.multiindex method)": [[33, "arkouda.index.MultiIndex.concat"]], "factory() (arkouda.index.index static method)": [[33, "arkouda.index.Index.factory"]], "from_return_msg() (arkouda.index.index class method)": [[33, "arkouda.index.Index.from_return_msg"]], "index (arkouda.index.index property)": [[33, "arkouda.index.Index.index"]], "index (arkouda.index.multiindex property)": [[33, "arkouda.index.MultiIndex.index"]], "is_registered() (arkouda.index.index method)": [[33, "arkouda.index.Index.is_registered"]], "is_registered() (arkouda.index.multiindex method)": [[33, "arkouda.index.MultiIndex.is_registered"]], "is_unique (arkouda.index.index property)": [[33, "arkouda.index.Index.is_unique"]], "lookup() (arkouda.index.index method)": [[33, "arkouda.index.Index.lookup"]], "lookup() (arkouda.index.multiindex method)": [[33, "arkouda.index.MultiIndex.lookup"]], "objtype (arkouda.index.index attribute)": [[33, "arkouda.index.Index.objType"]], "objtype (arkouda.index.multiindex attribute)": [[33, "arkouda.index.MultiIndex.objType"]], "register() (arkouda.index.index method)": [[33, "arkouda.index.Index.register"]], "register() (arkouda.index.multiindex method)": [[33, "arkouda.index.MultiIndex.register"]], "save() (arkouda.index.index method)": [[33, "arkouda.index.Index.save"]], "set_dtype() (arkouda.index.index method)": [[33, "arkouda.index.Index.set_dtype"]], "set_dtype() (arkouda.index.multiindex method)": [[33, "arkouda.index.MultiIndex.set_dtype"]], "shape (arkouda.index.index property)": [[33, "arkouda.index.Index.shape"]], "to_csv() (arkouda.index.index method)": [[33, "arkouda.index.Index.to_csv"]], "to_dict() (arkouda.index.index method)": [[33, "arkouda.index.Index.to_dict"]], "to_dict() (arkouda.index.multiindex method)": [[33, "arkouda.index.MultiIndex.to_dict"]], "to_hdf() (arkouda.index.index method)": [[33, "arkouda.index.Index.to_hdf"]], "to_hdf() (arkouda.index.multiindex method)": [[33, "arkouda.index.MultiIndex.to_hdf"]], "to_list() (arkouda.index.index method)": [[33, "arkouda.index.Index.to_list"]], "to_list() (arkouda.index.multiindex method)": [[33, "arkouda.index.MultiIndex.to_list"]], "to_ndarray() (arkouda.index.index method)": [[33, "arkouda.index.Index.to_ndarray"]], "to_ndarray() (arkouda.index.multiindex method)": [[33, "arkouda.index.MultiIndex.to_ndarray"]], "to_pandas() (arkouda.index.index method)": [[33, "arkouda.index.Index.to_pandas"]], "to_pandas() (arkouda.index.multiindex method)": [[33, "arkouda.index.MultiIndex.to_pandas"]], "to_parquet() (arkouda.index.index method)": [[33, "arkouda.index.Index.to_parquet"]], "unregister() (arkouda.index.index method)": [[33, "arkouda.index.Index.unregister"]], "unregister() (arkouda.index.multiindex method)": [[33, "arkouda.index.MultiIndex.unregister"]], "update_hdf() (arkouda.index.index method)": [[33, "arkouda.index.Index.update_hdf"]], "update_hdf() (arkouda.index.multiindex method)": [[33, "arkouda.index.MultiIndex.update_hdf"]], "allsymbols (in module arkouda.infoclass)": [[34, "arkouda.infoclass.AllSymbols"]], "registeredsymbols (in module arkouda.infoclass)": [[34, "arkouda.infoclass.RegisteredSymbols"]], "arkouda.infoclass": [[34, "module-arkouda.infoclass"]], "information() (in module arkouda.infoclass)": [[34, "arkouda.infoclass.information"]], "list_registry() (in module arkouda.infoclass)": [[34, "arkouda.infoclass.list_registry"]], "list_symbol_table() (in module arkouda.infoclass)": [[34, "arkouda.infoclass.list_symbol_table"]], "pretty_print_information() (in module arkouda.infoclass)": [[34, "arkouda.infoclass.pretty_print_information"]], "arkouda.io": [[35, "module-arkouda.io"]], "export() (in module arkouda.io)": [[35, "arkouda.io.export"]], "get_columns() (in module arkouda.io)": [[35, "arkouda.io.get_columns"]], "get_datasets() (in module arkouda.io)": [[35, "arkouda.io.get_datasets"]], "get_filetype() (in module arkouda.io)": [[35, "arkouda.io.get_filetype"]], "get_null_indices() (in module arkouda.io)": [[35, "arkouda.io.get_null_indices"]], "import_data() (in module arkouda.io)": [[35, "arkouda.io.import_data"]], "load() (in module arkouda.io)": [[35, "arkouda.io.load"]], "load_all() (in module arkouda.io)": [[35, "arkouda.io.load_all"]], "ls() (in module arkouda.io)": [[35, "arkouda.io.ls"]], "ls_csv() (in module arkouda.io)": [[35, "arkouda.io.ls_csv"]], "read() (in module arkouda.io)": [[35, "arkouda.io.read"]], "read_csv() (in module arkouda.io)": [[35, "arkouda.io.read_csv"]], "read_hdf() (in module arkouda.io)": [[35, "arkouda.io.read_hdf"]], "read_parquet() (in module arkouda.io)": [[35, "arkouda.io.read_parquet"]], "read_tagged_data() (in module arkouda.io)": [[35, "arkouda.io.read_tagged_data"]], "receive() (in module arkouda.io)": [[35, "arkouda.io.receive"]], "receive_dataframe() (in module arkouda.io)": [[35, "arkouda.io.receive_dataframe"]], "restore() (in module arkouda.io)": [[35, "arkouda.io.restore"]], "save_all() (in module arkouda.io)": [[35, "arkouda.io.save_all"]], "snapshot() (in module arkouda.io)": [[35, "arkouda.io.snapshot"]], "to_csv() (in module arkouda.io)": [[35, "arkouda.io.to_csv"]], "to_hdf() (in module arkouda.io)": [[35, "arkouda.io.to_hdf"]], "to_parquet() (in module arkouda.io)": [[35, "arkouda.io.to_parquet"]], "update_hdf() (in module arkouda.io)": [[35, "arkouda.io.update_hdf"]], "arkouda.io_util": [[36, "module-arkouda.io_util"]], "delimited_file_to_dict() (in module arkouda.io_util)": [[36, "arkouda.io_util.delimited_file_to_dict"]], "dict_to_delimited_file() (in module arkouda.io_util)": [[36, "arkouda.io_util.dict_to_delimited_file"]], "get_directory() (in module arkouda.io_util)": [[36, "arkouda.io_util.get_directory"]], "write_line_to_file() (in module arkouda.io_util)": [[36, "arkouda.io_util.write_line_to_file"]], "arkouda.join": [[37, "module-arkouda.join"]], "compute_join_size() (in module arkouda.join)": [[37, "arkouda.join.compute_join_size"]], "gen_ranges() (in module arkouda.join)": [[37, "arkouda.join.gen_ranges"]], "join_on_eq_with_dt() (in module arkouda.join)": [[37, "arkouda.join.join_on_eq_with_dt"]], "critical (arkouda.logger.loglevel attribute)": [[38, "arkouda.logger.LogLevel.CRITICAL"]], "debug (arkouda.logger.loglevel attribute)": [[38, "arkouda.logger.LogLevel.DEBUG"]], "error (arkouda.logger.loglevel attribute)": [[38, "arkouda.logger.LogLevel.ERROR"]], "info (arkouda.logger.loglevel attribute)": [[38, "arkouda.logger.LogLevel.INFO"]], "loglevel (class in arkouda.logger)": [[38, "arkouda.logger.LogLevel"]], "warn (arkouda.logger.loglevel attribute)": [[38, "arkouda.logger.LogLevel.WARN"]], "arkouda.logger": [[38, "module-arkouda.logger"]], "disableverbose() (in module arkouda.logger)": [[38, "arkouda.logger.disableVerbose"]], "enableverbose() (in module arkouda.logger)": [[38, "arkouda.logger.enableVerbose"]], "write_log() (in module arkouda.logger)": [[38, "arkouda.logger.write_log"]], "match (class in arkouda.match)": [[39, "arkouda.match.Match"]], "arkouda.match": [[39, "module-arkouda.match"]], "end() (arkouda.match.match method)": [[39, "arkouda.match.Match.end"], [100, "arkouda.match.Match.end"]], "find_matches() (arkouda.match.match method)": [[39, "arkouda.match.Match.find_matches"], [100, "arkouda.match.Match.find_matches"]], "group() (arkouda.match.match method)": [[39, "arkouda.match.Match.group"], [100, "arkouda.match.Match.group"]], "match_type() (arkouda.match.match method)": [[39, "arkouda.match.Match.match_type"], [100, "arkouda.match.Match.match_type"]], "matched() (arkouda.match.match method)": [[39, "arkouda.match.Match.matched"], [100, "arkouda.match.Match.matched"]], "start() (arkouda.match.match method)": [[39, "arkouda.match.Match.start"], [100, "arkouda.match.Match.start"]], "locationsinfo (arkouda.matcher.matcher attribute)": [[40, "arkouda.matcher.Matcher.LocationsInfo"]], "matcher (class in arkouda.matcher)": [[40, "arkouda.matcher.Matcher"]], "arkouda.matcher": [[40, "module-arkouda.matcher"]], "find_locations() (arkouda.matcher.matcher method)": [[40, "arkouda.matcher.Matcher.find_locations"]], "findall() (arkouda.matcher.matcher method)": [[40, "arkouda.matcher.Matcher.findall"]], "get_match() (arkouda.matcher.matcher method)": [[40, "arkouda.matcher.Matcher.get_match"]], "split() (arkouda.matcher.matcher method)": [[40, "arkouda.matcher.Matcher.split"]], "sub() (arkouda.matcher.matcher method)": [[40, "arkouda.matcher.Matcher.sub"]], "errormode (class in arkouda.numeric)": [[41, "arkouda.numeric.ErrorMode"]], "abs() (in module arkouda.numeric)": [[41, "arkouda.numeric.abs"]], "arccos() (in module arkouda.numeric)": [[41, "arkouda.numeric.arccos"]], "arccosh() (in module arkouda.numeric)": [[41, "arkouda.numeric.arccosh"]], "arcsin() (in module arkouda.numeric)": [[41, "arkouda.numeric.arcsin"]], "arcsinh() (in module arkouda.numeric)": [[41, "arkouda.numeric.arcsinh"]], "arctan() (in module arkouda.numeric)": [[41, "arkouda.numeric.arctan"]], "arctan2() (in module arkouda.numeric)": [[41, "arkouda.numeric.arctan2"]], "arctanh() (in module arkouda.numeric)": [[41, "arkouda.numeric.arctanh"]], "arkouda.numeric": [[41, "module-arkouda.numeric"]], "cast() (in module arkouda.numeric)": [[41, "arkouda.numeric.cast"]], "ceil() (in module arkouda.numeric)": [[41, "arkouda.numeric.ceil"]], "cos() (in module arkouda.numeric)": [[41, "arkouda.numeric.cos"]], "cosh() (in module arkouda.numeric)": [[41, "arkouda.numeric.cosh"]], "cumprod() (in module arkouda.numeric)": [[41, "arkouda.numeric.cumprod"]], "cumsum() (in module arkouda.numeric)": [[41, "arkouda.numeric.cumsum"]], "deg2rad() (in module arkouda.numeric)": [[41, "arkouda.numeric.deg2rad"]], "exp() (in module arkouda.numeric)": [[41, "arkouda.numeric.exp"]], "expm1() (in module arkouda.numeric)": [[41, "arkouda.numeric.expm1"]], "floor() (in module arkouda.numeric)": [[41, "arkouda.numeric.floor"]], "hash() (in module arkouda.numeric)": [[41, "arkouda.numeric.hash"]], "histogram() (in module arkouda.numeric)": [[41, "arkouda.numeric.histogram"]], "histogram2d() (in module arkouda.numeric)": [[41, "arkouda.numeric.histogram2d"]], "histogramdd() (in module arkouda.numeric)": [[41, "arkouda.numeric.histogramdd"]], "ignore (arkouda.numeric.errormode attribute)": [[41, "arkouda.numeric.ErrorMode.ignore"]], "isfinite() (in module arkouda.numeric)": [[41, "arkouda.numeric.isfinite"]], "isinf() (in module arkouda.numeric)": [[41, "arkouda.numeric.isinf"]], "isnan() (in module arkouda.numeric)": [[41, "arkouda.numeric.isnan"]], "log() (in module arkouda.numeric)": [[41, "arkouda.numeric.log"]], "log10() (in module arkouda.numeric)": [[41, "arkouda.numeric.log10"]], "log1p() (in module arkouda.numeric)": [[41, "arkouda.numeric.log1p"]], "log2() (in module arkouda.numeric)": [[41, "arkouda.numeric.log2"]], "rad2deg() (in module arkouda.numeric)": [[41, "arkouda.numeric.rad2deg"]], "return_validity (arkouda.numeric.errormode attribute)": [[41, "arkouda.numeric.ErrorMode.return_validity"]], "round() (in module arkouda.numeric)": [[41, "arkouda.numeric.round"]], "sign() (in module arkouda.numeric)": [[41, "arkouda.numeric.sign"]], "sin() (in module arkouda.numeric)": [[41, "arkouda.numeric.sin"]], "sinh() (in module arkouda.numeric)": [[41, "arkouda.numeric.sinh"]], "square() (in module arkouda.numeric)": [[41, "arkouda.numeric.square"]], "strict (arkouda.numeric.errormode attribute)": [[41, "arkouda.numeric.ErrorMode.strict"]], "tan() (in module arkouda.numeric)": [[41, "arkouda.numeric.tan"]], "tanh() (in module arkouda.numeric)": [[41, "arkouda.numeric.tanh"]], "trunc() (in module arkouda.numeric)": [[41, "arkouda.numeric.trunc"]], "value_counts() (in module arkouda.numeric)": [[41, "arkouda.numeric.value_counts"]], "where() (in module arkouda.numeric)": [[41, "arkouda.numeric.where"]], "binops (arkouda.pdarrayclass.pdarray attribute)": [[42, "arkouda.pdarrayclass.pdarray.BinOps"]], "opeqops (arkouda.pdarrayclass.pdarray attribute)": [[42, "arkouda.pdarrayclass.pdarray.OpEqOps"]], "all() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.all"]], "all() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.all"]], "any() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.any"]], "any() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.any"]], "argmax() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.argmax"]], "argmax() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.argmax"]], "argmaxk() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.argmaxk"]], "argmaxk() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.argmaxk"]], "argmin() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.argmin"]], "argmin() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.argmin"]], "argmink() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.argmink"]], "argmink() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.argmink"]], "arkouda.pdarrayclass": [[42, "module-arkouda.pdarrayclass"]], "astype() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.astype"]], "attach() (arkouda.pdarrayclass.pdarray static method)": [[42, "arkouda.pdarrayclass.pdarray.attach"]], "attach_pdarray() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.attach_pdarray"]], "bigint_to_uint_arrays() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.bigint_to_uint_arrays"]], "broadcast_to_shape() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.broadcast_to_shape"]], "clear() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.clear"]], "clz() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.clz"]], "clz() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.clz"]], "corr() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.corr"]], "corr() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.corr"]], "cov() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.cov"]], "cov() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.cov"]], "ctz() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.ctz"]], "ctz() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.ctz"]], "divmod() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.divmod"]], "dtype (arkouda.pdarrayclass.pdarray attribute)": [[42, "arkouda.pdarrayclass.pdarray.dtype"]], "fill() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.fill"]], "fmod() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.fmod"]], "format_other() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.format_other"]], "info() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.info"]], "is_registered() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.is_registered"]], "is_sorted() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.is_sorted"]], "is_sorted() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.is_sorted"]], "itemsize (arkouda.pdarrayclass.pdarray attribute)": [[42, "arkouda.pdarrayclass.pdarray.itemsize"]], "max() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.max"]], "max() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.max"]], "max_bits (arkouda.pdarrayclass.pdarray property)": [[42, "arkouda.pdarrayclass.pdarray.max_bits"]], "maxk() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.maxk"]], "maxk() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.maxk"]], "mean() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.mean"]], "mean() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.mean"]], "min() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.min"]], "min() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.min"]], "mink() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.mink"]], "mink() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.mink"]], "mod() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.mod"]], "name (arkouda.pdarrayclass.pdarray attribute)": [[42, "arkouda.pdarrayclass.pdarray.name"]], "ndim (arkouda.pdarrayclass.pdarray attribute)": [[42, "arkouda.pdarrayclass.pdarray.ndim"]], "objtype (arkouda.pdarrayclass.pdarray attribute)": [[42, "arkouda.pdarrayclass.pdarray.objType"]], "opeq() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.opeq"]], "parity() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.parity"]], "parity() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.parity"]], "pdarray (class in arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.pdarray"]], "popcount() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.popcount"]], "popcount() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.popcount"]], "power() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.power"]], "pretty_print_info() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.pretty_print_info"]], "prod() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.prod"]], "prod() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.prod"]], "register() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.register"]], "reshape() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.reshape"]], "rotl() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.rotl"]], "rotl() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.rotl"]], "rotr() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.rotr"]], "rotr() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.rotr"]], "save() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.save"]], "shape (arkouda.pdarrayclass.pdarray attribute)": [[42, "arkouda.pdarrayclass.pdarray.shape"]], "size (arkouda.pdarrayclass.pdarray attribute)": [[42, "arkouda.pdarrayclass.pdarray.size"]], "slice_bits() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.slice_bits"]], "sqrt() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.sqrt"]], "std() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.std"]], "std() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.std"]], "sum() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.sum"]], "sum() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.sum"]], "to_csv() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.to_csv"]], "to_cuda() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.to_cuda"]], "to_hdf() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.to_hdf"]], "to_list() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.to_list"]], "to_ndarray() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.to_ndarray"]], "to_parquet() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.to_parquet"]], "transfer() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.transfer"]], "unregister() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.unregister"]], "unregister_pdarray_by_name() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.unregister_pdarray_by_name"]], "update_hdf() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.update_hdf"]], "value_counts() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.value_counts"]], "var() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.var"]], "var() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.var"]], "arange() (in module arkouda.pdarraycreation)": [[43, "arkouda.pdarraycreation.arange"]], "arkouda.pdarraycreation": [[43, "module-arkouda.pdarraycreation"]], "array() (in module arkouda.pdarraycreation)": [[43, "arkouda.pdarraycreation.array"]], "bigint_from_uint_arrays() (in module arkouda.pdarraycreation)": [[43, "arkouda.pdarraycreation.bigint_from_uint_arrays"]], "from_series() (in module arkouda.pdarraycreation)": [[43, "arkouda.pdarraycreation.from_series"]], "full() (in module arkouda.pdarraycreation)": [[43, "arkouda.pdarraycreation.full"]], "full_like() (in module arkouda.pdarraycreation)": [[43, "arkouda.pdarraycreation.full_like"]], "linspace() (in module arkouda.pdarraycreation)": [[43, "arkouda.pdarraycreation.linspace"]], "ones() (in module arkouda.pdarraycreation)": [[43, "arkouda.pdarraycreation.ones"]], "ones_like() (in module arkouda.pdarraycreation)": [[43, "arkouda.pdarraycreation.ones_like"]], "randint() (in module arkouda.pdarraycreation)": [[43, "arkouda.pdarraycreation.randint"]], "random_strings_lognormal() (in module arkouda.pdarraycreation)": [[43, "arkouda.pdarraycreation.random_strings_lognormal"]], "random_strings_uniform() (in module arkouda.pdarraycreation)": [[43, "arkouda.pdarraycreation.random_strings_uniform"]], "standard_normal() (in module arkouda.pdarraycreation)": [[43, "arkouda.pdarraycreation.standard_normal"]], "uniform() (in module arkouda.pdarraycreation)": [[43, "arkouda.pdarraycreation.uniform"]], "zeros() (in module arkouda.pdarraycreation)": [[43, "arkouda.pdarraycreation.zeros"]], "zeros_like() (in module arkouda.pdarraycreation)": [[43, "arkouda.pdarraycreation.zeros_like"]], "arkouda.pdarraysetops": [[44, "module-arkouda.pdarraysetops"]], "concatenate() (in module arkouda.pdarraysetops)": [[44, "arkouda.pdarraysetops.concatenate"]], "in1d() (in module arkouda.pdarraysetops)": [[44, "arkouda.pdarraysetops.in1d"]], "indexof1d() (in module arkouda.pdarraysetops)": [[44, "arkouda.pdarraysetops.indexof1d"]], "intersect1d() (in module arkouda.pdarraysetops)": [[44, "arkouda.pdarraysetops.intersect1d"]], "setdiff1d() (in module arkouda.pdarraysetops)": [[44, "arkouda.pdarraysetops.setdiff1d"]], "setxor1d() (in module arkouda.pdarraysetops)": [[44, "arkouda.pdarraysetops.setxor1d"]], "union1d() (in module arkouda.pdarraysetops)": [[44, "arkouda.pdarraysetops.union1d"]], "arkouda.plotting": [[45, "module-arkouda.plotting"]], "hist_all() (in module arkouda.plotting)": [[45, "arkouda.plotting.hist_all"]], "plot_dist() (in module arkouda.plotting)": [[45, "arkouda.plotting.plot_dist"]], "generator (class in arkouda.random._generator)": [[46, "arkouda.random._generator.Generator"]], "arkouda.random._generator": [[46, "module-arkouda.random._generator"]], "default_rng() (in module arkouda.random._generator)": [[46, "arkouda.random._generator.default_rng"]], "integers() (arkouda.random._generator.generator method)": [[46, "arkouda.random._generator.Generator.integers"]], "random() (arkouda.random._generator.generator method)": [[46, "arkouda.random._generator.Generator.random"]], "standard_normal() (arkouda.random._generator.generator method)": [[46, "arkouda.random._generator.Generator.standard_normal"]], "uniform() (arkouda.random._generator.generator method)": [[46, "arkouda.random._generator.Generator.uniform"]], "arkouda.random._legacy": [[47, "module-arkouda.random._legacy"]], "randint() (in module arkouda.random._legacy)": [[47, "arkouda.random._legacy.randint"]], "standard_normal() (in module arkouda.random._legacy)": [[47, "arkouda.random._legacy.standard_normal"]], "uniform() (in module arkouda.random._legacy)": [[47, "arkouda.random._legacy.uniform"]], "generator (class in arkouda.random)": [[48, "arkouda.random.Generator"]], "arkouda.random": [[48, "module-arkouda.random"]], "default_rng() (in module arkouda.random)": [[48, "arkouda.random.default_rng"]], "integers() (arkouda.random.generator method)": [[48, "arkouda.random.Generator.integers"]], "randint() (in module arkouda.random)": [[48, "arkouda.random.randint"]], "random() (arkouda.random.generator method)": [[48, "arkouda.random.Generator.random"]], "standard_normal() (arkouda.random.generator method)": [[48, "arkouda.random.Generator.standard_normal"]], "standard_normal() (in module arkouda.random)": [[48, "arkouda.random.standard_normal"]], "uniform() (arkouda.random.generator method)": [[48, "arkouda.random.Generator.uniform"]], "uniform() (in module arkouda.random)": [[48, "arkouda.random.uniform"]], "row (class in arkouda.row)": [[49, "arkouda.row.Row"]], "arkouda.row": [[49, "module-arkouda.row"]], "arkouda.security": [[50, "module-arkouda.security"]], "generate_token() (in module arkouda.security)": [[50, "arkouda.security.generate_token"]], "generate_username_token_json() (in module arkouda.security)": [[50, "arkouda.security.generate_username_token_json"]], "get_arkouda_client_directory() (in module arkouda.security)": [[50, "arkouda.security.get_arkouda_client_directory"]], "get_home_directory() (in module arkouda.security)": [[50, "arkouda.security.get_home_directory"]], "get_username() (in module arkouda.security)": [[50, "arkouda.security.get_username"]], "username_tokenizer (in module arkouda.security)": [[50, "arkouda.security.username_tokenizer"]], "and() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.AND"]], "len_suffix (in module arkouda.segarray)": [[51, "arkouda.segarray.LEN_SUFFIX"]], "or() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.OR"]], "seg_suffix (in module arkouda.segarray)": [[51, "arkouda.segarray.SEG_SUFFIX"]], "segarray (class in arkouda.segarray)": [[51, "arkouda.segarray.SegArray"]], "val_suffix (in module arkouda.segarray)": [[51, "arkouda.segarray.VAL_SUFFIX"]], "xor() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.XOR"]], "aggregate() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.aggregate"]], "all() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.all"]], "any() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.any"]], "append() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.append"]], "append_single() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.append_single"]], "argmax() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.argmax"]], "argmin() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.argmin"]], "arkouda.segarray": [[51, "module-arkouda.segarray"]], "attach() (arkouda.segarray.segarray class method)": [[51, "arkouda.segarray.SegArray.attach"]], "concat() (arkouda.segarray.segarray class method)": [[51, "arkouda.segarray.SegArray.concat"]], "copy() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.copy"]], "filter() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.filter"]], "from_multi_array() (arkouda.segarray.segarray class method)": [[51, "arkouda.segarray.SegArray.from_multi_array"]], "from_parts() (arkouda.segarray.segarray class method)": [[51, "arkouda.segarray.SegArray.from_parts"]], "from_return_msg() (arkouda.segarray.segarray class method)": [[51, "arkouda.segarray.SegArray.from_return_msg"]], "get_jth() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.get_jth"]], "get_length_n() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.get_length_n"]], "get_ngrams() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.get_ngrams"]], "get_prefixes() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.get_prefixes"]], "get_suffixes() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.get_suffixes"]], "grouping (arkouda.segarray.segarray property)": [[51, "arkouda.segarray.SegArray.grouping"]], "hash() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.hash"]], "intersect() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.intersect"]], "is_registered() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.is_registered"]], "load() (arkouda.segarray.segarray class method)": [[51, "arkouda.segarray.SegArray.load"]], "max() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.max"]], "mean() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.mean"]], "min() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.min"]], "non_empty (arkouda.segarray.segarray property)": [[51, "arkouda.segarray.SegArray.non_empty"]], "nunique() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.nunique"]], "objtype (arkouda.segarray.segarray attribute)": [[51, "arkouda.segarray.SegArray.objType"]], "prepend_single() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.prepend_single"]], "prod() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.prod"]], "read_hdf() (arkouda.segarray.segarray class method)": [[51, "arkouda.segarray.SegArray.read_hdf"]], "register() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.register"]], "remove_repeats() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.remove_repeats"]], "save() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.save"]], "segarray() (in module arkouda.segarray)": [[51, "arkouda.segarray.segarray"]], "set_jth() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.set_jth"]], "setdiff() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.setdiff"]], "setxor() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.setxor"]], "sum() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.sum"]], "to_hdf() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.to_hdf"]], "to_list() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.to_list"]], "to_ndarray() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.to_ndarray"]], "to_parquet() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.to_parquet"]], "transfer() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.transfer"]], "union() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.union"]], "unique() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.unique"]], "unregister() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.unregister"]], "unregister_segarray_by_name() (arkouda.segarray.segarray static method)": [[51, "arkouda.segarray.SegArray.unregister_segarray_by_name"]], "update_hdf() (arkouda.segarray.segarray method)": [[51, "arkouda.segarray.SegArray.update_hdf"]], "series (class in arkouda.series)": [[52, "arkouda.series.Series"]], "add() (arkouda.series.series method)": [[52, "arkouda.series.Series.add"]], "arkouda.series": [[52, "module-arkouda.series"]], "at (arkouda.series.series property)": [[52, "arkouda.series.Series.at"]], "attach() (arkouda.series.series static method)": [[52, "arkouda.series.Series.attach"]], "concat() (arkouda.series.series static method)": [[52, "arkouda.series.Series.concat"]], "diff() (arkouda.series.series method)": [[52, "arkouda.series.Series.diff"]], "dt (arkouda.series.series attribute)": [[52, "arkouda.series.Series.dt"]], "from_return_msg() (arkouda.series.series class method)": [[52, "arkouda.series.Series.from_return_msg"]], "has_repeat_labels() (arkouda.series.series method)": [[52, "arkouda.series.Series.has_repeat_labels"]], "head() (arkouda.series.series method)": [[52, "arkouda.series.Series.head"]], "iat (arkouda.series.series property)": [[52, "arkouda.series.Series.iat"]], "iloc (arkouda.series.series property)": [[52, "arkouda.series.Series.iloc"]], "is_registered() (arkouda.series.series method)": [[52, "arkouda.series.Series.is_registered"]], "isin() (arkouda.series.series method)": [[52, "arkouda.series.Series.isin"]], "loc (arkouda.series.series property)": [[52, "arkouda.series.Series.loc"]], "locate() (arkouda.series.series method)": [[52, "arkouda.series.Series.locate"]], "objtype (arkouda.series.series attribute)": [[52, "arkouda.series.Series.objType"]], "pdconcat() (arkouda.series.series static method)": [[52, "arkouda.series.Series.pdconcat"]], "register() (arkouda.series.series method)": [[52, "arkouda.series.Series.register"]], "shape (arkouda.series.series property)": [[52, "arkouda.series.Series.shape"]], "sort_index() (arkouda.series.series method)": [[52, "arkouda.series.Series.sort_index"]], "sort_values() (arkouda.series.series method)": [[52, "arkouda.series.Series.sort_values"]], "str_acc (arkouda.series.series attribute)": [[52, "arkouda.series.Series.str_acc"]], "tail() (arkouda.series.series method)": [[52, "arkouda.series.Series.tail"]], "to_dataframe() (arkouda.series.series method)": [[52, "arkouda.series.Series.to_dataframe"]], "to_list() (arkouda.series.series method)": [[52, "arkouda.series.Series.to_list"]], "to_pandas() (arkouda.series.series method)": [[52, "arkouda.series.Series.to_pandas"]], "topn() (arkouda.series.series method)": [[52, "arkouda.series.Series.topn"]], "unregister() (arkouda.series.series method)": [[52, "arkouda.series.Series.unregister"]], "validate_key() (arkouda.series.series method)": [[52, "arkouda.series.Series.validate_key"]], "validate_val() (arkouda.series.series method)": [[52, "arkouda.series.Series.validate_val"]], "value_counts() (arkouda.series.series method)": [[52, "arkouda.series.Series.value_counts"]], "argsort() (in module arkouda.sorting)": [[53, "arkouda.sorting.argsort"]], "arkouda.sorting": [[53, "module-arkouda.sorting"]], "coargsort() (in module arkouda.sorting)": [[53, "arkouda.sorting.coargsort"]], "sort() (in module arkouda.sorting)": [[53, "arkouda.sorting.sort"]], "binops (arkouda.strings.strings attribute)": [[54, "arkouda.strings.Strings.BinOps"]], "strings (class in arkouda.strings)": [[54, "arkouda.strings.Strings"]], "arkouda.strings": [[54, "module-arkouda.strings"]], "astype() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.astype"]], "attach() (arkouda.strings.strings static method)": [[54, "arkouda.strings.Strings.attach"]], "cached_regex_patterns() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.cached_regex_patterns"]], "capitalize() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.capitalize"]], "contains() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.contains"]], "decode() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.decode"]], "dtype (arkouda.strings.strings attribute)": [[54, "arkouda.strings.Strings.dtype"]], "encode() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.encode"]], "endswith() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.endswith"]], "entry (arkouda.strings.strings attribute)": [[54, "arkouda.strings.Strings.entry"]], "find_locations() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.find_locations"]], "findall() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.findall"]], "flatten() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.flatten"]], "from_parts() (arkouda.strings.strings static method)": [[54, "arkouda.strings.Strings.from_parts"]], "from_return_msg() (arkouda.strings.strings static method)": [[54, "arkouda.strings.Strings.from_return_msg"]], "fullmatch() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.fullmatch"]], "get_bytes() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.get_bytes"]], "get_lengths() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.get_lengths"]], "get_offsets() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.get_offsets"]], "get_prefixes() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.get_prefixes"]], "get_suffixes() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.get_suffixes"]], "group() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.group"]], "hash() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.hash"]], "info() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.info"]], "is_registered() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.is_registered"]], "isalnum() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.isalnum"]], "isalpha() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.isalpha"]], "isdigit() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.isdigit"]], "isempty() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.isempty"]], "islower() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.islower"]], "isspace() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.isspace"]], "istitle() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.istitle"]], "isupper() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.isupper"]], "logger (arkouda.strings.strings attribute)": [[54, "arkouda.strings.Strings.logger"]], "lower() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.lower"]], "lstick() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.lstick"]], "match() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.match"]], "nbytes (arkouda.strings.strings attribute)": [[54, "arkouda.strings.Strings.nbytes"]], "ndim (arkouda.strings.strings attribute)": [[54, "arkouda.strings.Strings.ndim"]], "objtype (arkouda.strings.strings attribute)": [[54, "arkouda.strings.Strings.objType"]], "peel() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.peel"]], "pretty_print_info() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.pretty_print_info"]], "purge_cached_regex_patterns() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.purge_cached_regex_patterns"]], "register() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.register"]], "rpeel() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.rpeel"]], "save() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.save"]], "search() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.search"]], "shape (arkouda.strings.strings attribute)": [[54, "arkouda.strings.Strings.shape"]], "size (arkouda.strings.strings attribute)": [[54, "arkouda.strings.Strings.size"]], "split() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.split"]], "startswith() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.startswith"]], "stick() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.stick"]], "strip() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.strip"]], "sub() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.sub"]], "subn() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.subn"]], "title() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.title"]], "to_csv() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.to_csv"]], "to_hdf() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.to_hdf"]], "to_list() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.to_list"]], "to_ndarray() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.to_ndarray"]], "to_parquet() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.to_parquet"]], "transfer() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.transfer"]], "unregister() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.unregister"]], "unregister_strings_by_name() (arkouda.strings.strings static method)": [[54, "arkouda.strings.Strings.unregister_strings_by_name"]], "update_hdf() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.update_hdf"]], "upper() (arkouda.strings.strings method)": [[54, "arkouda.strings.Strings.upper"]], "datetime (class in arkouda.timeclass)": [[55, "arkouda.timeclass.Datetime"]], "timedelta (class in arkouda.timeclass)": [[55, "arkouda.timeclass.Timedelta"]], "abs() (arkouda.timeclass.timedelta method)": [[55, "arkouda.timeclass.Timedelta.abs"]], "arkouda.timeclass": [[55, "module-arkouda.timeclass"]], "components (arkouda.timeclass.timedelta property)": [[55, "arkouda.timeclass.Timedelta.components"]], "date (arkouda.timeclass.datetime property)": [[55, "arkouda.timeclass.Datetime.date"]], "date_range() (in module arkouda.timeclass)": [[55, "arkouda.timeclass.date_range"]], "day (arkouda.timeclass.datetime property)": [[55, "arkouda.timeclass.Datetime.day"]], "day_of_week (arkouda.timeclass.datetime property)": [[55, "arkouda.timeclass.Datetime.day_of_week"]], "day_of_year (arkouda.timeclass.datetime property)": [[55, "arkouda.timeclass.Datetime.day_of_year"]], "dayofweek (arkouda.timeclass.datetime property)": [[55, "arkouda.timeclass.Datetime.dayofweek"]], "dayofyear (arkouda.timeclass.datetime property)": [[55, "arkouda.timeclass.Datetime.dayofyear"]], "days (arkouda.timeclass.timedelta property)": [[55, "arkouda.timeclass.Timedelta.days"]], "hour (arkouda.timeclass.datetime property)": [[55, "arkouda.timeclass.Datetime.hour"]], "is_leap_year (arkouda.timeclass.datetime property)": [[55, "arkouda.timeclass.Datetime.is_leap_year"]], "is_registered() (arkouda.timeclass.datetime method)": [[55, "arkouda.timeclass.Datetime.is_registered"]], "is_registered() (arkouda.timeclass.timedelta method)": [[55, "arkouda.timeclass.Timedelta.is_registered"]], "isocalendar() (arkouda.timeclass.datetime method)": [[55, "arkouda.timeclass.Datetime.isocalendar"]], "microsecond (arkouda.timeclass.datetime property)": [[55, "arkouda.timeclass.Datetime.microsecond"]], "microseconds (arkouda.timeclass.timedelta property)": [[55, "arkouda.timeclass.Timedelta.microseconds"]], "millisecond (arkouda.timeclass.datetime property)": [[55, "arkouda.timeclass.Datetime.millisecond"]], "minute (arkouda.timeclass.datetime property)": [[55, "arkouda.timeclass.Datetime.minute"]], "month (arkouda.timeclass.datetime property)": [[55, "arkouda.timeclass.Datetime.month"]], "nanosecond (arkouda.timeclass.datetime property)": [[55, "arkouda.timeclass.Datetime.nanosecond"]], "nanoseconds (arkouda.timeclass.timedelta property)": [[55, "arkouda.timeclass.Timedelta.nanoseconds"]], "register() (arkouda.timeclass.datetime method)": [[55, "arkouda.timeclass.Datetime.register"]], "register() (arkouda.timeclass.timedelta method)": [[55, "arkouda.timeclass.Timedelta.register"]], "second (arkouda.timeclass.datetime property)": [[55, "arkouda.timeclass.Datetime.second"]], "seconds (arkouda.timeclass.timedelta property)": [[55, "arkouda.timeclass.Timedelta.seconds"]], "special_objtype (arkouda.timeclass.datetime attribute)": [[55, "arkouda.timeclass.Datetime.special_objType"]], "special_objtype (arkouda.timeclass.timedelta attribute)": [[55, "arkouda.timeclass.Timedelta.special_objType"]], "std() (arkouda.timeclass.timedelta method)": [[55, "arkouda.timeclass.Timedelta.std"]], "sum() (arkouda.timeclass.datetime method)": [[55, "arkouda.timeclass.Datetime.sum"]], "sum() (arkouda.timeclass.timedelta method)": [[55, "arkouda.timeclass.Timedelta.sum"]], "supported_opeq (arkouda.timeclass.datetime attribute)": [[55, "arkouda.timeclass.Datetime.supported_opeq"]], "supported_opeq (arkouda.timeclass.timedelta attribute)": [[55, "arkouda.timeclass.Timedelta.supported_opeq"]], "supported_with_datetime (arkouda.timeclass.datetime attribute)": [[55, "arkouda.timeclass.Datetime.supported_with_datetime"]], "supported_with_datetime (arkouda.timeclass.timedelta attribute)": [[55, "arkouda.timeclass.Timedelta.supported_with_datetime"]], "supported_with_pdarray (arkouda.timeclass.datetime attribute)": [[55, "arkouda.timeclass.Datetime.supported_with_pdarray"]], "supported_with_pdarray (arkouda.timeclass.timedelta attribute)": [[55, "arkouda.timeclass.Timedelta.supported_with_pdarray"]], "supported_with_r_datetime (arkouda.timeclass.datetime attribute)": [[55, "arkouda.timeclass.Datetime.supported_with_r_datetime"]], "supported_with_r_datetime (arkouda.timeclass.timedelta attribute)": [[55, "arkouda.timeclass.Timedelta.supported_with_r_datetime"]], "supported_with_r_pdarray (arkouda.timeclass.datetime attribute)": [[55, "arkouda.timeclass.Datetime.supported_with_r_pdarray"]], "supported_with_r_pdarray (arkouda.timeclass.timedelta attribute)": [[55, "arkouda.timeclass.Timedelta.supported_with_r_pdarray"]], "supported_with_r_timedelta (arkouda.timeclass.datetime attribute)": [[55, "arkouda.timeclass.Datetime.supported_with_r_timedelta"]], "supported_with_r_timedelta (arkouda.timeclass.timedelta attribute)": [[55, "arkouda.timeclass.Timedelta.supported_with_r_timedelta"]], "supported_with_timedelta (arkouda.timeclass.datetime attribute)": [[55, "arkouda.timeclass.Datetime.supported_with_timedelta"]], "supported_with_timedelta (arkouda.timeclass.timedelta attribute)": [[55, "arkouda.timeclass.Timedelta.supported_with_timedelta"]], "timedelta_range() (in module arkouda.timeclass)": [[55, "arkouda.timeclass.timedelta_range"]], "to_pandas() (arkouda.timeclass.datetime method)": [[55, "arkouda.timeclass.Datetime.to_pandas"]], "to_pandas() (arkouda.timeclass.timedelta method)": [[55, "arkouda.timeclass.Timedelta.to_pandas"]], "total_seconds() (arkouda.timeclass.timedelta method)": [[55, "arkouda.timeclass.Timedelta.total_seconds"]], "unregister() (arkouda.timeclass.datetime method)": [[55, "arkouda.timeclass.Datetime.unregister"]], "unregister() (arkouda.timeclass.timedelta method)": [[55, "arkouda.timeclass.Timedelta.unregister"]], "week (arkouda.timeclass.datetime property)": [[55, "arkouda.timeclass.Datetime.week"]], "weekday (arkouda.timeclass.datetime property)": [[55, "arkouda.timeclass.Datetime.weekday"]], "weekofyear (arkouda.timeclass.datetime property)": [[55, "arkouda.timeclass.Datetime.weekofyear"]], "year (arkouda.timeclass.datetime property)": [[55, "arkouda.timeclass.Datetime.year"]], "arkouda.util": [[56, "module-arkouda.util"]], "attach() (in module arkouda.util)": [[56, "arkouda.util.attach"]], "attach_all() (in module arkouda.util)": [[56, "arkouda.util.attach_all"]], "broadcast_dims() (in module arkouda.util)": [[56, "arkouda.util.broadcast_dims"]], "concatenate() (in module arkouda.util)": [[56, "arkouda.util.concatenate"]], "convert_if_categorical() (in module arkouda.util)": [[56, "arkouda.util.convert_if_categorical"]], "enrich_inplace() (in module arkouda.util)": [[56, "arkouda.util.enrich_inplace"]], "expand() (in module arkouda.util)": [[56, "arkouda.util.expand"]], "generic_concat() (in module arkouda.util)": [[56, "arkouda.util.generic_concat"]], "get_callback() (in module arkouda.util)": [[56, "arkouda.util.get_callback"]], "identity() (in module arkouda.util)": [[56, "arkouda.util.identity"]], "invert_permutation() (in module arkouda.util)": [[56, "arkouda.util.invert_permutation"]], "is_registered() (in module arkouda.util)": [[56, "arkouda.util.is_registered"]], "most_common() (in module arkouda.util)": [[56, "arkouda.util.most_common"]], "register() (in module arkouda.util)": [[56, "arkouda.util.register"]], "register_all() (in module arkouda.util)": [[56, "arkouda.util.register_all"]], "report_mem() (in module arkouda.util)": [[56, "arkouda.util.report_mem"]], "sparse_sum_help() (in module arkouda.util)": [[56, "arkouda.util.sparse_sum_help"]], "unregister() (in module arkouda.util)": [[56, "arkouda.util.unregister"]], "unregister_all() (in module arkouda.util)": [[56, "arkouda.util.unregister_all"]], "to_ndarray() (in module arkouda.strings)": [[84, "arkouda.Strings.to_ndarray"], [100, "arkouda.Strings.to_ndarray"]], "to_ndarray() (in module arkouda.pdarray)": [[84, "arkouda.pdarray.to_ndarray"], [95, "arkouda.pdarray.to_ndarray"]], "argsort() (in module arkouda.index)": [[85, "arkouda.Index.argsort"]], "argsort() (in module arkouda.multiindex)": [[85, "arkouda.MultiIndex.argsort"]], "concat() (in module arkouda.index)": [[85, "arkouda.Index.concat"]], "concat() (in module arkouda.multiindex)": [[85, "arkouda.MultiIndex.concat"]], "lookup() (in module arkouda.index)": [[85, "arkouda.Index.lookup"]], "lookup() (in module arkouda.multiindex)": [[85, "arkouda.MultiIndex.lookup"]], "set_dtype() (in module arkouda.index)": [[85, "arkouda.Index.set_dtype"]], "set_dtype() (in module arkouda.multiindex)": [[85, "arkouda.MultiIndex.set_dtype"]], "to_ndarray() (in module arkouda.arrayview)": [[88, "arkouda.ArrayView.to_ndarray"]], "categorical (class in arkouda)": [[89, "arkouda.Categorical"]], "categories (arkouda.categorical attribute)": [[89, "arkouda.Categorical.categories"]], "codes (arkouda.categorical attribute)": [[89, "arkouda.Categorical.codes"]], "contains() (arkouda.categorical method)": [[89, "arkouda.Categorical.contains"]], "endswith() (arkouda.categorical method)": [[89, "arkouda.Categorical.endswith"]], "from_codes() (arkouda.categorical class method)": [[89, "arkouda.Categorical.from_codes"]], "ndim (arkouda.categorical attribute)": [[89, "arkouda.Categorical.ndim"]], "nlevels (arkouda.categorical attribute)": [[89, "arkouda.Categorical.nlevels"]], "permutation (arkouda.categorical attribute)": [[89, "arkouda.Categorical.permutation"]], "segments (arkouda.categorical attribute)": [[89, "arkouda.Categorical.segments"]], "shape (arkouda.categorical attribute)": [[89, "arkouda.Categorical.shape"]], "size (arkouda.categorical attribute)": [[89, "arkouda.Categorical.size"]], "startswith() (arkouda.categorical method)": [[89, "arkouda.Categorical.startswith"]], "to_ndarray() (in module arkouda.categorical)": [[89, "arkouda.Categorical.to_ndarray"]], "apply_permutation() (in module arkouda.dataframe)": [[91, "arkouda.DataFrame.apply_permutation"]], "argsort() (in module arkouda.dataframe)": [[91, "arkouda.DataFrame.argsort"]], "coargsort() (in module arkouda.dataframe)": [[91, "arkouda.DataFrame.coargsort"]], "concat() (in module arkouda.dataframe)": [[91, "arkouda.DataFrame.concat"]], "copy() (in module arkouda.dataframe)": [[91, "arkouda.DataFrame.copy"]], "drop() (in module arkouda.dataframe)": [[91, "arkouda.DataFrame.drop"]], "drop_duplicates() (in module arkouda.dataframe)": [[91, "arkouda.DataFrame.drop_duplicates"]], "groupby() (in module arkouda.dataframe)": [[91, "arkouda.DataFrame.groupby"]], "head() (in module arkouda.dataframe)": [[91, "arkouda.DataFrame.head"]], "rename() (in module arkouda.dataframe)": [[91, "arkouda.DataFrame.rename"]], "reset_index() (in module arkouda.dataframe)": [[91, "arkouda.DataFrame.reset_index"]], "sort_values() (in module arkouda.dataframe)": [[91, "arkouda.DataFrame.sort_values"]], "tail() (in module arkouda.dataframe)": [[91, "arkouda.DataFrame.tail"]], "to_pandas() (in module arkouda.dataframe)": [[91, "arkouda.DataFrame.to_pandas"]], "append() (in module arkouda.segarray)": [[96, "arkouda.SegArray.append"]], "append_single() (in module arkouda.segarray)": [[96, "arkouda.SegArray.append_single"]], "get_jth() (in module arkouda.segarray)": [[96, "arkouda.SegArray.get_jth"]], "get_length_n() (in module arkouda.segarray)": [[96, "arkouda.SegArray.get_length_n"]], "get_ngrams() (in module arkouda.segarray)": [[96, "arkouda.SegArray.get_ngrams"]], "get_prefixes() (in module arkouda.segarray)": [[96, "arkouda.SegArray.get_prefixes"]], "get_suffixes() (in module arkouda.segarray)": [[96, "arkouda.SegArray.get_suffixes"]], "intersect() (in module arkouda.segarray)": [[96, "arkouda.SegArray.intersect"]], "prepend_single() (in module arkouda.segarray)": [[96, "arkouda.SegArray.prepend_single"]], "remove_repeats() (in module arkouda.segarray)": [[96, "arkouda.SegArray.remove_repeats"]], "set_jth() (in module arkouda.segarray)": [[96, "arkouda.SegArray.set_jth"]], "setdiff() (in module arkouda.segarray)": [[96, "arkouda.SegArray.setdiff"]], "setxor() (in module arkouda.segarray)": [[96, "arkouda.SegArray.setxor"]], "to_ndarray() (in module arkouda.segarray)": [[96, "arkouda.SegArray.to_ndarray"]], "union() (in module arkouda.segarray)": [[96, "arkouda.SegArray.union"]], "head() (in module arkouda.series)": [[97, "arkouda.Series.head"]], "locate() (in module arkouda.series)": [[97, "arkouda.Series.locate"], [97, "id0"]], "pdconcat() (in module arkouda.series)": [[97, "arkouda.Series.pdconcat"]], "sort_index() (in module arkouda.series)": [[97, "arkouda.Series.sort_index"]], "sort_values() (in module arkouda.series)": [[97, "arkouda.Series.sort_values"]], "tail() (in module arkouda.series)": [[97, "arkouda.Series.tail"]], "to_pandas() (in module arkouda.series)": [[97, "arkouda.Series.to_pandas"]], "topn() (in module arkouda.series)": [[97, "arkouda.Series.topn"]], "value_counts() (in module arkouda.series)": [[97, "arkouda.Series.value_counts"]], "connect() (in module arkouda)": [[99, "arkouda.connect"]]}})