Search.setIndex({"docnames": ["CONTRIBUTING_LINK", "ENVIRONMENT", "autoapi/arkouda/accessor/index", "autoapi/arkouda/alignment/index", "autoapi/arkouda/array_api/_array_object/index", "autoapi/arkouda/array_api/_constants/index", "autoapi/arkouda/array_api/_creation_functions/index", "autoapi/arkouda/array_api/_data_type_functions/index", "autoapi/arkouda/array_api/_dtypes/index", "autoapi/arkouda/array_api/_elementwise_functions/index", "autoapi/arkouda/array_api/_indexing_functions/index", "autoapi/arkouda/array_api/_manipulation_functions/index", "autoapi/arkouda/array_api/_searching_functions/index", "autoapi/arkouda/array_api/_set_functions/index", "autoapi/arkouda/array_api/_sorting_functions/index", "autoapi/arkouda/array_api/_statistical_functions/index", "autoapi/arkouda/array_api/_typing/index", "autoapi/arkouda/array_api/_utility_functions/index", "autoapi/arkouda/array_api/index", "autoapi/arkouda/array_api/linalg/index", "autoapi/arkouda/array_view/index", "autoapi/arkouda/categorical/index", "autoapi/arkouda/client/index", "autoapi/arkouda/client_dtypes/index", "autoapi/arkouda/dataframe/index", "autoapi/arkouda/dtypes/index", "autoapi/arkouda/groupbyclass/index", "autoapi/arkouda/history/index", "autoapi/arkouda/index", "autoapi/arkouda/index/index", "autoapi/arkouda/infoclass/index", "autoapi/arkouda/io/index", "autoapi/arkouda/io_util/index", "autoapi/arkouda/join/index", "autoapi/arkouda/logger/index", "autoapi/arkouda/match/index", "autoapi/arkouda/matcher/index", "autoapi/arkouda/numeric/index", "autoapi/arkouda/pdarrayclass/index", "autoapi/arkouda/pdarraycreation/index", "autoapi/arkouda/pdarraysetops/index", "autoapi/arkouda/plotting/index", "autoapi/arkouda/row/index", "autoapi/arkouda/security/index", "autoapi/arkouda/segarray/index", "autoapi/arkouda/series/index", "autoapi/arkouda/sorting/index", "autoapi/arkouda/strings/index", "autoapi/arkouda/timeclass/index", "autoapi/arkouda/util/index", "autoapi/index", "developer/ADDING_FEATURES", "developer/BENCHMARK", "developer/GASNET", "developer/MEMORY", "developer/RELEASE_PROCESS", "developer/TIPS", "developer/USER_BUGS", "developer/dev_menu", "examples", "file_io/CSV", "file_io/HDF5", "file_io/IMPORT_EXPORT", "file_io/PARQUET", "file_io/io_menu", "index", "quickstart", "server/index", "setup/BUILD", "setup/LINUX_INSTALL", "setup/MAC_INSTALL", "setup/MODULAR", "setup/REQUIREMENTS", "setup/WINDOWS_INSTALL", "setup/install_menu", "setup/testing", "usage", "usage/IO", "usage/Index", "usage/argsort", "usage/arithmetic", "usage/arrayview", "usage/categorical", "usage/creation", "usage/dataframe", "usage/groupby", "usage/histogram", "usage/indexing", "usage/pdarray", "usage/segarray", "usage/series", "usage/setops", "usage/startup", "usage/strings"], "filenames": ["CONTRIBUTING_LINK.md", "ENVIRONMENT.md", "autoapi/arkouda/accessor/index.rst", "autoapi/arkouda/alignment/index.rst", "autoapi/arkouda/array_api/_array_object/index.rst", "autoapi/arkouda/array_api/_constants/index.rst", "autoapi/arkouda/array_api/_creation_functions/index.rst", "autoapi/arkouda/array_api/_data_type_functions/index.rst", "autoapi/arkouda/array_api/_dtypes/index.rst", "autoapi/arkouda/array_api/_elementwise_functions/index.rst", "autoapi/arkouda/array_api/_indexing_functions/index.rst", "autoapi/arkouda/array_api/_manipulation_functions/index.rst", "autoapi/arkouda/array_api/_searching_functions/index.rst", "autoapi/arkouda/array_api/_set_functions/index.rst", "autoapi/arkouda/array_api/_sorting_functions/index.rst", "autoapi/arkouda/array_api/_statistical_functions/index.rst", "autoapi/arkouda/array_api/_typing/index.rst", "autoapi/arkouda/array_api/_utility_functions/index.rst", "autoapi/arkouda/array_api/index.rst", "autoapi/arkouda/array_api/linalg/index.rst", "autoapi/arkouda/array_view/index.rst", "autoapi/arkouda/categorical/index.rst", "autoapi/arkouda/client/index.rst", "autoapi/arkouda/client_dtypes/index.rst", "autoapi/arkouda/dataframe/index.rst", "autoapi/arkouda/dtypes/index.rst", "autoapi/arkouda/groupbyclass/index.rst", "autoapi/arkouda/history/index.rst", "autoapi/arkouda/index.rst", "autoapi/arkouda/index/index.rst", "autoapi/arkouda/infoclass/index.rst", "autoapi/arkouda/io/index.rst", "autoapi/arkouda/io_util/index.rst", "autoapi/arkouda/join/index.rst", "autoapi/arkouda/logger/index.rst", "autoapi/arkouda/match/index.rst", "autoapi/arkouda/matcher/index.rst", "autoapi/arkouda/numeric/index.rst", "autoapi/arkouda/pdarrayclass/index.rst", "autoapi/arkouda/pdarraycreation/index.rst", "autoapi/arkouda/pdarraysetops/index.rst", "autoapi/arkouda/plotting/index.rst", "autoapi/arkouda/row/index.rst", "autoapi/arkouda/security/index.rst", "autoapi/arkouda/segarray/index.rst", "autoapi/arkouda/series/index.rst", "autoapi/arkouda/sorting/index.rst", "autoapi/arkouda/strings/index.rst", "autoapi/arkouda/timeclass/index.rst", "autoapi/arkouda/util/index.rst", "autoapi/index.rst", "developer/ADDING_FEATURES.md", "developer/BENCHMARK.md", "developer/GASNET.md", "developer/MEMORY.md", "developer/RELEASE_PROCESS.md", "developer/TIPS.md", "developer/USER_BUGS.md", "developer/dev_menu.rst", "examples.rst", "file_io/CSV.md", "file_io/HDF5.md", "file_io/IMPORT_EXPORT.md", "file_io/PARQUET.md", "file_io/io_menu.rst", "index.rst", "quickstart.rst", "server/index.rst", "setup/BUILD.md", "setup/LINUX_INSTALL.md", "setup/MAC_INSTALL.md", "setup/MODULAR.md", "setup/REQUIREMENTS.md", "setup/WINDOWS_INSTALL.md", "setup/install_menu.rst", "setup/testing.rst", "usage.rst", "usage/IO.rst", "usage/Index.rst", "usage/argsort.rst", "usage/arithmetic.rst", "usage/arrayview.rst", "usage/categorical.rst", "usage/creation.rst", "usage/dataframe.rst", "usage/groupby.rst", "usage/histogram.rst", "usage/indexing.rst", "usage/pdarray.rst", "usage/segarray.rst", "usage/series.rst", "usage/setops.rst", "usage/startup.rst", "usage/strings.rst"], "titles": ["Contributing", "Environment Variables", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.accessor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.alignment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._array_object</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._constants</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._creation_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._data_type_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._dtypes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._elementwise_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._indexing_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._manipulation_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._searching_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._set_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._sorting_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._statistical_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._typing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._utility_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api.linalg</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_view</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.categorical</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.client</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.client_dtypes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.dataframe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.dtypes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.groupbyclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.index</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.infoclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.io</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.io_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.join</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.match</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.numeric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.pdarrayclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.pdarraycreation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.pdarraysetops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.plotting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.row</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.security</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.segarray</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.series</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.sorting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.strings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.timeclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.util</span></code>", "API Reference", "Adding Your First Feature", "PyTest Benchmarks", "GASNet Development", "Reducing Memory Usage of Arkouda Builds", "Release Process", "Speeding up Arkouda Compilation", "Tips for Reproducing User Bugs", "Developer Documentation", "Examples", "CSV", "HDF5", "Import/Export", "Parquet", "File I/O", "Arkouda Documentation", "Quickstart", "Chapel API Reference", "Building the Server", "Linux", "MacOS", "Modular Server Builds", "Requirements", "Windows (WSL2)", "Installation", "Performance Testing", "Usage Guide", "Data I/O", "Indexs in Arkouda", "Sorting", "Arithmetic and Numeric Operations", "ArrayView in Arkouda", "Categoricals", "Creating Arrays", "DataFrames in Arkouda", "GroupBy", "Summarizing Data", "Indexing and Assignment", "The <code class=\"docutils literal notranslate\"><span class=\"pre\">pdarray</span></code> class", "SegArrays in Arkouda", "Series in Arkouda", "Array Set Operations", "Startup", "Strings in Arkouda"], "terms": {"i": [0, 1, 3, 4, 7, 16, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 66, 68, 69, 70, 71, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "an": [0, 1, 3, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 66, 69, 73, 75, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "open": [0, 3, 21, 24, 28, 29, 31, 32, 38, 44, 47, 48, 73], "sourc": [0, 1, 53, 61, 66, 68, 69], "project": [0, 52, 55, 68], "we": [0, 1, 4, 24, 28, 29, 31, 37, 38, 47, 51, 52, 53, 55, 57, 59, 60, 63, 68, 69, 70, 72, 73, 86, 88], "love": 0, "see": [0, 1, 3, 4, 7, 9, 10, 11, 12, 13, 14, 16, 17, 26, 28, 37, 38, 41, 45, 47, 48, 49, 51, 52, 55, 56, 57, 66, 68, 71, 77, 80, 82, 85, 86, 88, 89, 90, 91, 93], "new": [0, 20, 21, 24, 26, 28, 29, 31, 32, 34, 35, 36, 37, 38, 41, 44, 45, 47, 51, 55, 56, 57, 72, 84, 85, 88, 89, 90, 93], "contributor": 0, "welcom": 0, "via": [0, 1, 21, 24, 26, 28, 38, 39, 47, 51, 68, 69, 70, 77, 82, 85, 87, 88, 93], "most": [0, 1, 23, 26, 28, 36, 45, 47, 52, 54, 55, 59, 61, 66, 68, 70, 73, 77, 83, 85, 88, 90, 93], "fall": 0, "under": [0, 2, 20, 21, 23, 24, 26, 28, 29, 31, 38, 39, 44, 45, 47, 48, 52, 55, 77, 81, 82, 85, 88, 93], "broad": 0, "categori": [0, 21, 28, 46, 55, 61, 76, 79, 82], "If": [0, 1, 3, 20, 21, 22, 23, 24, 26, 28, 29, 31, 32, 35, 36, 37, 38, 39, 40, 44, 45, 47, 48, 51, 53, 54, 55, 56, 60, 61, 63, 66, 68, 69, 70, 71, 73, 74, 77, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93], "your": [0, 1, 24, 28, 29, 31, 38, 47, 53, 54, 55, 57, 58, 66, 68, 69, 70, 71, 72, 73, 74, 84, 92, 93], "doesn": [0, 55, 68], "t": [0, 4, 16, 24, 28, 31, 47, 48, 51, 55, 56, 57, 68, 69, 70, 73, 75, 93], "fit": [0, 52, 55, 77], "either": [0, 21, 24, 26, 28, 30, 31, 37, 38, 39, 40, 44, 45, 71, 73, 77, 89, 90, 91], "pleas": [0, 21, 23, 24, 26, 28, 29, 31, 38, 44, 45, 47, 48, 53, 55, 56, 59, 61, 63, 64, 68, 69, 70, 71, 82, 84, 85], "add": [0, 1, 9, 20, 21, 24, 26, 28, 31, 44, 45, 51, 55, 68, 69, 70, 71, 73, 84, 85], "anywai": [0, 83], "provid": [0, 7, 20, 21, 24, 26, 28, 29, 31, 38, 44, 47, 49, 52, 54, 59, 60, 61, 63, 64, 68, 69, 70, 72, 77, 80, 84, 85, 89], "much": [0, 3, 20, 21, 24, 28, 31, 38, 44, 47, 54, 59, 61, 77, 81, 82, 88, 93], "detail": [0, 7, 16, 28, 30, 38, 52, 55, 68, 69, 70, 72, 86, 92, 93], "possibl": [0, 24, 28, 31, 37, 44, 47, 48, 51, 52, 55, 59, 68, 73, 77, 89, 93], "It": [0, 4, 23, 24, 28, 38, 43, 44, 49, 53, 54, 57, 59, 60, 61, 63, 66, 68, 69, 70, 73, 84, 85, 89], "alwai": [0, 26, 28, 31, 38, 48, 60, 77, 80, 82, 84, 85, 86, 88, 93], "good": [0, 55, 57], "idea": [0, 55, 57, 60, 77], "current": [0, 20, 21, 22, 24, 26, 28, 29, 30, 31, 37, 38, 39, 43, 47, 54, 55, 56, 60, 61, 62, 63, 69, 70, 74, 77, 78, 80, 82, 83, 84, 85, 86, 88, 89, 92, 93], "list": [0, 3, 4, 6, 11, 16, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 44, 45, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 60, 64, 66, 68, 70, 71, 74, 77, 78, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93], "make": [0, 1, 21, 23, 24, 28, 37, 48, 51, 52, 53, 54, 55, 57, 66, 68, 69, 70, 71, 73, 82, 84], "sure": [0, 24, 28, 29, 31, 38, 47, 55, 73], "alreadi": [0, 1, 21, 24, 26, 28, 29, 31, 38, 44, 45, 47, 48, 56, 60, 61, 63, 68, 82, 85, 91], "present": [0, 3, 21, 23, 24, 28, 29, 31, 37, 38, 40, 44, 45, 47, 59, 61, 77, 86, 91], "us": [0, 1, 3, 4, 16, 21, 22, 23, 24, 26, 27, 28, 29, 31, 34, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 58, 60, 61, 62, 63, 69, 70, 73, 74, 75, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "github": [0, 24, 28, 55, 57, 68, 69, 70, 74], "markdown": 0, "especi": [0, 21, 24, 28, 57, 70, 82], "block": [0, 21, 28, 40, 47, 51, 59, 66, 83], "veri": [0, 24, 28, 59, 83, 84], "appreci": 0, "when": [0, 1, 3, 20, 21, 23, 24, 26, 28, 29, 31, 37, 38, 40, 44, 45, 47, 48, 49, 51, 52, 55, 56, 57, 59, 61, 63, 66, 68, 70, 71, 72, 73, 77, 80, 82, 84, 85, 88, 89, 91], "includ": [0, 1, 3, 24, 26, 28, 29, 30, 31, 37, 38, 47, 48, 51, 52, 55, 60, 61, 66, 68, 69, 71, 77, 80, 84, 85, 88, 89], "follow": [0, 1, 3, 22, 28, 37, 51, 52, 53, 55, 66, 68, 69, 70, 71, 72, 73, 74, 80, 82, 85, 88, 89, 91, 92, 93], "inform": [0, 1, 4, 7, 9, 10, 11, 12, 13, 14, 16, 17, 21, 22, 26, 28, 30, 38, 47, 52, 55, 56, 57, 59, 60, 61, 63, 64, 66, 68, 69, 70, 71, 72, 82, 89, 91, 93], "summari": [0, 24, 28], "problem": [0, 52, 66, 75], "what": [0, 25, 28, 44, 51, 55, 56, 57, 71, 92], "behavior": [0, 4, 24, 28, 38, 39, 80, 81, 83, 84, 93], "did": [0, 22], "you": [0, 1, 21, 23, 24, 26, 28, 29, 31, 38, 44, 45, 47, 48, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 66, 68, 69, 70, 71, 72, 73, 74, 84, 85, 87], "observ": [0, 28, 38, 80], "encount": [0, 28, 31], "expect": [0, 20, 24, 26, 28, 29, 31, 38, 47, 52, 61, 69, 70, 77, 81, 85, 88], "thi": [0, 1, 4, 16, 20, 21, 22, 23, 24, 26, 28, 29, 31, 34, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 66, 68, 69, 70, 71, 73, 74, 77, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93], "known": [0, 28, 37], "work": [0, 21, 24, 28, 31, 38, 40, 42, 47, 56, 59, 61, 63, 66, 69, 70, 71, 77, 82, 84, 87, 91, 93], "around": [0, 4, 16, 23, 28, 55, 57], "step": [0, 6, 26, 28, 52, 53, 54, 57, 68, 71, 74, 91, 92], "reproduc": [0, 58], "simplifi": [0, 52], "program": [0, 21, 23, 24, 26, 28, 29, 38, 44, 45, 47, 48, 66, 85, 92], "demonstr": [0, 51], "configur": [0, 1, 28, 52, 59, 66, 70, 73, 78, 84, 90], "": [0, 1, 2, 3, 20, 21, 22, 24, 25, 26, 28, 29, 30, 31, 32, 37, 38, 43, 44, 45, 47, 48, 51, 54, 55, 59, 68, 69, 70, 73, 74, 75, 77, 80, 81, 82, 84, 85, 86, 88, 89, 90, 92, 93], "output": [0, 1, 20, 21, 23, 24, 26, 28, 29, 31, 37, 38, 44, 47, 55, 59, 63, 66, 77, 80, 85, 86, 88, 91, 92], "ak": [0, 1, 3, 9, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 35, 37, 38, 39, 40, 41, 44, 46, 47, 48, 49, 51, 56, 57, 59, 60, 66, 68, 71, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93], "get_config": [0, 22], "like": [0, 2, 3, 23, 24, 26, 28, 38, 48, 53, 55, 56, 57, 59, 62, 66, 68, 71, 77, 78, 84, 85, 87, 90, 92, 93], "arkoudavers": 0, "version": [0, 21, 49, 52, 55, 61, 66, 68, 69, 70, 72, 73], "server": [0, 1, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 34, 35, 38, 39, 43, 44, 45, 47, 48, 54, 56, 57, 69, 70, 73, 75, 76, 80, 81, 82, 83, 84, 85, 86, 88, 89, 93], "wa": [0, 20, 21, 23, 24, 26, 28, 29, 31, 37, 38, 44, 45, 47, 48, 56, 61, 62, 68, 70, 77, 85, 88, 89], "built": [0, 20, 21, 28, 38, 47, 53, 55, 56, 57, 66, 68, 70, 71, 77, 81, 82, 88, 93], "Be": [0, 24, 28, 29, 31, 38, 47, 51], "specif": [0, 4, 16, 24, 28, 31, 57, 60, 61, 62, 69, 71, 76, 77, 84], "exampl": [0, 3, 16, 20, 21, 22, 24, 26, 28, 31, 35, 37, 38, 39, 40, 41, 44, 46, 47, 48, 49, 52, 55, 61, 66, 68, 70, 71, 73, 77, 79, 80, 81, 83, 84, 85, 86, 88, 89, 91, 92, 93], "appropri": [0, 24, 28, 31, 51, 55, 62, 66, 68, 72, 77], "base": [0, 1, 2, 3, 4, 13, 16, 20, 21, 23, 24, 27, 28, 29, 31, 34, 37, 38, 42, 46, 48, 55, 68, 70, 74, 76, 77, 78, 79, 80, 81, 82, 84, 88, 90, 93], "anoth": [0, 24, 26, 28, 31, 37, 38, 47, 61, 66, 70, 73, 77, 84, 85, 87, 88, 89, 93], "librari": [0, 1, 51, 73, 93], "e": [0, 1, 2, 3, 5, 21, 23, 24, 26, 28, 31, 37, 38, 39, 44, 47, 48, 51, 55, 56, 57, 69, 70, 72, 77, 80, 82, 83, 85, 89, 92, 93], "numpi": [0, 4, 16, 20, 21, 23, 24, 25, 26, 28, 29, 33, 37, 38, 39, 44, 45, 47, 48, 51, 52, 59, 72, 75, 77, 80, 81, 82, 83, 84, 86, 87, 88, 89, 91, 93], "panda": [0, 24, 28, 29, 31, 39, 45, 48, 51, 62, 64, 72, 77, 78, 82, 84], "scipi": [0, 28], "link": [0, 1, 28, 31, 48, 55, 68, 69], "support": [0, 21, 23, 24, 25, 26, 28, 29, 31, 32, 37, 38, 39, 40, 43, 44, 45, 47, 48, 51, 59, 62, 66, 69, 70, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93], "document": [0, 1, 50, 51, 52, 56, 57, 59, 64, 70, 71], "refer": [0, 26, 28, 56, 59, 68, 70, 72, 85], "don": [0, 24, 28, 31, 47, 56, 57, 73], "have": [0, 1, 3, 21, 24, 26, 28, 29, 31, 37, 38, 39, 40, 41, 44, 45, 47, 48, 51, 54, 55, 56, 57, 59, 60, 61, 63, 68, 69, 70, 71, 72, 77, 80, 82, 83, 84, 85, 88, 89, 90], "anyth": [0, 28, 38, 55], "mind": [0, 16, 59, 73], "check": [0, 1, 3, 16, 20, 21, 24, 26, 28, 29, 31, 37, 38, 44, 47, 49, 51, 55, 56, 57, 75, 82, 91, 92, 93], "out": [0, 22, 24, 28, 37, 44, 56, 57, 60, 61, 63, 68, 71, 86, 87, 89], "our": [0, 28, 38, 51, 52, 54, 55, 59, 61, 66, 68, 73, 74, 77], "outstand": 0, "filter": [0, 24, 27, 28, 44, 77], "label": [0, 21, 24, 26, 28, 29, 41, 45, 82, 84, 85, 90], "first": [0, 3, 24, 26, 28, 31, 32, 37, 38, 39, 40, 45, 47, 53, 57, 58, 59, 60, 61, 66, 68, 69, 71, 76, 77, 80, 83, 84, 85, 86, 90, 93], "identifi": [0, 3, 21, 28, 31, 38, 88], "befor": [0, 28, 48, 52, 68, 77], "start": [0, 3, 4, 6, 16, 21, 26, 28, 29, 33, 35, 38, 39, 44, 46, 47, 48, 61, 76, 79, 82, 83, 85, 87, 89, 93], "onc": [0, 24, 28, 31, 38, 45, 47, 53, 54, 55, 57, 59, 60, 63, 68, 73], "find": [0, 3, 21, 24, 26, 28, 36, 38, 40, 43, 45, 47, 49, 52, 55, 58, 69, 80, 85, 86, 91, 93], "creat": [0, 20, 21, 23, 24, 26, 28, 29, 31, 32, 36, 38, 39, 41, 44, 45, 47, 48, 50, 51, 52, 55, 57, 61, 63, 66, 68, 69, 70, 71, 72, 73, 76, 77, 81, 82, 84, 85, 86, 88], "intend": [0, 21, 23, 24, 28, 37, 38, 44, 47, 60, 66, 69, 70, 78, 84, 90], "leav": [0, 28, 37, 86], "comment": [0, 56, 71], "indic": [0, 3, 7, 10, 13, 20, 21, 22, 23, 24, 26, 28, 29, 31, 33, 35, 37, 38, 40, 44, 45, 46, 47, 48, 49, 59, 61, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93], "mention": [0, 57], "bear": [0, 55, 69, 70], "r": [0, 24, 28, 52, 55, 59, 69, 70, 75], "u": [0, 23, 28, 39, 48, 55, 69, 70, 77], "dev": [0, 24, 28, 69, 70, 72], "awar": 0, "assign": [0, 21, 24, 26, 28, 45, 60, 61, 76, 82, 85, 89, 93], "avoid": [0, 54, 57], "anyon": 0, "duplic": [0, 24, 28, 84], "need": [0, 4, 21, 24, 28, 31, 38, 44, 45, 47, 51, 52, 55, 56, 57, 60, 68, 69, 70, 71, 73, 77, 84, 90], "assist": [0, 71], "want": [0, 1, 24, 28, 66, 70, 72, 84], "discuss": 0, "design": [0, 55, 77], "someon": [0, 55], "tag": [0, 28, 31, 34, 55, 57], "reach": 0, "git": [0, 57, 69, 70], "fork": [0, 68, 69, 70, 74], "workflow": [0, 28, 31, 55, 71, 77], "recommend": [0, 28, 37, 53, 57, 63, 69, 72, 73, 74, 84, 89], "simpl": [0, 16, 59, 71, 86], "branch": [0, 51, 52, 55, 68], "own": [0, 1, 28, 48, 89, 93], "standard": [0, 4, 21, 26, 28, 38, 39, 48, 51, 52, 53, 80, 85, 86], "laid": 0, "pep8": 0, "continu": [0, 55], "integr": [0, 26, 28, 31, 38, 39, 55, 77, 83, 85], "ha": [0, 4, 21, 23, 24, 26, 28, 29, 31, 37, 38, 39, 40, 44, 45, 47, 48, 53, 55, 56, 60, 61, 71, 77, 80, 82, 83, 84, 85, 87, 88, 89, 90], "linter": 0, "flake8": [0, 72], "verifi": [0, 1, 24, 28, 62, 77, 84], "all": [0, 3, 17, 20, 21, 22, 24, 26, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 44, 47, 48, 49, 51, 52, 55, 56, 57, 60, 61, 63, 66, 69, 70, 71, 76, 77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93], "meet": 0, "requir": [0, 3, 4, 16, 22, 24, 26, 28, 29, 31, 33, 38, 39, 45, 53, 54, 56, 57, 61, 62, 63, 66, 71, 77, 83, 84, 85], "isort": 0, "black": 0, "typic": [0, 23, 28, 51, 56, 57, 82], "order": [0, 20, 21, 23, 24, 26, 28, 31, 37, 38, 39, 40, 44, 45, 46, 47, 49, 53, 61, 63, 68, 76, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 93], "ensur": [0, 24, 28, 37, 55, 61, 68, 70, 84, 88], "consist": [0, 24, 28, 37, 59, 80, 84], "util": [0, 24, 28, 31, 50, 55, 68, 69, 70], "line": [0, 28, 32, 56, 60, 66, 71, 81, 92], "length": [0, 3, 21, 26, 28, 31, 33, 35, 39, 40, 43, 44, 45, 47, 52, 61, 75, 80, 83, 85, 89, 90, 91, 93], "105": [0, 22], "paramet": [0, 3, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 70, 77, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "example_featur": 0, "py": [0, 1, 24, 28, 51, 52, 56, 68, 71, 72, 75], "fix": [0, 28, 37, 48, 55, 73, 93], "reformat": [0, 77], "done": [0, 24, 28, 57, 68, 71, 84], "1": [0, 1, 3, 6, 14, 19, 20, 21, 22, 24, 26, 28, 31, 33, 35, 37, 38, 39, 40, 44, 45, 46, 47, 49, 50, 52, 53, 55, 56, 59, 60, 61, 64, 66, 69, 70, 71, 72, 73, 75, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93], "file": [0, 1, 16, 20, 21, 24, 26, 28, 29, 31, 32, 38, 43, 44, 47, 51, 53, 56, 57, 62, 63, 66, 68, 69, 70, 72, 73, 85, 93], "For": [0, 2, 3, 21, 24, 26, 28, 31, 35, 39, 46, 47, 48, 49, 51, 52, 56, 59, 64, 66, 68, 69, 70, 71, 74, 77, 79, 83, 85, 86, 87, 88, 89, 91, 93], "user": [0, 1, 20, 21, 23, 24, 26, 28, 29, 31, 34, 37, 38, 39, 41, 43, 44, 45, 47, 48, 49, 52, 55, 58, 59, 61, 62, 64, 66, 68, 69, 70, 71, 72, 73, 74, 77, 81, 82, 85, 88, 93], "pycharm": 0, "nice": 0, "interoper": 0, "tool": [0, 69, 70], "style": [0, 21, 23, 24, 26, 28, 29, 38, 44, 45, 47, 48, 84, 85, 88], "doc": [0, 51, 68, 69, 81], "string": [0, 1, 3, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46, 48, 49, 50, 51, 52, 55, 71, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 88, 89, 90, 91], "look": [0, 1, 51, 55, 56, 59, 71, 77, 92], "similar": [0, 28, 31, 47, 52, 59, 77, 88, 89, 93], "surround": 0, "function": [0, 1, 4, 16, 21, 45, 47, 52, 55, 56, 59, 60, 62, 63, 66, 71, 76, 77, 78, 81, 82, 84, 85, 86, 88, 89, 90, 91, 93], "space": [0, 1, 3, 28, 37, 39, 48, 52, 68, 71, 83, 86, 93], "The": [0, 1, 2, 3, 4, 16, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 49, 51, 53, 55, 59, 60, 61, 62, 66, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93], "ci": 0, "fail": [0, 24, 28, 31, 37, 55, 77, 84, 88], "tab": [0, 55, 68], "ar": [0, 1, 3, 4, 16, 21, 23, 24, 26, 28, 29, 31, 37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 52, 53, 55, 56, 57, 59, 60, 61, 63, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93], "lowercamelcas": 0, "variabl": [0, 26, 28, 31, 33, 38, 43, 44, 47, 52, 53, 69, 70, 71, 80, 85, 89, 93], "name": [0, 1, 2, 3, 16, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 34, 38, 39, 44, 45, 47, 48, 49, 52, 53, 55, 59, 60, 61, 63, 68, 70, 71, 72, 76, 77, 78, 82, 83, 84, 85, 90], "procedur": 0, "var": [0, 1, 15, 26, 28, 38, 51, 76, 80, 85, 86], "ax": [0, 11], "0": [0, 3, 6, 11, 15, 16, 20, 21, 22, 24, 26, 28, 29, 31, 33, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 51, 52, 53, 59, 60, 61, 66, 69, 70, 72, 73, 75, 77, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "real": [0, 9, 28, 39, 55, 61], "proc": [0, 51], "printit": 0, "x": [0, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 23, 24, 25, 26, 28, 31, 37, 38, 41, 44, 47, 49, 59, 73, 77, 80, 81, 82, 84, 85, 88, 89, 93], "writeln": 0, "uppercamelcas": 0, "class": [0, 39, 52, 76, 77, 78, 81, 82, 84, 85, 89, 90, 93], "foo": [0, 2, 28], "foopar": 0, "re": [0, 21, 22, 24, 26, 28, 68, 85, 92, 93], "confirm": [0, 55], "again": [0, 57, 59, 60, 68, 69], "realli": [0, 28, 47], "behav": [0, 20, 28, 81], "properli": [0, 56, 61, 69, 70], "thing": [0, 4, 16, 59], "note": [0, 1, 2, 3, 4, 16, 20, 21, 22, 23, 24, 26, 28, 29, 31, 32, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 53, 57, 59, 61, 63, 68, 70, 71, 73, 77, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93], "test_": 0, "begin": [0, 28, 47, 87, 93], "otherwis": [0, 20, 21, 24, 25, 26, 28, 29, 31, 35, 38, 39, 40, 44, 45, 47, 51, 74, 77, 81, 82, 84, 85, 88, 89, 91, 93], "pytest": [0, 58, 72], "ini": [0, 52], "so": [0, 1, 21, 23, 24, 26, 28, 31, 37, 38, 44, 45, 47, 52, 54, 55, 56, 57, 71, 72, 73, 77, 80, 81, 84, 85, 90, 91], "dure": [0, 1, 28, 31, 57, 59, 61, 62, 71, 72], "wiki": 0, "more": [0, 1, 3, 4, 7, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 28, 29, 31, 37, 38, 45, 47, 48, 51, 52, 53, 55, 56, 57, 59, 61, 63, 64, 66, 68, 69, 70, 72, 77, 81, 82, 84, 88, 89, 93], "info": [0, 1, 21, 24, 28, 30, 34, 38, 47], "how": [0, 20, 21, 23, 24, 28, 29, 31, 37, 38, 44, 47, 51, 52, 55, 60, 72, 81, 85, 88], "http": [0, 7, 24, 28, 49, 51, 69, 70, 81], "com": [0, 24, 28, 69, 70], "unit": [0, 1, 22, 24, 28, 37, 48], "categoricaltest": 0, "v": [0, 28, 44, 55, 69, 75, 89], "print": [0, 1, 21, 22, 24, 28, 30, 38, 42, 47, 73, 92], "m": [0, 28, 35, 37, 44, 48, 52, 68, 73, 93], "categorical_test": 0, "singl": [0, 2, 3, 4, 16, 20, 21, 23, 24, 26, 28, 29, 31, 33, 37, 38, 40, 44, 47, 56, 57, 59, 61, 63, 68, 71, 75, 77, 83, 84, 85, 87, 89, 91], "from": [0, 3, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 34, 35, 37, 38, 39, 41, 44, 45, 47, 51, 52, 53, 55, 56, 57, 59, 60, 61, 66, 68, 69, 71, 73, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93], "foo_test": 0, "server_util": [0, 1], "parallel_start_test": 0, "d": [0, 4, 16, 21, 28, 39, 40, 41, 44, 47, 48, 59, 75, 89, 91, 93], "post": [0, 55], "local": [0, 1, 20, 21, 22, 24, 26, 28, 29, 31, 38, 44, 45, 47, 48, 52, 53, 61, 66, 68, 69, 70, 77, 83, 85, 90, 92], "catch": 0, "common": [0, 3, 26, 28, 40, 51, 73, 77, 85, 91, 93], "failur": [0, 28, 31, 68, 77], "earli": 0, "usual": [0, 26, 28, 51, 85], "mypi": [0, 72], "everi": [0, 1, 24, 28, 52, 84, 93], "should": [0, 1, 4, 16, 21, 24, 25, 26, 28, 31, 37, 38, 39, 45, 47, 49, 51, 55, 56, 57, 59, 60, 61, 62, 66, 68, 69, 70, 72, 77, 84, 85, 88, 92], "least": [0, 23, 24, 28, 38, 44, 46, 47, 79, 89], "one": [0, 1, 2, 3, 4, 16, 21, 24, 25, 26, 28, 29, 31, 32, 37, 38, 39, 40, 44, 45, 47, 51, 52, 55, 57, 59, 60, 61, 63, 66, 69, 70, 71, 72, 73, 77, 80, 82, 83, 84, 85, 89, 91, 93], "associ": [0, 1, 28, 31, 45, 49, 52, 55, 77, 89, 90], "number": [0, 1, 3, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 33, 36, 37, 38, 39, 44, 45, 47, 48, 52, 53, 55, 56, 57, 59, 61, 69, 71, 73, 75, 77, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93], "titl": [0, 28, 47, 55], "bodi": 0, "close": [0, 3, 28, 39, 48, 51, 59, 83], "keyword": [0, 21, 28, 44, 45, 83, 90], "doubt": [0, 55], "take": [0, 10, 23, 26, 28, 34, 38, 53, 54, 56, 57, 59, 62, 77, 85], "some": [0, 4, 21, 24, 28, 53, 59, 63, 68, 69, 82, 84, 89, 93], "99999": 0, "pr": [0, 55], "implement": [0, 4, 21, 22, 23, 24, 27, 28, 37, 38, 40, 43, 44, 47, 51, 60, 66, 80, 83, 84, 92, 93], "arg": [0, 3, 28, 39, 44, 48, 51, 71, 83, 85], "super": 0, "cool": 0, "help": [0, 23, 28, 71], "keep": [0, 3, 24, 28, 59, 70, 73, 77, 84], "part": [0, 4, 16, 28, 44, 47, 73, 93], "those": [0, 4, 16, 28, 46, 59, 69, 71, 79, 87], "As": [0, 28, 37, 38, 45, 55, 60, 62, 69, 70, 77, 80, 88, 90, 93], "person": 0, "who": [0, 69, 70], "left": [0, 3, 23, 24, 28, 37, 38, 46, 47, 48, 79, 86, 93], "feedback": 0, "resolv": [0, 54, 66, 73], "convers": [0, 21, 77, 82, 88, 93], "decid": 0, "author": 0, "address": [0, 22, 23, 28, 92], "try": [0, 25, 28, 29, 31, 38, 73], "feel": 0, "readi": [0, 53, 55, 69, 70], "necessari": [0, 51, 55, 68, 73], "track": [0, 56, 63], "ani": [0, 3, 17, 20, 21, 24, 26, 28, 29, 30, 31, 32, 37, 38, 39, 44, 45, 47, 51, 52, 55, 57, 61, 63, 69, 70, 76, 80, 84, 85, 86, 88, 89, 93], "which": [0, 3, 20, 21, 22, 23, 24, 26, 28, 29, 31, 37, 38, 39, 40, 44, 45, 46, 47, 48, 51, 52, 54, 55, 57, 59, 68, 69, 70, 71, 75, 77, 79, 80, 81, 82, 83, 84, 85, 88, 89, 91, 92, 93], "outsid": [0, 60, 71], "scope": [0, 71], "member": 0, "quit": [0, 66], "bit": [0, 7, 21, 23, 28, 37, 38, 39, 44, 47, 52, 56, 77, 81, 83, 84, 88], "experi": [0, 77], "unsur": 0, "ask": 0, "2": [0, 3, 20, 21, 24, 26, 28, 31, 35, 37, 38, 39, 40, 44, 45, 46, 47, 49, 51, 52, 53, 55, 59, 60, 61, 68, 69, 70, 71, 72, 73, 77, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93], "concurr": [0, 77], "approv": 0, "limit": [0, 4, 20, 21, 28, 33, 38, 39, 47, 48, 60, 63, 66, 77, 81, 82, 84, 88, 93], "except": [0, 3, 24, 28, 38, 51, 59, 69, 84, 93], "after": [0, 21, 24, 28, 47, 55, 57, 68, 84, 93], "pass": [0, 1, 3, 16, 21, 23, 24, 26, 28, 31, 37, 38, 44, 45, 47, 55, 77, 84, 85, 90], "conflict": 0, "ideal": [0, 55], "rebas": 0, "master": [0, 55, 68], "prefer": [0, 70, 72, 74], "wrote": 0, "best": [0, 3, 28], "practic": [0, 26, 28, 38, 71, 80, 85], "els": [0, 51, 55], "To": [0, 1, 24, 26, 28, 37, 48, 51, 52, 53, 57, 60, 66, 68, 70, 71, 81, 82, 84, 86, 88, 93], "commit": [0, 55], "histori": [0, 22, 28, 50, 55], "allow": [0, 21, 23, 24, 28, 31, 34, 38, 39, 44, 47, 52, 53, 59, 61, 62, 64, 71, 73, 77, 89], "easi": [0, 28, 34, 52, 55, 59, 68], "manipul": 0, "squash": 0, "web": [0, 55], "interfac": [0, 55], "pierce314159": 0, "ethan": 0, "debandi99": 0, "consensu": [0, 55], "There": [1, 26, 28, 31, 52, 59, 68, 73, 83, 91], "can": [1, 3, 16, 20, 21, 23, 24, 26, 28, 29, 31, 37, 38, 39, 40, 43, 44, 45, 47, 48, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 66, 68, 69, 70, 71, 72, 73, 77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93], "role": 1, "develop": [1, 21, 55, 56, 57, 69, 70, 71, 74, 77], "highlight": [1, 55, 59], "variou": [1, 60], "avail": [1, 22, 28, 31, 38, 52, 57, 61, 73, 77, 86], "separ": [1, 4, 23, 24, 28, 29, 31, 32, 38, 47, 52, 60, 61, 71, 77, 88, 93], "section": [1, 28, 37, 52, 54, 55, 56, 57, 59, 61, 66, 68, 72, 80], "These": [1, 16, 59, 61, 64, 66, 77], "env": [1, 28, 56, 66, 68, 69, 70, 72], "arkouda_serv": [1, 22, 25, 28, 53, 56, 57, 66, 68, 71, 92], "arkouda_server_connection_info": 1, "set": [1, 3, 20, 21, 23, 24, 26, 28, 29, 31, 34, 37, 38, 39, 40, 43, 44, 45, 47, 48, 52, 53, 55, 60, 61, 68, 69, 70, 71, 76, 77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93], "write": [1, 20, 21, 24, 28, 29, 31, 32, 34, 38, 44, 45, 47, 52, 55, 60, 77, 81], "port": [1, 21, 22, 24, 28, 31, 38, 44, 47, 56, 66, 75, 92], "startup": [1, 66, 76], "tune": 1, "buffer": 1, "messag": [1, 20, 21, 22, 24, 28, 29, 34, 38, 39, 44, 47, 51, 66, 77], "aggreg": [1, 24, 26, 28, 44, 49, 59, 76, 77, 84, 85], "sort": [1, 3, 14, 21, 24, 26, 28, 37, 38, 40, 44, 45, 47, 50, 55, 75, 76, 80, 82, 83, 85, 86, 91, 93], "non": [1, 3, 21, 26, 28, 36, 37, 38, 39, 40, 46, 47, 54, 77, 79, 80, 83, 85, 86, 87, 93], "crazi": 1, "system": [1, 20, 21, 28, 38, 43, 47, 51, 52, 70, 71, 72, 73, 74, 77, 80, 81, 82, 88, 92, 93], "thei": [1, 16, 21, 22, 23, 24, 26, 28, 29, 31, 38, 44, 45, 47, 48, 53, 55, 60, 61, 62, 69, 70, 77, 81, 82, 85, 90], "per": [1, 20, 21, 22, 24, 26, 28, 29, 31, 38, 44, 47, 51, 52, 57, 61, 71, 77, 80, 85], "task": [1, 22], "content": [1, 60, 77], "between": [1, 21, 22, 28, 33, 37, 38, 39, 47, 48, 52, 59, 71, 83, 86, 88, 93], "compet": 1, "arkouda_server_aggregation_dst_buff_s": 1, "commun": [1, 28, 46, 55, 70, 79, 83], "arkouda_server_aggregation_src_buff_s": 1, "arkouda_server_aggregation_yield_frequ": 1, "frequenc": [1, 28, 48], "yield": [1, 20, 21, 24, 28, 29, 31, 38, 44, 47, 84, 87], "default": [1, 3, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 34, 35, 37, 38, 39, 40, 43, 44, 45, 47, 48, 49, 52, 54, 60, 61, 66, 70, 71, 75, 77, 80, 81, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93], "1024": [1, 28, 38], "build": [1, 26, 28, 52, 55, 58, 66, 69, 73, 85, 92], "chpl_flag": [1, 54], "A": [1, 2, 20, 21, 22, 23, 24, 26, 27, 28, 31, 37, 38, 39, 41, 43, 44, 45, 47, 55, 59, 65, 75, 77, 80, 81, 82, 84, 86, 87, 88, 89, 90, 91, 93], "automat": [1, 21, 28, 31, 45, 61, 77, 82, 90], "chpl": [1, 51, 56, 68, 69, 70, 71], "addit": [1, 26, 28, 37, 41, 51, 53, 61, 63, 69, 88, 91, 92], "ones": [1, 6, 22, 28, 37, 39, 52, 56, 75, 76, 80, 83], "here": [1, 49, 52, 53, 56, 57, 58, 59, 61, 63, 68, 70, 71, 72, 73, 74, 92], "smemtrack": 1, "true": [1, 3, 6, 7, 14, 20, 21, 22, 23, 24, 26, 28, 29, 31, 33, 35, 36, 37, 38, 39, 40, 41, 44, 45, 47, 48, 49, 52, 59, 70, 77, 78, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93], "lhdf5": 1, "lhdf5_hl": 1, "lzmq": 1, "liconv": 1, "lidn2": 1, "fast": [1, 21, 28, 47], "unless": [1, 28, 31, 37, 47, 93], "arkouda_develop": [1, 56], "o1": 1, "mutual": 1, "exclus": [1, 28, 33, 39, 40, 59, 83, 87, 91], "arkouda_quick_compil": [1, 56, 70], "loop": 1, "invari": 1, "code": [1, 21, 28, 29, 31, 46, 51, 55, 56, 59, 61, 66, 71, 76, 79, 82], "motion": 1, "ccflag": 1, "o0": 1, "arkouda_print_passes_fil": 1, "time": [1, 21, 22, 24, 26, 28, 29, 31, 33, 37, 38, 44, 45, 47, 48, 52, 54, 56, 57, 60, 61, 63, 71, 75, 77, 82, 85, 86, 89, 91, 93], "specifi": [1, 3, 4, 7, 11, 20, 23, 24, 26, 28, 29, 31, 32, 38, 39, 41, 44, 45, 47, 48, 49, 52, 56, 62, 77, 80, 81, 83, 84, 85, 89], "mainli": 1, "nightli": 1, "infrastructur": 1, "chpl_debug_flag": 1, "regex_max_captur": 1, "integ": [1, 21, 23, 24, 26, 28, 31, 33, 37, 38, 39, 40, 48, 61, 76, 80, 81, 82, 83, 84, 85, 88, 89, 91, 93], "chang": [1, 23, 24, 28, 29, 31, 38, 52, 55, 57, 66, 69, 70, 72, 77, 80, 84], "maximum": [1, 22, 24, 26, 28, 38, 39, 52, 77, 80, 83, 84, 85, 86], "captur": [1, 35, 93], "group": [1, 21, 24, 26, 28, 35, 44, 45, 46, 47, 52, 59, 61, 76, 79, 82, 84, 85, 90, 91, 93], "access": [1, 2, 22, 28, 31, 43, 45, 47, 59, 64, 70, 76, 77, 92], "match": [1, 16, 20, 21, 24, 26, 28, 29, 31, 36, 37, 38, 39, 44, 45, 47, 48, 50, 52, 76, 77, 80, 81, 83, 85, 88, 90, 92], "20": [1, 3, 28, 37, 55, 59, 72, 73, 80, 81, 87], "folk": 1, "instal": [1, 28, 38, 56, 73, 92], "anaconda": [1, 66, 68, 73, 74], "through": [1, 28, 37, 51, 53, 55, 66, 70], "instruct": [1, 28, 47, 66, 69, 70, 72, 73, 74, 92], "altern": [1, 55, 56, 68, 70, 73], "setup": [1, 68, 73], "them": [1, 24, 28, 31, 40, 47, 55, 69, 77, 84, 91], "explicitli": [1, 24, 28, 40, 71, 91], "arkouda_zmq_path": 1, "zmq": [1, 68], "arkouda_hdf5_path": 1, "hdf5": [1, 20, 21, 24, 26, 28, 29, 31, 38, 44, 47, 60, 62, 63, 64, 68, 72, 77, 85, 93], "arkouda_arrow_path": 1, "arrow": [1, 72], "arkouda_iconv_path": 1, "iconv": [1, 68, 72], "arkouda_idn2_path": 1, "idn2": [1, 68, 72], "ld_library_path": 1, "lib": [1, 68, 73, 91], "arkouda_skip_check_dep": 1, "skip": [1, 26, 28, 31, 47, 69, 77, 85, 91, 93], "autom": [1, 55], "do": [1, 3, 20, 21, 22, 24, 26, 28, 29, 31, 37, 38, 44, 45, 47, 52, 56, 57, 69, 71, 72, 74, 80, 81, 84, 85, 90], "repeat": [1, 21, 28, 44, 82, 89], "sinc": [1, 4, 28, 37, 57, 82, 84, 88, 93], "dep": [1, 68, 69, 70], "been": [1, 21, 22, 28, 31, 38, 40, 44, 47, 53, 54, 55, 68, 71, 80, 82, 83], "up": [1, 3, 21, 22, 24, 26, 28, 31, 37, 38, 40, 44, 47, 51, 54, 57, 58, 68, 69, 70, 71, 77, 80, 81, 82, 83, 91, 93], "arkouda_server_user_modul": [1, 71], "absolut": [1, 28, 37, 48, 71, 80], "must": [1, 3, 21, 22, 23, 24, 26, 28, 29, 31, 37, 38, 39, 40, 41, 44, 45, 47, 48, 51, 53, 56, 59, 60, 66, 68, 69, 71, 80, 83, 84, 85, 87, 88, 89, 90, 92, 93], "also": [1, 3, 4, 21, 23, 26, 28, 33, 37, 39, 40, 44, 45, 47, 54, 56, 59, 60, 62, 63, 64, 66, 69, 73, 77, 83, 87, 88, 89, 91, 93], "servermodul": [1, 56, 57, 71], "cfg": [1, 56, 57, 71], "regist": [1, 21, 23, 24, 26, 28, 29, 30, 38, 44, 45, 47, 48, 49, 51, 76, 85], "readm": 1, "verbos": [1, 28, 30, 34], "arkouda_verbos": 1, "arkouda_server_host": 1, "hostnam": [1, 21, 22, 24, 28, 31, 38, 44, 47, 56, 66, 75, 92], "arkouda_server_port": 1, "arkouda_client_timeout": 1, "control": [1, 23, 28, 37, 88], "timeout": [1, 22, 92], "arkouda_full_stack_test": 1, "option": [1, 3, 21, 22, 23, 24, 26, 27, 28, 29, 31, 35, 38, 39, 40, 41, 44, 45, 47, 48, 51, 52, 55, 61, 66, 68, 69, 70, 72, 75, 77, 83, 84, 85, 90, 91, 92, 93], "test_data_url": 1, "readalltest": 1, "read_all_test": 1, "arkouda_numlocal": 1, "where": [1, 12, 21, 22, 24, 26, 28, 29, 31, 32, 33, 37, 38, 39, 40, 43, 44, 47, 49, 51, 52, 53, 54, 61, 69, 70, 76, 77, 83, 85, 86, 87, 88, 89, 91, 92, 93], "found": [1, 3, 24, 28, 29, 31, 38, 47, 51, 52, 59, 63, 70, 71, 73], "arkouda_hom": 1, "locat": [1, 26, 28, 29, 37, 38, 43, 45, 47, 52, 55, 57, 68, 73, 80, 85, 90, 93], "execut": [1, 22, 27, 28, 31, 38, 47, 51, 53, 54, 56, 57, 60, 68, 69, 71, 82, 92], "warn": [1, 28, 31, 34, 47, 77, 93], "subject": [1, 28, 48], "futur": [1, 23, 28, 31, 47, 77, 86], "intern": [1, 4, 16, 28, 33, 38, 47, 55], "arkouda_client_directori": [1, 43], "parent": [1, 36], "token": [1, 22, 43, 66, 92], "txt": 1, "arkouda_tunnel_serv": 1, "ssh": 1, "tunnel": 1, "url": [1, 22, 66, 68, 92], "arkouda_key_fil": 1, "keyfil": 1, "arkouda_password": 1, "password": [1, 73], "arkouda_log_level": [1, 28], "side": [1, 20, 21, 22, 24, 26, 28, 29, 30, 31, 35, 38, 39, 44, 45, 47, 48, 51, 55, 56, 66, 71, 73, 77, 80, 81, 82, 85, 86, 87, 88, 89, 92, 93], "log": [1, 9, 26, 28, 34, 37, 39, 41, 47, 76, 80, 85], "level": [1, 28, 34, 40, 45, 52, 56, 60, 61, 68, 69, 70, 71, 74, 77, 90, 91], "arkouda_client_mod": 1, "mode": [1, 20, 21, 23, 26, 28, 29, 31, 38, 44, 47, 76, 83, 85], "ui": 1, "api": [1, 4, 7, 9, 10, 11, 12, 13, 14, 16, 17, 26, 28, 49, 51, 65, 85, 88], "displai": [1, 23, 28, 41, 49, 68, 73], "splash": 1, "cachedaccessor": [2, 28], "str": [2, 6, 7, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 45, 47, 48, 49, 52, 60, 77, 78, 80, 81, 82, 83, 84, 85, 88, 92, 93], "custom": [2, 28, 34, 51, 60, 68, 86], "properti": [2, 4, 16, 24, 28, 29, 38, 44, 45, 48, 51, 61], "object": [2, 3, 4, 6, 16, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 47, 48, 49, 51, 60, 61, 62, 63, 64, 73, 76, 77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "descriptor": [2, 28, 47], "cach": [2, 21, 28, 47], "param": [2, 21, 24, 28, 29, 31, 38, 44, 47, 52], "namespac": [2, 4, 16, 28, 31], "g": [2, 21, 23, 24, 26, 28, 31, 37, 38, 44, 47, 48, 49, 56, 57, 59, 69, 77, 80, 82, 83, 85, 89, 92, 93], "df": [2, 24, 28, 59, 84], "type": [2, 3, 4, 7, 16, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 51, 52, 62, 68, 72, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 92, 93], "extens": [2, 21, 28, 29, 31, 38, 44, 47, 68, 77], "method": [2, 4, 21, 22, 23, 24, 26, 27, 28, 31, 37, 38, 39, 43, 44, 47, 54, 59, 60, 76, 77, 82, 83, 85, 86, 88], "cl": [2, 28], "__init__": [2, 28], "assum": [2, 24, 26, 28, 31, 39, 40, 45, 55, 60, 61, 62, 69, 70, 74, 77, 84, 85, 90, 91], "seri": [2, 24, 28, 39, 48, 50], "datafram": [2, 28, 31, 41, 42, 45, 50, 62, 77, 90], "index": [2, 3, 6, 20, 21, 23, 24, 26, 28, 31, 33, 35, 38, 39, 40, 44, 45, 47, 50, 52, 59, 68, 75, 76, 77, 80, 82, 83, 85, 86, 89, 90, 93], "argument": [2, 3, 23, 24, 26, 28, 37, 38, 44, 45, 47, 49, 51, 66, 71, 90], "data": [2, 7, 20, 21, 23, 24, 25, 26, 28, 29, 31, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 51, 52, 59, 62, 64, 65, 76, 78, 79, 81, 82, 83, 85, 89, 90, 92, 93], "string_oper": [2, 28], "date_oper": [2, 28], "datetimeaccessor": [2, 28], "stringaccessor": [2, 28], "unsqueez": [3, 28], "p": [3, 28, 38, 39], "zero_up": [3, 28], "val": [3, 25, 26, 28, 44, 45, 49, 85, 89], "map": [3, 21, 22, 23, 24, 28, 31, 32, 47, 49, 77, 84, 93], "arrai": [3, 4, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 28, 29, 31, 33, 35, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 51, 52, 60, 61, 66, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 90, 93], "spars": [3, 26, 28, 85, 88], "valu": [3, 4, 13, 20, 21, 22, 23, 24, 26, 28, 29, 31, 32, 33, 37, 38, 39, 40, 44, 45, 47, 48, 49, 52, 59, 61, 63, 70, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 87, 88, 89, 91, 92, 93], "pdarrai": [3, 20, 21, 23, 24, 26, 28, 29, 31, 33, 35, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 51, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 93], "dens": [3, 21, 26, 28, 85], "return": [3, 7, 16, 20, 21, 22, 23, 24, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 44, 45, 46, 47, 48, 49, 51, 60, 62, 77, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 92, 93], "replac": [3, 24, 28, 31, 36, 38, 44, 47, 53, 55, 61, 70, 71, 72, 89, 93], "multipl": [3, 24, 28, 31, 37, 44, 48, 51, 52, 53, 59, 61, 63, 64, 71, 75, 77, 78, 80, 84, 89], "sequenc": [3, 21, 23, 28, 37, 38, 39, 40, 44, 46, 49, 79, 83, 88, 89, 91, 93], "right_align": [3, 28], "right": [3, 23, 24, 28, 38, 46, 47, 48, 55, 79, 84, 87, 92, 93], "two": [3, 19, 21, 23, 24, 26, 28, 29, 33, 37, 38, 39, 40, 44, 45, 47, 48, 49, 59, 60, 69, 71, 77, 80, 83, 85, 91, 93], "impli": [3, 28, 87], "discard": [3, 21, 28, 82], "appear": [3, 21, 24, 26, 28, 29, 31, 38, 40, 45, 47, 55, 85, 86], "hand": [3, 28, 55, 87], "defin": [3, 4, 16, 21, 23, 24, 25, 26, 27, 28, 29, 31, 34, 37, 38, 39, 44, 45, 47, 48, 51, 55, 81, 82, 83, 84, 85, 86, 88], "bool": [3, 6, 7, 8, 11, 12, 14, 15, 17, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 52, 61, 75, 77, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93], "logic": [3, 20, 21, 28, 37, 39, 44, 47, 51, 76, 81, 83, 86, 89], "surviv": [3, 28], "left_align": [3, 28], "nonuniqueerror": [3, 28], "valueerror": [3, 21, 22, 24, 26, 28, 29, 31, 32, 33, 37, 38, 39, 40, 44, 45, 46, 47, 77, 79, 80, 82, 83, 85, 86, 89, 90, 92, 93], "inappropri": [3, 28], "correct": [3, 15, 24, 28, 51, 56, 69, 73, 75, 84], "queri": [3, 28, 77], "item": [3, 21, 24, 28, 38, 39, 40, 45, 49, 82, 84, 90, 91], "search": [3, 21, 28, 35, 40, 47, 76, 82], "each": [3, 20, 21, 22, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 40, 44, 45, 47, 48, 49, 51, 52, 59, 61, 68, 71, 77, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 93], "row": [3, 24, 26, 28, 29, 31, 38, 40, 44, 46, 47, 50, 59, 60, 77, 79, 84, 85, 89, 91], "same": [3, 20, 21, 23, 24, 26, 28, 29, 31, 37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 55, 59, 60, 61, 63, 69, 70, 71, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 93], "shape": [3, 4, 6, 11, 16, 20, 21, 24, 28, 29, 37, 38, 45, 47, 49, 61, 76, 80, 81, 82, 88], "dtype": [3, 4, 6, 7, 15, 16, 20, 21, 24, 26, 28, 29, 31, 33, 36, 37, 38, 39, 40, 44, 46, 47, 48, 50, 51, 52, 59, 75, 76, 77, 80, 81, 83, 85, 86, 87, 88, 91, 93], "its": [3, 7, 9, 10, 11, 12, 13, 14, 17, 21, 25, 28, 29, 37, 38, 44, 45, 47, 55, 61, 70, 80, 88, 89, 90, 93], "int64": [3, 8, 21, 23, 24, 25, 26, 28, 31, 33, 35, 37, 38, 39, 40, 44, 46, 47, 48, 51, 52, 59, 60, 61, 75, 77, 79, 80, 82, 83, 84, 85, 86, 88, 89, 91, 93], "lookup": [3, 28, 29, 45], "kei": [3, 21, 24, 26, 28, 29, 30, 31, 32, 37, 40, 45, 51, 59, 61, 71, 73, 78, 84, 85, 90, 91], "fillvalu": [3, 28], "appli": [3, 24, 26, 28, 37, 52, 80, 84, 85, 93], "domain": [3, 28], "entri": [3, 24, 28, 38, 45, 47, 51, 52, 84], "uniqu": [3, 13, 21, 24, 26, 28, 29, 37, 38, 40, 44, 45, 47, 59, 61, 76, 77, 82, 85, 86, 87, 89, 90, 91, 93], "given": [3, 16, 21, 24, 26, 28, 31, 38, 39, 40, 47, 48, 49, 52, 72, 77, 82, 83, 84, 85, 93], "treat": [3, 20, 23, 24, 25, 28, 46, 52, 59, 79, 81, 84], "tupl": [3, 4, 6, 7, 11, 12, 15, 16, 17, 21, 23, 24, 25, 26, 28, 33, 37, 38, 39, 40, 44, 45, 47, 49, 59, 77, 82, 83, 84, 85, 86, 88, 90, 91, 93], "rang": [3, 21, 24, 28, 29, 31, 33, 37, 38, 39, 44, 45, 47, 48, 75, 77, 80, 83, 84, 86, 90, 93], "evalu": [3, 28, 38, 80, 86], "scalar": [3, 21, 28, 37, 38, 44, 45, 51, 52, 75, 76, 82, 86, 87, 89, 90], "result": [3, 21, 24, 26, 28, 29, 31, 33, 37, 38, 39, 40, 41, 44, 45, 47, 48, 51, 52, 59, 60, 61, 62, 70, 77, 80, 83, 84, 85, 88, 89, 90, 93], "over": [3, 21, 24, 28, 31, 37, 38, 44, 47, 75, 80, 81, 82, 84, 86, 88, 89, 93], "while": [3, 28, 31, 46, 57, 61, 63, 68, 73, 77, 79], "cannot": [3, 20, 21, 23, 24, 26, 28, 29, 31, 37, 38, 39, 44, 45, 47, 48, 63, 73, 77, 81, 82, 85, 88, 93], "other": [3, 21, 23, 24, 26, 28, 29, 31, 37, 38, 39, 44, 46, 47, 48, 52, 56, 57, 59, 77, 78, 79, 80, 82, 85, 89, 91, 93], "complex": [3, 28, 66], "achiev": [3, 28, 68], "arang": [3, 6, 20, 24, 26, 28, 31, 37, 38, 39, 40, 41, 44, 51, 59, 76, 77, 80, 81, 83, 85, 86, 87, 88, 89, 91], "desir": [3, 22, 23, 28, 37, 38, 39, 43, 52, 53, 66, 71, 80, 83, 86, 88, 92, 93], "word": [3, 28], "keys1": [3, 28], "twenti": [3, 28], "_": [3, 28, 35, 47, 93], "5": [3, 20, 21, 22, 24, 26, 28, 37, 38, 39, 40, 44, 46, 47, 52, 59, 60, 61, 63, 70, 72, 77, 79, 80, 81, 83, 84, 85, 87, 88, 89, 91, 93], "keys2": [3, 28], "three": [3, 28, 39, 40, 47, 48, 68, 83, 87, 88, 93], "four": [3, 28, 40, 47, 48, 83, 93], "five": [3, 28, 40, 47, 83, 93], "21": [3, 28, 37, 80, 81], "22": [3, 28, 80, 81], "23": [3, 28, 81], "24": [3, 28, 37, 38, 52, 72, 80, 81], "25": [3, 26, 28, 31, 38, 39, 81, 83, 85], "args1": [3, 28], "thirti": [3, 28], "args2": [3, 28], "aku": [3, 24, 28, 29, 42, 78, 84], "direct": [3, 28, 55, 61, 68], "intermedi": [3, 28], "revkei": [3, 28], "revindic": [3, 28], "size": [3, 4, 16, 20, 21, 24, 25, 26, 28, 29, 31, 33, 37, 38, 39, 44, 45, 46, 47, 48, 49, 52, 59, 61, 62, 63, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 93], "revarg": [3, 28], "idx": [3, 28, 59], "in1d_interv": [3, 28], "interv": [3, 28, 37, 39, 48, 83, 86], "symmetr": [3, 28, 40, 44, 59, 76, 91], "fals": [3, 12, 14, 15, 17, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 35, 36, 37, 38, 39, 40, 44, 45, 47, 48, 49, 52, 59, 75, 77, 80, 82, 83, 84, 85, 88, 89, 91, 93], "test": [3, 21, 24, 28, 31, 40, 53, 55, 56, 57, 59, 66, 71, 84, 91], "membership": [3, 28, 40, 91], "half": [3, 28], "python": [3, 4, 16, 20, 21, 22, 23, 24, 27, 28, 38, 39, 40, 43, 45, 47, 52, 65, 68, 73, 74, 76, 77, 80, 81, 82, 83, 84, 87, 88, 93], "int": [3, 4, 6, 7, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 35, 36, 37, 38, 39, 40, 43, 44, 45, 47, 48, 49, 51, 61, 77, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93], "float": [3, 6, 7, 15, 22, 24, 28, 37, 38, 39, 80, 83, 84, 86, 88], "overlap": [3, 24, 28, 36, 47, 93], "lower_bounds_inclus": [3, 28], "upper_bounds_exclus": [3, 28], "boolean": [3, 7, 21, 24, 26, 28, 35, 37, 38, 40, 44, 45, 47, 59, 61, 80, 82, 84, 85, 87, 88, 89, 90, 91, 93], "contain": [3, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 35, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 50, 51, 52, 56, 57, 59, 60, 61, 66, 71, 75, 76, 77, 79, 80, 82, 83, 84, 85, 88, 89, 90, 91, 93], "correspond": [3, 21, 23, 24, 26, 28, 29, 31, 32, 33, 35, 37, 38, 39, 43, 44, 45, 47, 51, 61, 63, 77, 80, 82, 84, 85, 86, 87, 89, 90, 93], "low": [3, 23, 24, 28, 37, 38, 39, 59, 77, 83], "high": [3, 23, 24, 28, 37, 38, 39, 59, 83], "inclus": [3, 24, 28, 37, 38, 39, 48, 80, 83, 87], "equival": [3, 20, 21, 24, 26, 28, 31, 37, 38, 39, 40, 46, 47, 48, 56, 59, 79, 80, 81, 83, 91], "But": [3, 28], "faster": [3, 21, 28, 40, 56, 82, 91], "mani": [3, 21, 28, 52, 82, 85], "second": [3, 22, 28, 32, 37, 39, 40, 45, 47, 48, 51, 52, 56, 59, 80, 83, 88, 90, 91, 92, 93], "trivial": [3, 28], "search_interv": [3, 28], "tiebreak": [3, 28], "none": [3, 4, 6, 10, 11, 12, 15, 16, 17, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 39, 41, 42, 44, 45, 47, 48, 49, 52, 69, 70, 77, 78, 82, 83, 84, 85, 86, 88, 90, 92], "hierarch": [3, 28], "uint": [3, 24, 28, 31, 38, 39, 47, 60], "numer": [3, 24, 28, 38, 39, 41, 45, 46, 50, 61, 76, 77, 79, 82, 88, 90, 93], "than": [3, 4, 20, 21, 24, 26, 28, 29, 31, 37, 38, 39, 40, 44, 45, 46, 47, 53, 55, 56, 63, 77, 79, 81, 82, 83, 84, 85, 88, 91, 93], "lowest": [3, 24, 28, 38, 39], "chosen": [3, 28, 37, 38, 80, 88, 89], "compon": [3, 21, 23, 24, 26, 28, 29, 30, 38, 44, 45, 47, 48, 49, 52, 61, 63, 85], "dimens": [3, 20, 21, 28, 37, 38, 47, 59, 61, 81, 82, 88, 89], "multi": [3, 20, 23, 26, 28, 31, 40, 45, 59, 78, 81, 83, 85, 88, 90, 91], "dimension": [3, 20, 28, 37, 39, 45, 77, 81, 88, 90], "satisfi": [3, 24, 28, 31], "condit": [3, 12, 24, 28, 37, 38, 80], "11": [3, 24, 28, 37, 44, 52, 57, 59, 60, 80, 81, 84, 86, 87, 89], "end": [3, 21, 24, 28, 33, 35, 37, 38, 39, 44, 47, 48, 54, 76, 82, 83, 87, 89, 93], "9": [3, 21, 24, 26, 28, 31, 37, 38, 39, 44, 46, 47, 52, 59, 69, 70, 77, 79, 80, 81, 83, 85, 86, 87, 89, 93], "10": [3, 21, 26, 28, 31, 37, 38, 39, 41, 44, 45, 46, 47, 51, 52, 59, 68, 70, 72, 77, 79, 80, 81, 83, 85, 86, 87, 88, 89, 90], "6": [3, 20, 24, 26, 28, 31, 37, 38, 39, 40, 44, 47, 52, 59, 69, 70, 72, 73, 75, 77, 80, 81, 83, 84, 85, 86, 87, 89, 91, 93], "15": [3, 21, 28, 47, 70, 81, 87], "12": [3, 26, 28, 31, 37, 44, 47, 52, 72, 80, 81, 85, 87, 89], "30": [3, 28, 56, 72, 81], "bi_start": [3, 28], "bigint_from_uint_arrai": [3, 28, 38, 39], "cast": [3, 4, 23, 28, 37, 38, 39, 47, 51, 76, 77, 83, 93], "uint64": [3, 8, 23, 25, 26, 28, 37, 38, 39, 46, 52, 61, 75, 79, 80, 83, 84, 86, 88, 93], "bi_end": [3, 28], "bi_val": [3, 28], "92233720368547758091": [3, 28], "92233720368547758090": [3, 28], "166020696663385964564": [3, 28], "36893488147419103233": [3, 28], "92233720368547758085": [3, 28], "92233720368547758095": [3, 28], "110680464442257309696": [3, 28], "110680464442257309708": [3, 28], "166020696663385964574": [3, 28], "is_cosort": [3, 28], "iff": [3, 21, 28, 29, 38, 45, 47, 48, 80, 86], "cosort": [3, 28], "were": [3, 20, 26, 28, 29, 31, 38, 44, 47, 56, 71, 81, 85, 89, 93], "column": [3, 21, 24, 26, 28, 29, 31, 38, 41, 44, 45, 46, 47, 59, 60, 63, 64, 77, 79, 85, 89, 90], "tabl": [3, 22, 28, 30, 38, 44, 47, 51, 52, 72, 88, 89], "cosorted": [3, 28], "rais": [3, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 51, 77, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93], "typeerror": [3, 21, 23, 24, 25, 26, 28, 29, 31, 33, 34, 37, 38, 39, 40, 44, 45, 46, 47, 48, 51, 77, 79, 80, 82, 83, 85, 86, 90, 91, 93], "interval_lookup": [3, 28], "express": [3, 21, 28, 31, 47, 52, 76, 77, 82, 84, 87, 88], "upper_bounds_inclus": [3, 28], "valid": [3, 16, 21, 28, 31, 37, 39, 45, 47, 77, 82, 88, 93], "wrapper": [4, 7, 9, 10, 11, 12, 13, 14, 16, 17, 23, 28, 88], "ndarrai": [4, 16, 20, 21, 28, 38, 39, 41, 44, 47, 59, 77, 80, 81, 82, 88, 89, 93], "differ": [4, 21, 22, 23, 24, 26, 28, 29, 31, 33, 37, 38, 39, 40, 43, 44, 45, 47, 48, 49, 51, 52, 57, 59, 60, 61, 63, 69, 70, 76, 77, 81, 83, 84, 85, 86, 91, 92], "particular": [4, 71], "promot": [4, 51], "rule": [4, 28, 37, 88], "subset": [4, 21, 22, 24, 27, 28, 44, 71, 80, 84, 89], "goal": 4, "minim": [4, 24, 28, 56, 57, 83, 84], "compliant": 4, "onli": [4, 16, 21, 24, 26, 28, 29, 31, 35, 37, 38, 39, 40, 44, 45, 46, 47, 51, 52, 54, 56, 57, 59, 61, 63, 68, 71, 72, 74, 75, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93], "subclass": 4, "n": [4, 16, 21, 24, 26, 28, 31, 37, 38, 39, 40, 44, 45, 47, 48, 60, 70, 72, 75, 80, 81, 82, 83, 84, 85, 89, 90], "docstr": [4, 7, 9, 10, 11, 12, 13, 14, 16, 17, 51], "np": [4, 7, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 28, 33, 37, 38, 39, 41, 44, 47, 48, 59, 77, 80, 81, 82, 83, 84, 85, 86, 88, 89, 93], "restrict": [4, 16], "usag": [4, 16, 58, 66, 75, 89, 92], "attribut": [4, 20, 21, 24, 29, 31, 38, 47, 48, 77, 81, 88], "underscor": [4, 16], "construct": [4, 16, 21, 28, 39, 44, 47, 51, 59, 76, 85, 87], "directli": [4, 16, 21, 28, 38, 45, 46, 47, 59, 68, 79, 81, 82, 84, 88, 93], "rather": [4, 16, 21, 24, 28, 47], "creation": [4, 16, 21, 51, 55, 76], "asarrai": [4, 6, 16], "_type": [4, 6, 7, 15], "devic": [4, 6, 16], "mt": [4, 16], "ndim": [4, 16, 20, 21, 28, 38, 47, 76, 81, 82, 88], "ellipsi": [4, 6, 7, 11, 12, 15, 16, 17, 28, 38, 39, 49], "tolist": [4, 16], "convert": [4, 16, 20, 21, 23, 24, 28, 37, 38, 39, 44, 45, 47, 48, 49, 60, 77, 81, 82, 84, 88, 89, 90, 91, 93], "nest": [4, 16, 28, 31, 61, 77], "to_ndarrai": [4, 16, 20, 21, 23, 28, 29, 37, 38, 39, 41, 44, 47, 48, 59, 76, 77, 81, 82, 86, 88, 89, 93], "to_devic": [4, 16], "stream": [4, 16, 56], "inf": [5, 28, 37], "nan": [5, 24, 26, 28, 37, 45, 84, 85, 88], "pi": [5, 28, 37], "obj": [6, 24, 28, 31, 49], "_array_object": [6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 19], "nestedsequ": 6, "supportsbufferprotocol": [6, 16], "copi": [6, 7, 11, 20, 24, 28, 29, 31, 44, 46, 89], "stop": [6, 22, 28, 39, 83, 87], "empti": [6, 23, 24, 26, 28, 31, 37, 38, 40, 44, 45, 68, 80, 83, 84, 86, 90], "empty_lik": 6, "ey": 6, "n_row": 6, "n_col": 6, "k": [6, 28, 38, 52, 80, 86], "from_dlpack": 6, "full": [6, 21, 28, 35, 37, 39, 41, 47, 48, 54, 56, 66, 68, 70, 74, 82, 93], "fill_valu": [6, 28, 39], "full_lik": [6, 28, 39], "linspac": [6, 26, 28, 37, 39, 76, 80, 83, 85, 88], "num": [6, 22, 25, 28, 37], "endpoint": 6, "meshgrid": 6, "xy": 6, "ones_lik": [6, 28, 39, 76, 83], "tril": 6, "triu": 6, "zero": [6, 26, 28, 37, 38, 39, 55, 76, 83, 85, 87, 88], "zeros_lik": [6, 28, 39, 76, 83], "astyp": [7, 28, 38, 47], "can_cast": 7, "from_": 7, "compat": [7, 9, 10, 11, 12, 13, 14, 17, 21, 24, 28, 38, 44, 48, 49, 84, 85], "finfo_object": 7, "ep": 7, "max": [7, 15, 26, 28, 37, 38, 44, 47, 52, 76, 80, 85, 86, 93], "min": [7, 15, 26, 28, 37, 38, 44, 52, 76, 80, 85, 86], "smallest_norm": 7, "iinfo_object": 7, "isdtyp": 7, "kind": [7, 25, 28], "whether": [7, 21, 24, 26, 28, 31, 35, 37, 40, 44, 45, 47, 48, 59, 77, 82, 89, 90, 91, 93], "org": [7, 49, 51, 81], "latest": [7, 49, 51, 69, 70, 73], "api_specif": [7, 49], "gener": [7, 16, 21, 22, 24, 27, 28, 33, 34, 37, 38, 39, 41, 43, 45, 48, 50, 51, 52, 56, 57, 59, 60, 61, 63, 68, 69, 73, 75, 77, 80, 83, 90], "html": [7, 49, 51, 68, 81], "result_typ": 7, "arrays_and_dtyp": 7, "int8": [8, 25, 28, 80, 83, 86, 88, 93], "int16": [8, 25, 28, 80, 83, 86, 88, 93], "int32": [8, 25, 28, 80, 83, 86, 88, 93], "uint8": [8, 25, 28, 37, 47, 61, 80, 83, 86, 88, 93], "uint16": [8, 25, 28, 80, 83, 86, 88, 93], "uint32": [8, 25, 28, 31, 77, 80, 83, 86, 88, 93], "float32": [8, 25, 28, 80, 83, 86], "float64": [8, 25, 26, 28, 37, 38, 39, 40, 46, 52, 60, 61, 75, 79, 80, 83, 84, 85, 86, 88, 91], "complex64": [8, 25, 28], "complex128": [8, 25, 28], "ab": [9, 28, 37, 48, 76, 80], "aco": 9, "arcco": [9, 28, 37], "acosh": 9, "arccosh": [9, 28, 37], "x1": [9, 12, 19], "x2": [9, 12, 19], "asin": 9, "arcsin": [9, 28, 37], "asinh": 9, "arcsinh": [9, 28, 37], "atan": 9, "arctan": [9, 28, 37], "atan2": 9, "arctan2": [9, 28, 37], "atanh": 9, "arctanh": [9, 28, 37], "bitwise_and": 9, "bitwise_left_shift": 9, "left_shift": 9, "bitwise_invert": 9, "invert": [9, 26, 28, 40, 91], "bitwise_or": 9, "bitwise_right_shift": 9, "right_shift": 9, "bitwise_xor": 9, "ceil": [9, 28, 37], "conj": 9, "co": [9, 26, 28, 37, 39, 76, 80, 85], "cosh": [9, 28, 37], "divid": [9, 28, 38], "equal": [9, 24, 28, 33, 37, 61, 63, 86, 89], "exp": [9, 28, 37, 39, 76, 80], "expm1": [9, 28, 37], "floor": [9, 28, 37, 38], "floor_divid": [9, 28, 38], "greater": [9, 28, 39, 83], "greater_equ": 9, "imag": 9, "isfinit": [9, 28, 37], "isinf": [9, 28, 37], "isnan": [9, 28, 37], "less": [9, 21, 26, 28, 29, 38, 44, 47], "less_equ": 9, "log1p": [9, 28, 37], "log2": [9, 28, 37], "log10": [9, 28, 37], "logaddexp": 9, "logical_and": 9, "logical_not": 9, "logical_or": 9, "logical_xor": 9, "multipli": [9, 26, 28, 51, 85], "neg": [9, 28, 39, 44, 54, 83, 87, 89], "not_equ": 9, "posit": [9, 24, 28, 35, 36, 38, 45, 47, 87, 90, 93], "pow": 9, "power": [9, 28, 38, 65, 87], "remaind": [9, 28, 38, 47, 93], "round": [9, 28, 37, 52], "sign": [9, 28, 31, 37, 38, 77, 84, 88], "sin": [9, 28, 37, 76, 80], "sinh": [9, 28, 37], "squar": [9, 26, 28, 37, 38, 80, 85], "sqrt": [9, 26, 28, 38, 80, 85], "subtract": 9, "tan": [9, 28, 37], "tanh": [9, 28, 37], "trunc": [9, 28, 37], "axi": [10, 11, 12, 14, 15, 17, 19, 24, 28, 41, 44, 45, 46, 79, 84, 89, 90], "broadcast_arrai": 11, "broadcast_to": 11, "broadcast": [11, 26, 28, 37, 38, 49, 76, 80, 85], "concat": [11, 24, 28, 29, 44, 45, 84, 90], "concaten": [11, 21, 24, 28, 40, 44, 45, 47, 49, 51, 76, 89, 90, 93], "expand_dim": 11, "flip": 11, "permute_dim": 11, "transpos": [11, 28, 44, 77], "reshap": [11, 20, 24, 28, 38, 76, 81], "roll": 11, "shift": 11, "squeez": 11, "stack": [11, 93], "argmax": [12, 26, 28, 38, 44, 76, 80, 85, 86], "keepdim": [12, 15, 17], "argmin": [12, 26, 28, 38, 44, 76, 80, 85, 86], "nonzero": [12, 26, 28, 36, 47, 93], "uniqueallresult": 13, "namedtupl": 13, "inverse_indic": 13, "count": [13, 24, 26, 28, 36, 37, 38, 44, 45, 47, 52, 59, 76, 80, 85, 89, 93], "uniquecountsresult": 13, "uniqueinverseresult": 13, "unique_al": 13, "unique_count": 13, "unique_invers": 13, "unique_valu": [13, 28, 37, 38, 86], "argsort": [14, 21, 22, 24, 26, 28, 29, 38, 46, 76, 79, 80, 82, 84, 85, 93], "descend": [14, 24, 28, 39, 45, 83, 84, 90], "stabl": [14, 28, 46, 79, 81], "mean": [15, 22, 24, 26, 28, 31, 38, 39, 43, 44, 47, 52, 76, 77, 80, 85, 86], "prod": [15, 26, 28, 38, 44, 76, 80, 85, 86], "std": [15, 26, 28, 38, 48, 76, 80, 85, 86], "sum": [15, 26, 28, 37, 38, 44, 48, 76, 80, 85, 86], "annot": 16, "aren": [16, 69, 70], "signatur": [16, 27, 51], "input": [16, 21, 23, 24, 26, 37, 38, 39, 40, 44, 46, 48, 51, 55, 77, 79, 80, 82, 85, 88, 90, 91], "pycapsul": 16, "supportsdlpack": 16, "protocol": 16, "proto": 16, "def": [16, 51, 60, 71], "meth": 16, "self": [16, 21, 24, 28, 38, 44, 47, 77, 78, 81, 82, 84, 88, 89, 90, 93], "Such": 16, "primarili": [16, 77], "static": [16, 21, 24, 26, 28, 29, 38, 44, 45, 47, 85], "checker": 16, "recogn": 16, "structur": [16, 21, 24, 28, 44, 59, 63, 84, 85, 88, 89, 93], "subtyp": 16, "duck": 16, "c": [16, 20, 24, 28, 38, 39, 40, 41, 44, 47, 52, 54, 56, 69, 75, 81, 84, 88, 89, 91, 93], "func": 16, "pep": 16, "544": 16, "decor": 16, "runtime_check": 16, "act": [16, 28, 38, 51], "runtim": [16, 22, 54], "presenc": 16, "ignor": [16, 24, 26, 28, 31, 37, 48, 77, 84, 88], "genproto": 16, "linalg": [18, 28, 50], "matmul": 19, "matrix": [19, 24, 26, 28, 85], "product": [19, 26, 28, 37, 38, 39, 77, 80, 81, 85, 86], "tensordot": 19, "matrix_transpos": 19, "vecdot": 19, "arrayview": [20, 28, 31, 37, 38, 76, 77, 88], "pdarrayclass": [20, 21, 23, 24, 26, 28, 29, 31, 33, 35, 37, 39, 40, 44, 45, 46, 47, 50], "row_major": [20, 28, 38, 81], "view": [20, 28, 55, 59, 64, 68, 74, 81, 88], "arraryview": [20, 28, 81], "similarli": [20, 28, 52, 59, 81], "store": [20, 23, 24, 26, 28, 31, 39, 43, 47, 52, 60, 61, 64, 73, 77, 81, 82, 83, 85, 89, 93], "being": [20, 24, 28, 29, 31, 37, 38, 45, 59, 61, 62, 63, 71, 77, 81, 84, 87, 90], "element": [20, 21, 24, 26, 28, 32, 33, 35, 37, 38, 39, 40, 44, 45, 47, 48, 51, 59, 71, 76, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 93], "int_scalar": [20, 21, 24, 25, 26, 28, 31, 37, 38, 39, 44, 46, 47, 48, 79, 80, 81, 83, 85, 86, 88], "items": [20, 28, 38, 39, 47, 76, 77, 81, 88], "byte": [20, 21, 24, 25, 28, 31, 33, 38, 39, 47, 61, 66, 77, 81, 82, 84, 88, 93], "read": [20, 21, 24, 28, 29, 31, 32, 38, 45, 47, 60, 61, 62, 63, 81, 93], "By": [20, 21, 23, 24, 26, 28, 29, 31, 37, 38, 40, 44, 47, 48, 81, 85, 91, 93], "f": [20, 21, 28, 37, 38, 39, 47, 66, 69, 70, 72, 77, 80, 81, 93], "column_major": [20, 28, 38, 81], "objtyp": [20, 21, 24, 26, 28, 29, 38, 44, 45, 47, 61], "transfer": [20, 21, 24, 28, 31, 38, 44, 47, 52, 77, 81, 82, 84, 88, 89, 93], "client": [20, 21, 24, 28, 38, 39, 47, 48, 50, 62, 68, 69, 70, 71, 72, 73, 76, 81, 82, 84, 88, 89, 93], "exce": [20, 21, 24, 28, 38, 39, 47, 48, 77, 81, 82, 83, 84, 88, 93], "maxtransferbyt": [20, 21, 24, 28, 38, 39, 47, 48, 77, 81, 82, 84, 88, 93], "runtimeerror": [20, 21, 22, 24, 26, 28, 29, 30, 31, 35, 37, 38, 39, 40, 44, 45, 47, 48, 77, 80, 81, 82, 83, 85, 86, 88, 91, 92, 93], "error": [20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 34, 35, 37, 38, 39, 44, 45, 47, 48, 51, 61, 63, 73, 77, 80, 81, 82, 84, 85, 86, 88, 92, 93], "thrown": [20, 21, 24, 28, 29, 30, 31, 35, 38, 39, 44, 45, 47, 77, 80, 81, 82, 86, 88, 93], "receiv": [20, 21, 22, 24, 28, 29, 31, 38, 44, 47, 77, 81, 88, 92], "doe": [20, 21, 22, 24, 26, 28, 29, 31, 32, 38, 39, 41, 44, 45, 47, 56, 59, 61, 63, 77, 81, 82, 83, 84, 85, 88, 90, 92, 93], "protect": [20, 21, 28, 38, 39, 47, 77, 81, 82, 88, 93], "overflow": [20, 21, 28, 37, 38, 47, 77, 81, 82, 88, 93], "memori": [20, 21, 22, 24, 28, 29, 31, 38, 44, 47, 57, 58, 61, 66, 77, 81, 82, 88, 93], "run": [20, 21, 22, 24, 28, 31, 37, 38, 44, 47, 56, 57, 59, 66, 68, 69, 70, 72, 73, 75, 77, 81, 82, 88, 89, 92, 93], "assumpt": [20, 21, 28, 38, 39, 47, 77, 81, 82, 88, 93], "distribut": [20, 21, 23, 24, 26, 28, 29, 31, 38, 39, 41, 44, 47, 66, 69, 70, 77, 80, 81, 82, 83, 85, 88, 91, 93], "mai": [20, 21, 24, 28, 29, 31, 38, 39, 40, 47, 59, 61, 66, 68, 70, 72, 73, 77, 81, 82, 83, 84, 88, 93], "overrid": [20, 21, 23, 28, 38, 39, 47, 56, 77, 81, 82, 88, 93], "larger": [20, 21, 28, 38, 39, 47, 55, 59, 77, 81, 82, 88, 93], "proce": [20, 21, 28, 38, 39, 47, 77, 81, 82, 88, 93], "caution": [20, 21, 28, 38, 39, 47, 77, 81, 82, 88, 93], "to_list": [20, 21, 23, 28, 29, 38, 44, 45, 47, 59, 77, 81, 88, 89, 93], "3": [20, 24, 26, 28, 31, 35, 37, 38, 39, 40, 41, 44, 46, 47, 51, 52, 59, 60, 61, 69, 70, 72, 75, 76, 77, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 91, 93], "4": [20, 21, 24, 26, 28, 31, 35, 37, 38, 39, 40, 44, 46, 47, 52, 59, 61, 69, 70, 72, 77, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 91, 93], "to_hdf": [20, 21, 23, 24, 26, 28, 29, 31, 38, 44, 47, 61, 64, 76, 77, 85], "prefix_path": [20, 21, 23, 24, 26, 28, 29, 31, 38, 44, 47, 85], "dataset": [20, 21, 23, 24, 26, 28, 29, 31, 38, 44, 47, 60, 61, 63, 64, 85, 93], "truncat": [20, 21, 23, 26, 28, 29, 31, 37, 38, 44, 47, 61, 63, 85], "file_typ": [20, 21, 23, 24, 26, 28, 29, 31, 38, 44, 47, 85], "save": [20, 21, 24, 26, 28, 29, 31, 38, 44, 47, 52, 53, 55, 56, 61, 62, 63, 77, 82, 85, 91], "path": [20, 24, 28, 29, 31, 32, 38, 43, 52, 57, 68, 69, 70, 71, 73, 77], "append": [20, 21, 24, 26, 28, 29, 31, 38, 40, 44, 47, 61, 63, 76, 83, 85, 93], "overwrit": [20, 21, 24, 26, 28, 29, 31, 38, 44, 47, 85, 88], "exist": [20, 21, 22, 24, 26, 28, 29, 31, 32, 38, 39, 44, 47, 61, 63, 68, 83, 84, 85, 92], "format": [20, 21, 22, 23, 24, 28, 29, 30, 31, 38, 43, 44, 47, 51, 59, 61, 62, 63, 71, 84, 89, 92, 93], "date": [20, 28, 48, 55], "update_hdf": [20, 21, 23, 24, 26, 28, 29, 31, 38, 44, 47], "repack": [20, 21, 23, 24, 26, 28, 29, 31, 38, 44, 47], "ad": [20, 21, 23, 24, 28, 29, 31, 34, 38, 44, 47, 56, 58, 59, 63, 68, 77, 92], "directori": [20, 21, 24, 26, 28, 29, 31, 32, 38, 43, 44, 47, 52, 53, 56, 57, 66, 68, 69, 70, 71, 72, 73, 74, 75, 85], "filenam": [20, 21, 24, 26, 28, 29, 31, 38, 44, 47, 52, 77, 85], "prefix": [20, 21, 24, 26, 28, 29, 31, 38, 44, 47, 48, 76, 85, 93], "share": [20, 21, 24, 26, 28, 29, 38, 44, 47, 55, 73, 85], "releas": [20, 21, 24, 28, 29, 31, 38, 44, 47, 52, 57, 58, 69, 70], "delet": [20, 21, 22, 23, 24, 26, 28, 29, 31, 38, 44, 45, 47, 48, 52, 57, 66, 85], "inaccess": [20, 21, 24, 28, 29, 31, 38, 44, 47], "overwritten": [20, 21, 24, 28, 29, 31, 38, 44, 47, 61, 63], "remov": [20, 21, 24, 28, 29, 31, 38, 44, 47, 52, 56, 72, 84, 89, 93], "remain": [20, 21, 24, 28, 29, 31, 38, 44, 47, 69, 77, 78, 84, 90], "better": [20, 21, 24, 28, 29, 31, 38, 44, 47], "perform": [20, 21, 24, 26, 28, 29, 31, 33, 37, 38, 40, 44, 47, 52, 54, 55, 56, 59, 60, 62, 68, 76, 77, 80, 83, 84, 85, 88], "caus": [20, 21, 24, 28, 29, 31, 38, 44, 47, 66, 68], "expand": [20, 21, 24, 28, 29, 31, 38, 44, 47, 49, 77], "success": [20, 21, 22, 24, 28, 29, 31, 33, 37, 38, 44, 47, 88, 92], "file_format": [20, 21, 24, 28, 29, 31, 38, 44, 47], "_local": [20, 21, 24, 28, 29, 31, 38, 44, 47, 61], "determin": [20, 21, 24, 26, 28, 29, 31, 38, 44, 47, 49, 55, 61, 71, 77, 82, 84, 85], "becaus": [20, 21, 24, 28, 29, 31, 37, 39, 44, 47, 56, 59, 60, 61, 62, 66, 77, 82, 83, 84, 89, 93], "kwarg": [21, 26, 28, 39, 42, 48, 49, 82, 85], "repres": [21, 23, 26, 28, 44, 45, 47, 48, 52, 61, 82, 85, 93], "belong": [21, 82], "often": [21, 82, 86], "speed": [21, 28, 40, 54, 58, 71, 82, 83, 91], "oper": [21, 22, 23, 24, 26, 28, 29, 31, 38, 43, 44, 46, 47, 51, 52, 55, 62, 66, 72, 74, 75, 76, 79, 84, 85, 87, 92], "cost": [21, 82], "initi": [21, 22, 28, 38, 39, 52, 70, 75, 82, 83, 88, 92], "navalu": [21, 82], "miss": [21, 82], "null": [21, 28, 31, 47, 61, 82, 93], "permut": [21, 24, 26, 28, 46, 47, 49, 61, 76, 79, 82, 85, 91], "segment": [21, 26, 28, 31, 33, 44, 47, 49, 61, 76, 77, 82, 85, 89, 91, 93], "offset": [21, 26, 28, 31, 39, 47, 61, 77, 82, 91, 93], "union": [21, 22, 24, 28, 30, 31, 33, 37, 38, 39, 40, 44, 46, 47, 59, 76, 77, 79, 80, 82, 83, 86, 91, 93], "nlevel": [21, 76, 82], "distinct": [21, 24, 28, 82], "rank": [21, 28, 38, 39, 47, 61, 76, 77, 82, 83, 87], "binop": [21, 24, 28, 31, 38, 44, 47], "registerablepiec": 21, "requiredpiec": 21, "classmethod": [21, 23, 24, 28, 29, 44, 45, 82], "from_cod": [21, 76, 82], "pre": [21, 49, 82], "comput": [21, 22, 24, 26, 28, 33, 37, 38, 44, 47, 51, 59, 77, 80, 82, 84, 85, 86, 88, 89, 91, 93], "constructor": [21, 28, 44, 59, 82], "normal": [21, 22, 23, 24, 26, 28, 38, 39, 48, 51, 80, 82, 84, 85], "from_return_msg": [21, 23, 24, 26, 28, 29, 44, 45, 47], "rep_msg": [21, 23, 24, 26, 28, 29, 44, 47, 71], "standardize_categori": 21, "origin": [21, 23, 24, 26, 28, 29, 31, 35, 37, 38, 40, 44, 45, 47, 48, 80, 82, 83, 84, 85, 89, 93], "remap": 21, "set_categori": 21, "new_categori": 21, "old": [21, 55], "unchang": 21, "na": [21, 61], "produc": [21, 28, 47, 82, 93], "isna": 21, "reset_categori": 21, "recomput": [21, 28, 31], "unus": [21, 28, 31, 77], "slice": [21, 24, 28, 38, 59, 76, 81, 82, 84, 89, 93], "In": [21, 24, 26, 28, 31, 37, 38, 47, 51, 52, 53, 55, 56, 59, 66, 68, 69, 71, 73, 77, 80, 85, 86, 87, 89, 92, 93], "case": [21, 22, 26, 28, 29, 31, 37, 38, 45, 47, 48, 52, 54, 59, 60, 61, 63, 68, 69, 71, 73, 80, 90], "elimin": [21, 63], "instanc": [21, 23, 24, 26, 28, 38, 39, 45, 47, 52, 63, 68, 71, 77, 80, 84, 85, 86, 88, 93], "substr": [21, 23, 28, 47, 76, 82], "str_scalar": [21, 25, 28, 36, 47, 82, 93], "regex": [21, 28, 47, 82, 93], "regular": [21, 28, 47, 76, 82], "handl": [21, 22, 24, 28, 37, 47, 62, 77, 82, 84, 88, 93], "re2": [21, 28, 47, 68, 82, 93], "lookahead": [21, 28, 47, 82, 93], "lookbehind": [21, 28, 47, 82, 93], "rasi": [21, 28, 47, 82, 93], "startswith": [21, 28, 47, 76, 82, 93], "endswith": [21, 28, 47, 76, 82, 93], "significantli": [21, 56, 82], "instead": [21, 23, 24, 26, 28, 31, 38, 47, 52, 75, 77, 80, 82, 85, 93], "in1d": [21, 28, 40, 51, 59, 76, 82, 91, 93], "against": [21, 28, 44, 47, 52, 59, 77, 89, 93], "intersect1d": [21, 28, 40, 44, 51, 59, 76, 89, 91], "union1d": [21, 28, 40, 44, 51, 59, 76, 89, 91], "consid": [21, 24, 28, 55, 93], "wise": [21, 28, 37, 38, 76, 81], "b": [21, 22, 24, 26, 28, 31, 33, 37, 38, 39, 40, 41, 44, 45, 46, 47, 59, 75, 79, 80, 84, 85, 86, 87, 88, 89, 91, 93], "scale": [21, 28, 41, 54, 59, 65], "arbitrarili": 21, "larg": [21, 52, 80], "cat": [21, 28, 31, 73], "cattwo": 21, "hash": [21, 28, 37, 44, 46, 47, 79], "128": [21, 28, 37, 44, 47], "ith": [21, 28, 44, 47], "siphash128": [21, 28, 47], "balanc": [21, 28, 47], "dictionari": [21, 22, 24, 26, 28, 31, 32, 47, 49, 71, 77, 84, 85], "realist": [21, 28, 47], "about": [21, 22, 28, 30, 38, 47, 48, 51, 52, 56, 66, 71, 80, 81, 93], "probabl": [21, 28, 47], "collis": [21, 28, 37, 47], "neglig": [21, 28, 47], "place": [21, 23, 24, 26, 28, 29, 31, 34, 38, 43, 44, 45, 47, 48, 49, 53, 57, 80, 85], "togeth": [21, 24, 26, 28, 47, 84, 85, 91], "guarante": [21, 28, 46, 47, 79, 93], "lie": [21, 28, 47], "contigu": [21, 28, 33, 47], "necessarili": [21, 28, 47], "groupbi": [21, 24, 26, 28, 31, 44, 47, 76, 82, 93], "simpli": [21, 22, 28, 37, 83], "even": [21, 24, 26, 28, 38, 61, 80, 84, 85, 92], "merg": [21, 24, 28, 55], "synchron": 21, "interleav": [21, 24, 28, 40, 83], "greatli": [21, 28, 40, 83], "improv": [21, 28, 40, 55, 56, 71, 83], "determinist": [21, 28, 40, 83], "expens": 21, "slower": [21, 93], "categorical_arrai": 21, "collect": [21, 24, 26, 28, 29, 31, 38, 42, 44, 47, 69, 85], "within": [21, 22, 24, 26, 27, 28, 29, 31, 38, 39, 44, 47, 51, 52, 61, 63, 83, 84, 85, 89], "written": [21, 24, 26, 28, 29, 31, 32, 34, 38, 44, 45, 47, 60, 61, 62, 63, 64, 68, 77, 85, 88], "load": [21, 24, 28, 29, 31, 38, 44, 47, 60, 61, 63, 64, 73, 77], "without": [21, 24, 28, 31, 38, 57, 66, 68, 77, 84], "to_parquet": [21, 24, 28, 29, 31, 38, 44, 47, 63, 64, 77], "compress": [21, 24, 28, 29, 31, 38, 44, 47, 52, 87, 89], "parquet": [21, 24, 26, 28, 29, 31, 38, 44, 47, 52, 60, 62, 64, 77, 85], "chunk": [21, 28, 29, 31, 38, 44, 47], "snappi": [21, 24, 28, 29, 31, 38, 44, 47, 52, 63, 68], "gzip": [21, 24, 28, 29, 31, 38, 44, 47, 52, 63], "brotli": [21, 24, 28, 29, 31, 38, 44, 47, 52, 63], "zstd": [21, 24, 28, 29, 31, 38, 44, 47, 52, 63], "lz4": [21, 24, 28, 29, 31, 38, 44, 47, 52, 63], "On": [21, 22, 92], "due": [21, 28, 31, 60, 63, 77], "issu": [21, 24, 26, 28, 51, 55, 68, 73, 85, 89], "visibl": [21, 22, 28, 29, 31, 38, 44, 47, 92], "permiss": [21, 28, 29, 38, 44, 47], "form": [21, 25, 28, 29, 38, 43, 44, 47, 55, 71, 93], "numlocal": [21, 22, 24, 28, 29, 31, 38, 44, 47, 92], "effici": [21, 24, 28, 29, 38, 47, 89, 93], "o": [21, 28, 29, 38, 43, 44, 47, 74, 76], "reli": [21, 28, 29, 38, 44, 47, 85], "deprec": [21, 24, 26, 28, 29, 31, 38, 44, 45, 47, 48, 55, 77, 85], "impact": [21, 26, 28, 29, 38, 44, 54, 55, 57, 85], "neither": [21, 28, 29, 38, 39, 47, 48, 83, 93], "nor": [21, 28, 29, 38, 39, 47, 83, 93], "import": [21, 23, 24, 28, 31, 37, 41, 43, 47, 51, 55, 61, 66, 68, 71, 84, 86, 92], "state": [21, 28, 47, 55], "charact": [21, 22, 23, 27, 28, 39, 47, 71, 93], "user_defined_nam": [21, 23, 24, 26, 28, 29, 38, 44, 45, 47, 48, 85], "underli": [21, 23, 24, 26, 28, 29, 37, 44, 45, 48, 85], "root": [21, 23, 24, 26, 28, 29, 38, 45, 48, 52, 61, 69, 77, 80, 85], "now": [21, 23, 24, 26, 28, 29, 38, 44, 45, 47, 48, 49, 51, 56, 57, 60, 63, 68, 69, 70, 85], "updat": [21, 23, 24, 26, 28, 29, 31, 38, 41, 44, 45, 47, 48, 63, 68, 73, 77, 85], "modif": [21, 23, 24, 26, 28, 29, 38, 44, 45, 47, 48, 71, 84, 85], "fluid": [21, 23, 24, 26, 28, 29, 38, 44, 45, 47, 48, 85], "registrationerror": [21, 23, 24, 26, 28, 29, 38, 44, 45, 47, 48, 85], "unabl": [21, 23, 24, 26, 28, 29, 38, 45, 47, 48, 85], "unregist": [21, 23, 24, 26, 28, 29, 38, 44, 45, 47, 48, 49, 76, 85], "attach": [21, 23, 24, 26, 28, 29, 38, 44, 45, 47, 48, 49, 76, 85], "unregister_categorical_by_nam": 21, "is_regist": [21, 23, 24, 26, 28, 29, 38, 44, 45, 47, 48, 49, 76, 85], "immun": [21, 23, 24, 26, 28, 29, 38, 44, 45, 47, 48, 85], "until": [21, 23, 24, 26, 28, 29, 38, 44, 45, 47, 48, 57, 85], "previous": [21, 24, 26, 28, 29, 31, 38, 44, 45, 47, 48, 85], "attempt": [21, 24, 26, 28, 29, 31, 38, 44, 45, 46, 47, 48, 68, 77, 84, 85], "bool_": [21, 28, 38, 47, 48, 80, 86], "registri": [21, 24, 26, 28, 29, 30, 38, 45, 47, 48, 49, 85], "mi": [21, 28, 29, 45, 48], "json": [21, 22, 28, 30, 38, 43, 47], "pretty_print_info": [21, 28, 38, 47], "human": [21, 28, 30, 38, 47], "readabl": [21, 28, 30, 31, 38, 47, 61, 77], "parse_hdf_categor": 21, "dict": [21, 22, 24, 26, 28, 30, 31, 32, 42, 49, 84, 85], "conjunct": [21, 77, 82, 93], "load_al": [21, 24, 28, 29, 31, 38, 47, 64], "reconstitut": 21, "convent": 21, "call": [21, 22, 23, 24, 26, 28, 31, 38, 39, 44, 45, 47, 51, 59, 63, 66, 68, 70, 71, 77, 80, 81, 83, 84, 85, 88, 92], "send": [21, 22, 24, 28, 31, 38, 39, 44, 47, 51, 77, 84, 92], "node": [21, 24, 28, 31, 38, 44, 47, 52, 61, 75, 77], "1234": [21, 24, 28, 31, 38, 44, 47, 55], "1235": [21, 24, 28, 31, 38, 44, 47], "1236": [21, 24, 28, 31, 38, 44, 47], "1237": [21, 24, 28, 31, 38, 44, 47], "receive_arrai": [21, 24, 28, 38, 44, 47], "complet": [21, 22, 24, 28, 38, 44, 47, 51, 53, 55, 68, 70, 92, 93], "op": [21, 23, 24, 28, 31, 38, 44, 47, 52], "connect": [22, 28, 39, 43, 51, 56, 73, 76, 77], "localhost": [22, 66, 92], "5555": [22, 66, 92], "access_token": [22, 92], "connect_url": [22, 66, 92], "access_channel": [22, 92], "channel": [22, 92], "machin": [22, 52, 53, 56, 66, 69, 70, 92], "whicn": [22, 92], "interpret": [22, 28, 31, 52, 77, 92], "socket": [22, 92], "enabl": [22, 28, 34, 38, 43, 56, 68, 69, 71, 77, 92], "authent": [22, 43, 66, 92], "tcp": [22, 66, 92], "token_valu": [22, 92], "zmqchannel": [22, 92], "connectionerror": [22, 92], "pars": [22, 23, 28, 29, 38, 51, 92], "seen": [22, 92], "disconnect": [22, 28, 38], "shutdown": [22, 56, 57, 71], "symtabl": 22, "shut": [22, 66, 71], "down": [22, 54, 55, 57, 66, 68, 71], "get": [22, 24, 25, 27, 28, 31, 37, 44, 51, 52, 55, 56, 57, 69, 73, 77, 81, 88, 89], "serverhostnam": 22, "serverport": 22, "numpu": 22, "processor": [22, 52], "maxtaskpar": 22, "physicalmemori": 22, "get_mem_us": 22, "as_perc": 22, "amount": [22, 24, 28, 38, 71, 84, 93], "symbol": [22, 28, 30, 38, 44, 47, 51, 88], "kb": [22, 24, 28], "mb": [22, 24, 28], "gb": [22, 24, 28], "tb": 22, "pb": 22, "percent": 22, "alloc": 22, "get_mem_avail": 22, "get_mem_statu": 22, "retriev": [22, 27, 28, 30, 38, 43, 45, 55], "statu": 22, "total_mem": 22, "total": [22, 26, 28, 31, 47, 52, 77, 85], "physic": [22, 35, 93], "host": [22, 43, 68], "avail_mem": 22, "arkouda_mem_alloc": 22, "chapel": [22, 28, 37, 51, 54, 56, 61, 65, 66, 68, 71, 72, 73, 74, 88, 92, 93], "process": [22, 28, 30, 31, 45, 51, 58, 61, 66, 73, 77, 89, 93], "pct_avail_mem": 22, "percentag": 22, "locale_id": 22, "id": [22, 52, 73, 85], "locale_hostnam": 22, "get_server_command": 22, "command": [22, 27, 28, 38, 51, 52, 53, 55, 57, 66, 68, 70, 71, 72, 73, 92], "commandmap": [22, 51, 71], "print_server_command": 22, "ruok": 22, "imok": 22, "imnotok": 22, "occur": [22, 24, 26, 28, 31, 36, 37, 38, 45, 47, 51, 68, 85, 86, 90, 93], "basic": [22, 28, 38, 43, 55, 73, 81, 88], "wai": [22, 52, 56, 61, 66, 71, 80, 82, 83, 84, 88, 93], "quick": [22, 56], "healthcheck": 22, "respons": [22, 28, 47, 51], "both": [22, 24, 28, 31, 33, 38, 40, 48, 56, 59, 61, 62, 66, 68, 77, 82, 91, 93], "latter": [22, 93], "generate_histori": 22, "num_command": [22, 27], "command_filt": [22, 27], "shell": [22, 27, 28, 31, 70, 77], "jupyt": [22, 27, 66], "notebook": [22, 27, 66], "ipython": [22, 27, 66], "cmd_filter": 22, "select": [22, 24, 27, 28, 31, 44, 51, 55, 68, 74, 84, 89], "10000": 22, "randint": [22, 26, 28, 37, 39, 46, 59, 76, 79, 80, 83, 85, 86], "500": [22, 53, 56], "457": 22, "647": 22, "9362": 22, "9602": 22, "9683": 22, "bitvector": [23, 28], "width": [23, 28, 93], "64": [23, 28, 37, 38, 39, 52, 83, 84, 88], "revers": [23, 26, 28], "callback": [23, 28], "field": [23, 28, 39, 47, 55, 77, 93], "vector": [23, 26, 28, 76, 85], "signific": [23, 28, 37, 38, 46, 55, 71, 79, 80], "callabl": [23, 24, 28, 84], "flag": [23, 28, 31, 41, 52, 57, 71, 92], "binari": [23, 28, 39, 69, 70, 80], "thin": [23, 28], "mostli": [23, 28], "affect": [23, 28], "conserv": [23, 28], "special_objtyp": [23, 28, 48], "export": [23, 28, 31, 37, 53, 56, 68, 69, 70, 73, 86], "opeq": [23, 28, 38], "msb_left": [23, 28], "pad": [23, 28, 55], "show_int": [23, 28], "back": [23, 26, 28, 51, 54, 57, 77, 85], "represent": [23, 28, 38], "accord": [23, 24, 28, 37, 84, 88], "ip_address": [23, 28, 29, 78], "ip": [23, 28], "ipv4": [23, 28, 31, 77], "helper": [23, 28], "proof": [23, 28], "made": [23, 24, 28, 47, 93], "accomod": [23, 28], "ipv6": [23, 28], "prevent": [23, 28, 31, 38, 44, 60, 61, 69, 89], "inadvert": [23, 28], "export_uint": [23, 28], "ipaddress": [23, 28], "special": [23, 28, 45, 88, 90], "is_ipv4": [23, 28], "ip2": [23, 28], "well": [23, 28, 52, 59, 72], "deal": [23, 28], "is_ipv6": [23, 28], "initialdata": [24, 28, 84], "userdict": [24, 28, 42], "homogen": [24, 28, 84], "frame": [24, 28, 45, 84, 90], "stringifi": [24, 28, 84], "pd": [24, 28, 31, 39, 48, 49, 59, 77, 84], "usernam": [24, 28, 43, 84], "alic": [24, 28, 84], "bob": [24, 28, 84], "carol": [24, 28, 84], "userid": [24, 28, 84, 85], "111": [24, 28, 47, 84], "222": [24, 28, 84], "333": [24, 28, 84], "dai": [24, 28, 48, 55, 84, 85], "224": [24, 28, 84], "slightli": [24, 28, 31, 84], "7": [24, 26, 28, 37, 38, 39, 40, 44, 46, 59, 69, 70, 72, 77, 79, 80, 81, 83, 84, 85, 87, 89, 91], "stride": [24, 28, 33, 39, 83, 84, 87], "148": [24, 28, 84], "112": [24, 28, 84], "96": [24, 28, 38, 84], "column_class": [24, 28], "from_panda": [24, 28], "pd_df": [24, 28, 59], "drop": [24, 26, 28, 38, 55, 80, 85], "inplac": [24, 28, 84], "datefram": [24, 28, 84], "col_nam": [24, 28, 31, 84], "drop_dupl": [24, 28, 84], "duplcat": [24, 28, 84], "iter": [24, 28, 31, 39, 46, 52, 76, 77, 79], "dedup": [24, 28, 84], "last": [24, 28, 38, 39, 45, 46, 47, 55, 71, 79, 84, 90, 92, 93], "reset_index": [24, 28, 84], "longer": [24, 28, 39, 61, 72, 84], "caller": [24, 28, 84], "correctli": [24, 28, 73, 84], "update_s": [24, 28], "renam": [24, 28], "mapper": [24, 28, 84], "nonexist": [24, 28, 84], "99": [24, 28, 52, 84], "lower": [24, 28, 47, 61, 84], "onto": [24, 28, 47, 93], "sens": [24, 28], "whose": [24, 28, 44, 45, 47, 90], "essenti": [24, 28, 38, 44, 47, 84, 89], "diffen": [24, 28, 84], "head": [24, 28, 45, 55], "quickli": [24, 28, 53, 84], "tail": [24, 28, 39, 45], "sampl": [24, 28, 37, 39], "random": [24, 28, 39, 41, 52, 75, 76], "use_seri": [24, 28, 84], "as_index": [24, 28, 84], "dropna": [24, 26, 28, 76, 84, 85], "groupbyclass": [24, 28, 40, 45, 50, 91], "kept": [24, 26, 28, 44, 84, 85], "memory_usag": [24, 28], "One": [24, 26, 28, 38, 45, 59, 85, 90], "to_panda": [24, 28, 29, 45, 48, 59, 84, 90], "datalimit": [24, 28, 84], "retain_index": [24, 28, 84], "megabyt": [24, 28, 84], "request": [24, 26, 28, 32, 38, 39, 47, 51, 55, 83, 84, 85], "estim": [24, 26, 28, 38, 80, 84, 85], "book": [24, 28, 84], "disk": [24, 28, 29, 31, 38, 47, 93], "preserv": [24, 28, 45, 90, 93], "across": [24, 28, 31, 61, 77], "suffix": [24, 28, 31, 44, 47, 61, 76, 93], "convert_categor": [24, 28, 31], "categor": [24, 26, 28, 29, 31, 37, 40, 45, 46, 49, 50, 76, 77, 78, 79, 80, 83, 84, 85, 86, 88, 90, 91], "to_csv": [24, 28, 29, 31, 38, 47, 60, 64], "col_delim": [24, 28, 29, 31, 38, 47], "csv": [24, 28, 29, 31, 38, 47, 64, 77], "header": [24, 28, 29, 31, 38, 47, 77], "denot": [24, 28, 29, 31, 38, 47, 48], "unlik": [24, 28, 31, 47, 48], "utf": [24, 28, 31, 47], "8": [24, 26, 28, 31, 37, 38, 39, 44, 46, 47, 52, 59, 60, 70, 72, 77, 79, 80, 81, 83, 84, 85, 87, 88, 89], "NOT": [24, 28, 29, 31, 37, 38, 47, 68, 77, 88], "allow_error": [24, 28, 29, 31, 38, 47, 77], "unknown": [24, 28, 29, 31, 38, 39, 47], "arkouda_typ": [24, 28, 29, 31, 38, 47], "delimit": [24, 28, 29, 31, 32, 38, 45, 47, 52, 55, 60, 77, 93], "newlin": [24, 28, 29, 31, 38, 47, 60], "read_csv": [24, 28, 31, 60, 64], "infer": [24, 25, 26, 28, 31, 39, 61, 77], "ascend": [24, 26, 28, 29, 37, 38, 45, 78, 84, 86, 90], "coargsort": [24, 28, 46, 76, 79, 82, 84, 93], "sort_index": [24, 28, 45, 90], "sort_valu": [24, 28, 45, 84, 90], "apply_permut": [24, 28, 84], "perm": [24, 28, 46, 49, 79, 84], "entir": [24, 28, 44, 47, 52, 57, 84, 89], "unsort": [24, 28, 84], "arbitrari": [24, 28, 84], "invers": [24, 28, 37, 49, 84], "filter_by_rang": [24, 28], "highest": [24, 28, 38, 39], "unlimit": [24, 28], "qualifi": [24, 28], "filter_by_count": [24, 28], "deep": [24, 28, 44, 84], "reflect": [24, 28, 70, 84, 89], "shallow": [24, 28, 84], "vice": [24, 28, 77, 84], "versa": [24, 28, 77, 84], "alia": [24, 26, 28, 44, 48, 84, 85], "isin": [24, 28, 45], "show": [24, 28, 31, 41, 68, 77, 81, 85], "col_a": [24, 28], "col_b": [24, 28], "position": [24, 28], "other_df": [24, 28], "col_c": [24, 28], "corr": [24, 28, 38], "pairwis": [24, 28], "correl": [24, 28, 38], "pearson": [24, 28, 38], "inner": [24, 28, 33], "left_suffix": [24, 28], "_x": [24, 28], "right_suffix": [24, 28], "_y": [24, 28], "join": [24, 28, 44, 47, 50, 51, 76], "inner_join_merg": [24, 28], "right_join_merg": [24, 28], "blob": [24, 28], "main": [24, 28, 52, 55, 61], "core": [24, 27, 28, 52, 55], "l137": [24, 28], "intersect": [24, 28, 40, 44, 59, 76, 91], "unregister_dataframe_by_nam": [24, 28], "mismatch": [24, 26, 28, 68, 85], "analog": [24, 26, 28, 48, 85], "intx": [24, 28], "ident": [24, 28, 49, 80, 88], "point": [24, 28, 29, 33, 37, 38, 39, 45, 73, 83, 84, 88], "invert_permut": [24, 28, 49], "str_": [25, 28, 80, 82, 86, 93], "bigint": [25, 28, 37, 38, 39, 52, 77, 83, 88], "inttyp": [25, 28], "bittyp": [25, 28], "bool_scalar": [25, 28], "float_scalar": [25, 28, 38, 39], "numeric_scalar": [25, 28, 37, 38, 39, 80, 83], "numpy_scalar": [25, 28, 38, 80], "all_scalar": [25, 28, 39, 83], "enum": [25, 28, 34, 37, 61], "arkouda_supported_dtyp": [25, 28], "dtypeobject": [25, 28], "scalardtyp": [25, 28], "issupportednumb": [25, 28], "check_np_dtyp": [25, 28], "dt": [25, 28, 33, 37, 45, 88], "assert": [25, 28], "translate_np_dtyp": [25, 28], "split": [25, 28, 36, 47, 55, 76], "unsupport": [25, 26, 28, 31, 43, 46, 77, 91], "resolve_scalar_dtyp": [25, 28], "get_byteord": [25, 28], "concret": [25, 28], "byteord": [25, 28], "turn": [25, 28, 45, 56, 66, 90], "get_server_byteord": [25, 28], "pda": [26, 28, 37, 38, 39, 46, 48, 51, 79, 80, 83, 86, 88, 91], "groupabl": [26, 28, 40, 85, 91], "return_group": [26, 28, 91], "assume_sort": [26, 28, 85, 91], "return_indic": [26, 28, 91], "come": [26, 28, 57, 77, 83, 91], "applic": [26, 28, 37, 77, 83, 85, 91], "along": [26, 28, 37, 39, 83, 91], "consider": [26, 28, 91, 93], "groupby_reduction_typ": [26, 28], "prepar": [26, 28, 68, 85], "nkei": [26, 28, 45, 76, 85], "unique_kei": [26, 28, 76, 85], "ngroup": [26, 28, 76, 85], "logger": [26, 28, 47, 50, 76, 85], "arkoudalogg": [26, 28, 34, 47, 85], "nativ": [26, 28, 62, 63, 70, 77, 85, 89], "inherit": [26, 28, 85, 88], "overload": [26, 28, 85], "_get_grouping_kei": [26, 28, 85], "reduct": [26, 28, 38, 75, 76, 85, 86], "skipna": [26, 28, 85], "ddof": [26, 28, 38, 48, 80, 85, 86], "reduc": [26, 28, 56, 58, 85], "delta": [26, 28, 33, 38, 80, 85, 86], "degre": [26, 28, 37, 38, 80, 85, 86], "freedom": [26, 28, 38, 80, 85, 86], "calcul": [26, 28, 31, 38, 40, 52, 61, 77, 80, 85, 86, 91], "77777777777777768": [26, 28, 85], "55555555555555536": [26, 28, 85], "33333333333333348": [26, 28, 85], "11111111111111116": [26, 28, 85], "77777777777777779": [26, 28, 85], "55555555555555558": [26, 28, 85], "33333333333333337": [26, 28, 85], "33333333333333326": [26, 28, 85], "group_sum": [26, 28, 85], "14": [26, 28, 52, 59, 60, 69, 80, 81, 85, 87], "group_product": [26, 28, 85], "108": [26, 28, 85], "00000000000003": [26, 28, 85], "9999999999999982": [26, 28, 85], "varianc": [26, 28, 38, 80, 85, 86], "group_var": [26, 28, 85], "averag": [26, 28, 38, 39, 52, 80, 85], "deviat": [26, 28, 38, 39, 48, 80, 85, 86], "len": [26, 28, 38, 44, 47, 80, 85, 87, 89, 93], "howev": [26, 28, 37, 38, 61, 68, 72, 73, 80, 82, 85], "divisor": [26, 28, 38, 80, 85], "statist": [26, 28, 38, 52, 76, 80, 85], "unbias": [26, 28, 38, 80, 85], "hypothet": [26, 28, 33, 38, 80, 85], "infinit": [26, 28, 37, 38, 80, 85], "popul": [26, 28, 32, 36, 38, 80, 85], "likelihood": [26, 28, 38, 80, 85], "333333333333333": [26, 28, 85], "group_std": [26, 28, 85], "se": [26, 28, 38, 80, 85], "5275252316519465": [26, 28, 85], "0954451150103321": [26, 28, 85], "group_mean": [26, 28, 85], "6666666666666665": [26, 28, 85], "7999999999999998": [26, 28, 85], "median": [26, 28, 52, 76, 85], "group_median": [26, 28, 85], "75": [26, 28, 39, 83, 85], "minimum": [26, 28, 38, 39, 69, 80, 85, 86], "minima": [26, 28, 85], "group_minima": [26, 28, 85], "maxima": [26, 28, 85], "group_maxima": [26, 28, 85], "group_argminima": [26, 28, 85], "group_argmaxima": [26, 28, 85], "nuniqu": [26, 28, 44, 76, 85], "group_nuniqu": [26, 28, 85], "group_ani": [26, 28, 85], "OR": [26, 28, 44, 55, 76, 85], "bitwis": [26, 28, 85, 88], "AND": [26, 28, 44, 76, 85], "xor": [26, 28, 38, 44, 76, 85], "groupable_element_typ": [26, 28, 45, 85, 90], "modal": [26, 28, 85], "segarrai": [26, 28, 31, 37, 50, 76, 77, 84, 85], "fill": [26, 28, 38, 39, 52, 75, 83, 85], "constant": [26, 28, 38, 76, 85], "put": [26, 28, 57, 85], "tensor": [26, 28, 85], "replic": [26, 28, 85], "With": [26, 28, 71, 81, 85, 87], "build_from_compon": [26, 28, 76, 85], "init": [26, 28, 70, 85], "rebuild": [26, 28, 51, 54, 56, 57, 85], "orig_kei": [26, 28, 85], "unregister_groupby_by_nam": [26, 28, 76, 85], "most_common": [26, 28, 49, 76, 85], "go": [26, 28, 55, 57, 69, 73, 83], "suppli": [26, 28, 31, 39, 44, 61, 63, 64, 83, 84], "row_start": [26, 28], "nnz": [26, 28], "row_numb": [26, 28], "historyretriev": 27, "abstract": 27, "_filter_arkouda_command": 27, "repl": [27, 28, 36, 47, 93], "shellhistoryretriev": 27, "notebookhistoryretriev": 27, "historyaccessor": 27, "array_api": [28, 50], "accessor": [28, 50], "align": [28, 50], "array_view": [28, 31, 50, 81], "client_dtyp": [28, 31, 50], "infoclass": [28, 50], "io": [28, 50, 51, 52, 62, 63, 64], "io_util": [28, 50], "matcher": [28, 50], "pdarraycr": [28, 38, 50], "pdarraysetop": [28, 44, 50, 51, 89], "plot": [28, 37, 50, 77, 86], "secur": [28, 37, 50], "timeclass": [28, 31, 50], "issupportedint": 28, "akuint64": 28, "akcast": 28, "errormod": [28, 37, 88], "strict": [28, 37, 88], "target": [28, 32, 37, 39, 52, 54, 55, 68, 77, 83, 87, 88], "return_valid": [28, 37, 88], "never": [28, 37, 88], "uninterpret": [28, 37, 88], "63": [28, 37, 38, 88], "succeed": [28, 37, 88], "safe": [28, 37, 55, 88], "underflow": [28, 37, 88], "precis": [28, 31, 37, 77, 88], "capac": [28, 37, 88], "hold": [28, 37, 88], "upon": [28, 37, 47, 70, 71, 74, 80], "choos": [28, 37, 55, 70, 73, 80, 92], "claus": [28, 37, 80], "unequ": [28, 37, 80], "a1": [28, 33, 37, 80], "a2": [28, 33, 37, 80], "cond": [28, 37, 80], "s1": [28, 37, 80], "s2": [28, 37, 80], "c1": [28, 37, 80], "c2": [28, 37, 80], "mydtyp": [28, 38, 88], "max_bit": [28, 38, 39, 52, 77, 83, 88], "attributi": [28, 38, 88], "resid": [28, 38, 47, 88], "opeqop": [28, 38], "format_oth": [28, 38], "itself": [28, 38, 55], "is_sort": [28, 38, 76, 80, 86], "monoton": [28, 38, 80, 86], "decreas": [28, 38, 39, 56, 80, 83, 86], "numeric_and_bool_scalar": [28, 38], "occurr": [28, 36, 37, 38, 47, 80, 86, 93], "cov": [28, 38], "y": [28, 37, 38, 41, 53, 69], "covari": [28, 38], "coeffici": [28, 38], "mink": [28, 38, 71, 76, 80, 86], "maxk": [28, 38, 71, 76, 80, 86], "argmink": [28, 38, 76, 80, 86], "argmaxk": [28, 38, 76, 80, 86], "popcount": [28, 38], "pariti": [28, 38], "clz": [28, 38], "lead": [28, 38, 47], "ctz": [28, 38], "trail": [28, 38, 47], "rotl": [28, 38], "rotat": [28, 37, 38], "rotr": [28, 38], "value_count": [28, 37, 38, 45, 76, 86, 90], "shorthand": [28, 38, 47], "slice_bit": [28, 38], "bottom": [28, 38, 55], "65": [28, 38], "bin": [28, 37, 38, 41, 68, 69, 70, 73, 86], "0b101111111111111111111111111111111111111111111111111111111111111111": [28, 38], "0b10": [28, 38], "bigint_to_uint_arrai": [28, 38, 39], "18446744073709551616": [28, 38, 39], "18446744073709551617": [28, 38, 39], "18446744073709551618": [28, 38, 39], "18446744073709551619": [28, 38, 39], "18446744073709551620": [28, 38, 39], "give": [28, 38, 45, 60, 72, 90, 92], "fastest": [28, 38], "fortran": [28, 38, 88], "to_cuda": [28, 38], "numba": [28, 38], "devicend": [28, 38], "builtin": [28, 38], "gpu": [28, 38], "devicendarrai": [28, 38], "importerror": [28, 38], "cuda": [28, 38], "modulenotfounderror": [28, 38], "cours": [28, 38], "cwd": [28, 31, 38], "name_prefix_local": [28, 31, 38], "to_parqet": [28, 38], "h5": [28, 31, 38, 77], "name_prefix": [28, 31, 38, 77], "repons": [28, 29, 38, 47], "insensit": [28, 29, 38, 47, 52], "save_al": [28, 29, 31, 38, 64], "older": [28, 29, 38, 61, 69], "later": [28, 38, 47, 72], "former": [28, 38, 47, 93], "free": [28, 38, 47], "registr": [28, 38, 47], "list_registri": [28, 30, 38], "unregister_pdarray_by_nam": [28, 38], "100": [28, 37, 38, 41, 52, 59, 80], "my_zero": [28, 38], "potenti": [28, 38], "reconnect": [28, 38], "attahc": [28, 38], "could": [28, 38, 41, 44, 47, 56, 71, 93], "bound": [28, 38, 39, 44, 48, 83, 89], "consecut": [28, 39, 45, 83], "third": [28, 39, 55, 83], "zerodivisionerror": [28, 38, 39, 83], "compos": [28, 39, 47, 66, 77], "dequ": [28, 39, 77], "nbyte": [28, 39, 47, 77], "malform": [28, 39, 77], "overwhelm": [28, 39, 77], "bandwidth": [28, 39, 77], "pdrrai": [28, 37, 39, 77], "twice": [28, 39, 77], "recurs": [28, 39, 77], "respect": [28, 37, 38, 39, 40, 48, 55, 77, 83], "create_pdarrai": [28, 51], "repmsg": [28, 45, 51], "datatyp": [28, 39, 61], "six": [28, 47, 93], "parseabl": [28, 39, 83], "strings_pdarrai": [28, 47], "bytes_s": [28, 47], "encapsul": [28, 39, 43, 47], "composit": [28, 47], "raw": [28, 47, 93], "factori": [28, 29, 47], "from_part": [28, 44, 47], "offset_attrib": [28, 47], "bytes_attrib": [28, 47], "assembl": [28, 47], "entiti": [28, 47], "get_length": [28, 47], "get_byt": [28, 47], "getter": [28, 47], "110": [28, 47], "101": [28, 47], "116": [28, 47], "119": [28, 47], "104": [28, 47], "114": [28, 47], "get_offset": [28, 47], "encod": [28, 47, 52, 93], "toencod": [28, 47], "fromencod": [28, 47], "decod": [28, 47], "uppercas": [28, 39, 47], "lowercas": [28, 39, 47], "upper": [28, 47, 55], "titlecas": [28, 47], "islow": [28, 47], "isupp": [28, 47], "istitl": [28, 47], "mix": [28, 47, 48, 52, 81], "isalnum": [28, 47], "alphanumer": [28, 47], "not_alnum": [28, 47], "alnum": [28, 47], "strings0": [28, 47], "strings1": [28, 47], "strings2": [28, 47], "isalpha": [28, 47], "alphabet": [28, 47], "not_alpha": [28, 47], "alpha": [28, 47, 52, 75], "stringa": [28, 47], "stringb": [28, 47], "stringc": [28, 47], "isdigit": [28, 47], "digit": [28, 46, 47, 79], "not_digit": [28, 47], "120": [28, 47], "121": [28, 47], "122": [28, 47], "strip": [28, 47], "char": [28, 47], "omit": [28, 47, 48, 52, 61], "whitespac": [28, 31, 47], "combin": [28, 47, 48, 57], "1string": [28, 47], "cached_regex_pattern": [28, 47], "pattern": [28, 35, 36, 47, 55, 59, 85, 93], "purge_cached_regex_pattern": [28, 47], "purg": [28, 47], "find_loc": [28, 36, 47, 76, 93], "postit": [28, 47, 93], "positon": [28, 47, 93], "findal": [28, 36, 47, 76, 93], "num_match": [28, 47, 93], "1_2___": [28, 35, 47, 93], "____": [28, 35, 47, 93], "__4___5____6___7": [28, 35, 47, 93], "span": [28, 47, 93], "fullmatch": [28, 47, 76, 93], "whole": [28, 47, 55, 93], "maxsplit": [28, 36, 47, 93], "return_seg": [28, 36, 47, 93], "5____6___7": [28, 47, 93], "return_match_origin": [28, 35, 36, 47, 93], "conta": [28, 47, 93], "___": [28, 47, 93], "__": [28, 35, 47, 93], "sub": [28, 36, 44, 47, 76, 93], "obtain": [28, 36, 47, 93], "substitut": [28, 36, 47, 66, 68, 93], "substitu": [28, 47, 93], "subn": [28, 47, 76, 93], "new_str": [28, 47, 93], "number_of_substit": [28, 47, 93], "ior": [28, 47, 93], "strings_end": [28, 47, 93], "strings_start": [28, 47, 93], "ing": [28, 47, 93], "flatten": [28, 33, 44, 47, 61, 76, 89], "unpack": [28, 47, 66, 70, 93], "flat": [28, 47, 93], "peel": [28, 47, 76, 93], "rpeel": [28, 47, 76, 93], "orig": [28, 47, 93], "one_two": [28, 47, 93], "three_____four____f": [28, 47, 93], "under_flat": [28, 47, 93], "under_map": [28, 47, 93], "includedelimit": [28, 47, 93], "keepparti": [28, 47, 93], "fromright": [28, 47, 93], "off": [28, 47, 56, 93], "partit": [28, 47, 93], "experiment": [28, 47, 93], "sought": [28, 47, 93], "prepend": [28, 44, 47, 76, 93], "stick": [28, 47, 57, 76, 93], "lstick": [28, 47, 76, 93], "rpartit": [28, 47, 93], "compar": [28, 47, 55, 75, 77, 93], "toleft": [28, 47, 93], "insert": [28, 47, 93], "get_prefix": [28, 44, 47, 76, 89], "return_origin": [28, 44, 47, 89], "proper": [28, 37, 44, 47, 49, 89], "long": [28, 44, 47, 57, 89], "enough": [28, 44, 47, 61, 69, 70, 89], "mask": [28, 44, 47, 89], "origin_indic": [28, 44, 47, 89], "get_suffix": [28, 44, 47, 76, 89], "compil": [28, 47, 54, 57, 58, 68, 69, 70, 71, 73], "ssegmentedstr": [28, 47], "usehash": [28, 47], "mere": [28, 47], "hello": [28, 47, 77, 93], "my": [28, 47, 56, 77, 93], "world": [28, 47, 77, 93], "u5": [28, 47, 77, 93], "segstr": [28, 47], "strings_arrai": [28, 47, 61], "save_offset": [28, 47], "deriv": [28, 31, 32, 34, 37, 47, 88], "unregister_strings_by_nam": [28, 47], "clear": [28, 38], "smallest": [28, 38, 45, 80, 90], "outperform": [28, 38, 80], "grow": [28, 38, 80], "beyond": [28, 38, 59, 80], "certain": [28, 38, 53, 71, 80], "depend": [28, 38, 61, 69, 70, 73, 74, 80, 89], "million": [28, 37, 38, 80], "degred": [28, 38, 80], "largest": [28, 38, 45, 80, 90], "degrad": [28, 38, 80], "maxmum": [28, 38, 80], "odd": [28, 38], "lz": [28, 38], "62": [28, 38, 52], "61": [28, 38], "60": [28, 38], "rot": [28, 38], "160": [28, 38], "384": [28, 38], "896": [28, 38], "2048": [28, 38], "4608": [28, 38], "512": [28, 38], "256": [28, 38, 52], "56": [28, 38, 60], "32": [28, 37, 38, 43, 52, 59, 61, 69, 70], "18": [28, 38, 52, 80, 81, 87], "divmod": [28, 38], "dividend": [28, 38], "floordivis": [28, 38], "modular": [28, 38, 57], "divis": [28, 38], "denomin": [28, 37, 38], "At": [28, 37, 38, 80], "elsewher": [28, 37, 38, 80], "retain": [28, 37, 38, 49, 80], "quotient": [28, 38], "No": [28, 38, 68, 73], "div": [28, 38], "mod": [28, 38], "4142135623730951": [28, 38], "7320508075688772": [28, 38], "pwr": [28, 38], "uniniti": [28, 38], "vari": [28, 38, 59, 68, 70, 72, 74, 89], "27": [28, 38, 52, 59, 81], "complementari": [28, 38], "fmod": [28, 38], "attach_pdarrai": [28, 38], "broadcast_to_shap": [28, 38], "algorithm": [28, 37, 46, 49, 66, 79], "sortingalgorithm": [28, 46, 79], "radixsortlsd": [28, 46, 79], "radix": [28, 46, 79], "resili": [28, 46, 79], "uniform": [28, 37, 39, 46, 77, 79, 80, 83], "intens": [28, 46, 59, 79, 83], "move": [28, 46, 57, 59, 79, 83, 89], "forward": [28, 46, 73, 79, 89], "thu": [28, 31, 39, 46, 51, 61, 62, 79, 89], "lexicograph": [28, 46, 55, 79], "pda1": [28, 40, 91], "pda2": [28, 40, 91], "assume_uniqu": [28, 40, 91], "1d": [28, 40, 44, 45, 89, 90, 91], "multia": [28, 40, 91], "multib": [28, 40, 91], "setdiff1d": [28, 40, 44, 51, 59, 76, 89, 91], "setxor1d": [28, 40, 44, 51, 59, 76, 89, 91], "indexof1d": [28, 40], "arr": [28, 40], "Ones": [28, 39, 83], "deleg": [28, 37, 39, 83, 86], "accordingli": [28, 39, 61, 83], "linearli": [28, 39, 48, 83], "evenli": [28, 37, 39, 83, 86], "akint64": [28, 39], "seed": [28, 39, 52, 75, 83], "pull": [28, 31, 39, 55, 61, 83], "drawn": [28, 39, 83], "uniformli": [28, 39, 83], "undefin": [28, 39, 83], "92176432277231968": [28, 39, 83], "083130710959903542": [28, 39, 83], "68894208386667544": [28, 39, 83], "9160772326374946": [28, 39, 83], "353429832157099": [28, 39, 83], "5392023718621486": [28, 39, 83], "invok": [28, 39], "30013431967121934": [28, 39], "47383036230759112": [28, 39], "0441791878997098": [28, 39], "standard_norm": [28, 39], "draw": [28, 39], "mu": [28, 39], "sigma": [28, 39], "68586185091150265": [28, 39], "1723810583573375": [28, 39], "567584107142031": [28, 39], "random_strings_uniform": [28, 39], "minlen": [28, 39], "maxlen": [28, 39], "printabl": [28, 39], "random_strings_lognorm": [28, 39], "tvkj": [28, 39], "ewab": [28, 39], "hfmd": [28, 39], "4k": [28, 39], "hff": [28, 39], "logmean": [28, 39], "logstd": [28, 39], "lognorm": [28, 39], "heavi": [28, 39], "toward": [28, 39], "tvkjte": [28, 39], "abocorhfm": [28, 39], "ludmmgtb": [28, 39], "kwoqnphz": [28, 39], "vsxrrl": [28, 39], "fp": [28, 39], "3q4kc": [28, 39], "hf": [28, 39], "ie": [28, 39], "djkba": [28, 39], "5oz1": [28, 39], "from_seri": [28, 39], "overridden": [28, 39, 43], "situat": [28, 39], "datetim": [28, 31, 39, 48, 52, 77], "timedelta": [28, 31, 39, 48, 77], "57600036956445599": [28, 39], "41619265571741659": [28, 39], "6615356693784662": [28, 39], "choic": [28, 39, 68], "to_datetim": [28, 39], "2018": [28, 39], "datetime64": [28, 39, 48], "01": [28, 39, 52, 55, 57], "1514764800000000000": [28, 39], "nanosecond": [28, 39, 48], "nearest": [28, 37], "14159": [28, 37], "finit": [28, 37], "natur": [28, 37, 80], "logarithm": [28, 37, 80], "3025850929940459": [28, 37, 80], "6051701859880918": [28, 37, 80], "3219280948873626": [28, 37, 80], "6438561897747253": [28, 37, 80], "plu": [28, 37], "exponenti": [28, 37, 80], "7182818284590451": [28, 37, 80], "3890560989306504": [28, 37, 80], "085536923187668": [28, 37, 80], "54": [28, 37, 80], "598150033144236": [28, 37, 80], "84010843172504": [28, 37, 80], "46": [28, 37, 80], "454368507659211": [28, 37, 80], "5571769623557188": [28, 37, 80], "33": [28, 37, 80], "494295836924771": [28, 37, 80], "13": [28, 37, 52, 69, 72, 80, 81, 86, 87], "478894913238722": [28, 37, 80], "minu": [28, 37], "exp1m": [28, 37], "19": [28, 37, 81, 87], "53": [28, 37], "45": [28, 37], "16": [28, 37, 52, 53, 54, 69, 70, 80, 81, 87], "cumsum": [28, 37, 76, 80], "cumul": [28, 37, 41, 75, 80], "th": [28, 37, 44, 80, 89], "1598310770203937": [28, 37, 80], "4110385860243131": [28, 37, 80], "1622479306453748": [28, 37, 80], "710615785506533": [28, 37, 80], "945880905466208": [28, 37, 80], "cumprod": [28, 37, 76, 80], "5728783400481925": [28, 37, 80], "0472855509390593": [28, 37, 80], "78523998586553": [28, 37, 80], "134": [28, 37, 80], "05309592737584": [28, 37, 80], "450": [28, 37, 80], "21589865655358": [28, 37, 80], "sine": [28, 37, 80], "cosin": [28, 37, 80], "tangent": [28, 37], "denom": [28, 37], "pair": [28, 32, 33, 37, 44, 89], "angl": [28, 37], "radian": [28, 37], "rai": [28, 37], "placement": [28, 37], "circl": [28, 37], "hyperbol": [28, 37], "rad2deg": [28, 37], "deg2rad": [28, 37], "siphash": [28, 37], "risk": [28, 37, 61], "few": [28, 37, 59], "small": [28, 37, 61, 77], "strongli": [28, 37], "cryptograph": [28, 37], "Not": [28, 31, 37, 48, 52, 84], "emploi": [28, 37], "adversari": [28, 37], "engin": [28, 37], "linear": [28, 37, 93], "subsequ": [28, 37, 61], "xore": [28, 37], "cancel": [28, 37], "henc": [28, 37], "ordin": [28, 37], "histogram": [28, 37, 41, 76], "edg": [28, 37, 41, 86], "notimplementederror": [28, 37, 51, 86], "histogram2d": [28, 37, 86], "matplotlib": [28, 37, 41, 72, 86], "pyplot": [28, 37, 41, 86], "plt": [28, 37, 41, 86], "nbin": [28, 37, 86], "h": [28, 37, 41, 48, 75, 86, 92], "bi": [28, 37], "coordin": [28, 37, 81], "nx": [28, 37, 52], "ny": [28, 37], "hist": [28, 37], "x_edg": [28, 37], "y_edg": [28, 37], "histogramdd": [28, 37], "multidimension": [28, 37], "nd": [28, 37], "z": [28, 37], "return_count": [28, 37, 86], "enumer": [28, 34, 37], "join_on_eq_with_dt": [28, 33], "t1": [28, 33], "t2": [28, 33], "pred": [28, 33], "result_limit": [28, 33], "1000": [28, 33, 86], "window": [28, 33, 43, 66, 74], "predic": [28, 33], "timestamp": [28, 33], "milli": [28, 33], "result_array_on": [28, 33], "true_dt": [28, 33], "abs_dt": [28, 33], "pos_dt": [28, 33], "gen_rang": [28, 33], "actual": [28, 33, 51, 60], "compute_join_s": [28, 33], "loglevel": [28, 34], "debug": [28, 34, 51, 53, 57], "critic": [28, 34], "enableverbos": [28, 34], "disableverbos": [28, 34], "disabl": [28, 34, 53], "defaultt": [28, 34], "write_log": [28, 34], "log_msg": [28, 34], "clientgeneratedlog": [28, 34], "log_lvl": [28, 34], "identif": [28, 34], "akab": 28, "_base_unit": [28, 48], "_abstractbasetim": [28, 48], "datetimeindex": [28, 48], "timeseri": [28, 48], "carri": [28, 48], "sensit": [28, 48], "sec": [28, 48, 52], "accept": [28, 45, 48, 52, 90], "week": [28, 48, 85], "w": [28, 35, 48, 93], "hour": [28, 48], "minut": [28, 48], "millisecond": [28, 48], "l": [28, 31, 48, 53, 55, 59, 60, 68, 77], "microsecond": [28, 48], "month": [28, 48, 55], "year": [28, 48], "day_of_year": [28, 48], "dayofyear": [28, 48], "day_of_week": [28, 48], "dayofweek": [28, 48, 85], "weekdai": [28, 48], "weekofyear": [28, 48], "is_leap_year": [28, 48], "supported_with_datetim": [28, 48], "supported_with_r_datetim": [28, 48], "supported_with_timedelta": [28, 48], "supported_with_r_timedelta": [28, 48], "supported_opeq": [28, 48], "supported_with_pdarrai": [28, 48], "supported_with_r_pdarrai": [28, 48], "isocalendar": [28, 48], "durat": [28, 48], "timedeltaindex": [28, 48], "timedelta64": [28, 48], "total_second": [28, 48], "date_rang": [28, 48], "period": [28, 48], "freq": [28, 48], "tz": [28, 48], "impos": [28, 48], "dateoffset": [28, 48], "5h": [28, 48], "offset_alias": [28, 48], "alias": [28, 48], "tzinfo": [28, 48], "zone": [28, 48], "asia": [28, 48], "hong_kong": [28, 48], "timezon": [28, 48], "naiv": [28, 48], "midnight": [28, 48], "boundari": [28, 48], "effect": [28, 48, 57, 91], "rng": [28, 48], "Of": [28, 48], "exactli": [28, 48], "learn": [28, 48, 51, 66], "timedelta_rang": [28, 48], "allsymbol": [28, 30], "__allsymbols__": [28, 30], "registeredsymbol": [28, 30], "__registeredsymbols__": [28, 30], "list_symbol_t": [28, 30], "pretty_print_inform": [28, 30], "akbool": 28, "getarkoudalogg": 28, "handler": 28, "logformat": 28, "default_log_format": 28, "conveni": [28, 69, 70, 77], "instanti": 28, "streamhandl": 28, "consol": 28, "lineno": 28, "levelnam": 28, "dynam": 28, "seg_suffix": [28, 44], "_segment": [28, 44, 61], "val_suffix": [28, 44], "_valu": [28, 44, 61], "len_suffix": [28, 44], "_length": [28, 44], "non_empti": [28, 44], "face": [28, 44, 55, 88], "from_multi_arrai": [28, 44], "vertic": [28, 44, 45, 89], "horizont": [28, 44, 45, 89, 90], "unord": [28, 44], "yet": [28, 44, 68, 77, 81], "get_ngram": [28, 44, 76, 89], "gram": [28, 44, 89], "came": [28, 44, 89], "ngram": [28, 44, 76], "get_jth": [28, 44, 76, 89], "j": [28, 44, 53, 54, 69, 70, 89], "backward": [28, 44, 49, 89], "set_jth": [28, 44, 76, 89], "get_length_n": [28, 44, 76, 89], "increas": [28, 44, 89], "append_singl": [28, 44, 76, 89], "prepend_singl": [28, 44, 76, 89], "remove_repeat": [28, 44, 76, 89], "return_multipl": [28, 44, 89], "condens": [28, 44, 89], "norepeat": [28, 44, 89], "segarr": [28, 44, 89], "maintain": [28, 29, 31, 44, 62, 77], "read_hdf": [28, 31, 44, 64, 77], "segment_nam": [28, 44], "value_nam": [28, 44], "seg_a": [28, 44, 89], "seg_b": [28, 44, 89], "setdiff": [28, 44, 76, 89], "setxor": [28, 44, 76, 89], "discard_empti": [28, 44], "unregister_segarray_by_nam": [28, 44], "individu": [28, 42, 53, 93], "akfloat64": 28, "is_uniqu": [28, 29], "rtype": [28, 29, 45], "set_dtyp": [28, 29, 78], "to_dict": [28, 29], "multiindex": [28, 29, 45, 78, 90], "enter": [28, 45, 77, 90], "loc": [28, 45], "_locindex": [28, 45], "supported_scalar": [28, 45], "iloc": [28, 45], "_ilocindex": [28, 45], "iat": [28, 45], "str_acc": [28, 45], "validate_kei": [28, 45], "might": [28, 45, 68, 70, 71], "keyerror": [28, 45], "indexerror": [28, 45], "validate_v": [28, 45], "has_repeat_label": [28, 45], "lst": [28, 45], "scaler": [28, 45, 90], "topn": [28, 45, 90], "top": [28, 45, 51, 56, 61, 68, 69, 70, 74, 90], "frequent": [28, 45, 71, 90], "diff": [28, 45], "to_datafram": [28, 45], "index_label": [28, 45], "value_label": [28, 45], "registerd": [28, 45], "verticl": [28, 45, 90], "pdconcat": [28, 45, 90], "skew": 28, "bia": 28, "weight": 28, "stat": [28, 52], "9442193396379163": 28, "plot_dist": [28, 41], "xlabel": [28, 41], "newfig": [28, 41], "graph": [28, 41, 85], "figur": [28, 41, 57], "below": [28, 41, 52, 53, 59, 68, 69, 70, 72, 77, 84], "hist_al": [28, 41], "ak_df": [28, 41], "col": [28, 41], "grid": [28, 41], "visual": [28, 41], "randn": [28, 41], "get_filetyp": [28, 31], "read_parquet": [28, 31, 64, 77], "read_nest": [28, 31, 77], "h5l": [28, 31], "imit": [28, 31], "technic": [28, 31], "ls_csv": [28, 31, 60, 64], "get_null_indic": [28, 31], "datasetnam": [28, 31, 77], "get_dataset": [28, 31, 60, 64, 77], "column_delim": [28, 31, 77], "get_column": [28, 31, 60, 64], "strict_typ": [28, 31], "calc_string_offset": [28, 31, 77], "tag_data": [28, 31], "tell": [28, 31, 52, 77], "versu": [28, 31, 77], "tagdata": [28, 31], "glob": [28, 31, 77], "independ": [28, 31, 43, 77], "sequenti": [28, 31, 77], "read_tagged_data": [28, 31], "dset_nam": [28, 31], "stricttyp": [28, 31, 77], "invalid": [28, 31, 77], "filetyp": [28, 31, 77], "detect": [28, 31, 61, 77], "record": [28, 31], "filename_cod": [28, 31], "filname_cod": [28, 31], "import_data": [28, 31, 62, 77], "read_path": [28, 31, 77], "write_fil": [28, 31, 77], "return_obj": [28, 31, 77], "runtimewarn": [28, 31, 77], "dataset_nam": [28, 31, 77], "ak_data": [28, 31, 77], "path_prefix": [28, 31], "wrong": [28, 31, 92], "termin": [28, 31, 61, 66, 73, 92], "filenotfound": [28, 31], "datsetnam": [28, 31], "read_": [28, 31], "snapshot": [28, 31], "restor": [28, 31], "alongsid": [28, 31], "sent": [28, 31, 62], "receive_datafram": [28, 31], "send_arrai": [28, 31], "get_directori": 32, "pathlib": [32, 43], "write_line_to_fil": 32, "unsupportedopt": 32, "delimited_file_to_dict": 32, "unsupportedoper": 32, "dict_to_delimited_fil": 32, "oerror": 32, "parent_entry_nam": [35, 36], "match_typ": [35, 36, 76, 93], "matchtyp": [35, 36, 93], "indici": [35, 93], "find_match": [35, 76, 93], "group_num": [35, 93], "return_group_origin": [35, 93], "isaac": [35, 93], "newton": [35, 93], "calculu": [35, 93], "gottfri": [35, 93], "leibniz": [35, 93], "math": [35, 93], "locationsinfo": 36, "get_match": 36, "return_num_sub": 36, "username_token": 43, "generate_token": 43, "secret": 43, "token_hex": 43, "hexidecim": 43, "get_home_directori": 43, "platform": 43, "home": [43, 68, 71], "expandus": 43, "get_arkouda_client_directori": 43, "artifact": 43, "environ": [43, 52, 66, 71, 72], "get_usernam": 43, "environmenterror": 43, "linux": [43, 52, 68, 73, 74], "maco": [43, 66, 69, 74], "aka": 43, "darwin": [43, 70], "generate_username_token_json": 43, "get_callback": 49, "generic_concat": 49, "report_mem": 49, "enrich_inplac": 49, "keynam": 49, "seg": 49, "convert_if_categor": 49, "earlier": [49, 59], "as_compon": 49, "register_al": 49, "myarrai": 49, "unregister_al": 49, "attach_al": 49, "broadcast_dim": 49, "sa": 49, "sb": 49, "page": [50, 55, 68], "auto": [50, 55], "arkouda": [50, 52, 55, 57, 58, 62, 64, 72, 73, 74, 75, 76, 77, 79, 80, 82, 83, 85, 86, 87, 88, 91], "sphinx": [50, 68, 72], "autoapi": [50, 72], "guid": [51, 66, 68, 69, 70], "describ": [51, 55], "walk": [51, 53, 66], "times2": 51, "conform": 51, "somewher": 51, "subdirectori": 51, "numpydoc": 51, "readthedoc": 51, "en": 51, "generic_msg": [51, 71], "repli": 51, "possibli": 51, "typecheck": 51, "doubl": 51, "isinst": 51, "cmd": [51, 71], "arg1": 51, "__all__": 51, "contribut": 51, "machineri": 51, "broken": 51, "dispatch": 51, "arraysetop": [51, 91], "arraysetopsmsg": 51, "modul": [51, 56, 57, 66, 77, 93], "sake": 51, "simplic": 51, "happen": [51, 55], "serverdaemon": 51, "times2msg": 51, "gensymentri": 51, "getgenerictypearrayentri": 51, "tosymentri": 51, "symentri": 51, "st": 51, "addentri": 51, "servererrorstr": 51, "src": [51, 71], "manner": 51, "respond": 51, "reqmsg": 51, "msgarg": 51, "borrow": 51, "messagearg": 51, "symtab": 51, "msgtupl": 51, "throw": 51, "vname": 51, "nextnam": 51, "gent": 51, "getgenerictypedarrayentri": 51, "getvalueof": 51, "av": 51, "createsymentri": 51, "attrib": 51, "aslogg": 51, "getmodulenam": [51, 71], "getroutinenam": 51, "getlinenumb": 51, "msgtype": 51, "errormsg": 51, "ret": 51, "final": [51, 52, 55, 68], "resisterfunct": 51, "abl": [51, 55, 61, 62, 68, 77], "launch": [51, 73, 76], "script": [51, 56, 70, 71, 75], "undoubl": 51, "overview": 52, "simplest": 52, "navig": [52, 55, 68, 69, 70, 72], "python3": [52, 56, 68, 69], "autosav": 52, "storag": 52, "benchmark_v2": 52, "commandlin": 52, "0001_0d4865d7c9453adc6af6409568da326845c358b9_20230406_165330": 52, "Will": 52, "counter_nam": 52, "trial": [52, 75], "comma": [52, 60, 68], "NO": 52, "comparison": [52, 60, 82, 88, 89, 93], "maxbit": 52, "wraparound": 52, "unaffect": 52, "index_s": [52, 75], "gather": [52, 76], "scatter": [52, 76], "value_s": [52, 75], "idna": 52, "ascii": 52, "io_only_writ": 52, "io_only_read": 52, "io_only_delet": 52, "io_files_per_loc": 52, "io_compress": 52, "io_path": 52, "ak_io_benchmark": 52, "measur": [52, 75], "rate": 52, "encoding_benchmark": 52, "arkouda_root": 52, "cpython": 52, "64bit": 52, "0014_31de39be8b19c76d073a8999def6673a305c250d_20230405_145759_uncommit": 52, "strings_encodedecod": 52, "stddev": 52, "iqr": 52, "outlier": 52, "bench_encod": 52, "3304": 52, "2561": 52, "7544": 52, "5306": 52, "8075": 52, "9012": 52, "210": 52, "3306": 52, "79": 52, "3805": 52, "02": 52, "8800": 52, "7336": 52, "6465": 52, "58": 52, "4231": 52, "5246": 52, "267": 52, "8380": 52, "bench_decod": 52, "4444": 52, "03": 52, "4177": 52, "7852": 52, "4097": 52, "5622": 52, "04": [52, 73], "5837": 52, "264": 52, "1882": 52, "4621": 52, "9177": 52, "2250": 52, "6125": 52, "50": [52, 59], "0197": 52, "17": [52, 59, 81, 87], "9991": 52, "90": 52, "236": 52, "6864": 52, "88": 52, "0015_31de39be8b19c76d073a8999def6673a305c250d_20230405_145947_uncommit": 52, "4298": 52, "6450": 52, "5541": 52, "0889": 52, "5801": 52, "00": 52, "1436": 52, "281": 52, "3620": 52, "4875": 52, "5255": 52, "7912": 52, "07": 52, "4328": 52, "87": 52, "5652": 52, "4869": 52, "39": 52, "263": 52, "7659": 52, "94": 52, "lot": 52, "benefici": [52, 63], "purpos": [52, 55, 78, 84, 90], "area": 52, "care": 52, "lesser": 52, "extent": 52, "cpu": 52, "architectur": 52, "ran": [52, 56], "350": 52, "relat": [52, 55, 59], "abov": [52, 57, 59, 66, 68, 69, 84, 93], "machine_info": 52, "msi": 52, "x86_64": [52, 69, 73], "python_compil": 52, "gcc": [52, 69], "python_implement": 52, "python_implementation_vers": 52, "python_vers": 52, "python_build": 52, "nov": 52, "26": [52, 81], "2020": 52, "57": 52, "microsoft": [52, 73], "wsl2": [52, 74], "cpuinfo_vers": 52, "cpuinfo_version_str": 52, "arch": 52, "arch_string_raw": 52, "vendor_id_raw": 52, "genuineintel": 52, "brand_raw": 52, "intel": 52, "tm": 52, "i7": 52, "8750h": 52, "20ghz": 52, "hz_advertised_friendli": 52, "2000": 52, "ghz": 52, "hz_actual_friendli": 52, "2080": 52, "hz_advertis": 52, "2200000000": 52, "hz_actual": 52, "2207999000": 52, "model": 52, "158": 52, "famili": 52, "3dnowprefetch": 52, "abm": 52, "adx": 52, "ae": 52, "apic": 52, "arch_cap": 52, "avx": 52, "avx2": 52, "bmi1": 52, "bmi2": 52, "clflush": 52, "clflushopt": 52, "cmov": 52, "constant_tsc": 52, "cpuid": 52, "cx16": 52, "cx8": 52, "de": 52, "erm": 52, "f16c": 52, "flush_l1d": 52, "fma": 52, "fpu": 52, "fsgsbase": 52, "fxsr": 52, "ht": 52, "hypervisor": 52, "ibpb": 52, "ibr": 52, "invpcid": 52, "invpcid_singl": 52, "lahf_lm": 52, "lm": 52, "mca": 52, "mce": 52, "mmx": 52, "movb": 52, "msr": 52, "mtrr": 52, "nopl": 52, "osxsav": 52, "pae": 52, "pat": 52, "pcid": 52, "pclmulqdq": 52, "pdpe1gb": 52, "pge": 52, "pni": 52, "popcnt": 52, "pse": 52, "pse36": 52, "pti": 52, "rdrand": 52, "rdrnd": 52, "rdseed": 52, "rdtscp": 52, "rep_good": 52, "sep": 52, "smap": 52, "smep": 52, "ss": 52, "ssbd": 52, "sse": 52, "sse2": 52, "sse4_1": 52, "sse4_2": 52, "ssse3": 52, "stibp": 52, "syscal": 52, "tsc": 52, "vme": 52, "xgetbv1": 52, "xsave": 52, "xsavec": 52, "xsaveopt": 52, "xtopologi": 52, "l3_cache_s": 52, "9437184": 52, "l2_cache_s": 52, "mib": 52, "l1_data_cache_s": 52, "196608": 52, "l1_instruction_cache_s": 52, "l2_cache_line_s": 52, "l2_cache_associ": 52, "commit_info": 52, "31de39be8b19c76d073a8999def6673a305c250d": 52, "2023": [52, 66, 69], "04t16": 52, "author_tim": 52, "04t12": 52, "dirti": 52, "2324_pytest_benchmark_doc": 52, "fullnam": 52, "extra_info": 52, "descript": [52, 55, 59, 76], "problem_s": 52, "transfer_r": 52, "0002": 52, "gib": 52, "disable_gc": 52, "timer": 52, "perf_count": 52, "min_round": 52, "max_tim": 52, "min_tim": 52, "5e": 52, "06": 52, "warmup": 52, "004066600000442122": 52, "007168699999965611": 52, "0048064200000226265": 52, "001326192548940973": 52, "004246700000294368": 52, "0009575499998391024": 52, "q1": 52, "004131924999910552": 52, "q3": 52, "005089474999749655": 52, "iqr_outli": 52, "stddev_outli": 52, "ld15iqr": 52, "hd15iqr": 52, "208": 52, "0550596900172": 52, "024032100000113132": 52, "00383609999971668": 52, "0043372999998609885": 52, "004057779999857303": 52, "00018361238254747651": 52, "0040258999997604406": 52, "0002090000002681336": 52, "0039507749997937935": 52, "004159775000061927": 52, "246": 52, "44017172817806": 52, "020288899999286514": 52, "05t15": 52, "09": [52, 69], "097392": 52, "pai": 52, "attent": 52, "featur": [53, 54, 55, 56, 58, 68, 71, 77, 85], "chpl_comm": [53, 69, 70], "gasnet_spawnfn": 53, "gasnet_route_output": 53, "chpl_gasnet_cfg_opt": 53, "ibv": 53, "gasnet_quiet": 53, "gasnet_masterip": 53, "127": 53, "gasnet_workerip": 53, "chpl_test_timeout": 53, "chpl_rt_oversubscrib": 53, "ye": 53, "gasnetsetup": 53, "cd": [53, 66, 69, 70, 72], "chpl_home": [53, 69, 70], "nl": [53, 66, 92], "would": [53, 57, 62, 77, 80, 85], "too": [54, 77], "backend": [54, 68], "parallel": [54, 77, 88, 91], "leverag": [54, 69], "increment": [54, 55], "everyth": [54, 55], "cut": [54, 55, 57], "somewhat": 54, "heroic": 54, "acceler": 54, "makebinari": 54, "bottleneck": 54, "tend": 54, "chpl_target_compil": 54, "clang": [54, 69], "gnu": [54, 73], "j16": 54, "outlin": [55, 61], "taken": [55, 71], "evolv": 55, "gain": 55, "team": 55, "action": 55, "click": [55, 68, 74], "draft": 55, "button": 55, "bring": 55, "text": [55, 60, 77], "box": 55, "publish": 55, "scheme": 55, "yyyi": 55, "mm": 55, "dd": 55, "v2022": 55, "31": [55, 73], "dot": 55, "hei": 55, "mistak": 55, "ok": 55, "dash": 55, "etc": [55, 69, 73], "underneath": 55, "excel": 55, "next": [55, 57, 68, 71, 92], "major": [55, 60, 78, 84, 90], "minor": 55, "review": 55, "Or": 55, "straight": 55, "green": 55, "believ": 55, "loos": 55, "remot": [55, 69, 70, 92], "upstream": [55, 69, 70], "someth": [55, 56, 92], "fetch": [55, 57], "previou": [55, 57, 70], "recent": 55, "ellips": 55, "prev": 55, "onlin": [55, 73], "concis": 55, "onelin": 55, "graphic": 55, "gitk": 55, "push": [55, 68], "strive": 55, "hyperlink": 55, "reason": [55, 57, 70], "guidelin": [55, 93], "substanti": 55, "bug": [55, 58], "smaller": [55, 60, 77], "coupl": 56, "unset": [56, 70], "optim": 56, "wors": 56, "matter": 56, "hit": 56, "chpl_develop": [56, 70], "rebuilt": 56, "homebrew": [56, 68], "shouldn": [56, 57], "worri": 56, "biggest": 56, "involv": [56, 74], "focus": 56, "just": [56, 57, 88], "crucial": 56, "saveusedmodul": [56, 57, 71], "piec": 56, "modifi": 56, "benchmark": [56, 58, 71, 75], "interact": [56, 60, 64, 65, 66, 70, 72], "session": [56, 66], "usedmodul": [56, 57, 71], "ctrl": 56, "easiest": 56, "mv": [56, 57], "arkouda_config_fil": [56, 71], "know": 56, "ll": [56, 57, 68], "suggest": [57, 73], "gasnet": [57, 58, 69, 70], "report": 57, "pretti": 57, "frustrat": 57, "past": 57, "recompil": 57, "checkout": 57, "v2023": [57, 66], "isn": 57, "mine": 57, "wherev": 57, "rememb": [57, 59], "won": 57, "overnight": 57, "hog": 57, "ve": [57, 69, 70], "got": 57, "forget": [57, 73], "techniqu": 57, "unnecessari": 57, "tip": [58, 68], "aim": 59, "introduct": 59, "commonli": 59, "exhaust": [59, 61], "ak_arr": 59, "easili": 59, "np_arr": 59, "52": 59, "84": 59, "80": 59, "71": 59, "aid": [59, 61], "transit": 59, "toolset": 59, "IN": 59, "ak_in1d": 59, "ak_int": 59, "m1": 59, "m2": 59, "ak_in1dmult": 59, "ak_in1dmulti": 59, "ak_intmult": 59, "though": 59, "extrem": [59, 61, 63], "let": 59, "sever": [59, 61, 77, 80, 83], "column_nam": 59, "column_data": 59, "fname": 59, "john": 59, "jane": 59, "jake": 59, "lname": 59, "smith": 59, "brown": 59, "ag": 59, "37": 59, "35": 59, "salari": 59, "75000": 59, "77000": 59, "100000": 59, "35000": 59, "f_name": 59, "l_name": 59, "notic": 59, "demo": 59, "computation": 59, "interest": 59, "cola": 60, "colb": 60, "colc": 60, "abc": 60, "ghi": 60, "arkodua": [60, 61], "flexibl": 61, "adher": 61, "portion": 61, "isbool": 61, "file_vers": 61, "arkouda_vers": 61, "c_string": 61, "mark": 61, "therefor": 61, "unflatten": 61, "reconstruct": 61, "number_of_dimens": 61, "array_of_size_rank": 61, "current_arkouda_vers": 61, "na_cod": 61, "unique_key_idx": 61, "key_": 61, "notifi": 61, "elect": [61, 62], "ONE": 61, "explicit": [61, 88], "still": [61, 93], "orient": [63, 82, 84, 88, 93], "writ": 63, "paruqet": 63, "ineffiec": 63, "fact": 63, "analyt": 65, "supercomput": 65, "visit": [66, 69, 70], "conda": [66, 68, 69, 70, 72], "yml": [66, 69, 70, 72], "download": [66, 69, 70, 74], "05": 66, "tar": [66, 68, 69, 70], "xzf": [66, 70], "gz": [66, 68, 69, 70], "listen": [66, 92], "your_machin": 66, "chapel_vers": 66, "15461882265": 66, "token_str": 66, "node01": [66, 92], "hang": 66, "exit": [66, 73], "prerequisit": [68, 69, 70], "proceed": 68, "manag": [68, 69, 70, 72, 74], "mac": [68, 70], "makefil": 68, "zeromq": [68, 72], "eval": 68, "anaconda3": [68, 69, 70], "pip": [68, 69, 70], "grep": [68, 73], "opt": [68, 69, 70], "caskroom": [68, 70], "miniforg": 68, "site": 68, "rpath": 68, "boost": 68, "cpp": 68, "thrift": 68, "utf8proc": 68, "virtual": 68, "venv": [68, 69], "activ": [68, 69, 70, 85], "upgrad": [68, 72], "wheel": 68, "clean": 68, "deactiv": 68, "rm": 68, "rf": 68, "dist": 68, "whl": 68, "chpldoc": [68, 69], "frontend": 68, "browser": 68, "ghpage": 68, "scroll": 68, "folder": 68, "homepag": 68, "md": [68, 69, 70], "sudo": [69, 73], "apt": 69, "m4": 69, "perl": 69, "bash": [69, 70], "mawk": 69, "pkg": 69, "config": [69, 71], "cmake": [69, 72], "llvm": [69, 70, 73], "libclang": 69, "cpp14": 69, "libedit": 69, "repo": [69, 70, 74], "encourag": [69, 70], "your_fork": [69, 70], "further": [69, 70, 74], "highli": 69, "archiv": 69, "x86": 69, "wget": 69, "sh": [69, 70], "bashrc": [69, 70, 73], "packag": [69, 70, 72, 74], "pythonpath": [69, 70], "live": [69, 70], "pwd": [69, 70], "quickstart": [69, 70, 74], "particularli": [69, 71], "regard": 69, "distro": 69, "cento": 69, "consequ": 69, "newer": 69, "devtoolset": 69, "softwar": 69, "explod": 69, "lang": 69, "xvf": 69, "setchplenv": [69, 70], "chplconfig": 69, "chpl_re2": [69, 70], "bundl": [69, 70], "chpl_llvm": [69, 70], "chpl_gmp": [69, 70], "linux64": 69, "yum": 69, "devel": 69, "gawk": 69, "curl": 69, "incompat": 69, "el7": 69, "scl": 69, "rh": 69, "cm_version": 69, "kitwar": 69, "licens": 69, "subdir": 69, "simul": [69, 70], "manual": 70, "brew": 70, "cask": 70, "exact": 70, "chipset": 70, "2022": 70, "macosx": 70, "arm64": 70, "progress": 70, "life": [70, 72], "cycl": [70, 72], "sync": 70, "zsh": 70, "gmp": 70, "rc": 70, "path_to_chpl": 70, "chpl_target_cpu": 70, "path_to_ark": 70, "reactiv": 70, "zshrc": 70, "successfulli": 70, "hello3": 70, "datapar": 70, "defautl": 70, "funcion": 71, "prior": 71, "exclud": 71, "valuabl": 71, "switch": [71, 81], "totestmsg": 71, "testmsg": 71, "addition": [71, 78], "kextrememsg": 71, "registerfunct": 71, "minkmsg": 71, "maxkmsg": 71, "accomplish": [71, 77], "approach": [71, 89], "test_command": 71, "__dict__": 71, "sometim": [71, 81, 88], "difficult": 71, "discov": 71, "inspect": [71, 77], "wish": 71, "pyzmq": 72, "typeguard": 72, "tabul": 72, "pyfiglet": 72, "h5py": [72, 77], "pyarrow": [72, 77], "pexpect": 72, "argpars": 72, "furo": 72, "myst": 72, "parser": 72, "linkifi": 72, "ast": 72, "931": 72, "990": 72, "yaml": 72, "env_nam": 72, "yaml_fil": 72, "prune": 72, "path_to_arkouda": 72, "strategi": [72, 73, 77], "eager": 72, "subsystem": 73, "wsl": 73, "rout": 73, "ubuntu": 73, "tutori": 73, "app": 73, "account": 73, "symlink": 73, "lt": 73, "tblgen": 73, "libtinfow": 73, "ln": 73, "libtic": 73, "plan": [73, 74, 86, 88], "powershel": 73, "vcxsrv": 73, "x410": 73, "whichev": 73, "firewal": 73, "xserver": 73, "hous": 73, "conf": 73, "nameserv": 73, "awk": 73, "serv": 74, "clone": 74, "100000000": 75, "arithmet": [76, 88], "scan": 76, "summar": [76, 77], "dedupl": 76, "setop": 76, "columnar": 77, "spread": 77, "mpi": 77, "layer": 77, "pipelin": [77, 93], "aggress": 77, "hundr": 77, "thousand": 77, "ingest": [77, 93], "customiz": 77, "schema": 77, "taht": 77, "autoclass": 78, "offer": [78, 84, 90, 93], "mathemat": 80, "multiplex": 80, "28": 81, "29": 81, "advanc": 81, "talk": 81, "cartesian": 81, "wherea": [81, 93], "discourag": [81, 82, 84, 88, 89, 93], "forc": [81, 82, 84, 88, 93], "concept": 82, "almost": [82, 84, 88, 93], "liter": [82, 93], "alon": [82, 93], "unrel": 83, "movement": 83, "unsign": 84, "ieee": [84, 88], "1073741824": 84, "workhors": 85, "scienc": 85, "extract": 85, "imagin": 85, "bydayofweek": 85, "numid": 85, "013": 86, "36": 86, "934176000000015": 86, "07734942223993": 86, "syntax": 87, "assig": 87, "42": 87, "ind": 87, "matlab": 87, "outer": 87, "touch": 87, "expans": 87, "lim": 87, "backbon": 88, "And": 88, "expos": 88, "incorpor": 88, "implicit": 88, "loss": 89, "functioanl": 89, "strucutur": 89, "abil": 89, "shown": 92, "sai": 92, "went": 92, "reachabl": 92, "wide": 93, "compris": 93, "whenev": 93, "threshold": 93, "pipe": 93, "googl": 93, "sacrific": 93, "notabl": 93, "exchang": 93}, "objects": {"": [[28, 0, 0, "-", "arkouda"]], "arkouda": [[28, 1, 1, "", "ARKOUDA_SUPPORTED_DTYPES"], [28, 1, 1, "", "AllSymbols"], [81, 2, 1, "", "ArrayView"], [28, 2, 1, "", "BitVector"], [28, 5, 1, "", "BitVectorizer"], [28, 2, 1, "", "CachedAccessor"], [82, 2, 1, "", "Categorical"], [28, 1, 1, "", "DTypeObjects"], [28, 1, 1, "", "DTypes"], [84, 2, 1, "", "DataFrame"], [28, 2, 1, "id962", "Datetime"], [28, 2, 1, "", "DatetimeAccessor"], [28, 2, 1, "", "ErrorMode"], [28, 2, 1, "", "Fields"], [28, 1, 1, "", "GROUPBY_REDUCTION_TYPES"], [85, 2, 1, "", "GroupBy"], [28, 2, 1, "", "IPv4"], [78, 2, 1, "", "Index"], [28, 1, 1, "", "LEN_SUFFIX"], [28, 2, 1, "", "LogLevel"], [28, 2, 1, "", "MultiIndex"], [28, 7, 1, "", "NonUniqueError"], [28, 2, 1, "", "Properties"], [28, 1, 1, "", "RegisteredSymbols"], [28, 7, 1, "id484", "RegistrationError"], [28, 2, 1, "", "Row"], [28, 1, 1, "", "SEG_SUFFIX"], [28, 1, 1, "", "ScalarDTypes"], [28, 2, 1, "", "SegArray"], [90, 2, 1, "", "Series"], [28, 2, 1, "", "StringAccessor"], [28, 2, 1, "id897", "Strings"], [28, 2, 1, "id826", "Timedelta"], [28, 1, 1, "", "VAL_SUFFIX"], [80, 5, 1, "", "abs"], [2, 0, 0, "-", "accessor"], [28, 5, 1, "", "akabs"], [28, 1, 1, "id436", "akbool"], [28, 5, 1, "id483", "akcast"], [28, 1, 1, "id556", "akfloat64"], [28, 1, 1, "id557", "akint64"], [28, 1, 1, "id558", "akuint64"], [28, 5, 1, "", "align"], [3, 0, 0, "-", "alignment"], [80, 5, 1, "", "all"], [28, 1, 1, "", "all_scalars"], [80, 5, 1, "", "any"], [83, 5, 1, "", "arange"], [28, 5, 1, "", "arccos"], [28, 5, 1, "", "arccosh"], [28, 5, 1, "", "arcsin"], [28, 5, 1, "", "arcsinh"], [28, 5, 1, "", "arctan"], [28, 5, 1, "", "arctan2"], [28, 5, 1, "", "arctanh"], [80, 5, 1, "", "argmax"], [80, 5, 1, "", "argmaxk"], [80, 5, 1, "", "argmin"], [80, 5, 1, "", "argmink"], [79, 5, 1, "", "argsort"], [77, 5, 1, "", "array"], [18, 0, 0, "-", "array_api"], [20, 0, 0, "-", "array_view"], [28, 5, 1, "", "attach_pdarray"], [28, 1, 1, "id555", "bigint"], [28, 5, 1, "", "bigint_from_uint_arrays"], [28, 1, 1, "id4", "bitType"], [28, 1, 1, "", "bool"], [28, 1, 1, "", "bool_scalars"], [28, 5, 1, "id603", "broadcast"], [28, 5, 1, "", "broadcast_to_shape"], [88, 5, 1, "", "cast"], [21, 0, 0, "-", "categorical"], [28, 5, 1, "", "ceil"], [28, 5, 1, "", "check_np_dtype"], [28, 5, 1, "", "clear"], [22, 0, 0, "-", "client"], [23, 0, 0, "-", "client_dtypes"], [28, 5, 1, "", "clz"], [79, 5, 1, "", "coargsort"], [28, 1, 1, "", "complex128"], [28, 1, 1, "", "complex64"], [28, 5, 1, "", "compute_join_size"], [83, 5, 1, "", "concatenate"], [92, 5, 1, "", "connect"], [28, 5, 1, "", "corr"], [80, 5, 1, "", "cos"], [28, 5, 1, "", "cosh"], [28, 5, 1, "", "cov"], [28, 5, 1, "id547", "create_pdarray"], [28, 5, 1, "", "ctz"], [80, 5, 1, "", "cumprod"], [80, 5, 1, "", "cumsum"], [24, 0, 0, "-", "dataframe"], [28, 5, 1, "", "date_operators"], [28, 5, 1, "id848", "date_range"], [28, 5, 1, "", "deg2rad"], [28, 5, 1, "", "disableVerbose"], [28, 5, 1, "", "divmod"], [28, 5, 1, "", "dtype"], [25, 0, 0, "-", "dtypes"], [28, 5, 1, "", "enableVerbose"], [80, 5, 1, "", "exp"], [28, 5, 1, "", "expm1"], [77, 5, 1, "", "export"], [28, 5, 1, "", "find"], [28, 1, 1, "", "float32"], [28, 1, 1, "", "float64"], [28, 1, 1, "", "float_scalars"], [28, 5, 1, "", "floor"], [28, 5, 1, "", "fmod"], [28, 5, 1, "id247", "from_series"], [28, 5, 1, "id667", "full"], [28, 5, 1, "", "full_like"], [28, 5, 1, "id297", "gen_ranges"], [28, 5, 1, "", "getArkoudaLogger"], [28, 5, 1, "", "get_byteorder"], [28, 5, 1, "", "get_columns"], [77, 5, 1, "", "get_datasets"], [28, 5, 1, "", "get_filetype"], [28, 5, 1, "", "get_null_indices"], [28, 5, 1, "", "get_server_byteorder"], [26, 0, 0, "-", "groupbyclass"], [28, 5, 1, "", "hash"], [28, 5, 1, "", "hist_all"], [86, 5, 1, "", "histogram"], [28, 5, 1, "", "histogram2d"], [28, 5, 1, "", "histogramdd"], [27, 0, 0, "-", "history"], [77, 5, 1, "", "import_data"], [91, 5, 1, "", "in1d"], [28, 5, 1, "", "in1d_intervals"], [29, 0, 0, "-", "index"], [28, 5, 1, "", "indexof1d"], [30, 0, 0, "-", "infoclass"], [28, 5, 1, "", "information"], [28, 1, 1, "", "int16"], [28, 1, 1, "", "int32"], [28, 1, 1, "id180", "int64"], [28, 1, 1, "", "int8"], [28, 1, 1, "id182", "intTypes"], [28, 1, 1, "id248", "int_scalars"], [28, 5, 1, "", "intersect"], [91, 5, 1, "", "intersect1d"], [28, 5, 1, "", "interval_lookup"], [28, 5, 1, "", "intx"], [28, 5, 1, "", "invert_permutation"], [31, 0, 0, "-", "io"], [32, 0, 0, "-", "io_util"], [28, 5, 1, "", "ip_address"], [28, 5, 1, "id249", "isSupportedInt"], [28, 5, 1, "", "isSupportedNumber"], [28, 5, 1, "", "is_cosorted"], [28, 5, 1, "", "is_ipv4"], [28, 5, 1, "", "is_ipv6"], [80, 5, 1, "", "is_sorted"], [28, 5, 1, "", "isfinite"], [28, 5, 1, "", "isinf"], [28, 5, 1, "id852", "isnan"], [33, 0, 0, "-", "join"], [28, 5, 1, "", "join_on_eq_with_dt"], [28, 5, 1, "", "left_align"], [83, 5, 1, "", "linspace"], [28, 5, 1, "", "list_registry"], [28, 5, 1, "", "list_symbol_table"], [28, 5, 1, "", "load"], [28, 5, 1, "", "load_all"], [80, 5, 1, "", "log"], [28, 5, 1, "", "log10"], [28, 5, 1, "", "log1p"], [28, 5, 1, "", "log2"], [34, 0, 0, "-", "logger"], [28, 5, 1, "", "lookup"], [28, 5, 1, "", "ls"], [28, 5, 1, "", "ls_csv"], [35, 0, 0, "-", "match"], [36, 0, 0, "-", "matcher"], [80, 5, 1, "", "max"], [80, 5, 1, "", "maxk"], [80, 5, 1, "", "mean"], [28, 5, 1, "", "merge"], [80, 5, 1, "", "min"], [80, 5, 1, "", "mink"], [28, 5, 1, "", "mod"], [37, 0, 0, "-", "numeric"], [28, 1, 1, "", "numeric_scalars"], [28, 1, 1, "", "numpy_scalars"], [83, 5, 1, "", "ones"], [83, 5, 1, "", "ones_like"], [28, 5, 1, "", "parity"], [88, 2, 1, "", "pdarray"], [38, 0, 0, "-", "pdarrayclass"], [39, 0, 0, "-", "pdarraycreation"], [40, 0, 0, "-", "pdarraysetops"], [28, 5, 1, "", "plot_dist"], [41, 0, 0, "-", "plotting"], [28, 5, 1, "", "popcount"], [28, 5, 1, "", "power"], [28, 5, 1, "", "pretty_print_information"], [80, 5, 1, "", "prod"], [28, 5, 1, "", "rad2deg"], [83, 5, 1, "", "randint"], [28, 5, 1, "", "random_strings_lognormal"], [28, 5, 1, "", "random_strings_uniform"], [77, 5, 1, "", "read"], [28, 5, 1, "", "read_csv"], [28, 5, 1, "", "read_hdf"], [28, 5, 1, "", "read_parquet"], [28, 5, 1, "", "read_tagged_data"], [28, 5, 1, "", "receive"], [28, 5, 1, "", "receive_dataframe"], [28, 5, 1, "", "resolve_scalar_dtype"], [28, 5, 1, "", "restore"], [28, 5, 1, "", "right_align"], [28, 5, 1, "", "rotl"], [28, 5, 1, "", "rotr"], [28, 5, 1, "", "round"], [42, 0, 0, "-", "row"], [28, 5, 1, "", "save_all"], [28, 5, 1, "", "search_intervals"], [43, 0, 0, "-", "security"], [44, 0, 0, "-", "segarray"], [45, 0, 0, "-", "series"], [91, 5, 1, "", "setdiff1d"], [91, 5, 1, "", "setxor1d"], [28, 5, 1, "", "sign"], [80, 5, 1, "", "sin"], [28, 5, 1, "", "sinh"], [28, 5, 1, "", "skew"], [28, 5, 1, "", "snapshot"], [28, 5, 1, "", "sort"], [28, 5, 1, "", "sorted"], [46, 0, 0, "-", "sorting"], [28, 5, 1, "", "sqrt"], [28, 5, 1, "", "square"], [28, 5, 1, "", "standard_normal"], [80, 5, 1, "", "std"], [28, 1, 1, "id250", "str_"], [28, 1, 1, "", "str_scalars"], [28, 5, 1, "", "string_operators"], [47, 0, 0, "-", "strings"], [80, 5, 1, "", "sum"], [28, 5, 1, "", "tan"], [28, 5, 1, "", "tanh"], [48, 0, 0, "-", "timeclass"], [28, 5, 1, "id849", "timedelta_range"], [28, 5, 1, "", "to_csv"], [28, 5, 1, "", "to_hdf"], [28, 5, 1, "", "to_parquet"], [28, 5, 1, "", "translate_np_dtype"], [28, 5, 1, "", "trunc"], [28, 1, 1, "", "uint16"], [28, 1, 1, "", "uint32"], [28, 1, 1, "", "uint64"], [28, 1, 1, "", "uint8"], [28, 5, 1, "", "uniform"], [91, 5, 1, "", "union1d"], [91, 5, 1, "", "unique"], [28, 5, 1, "", "unregister_pdarray_by_name"], [28, 5, 1, "", "unsqueeze"], [28, 5, 1, "", "update_hdf"], [49, 0, 0, "-", "util"], [86, 5, 1, "", "value_counts"], [80, 5, 1, "", "var"], [80, 5, 1, "", "where"], [28, 5, 1, "", "write_log"], [28, 5, 1, "", "zero_up"], [83, 5, 1, "", "zeros"], [83, 5, 1, "", "zeros_like"]], "arkouda.ArrayView": [[81, 3, 1, "", "base"], [81, 3, 1, "", "dtype"], [81, 3, 1, "", "itemsize"], [81, 3, 1, "", "ndim"], [28, 3, 1, "", "objType"], [81, 3, 1, "", "order"], [81, 3, 1, "", "shape"], [81, 3, 1, "", "size"], [28, 4, 1, "", "to_hdf"], [28, 4, 1, "", "to_list"], [81, 5, 1, "", "to_ndarray"], [28, 4, 1, "", "update_hdf"]], "arkouda.BitVector": [[28, 3, 1, "", "conserves"], [28, 4, 1, "", "format"], [28, 4, 1, "", "from_return_msg"], [28, 4, 1, "", "opeq"], [28, 4, 1, "", "register"], [28, 3, 1, "", "special_objType"], [28, 4, 1, "", "to_list"], [28, 4, 1, "", "to_ndarray"]], "arkouda.Categorical": [[82, 3, 1, "", "categories"], [82, 3, 1, "", "codes"], [82, 4, 1, "", "contains"], [82, 4, 1, "", "endswith"], [82, 4, 1, "", "from_codes"], [82, 3, 1, "", "ndim"], [82, 3, 1, "", "nlevels"], [82, 3, 1, "", "permutation"], [82, 3, 1, "", "segments"], [82, 3, 1, "", "shape"], [82, 3, 1, "", "size"], [82, 4, 1, "", "startswith"], [82, 5, 1, "", "to_ndarray"]], "arkouda.DataFrame": [[28, 3, 1, "id748", "COLUMN_CLASSES"], [28, 4, 1, "id762", "GroupBy"], [28, 4, 1, "id757", "append"], [84, 5, 1, "", "apply_permutation"], [84, 5, 1, "", "argsort"], [28, 4, 1, "id790", "attach"], [84, 5, 1, "", "coargsort"], [28, 6, 1, "id745", "columns"], [84, 5, 1, "", "concat"], [84, 5, 1, "", "copy"], [28, 4, 1, "id785", "corr"], [84, 5, 1, "", "drop"], [84, 5, 1, "", "drop_duplicates"], [28, 6, 1, "id742", "dtypes"], [28, 6, 1, "id743", "empty"], [28, 4, 1, "id781", "filter_by_range"], [28, 4, 1, "id751", "from_pandas"], [28, 4, 1, "id792", "from_return_msg"], [84, 5, 1, "", "groupby"], [84, 5, 1, "", "head"], [28, 6, 1, "id746", "index"], [28, 6, 1, "id747", "info"], [28, 4, 1, "id789", "is_registered"], [28, 4, 1, "id784", "isin"], [28, 4, 1, "id775", "load"], [28, 4, 1, "id763", "memory_usage"], [28, 4, 1, "id786", "merge"], [28, 3, 1, "id749", "objType"], [28, 4, 1, "id771", "read_csv"], [28, 4, 1, "id787", "register"], [84, 5, 1, "", "rename"], [84, 5, 1, "", "reset_index"], [28, 4, 1, "id761", "sample"], [28, 4, 1, "id774", "save"], [28, 6, 1, "id744", "shape"], [28, 6, 1, "id741", "size"], [28, 4, 1, "id778", "sort_index"], [84, 5, 1, "", "sort_values"], [84, 5, 1, "", "tail"], [28, 4, 1, "id768", "to_csv"], [28, 4, 1, "id765", "to_hdf"], [84, 5, 1, "", "to_pandas"], [28, 4, 1, "id767", "to_parquet"], [28, 4, 1, "id750", "transfer"], [28, 4, 1, "id788", "unregister"], [28, 4, 1, "id791", "unregister_dataframe_by_name"], [28, 4, 1, "id766", "update_hdf"], [28, 4, 1, "id755", "update_size"]], "arkouda.Datetime": [[28, 6, 1, "id979", "date"], [28, 6, 1, "id969", "day"], [28, 6, 1, "id974", "day_of_week"], [28, 6, 1, "id972", "day_of_year"], [28, 6, 1, "id975", "dayofweek"], [28, 6, 1, "id973", "dayofyear"], [28, 6, 1, "id968", "hour"], [28, 6, 1, "id980", "is_leap_year"], [28, 4, 1, "id994", "is_registered"], [28, 4, 1, "id989", "isocalendar"], [28, 6, 1, "id964", "microsecond"], [28, 6, 1, "id965", "millisecond"], [28, 6, 1, "id967", "minute"], [28, 6, 1, "id970", "month"], [28, 6, 1, "id963", "nanosecond"], [28, 4, 1, "id992", "register"], [28, 6, 1, "id966", "second"], [28, 3, 1, "id988", "special_objType"], [28, 4, 1, "id991", "sum"], [28, 3, 1, "id985", "supported_opeq"], [28, 3, 1, "id981", "supported_with_datetime"], [28, 3, 1, "id986", "supported_with_pdarray"], [28, 3, 1, "id982", "supported_with_r_datetime"], [28, 3, 1, "id987", "supported_with_r_pdarray"], [28, 3, 1, "id984", "supported_with_r_timedelta"], [28, 3, 1, "id983", "supported_with_timedelta"], [28, 4, 1, "id990", "to_pandas"], [28, 4, 1, "id993", "unregister"], [28, 6, 1, "id977", "week"], [28, 6, 1, "id976", "weekday"], [28, 6, 1, "id978", "weekofyear"], [28, 6, 1, "id971", "year"]], "arkouda.ErrorMode": [[28, 3, 1, "", "ignore"], [28, 3, 1, "", "return_validity"], [28, 3, 1, "", "strict"]], "arkouda.Fields": [[28, 4, 1, "", "format"], [28, 4, 1, "", "opeq"]], "arkouda.GroupBy": [[85, 4, 1, "", "AND"], [85, 4, 1, "", "OR"], [28, 3, 1, "id862", "Reductions"], [85, 4, 1, "", "XOR"], [85, 4, 1, "", "aggregate"], [85, 4, 1, "", "all"], [85, 4, 1, "", "any"], [85, 4, 1, "", "argmax"], [85, 4, 1, "", "argmin"], [85, 4, 1, "", "attach"], [85, 4, 1, "", "broadcast"], [85, 4, 1, "", "build_from_components"], [85, 4, 1, "", "count"], [85, 3, 1, "", "dropna"], [85, 4, 1, "", "first"], [28, 4, 1, "id864", "from_return_msg"], [85, 4, 1, "", "is_registered"], [85, 3, 1, "", "logger"], [85, 4, 1, "", "max"], [85, 4, 1, "", "mean"], [85, 4, 1, "", "median"], [85, 4, 1, "", "min"], [85, 4, 1, "", "mode"], [85, 4, 1, "", "most_common"], [85, 3, 1, "", "ngroups"], [85, 3, 1, "", "nkeys"], [85, 4, 1, "", "nunique"], [28, 3, 1, "id863", "objType"], [85, 3, 1, "", "permutation"], [85, 4, 1, "", "prod"], [85, 4, 1, "", "register"], [85, 3, 1, "", "segments"], [85, 4, 1, "id0", "size"], [85, 4, 1, "", "std"], [85, 4, 1, "", "sum"], [85, 4, 1, "", "to_hdf"], [85, 4, 1, "", "unique"], [85, 3, 1, "", "unique_keys"], [85, 4, 1, "", "unregister"], [85, 4, 1, "", "unregister_groupby_by_name"], [28, 4, 1, "id866", "update_hdf"], [85, 4, 1, "", "var"]], "arkouda.IPv4": [[28, 4, 1, "", "export_uint"], [28, 4, 1, "", "format"], [28, 4, 1, "", "normalize"], [28, 4, 1, "", "opeq"], [28, 4, 1, "", "register"], [28, 3, 1, "", "special_objType"], [28, 4, 1, "", "to_hdf"], [28, 4, 1, "", "to_list"], [28, 4, 1, "", "to_ndarray"], [28, 4, 1, "", "update_hdf"]], "arkouda.Index": [[78, 5, 1, "", "argsort"], [78, 5, 1, "", "concat"], [28, 4, 1, "", "factory"], [28, 4, 1, "", "from_return_msg"], [28, 6, 1, "", "index"], [28, 4, 1, "", "is_registered"], [28, 6, 1, "", "is_unique"], [78, 5, 1, "", "lookup"], [28, 3, 1, "", "objType"], [28, 4, 1, "", "register"], [28, 4, 1, "", "save"], [78, 5, 1, "", "set_dtype"], [28, 6, 1, "", "shape"], [28, 4, 1, "", "to_csv"], [28, 4, 1, "", "to_dict"], [28, 4, 1, "", "to_hdf"], [28, 4, 1, "", "to_list"], [28, 4, 1, "", "to_ndarray"], [28, 4, 1, "", "to_pandas"], [28, 4, 1, "", "to_parquet"], [28, 4, 1, "", "unregister"], [28, 4, 1, "", "update_hdf"]], "arkouda.LogLevel": [[28, 3, 1, "", "CRITICAL"], [28, 3, 1, "", "DEBUG"], [28, 3, 1, "", "ERROR"], [28, 3, 1, "", "INFO"], [28, 3, 1, "", "WARN"]], "arkouda.MultiIndex": [[78, 5, 1, "", "argsort"], [78, 5, 1, "", "concat"], [28, 6, 1, "", "index"], [28, 4, 1, "", "is_registered"], [78, 5, 1, "", "lookup"], [28, 3, 1, "", "objType"], [28, 4, 1, "", "register"], [78, 5, 1, "", "set_dtype"], [28, 4, 1, "", "to_dict"], [28, 4, 1, "", "to_hdf"], [28, 4, 1, "", "to_list"], [28, 4, 1, "", "to_ndarray"], [28, 4, 1, "", "to_pandas"], [28, 4, 1, "", "unregister"], [28, 4, 1, "", "update_hdf"]], "arkouda.SegArray": [[28, 4, 1, "", "AND"], [28, 4, 1, "", "OR"], [28, 4, 1, "", "XOR"], [28, 4, 1, "", "aggregate"], [28, 4, 1, "", "all"], [28, 4, 1, "", "any"], [89, 5, 1, "", "append"], [89, 5, 1, "", "append_single"], [28, 4, 1, "", "argmax"], [28, 4, 1, "", "argmin"], [28, 4, 1, "", "attach"], [28, 4, 1, "", "concat"], [28, 4, 1, "", "copy"], [28, 4, 1, "", "filter"], [28, 4, 1, "", "from_multi_array"], [28, 4, 1, "", "from_parts"], [28, 4, 1, "", "from_return_msg"], [89, 5, 1, "", "get_jth"], [89, 5, 1, "", "get_length_n"], [89, 5, 1, "", "get_ngrams"], [89, 5, 1, "", "get_prefixes"], [89, 5, 1, "", "get_suffixes"], [28, 6, 1, "", "grouping"], [28, 4, 1, "", "hash"], [89, 5, 1, "", "intersect"], [28, 4, 1, "", "is_registered"], [28, 4, 1, "", "load"], [28, 4, 1, "", "max"], [28, 4, 1, "", "mean"], [28, 4, 1, "", "min"], [28, 6, 1, "", "non_empty"], [28, 4, 1, "", "nunique"], [28, 3, 1, "", "objType"], [89, 5, 1, "", "prepend_single"], [28, 4, 1, "", "prod"], [28, 4, 1, "", "read_hdf"], [28, 4, 1, "", "register"], [89, 5, 1, "", "remove_repeats"], [28, 4, 1, "", "save"], [89, 5, 1, "", "set_jth"], [89, 5, 1, "", "setdiff"], [89, 5, 1, "", "setxor"], [28, 4, 1, "", "sum"], [28, 4, 1, "", "to_hdf"], [28, 4, 1, "", "to_list"], [89, 5, 1, "", "to_ndarray"], [28, 4, 1, "", "to_parquet"], [28, 4, 1, "", "transfer"], [89, 5, 1, "", "union"], [28, 4, 1, "", "unique"], [28, 4, 1, "", "unregister"], [28, 4, 1, "", "unregister_segarray_by_name"], [28, 4, 1, "", "update_hdf"]], "arkouda.Series": [[28, 4, 1, "", "add"], [28, 6, 1, "", "at"], [28, 4, 1, "", "attach"], [28, 4, 1, "", "concat"], [28, 4, 1, "", "diff"], [28, 3, 1, "", "dt"], [28, 4, 1, "", "from_return_msg"], [28, 4, 1, "", "has_repeat_labels"], [90, 5, 1, "", "head"], [28, 6, 1, "", "iat"], [28, 6, 1, "", "iloc"], [28, 4, 1, "", "is_registered"], [28, 4, 1, "", "isin"], [28, 6, 1, "", "loc"], [90, 5, 1, "id0", "locate"], [28, 3, 1, "", "objType"], [90, 5, 1, "", "pdconcat"], [28, 4, 1, "", "register"], [28, 6, 1, "", "shape"], [90, 5, 1, "", "sort_index"], [90, 5, 1, "", "sort_values"], [28, 3, 1, "", "str_acc"], [90, 5, 1, "", "tail"], [28, 4, 1, "", "to_dataframe"], [28, 4, 1, "", "to_list"], [90, 5, 1, "", "to_pandas"], [90, 5, 1, "", "topn"], [28, 4, 1, "", "unregister"], [28, 4, 1, "", "validate_key"], [28, 4, 1, "", "validate_val"], [90, 5, 1, "", "value_counts"]], "arkouda.Strings": [[28, 3, 1, "id905", "BinOps"], [28, 4, 1, "id948", "astype"], [28, 4, 1, "id959", "attach"], [28, 4, 1, "id924", "cached_regex_patterns"], [93, 4, 1, "", "contains"], [28, 4, 1, "id913", "decode"], [28, 3, 1, "id903", "dtype"], [28, 4, 1, "id912", "encode"], [93, 4, 1, "", "endswith"], [28, 3, 1, "id898", "entry"], [93, 4, 1, "", "find_locations"], [93, 4, 1, "", "findall"], [93, 4, 1, "", "flatten"], [28, 4, 1, "id908", "from_parts"], [28, 4, 1, "id907", "from_return_msg"], [93, 4, 1, "", "fullmatch"], [28, 4, 1, "id910", "get_bytes"], [28, 4, 1, "id909", "get_lengths"], [28, 4, 1, "id911", "get_offsets"], [28, 4, 1, "id942", "get_prefixes"], [28, 4, 1, "id943", "get_suffixes"], [28, 4, 1, "id945", "group"], [28, 4, 1, "id944", "hash"], [28, 4, 1, "id954", "info"], [28, 4, 1, "id958", "is_registered"], [28, 4, 1, "id920", "isalnum"], [28, 4, 1, "id921", "isalpha"], [28, 4, 1, "id922", "isdigit"], [28, 4, 1, "id917", "islower"], [28, 4, 1, "id919", "istitle"], [28, 4, 1, "id918", "isupper"], [28, 3, 1, "id904", "logger"], [28, 4, 1, "id914", "lower"], [93, 4, 1, "", "lstick"], [93, 4, 1, "", "match"], [28, 3, 1, "id900", "nbytes"], [28, 3, 1, "id901", "ndim"], [28, 3, 1, "id906", "objType"], [93, 4, 1, "", "peel"], [28, 4, 1, "id955", "pretty_print_info"], [28, 4, 1, "id925", "purge_cached_regex_patterns"], [28, 4, 1, "id956", "register"], [93, 4, 1, "", "rpeel"], [28, 4, 1, "id953", "save"], [93, 4, 1, "", "search"], [28, 3, 1, "id902", "shape"], [28, 3, 1, "id899", "size"], [93, 4, 1, "", "split"], [93, 4, 1, "", "startswith"], [93, 4, 1, "", "stick"], [28, 4, 1, "id923", "strip"], [93, 4, 1, "", "sub"], [93, 4, 1, "", "subn"], [28, 4, 1, "id916", "title"], [28, 4, 1, "id952", "to_csv"], [28, 4, 1, "id950", "to_hdf"], [28, 4, 1, "id947", "to_list"], [93, 5, 1, "", "to_ndarray"], [28, 4, 1, "id949", "to_parquet"], [28, 4, 1, "id961", "transfer"], [28, 4, 1, "id957", "unregister"], [28, 4, 1, "id960", "unregister_strings_by_name"], [28, 4, 1, "id951", "update_hdf"], [28, 4, 1, "id915", "upper"]], "arkouda.Timedelta": [[28, 4, 1, "id844", "abs"], [28, 6, 1, "id831", "components"], [28, 6, 1, "id830", "days"], [28, 4, 1, "id847", "is_registered"], [28, 6, 1, "id828", "microseconds"], [28, 6, 1, "id827", "nanoseconds"], [28, 4, 1, "id845", "register"], [28, 6, 1, "id829", "seconds"], [28, 3, 1, "id839", "special_objType"], [28, 4, 1, "id842", "std"], [28, 4, 1, "id843", "sum"], [28, 3, 1, "id836", "supported_opeq"], [28, 3, 1, "id832", "supported_with_datetime"], [28, 3, 1, "id837", "supported_with_pdarray"], [28, 3, 1, "id833", "supported_with_r_datetime"], [28, 3, 1, "id838", "supported_with_r_pdarray"], [28, 3, 1, "id835", "supported_with_r_timedelta"], [28, 3, 1, "id834", "supported_with_timedelta"], [28, 4, 1, "id841", "to_pandas"], [28, 4, 1, "id840", "total_seconds"], [28, 4, 1, "id846", "unregister"]], "arkouda.accessor": [[2, 2, 1, "", "CachedAccessor"], [2, 2, 1, "", "DatetimeAccessor"], [2, 2, 1, "", "Properties"], [2, 2, 1, "", "StringAccessor"], [2, 5, 1, "", "date_operators"], [2, 5, 1, "", "string_operators"]], "arkouda.alignment": [[3, 7, 1, "", "NonUniqueError"], [3, 5, 1, "", "align"], [3, 5, 1, "", "find"], [3, 5, 1, "", "in1d_intervals"], [3, 5, 1, "", "interval_lookup"], [3, 5, 1, "", "is_cosorted"], [3, 5, 1, "", "left_align"], [3, 5, 1, "", "lookup"], [3, 5, 1, "", "right_align"], [3, 5, 1, "", "search_intervals"], [3, 5, 1, "", "unsqueeze"], [3, 5, 1, "", "zero_up"]], "arkouda.array_api": [[4, 0, 0, "-", "_array_object"], [5, 0, 0, "-", "_constants"], [6, 0, 0, "-", "_creation_functions"], [7, 0, 0, "-", "_data_type_functions"], [8, 0, 0, "-", "_dtypes"], [9, 0, 0, "-", "_elementwise_functions"], [10, 0, 0, "-", "_indexing_functions"], [11, 0, 0, "-", "_manipulation_functions"], [12, 0, 0, "-", "_searching_functions"], [13, 0, 0, "-", "_set_functions"], [14, 0, 0, "-", "_sorting_functions"], [15, 0, 0, "-", "_statistical_functions"], [16, 0, 0, "-", "_typing"], [17, 0, 0, "-", "_utility_functions"], [19, 0, 0, "-", "linalg"]], "arkouda.array_api._array_object": [[4, 2, 1, "", "Array"]], "arkouda.array_api._array_object.Array": [[4, 6, 1, "", "T"], [4, 6, 1, "", "device"], [4, 6, 1, "", "dtype"], [4, 6, 1, "", "mT"], [4, 6, 1, "", "ndim"], [4, 6, 1, "", "shape"], [4, 6, 1, "", "size"], [4, 4, 1, "", "to_device"], [4, 4, 1, "", "to_ndarray"], [4, 4, 1, "", "tolist"]], "arkouda.array_api._constants": [[5, 1, 1, "", "e"], [5, 1, 1, "", "inf"], [5, 1, 1, "", "nan"], [5, 1, 1, "", "pi"]], "arkouda.array_api._creation_functions": [[6, 5, 1, "", "arange"], [6, 5, 1, "", "asarray"], [6, 5, 1, "", "empty"], [6, 5, 1, "", "empty_like"], [6, 5, 1, "", "eye"], [6, 5, 1, "", "from_dlpack"], [6, 5, 1, "", "full"], [6, 5, 1, "", "full_like"], [6, 5, 1, "", "linspace"], [6, 5, 1, "", "meshgrid"], [6, 5, 1, "", "ones"], [6, 5, 1, "", "ones_like"], [6, 5, 1, "", "tril"], [6, 5, 1, "", "triu"], [6, 5, 1, "", "zeros"], [6, 5, 1, "", "zeros_like"]], "arkouda.array_api._data_type_functions": [[7, 5, 1, "", "astype"], [7, 5, 1, "", "can_cast"], [7, 2, 1, "", "finfo_object"], [7, 2, 1, "", "iinfo_object"], [7, 5, 1, "", "isdtype"], [7, 5, 1, "", "result_type"]], "arkouda.array_api._data_type_functions.finfo_object": [[7, 3, 1, "", "bits"], [7, 3, 1, "", "dtype"], [7, 3, 1, "", "eps"], [7, 3, 1, "", "max"], [7, 3, 1, "", "min"], [7, 3, 1, "", "smallest_normal"]], "arkouda.array_api._data_type_functions.iinfo_object": [[7, 3, 1, "", "bits"], [7, 3, 1, "", "dtype"], [7, 3, 1, "", "max"], [7, 3, 1, "", "min"]], "arkouda.array_api._dtypes": [[8, 1, 1, "", "bool"], [8, 1, 1, "", "complex128"], [8, 1, 1, "", "complex64"], [8, 1, 1, "", "float32"], [8, 1, 1, "", "float64"], [8, 1, 1, "", "int16"], [8, 1, 1, "", "int32"], [8, 1, 1, "", "int64"], [8, 1, 1, "", "int8"], [8, 1, 1, "", "uint16"], [8, 1, 1, "", "uint32"], [8, 1, 1, "", "uint64"], [8, 1, 1, "", "uint8"]], "arkouda.array_api._elementwise_functions": [[9, 5, 1, "", "abs"], [9, 5, 1, "", "acos"], [9, 5, 1, "", "acosh"], [9, 5, 1, "", "add"], [9, 5, 1, "", "asin"], [9, 5, 1, "", "asinh"], [9, 5, 1, "", "atan"], [9, 5, 1, "", "atan2"], [9, 5, 1, "", "atanh"], [9, 5, 1, "", "bitwise_and"], [9, 5, 1, "", "bitwise_invert"], [9, 5, 1, "", "bitwise_left_shift"], [9, 5, 1, "", "bitwise_or"], [9, 5, 1, "", "bitwise_right_shift"], [9, 5, 1, "", "bitwise_xor"], [9, 5, 1, "", "ceil"], [9, 5, 1, "", "conj"], [9, 5, 1, "", "cos"], [9, 5, 1, "", "cosh"], [9, 5, 1, "", "divide"], [9, 5, 1, "", "equal"], [9, 5, 1, "", "exp"], [9, 5, 1, "", "expm1"], [9, 5, 1, "", "floor"], [9, 5, 1, "", "floor_divide"], [9, 5, 1, "", "greater"], [9, 5, 1, "", "greater_equal"], [9, 5, 1, "", "imag"], [9, 5, 1, "", "isfinite"], [9, 5, 1, "", "isinf"], [9, 5, 1, "", "isnan"], [9, 5, 1, "", "less"], [9, 5, 1, "", "less_equal"], [9, 5, 1, "", "log"], [9, 5, 1, "", "log10"], [9, 5, 1, "", "log1p"], [9, 5, 1, "", "log2"], [9, 5, 1, "", "logaddexp"], [9, 5, 1, "", "logical_and"], [9, 5, 1, "", "logical_not"], [9, 5, 1, "", "logical_or"], [9, 5, 1, "", "logical_xor"], [9, 5, 1, "", "multiply"], [9, 5, 1, "", "negative"], [9, 5, 1, "", "not_equal"], [9, 5, 1, "", "positive"], [9, 5, 1, "", "pow"], [9, 5, 1, "", "real"], [9, 5, 1, "", "remainder"], [9, 5, 1, "", "round"], [9, 5, 1, "", "sign"], [9, 5, 1, "", "sin"], [9, 5, 1, "", "sinh"], [9, 5, 1, "", "sqrt"], [9, 5, 1, "", "square"], [9, 5, 1, "", "subtract"], [9, 5, 1, "", "tan"], [9, 5, 1, "", "tanh"], [9, 5, 1, "", "trunc"]], "arkouda.array_api._indexing_functions": [[10, 5, 1, "", "take"]], "arkouda.array_api._manipulation_functions": [[11, 5, 1, "", "broadcast_arrays"], [11, 5, 1, "", "broadcast_to"], [11, 5, 1, "", "concat"], [11, 5, 1, "", "expand_dims"], [11, 5, 1, "", "flip"], [11, 5, 1, "", "permute_dims"], [11, 5, 1, "", "reshape"], [11, 5, 1, "", "roll"], [11, 5, 1, "", "squeeze"], [11, 5, 1, "", "stack"]], "arkouda.array_api._searching_functions": [[12, 5, 1, "", "argmax"], [12, 5, 1, "", "argmin"], [12, 5, 1, "", "nonzero"], [12, 5, 1, "", "where"]], "arkouda.array_api._set_functions": [[13, 2, 1, "", "UniqueAllResult"], [13, 2, 1, "", "UniqueCountsResult"], [13, 2, 1, "", "UniqueInverseResult"], [13, 5, 1, "", "unique_all"], [13, 5, 1, "", "unique_counts"], [13, 5, 1, "", "unique_inverse"], [13, 5, 1, "", "unique_values"]], "arkouda.array_api._set_functions.UniqueAllResult": [[13, 3, 1, "", "counts"], [13, 3, 1, "", "indices"], [13, 3, 1, "", "inverse_indices"], [13, 3, 1, "", "values"]], "arkouda.array_api._set_functions.UniqueCountsResult": [[13, 3, 1, "", "counts"], [13, 3, 1, "", "values"]], "arkouda.array_api._set_functions.UniqueInverseResult": [[13, 3, 1, "", "inverse_indices"], [13, 3, 1, "", "values"]], "arkouda.array_api._sorting_functions": [[14, 5, 1, "", "argsort"], [14, 5, 1, "", "sort"]], "arkouda.array_api._statistical_functions": [[15, 5, 1, "", "max"], [15, 5, 1, "", "mean"], [15, 5, 1, "", "min"], [15, 5, 1, "", "prod"], [15, 5, 1, "", "std"], [15, 5, 1, "", "sum"], [15, 5, 1, "", "var"]], "arkouda.array_api._typing": [[16, 2, 1, "", "Array"], [16, 1, 1, "", "Device"], [16, 1, 1, "", "Dtype"], [16, 1, 1, "", "PyCapsule"], [16, 1, 1, "", "SupportsBufferProtocol"], [16, 2, 1, "", "SupportsDLPack"]], "arkouda.array_api._typing.Array": [[16, 6, 1, "", "T"], [16, 6, 1, "", "device"], [16, 6, 1, "", "dtype"], [16, 6, 1, "", "mT"], [16, 6, 1, "", "ndim"], [16, 6, 1, "", "shape"], [16, 6, 1, "", "size"], [16, 4, 1, "", "to_device"], [16, 4, 1, "", "to_ndarray"], [16, 4, 1, "", "tolist"]], "arkouda.array_api._utility_functions": [[17, 5, 1, "", "all"], [17, 5, 1, "", "any"]], "arkouda.array_api.linalg": [[19, 5, 1, "", "matmul"], [19, 5, 1, "", "matrix_transpose"], [19, 5, 1, "", "tensordot"], [19, 5, 1, "", "vecdot"]], "arkouda.array_view": [[20, 2, 1, "", "ArrayView"]], "arkouda.array_view.ArrayView": [[20, 3, 1, "", "base"], [20, 3, 1, "", "dtype"], [20, 3, 1, "", "itemsize"], [20, 3, 1, "", "ndim"], [20, 3, 1, "", "objType"], [20, 3, 1, "", "order"], [20, 3, 1, "", "shape"], [20, 3, 1, "", "size"], [20, 4, 1, "", "to_hdf"], [20, 4, 1, "", "to_list"], [20, 4, 1, "", "to_ndarray"], [20, 4, 1, "", "update_hdf"]], "arkouda.categorical": [[21, 2, 1, "", "Categorical"]], "arkouda.categorical.Categorical": [[21, 3, 1, "", "BinOps"], [21, 3, 1, "", "RegisterablePieces"], [21, 3, 1, "", "RequiredPieces"], [21, 4, 1, "", "argsort"], [21, 4, 1, "", "attach"], [21, 3, 1, "", "categories"], [21, 3, 1, "", "codes"], [21, 4, 1, "", "concatenate"], [21, 4, 1, "", "contains"], [21, 3, 1, "", "dtype"], [21, 4, 1, "", "endswith"], [21, 4, 1, "", "from_codes"], [21, 4, 1, "", "from_return_msg"], [21, 4, 1, "", "group"], [21, 4, 1, "", "hash"], [21, 4, 1, "", "in1d"], [21, 4, 1, "", "info"], [21, 4, 1, "", "is_registered"], [21, 4, 1, "", "isna"], [21, 3, 1, "", "ndim"], [21, 3, 1, "", "nlevels"], [21, 3, 1, "", "objType"], [21, 4, 1, "", "parse_hdf_categoricals"], [21, 3, 1, "id0", "permutation"], [21, 4, 1, "", "pretty_print_info"], [21, 4, 1, "", "register"], [21, 4, 1, "", "reset_categories"], [21, 4, 1, "", "save"], [21, 3, 1, "id1", "segments"], [21, 4, 1, "", "set_categories"], [21, 3, 1, "", "shape"], [21, 3, 1, "", "size"], [21, 4, 1, "", "sort"], [21, 4, 1, "", "standardize_categories"], [21, 4, 1, "", "startswith"], [21, 4, 1, "", "to_hdf"], [21, 4, 1, "", "to_list"], [21, 4, 1, "", "to_ndarray"], [21, 4, 1, "", "to_parquet"], [21, 4, 1, "", "transfer"], [21, 4, 1, "", "unique"], [21, 4, 1, "", "unregister"], [21, 4, 1, "", "unregister_categorical_by_name"], [21, 4, 1, "", "update_hdf"]], "arkouda.client": [[22, 5, 1, "", "connect"], [22, 5, 1, "", "disconnect"], [22, 5, 1, "", "generate_history"], [22, 5, 1, "", "get_config"], [22, 5, 1, "", "get_mem_avail"], [22, 5, 1, "", "get_mem_status"], [22, 5, 1, "", "get_mem_used"], [22, 5, 1, "", "get_server_commands"], [22, 5, 1, "", "print_server_commands"], [22, 5, 1, "", "ruok"], [22, 5, 1, "", "shutdown"]], "arkouda.client_dtypes": [[23, 2, 1, "", "BitVector"], [23, 5, 1, "", "BitVectorizer"], [23, 2, 1, "", "Fields"], [23, 2, 1, "", "IPv4"], [23, 5, 1, "", "ip_address"], [23, 5, 1, "", "is_ipv4"], [23, 5, 1, "", "is_ipv6"]], "arkouda.client_dtypes.BitVector": [[23, 3, 1, "", "conserves"], [23, 4, 1, "", "format"], [23, 4, 1, "", "from_return_msg"], [23, 4, 1, "", "opeq"], [23, 4, 1, "", "register"], [23, 3, 1, "", "special_objType"], [23, 4, 1, "", "to_list"], [23, 4, 1, "", "to_ndarray"]], "arkouda.client_dtypes.Fields": [[23, 4, 1, "", "format"], [23, 4, 1, "", "opeq"]], "arkouda.client_dtypes.IPv4": [[23, 4, 1, "", "export_uint"], [23, 4, 1, "", "format"], [23, 4, 1, "", "normalize"], [23, 4, 1, "", "opeq"], [23, 4, 1, "", "register"], [23, 3, 1, "", "special_objType"], [23, 4, 1, "", "to_hdf"], [23, 4, 1, "", "to_list"], [23, 4, 1, "", "to_ndarray"], [23, 4, 1, "", "update_hdf"]], "arkouda.dataframe": [[24, 2, 1, "", "DataFrame"], [24, 5, 1, "", "intersect"], [24, 5, 1, "", "intx"], [24, 5, 1, "", "invert_permutation"], [24, 5, 1, "", "merge"], [24, 5, 1, "", "sorted"]], "arkouda.dataframe.DataFrame": [[24, 3, 1, "", "COLUMN_CLASSES"], [24, 4, 1, "", "GroupBy"], [24, 4, 1, "", "append"], [24, 4, 1, "", "apply_permutation"], [24, 4, 1, "", "argsort"], [24, 4, 1, "", "attach"], [24, 4, 1, "", "coargsort"], [24, 6, 1, "", "columns"], [24, 4, 1, "", "concat"], [24, 4, 1, "", "copy"], [24, 4, 1, "", "corr"], [24, 4, 1, "", "drop"], [24, 4, 1, "", "drop_duplicates"], [24, 6, 1, "", "dtypes"], [24, 6, 1, "", "empty"], [24, 4, 1, "", "filter_by_range"], [24, 4, 1, "", "from_pandas"], [24, 4, 1, "", "from_return_msg"], [24, 4, 1, "", "groupby"], [24, 4, 1, "", "head"], [24, 6, 1, "", "index"], [24, 6, 1, "", "info"], [24, 4, 1, "", "is_registered"], [24, 4, 1, "", "isin"], [24, 4, 1, "", "load"], [24, 4, 1, "", "memory_usage"], [24, 4, 1, "", "merge"], [24, 3, 1, "", "objType"], [24, 4, 1, "", "read_csv"], [24, 4, 1, "", "register"], [24, 4, 1, "", "rename"], [24, 4, 1, "", "reset_index"], [24, 4, 1, "", "sample"], [24, 4, 1, "", "save"], [24, 6, 1, "", "shape"], [24, 6, 1, "", "size"], [24, 4, 1, "", "sort_index"], [24, 4, 1, "", "sort_values"], [24, 4, 1, "", "tail"], [24, 4, 1, "", "to_csv"], [24, 4, 1, "", "to_hdf"], [24, 4, 1, "", "to_pandas"], [24, 4, 1, "", "to_parquet"], [24, 4, 1, "", "transfer"], [24, 4, 1, "", "unregister"], [24, 4, 1, "", "unregister_dataframe_by_name"], [24, 4, 1, "", "update_hdf"], [24, 4, 1, "", "update_size"]], "arkouda.dtypes": [[25, 1, 1, "", "ARKOUDA_SUPPORTED_DTYPES"], [25, 1, 1, "", "DTypeObjects"], [25, 1, 1, "", "DTypes"], [25, 1, 1, "", "ScalarDTypes"], [25, 1, 1, "", "all_scalars"], [25, 1, 1, "", "bigint"], [25, 1, 1, "", "bitType"], [25, 1, 1, "", "bool"], [25, 1, 1, "", "bool_scalars"], [25, 5, 1, "", "check_np_dtype"], [25, 1, 1, "", "complex128"], [25, 1, 1, "", "complex64"], [25, 5, 1, "", "dtype"], [25, 1, 1, "", "float32"], [25, 1, 1, "", "float64"], [25, 1, 1, "", "float_scalars"], [25, 5, 1, "", "get_byteorder"], [25, 5, 1, "", "get_server_byteorder"], [25, 1, 1, "", "int16"], [25, 1, 1, "", "int32"], [25, 1, 1, "", "int64"], [25, 1, 1, "", "int8"], [25, 1, 1, "", "intTypes"], [25, 1, 1, "", "int_scalars"], [25, 5, 1, "", "isSupportedNumber"], [25, 1, 1, "", "numeric_scalars"], [25, 1, 1, "", "numpy_scalars"], [25, 5, 1, "", "resolve_scalar_dtype"], [25, 1, 1, "", "str_"], [25, 1, 1, "", "str_scalars"], [25, 5, 1, "", "translate_np_dtype"], [25, 1, 1, "", "uint16"], [25, 1, 1, "", "uint32"], [25, 1, 1, "", "uint64"], [25, 1, 1, "", "uint8"]], "arkouda.groupbyclass": [[26, 1, 1, "", "GROUPBY_REDUCTION_TYPES"], [26, 2, 1, "", "GroupBy"], [26, 5, 1, "", "broadcast"], [26, 5, 1, "", "unique"]], "arkouda.groupbyclass.GroupBy": [[26, 4, 1, "", "AND"], [26, 4, 1, "", "OR"], [26, 3, 1, "", "Reductions"], [26, 4, 1, "", "XOR"], [26, 4, 1, "", "aggregate"], [26, 4, 1, "", "all"], [26, 4, 1, "", "any"], [26, 4, 1, "", "argmax"], [26, 4, 1, "", "argmin"], [26, 4, 1, "", "attach"], [26, 4, 1, "", "broadcast"], [26, 4, 1, "", "build_from_components"], [26, 4, 1, "", "count"], [26, 3, 1, "", "dropna"], [26, 4, 1, "", "first"], [26, 4, 1, "", "from_return_msg"], [26, 4, 1, "", "is_registered"], [26, 3, 1, "", "logger"], [26, 4, 1, "", "max"], [26, 4, 1, "", "mean"], [26, 4, 1, "", "median"], [26, 4, 1, "", "min"], [26, 4, 1, "", "mode"], [26, 4, 1, "", "most_common"], [26, 3, 1, "", "ngroups"], [26, 3, 1, "", "nkeys"], [26, 4, 1, "", "nunique"], [26, 3, 1, "", "objType"], [26, 3, 1, "", "permutation"], [26, 4, 1, "", "prod"], [26, 4, 1, "", "register"], [26, 3, 1, "", "segments"], [26, 4, 1, "id0", "size"], [26, 4, 1, "", "std"], [26, 4, 1, "", "sum"], [26, 4, 1, "", "to_hdf"], [26, 4, 1, "", "unique"], [26, 3, 1, "", "unique_keys"], [26, 4, 1, "", "unregister"], [26, 4, 1, "", "unregister_groupby_by_name"], [26, 4, 1, "", "update_hdf"], [26, 4, 1, "", "var"]], "arkouda.history": [[27, 2, 1, "", "HistoryRetriever"], [27, 2, 1, "", "NotebookHistoryRetriever"], [27, 2, 1, "", "ShellHistoryRetriever"]], "arkouda.history.HistoryRetriever": [[27, 4, 1, "", "retrieve"]], "arkouda.history.NotebookHistoryRetriever": [[27, 4, 1, "", "retrieve"]], "arkouda.history.ShellHistoryRetriever": [[27, 4, 1, "", "retrieve"]], "arkouda.index": [[29, 2, 1, "", "Index"], [29, 2, 1, "", "MultiIndex"]], "arkouda.index.Index": [[29, 4, 1, "", "argsort"], [29, 4, 1, "", "concat"], [29, 4, 1, "", "factory"], [29, 4, 1, "", "from_return_msg"], [29, 6, 1, "", "index"], [29, 4, 1, "", "is_registered"], [29, 6, 1, "", "is_unique"], [29, 4, 1, "", "lookup"], [29, 3, 1, "", "objType"], [29, 4, 1, "", "register"], [29, 4, 1, "", "save"], [29, 4, 1, "", "set_dtype"], [29, 6, 1, "", "shape"], [29, 4, 1, "", "to_csv"], [29, 4, 1, "", "to_dict"], [29, 4, 1, "", "to_hdf"], [29, 4, 1, "", "to_list"], [29, 4, 1, "", "to_ndarray"], [29, 4, 1, "", "to_pandas"], [29, 4, 1, "", "to_parquet"], [29, 4, 1, "", "unregister"], [29, 4, 1, "", "update_hdf"]], "arkouda.index.MultiIndex": [[29, 4, 1, "", "argsort"], [29, 4, 1, "", "concat"], [29, 6, 1, "", "index"], [29, 4, 1, "", "is_registered"], [29, 4, 1, "", "lookup"], [29, 3, 1, "", "objType"], [29, 4, 1, "", "register"], [29, 4, 1, "", "set_dtype"], [29, 4, 1, "", "to_dict"], [29, 4, 1, "", "to_hdf"], [29, 4, 1, "", "to_list"], [29, 4, 1, "", "to_ndarray"], [29, 4, 1, "", "to_pandas"], [29, 4, 1, "", "unregister"], [29, 4, 1, "", "update_hdf"]], "arkouda.infoclass": [[30, 1, 1, "", "AllSymbols"], [30, 1, 1, "", "RegisteredSymbols"], [30, 5, 1, "", "information"], [30, 5, 1, "", "list_registry"], [30, 5, 1, "", "list_symbol_table"], [30, 5, 1, "", "pretty_print_information"]], "arkouda.io": [[31, 5, 1, "", "export"], [31, 5, 1, "", "get_columns"], [31, 5, 1, "", "get_datasets"], [31, 5, 1, "", "get_filetype"], [31, 5, 1, "", "get_null_indices"], [31, 5, 1, "", "import_data"], [31, 5, 1, "", "load"], [31, 5, 1, "", "load_all"], [31, 5, 1, "", "ls"], [31, 5, 1, "", "ls_csv"], [31, 5, 1, "", "read"], [31, 5, 1, "", "read_csv"], [31, 5, 1, "", "read_hdf"], [31, 5, 1, "", "read_parquet"], [31, 5, 1, "", "read_tagged_data"], [31, 5, 1, "", "receive"], [31, 5, 1, "", "receive_dataframe"], [31, 5, 1, "", "restore"], [31, 5, 1, "", "save_all"], [31, 5, 1, "", "snapshot"], [31, 5, 1, "", "to_csv"], [31, 5, 1, "", "to_hdf"], [31, 5, 1, "", "to_parquet"], [31, 5, 1, "", "update_hdf"]], "arkouda.io_util": [[32, 5, 1, "", "delimited_file_to_dict"], [32, 5, 1, "", "dict_to_delimited_file"], [32, 5, 1, "", "get_directory"], [32, 5, 1, "", "write_line_to_file"]], "arkouda.join": [[33, 5, 1, "", "compute_join_size"], [33, 5, 1, "", "gen_ranges"], [33, 5, 1, "", "join_on_eq_with_dt"]], "arkouda.logger": [[34, 2, 1, "", "LogLevel"], [34, 5, 1, "", "disableVerbose"], [34, 5, 1, "", "enableVerbose"], [34, 5, 1, "", "write_log"]], "arkouda.logger.LogLevel": [[34, 3, 1, "", "CRITICAL"], [34, 3, 1, "", "DEBUG"], [34, 3, 1, "", "ERROR"], [34, 3, 1, "", "INFO"], [34, 3, 1, "", "WARN"]], "arkouda.match": [[35, 2, 1, "", "Match"]], "arkouda.match.Match": [[93, 4, 1, "", "end"], [93, 4, 1, "", "find_matches"], [93, 4, 1, "", "group"], [93, 4, 1, "", "match_type"], [93, 4, 1, "", "matched"], [93, 4, 1, "", "start"]], "arkouda.matcher": [[36, 2, 1, "", "Matcher"]], "arkouda.matcher.Matcher": [[36, 3, 1, "", "LocationsInfo"], [36, 4, 1, "", "find_locations"], [36, 4, 1, "", "findall"], [36, 4, 1, "", "get_match"], [36, 4, 1, "", "split"], [36, 4, 1, "", "sub"]], "arkouda.numeric": [[37, 2, 1, "", "ErrorMode"], [37, 5, 1, "", "abs"], [37, 5, 1, "", "arccos"], [37, 5, 1, "", "arccosh"], [37, 5, 1, "", "arcsin"], [37, 5, 1, "", "arcsinh"], [37, 5, 1, "", "arctan"], [37, 5, 1, "", "arctan2"], [37, 5, 1, "", "arctanh"], [37, 5, 1, "", "cast"], [37, 5, 1, "", "ceil"], [37, 5, 1, "", "cos"], [37, 5, 1, "", "cosh"], [37, 5, 1, "", "cumprod"], [37, 5, 1, "", "cumsum"], [37, 5, 1, "", "deg2rad"], [37, 5, 1, "", "exp"], [37, 5, 1, "", "expm1"], [37, 5, 1, "", "floor"], [37, 5, 1, "", "hash"], [37, 5, 1, "", "histogram"], [37, 5, 1, "", "histogram2d"], [37, 5, 1, "", "histogramdd"], [37, 5, 1, "", "isfinite"], [37, 5, 1, "", "isinf"], [37, 5, 1, "", "isnan"], [37, 5, 1, "", "log"], [37, 5, 1, "", "log10"], [37, 5, 1, "", "log1p"], [37, 5, 1, "", "log2"], [37, 5, 1, "", "rad2deg"], [37, 5, 1, "", "round"], [37, 5, 1, "", "sign"], [37, 5, 1, "", "sin"], [37, 5, 1, "", "sinh"], [37, 5, 1, "", "square"], [37, 5, 1, "", "tan"], [37, 5, 1, "", "tanh"], [37, 5, 1, "", "trunc"], [37, 5, 1, "", "value_counts"], [37, 5, 1, "", "where"]], "arkouda.numeric.ErrorMode": [[37, 3, 1, "", "ignore"], [37, 3, 1, "", "return_validity"], [37, 3, 1, "", "strict"]], "arkouda.pdarray": [[28, 3, 1, "id614", "BinOps"], [28, 3, 1, "id615", "OpEqOps"], [86, 4, 1, "", "all"], [86, 4, 1, "", "any"], [86, 4, 1, "", "argmax"], [86, 4, 1, "", "argmaxk"], [86, 4, 1, "", "argmin"], [86, 4, 1, "", "argmink"], [28, 4, 1, "id649", "astype"], [28, 4, 1, "id665", "attach"], [28, 4, 1, "id651", "bigint_to_uint_arrays"], [28, 4, 1, "id644", "clz"], [28, 4, 1, "id637", "corr"], [28, 4, 1, "id636", "cov"], [28, 4, 1, "id645", "ctz"], [88, 3, 1, "", "dtype"], [28, 4, 1, "id620", "fill"], [28, 4, 1, "id617", "format_other"], [28, 4, 1, "id624", "info"], [28, 4, 1, "id623", "is_registered"], [86, 4, 1, "", "is_sorted"], [88, 3, 1, "", "itemsize"], [86, 4, 1, "", "max"], [28, 6, 1, "id613", "max_bits"], [86, 4, 1, "", "maxk"], [86, 4, 1, "", "mean"], [86, 4, 1, "", "min"], [86, 4, 1, "", "mink"], [88, 3, 1, "", "name"], [88, 3, 1, "", "ndim"], [28, 3, 1, "id616", "objType"], [28, 4, 1, "id619", "opeq"], [28, 4, 1, "id643", "parity"], [28, 4, 1, "id642", "popcount"], [28, 4, 1, "id625", "pretty_print_info"], [86, 4, 1, "", "prod"], [28, 4, 1, "id663", "register"], [28, 4, 1, "id652", "reshape"], [28, 4, 1, "id646", "rotl"], [28, 4, 1, "id647", "rotr"], [28, 4, 1, "id662", "save"], [88, 3, 1, "", "shape"], [88, 3, 1, "", "size"], [28, 4, 1, "id650", "slice_bits"], [86, 4, 1, "", "std"], [86, 4, 1, "", "sum"], [28, 4, 1, "id659", "to_csv"], [28, 4, 1, "id655", "to_cuda"], [28, 4, 1, "id657", "to_hdf"], [28, 4, 1, "id654", "to_list"], [88, 5, 1, "", "to_ndarray"], [28, 4, 1, "id656", "to_parquet"], [28, 4, 1, "id618", "transfer"], [28, 4, 1, "id664", "unregister"], [28, 4, 1, "id658", "update_hdf"], [28, 4, 1, "id648", "value_counts"], [86, 4, 1, "", "var"]], "arkouda.pdarrayclass": [[38, 7, 1, "", "RegistrationError"], [38, 5, 1, "", "all"], [38, 5, 1, "", "any"], [38, 5, 1, "", "argmax"], [38, 5, 1, "", "argmaxk"], [38, 5, 1, "", "argmin"], [38, 5, 1, "", "argmink"], [38, 5, 1, "", "attach_pdarray"], [38, 5, 1, "", "broadcast_to_shape"], [38, 5, 1, "", "clear"], [38, 5, 1, "", "clz"], [38, 5, 1, "", "corr"], [38, 5, 1, "", "cov"], [38, 5, 1, "", "ctz"], [38, 5, 1, "", "divmod"], [38, 5, 1, "", "fmod"], [38, 5, 1, "", "is_sorted"], [38, 5, 1, "", "max"], [38, 5, 1, "", "maxk"], [38, 5, 1, "", "mean"], [38, 5, 1, "", "min"], [38, 5, 1, "", "mink"], [38, 5, 1, "", "mod"], [38, 5, 1, "", "parity"], [38, 2, 1, "", "pdarray"], [38, 5, 1, "", "popcount"], [38, 5, 1, "", "power"], [38, 5, 1, "", "prod"], [38, 5, 1, "", "rotl"], [38, 5, 1, "", "rotr"], [38, 5, 1, "", "sqrt"], [38, 5, 1, "", "std"], [38, 5, 1, "", "sum"], [38, 5, 1, "", "unregister_pdarray_by_name"], [38, 5, 1, "", "var"]], "arkouda.pdarrayclass.pdarray": [[38, 3, 1, "", "BinOps"], [38, 3, 1, "", "OpEqOps"], [38, 4, 1, "", "all"], [38, 4, 1, "", "any"], [38, 4, 1, "", "argmax"], [38, 4, 1, "", "argmaxk"], [38, 4, 1, "", "argmin"], [38, 4, 1, "", "argmink"], [38, 4, 1, "", "astype"], [38, 4, 1, "", "attach"], [38, 4, 1, "", "bigint_to_uint_arrays"], [38, 4, 1, "", "clz"], [38, 4, 1, "", "corr"], [38, 4, 1, "", "cov"], [38, 4, 1, "", "ctz"], [38, 3, 1, "", "dtype"], [38, 4, 1, "", "fill"], [38, 4, 1, "", "format_other"], [38, 4, 1, "", "info"], [38, 4, 1, "", "is_registered"], [38, 4, 1, "", "is_sorted"], [38, 3, 1, "", "itemsize"], [38, 4, 1, "", "max"], [38, 6, 1, "", "max_bits"], [38, 4, 1, "", "maxk"], [38, 4, 1, "", "mean"], [38, 4, 1, "", "min"], [38, 4, 1, "", "mink"], [38, 3, 1, "", "name"], [38, 3, 1, "", "ndim"], [38, 3, 1, "", "objType"], [38, 4, 1, "", "opeq"], [38, 4, 1, "", "parity"], [38, 4, 1, "", "popcount"], [38, 4, 1, "", "pretty_print_info"], [38, 4, 1, "", "prod"], [38, 4, 1, "", "register"], [38, 4, 1, "", "reshape"], [38, 4, 1, "", "rotl"], [38, 4, 1, "", "rotr"], [38, 4, 1, "", "save"], [38, 3, 1, "", "shape"], [38, 3, 1, "", "size"], [38, 4, 1, "", "slice_bits"], [38, 4, 1, "", "std"], [38, 4, 1, "", "sum"], [38, 4, 1, "", "to_csv"], [38, 4, 1, "", "to_cuda"], [38, 4, 1, "", "to_hdf"], [38, 4, 1, "", "to_list"], [38, 4, 1, "", "to_ndarray"], [38, 4, 1, "", "to_parquet"], [38, 4, 1, "", "transfer"], [38, 4, 1, "", "unregister"], [38, 4, 1, "", "update_hdf"], [38, 4, 1, "", "value_counts"], [38, 4, 1, "", "var"]], "arkouda.pdarraycreation": [[39, 5, 1, "", "arange"], [39, 5, 1, "", "array"], [39, 5, 1, "", "bigint_from_uint_arrays"], [39, 5, 1, "", "from_series"], [39, 5, 1, "", "full"], [39, 5, 1, "", "full_like"], [39, 5, 1, "", "linspace"], [39, 5, 1, "", "ones"], [39, 5, 1, "", "ones_like"], [39, 5, 1, "", "randint"], [39, 5, 1, "", "random_strings_lognormal"], [39, 5, 1, "", "random_strings_uniform"], [39, 5, 1, "", "standard_normal"], [39, 5, 1, "", "uniform"], [39, 5, 1, "", "zeros"], [39, 5, 1, "", "zeros_like"]], "arkouda.pdarraysetops": [[40, 5, 1, "", "concatenate"], [40, 5, 1, "", "in1d"], [40, 5, 1, "", "indexof1d"], [40, 5, 1, "", "intersect1d"], [40, 5, 1, "", "setdiff1d"], [40, 5, 1, "", "setxor1d"], [40, 5, 1, "", "union1d"]], "arkouda.plotting": [[41, 5, 1, "", "hist_all"], [41, 5, 1, "", "plot_dist"]], "arkouda.row": [[42, 2, 1, "", "Row"]], "arkouda.security": [[43, 5, 1, "", "generate_token"], [43, 5, 1, "", "generate_username_token_json"], [43, 5, 1, "", "get_arkouda_client_directory"], [43, 5, 1, "", "get_home_directory"], [43, 5, 1, "", "get_username"], [43, 1, 1, "", "username_tokenizer"]], "arkouda.segarray": [[44, 1, 1, "", "LEN_SUFFIX"], [44, 1, 1, "", "SEG_SUFFIX"], [44, 2, 1, "", "SegArray"], [44, 1, 1, "", "VAL_SUFFIX"], [44, 5, 1, "", "segarray"]], "arkouda.segarray.SegArray": [[44, 4, 1, "", "AND"], [44, 4, 1, "", "OR"], [44, 4, 1, "", "XOR"], [44, 4, 1, "", "aggregate"], [44, 4, 1, "", "all"], [44, 4, 1, "", "any"], [44, 4, 1, "", "append"], [44, 4, 1, "", "append_single"], [44, 4, 1, "", "argmax"], [44, 4, 1, "", "argmin"], [44, 4, 1, "", "attach"], [44, 4, 1, "", "concat"], [44, 4, 1, "", "copy"], [44, 4, 1, "", "filter"], [44, 4, 1, "", "from_multi_array"], [44, 4, 1, "", "from_parts"], [44, 4, 1, "", "from_return_msg"], [44, 4, 1, "", "get_jth"], [44, 4, 1, "", "get_length_n"], [44, 4, 1, "", "get_ngrams"], [44, 4, 1, "", "get_prefixes"], [44, 4, 1, "", "get_suffixes"], [44, 6, 1, "", "grouping"], [44, 4, 1, "", "hash"], [44, 4, 1, "", "intersect"], [44, 4, 1, "", "is_registered"], [44, 4, 1, "", "load"], [44, 4, 1, "", "max"], [44, 4, 1, "", "mean"], [44, 4, 1, "", "min"], [44, 6, 1, "", "non_empty"], [44, 4, 1, "", "nunique"], [44, 3, 1, "", "objType"], [44, 4, 1, "", "prepend_single"], [44, 4, 1, "", "prod"], [44, 4, 1, "", "read_hdf"], [44, 4, 1, "", "register"], [44, 4, 1, "", "remove_repeats"], [44, 4, 1, "", "save"], [44, 4, 1, "", "set_jth"], [44, 4, 1, "", "setdiff"], [44, 4, 1, "", "setxor"], [44, 4, 1, "", "sum"], [44, 4, 1, "", "to_hdf"], [44, 4, 1, "", "to_list"], [44, 4, 1, "", "to_ndarray"], [44, 4, 1, "", "to_parquet"], [44, 4, 1, "", "transfer"], [44, 4, 1, "", "union"], [44, 4, 1, "", "unique"], [44, 4, 1, "", "unregister"], [44, 4, 1, "", "unregister_segarray_by_name"], [44, 4, 1, "", "update_hdf"]], "arkouda.series": [[45, 2, 1, "", "Series"]], "arkouda.series.Series": [[45, 4, 1, "", "add"], [45, 6, 1, "", "at"], [45, 4, 1, "", "attach"], [45, 4, 1, "", "concat"], [45, 4, 1, "", "diff"], [45, 3, 1, "", "dt"], [45, 4, 1, "", "from_return_msg"], [45, 4, 1, "", "has_repeat_labels"], [45, 4, 1, "", "head"], [45, 6, 1, "", "iat"], [45, 6, 1, "", "iloc"], [45, 4, 1, "", "is_registered"], [45, 4, 1, "", "isin"], [45, 6, 1, "", "loc"], [45, 4, 1, "", "locate"], [45, 3, 1, "", "objType"], [45, 4, 1, "", "pdconcat"], [45, 4, 1, "", "register"], [45, 6, 1, "", "shape"], [45, 4, 1, "", "sort_index"], [45, 4, 1, "", "sort_values"], [45, 3, 1, "", "str_acc"], [45, 4, 1, "", "tail"], [45, 4, 1, "", "to_dataframe"], [45, 4, 1, "", "to_list"], [45, 4, 1, "", "to_pandas"], [45, 4, 1, "", "topn"], [45, 4, 1, "", "unregister"], [45, 4, 1, "", "validate_key"], [45, 4, 1, "", "validate_val"], [45, 4, 1, "", "value_counts"]], "arkouda.sorting": [[46, 5, 1, "", "argsort"], [46, 5, 1, "", "coargsort"], [46, 5, 1, "", "sort"]], "arkouda.strings": [[47, 2, 1, "", "Strings"]], "arkouda.strings.Strings": [[47, 3, 1, "", "BinOps"], [47, 4, 1, "", "astype"], [47, 4, 1, "", "attach"], [47, 4, 1, "", "cached_regex_patterns"], [47, 4, 1, "", "contains"], [47, 4, 1, "", "decode"], [47, 3, 1, "", "dtype"], [47, 4, 1, "", "encode"], [47, 4, 1, "", "endswith"], [47, 3, 1, "", "entry"], [47, 4, 1, "", "find_locations"], [47, 4, 1, "", "findall"], [47, 4, 1, "", "flatten"], [47, 4, 1, "", "from_parts"], [47, 4, 1, "", "from_return_msg"], [47, 4, 1, "", "fullmatch"], [47, 4, 1, "", "get_bytes"], [47, 4, 1, "", "get_lengths"], [47, 4, 1, "", "get_offsets"], [47, 4, 1, "", "get_prefixes"], [47, 4, 1, "", "get_suffixes"], [47, 4, 1, "", "group"], [47, 4, 1, "", "hash"], [47, 4, 1, "", "info"], [47, 4, 1, "", "is_registered"], [47, 4, 1, "", "isalnum"], [47, 4, 1, "", "isalpha"], [47, 4, 1, "", "isdigit"], [47, 4, 1, "", "islower"], [47, 4, 1, "", "istitle"], [47, 4, 1, "", "isupper"], [47, 3, 1, "", "logger"], [47, 4, 1, "", "lower"], [47, 4, 1, "", "lstick"], [47, 4, 1, "", "match"], [47, 3, 1, "", "nbytes"], [47, 3, 1, "", "ndim"], [47, 3, 1, "", "objType"], [47, 4, 1, "", "peel"], [47, 4, 1, "", "pretty_print_info"], [47, 4, 1, "", "purge_cached_regex_patterns"], [47, 4, 1, "", "register"], [47, 4, 1, "", "rpeel"], [47, 4, 1, "", "save"], [47, 4, 1, "", "search"], [47, 3, 1, "", "shape"], [47, 3, 1, "", "size"], [47, 4, 1, "", "split"], [47, 4, 1, "", "startswith"], [47, 4, 1, "", "stick"], [47, 4, 1, "", "strip"], [47, 4, 1, "", "sub"], [47, 4, 1, "", "subn"], [47, 4, 1, "", "title"], [47, 4, 1, "", "to_csv"], [47, 4, 1, "", "to_hdf"], [47, 4, 1, "", "to_list"], [47, 4, 1, "", "to_ndarray"], [47, 4, 1, "", "to_parquet"], [47, 4, 1, "", "transfer"], [47, 4, 1, "", "unregister"], [47, 4, 1, "", "unregister_strings_by_name"], [47, 4, 1, "", "update_hdf"], [47, 4, 1, "", "upper"]], "arkouda.timeclass": [[48, 2, 1, "", "Datetime"], [48, 2, 1, "", "Timedelta"], [48, 5, 1, "", "date_range"], [48, 5, 1, "", "timedelta_range"]], "arkouda.timeclass.Datetime": [[48, 6, 1, "", "date"], [48, 6, 1, "", "day"], [48, 6, 1, "", "day_of_week"], [48, 6, 1, "", "day_of_year"], [48, 6, 1, "", "dayofweek"], [48, 6, 1, "", "dayofyear"], [48, 6, 1, "", "hour"], [48, 6, 1, "", "is_leap_year"], [48, 4, 1, "", "is_registered"], [48, 4, 1, "", "isocalendar"], [48, 6, 1, "", "microsecond"], [48, 6, 1, "", "millisecond"], [48, 6, 1, "", "minute"], [48, 6, 1, "", "month"], [48, 6, 1, "", "nanosecond"], [48, 4, 1, "", "register"], [48, 6, 1, "", "second"], [48, 3, 1, "", "special_objType"], [48, 4, 1, "", "sum"], [48, 3, 1, "", "supported_opeq"], [48, 3, 1, "", "supported_with_datetime"], [48, 3, 1, "", "supported_with_pdarray"], [48, 3, 1, "", "supported_with_r_datetime"], [48, 3, 1, "", "supported_with_r_pdarray"], [48, 3, 1, "", "supported_with_r_timedelta"], [48, 3, 1, "", "supported_with_timedelta"], [48, 4, 1, "", "to_pandas"], [48, 4, 1, "", "unregister"], [48, 6, 1, "", "week"], [48, 6, 1, "", "weekday"], [48, 6, 1, "", "weekofyear"], [48, 6, 1, "", "year"]], "arkouda.timeclass.Timedelta": [[48, 4, 1, "", "abs"], [48, 6, 1, "", "components"], [48, 6, 1, "", "days"], [48, 4, 1, "", "is_registered"], [48, 6, 1, "", "microseconds"], [48, 6, 1, "", "nanoseconds"], [48, 4, 1, "", "register"], [48, 6, 1, "", "seconds"], [48, 3, 1, "", "special_objType"], [48, 4, 1, "", "std"], [48, 4, 1, "", "sum"], [48, 3, 1, "", "supported_opeq"], [48, 3, 1, "", "supported_with_datetime"], [48, 3, 1, "", "supported_with_pdarray"], [48, 3, 1, "", "supported_with_r_datetime"], [48, 3, 1, "", "supported_with_r_pdarray"], [48, 3, 1, "", "supported_with_r_timedelta"], [48, 3, 1, "", "supported_with_timedelta"], [48, 4, 1, "", "to_pandas"], [48, 4, 1, "", "total_seconds"], [48, 4, 1, "", "unregister"]], "arkouda.util": [[49, 5, 1, "", "attach"], [49, 5, 1, "", "attach_all"], [49, 5, 1, "", "broadcast_dims"], [49, 5, 1, "", "concatenate"], [49, 5, 1, "", "convert_if_categorical"], [49, 5, 1, "", "enrich_inplace"], [49, 5, 1, "", "expand"], [49, 5, 1, "", "generic_concat"], [49, 5, 1, "", "get_callback"], [49, 5, 1, "", "identity"], [49, 5, 1, "", "invert_permutation"], [49, 5, 1, "", "is_registered"], [49, 5, 1, "", "most_common"], [49, 5, 1, "", "register"], [49, 5, 1, "", "register_all"], [49, 5, 1, "", "report_mem"], [49, 5, 1, "", "unregister"], [49, 5, 1, "", "unregister_all"]]}, "objtypes": {"0": "py:module", "1": "py:data", "2": "py:class", "3": "py:attribute", "4": "py:method", "5": "py:function", "6": "py:property", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "data", "Python data"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "method", "Python method"], "5": ["py", "function", "Python function"], "6": ["py", "property", "Python property"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"contribut": 0, "ad": [0, 1, 51, 71], "issu": 0, "bug": [0, 57], "report": 0, "featur": [0, 51, 78, 84, 90], "request": 0, "develop": [0, 53, 58, 72], "arkouda": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 54, 56, 59, 60, 61, 63, 65, 66, 68, 69, 70, 71, 78, 81, 84, 89, 90, 92, 93], "code": 0, "convent": 0, "lint": 0, "python3": 0, "chapel": [0, 1, 53, 67, 69, 70], "test": [0, 1, 52, 75], "run": [0, 1, 52, 53, 71], "python": [0, 1, 51, 59, 66, 69, 70, 72, 92], "write": [0, 61, 63, 64], "pull": 0, "review": 0, "core": 0, "team": 0, "onli": 0, "merg": 0, "releas": [0, 55], "process": [0, 55, 71], "environ": [1, 53, 56, 68, 69, 70], "variabl": [1, 56, 68], "compil": [1, 56], "makefil": 1, "flag": 1, "depend": [1, 66, 68, 72], "path": 1, "modul": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 71], "from": [1, 70, 77], "outsid": 1, "src": 1, "directori": 1, "client": [1, 22, 51, 66, 77, 92], "accessor": 2, "content": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "class": [2, 4, 7, 13, 16, 20, 21, 23, 24, 26, 27, 28, 29, 34, 35, 36, 37, 38, 42, 44, 45, 47, 48, 88], "function": [2, 3, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 19, 22, 23, 24, 25, 26, 28, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 43, 44, 46, 48, 49, 51, 64, 80], "align": 3, "array_api": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "_array_object": 4, "_constant": 5, "_creation_funct": 6, "_data_type_funct": 7, "_dtype": 8, "_elementwise_funct": 9, "_indexing_funct": 10, "_manipulation_funct": 11, "_searching_funct": 12, "_set_funct": 13, "_sorting_funct": 14, "_statistical_funct": 15, "_type": 16, "attribut": [16, 25, 26, 28, 30, 43, 44, 61], "_utility_funct": 17, "submodul": [18, 28], "packag": [18, 28, 68], "linalg": 19, "array_view": 20, "categor": [21, 61, 63, 82], "client_dtyp": 23, "datafram": [24, 59, 60, 61, 63, 84], "dtype": [25, 78], "groupbyclass": 26, "histori": 27, "subpackag": 28, "return": [28, 40, 91], "type": [28, 40, 60, 61, 63, 84, 88, 91], "input": [28, 45], "index": [29, 60, 61, 63, 78, 81, 84, 87], "infoclass": 30, "io": 31, "io_util": 32, "join": [33, 93], "logger": 34, "match": [35, 93], "matcher": 36, "numer": [37, 80], "pdarrayclass": 38, "pdarraycr": 39, "pdarraysetop": 40, "plot": 41, "row": 42, "secur": 43, "segarrai": [44, 61, 63, 89], "seri": [45, 90], "sort": [46, 79, 84, 90], "string": [47, 60, 61, 63, 93], "timeclass": 48, "util": 49, "api": [50, 60, 61, 62, 63, 64, 67], "refer": [50, 60, 61, 62, 63, 67], "your": 51, "first": 51, "interfac": 51, "exampl": [51, 59, 60], "server": [51, 66, 68, 71, 77, 92], "pytest": 52, "benchmark": 52, "The": [52, 88], "full": [52, 57], "suit": 52, "argument": [52, 75], "singl": 52, "file": [52, 60, 61, 64, 71, 77], "read": [52, 64, 77], "json": 52, "output": 52, "gasnet": 53, "configur": [53, 61, 68, 71], "build": [53, 54, 56, 57, 68, 70, 71], "reduc": [54, 75], "memori": 54, "usag": [54, 76], "step": [55, 69, 70], "instruct": 55, "gener": [55, 64], "note": 55, "diff": 55, "git": 55, "log": 55, "speed": 56, "up": 56, "alwai": 56, "set": [56, 59, 89, 91], "us": [56, 59, 66, 68, 71, 72], "modular": [56, 68, 71], "system": 56, "tip": 57, "reproduc": 57, "user": 57, "save": [57, 71], "effici": 57, "document": [58, 65, 68], "arrai": [59, 83, 89, 91], "pdarrai": [59, 60, 61, 63, 87, 88], "creation": [59, 81], "export": [59, 62, 64, 77], "object": [59, 93], "oper": [59, 80, 82, 88, 89, 91, 93], "creat": [59, 83], "import": [59, 62, 64, 77], "panda": [59, 90], "map": 59, "basic": 59, "interact": 59, "groupbi": [59, 61, 84, 85], "csv": 60, "support": [60, 61, 63, 64, 77], "data": [60, 61, 63, 77, 84, 86, 88], "format": [60, 64, 77], "without": 60, "header": 60, "hdf5": 61, "metadata": 61, "schema": 61, "arrayview": [61, 81], "mode": [61, 63], "distribut": [61, 68], "legaci": 61, "parquet": 63, "compress": 63, "i": [64, 77, 93], "o": [64, 77, 93], "l": 64, "quickstart": 66, "instal": [66, 68, 69, 70, 72, 74], "launch": [66, 92], "connect": [66, 92], "3": [66, 92], "shutdown": 66, "disconnect": 66, "get": 68, "start": 68, "recommend": [68, 70], "manual": 68, "all": 68, "individu": 68, "arrow": 68, "troubleshoot": 68, "linux": 69, "updat": [69, 70, 72], "kernel": 69, "clone": [69, 70], "repositori": [69, 70], "anaconda": [69, 70, 72], "ubuntu": 69, "rhel": 69, "next": [69, 70], "maco": 70, "sourc": 70, "homebrew": 70, "specifi": 71, "custom": 71, "new": 71, "an": 71, "requir": [72, 74], "list": 72, "specif": [72, 89, 93], "pip": 72, "window": 73, "wsl2": 73, "overview": 74, "guid": [74, 76], "perform": [75, 89, 93], "argsort": [75, 78], "posit": 75, "name": [75, 88], "gather": [75, 87], "scan": [75, 80], "scatter": [75, 87], "stream": 75, "between": 77, "larg": 77, "dataset": 77, "preprocess": 77, "disk": 77, "chang": 78, "lookup": [78, 90], "concat": 78, "arithmet": 80, "vector": 80, "scalar": 80, "element": [80, 89], "wise": 80, "reduct": 80, "where": 80, "iter": [81, 82, 84, 88, 89, 93], "construct": 82, "constant": 83, "regular": [83, 93], "random": 83, "concaten": [83, 84], "drop": 84, "copi": 84, "filter": 84, "permut": 84, "tail": [84, 90], "head": [84, 90], "renam": 84, "column": 84, "append": [84, 89], "reset": 84, "dedupl": [84, 89], "summar": 86, "descript": 86, "statist": 86, "histogram": 86, "valu": [86, 90], "count": [86, 90], "assign": 87, "integ": 87, "slice": 87, "logic": 87, "rank": 88, "cast": 88, "reshap": 88, "method": [89, 93], "prefix": 89, "suffix": 89, "ngram": 89, "sub": 89, "size": 89, "access": 89, "prepend": 89, "setop": 89, "union": 89, "intersect": 89, "differ": 89, "symmetr": 89, "integr": 90, "startup": 92, "substr": 93, "search": 93, "split": 93, "flatten": 93, "express": 93}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 60}, "alltitles": {"Contributing": [[0, "contributing"]], "Adding Issues": [[0, "adding-issues"]], "Bug Reports": [[0, "bug-reports"]], "Feature Requests": [[0, "feature-requests"]], "Developing Arkouda": [[0, "developing-arkouda"]], "Coding Conventions and Linting": [[0, "coding-conventions-and-linting"]], "Python3": [[0, "python3"]], "Chapel": [[0, "chapel"]], "Testing": [[0, "testing"], [1, "testing"]], "Running python tests": [[0, "running-python-tests"]], "Running chapel tests": [[0, "running-chapel-tests"]], "Writing Pull Requests": [[0, "writing-pull-requests"]], "Reviewing Pull Requests": [[0, "reviewing-pull-requests"]], "Core Development Team Only": [[0, "core-development-team-only"]], "Merging Pull Requests": [[0, "merging-pull-requests"]], "Release Process": [[0, "release-process"], [55, "release-process"]], "Environment Variables": [[1, "environment-variables"], [68, "environment-variables"]], "Running": [[1, "running"]], "Compilation / Makefile": [[1, "compilation-makefile"]], "Chapel Compiler Flags": [[1, "chapel-compiler-flags"]], "Dependency Paths": [[1, "dependency-paths"]], "Adding a Module from Outside the Arkouda src Directory": [[1, "adding-a-module-from-outside-the-arkouda-src-directory"]], "Python Client": [[1, "python-client"]], "arkouda.accessor": [[2, "module-arkouda.accessor"]], "Module Contents": [[2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"]], "Classes": [[2, "classes"], [4, "classes"], [7, "classes"], [13, "classes"], [16, "classes"], [20, "classes"], [21, "classes"], [23, "classes"], [24, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [42, "classes"], [44, "classes"], [45, "classes"], [47, "classes"], [48, "classes"]], "Functions": [[2, "functions"], [3, "functions"], [6, "functions"], [7, "functions"], [9, "functions"], [10, "functions"], [11, "functions"], [12, "functions"], [13, "functions"], [14, "functions"], [15, "functions"], [17, "functions"], [19, "functions"], [22, "functions"], [23, "functions"], [24, "functions"], [25, "functions"], [26, "functions"], [28, "functions"], [30, "functions"], [31, "functions"], [32, "functions"], [33, "functions"], [34, "functions"], [37, "functions"], [38, "functions"], [39, "functions"], [40, "functions"], [41, "functions"], [43, "functions"], [44, "functions"], [46, "functions"], [48, "functions"], [49, "functions"]], "arkouda.alignment": [[3, "module-arkouda.alignment"]], "arkouda.array_api._array_object": [[4, "module-arkouda.array_api._array_object"]], "arkouda.array_api._constants": [[5, "module-arkouda.array_api._constants"]], "arkouda.array_api._creation_functions": [[6, "module-arkouda.array_api._creation_functions"]], "arkouda.array_api._data_type_functions": [[7, "module-arkouda.array_api._data_type_functions"]], "arkouda.array_api._dtypes": [[8, "module-arkouda.array_api._dtypes"]], "arkouda.array_api._elementwise_functions": [[9, "module-arkouda.array_api._elementwise_functions"]], "arkouda.array_api._indexing_functions": [[10, "module-arkouda.array_api._indexing_functions"]], "arkouda.array_api._manipulation_functions": [[11, "module-arkouda.array_api._manipulation_functions"]], "arkouda.array_api._searching_functions": [[12, "module-arkouda.array_api._searching_functions"]], "arkouda.array_api._set_functions": [[13, "module-arkouda.array_api._set_functions"]], "arkouda.array_api._sorting_functions": [[14, "module-arkouda.array_api._sorting_functions"]], "arkouda.array_api._statistical_functions": [[15, "module-arkouda.array_api._statistical_functions"]], "arkouda.array_api._typing": [[16, "module-arkouda.array_api._typing"]], "Attributes": [[16, "attributes"], [25, "attributes"], [26, "attributes"], [28, "attributes"], [30, "attributes"], [43, "attributes"], [44, "attributes"]], "arkouda.array_api._utility_functions": [[17, "module-arkouda.array_api._utility_functions"]], "arkouda.array_api": [[18, "module-arkouda.array_api"]], "Submodules": [[18, "submodules"], [28, "submodules"]], "Package Contents": [[18, "package-contents"], [28, "package-contents"]], "arkouda.array_api.linalg": [[19, "module-arkouda.array_api.linalg"]], "arkouda.array_view": [[20, "module-arkouda.array_view"]], "arkouda.categorical": [[21, "module-arkouda.categorical"]], "arkouda.client": [[22, "module-arkouda.client"]], "arkouda.client_dtypes": [[23, "module-arkouda.client_dtypes"]], "arkouda.dataframe": [[24, "module-arkouda.dataframe"]], "arkouda.dtypes": [[25, "module-arkouda.dtypes"]], "arkouda.groupbyclass": [[26, "module-arkouda.groupbyclass"]], "arkouda.history": [[27, "module-arkouda.history"]], "arkouda": [[28, "module-arkouda"]], "Subpackages": [[28, "subpackages"]], "Return Type": [[28, "return-type"], [28, "id551"], [28, "id672"], [40, "return-type"], [91, "return-type"]], "Input": [[28, "input"], [45, "input"]], "arkouda.index": [[29, "module-arkouda.index"]], "arkouda.infoclass": [[30, "module-arkouda.infoclass"]], "arkouda.io": [[31, "module-arkouda.io"]], "arkouda.io_util": [[32, "module-arkouda.io_util"]], "arkouda.join": [[33, "module-arkouda.join"]], "arkouda.logger": [[34, "module-arkouda.logger"]], "arkouda.match": [[35, "module-arkouda.match"]], "arkouda.matcher": [[36, "module-arkouda.matcher"]], "arkouda.numeric": [[37, "module-arkouda.numeric"]], "arkouda.pdarrayclass": [[38, "module-arkouda.pdarrayclass"]], "arkouda.pdarraycreation": [[39, "module-arkouda.pdarraycreation"]], "arkouda.pdarraysetops": [[40, "module-arkouda.pdarraysetops"]], "arkouda.plotting": [[41, "module-arkouda.plotting"]], "arkouda.row": [[42, "module-arkouda.row"]], "arkouda.security": [[43, "module-arkouda.security"]], "arkouda.segarray": [[44, "module-arkouda.segarray"]], "arkouda.series": [[45, "module-arkouda.series"]], "arkouda.sorting": [[46, "module-arkouda.sorting"]], "arkouda.strings": [[47, "module-arkouda.strings"]], "arkouda.timeclass": [[48, "module-arkouda.timeclass"]], "arkouda.util": [[49, "module-arkouda.util"]], "API Reference": [[50, "api-reference"], [60, "api-reference"], [61, "api-reference"], [62, "api-reference"], [63, "api-reference"]], "Adding Your First Feature": [[51, "adding-your-first-feature"]], "Adding Python Functionality (Client Interface)": [[51, "adding-python-functionality-client-interface"]], "Example": [[51, "example"], [51, "id1"]], "Adding Functionality to the Arkouda Server": [[51, "adding-functionality-to-the-arkouda-server"]], "PyTest Benchmarks": [[52, "pytest-benchmarks"]], "Running The Full Suite": [[52, "running-the-full-suite"]], "Benchmark Arguments": [[52, "benchmark-arguments"]], "Running Single Files or Tests": [[52, "running-single-files-or-tests"]], "Reading the JSON Output": [[52, "reading-the-json-output"]], "GASNet Development": [[53, "gasnet-development"]], "Environment Configuration": [[53, "environment-configuration"]], "Build Chapel with GASNet": [[53, "build-chapel-with-gasnet"]], "Build Arkouda": [[53, "build-arkouda"]], "Run Arkouda": [[53, "run-arkouda"]], "Reducing Memory Usage of Arkouda Builds": [[54, "reducing-memory-usage-of-arkouda-builds"]], "Step-by-step instructions": [[55, "step-by-step-instructions"]], "Generating release notes": [[55, "generating-release-notes"]], "Diff the git logs": [[55, "diff-the-git-logs"]], "Speeding up Arkouda Compilation": [[56, "speeding-up-arkouda-compilation"]], "Environment Variables to Always Set": [[56, "environment-variables-to-always-set"]], "Using the Modular Build System": [[56, "using-the-modular-build-system"]], "Tips for Reproducing User Bugs": [[57, "tips-for-reproducing-user-bugs"]], "Saving Full Builds": [[57, "saving-full-builds"]], "Reproducing User Bugs Efficiently": [[57, "reproducing-user-bugs-efficiently"]], "Developer Documentation": [[58, "developer-documentation"]], "Examples": [[59, "examples"]], "Arkouda Arrays": [[59, "arkouda-arrays"]], "pdarray Creation": [[59, "pdarray-creation"]], "Exporting pdarray Objects": [[59, "exporting-pdarray-objects"]], "pdarray Set operations": [[59, "pdarray-set-operations"]], "Arkouda DataFrames": [[59, "arkouda-dataframes"]], "Creating & Using a DataFrame": [[59, "creating-using-a-dataframe"]], "Importing Pandas DataFrame": [[59, "importing-pandas-dataframe"]], "Python Mapping": [[59, "python-mapping"]], "Basic Interaction": [[59, "basic-interaction"]], "Exporting to Pandas": [[59, "exporting-to-pandas"]], "GroupBy": [[59, "groupby"], [61, "groupby"], [61, "id5"], [84, "groupby"], [85, "groupby"]], "pdarrays": [[59, "pdarrays"]], "DataFrames": [[59, "dataframes"]], "CSV": [[60, "csv"]], "Support Arkouda Data Types": [[60, "support-arkouda-data-types"]], "File Formatting": [[60, "file-formatting"]], "Example Files": [[60, "example-files"]], "Arkouda Formatted File": [[60, "arkouda-formatted-file"]], "File Without Header": [[60, "file-without-header"]], "Data Formatting": [[60, "data-formatting"]], "pdarray": [[60, "pdarray"], [61, "pdarray"], [61, "id1"], [63, "pdarray"]], "Strings": [[60, "strings"], [61, "strings"], [61, "id2"], [63, "strings"]], "Index": [[60, "index"], [61, "index"], [63, "index"]], "DataFrame": [[60, "dataframe"], [61, "dataframe"], [63, "dataframe"]], "HDF5": [[61, "hdf5"]], "File Configuration": [[61, "file-configuration"]], "Supported Arkouda Data Types": [[61, "supported-arkouda-data-types"], [63, "supported-arkouda-data-types"]], "MetaData Attributes": [[61, "metadata-attributes"]], "Data Schema": [[61, "data-schema"]], "ArrayView": [[61, "arrayview"]], "SegArray": [[61, "segarray"], [61, "id4"], [63, "segarray"]], "Categorical": [[61, "categorical"], [61, "id3"], [63, "categorical"]], "Supported Write Modes": [[61, "supported-write-modes"], [63, "supported-write-modes"]], "Data Distribution": [[61, "data-distribution"]], "Legacy File Support": [[61, "legacy-file-support"]], "Import/Export": [[62, "import-export"], [77, "import-export"]], "Export": [[62, "export"]], "Import": [[62, "import"]], "Parquet": [[63, "parquet"]], "Compression": [[63, "compression"]], "File I/O": [[64, "file-i-o"]], "Supported File Formats:": [[64, null]], "Import/Export Support": [[64, "import-export-support"]], "General I/O API": [[64, "general-i-o-api"]], "Write": [[64, "write"]], "Read": [[64, "read"]], "ls Functionality": [[64, "ls-functionality"]], "Arkouda Documentation": [[65, "arkouda-documentation"]], "Quickstart": [[66, "quickstart"]], "Install Dependencies": [[66, "install-dependencies"]], "Install Arkouda": [[66, "install-arkouda"]], "Launching the Server": [[66, "launching-the-server"]], "Connect the Python 3 Client": [[66, "connect-the-python-3-client"]], "Shutdown/Disconnect": [[66, "shutdown-disconnect"]], "Using Arkouda": [[66, "using-arkouda"]], "Chapel API Reference": [[67, "chapel-api-reference"]], "Building the Server": [[68, "building-the-server"]], "Getting Started": [[68, "getting-started"]], "Dependency Configuration": [[68, "dependency-configuration"]], "Using Environment Installed Dependencies (Recommended)": [[68, "using-environment-installed-dependencies-recommended"]], "Installing Dependencies Manually": [[68, "installing-dependencies-manually"]], "Dependencies": [[68, "dependencies"]], "All Dependencies": [[68, "all-dependencies"]], "Individual Installs": [[68, "individual-installs"]], "Arrow Install Troubleshooting": [[68, "arrow-install-troubleshooting"]], "Distributable Package": [[68, "distributable-package"]], "Build the Server": [[68, "build-the-server"]], "Building the Arkouda Documentation": [[68, "building-the-arkouda-documentation"]], "Modular Building": [[68, "modular-building"]], "Linux": [[69, "linux"]], "Update Kernel": [[69, "update-kernel"]], "Clone Arkouda Repository": [[69, "clone-arkouda-repository"], [70, "clone-arkouda-repository"]], "Python Environment - Anaconda (Linux)": [[69, "python-environment-anaconda-linux"]], "Chapel Installation": [[69, "chapel-installation"]], "Install Chapel (Ubuntu)": [[69, "install-chapel-ubuntu"]], "Install Chapel (RHEL)": [[69, "install-chapel-rhel"]], "Next Steps": [[69, "next-steps"], [70, "next-steps"]], "MacOS": [[70, "macos"]], "Python Environment - Anaconda": [[70, "python-environment-anaconda"]], "Updating Environment": [[70, "updating-environment"]], "Anaconda": [[70, "anaconda"]], "Install Chapel": [[70, "install-chapel"]], "Build from Source (Recommended)": [[70, "build-from-source-recommended"]], "Homebrew": [[70, "homebrew"]], "Modular Server Builds": [[71, "modular-server-builds"]], "Specifying a custom configuration file": [[71, "specifying-a-custom-configuration-file"]], "Adding new modules into the build process": [[71, "adding-new-modules-into-the-build-process"]], "Saving modules used in an Arkouda server run": [[71, "saving-modules-used-in-an-arkouda-server-run"]], "Requirements": [[72, "requirements"], [74, "requirements"]], "Dependency List": [[72, "dependency-list"]], "Python Dependencies": [[72, "python-dependencies"]], "Developer Specific": [[72, "developer-specific"]], "Installing/Updating Python Dependencies": [[72, "installing-updating-python-dependencies"]], "Using Anaconda": [[72, "using-anaconda"]], "Using Pip": [[72, "using-pip"]], "Windows (WSL2)": [[73, "windows-wsl2"]], "Installation": [[74, "installation"]], "Overview": [[74, "overview"]], "Install Guides": [[74, "install-guides"]], "Performance Testing": [[75, "performance-testing"]], "Argsort": [[75, "argsort"]], "Positional Arguments": [[75, "positional-arguments"], [75, "positional-arguments"], [75, "positional-arguments"], [75, "positional-arguments"], [75, "positional-arguments"], [75, "positional-arguments"]], "Named Arguments": [[75, "named-arguments"], [75, "named-arguments"], [75, "named-arguments"], [75, "named-arguments"], [75, "named-arguments"], [75, "named-arguments"]], "Gather": [[75, "gather"]], "Reduce": [[75, "reduce"]], "Scan": [[75, "scan"]], "Scatter": [[75, "scatter"]], "Stream": [[75, "stream"]], "Usage Guide": [[76, "usage-guide"]], "Data I/O": [[77, "data-i-o"]], "Between client and server": [[77, "between-client-and-server"]], "Large Datasets": [[77, "large-datasets"]], "Supported File Formats": [[77, "supported-file-formats"]], "Data Preprocessing": [[77, "data-preprocessing"]], "Reading data from disk": [[77, "reading-data-from-disk"]], "Indexs in Arkouda": [[78, "indexs-in-arkouda"]], "Features": [[78, "features"], [84, "features"], [90, "features"]], "Change Dtype": [[78, "change-dtype"]], "ArgSort": [[78, "argsort"]], "Lookup": [[78, "lookup"], [90, "lookup"], [90, "id1"]], "Concat": [[78, "concat"]], "Sorting": [[79, "sorting"], [84, "sorting"], [90, "sorting"]], "Arithmetic and Numeric Operations": [[80, "arithmetic-and-numeric-operations"]], "Vector and Scalar Arithmetic": [[80, "vector-and-scalar-arithmetic"]], "Element-wise Functions": [[80, "element-wise-functions"]], "Scans": [[80, "scans"]], "Reductions": [[80, "reductions"]], "Where": [[80, "where"]], "ArrayView in Arkouda": [[81, "arrayview-in-arkouda"]], "Creation": [[81, "creation"]], "Indexing": [[81, "indexing"]], "Iteration": [[81, "iteration"], [82, "iteration"], [84, "iteration"], [88, "iteration"], [89, "iteration"], [93, "iteration"]], "Categoricals": [[82, "categoricals"]], "Construction": [[82, "construction"]], "Operations": [[82, "operations"], [93, "operations"]], "Creating Arrays": [[83, "creating-arrays"]], "Constant": [[83, "constant"]], "Regular": [[83, "regular"]], "Random": [[83, "random"]], "Concatenation": [[83, "concatenation"]], "DataFrames in Arkouda": [[84, "dataframes-in-arkouda"]], "Data Types": [[84, "data-types"]], "Drop": [[84, "drop"]], "Copy": [[84, "copy"]], "Filter": [[84, "filter"]], "Permutations": [[84, "permutations"]], "Tail/Head of Data": [[84, "tail-head-of-data"]], "Rename Columns": [[84, "rename-columns"]], "Append": [[84, "append"]], "Concatenate": [[84, "concatenate"]], "Reset Indexes": [[84, "reset-indexes"]], "Deduplication": [[84, "deduplication"], [89, "deduplication"]], "Summarizing Data": [[86, "summarizing-data"]], "Descriptive Statistics": [[86, "descriptive-statistics"]], "Histogram": [[86, "histogram"]], "Value Counts": [[86, "value-counts"], [90, "value-counts"]], "Indexing and Assignment": [[87, "indexing-and-assignment"]], "Integer": [[87, "integer"]], "Slice": [[87, "slice"]], "Gather/Scatter (pdarray)": [[87, "gather-scatter-pdarray"]], "Integer pdarray index": [[87, "integer-pdarray-index"]], "Logical indexing": [[87, "logical-indexing"]], "The pdarray class": [[88, "the-pdarray-class"]], "Data Type": [[88, "data-type"]], "Rank": [[88, "rank"]], "Name": [[88, "name"]], "Operators": [[88, "operators"]], "Type Casting": [[88, "type-casting"]], "Reshape": [[88, "reshape"]], "SegArrays in Arkouda": [[89, "segarrays-in-arkouda"]], "Performance": [[89, "performance"], [93, "performance"]], "Operation": [[89, "operation"]], "SegArray Specific Methods": [[89, "segarray-specific-methods"]], "Prefix & Suffix": [[89, "prefix-suffix"]], "NGrams": [[89, "ngrams"]], "Sub-array of Size": [[89, "sub-array-of-size"]], "Access/Set Specific Elements in Sub-Array": [[89, "access-set-specific-elements-in-sub-array"]], "Append & Prepend": [[89, "append-prepend"]], "SegArray SetOps": [[89, "segarray-setops"]], "Union": [[89, "union"]], "Intersect": [[89, "intersect"]], "Set Difference": [[89, "set-difference"]], "Symmetric Difference": [[89, "symmetric-difference"]], "Series in Arkouda": [[90, "series-in-arkouda"]], "Head/Tail": [[90, "head-tail"]], "Pandas Integration": [[90, "pandas-integration"]], "Array Set Operations": [[91, "array-set-operations"]], "Startup": [[92, "startup"]], "Launch arkouda server": [[92, "launch-arkouda-server"]], "Connect a Python 3 client": [[92, "connect-a-python-3-client"]], "Strings in Arkouda": [[93, "strings-in-arkouda"]], "I/O": [[93, "i-o"]], "String-Specific Methods": [[93, "string-specific-methods"]], "Substring search": [[93, "substring-search"]], "Splitting and joining": [[93, "splitting-and-joining"]], "Flattening": [[93, "flattening"]], "Regular Expressions": [[93, "regular-expressions"]], "Match Object": [[93, "match-object"]]}, "indexentries": {"cachedaccessor (class in arkouda.accessor)": [[2, "arkouda.accessor.CachedAccessor"]], "datetimeaccessor (class in arkouda.accessor)": [[2, "arkouda.accessor.DatetimeAccessor"]], "properties (class in arkouda.accessor)": [[2, "arkouda.accessor.Properties"]], "stringaccessor (class in arkouda.accessor)": [[2, "arkouda.accessor.StringAccessor"]], "arkouda.accessor": [[2, "module-arkouda.accessor"]], "date_operators() (in module arkouda.accessor)": [[2, "arkouda.accessor.date_operators"]], "module": [[2, "module-arkouda.accessor"], [3, "module-arkouda.alignment"], [4, "module-arkouda.array_api._array_object"], [5, "module-arkouda.array_api._constants"], [6, "module-arkouda.array_api._creation_functions"], [7, "module-arkouda.array_api._data_type_functions"], [8, "module-arkouda.array_api._dtypes"], [9, "module-arkouda.array_api._elementwise_functions"], [10, "module-arkouda.array_api._indexing_functions"], [11, "module-arkouda.array_api._manipulation_functions"], [12, "module-arkouda.array_api._searching_functions"], [13, "module-arkouda.array_api._set_functions"], [14, "module-arkouda.array_api._sorting_functions"], [15, "module-arkouda.array_api._statistical_functions"], [16, "module-arkouda.array_api._typing"], [17, "module-arkouda.array_api._utility_functions"], [18, "module-arkouda.array_api"], [19, "module-arkouda.array_api.linalg"], [20, "module-arkouda.array_view"], [21, "module-arkouda.categorical"], [22, "module-arkouda.client"], [23, "module-arkouda.client_dtypes"], [24, "module-arkouda.dataframe"], [25, "module-arkouda.dtypes"], [26, "module-arkouda.groupbyclass"], [27, "module-arkouda.history"], [28, "module-arkouda"], [29, "module-arkouda.index"], [30, "module-arkouda.infoclass"], [31, "module-arkouda.io"], [32, "module-arkouda.io_util"], [33, "module-arkouda.join"], [34, "module-arkouda.logger"], [35, "module-arkouda.match"], [36, "module-arkouda.matcher"], [37, "module-arkouda.numeric"], [38, "module-arkouda.pdarrayclass"], [39, "module-arkouda.pdarraycreation"], [40, "module-arkouda.pdarraysetops"], [41, "module-arkouda.plotting"], [42, "module-arkouda.row"], [43, "module-arkouda.security"], [44, "module-arkouda.segarray"], [45, "module-arkouda.series"], [46, "module-arkouda.sorting"], [47, "module-arkouda.strings"], [48, "module-arkouda.timeclass"], [49, "module-arkouda.util"]], "string_operators() (in module arkouda.accessor)": [[2, "arkouda.accessor.string_operators"]], "nonuniqueerror": [[3, "arkouda.alignment.NonUniqueError"], [28, "arkouda.NonUniqueError"]], "align() (in module arkouda.alignment)": [[3, "arkouda.alignment.align"]], "arkouda.alignment": [[3, "module-arkouda.alignment"]], "find() (in module arkouda.alignment)": [[3, "arkouda.alignment.find"]], "in1d_intervals() (in module arkouda.alignment)": [[3, "arkouda.alignment.in1d_intervals"]], "interval_lookup() (in module arkouda.alignment)": [[3, "arkouda.alignment.interval_lookup"]], "is_cosorted() (in module arkouda.alignment)": [[3, "arkouda.alignment.is_cosorted"]], "left_align() (in module arkouda.alignment)": [[3, "arkouda.alignment.left_align"]], "lookup() (in module arkouda.alignment)": [[3, "arkouda.alignment.lookup"]], "right_align() (in module arkouda.alignment)": [[3, "arkouda.alignment.right_align"]], "search_intervals() (in module arkouda.alignment)": [[3, "arkouda.alignment.search_intervals"]], "unsqueeze() (in module arkouda.alignment)": [[3, "arkouda.alignment.unsqueeze"]], "zero_up() (in module arkouda.alignment)": [[3, "arkouda.alignment.zero_up"]], "array (class in arkouda.array_api._array_object)": [[4, "arkouda.array_api._array_object.Array"]], "t (arkouda.array_api._array_object.array property)": [[4, "arkouda.array_api._array_object.Array.T"]], "arkouda.array_api._array_object": [[4, "module-arkouda.array_api._array_object"]], "device (arkouda.array_api._array_object.array property)": [[4, "arkouda.array_api._array_object.Array.device"]], "dtype (arkouda.array_api._array_object.array property)": [[4, "arkouda.array_api._array_object.Array.dtype"]], "mt (arkouda.array_api._array_object.array property)": [[4, "arkouda.array_api._array_object.Array.mT"]], "ndim (arkouda.array_api._array_object.array property)": [[4, "arkouda.array_api._array_object.Array.ndim"]], "shape (arkouda.array_api._array_object.array property)": [[4, "arkouda.array_api._array_object.Array.shape"]], "size (arkouda.array_api._array_object.array property)": [[4, "arkouda.array_api._array_object.Array.size"]], "to_device() (arkouda.array_api._array_object.array method)": [[4, "arkouda.array_api._array_object.Array.to_device"]], "to_ndarray() (arkouda.array_api._array_object.array method)": [[4, "arkouda.array_api._array_object.Array.to_ndarray"]], "tolist() (arkouda.array_api._array_object.array method)": [[4, "arkouda.array_api._array_object.Array.tolist"]], "arkouda.array_api._constants": [[5, "module-arkouda.array_api._constants"]], "e (in module arkouda.array_api._constants)": [[5, "arkouda.array_api._constants.e"]], "inf (in module arkouda.array_api._constants)": [[5, "arkouda.array_api._constants.inf"]], "nan (in module arkouda.array_api._constants)": [[5, "arkouda.array_api._constants.nan"]], "pi (in module arkouda.array_api._constants)": [[5, "arkouda.array_api._constants.pi"]], "arange() (in module arkouda.array_api._creation_functions)": [[6, "arkouda.array_api._creation_functions.arange"]], "arkouda.array_api._creation_functions": [[6, "module-arkouda.array_api._creation_functions"]], "asarray() (in module arkouda.array_api._creation_functions)": [[6, "arkouda.array_api._creation_functions.asarray"]], "empty() (in module arkouda.array_api._creation_functions)": [[6, "arkouda.array_api._creation_functions.empty"]], "empty_like() (in module arkouda.array_api._creation_functions)": [[6, "arkouda.array_api._creation_functions.empty_like"]], "eye() (in module arkouda.array_api._creation_functions)": [[6, "arkouda.array_api._creation_functions.eye"]], "from_dlpack() (in module arkouda.array_api._creation_functions)": [[6, "arkouda.array_api._creation_functions.from_dlpack"]], "full() (in module arkouda.array_api._creation_functions)": [[6, "arkouda.array_api._creation_functions.full"]], "full_like() (in module arkouda.array_api._creation_functions)": [[6, "arkouda.array_api._creation_functions.full_like"]], "linspace() (in module arkouda.array_api._creation_functions)": [[6, "arkouda.array_api._creation_functions.linspace"]], "meshgrid() (in module arkouda.array_api._creation_functions)": [[6, "arkouda.array_api._creation_functions.meshgrid"]], "ones() (in module arkouda.array_api._creation_functions)": [[6, "arkouda.array_api._creation_functions.ones"]], "ones_like() (in module arkouda.array_api._creation_functions)": [[6, "arkouda.array_api._creation_functions.ones_like"]], "tril() (in module arkouda.array_api._creation_functions)": [[6, "arkouda.array_api._creation_functions.tril"]], "triu() (in module arkouda.array_api._creation_functions)": [[6, "arkouda.array_api._creation_functions.triu"]], "zeros() (in module arkouda.array_api._creation_functions)": [[6, "arkouda.array_api._creation_functions.zeros"]], "zeros_like() (in module arkouda.array_api._creation_functions)": [[6, "arkouda.array_api._creation_functions.zeros_like"]], "arkouda.array_api._data_type_functions": [[7, "module-arkouda.array_api._data_type_functions"]], "astype() (in module arkouda.array_api._data_type_functions)": [[7, "arkouda.array_api._data_type_functions.astype"]], "bits (arkouda.array_api._data_type_functions.finfo_object attribute)": [[7, "arkouda.array_api._data_type_functions.finfo_object.bits"]], "bits (arkouda.array_api._data_type_functions.iinfo_object attribute)": [[7, "arkouda.array_api._data_type_functions.iinfo_object.bits"]], "can_cast() (in module arkouda.array_api._data_type_functions)": [[7, "arkouda.array_api._data_type_functions.can_cast"]], "dtype (arkouda.array_api._data_type_functions.finfo_object attribute)": [[7, "arkouda.array_api._data_type_functions.finfo_object.dtype"]], "dtype (arkouda.array_api._data_type_functions.iinfo_object attribute)": [[7, "arkouda.array_api._data_type_functions.iinfo_object.dtype"]], "eps (arkouda.array_api._data_type_functions.finfo_object attribute)": [[7, "arkouda.array_api._data_type_functions.finfo_object.eps"]], "finfo_object (class in arkouda.array_api._data_type_functions)": [[7, "arkouda.array_api._data_type_functions.finfo_object"]], "iinfo_object (class in arkouda.array_api._data_type_functions)": [[7, "arkouda.array_api._data_type_functions.iinfo_object"]], "isdtype() (in module arkouda.array_api._data_type_functions)": [[7, "arkouda.array_api._data_type_functions.isdtype"]], "max (arkouda.array_api._data_type_functions.finfo_object attribute)": [[7, "arkouda.array_api._data_type_functions.finfo_object.max"]], "max (arkouda.array_api._data_type_functions.iinfo_object attribute)": [[7, "arkouda.array_api._data_type_functions.iinfo_object.max"]], "min (arkouda.array_api._data_type_functions.finfo_object attribute)": [[7, "arkouda.array_api._data_type_functions.finfo_object.min"]], "min (arkouda.array_api._data_type_functions.iinfo_object attribute)": [[7, "arkouda.array_api._data_type_functions.iinfo_object.min"]], "result_type() (in module arkouda.array_api._data_type_functions)": [[7, "arkouda.array_api._data_type_functions.result_type"]], "smallest_normal (arkouda.array_api._data_type_functions.finfo_object attribute)": [[7, "arkouda.array_api._data_type_functions.finfo_object.smallest_normal"]], "arkouda.array_api._dtypes": [[8, "module-arkouda.array_api._dtypes"]], "bool (in module arkouda.array_api._dtypes)": [[8, "arkouda.array_api._dtypes.bool"]], "complex128 (in module arkouda.array_api._dtypes)": [[8, "arkouda.array_api._dtypes.complex128"]], "complex64 (in module arkouda.array_api._dtypes)": [[8, "arkouda.array_api._dtypes.complex64"]], "float32 (in module arkouda.array_api._dtypes)": [[8, "arkouda.array_api._dtypes.float32"]], "float64 (in module arkouda.array_api._dtypes)": [[8, "arkouda.array_api._dtypes.float64"]], "int16 (in module arkouda.array_api._dtypes)": [[8, "arkouda.array_api._dtypes.int16"]], "int32 (in module arkouda.array_api._dtypes)": [[8, "arkouda.array_api._dtypes.int32"]], "int64 (in module arkouda.array_api._dtypes)": [[8, "arkouda.array_api._dtypes.int64"]], "int8 (in module arkouda.array_api._dtypes)": [[8, "arkouda.array_api._dtypes.int8"]], "uint16 (in module arkouda.array_api._dtypes)": [[8, "arkouda.array_api._dtypes.uint16"]], "uint32 (in module arkouda.array_api._dtypes)": [[8, "arkouda.array_api._dtypes.uint32"]], "uint64 (in module arkouda.array_api._dtypes)": [[8, "arkouda.array_api._dtypes.uint64"]], "uint8 (in module arkouda.array_api._dtypes)": [[8, "arkouda.array_api._dtypes.uint8"]], "abs() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.abs"]], "acos() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.acos"]], "acosh() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.acosh"]], "add() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.add"]], "arkouda.array_api._elementwise_functions": [[9, "module-arkouda.array_api._elementwise_functions"]], "asin() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.asin"]], "asinh() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.asinh"]], "atan() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.atan"]], "atan2() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.atan2"]], "atanh() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.atanh"]], "bitwise_and() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.bitwise_and"]], "bitwise_invert() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.bitwise_invert"]], "bitwise_left_shift() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.bitwise_left_shift"]], "bitwise_or() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.bitwise_or"]], "bitwise_right_shift() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.bitwise_right_shift"]], "bitwise_xor() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.bitwise_xor"]], "ceil() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.ceil"]], "conj() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.conj"]], "cos() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.cos"]], "cosh() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.cosh"]], "divide() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.divide"]], "equal() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.equal"]], "exp() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.exp"]], "expm1() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.expm1"]], "floor() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.floor"]], "floor_divide() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.floor_divide"]], "greater() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.greater"]], "greater_equal() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.greater_equal"]], "imag() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.imag"]], "isfinite() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.isfinite"]], "isinf() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.isinf"]], "isnan() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.isnan"]], "less() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.less"]], "less_equal() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.less_equal"]], "log() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.log"]], "log10() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.log10"]], "log1p() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.log1p"]], "log2() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.log2"]], "logaddexp() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.logaddexp"]], "logical_and() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.logical_and"]], "logical_not() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.logical_not"]], "logical_or() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.logical_or"]], "logical_xor() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.logical_xor"]], "multiply() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.multiply"]], "negative() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.negative"]], "not_equal() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.not_equal"]], "positive() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.positive"]], "pow() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.pow"]], "real() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.real"]], "remainder() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.remainder"]], "round() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.round"]], "sign() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.sign"]], "sin() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.sin"]], "sinh() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.sinh"]], "sqrt() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.sqrt"]], "square() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.square"]], "subtract() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.subtract"]], "tan() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.tan"]], "tanh() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.tanh"]], "trunc() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.trunc"]], "arkouda.array_api._indexing_functions": [[10, "module-arkouda.array_api._indexing_functions"]], "take() (in module arkouda.array_api._indexing_functions)": [[10, "arkouda.array_api._indexing_functions.take"]], "arkouda.array_api._manipulation_functions": [[11, "module-arkouda.array_api._manipulation_functions"]], "broadcast_arrays() (in module arkouda.array_api._manipulation_functions)": [[11, "arkouda.array_api._manipulation_functions.broadcast_arrays"]], "broadcast_to() (in module arkouda.array_api._manipulation_functions)": [[11, "arkouda.array_api._manipulation_functions.broadcast_to"]], "concat() (in module arkouda.array_api._manipulation_functions)": [[11, "arkouda.array_api._manipulation_functions.concat"]], "expand_dims() (in module arkouda.array_api._manipulation_functions)": [[11, "arkouda.array_api._manipulation_functions.expand_dims"]], "flip() (in module arkouda.array_api._manipulation_functions)": [[11, "arkouda.array_api._manipulation_functions.flip"]], "permute_dims() (in module arkouda.array_api._manipulation_functions)": [[11, "arkouda.array_api._manipulation_functions.permute_dims"]], "reshape() (in module arkouda.array_api._manipulation_functions)": [[11, "arkouda.array_api._manipulation_functions.reshape"]], "roll() (in module arkouda.array_api._manipulation_functions)": [[11, "arkouda.array_api._manipulation_functions.roll"]], "squeeze() (in module arkouda.array_api._manipulation_functions)": [[11, "arkouda.array_api._manipulation_functions.squeeze"]], "stack() (in module arkouda.array_api._manipulation_functions)": [[11, "arkouda.array_api._manipulation_functions.stack"]], "argmax() (in module arkouda.array_api._searching_functions)": [[12, "arkouda.array_api._searching_functions.argmax"]], "argmin() (in module arkouda.array_api._searching_functions)": [[12, "arkouda.array_api._searching_functions.argmin"]], "arkouda.array_api._searching_functions": [[12, "module-arkouda.array_api._searching_functions"]], "nonzero() (in module arkouda.array_api._searching_functions)": [[12, "arkouda.array_api._searching_functions.nonzero"]], "where() (in module arkouda.array_api._searching_functions)": [[12, "arkouda.array_api._searching_functions.where"]], "uniqueallresult (class in arkouda.array_api._set_functions)": [[13, "arkouda.array_api._set_functions.UniqueAllResult"]], "uniquecountsresult (class in arkouda.array_api._set_functions)": [[13, "arkouda.array_api._set_functions.UniqueCountsResult"]], "uniqueinverseresult (class in arkouda.array_api._set_functions)": [[13, "arkouda.array_api._set_functions.UniqueInverseResult"]], "arkouda.array_api._set_functions": [[13, "module-arkouda.array_api._set_functions"]], "counts (arkouda.array_api._set_functions.uniqueallresult attribute)": [[13, "arkouda.array_api._set_functions.UniqueAllResult.counts"]], "counts (arkouda.array_api._set_functions.uniquecountsresult attribute)": [[13, "arkouda.array_api._set_functions.UniqueCountsResult.counts"]], "indices (arkouda.array_api._set_functions.uniqueallresult attribute)": [[13, "arkouda.array_api._set_functions.UniqueAllResult.indices"]], "inverse_indices (arkouda.array_api._set_functions.uniqueallresult attribute)": [[13, "arkouda.array_api._set_functions.UniqueAllResult.inverse_indices"]], "inverse_indices (arkouda.array_api._set_functions.uniqueinverseresult attribute)": [[13, "arkouda.array_api._set_functions.UniqueInverseResult.inverse_indices"]], "unique_all() (in module arkouda.array_api._set_functions)": [[13, "arkouda.array_api._set_functions.unique_all"]], "unique_counts() (in module arkouda.array_api._set_functions)": [[13, "arkouda.array_api._set_functions.unique_counts"]], "unique_inverse() (in module arkouda.array_api._set_functions)": [[13, "arkouda.array_api._set_functions.unique_inverse"]], "unique_values() (in module arkouda.array_api._set_functions)": [[13, "arkouda.array_api._set_functions.unique_values"]], "values (arkouda.array_api._set_functions.uniqueallresult attribute)": [[13, "arkouda.array_api._set_functions.UniqueAllResult.values"]], "values (arkouda.array_api._set_functions.uniquecountsresult attribute)": [[13, "arkouda.array_api._set_functions.UniqueCountsResult.values"]], "values (arkouda.array_api._set_functions.uniqueinverseresult attribute)": [[13, "arkouda.array_api._set_functions.UniqueInverseResult.values"]], "argsort() (in module arkouda.array_api._sorting_functions)": [[14, "arkouda.array_api._sorting_functions.argsort"]], "arkouda.array_api._sorting_functions": [[14, "module-arkouda.array_api._sorting_functions"]], "sort() (in module arkouda.array_api._sorting_functions)": [[14, "arkouda.array_api._sorting_functions.sort"]], "arkouda.array_api._statistical_functions": [[15, "module-arkouda.array_api._statistical_functions"]], "max() (in module arkouda.array_api._statistical_functions)": [[15, "arkouda.array_api._statistical_functions.max"]], "mean() (in module arkouda.array_api._statistical_functions)": [[15, "arkouda.array_api._statistical_functions.mean"]], "min() (in module arkouda.array_api._statistical_functions)": [[15, "arkouda.array_api._statistical_functions.min"]], "prod() (in module arkouda.array_api._statistical_functions)": [[15, "arkouda.array_api._statistical_functions.prod"]], "std() (in module arkouda.array_api._statistical_functions)": [[15, "arkouda.array_api._statistical_functions.std"]], "sum() (in module arkouda.array_api._statistical_functions)": [[15, "arkouda.array_api._statistical_functions.sum"]], "var() (in module arkouda.array_api._statistical_functions)": [[15, "arkouda.array_api._statistical_functions.var"]], "array (class in arkouda.array_api._typing)": [[16, "arkouda.array_api._typing.Array"]], "device (in module arkouda.array_api._typing)": [[16, "arkouda.array_api._typing.Device"]], "dtype (in module arkouda.array_api._typing)": [[16, "arkouda.array_api._typing.Dtype"]], "pycapsule (in module arkouda.array_api._typing)": [[16, "arkouda.array_api._typing.PyCapsule"]], "supportsbufferprotocol (in module arkouda.array_api._typing)": [[16, "arkouda.array_api._typing.SupportsBufferProtocol"]], "supportsdlpack (class in arkouda.array_api._typing)": [[16, "arkouda.array_api._typing.SupportsDLPack"]], "t (arkouda.array_api._typing.array property)": [[16, "arkouda.array_api._typing.Array.T"]], "arkouda.array_api._typing": [[16, "module-arkouda.array_api._typing"]], "device (arkouda.array_api._typing.array property)": [[16, "arkouda.array_api._typing.Array.device"]], "dtype (arkouda.array_api._typing.array property)": [[16, "arkouda.array_api._typing.Array.dtype"]], "mt (arkouda.array_api._typing.array property)": [[16, "arkouda.array_api._typing.Array.mT"]], "ndim (arkouda.array_api._typing.array property)": [[16, "arkouda.array_api._typing.Array.ndim"]], "shape (arkouda.array_api._typing.array property)": [[16, "arkouda.array_api._typing.Array.shape"]], "size (arkouda.array_api._typing.array property)": [[16, "arkouda.array_api._typing.Array.size"]], "to_device() (arkouda.array_api._typing.array method)": [[16, "arkouda.array_api._typing.Array.to_device"]], "to_ndarray() (arkouda.array_api._typing.array method)": [[16, "arkouda.array_api._typing.Array.to_ndarray"]], "tolist() (arkouda.array_api._typing.array method)": [[16, "arkouda.array_api._typing.Array.tolist"]], "all() (in module arkouda.array_api._utility_functions)": [[17, "arkouda.array_api._utility_functions.all"]], "any() (in module arkouda.array_api._utility_functions)": [[17, "arkouda.array_api._utility_functions.any"]], "arkouda.array_api._utility_functions": [[17, "module-arkouda.array_api._utility_functions"]], "arkouda.array_api": [[18, "module-arkouda.array_api"]], "arkouda.array_api.linalg": [[19, "module-arkouda.array_api.linalg"]], "matmul() (in module arkouda.array_api.linalg)": [[19, "arkouda.array_api.linalg.matmul"]], "matrix_transpose() (in module arkouda.array_api.linalg)": [[19, "arkouda.array_api.linalg.matrix_transpose"]], "tensordot() (in module arkouda.array_api.linalg)": [[19, "arkouda.array_api.linalg.tensordot"]], "vecdot() (in module arkouda.array_api.linalg)": [[19, "arkouda.array_api.linalg.vecdot"]], "arrayview (class in arkouda.array_view)": [[20, "arkouda.array_view.ArrayView"]], "arkouda.array_view": [[20, "module-arkouda.array_view"]], "base (arkouda.array_view.arrayview attribute)": [[20, "arkouda.array_view.ArrayView.base"]], "dtype (arkouda.array_view.arrayview attribute)": [[20, "arkouda.array_view.ArrayView.dtype"]], "itemsize (arkouda.array_view.arrayview attribute)": [[20, "arkouda.array_view.ArrayView.itemsize"]], "ndim (arkouda.array_view.arrayview attribute)": [[20, "arkouda.array_view.ArrayView.ndim"]], "objtype (arkouda.array_view.arrayview attribute)": [[20, "arkouda.array_view.ArrayView.objType"]], "order (arkouda.array_view.arrayview attribute)": [[20, "arkouda.array_view.ArrayView.order"]], "shape (arkouda.array_view.arrayview attribute)": [[20, "arkouda.array_view.ArrayView.shape"]], "size (arkouda.array_view.arrayview attribute)": [[20, "arkouda.array_view.ArrayView.size"]], "to_hdf() (arkouda.array_view.arrayview method)": [[20, "arkouda.array_view.ArrayView.to_hdf"]], "to_list() (arkouda.array_view.arrayview method)": [[20, "arkouda.array_view.ArrayView.to_list"]], "to_ndarray() (arkouda.array_view.arrayview method)": [[20, "arkouda.array_view.ArrayView.to_ndarray"]], "update_hdf() (arkouda.array_view.arrayview method)": [[20, "arkouda.array_view.ArrayView.update_hdf"]], "binops (arkouda.categorical.categorical attribute)": [[21, "arkouda.categorical.Categorical.BinOps"]], "categorical (class in arkouda.categorical)": [[21, "arkouda.categorical.Categorical"]], "registerablepieces (arkouda.categorical.categorical attribute)": [[21, "arkouda.categorical.Categorical.RegisterablePieces"]], "requiredpieces (arkouda.categorical.categorical attribute)": [[21, "arkouda.categorical.Categorical.RequiredPieces"]], "argsort() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.argsort"]], "arkouda.categorical": [[21, "module-arkouda.categorical"]], "attach() (arkouda.categorical.categorical static method)": [[21, "arkouda.categorical.Categorical.attach"]], "categories (arkouda.categorical.categorical attribute)": [[21, "arkouda.categorical.Categorical.categories"]], "codes (arkouda.categorical.categorical attribute)": [[21, "arkouda.categorical.Categorical.codes"]], "concatenate() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.concatenate"]], "contains() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.contains"]], "dtype (arkouda.categorical.categorical attribute)": [[21, "arkouda.categorical.Categorical.dtype"]], "endswith() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.endswith"]], "from_codes() (arkouda.categorical.categorical class method)": [[21, "arkouda.categorical.Categorical.from_codes"]], "from_return_msg() (arkouda.categorical.categorical class method)": [[21, "arkouda.categorical.Categorical.from_return_msg"]], "group() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.group"]], "hash() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.hash"]], "in1d() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.in1d"]], "info() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.info"]], "is_registered() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.is_registered"]], "isna() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.isna"]], "ndim (arkouda.categorical.categorical attribute)": [[21, "arkouda.categorical.Categorical.ndim"]], "nlevels (arkouda.categorical.categorical attribute)": [[21, "arkouda.categorical.Categorical.nlevels"]], "objtype (arkouda.categorical.categorical attribute)": [[21, "arkouda.categorical.Categorical.objType"]], "parse_hdf_categoricals() (arkouda.categorical.categorical static method)": [[21, "arkouda.categorical.Categorical.parse_hdf_categoricals"]], "permutation (arkouda.categorical.categorical attribute)": [[21, "arkouda.categorical.Categorical.permutation"], [21, "id0"]], "pretty_print_info() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.pretty_print_info"]], "register() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.register"]], "reset_categories() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.reset_categories"]], "save() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.save"]], "segments (arkouda.categorical.categorical attribute)": [[21, "arkouda.categorical.Categorical.segments"], [21, "id1"]], "set_categories() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.set_categories"]], "shape (arkouda.categorical.categorical attribute)": [[21, "arkouda.categorical.Categorical.shape"]], "size (arkouda.categorical.categorical attribute)": [[21, "arkouda.categorical.Categorical.size"]], "sort() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.sort"]], "standardize_categories() (arkouda.categorical.categorical class method)": [[21, "arkouda.categorical.Categorical.standardize_categories"]], "startswith() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.startswith"]], "to_hdf() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.to_hdf"]], "to_list() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.to_list"]], "to_ndarray() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.to_ndarray"]], "to_parquet() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.to_parquet"]], "transfer() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.transfer"]], "unique() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.unique"]], "unregister() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.unregister"]], "unregister_categorical_by_name() (arkouda.categorical.categorical static method)": [[21, "arkouda.categorical.Categorical.unregister_categorical_by_name"]], "update_hdf() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.update_hdf"]], "arkouda.client": [[22, "module-arkouda.client"]], "connect() (in module arkouda.client)": [[22, "arkouda.client.connect"]], "disconnect() (in module arkouda.client)": [[22, "arkouda.client.disconnect"]], "generate_history() (in module arkouda.client)": [[22, "arkouda.client.generate_history"]], "get_config() (in module arkouda.client)": [[22, "arkouda.client.get_config"]], "get_mem_avail() (in module arkouda.client)": [[22, "arkouda.client.get_mem_avail"]], "get_mem_status() (in module arkouda.client)": [[22, "arkouda.client.get_mem_status"]], "get_mem_used() (in module arkouda.client)": [[22, "arkouda.client.get_mem_used"]], "get_server_commands() (in module arkouda.client)": [[22, "arkouda.client.get_server_commands"]], "print_server_commands() (in module arkouda.client)": [[22, "arkouda.client.print_server_commands"]], "ruok() (in module arkouda.client)": [[22, "arkouda.client.ruok"]], "shutdown() (in module arkouda.client)": [[22, "arkouda.client.shutdown"]], "bitvector (class in arkouda.client_dtypes)": [[23, "arkouda.client_dtypes.BitVector"]], "bitvectorizer() (in module arkouda.client_dtypes)": [[23, "arkouda.client_dtypes.BitVectorizer"]], "fields (class in arkouda.client_dtypes)": [[23, "arkouda.client_dtypes.Fields"]], "ipv4 (class in arkouda.client_dtypes)": [[23, "arkouda.client_dtypes.IPv4"]], "arkouda.client_dtypes": [[23, "module-arkouda.client_dtypes"]], "conserves (arkouda.client_dtypes.bitvector attribute)": [[23, "arkouda.client_dtypes.BitVector.conserves"]], "export_uint() (arkouda.client_dtypes.ipv4 method)": [[23, "arkouda.client_dtypes.IPv4.export_uint"]], "format() (arkouda.client_dtypes.bitvector method)": [[23, "arkouda.client_dtypes.BitVector.format"]], "format() (arkouda.client_dtypes.fields method)": [[23, "arkouda.client_dtypes.Fields.format"]], "format() (arkouda.client_dtypes.ipv4 method)": [[23, "arkouda.client_dtypes.IPv4.format"]], "from_return_msg() (arkouda.client_dtypes.bitvector class method)": [[23, "arkouda.client_dtypes.BitVector.from_return_msg"]], "ip_address() (in module arkouda.client_dtypes)": [[23, "arkouda.client_dtypes.ip_address"]], "is_ipv4() (in module arkouda.client_dtypes)": [[23, "arkouda.client_dtypes.is_ipv4"]], "is_ipv6() (in module arkouda.client_dtypes)": [[23, "arkouda.client_dtypes.is_ipv6"]], "normalize() (arkouda.client_dtypes.ipv4 method)": [[23, "arkouda.client_dtypes.IPv4.normalize"]], "opeq() (arkouda.client_dtypes.bitvector method)": [[23, "arkouda.client_dtypes.BitVector.opeq"]], "opeq() (arkouda.client_dtypes.fields method)": [[23, "arkouda.client_dtypes.Fields.opeq"]], "opeq() (arkouda.client_dtypes.ipv4 method)": [[23, "arkouda.client_dtypes.IPv4.opeq"]], "register() (arkouda.client_dtypes.bitvector method)": [[23, "arkouda.client_dtypes.BitVector.register"]], "register() (arkouda.client_dtypes.ipv4 method)": [[23, "arkouda.client_dtypes.IPv4.register"]], "special_objtype (arkouda.client_dtypes.bitvector attribute)": [[23, "arkouda.client_dtypes.BitVector.special_objType"]], "special_objtype (arkouda.client_dtypes.ipv4 attribute)": [[23, "arkouda.client_dtypes.IPv4.special_objType"]], "to_hdf() (arkouda.client_dtypes.ipv4 method)": [[23, "arkouda.client_dtypes.IPv4.to_hdf"]], "to_list() (arkouda.client_dtypes.bitvector method)": [[23, "arkouda.client_dtypes.BitVector.to_list"]], "to_list() (arkouda.client_dtypes.ipv4 method)": [[23, "arkouda.client_dtypes.IPv4.to_list"]], "to_ndarray() (arkouda.client_dtypes.bitvector method)": [[23, "arkouda.client_dtypes.BitVector.to_ndarray"]], "to_ndarray() (arkouda.client_dtypes.ipv4 method)": [[23, "arkouda.client_dtypes.IPv4.to_ndarray"]], "update_hdf() (arkouda.client_dtypes.ipv4 method)": [[23, "arkouda.client_dtypes.IPv4.update_hdf"]], "column_classes (arkouda.dataframe.dataframe attribute)": [[24, "arkouda.dataframe.DataFrame.COLUMN_CLASSES"]], "dataframe (class in arkouda.dataframe)": [[24, "arkouda.dataframe.DataFrame"]], "groupby() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.GroupBy"], [24, "arkouda.dataframe.DataFrame.groupby"]], "append() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.append"]], "apply_permutation() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.apply_permutation"]], "argsort() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.argsort"]], "arkouda.dataframe": [[24, "module-arkouda.dataframe"]], "attach() (arkouda.dataframe.dataframe static method)": [[24, "arkouda.dataframe.DataFrame.attach"]], "coargsort() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.coargsort"]], "columns (arkouda.dataframe.dataframe property)": [[24, "arkouda.dataframe.DataFrame.columns"]], "concat() (arkouda.dataframe.dataframe class method)": [[24, "arkouda.dataframe.DataFrame.concat"]], "copy() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.copy"]], "corr() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.corr"]], "drop() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.drop"]], "drop_duplicates() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.drop_duplicates"]], "dtypes (arkouda.dataframe.dataframe property)": [[24, "arkouda.dataframe.DataFrame.dtypes"]], "empty (arkouda.dataframe.dataframe property)": [[24, "arkouda.dataframe.DataFrame.empty"]], "filter_by_range() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.filter_by_range"]], "from_pandas() (arkouda.dataframe.dataframe class method)": [[24, "arkouda.dataframe.DataFrame.from_pandas"]], "from_return_msg() (arkouda.dataframe.dataframe class method)": [[24, "arkouda.dataframe.DataFrame.from_return_msg"]], "head() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.head"]], "index (arkouda.dataframe.dataframe property)": [[24, "arkouda.dataframe.DataFrame.index"]], "info (arkouda.dataframe.dataframe property)": [[24, "arkouda.dataframe.DataFrame.info"]], "intersect() (in module arkouda.dataframe)": [[24, "arkouda.dataframe.intersect"]], "intx() (in module arkouda.dataframe)": [[24, "arkouda.dataframe.intx"]], "invert_permutation() (in module arkouda.dataframe)": [[24, "arkouda.dataframe.invert_permutation"]], "is_registered() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.is_registered"]], "isin() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.isin"]], "load() (arkouda.dataframe.dataframe class method)": [[24, "arkouda.dataframe.DataFrame.load"]], "memory_usage() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.memory_usage"]], "merge() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.merge"]], "merge() (in module arkouda.dataframe)": [[24, "arkouda.dataframe.merge"]], "objtype (arkouda.dataframe.dataframe attribute)": [[24, "arkouda.dataframe.DataFrame.objType"]], "read_csv() (arkouda.dataframe.dataframe class method)": [[24, "arkouda.dataframe.DataFrame.read_csv"]], "register() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.register"]], "rename() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.rename"]], "reset_index() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.reset_index"]], "sample() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.sample"]], "save() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.save"]], "shape (arkouda.dataframe.dataframe property)": [[24, "arkouda.dataframe.DataFrame.shape"]], "size (arkouda.dataframe.dataframe property)": [[24, "arkouda.dataframe.DataFrame.size"]], "sort_index() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.sort_index"]], "sort_values() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.sort_values"]], "sorted() (in module arkouda.dataframe)": [[24, "arkouda.dataframe.sorted"]], "tail() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.tail"]], "to_csv() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.to_csv"]], "to_hdf() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.to_hdf"]], "to_pandas() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.to_pandas"]], "to_parquet() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.to_parquet"]], "transfer() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.transfer"]], "unregister() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.unregister"]], "unregister_dataframe_by_name() (arkouda.dataframe.dataframe static method)": [[24, "arkouda.dataframe.DataFrame.unregister_dataframe_by_name"]], "update_hdf() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.update_hdf"]], "update_size() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.update_size"]], "arkouda_supported_dtypes (in module arkouda.dtypes)": [[25, "arkouda.dtypes.ARKOUDA_SUPPORTED_DTYPES"]], "dtypeobjects (in module arkouda.dtypes)": [[25, "arkouda.dtypes.DTypeObjects"]], "dtypes (in module arkouda.dtypes)": [[25, "arkouda.dtypes.DTypes"]], "scalardtypes (in module arkouda.dtypes)": [[25, "arkouda.dtypes.ScalarDTypes"]], "all_scalars (in module arkouda.dtypes)": [[25, "arkouda.dtypes.all_scalars"]], "arkouda.dtypes": [[25, "module-arkouda.dtypes"]], "bigint (in module arkouda.dtypes)": [[25, "arkouda.dtypes.bigint"]], "bittype (in module arkouda.dtypes)": [[25, "arkouda.dtypes.bitType"]], "bool (in module arkouda.dtypes)": [[25, "arkouda.dtypes.bool"]], "bool_scalars (in module arkouda.dtypes)": [[25, "arkouda.dtypes.bool_scalars"]], "check_np_dtype() (in module arkouda.dtypes)": [[25, "arkouda.dtypes.check_np_dtype"]], "complex128 (in module arkouda.dtypes)": [[25, "arkouda.dtypes.complex128"]], "complex64 (in module arkouda.dtypes)": [[25, "arkouda.dtypes.complex64"]], "dtype() (in module arkouda.dtypes)": [[25, "arkouda.dtypes.dtype"]], "float32 (in module arkouda.dtypes)": [[25, "arkouda.dtypes.float32"]], "float64 (in module arkouda.dtypes)": [[25, "arkouda.dtypes.float64"]], "float_scalars (in module arkouda.dtypes)": [[25, "arkouda.dtypes.float_scalars"]], "get_byteorder() (in module arkouda.dtypes)": [[25, "arkouda.dtypes.get_byteorder"]], "get_server_byteorder() (in module arkouda.dtypes)": [[25, "arkouda.dtypes.get_server_byteorder"]], "int16 (in module arkouda.dtypes)": [[25, "arkouda.dtypes.int16"]], "int32 (in module arkouda.dtypes)": [[25, "arkouda.dtypes.int32"]], "int64 (in module arkouda.dtypes)": [[25, "arkouda.dtypes.int64"]], "int8 (in module arkouda.dtypes)": [[25, "arkouda.dtypes.int8"]], "inttypes (in module arkouda.dtypes)": [[25, "arkouda.dtypes.intTypes"]], "int_scalars (in module arkouda.dtypes)": [[25, "arkouda.dtypes.int_scalars"]], "issupportednumber() (in module arkouda.dtypes)": [[25, "arkouda.dtypes.isSupportedNumber"]], "numeric_scalars (in module arkouda.dtypes)": [[25, "arkouda.dtypes.numeric_scalars"]], "numpy_scalars (in module arkouda.dtypes)": [[25, "arkouda.dtypes.numpy_scalars"]], "resolve_scalar_dtype() (in module arkouda.dtypes)": [[25, "arkouda.dtypes.resolve_scalar_dtype"]], "str_ (in module arkouda.dtypes)": [[25, "arkouda.dtypes.str_"]], "str_scalars (in module arkouda.dtypes)": [[25, "arkouda.dtypes.str_scalars"]], "translate_np_dtype() (in module arkouda.dtypes)": [[25, "arkouda.dtypes.translate_np_dtype"]], "uint16 (in module arkouda.dtypes)": [[25, "arkouda.dtypes.uint16"]], "uint32 (in module arkouda.dtypes)": [[25, "arkouda.dtypes.uint32"]], "uint64 (in module arkouda.dtypes)": [[25, "arkouda.dtypes.uint64"]], "uint8 (in module arkouda.dtypes)": [[25, "arkouda.dtypes.uint8"]], "and() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.AND"]], "groupby_reduction_types (in module arkouda.groupbyclass)": [[26, "arkouda.groupbyclass.GROUPBY_REDUCTION_TYPES"]], "groupby (class in arkouda.groupbyclass)": [[26, "arkouda.groupbyclass.GroupBy"]], "or() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.OR"]], "reductions (arkouda.groupbyclass.groupby attribute)": [[26, "arkouda.groupbyclass.GroupBy.Reductions"]], "xor() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.XOR"]], "aggregate() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.aggregate"]], "all() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.all"]], "any() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.any"]], "argmax() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.argmax"]], "argmin() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.argmin"]], "arkouda.groupbyclass": [[26, "module-arkouda.groupbyclass"]], "attach() (arkouda.groupbyclass.groupby static method)": [[26, "arkouda.groupbyclass.GroupBy.attach"]], "broadcast() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.broadcast"]], "broadcast() (in module arkouda.groupbyclass)": [[26, "arkouda.groupbyclass.broadcast"]], "build_from_components() (arkouda.groupbyclass.groupby static method)": [[26, "arkouda.groupbyclass.GroupBy.build_from_components"]], "count() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.count"]], "dropna (arkouda.groupbyclass.groupby attribute)": [[26, "arkouda.groupbyclass.GroupBy.dropna"]], "first() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.first"]], "from_return_msg() (arkouda.groupbyclass.groupby static method)": [[26, "arkouda.groupbyclass.GroupBy.from_return_msg"]], "is_registered() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.is_registered"]], "logger (arkouda.groupbyclass.groupby attribute)": [[26, "arkouda.groupbyclass.GroupBy.logger"]], "max() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.max"]], "mean() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.mean"]], "median() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.median"]], "min() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.min"]], "mode() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.mode"]], "most_common() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.most_common"]], "ngroups (arkouda.groupbyclass.groupby attribute)": [[26, "arkouda.groupbyclass.GroupBy.ngroups"]], "nkeys (arkouda.groupbyclass.groupby attribute)": [[26, "arkouda.groupbyclass.GroupBy.nkeys"]], "nunique() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.nunique"]], "objtype (arkouda.groupbyclass.groupby attribute)": [[26, "arkouda.groupbyclass.GroupBy.objType"]], "permutation (arkouda.groupbyclass.groupby attribute)": [[26, "arkouda.groupbyclass.GroupBy.permutation"]], "prod() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.prod"]], "register() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.register"]], "segments (arkouda.groupbyclass.groupby attribute)": [[26, "arkouda.groupbyclass.GroupBy.segments"]], "size (arkouda.groupbyclass.groupby attribute)": [[26, "arkouda.groupbyclass.GroupBy.size"]], "size() (arkouda.groupbyclass.groupby method)": [[26, "id0"]], "std() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.std"]], "sum() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.sum"]], "to_hdf() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.to_hdf"]], "unique() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.unique"]], "unique() (in module arkouda.groupbyclass)": [[26, "arkouda.groupbyclass.unique"]], "unique_keys (arkouda.groupbyclass.groupby attribute)": [[26, "arkouda.groupbyclass.GroupBy.unique_keys"]], "unregister() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.unregister"]], "unregister_groupby_by_name() (arkouda.groupbyclass.groupby static method)": [[26, "arkouda.groupbyclass.GroupBy.unregister_groupby_by_name"]], "update_hdf() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.update_hdf"]], "var() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.var"]], "historyretriever (class in arkouda.history)": [[27, "arkouda.history.HistoryRetriever"]], "notebookhistoryretriever (class in arkouda.history)": [[27, "arkouda.history.NotebookHistoryRetriever"]], "shellhistoryretriever (class in arkouda.history)": [[27, "arkouda.history.ShellHistoryRetriever"]], "arkouda.history": [[27, "module-arkouda.history"]], "retrieve() (arkouda.history.historyretriever method)": [[27, "arkouda.history.HistoryRetriever.retrieve"]], "retrieve() (arkouda.history.notebookhistoryretriever method)": [[27, "arkouda.history.NotebookHistoryRetriever.retrieve"]], "retrieve() (arkouda.history.shellhistoryretriever method)": [[27, "arkouda.history.ShellHistoryRetriever.retrieve"]], "and() (arkouda.groupby method)": [[28, "arkouda.GroupBy.AND"], [28, "id101"], [28, "id283"], [28, "id469"], [28, "id590"], [28, "id884"], [85, "arkouda.GroupBy.AND"]], "and() (arkouda.segarray method)": [[28, "arkouda.SegArray.AND"]], "arkouda_supported_dtypes (in module arkouda)": [[28, "arkouda.ARKOUDA_SUPPORTED_DTYPES"]], "allsymbols (in module arkouda)": [[28, "arkouda.AllSymbols"]], "arrayview (class in arkouda)": [[28, "arkouda.ArrayView"], [81, "arkouda.ArrayView"]], "binops (arkouda.strings attribute)": [[28, "arkouda.Strings.BinOps"], [28, "id123"], [28, "id375"], [28, "id683"], [28, "id905"]], "binops (arkouda.pdarray attribute)": [[28, "arkouda.pdarray.BinOps"], [28, "id13"], [28, "id195"], [28, "id310"], [28, "id493"], [28, "id614"]], "bitvector (class in arkouda)": [[28, "arkouda.BitVector"]], "bitvectorizer() (in module arkouda)": [[28, "arkouda.BitVectorizer"]], "column_classes (arkouda.dataframe attribute)": [[28, "arkouda.DataFrame.COLUMN_CLASSES"], [28, "id748"]], "critical (arkouda.loglevel attribute)": [[28, "arkouda.LogLevel.CRITICAL"]], "cachedaccessor (class in arkouda)": [[28, "arkouda.CachedAccessor"]], "debug (arkouda.loglevel attribute)": [[28, "arkouda.LogLevel.DEBUG"]], "dtypeobjects (in module arkouda)": [[28, "arkouda.DTypeObjects"]], "dtypes (in module arkouda)": [[28, "arkouda.DTypes"]], "dataframe (class in arkouda)": [[28, "arkouda.DataFrame"], [28, "id740"], [84, "arkouda.DataFrame"]], "datetime (class in arkouda)": [[28, "arkouda.Datetime"], [28, "id793"], [28, "id962"]], "datetimeaccessor (class in arkouda)": [[28, "arkouda.DatetimeAccessor"]], "error (arkouda.loglevel attribute)": [[28, "arkouda.LogLevel.ERROR"]], "errormode (class in arkouda)": [[28, "arkouda.ErrorMode"]], "fields (class in arkouda)": [[28, "arkouda.Fields"]], "groupby_reduction_types (in module arkouda)": [[28, "arkouda.GROUPBY_REDUCTION_TYPES"]], "groupby (class in arkouda)": [[28, "arkouda.GroupBy"], [28, "id252"], [28, "id438"], [28, "id559"], [28, "id70"], [28, "id853"], [85, "arkouda.GroupBy"]], "groupby() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.GroupBy"], [28, "id762"], [28, "arkouda.DataFrame.groupby"], [28, "id783"]], "info (arkouda.loglevel attribute)": [[28, "arkouda.LogLevel.INFO"]], "ipv4 (class in arkouda)": [[28, "arkouda.IPv4"]], "index (class in arkouda)": [[28, "arkouda.Index"], [78, "arkouda.Index"]], "len_suffix (in module arkouda)": [[28, "arkouda.LEN_SUFFIX"]], "loglevel (class in arkouda)": [[28, "arkouda.LogLevel"]], "multiindex (class in arkouda)": [[28, "arkouda.MultiIndex"]], "or() (arkouda.groupby method)": [[28, "arkouda.GroupBy.OR"], [28, "id100"], [28, "id282"], [28, "id468"], [28, "id589"], [28, "id883"], [85, "arkouda.GroupBy.OR"]], "or() (arkouda.segarray method)": [[28, "arkouda.SegArray.OR"]], "opeqops (arkouda.pdarray attribute)": [[28, "arkouda.pdarray.OpEqOps"], [28, "id14"], [28, "id196"], [28, "id311"], [28, "id494"], [28, "id615"]], "properties (class in arkouda)": [[28, "arkouda.Properties"]], "reductions (arkouda.groupby attribute)": [[28, "arkouda.GroupBy.Reductions"], [28, "id261"], [28, "id447"], [28, "id568"], [28, "id79"], [28, "id862"]], "registeredsymbols (in module arkouda)": [[28, "arkouda.RegisteredSymbols"]], "registrationerror": [[28, "arkouda.RegistrationError"], [28, "id185"], [28, "id299"], [28, "id484"], [28, "id65"], [38, "arkouda.pdarrayclass.RegistrationError"]], "row (class in arkouda)": [[28, "arkouda.Row"]], "seg_suffix (in module arkouda)": [[28, "arkouda.SEG_SUFFIX"]], "scalardtypes (in module arkouda)": [[28, "arkouda.ScalarDTypes"]], "segarray (class in arkouda)": [[28, "arkouda.SegArray"]], "series (class in arkouda)": [[28, "arkouda.Series"], [90, "arkouda.Series"]], "stringaccessor (class in arkouda)": [[28, "arkouda.StringAccessor"]], "strings (class in arkouda)": [[28, "arkouda.Strings"], [28, "id115"], [28, "id367"], [28, "id675"], [28, "id897"]], "timedelta (class in arkouda)": [[28, "arkouda.Timedelta"], [28, "id826"]], "val_suffix (in module arkouda)": [[28, "arkouda.VAL_SUFFIX"]], "warn (arkouda.loglevel attribute)": [[28, "arkouda.LogLevel.WARN"]], "xor() (arkouda.groupby method)": [[28, "arkouda.GroupBy.XOR"], [28, "id102"], [28, "id284"], [28, "id470"], [28, "id591"], [28, "id885"], [85, "arkouda.GroupBy.XOR"]], "xor() (arkouda.segarray method)": [[28, "arkouda.SegArray.XOR"]], "abs() (arkouda.timedelta method)": [[28, "arkouda.Timedelta.abs"], [28, "id844"]], "abs() (in module arkouda)": [[28, "arkouda.abs"], [80, "arkouda.abs"]], "add() (arkouda.series method)": [[28, "arkouda.Series.add"]], "aggregate() (arkouda.groupby method)": [[28, "arkouda.GroupBy.aggregate"], [28, "id268"], [28, "id454"], [28, "id575"], [28, "id86"], [28, "id869"], [85, "arkouda.GroupBy.aggregate"]], "aggregate() (arkouda.segarray method)": [[28, "arkouda.SegArray.aggregate"]], "akabs() (in module arkouda)": [[28, "arkouda.akabs"]], "akbool (in module arkouda)": [[28, "arkouda.akbool"], [28, "id436"]], "akcast() (in module arkouda)": [[28, "arkouda.akcast"], [28, "id483"]], "akfloat64 (in module arkouda)": [[28, "arkouda.akfloat64"], [28, "id556"]], "akint64 (in module arkouda)": [[28, "arkouda.akint64"], [28, "id437"], [28, "id557"]], "akuint64 (in module arkouda)": [[28, "arkouda.akuint64"], [28, "id251"], [28, "id558"]], "align() (in module arkouda)": [[28, "arkouda.align"]], "all() (arkouda.groupby method)": [[28, "arkouda.GroupBy.all"], [28, "id281"], [28, "id467"], [28, "id588"], [28, "id882"], [28, "id99"], [85, "arkouda.GroupBy.all"]], "all() (arkouda.segarray method)": [[28, "arkouda.SegArray.all"]], "all() (arkouda.pdarray method)": [[28, "arkouda.pdarray.all"], [28, "id203"], [28, "id21"], [28, "id318"], [28, "id501"], [28, "id622"], [86, "arkouda.pdarray.all"]], "all() (in module arkouda)": [[28, "arkouda.all"], [80, "arkouda.all"]], "all_scalars (in module arkouda)": [[28, "arkouda.all_scalars"]], "any() (arkouda.groupby method)": [[28, "arkouda.GroupBy.any"], [28, "id280"], [28, "id466"], [28, "id587"], [28, "id881"], [28, "id98"], [85, "arkouda.GroupBy.any"]], "any() (arkouda.segarray method)": [[28, "arkouda.SegArray.any"]], "any() (arkouda.pdarray method)": [[28, "arkouda.pdarray.any"], [28, "id20"], [28, "id202"], [28, "id317"], [28, "id500"], [28, "id621"], [86, "arkouda.pdarray.any"]], "any() (in module arkouda)": [[28, "arkouda.any"], [80, "arkouda.any"]], "append() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.append"], [28, "id757"]], "append() (arkouda.segarray method)": [[28, "arkouda.SegArray.append"]], "append_single() (arkouda.segarray method)": [[28, "arkouda.SegArray.append_single"]], "apply_permutation() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.apply_permutation"], [28, "id780"]], "arange() (in module arkouda)": [[28, "arkouda.arange"], [28, "id362"], [28, "id545"], [28, "id666"], [28, "id68"], [28, "id850"], [83, "arkouda.arange"]], "arccos() (in module arkouda)": [[28, "arkouda.arccos"]], "arccosh() (in module arkouda)": [[28, "arkouda.arccosh"]], "arcsin() (in module arkouda)": [[28, "arkouda.arcsin"]], "arcsinh() (in module arkouda)": [[28, "arkouda.arcsinh"]], "arctan() (in module arkouda)": [[28, "arkouda.arctan"]], "arctan2() (in module arkouda)": [[28, "arkouda.arctan2"]], "arctanh() (in module arkouda)": [[28, "arkouda.arctanh"]], "argmax() (arkouda.groupby method)": [[28, "arkouda.GroupBy.argmax"], [28, "id278"], [28, "id464"], [28, "id585"], [28, "id879"], [28, "id96"], [85, "arkouda.GroupBy.argmax"]], "argmax() (arkouda.segarray method)": [[28, "arkouda.SegArray.argmax"]], "argmax() (arkouda.pdarray method)": [[28, "arkouda.pdarray.argmax"], [28, "id213"], [28, "id31"], [28, "id328"], [28, "id511"], [28, "id632"], [86, "arkouda.pdarray.argmax"]], "argmax() (in module arkouda)": [[28, "arkouda.argmax"], [80, "arkouda.argmax"]], "argmaxk() (arkouda.pdarray method)": [[28, "arkouda.pdarray.argmaxk"], [28, "id222"], [28, "id337"], [28, "id40"], [28, "id520"], [28, "id641"], [86, "arkouda.pdarray.argmaxk"]], "argmaxk() (in module arkouda)": [[28, "arkouda.argmaxk"], [80, "arkouda.argmaxk"]], "argmin() (arkouda.groupby method)": [[28, "arkouda.GroupBy.argmin"], [28, "id277"], [28, "id463"], [28, "id584"], [28, "id878"], [28, "id95"], [85, "arkouda.GroupBy.argmin"]], "argmin() (arkouda.segarray method)": [[28, "arkouda.SegArray.argmin"]], "argmin() (arkouda.pdarray method)": [[28, "arkouda.pdarray.argmin"], [28, "id212"], [28, "id30"], [28, "id327"], [28, "id510"], [28, "id631"], [86, "arkouda.pdarray.argmin"]], "argmin() (in module arkouda)": [[28, "arkouda.argmin"], [80, "arkouda.argmin"]], "argmink() (arkouda.pdarray method)": [[28, "arkouda.pdarray.argmink"], [28, "id221"], [28, "id336"], [28, "id39"], [28, "id519"], [28, "id640"], [86, "arkouda.pdarray.argmink"]], "argmink() (in module arkouda)": [[28, "arkouda.argmink"], [80, "arkouda.argmink"]], "argsort() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.argsort"], [28, "id776"]], "argsort() (arkouda.index method)": [[28, "arkouda.Index.argsort"]], "argsort() (arkouda.multiindex method)": [[28, "arkouda.MultiIndex.argsort"]], "argsort() (in module arkouda)": [[28, "arkouda.argsort"], [28, "id549"], [28, "id673"], [79, "arkouda.argsort"]], "arkouda": [[28, "module-arkouda"]], "array() (in module arkouda)": [[28, "arkouda.array"], [28, "id363"], [28, "id546"], [28, "id66"], [77, "arkouda.array"]], "astype() (arkouda.strings method)": [[28, "arkouda.Strings.astype"], [28, "id166"], [28, "id418"], [28, "id726"], [28, "id948"]], "astype() (arkouda.pdarray method)": [[28, "arkouda.pdarray.astype"], [28, "id230"], [28, "id345"], [28, "id48"], [28, "id528"], [28, "id649"]], "at (arkouda.series property)": [[28, "arkouda.Series.at"]], "attach() (arkouda.dataframe static method)": [[28, "arkouda.DataFrame.attach"], [28, "id790"]], "attach() (arkouda.groupby static method)": [[28, "arkouda.GroupBy.attach"], [28, "id111"], [28, "id293"], [28, "id479"], [28, "id600"], [28, "id894"], [85, "arkouda.GroupBy.attach"]], "attach() (arkouda.segarray class method)": [[28, "arkouda.SegArray.attach"]], "attach() (arkouda.series static method)": [[28, "arkouda.Series.attach"]], "attach() (arkouda.strings static method)": [[28, "arkouda.Strings.attach"], [28, "id177"], [28, "id429"], [28, "id737"], [28, "id959"]], "attach() (arkouda.pdarray static method)": [[28, "arkouda.pdarray.attach"], [28, "id246"], [28, "id361"], [28, "id544"], [28, "id64"], [28, "id665"]], "attach_pdarray() (in module arkouda)": [[28, "arkouda.attach_pdarray"]], "base (arkouda.arrayview attribute)": [[28, "arkouda.ArrayView.base"], [81, "arkouda.ArrayView.base"]], "bigint (in module arkouda)": [[28, "arkouda.bigint"], [28, "id555"]], "bigint_from_uint_arrays() (in module arkouda)": [[28, "arkouda.bigint_from_uint_arrays"]], "bigint_to_uint_arrays() (arkouda.pdarray method)": [[28, "arkouda.pdarray.bigint_to_uint_arrays"], [28, "id232"], [28, "id347"], [28, "id50"], [28, "id530"], [28, "id651"]], "bittype (in module arkouda)": [[28, "arkouda.bitType"], [28, "id4"]], "bool (in module arkouda)": [[28, "arkouda.bool"]], "bool_scalars (in module arkouda)": [[28, "arkouda.bool_scalars"]], "broadcast() (arkouda.groupby method)": [[28, "arkouda.GroupBy.broadcast"], [28, "id106"], [28, "id288"], [28, "id474"], [28, "id595"], [28, "id889"], [85, "arkouda.GroupBy.broadcast"]], "broadcast() (in module arkouda)": [[28, "arkouda.broadcast"], [28, "id114"], [28, "id296"], [28, "id603"]], "broadcast_to_shape() (in module arkouda)": [[28, "arkouda.broadcast_to_shape"]], "build_from_components() (arkouda.groupby static method)": [[28, "arkouda.GroupBy.build_from_components"], [28, "id107"], [28, "id289"], [28, "id475"], [28, "id596"], [28, "id890"], [85, "arkouda.GroupBy.build_from_components"]], "cached_regex_patterns() (arkouda.strings method)": [[28, "arkouda.Strings.cached_regex_patterns"], [28, "id142"], [28, "id394"], [28, "id702"], [28, "id924"]], "cast() (in module arkouda)": [[28, "arkouda.cast"], [28, "id184"], [88, "arkouda.cast"]], "ceil() (in module arkouda)": [[28, "arkouda.ceil"]], "check_np_dtype() (in module arkouda)": [[28, "arkouda.check_np_dtype"]], "clear() (in module arkouda)": [[28, "arkouda.clear"]], "clz() (arkouda.pdarray method)": [[28, "arkouda.pdarray.clz"], [28, "id225"], [28, "id340"], [28, "id43"], [28, "id523"], [28, "id644"]], "clz() (in module arkouda)": [[28, "arkouda.clz"]], "coargsort() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.coargsort"], [28, "id777"]], "coargsort() (in module arkouda)": [[28, "arkouda.coargsort"], [28, "id552"], [28, "id674"], [79, "arkouda.coargsort"]], "columns (arkouda.dataframe property)": [[28, "arkouda.DataFrame.columns"], [28, "id745"]], "complex128 (in module arkouda)": [[28, "arkouda.complex128"]], "complex64 (in module arkouda)": [[28, "arkouda.complex64"]], "components (arkouda.timedelta property)": [[28, "arkouda.Timedelta.components"], [28, "id831"]], "compute_join_size() (in module arkouda)": [[28, "arkouda.compute_join_size"]], "concat() (arkouda.dataframe class method)": [[28, "arkouda.DataFrame.concat"], [28, "id758"]], "concat() (arkouda.index method)": [[28, "arkouda.Index.concat"]], "concat() (arkouda.multiindex method)": [[28, "arkouda.MultiIndex.concat"]], "concat() (arkouda.segarray class method)": [[28, "arkouda.SegArray.concat"]], "concat() (arkouda.series static method)": [[28, "arkouda.Series.concat"]], "concatenate() (in module arkouda)": [[28, "arkouda.concatenate"], [28, "id366"], [28, "id670"], [83, "arkouda.concatenate"]], "conserves (arkouda.bitvector attribute)": [[28, "arkouda.BitVector.conserves"]], "contains() (arkouda.strings method)": [[28, "arkouda.Strings.contains"], [28, "id152"], [28, "id404"], [28, "id712"], [28, "id934"], [93, "arkouda.Strings.contains"]], "copy() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.copy"], [28, "id782"]], "copy() (arkouda.segarray method)": [[28, "arkouda.SegArray.copy"]], "corr() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.corr"], [28, "id785"]], "corr() (arkouda.pdarray method)": [[28, "arkouda.pdarray.corr"], [28, "id218"], [28, "id333"], [28, "id36"], [28, "id516"], [28, "id637"]], "corr() (in module arkouda)": [[28, "arkouda.corr"]], "cos() (in module arkouda)": [[28, "arkouda.cos"], [80, "arkouda.cos"]], "cosh() (in module arkouda)": [[28, "arkouda.cosh"]], "count() (arkouda.groupby method)": [[28, "arkouda.GroupBy.count"], [28, "id267"], [28, "id453"], [28, "id574"], [28, "id85"], [28, "id868"], [85, "arkouda.GroupBy.count"]], "cov() (arkouda.pdarray method)": [[28, "arkouda.pdarray.cov"], [28, "id217"], [28, "id332"], [28, "id35"], [28, "id515"], [28, "id636"]], "cov() (in module arkouda)": [[28, "arkouda.cov"]], "create_pdarray() (in module arkouda)": [[28, "arkouda.create_pdarray"], [28, "id186"], [28, "id300"], [28, "id547"]], "ctz() (arkouda.pdarray method)": [[28, "arkouda.pdarray.ctz"], [28, "id226"], [28, "id341"], [28, "id44"], [28, "id524"], [28, "id645"]], "ctz() (in module arkouda)": [[28, "arkouda.ctz"]], "cumprod() (in module arkouda)": [[28, "arkouda.cumprod"], [80, "arkouda.cumprod"]], "cumsum() (in module arkouda)": [[28, "arkouda.cumsum"], [28, "id298"], [80, "arkouda.cumsum"]], "date (arkouda.datetime property)": [[28, "arkouda.Datetime.date"], [28, "id810"], [28, "id979"]], "date_operators() (in module arkouda)": [[28, "arkouda.date_operators"]], "date_range() (in module arkouda)": [[28, "arkouda.date_range"], [28, "id848"]], "day (arkouda.datetime property)": [[28, "arkouda.Datetime.day"], [28, "id800"], [28, "id969"]], "day_of_week (arkouda.datetime property)": [[28, "arkouda.Datetime.day_of_week"], [28, "id805"], [28, "id974"]], "day_of_year (arkouda.datetime property)": [[28, "arkouda.Datetime.day_of_year"], [28, "id803"], [28, "id972"]], "dayofweek (arkouda.datetime property)": [[28, "arkouda.Datetime.dayofweek"], [28, "id806"], [28, "id975"]], "dayofyear (arkouda.datetime property)": [[28, "arkouda.Datetime.dayofyear"], [28, "id804"], [28, "id973"]], "days (arkouda.timedelta property)": [[28, "arkouda.Timedelta.days"], [28, "id830"]], "decode() (arkouda.strings method)": [[28, "arkouda.Strings.decode"], [28, "id131"], [28, "id383"], [28, "id691"], [28, "id913"]], "deg2rad() (in module arkouda)": [[28, "arkouda.deg2rad"]], "diff() (arkouda.series method)": [[28, "arkouda.Series.diff"]], "disableverbose() (in module arkouda)": [[28, "arkouda.disableVerbose"]], "divmod() (in module arkouda)": [[28, "arkouda.divmod"]], "drop() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.drop"], [28, "id752"]], "drop_duplicates() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.drop_duplicates"], [28, "id753"]], "dropna (arkouda.groupby attribute)": [[28, "arkouda.GroupBy.dropna"], [28, "id260"], [28, "id446"], [28, "id567"], [28, "id78"], [28, "id861"], [85, "arkouda.GroupBy.dropna"]], "dt (arkouda.series attribute)": [[28, "arkouda.Series.dt"]], "dtype (arkouda.arrayview attribute)": [[28, "arkouda.ArrayView.dtype"], [81, "arkouda.ArrayView.dtype"]], "dtype (arkouda.strings attribute)": [[28, "arkouda.Strings.dtype"], [28, "id121"], [28, "id373"], [28, "id681"], [28, "id903"]], "dtype (arkouda.pdarray attribute)": [[28, "arkouda.pdarray.dtype"], [28, "id189"], [28, "id304"], [28, "id487"], [28, "id608"], [28, "id7"], [88, "arkouda.pdarray.dtype"]], "dtype() (in module arkouda)": [[28, "arkouda.dtype"]], "dtypes (arkouda.dataframe property)": [[28, "arkouda.DataFrame.dtypes"], [28, "id742"]], "empty (arkouda.dataframe property)": [[28, "arkouda.DataFrame.empty"], [28, "id743"]], "enableverbose() (in module arkouda)": [[28, "arkouda.enableVerbose"]], "encode() (arkouda.strings method)": [[28, "arkouda.Strings.encode"], [28, "id130"], [28, "id382"], [28, "id690"], [28, "id912"]], "endswith() (arkouda.strings method)": [[28, "arkouda.Strings.endswith"], [28, "id154"], [28, "id406"], [28, "id714"], [28, "id936"], [93, "arkouda.Strings.endswith"]], "entry (arkouda.strings attribute)": [[28, "arkouda.Strings.entry"], [28, "id116"], [28, "id368"], [28, "id676"], [28, "id898"]], "exp() (in module arkouda)": [[28, "arkouda.exp"], [80, "arkouda.exp"]], "expm1() (in module arkouda)": [[28, "arkouda.expm1"]], "export() (in module arkouda)": [[28, "arkouda.export"], [77, "arkouda.export"]], "export_uint() (arkouda.ipv4 method)": [[28, "arkouda.IPv4.export_uint"]], "factory() (arkouda.index static method)": [[28, "arkouda.Index.factory"]], "fill() (arkouda.pdarray method)": [[28, "arkouda.pdarray.fill"], [28, "id19"], [28, "id201"], [28, "id316"], [28, "id499"], [28, "id620"]], "filter() (arkouda.segarray method)": [[28, "arkouda.SegArray.filter"]], "filter_by_range() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.filter_by_range"], [28, "id781"]], "find() (in module arkouda)": [[28, "arkouda.find"]], "find_locations() (arkouda.strings method)": [[28, "arkouda.Strings.find_locations"], [28, "id144"], [28, "id396"], [28, "id704"], [28, "id926"], [93, "arkouda.Strings.find_locations"]], "findall() (arkouda.strings method)": [[28, "arkouda.Strings.findall"], [28, "id149"], [28, "id401"], [28, "id709"], [28, "id931"], [93, "arkouda.Strings.findall"]], "first() (arkouda.groupby method)": [[28, "arkouda.GroupBy.first"], [28, "id103"], [28, "id285"], [28, "id471"], [28, "id592"], [28, "id886"], [85, "arkouda.GroupBy.first"]], "flatten() (arkouda.strings method)": [[28, "arkouda.Strings.flatten"], [28, "id155"], [28, "id407"], [28, "id715"], [28, "id937"], [93, "arkouda.Strings.flatten"]], "float32 (in module arkouda)": [[28, "arkouda.float32"]], "float64 (in module arkouda)": [[28, "arkouda.float64"]], "float_scalars (in module arkouda)": [[28, "arkouda.float_scalars"]], "floor() (in module arkouda)": [[28, "arkouda.floor"]], "fmod() (in module arkouda)": [[28, "arkouda.fmod"]], "format() (arkouda.bitvector method)": [[28, "arkouda.BitVector.format"]], "format() (arkouda.fields method)": [[28, "arkouda.Fields.format"]], "format() (arkouda.ipv4 method)": [[28, "arkouda.IPv4.format"]], "format_other() (arkouda.pdarray method)": [[28, "arkouda.pdarray.format_other"], [28, "id16"], [28, "id198"], [28, "id313"], [28, "id496"], [28, "id617"]], "from_multi_array() (arkouda.segarray class method)": [[28, "arkouda.SegArray.from_multi_array"]], "from_pandas() (arkouda.dataframe class method)": [[28, "arkouda.DataFrame.from_pandas"], [28, "id751"]], "from_parts() (arkouda.segarray class method)": [[28, "arkouda.SegArray.from_parts"]], "from_parts() (arkouda.strings static method)": [[28, "arkouda.Strings.from_parts"], [28, "id126"], [28, "id378"], [28, "id686"], [28, "id908"]], "from_return_msg() (arkouda.bitvector class method)": [[28, "arkouda.BitVector.from_return_msg"]], "from_return_msg() (arkouda.dataframe class method)": [[28, "arkouda.DataFrame.from_return_msg"], [28, "id792"]], "from_return_msg() (arkouda.groupby static method)": [[28, "arkouda.GroupBy.from_return_msg"], [28, "id263"], [28, "id449"], [28, "id570"], [28, "id81"], [28, "id864"]], "from_return_msg() (arkouda.index class method)": [[28, "arkouda.Index.from_return_msg"]], "from_return_msg() (arkouda.segarray class method)": [[28, "arkouda.SegArray.from_return_msg"]], "from_return_msg() (arkouda.series class method)": [[28, "arkouda.Series.from_return_msg"]], "from_return_msg() (arkouda.strings static method)": [[28, "arkouda.Strings.from_return_msg"], [28, "id125"], [28, "id377"], [28, "id685"], [28, "id907"]], "from_series() (in module arkouda)": [[28, "arkouda.from_series"], [28, "id247"]], "full() (in module arkouda)": [[28, "arkouda.full"], [28, "id667"]], "full_like() (in module arkouda)": [[28, "arkouda.full_like"]], "fullmatch() (arkouda.strings method)": [[28, "arkouda.Strings.fullmatch"], [28, "id147"], [28, "id399"], [28, "id707"], [28, "id929"], [93, "arkouda.Strings.fullmatch"]], "gen_ranges() (in module arkouda)": [[28, "arkouda.gen_ranges"], [28, "id297"]], "getarkoudalogger() (in module arkouda)": [[28, "arkouda.getArkoudaLogger"]], "get_byteorder() (in module arkouda)": [[28, "arkouda.get_byteorder"]], "get_bytes() (arkouda.strings method)": [[28, "arkouda.Strings.get_bytes"], [28, "id128"], [28, "id380"], [28, "id688"], [28, "id910"]], "get_columns() (in module arkouda)": [[28, "arkouda.get_columns"]], "get_datasets() (in module arkouda)": [[28, "arkouda.get_datasets"], [77, "arkouda.get_datasets"]], "get_filetype() (in module arkouda)": [[28, "arkouda.get_filetype"]], "get_jth() (arkouda.segarray method)": [[28, "arkouda.SegArray.get_jth"]], "get_length_n() (arkouda.segarray method)": [[28, "arkouda.SegArray.get_length_n"]], "get_lengths() (arkouda.strings method)": [[28, "arkouda.Strings.get_lengths"], [28, "id127"], [28, "id379"], [28, "id687"], [28, "id909"]], "get_ngrams() (arkouda.segarray method)": [[28, "arkouda.SegArray.get_ngrams"]], "get_null_indices() (in module arkouda)": [[28, "arkouda.get_null_indices"]], "get_offsets() (arkouda.strings method)": [[28, "arkouda.Strings.get_offsets"], [28, "id129"], [28, "id381"], [28, "id689"], [28, "id911"]], "get_prefixes() (arkouda.segarray method)": [[28, "arkouda.SegArray.get_prefixes"]], "get_prefixes() (arkouda.strings method)": [[28, "arkouda.Strings.get_prefixes"], [28, "id160"], [28, "id412"], [28, "id720"], [28, "id942"]], "get_server_byteorder() (in module arkouda)": [[28, "arkouda.get_server_byteorder"]], "get_suffixes() (arkouda.segarray method)": [[28, "arkouda.SegArray.get_suffixes"]], "get_suffixes() (arkouda.strings method)": [[28, "arkouda.Strings.get_suffixes"], [28, "id161"], [28, "id413"], [28, "id721"], [28, "id943"]], "group() (arkouda.strings method)": [[28, "arkouda.Strings.group"], [28, "id163"], [28, "id415"], [28, "id723"], [28, "id945"]], "grouping (arkouda.segarray property)": [[28, "arkouda.SegArray.grouping"]], "has_repeat_labels() (arkouda.series method)": [[28, "arkouda.Series.has_repeat_labels"]], "hash() (arkouda.segarray method)": [[28, "arkouda.SegArray.hash"]], "hash() (arkouda.strings method)": [[28, "arkouda.Strings.hash"], [28, "id162"], [28, "id414"], [28, "id722"], [28, "id944"]], "hash() (in module arkouda)": [[28, "arkouda.hash"]], "head() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.head"], [28, "id759"]], "head() (arkouda.series method)": [[28, "arkouda.Series.head"]], "hist_all() (in module arkouda)": [[28, "arkouda.hist_all"]], "histogram() (in module arkouda)": [[28, "arkouda.histogram"], [28, "id851"], [86, "arkouda.histogram"]], "histogram2d() (in module arkouda)": [[28, "arkouda.histogram2d"]], "histogramdd() (in module arkouda)": [[28, "arkouda.histogramdd"]], "hour (arkouda.datetime property)": [[28, "arkouda.Datetime.hour"], [28, "id799"], [28, "id968"]], "iat (arkouda.series property)": [[28, "arkouda.Series.iat"]], "ignore (arkouda.errormode attribute)": [[28, "arkouda.ErrorMode.ignore"]], "iloc (arkouda.series property)": [[28, "arkouda.Series.iloc"]], "import_data() (in module arkouda)": [[28, "arkouda.import_data"], [77, "arkouda.import_data"]], "in1d() (in module arkouda)": [[28, "arkouda.in1d"], [28, "id550"], [28, "id671"], [91, "arkouda.in1d"]], "in1d_intervals() (in module arkouda)": [[28, "arkouda.in1d_intervals"]], "index (arkouda.dataframe property)": [[28, "arkouda.DataFrame.index"], [28, "id746"]], "index (arkouda.index property)": [[28, "arkouda.Index.index"]], "index (arkouda.multiindex property)": [[28, "arkouda.MultiIndex.index"]], "indexof1d() (in module arkouda)": [[28, "arkouda.indexof1d"]], "info (arkouda.dataframe property)": [[28, "arkouda.DataFrame.info"], [28, "id747"]], "info() (arkouda.strings method)": [[28, "arkouda.Strings.info"], [28, "id172"], [28, "id424"], [28, "id732"], [28, "id954"]], "info() (arkouda.pdarray method)": [[28, "arkouda.pdarray.info"], [28, "id205"], [28, "id23"], [28, "id320"], [28, "id503"], [28, "id624"]], "information() (in module arkouda)": [[28, "arkouda.information"]], "int16 (in module arkouda)": [[28, "arkouda.int16"]], "int32 (in module arkouda)": [[28, "arkouda.int32"]], "int64 (in module arkouda)": [[28, "arkouda.int64"], [28, "id180"]], "int8 (in module arkouda)": [[28, "arkouda.int8"]], "inttypes (in module arkouda)": [[28, "arkouda.intTypes"], [28, "id182"], [28, "id3"]], "int_scalars (in module arkouda)": [[28, "arkouda.int_scalars"], [28, "id181"], [28, "id248"]], "intersect() (arkouda.segarray method)": [[28, "arkouda.SegArray.intersect"]], "intersect() (in module arkouda)": [[28, "arkouda.intersect"]], "intersect1d() (in module arkouda)": [[28, "arkouda.intersect1d"], [91, "arkouda.intersect1d"]], "interval_lookup() (in module arkouda)": [[28, "arkouda.interval_lookup"]], "intx() (in module arkouda)": [[28, "arkouda.intx"]], "invert_permutation() (in module arkouda)": [[28, "arkouda.invert_permutation"]], "ip_address() (in module arkouda)": [[28, "arkouda.ip_address"]], "issupportedint() (in module arkouda)": [[28, "arkouda.isSupportedInt"], [28, "id183"], [28, "id249"]], "issupportednumber() (in module arkouda)": [[28, "arkouda.isSupportedNumber"]], "is_cosorted() (in module arkouda)": [[28, "arkouda.is_cosorted"]], "is_ipv4() (in module arkouda)": [[28, "arkouda.is_ipv4"]], "is_ipv6() (in module arkouda)": [[28, "arkouda.is_ipv6"]], "is_leap_year (arkouda.datetime property)": [[28, "arkouda.Datetime.is_leap_year"], [28, "id811"], [28, "id980"]], "is_registered() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.is_registered"], [28, "id789"]], "is_registered() (arkouda.datetime method)": [[28, "arkouda.Datetime.is_registered"], [28, "id825"], [28, "id994"]], "is_registered() (arkouda.groupby method)": [[28, "arkouda.GroupBy.is_registered"], [28, "id110"], [28, "id292"], [28, "id478"], [28, "id599"], [28, "id893"], [85, "arkouda.GroupBy.is_registered"]], "is_registered() (arkouda.index method)": [[28, "arkouda.Index.is_registered"]], "is_registered() (arkouda.multiindex method)": [[28, "arkouda.MultiIndex.is_registered"]], "is_registered() (arkouda.segarray method)": [[28, "arkouda.SegArray.is_registered"]], "is_registered() (arkouda.series method)": [[28, "arkouda.Series.is_registered"]], "is_registered() (arkouda.strings method)": [[28, "arkouda.Strings.is_registered"], [28, "id176"], [28, "id428"], [28, "id736"], [28, "id958"]], "is_registered() (arkouda.timedelta method)": [[28, "arkouda.Timedelta.is_registered"], [28, "id847"]], "is_registered() (arkouda.pdarray method)": [[28, "arkouda.pdarray.is_registered"], [28, "id204"], [28, "id22"], [28, "id319"], [28, "id502"], [28, "id623"]], "is_sorted() (arkouda.pdarray method)": [[28, "arkouda.pdarray.is_sorted"], [28, "id207"], [28, "id25"], [28, "id322"], [28, "id505"], [28, "id626"], [86, "arkouda.pdarray.is_sorted"]], "is_sorted() (in module arkouda)": [[28, "arkouda.is_sorted"], [28, "id301"], [80, "arkouda.is_sorted"]], "is_unique (arkouda.index property)": [[28, "arkouda.Index.is_unique"]], "isalnum() (arkouda.strings method)": [[28, "arkouda.Strings.isalnum"], [28, "id138"], [28, "id390"], [28, "id698"], [28, "id920"]], "isalpha() (arkouda.strings method)": [[28, "arkouda.Strings.isalpha"], [28, "id139"], [28, "id391"], [28, "id699"], [28, "id921"]], "isdigit() (arkouda.strings method)": [[28, "arkouda.Strings.isdigit"], [28, "id140"], [28, "id392"], [28, "id700"], [28, "id922"]], "isfinite() (in module arkouda)": [[28, "arkouda.isfinite"]], "isin() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.isin"], [28, "id784"]], "isin() (arkouda.series method)": [[28, "arkouda.Series.isin"]], "isinf() (in module arkouda)": [[28, "arkouda.isinf"]], "islower() (arkouda.strings method)": [[28, "arkouda.Strings.islower"], [28, "id135"], [28, "id387"], [28, "id695"], [28, "id917"]], "isnan() (in module arkouda)": [[28, "arkouda.isnan"], [28, "id852"]], "isocalendar() (arkouda.datetime method)": [[28, "arkouda.Datetime.isocalendar"], [28, "id820"], [28, "id989"]], "istitle() (arkouda.strings method)": [[28, "arkouda.Strings.istitle"], [28, "id137"], [28, "id389"], [28, "id697"], [28, "id919"]], "isupper() (arkouda.strings method)": [[28, "arkouda.Strings.isupper"], [28, "id136"], [28, "id388"], [28, "id696"], [28, "id918"]], "itemsize (arkouda.arrayview attribute)": [[28, "arkouda.ArrayView.itemsize"], [81, "arkouda.ArrayView.itemsize"]], "itemsize (arkouda.pdarray attribute)": [[28, "arkouda.pdarray.itemsize"], [28, "id11"], [28, "id193"], [28, "id308"], [28, "id491"], [28, "id612"], [88, "arkouda.pdarray.itemsize"]], "join_on_eq_with_dt() (in module arkouda)": [[28, "arkouda.join_on_eq_with_dt"]], "left_align() (in module arkouda)": [[28, "arkouda.left_align"]], "linspace() (in module arkouda)": [[28, "arkouda.linspace"], [83, "arkouda.linspace"]], "list_registry() (in module arkouda)": [[28, "arkouda.list_registry"]], "list_symbol_table() (in module arkouda)": [[28, "arkouda.list_symbol_table"]], "load() (arkouda.dataframe class method)": [[28, "arkouda.DataFrame.load"], [28, "id775"]], "load() (arkouda.segarray class method)": [[28, "arkouda.SegArray.load"]], "load() (in module arkouda)": [[28, "arkouda.load"]], "load_all() (in module arkouda)": [[28, "arkouda.load_all"]], "loc (arkouda.series property)": [[28, "arkouda.Series.loc"]], "locate() (arkouda.series method)": [[28, "arkouda.Series.locate"]], "log() (in module arkouda)": [[28, "arkouda.log"], [80, "arkouda.log"]], "log10() (in module arkouda)": [[28, "arkouda.log10"]], "log1p() (in module arkouda)": [[28, "arkouda.log1p"]], "log2() (in module arkouda)": [[28, "arkouda.log2"]], "logger (arkouda.groupby attribute)": [[28, "arkouda.GroupBy.logger"], [28, "id259"], [28, "id445"], [28, "id566"], [28, "id77"], [28, "id860"], [85, "arkouda.GroupBy.logger"]], "logger (arkouda.strings attribute)": [[28, "arkouda.Strings.logger"], [28, "id122"], [28, "id374"], [28, "id682"], [28, "id904"]], "lookup() (arkouda.index method)": [[28, "arkouda.Index.lookup"]], "lookup() (arkouda.multiindex method)": [[28, "arkouda.MultiIndex.lookup"]], "lookup() (in module arkouda)": [[28, "arkouda.lookup"]], "lower() (arkouda.strings method)": [[28, "arkouda.Strings.lower"], [28, "id132"], [28, "id384"], [28, "id692"], [28, "id914"]], "ls() (in module arkouda)": [[28, "arkouda.ls"]], "ls_csv() (in module arkouda)": [[28, "arkouda.ls_csv"]], "lstick() (arkouda.strings method)": [[28, "arkouda.Strings.lstick"], [28, "id159"], [28, "id411"], [28, "id719"], [28, "id941"], [93, "arkouda.Strings.lstick"]], "match() (arkouda.strings method)": [[28, "arkouda.Strings.match"], [28, "id146"], [28, "id398"], [28, "id706"], [28, "id928"], [93, "arkouda.Strings.match"]], "max() (arkouda.groupby method)": [[28, "arkouda.GroupBy.max"], [28, "id276"], [28, "id462"], [28, "id583"], [28, "id877"], [28, "id94"], [85, "arkouda.GroupBy.max"]], "max() (arkouda.segarray method)": [[28, "arkouda.SegArray.max"]], "max() (arkouda.pdarray method)": [[28, "arkouda.pdarray.max"], [28, "id211"], [28, "id29"], [28, "id326"], [28, "id509"], [28, "id630"], [86, "arkouda.pdarray.max"]], "max() (in module arkouda)": [[28, "arkouda.max"], [80, "arkouda.max"]], "max_bits (arkouda.pdarray property)": [[28, "arkouda.pdarray.max_bits"], [28, "id12"], [28, "id194"], [28, "id309"], [28, "id492"], [28, "id613"]], "maxk() (arkouda.pdarray method)": [[28, "arkouda.pdarray.maxk"], [28, "id220"], [28, "id335"], [28, "id38"], [28, "id518"], [28, "id639"], [86, "arkouda.pdarray.maxk"]], "maxk() (in module arkouda)": [[28, "arkouda.maxk"], [80, "arkouda.maxk"]], "mean() (arkouda.groupby method)": [[28, "arkouda.GroupBy.mean"], [28, "id273"], [28, "id459"], [28, "id580"], [28, "id874"], [28, "id91"], [85, "arkouda.GroupBy.mean"]], "mean() (arkouda.segarray method)": [[28, "arkouda.SegArray.mean"]], "mean() (arkouda.pdarray method)": [[28, "arkouda.pdarray.mean"], [28, "id214"], [28, "id32"], [28, "id329"], [28, "id512"], [28, "id633"], [86, "arkouda.pdarray.mean"]], "mean() (in module arkouda)": [[28, "arkouda.mean"], [80, "arkouda.mean"]], "median() (arkouda.groupby method)": [[28, "arkouda.GroupBy.median"], [28, "id274"], [28, "id460"], [28, "id581"], [28, "id875"], [28, "id92"], [85, "arkouda.GroupBy.median"]], "memory_usage() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.memory_usage"], [28, "id763"]], "merge() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.merge"], [28, "id786"]], "merge() (in module arkouda)": [[28, "arkouda.merge"]], "microsecond (arkouda.datetime property)": [[28, "arkouda.Datetime.microsecond"], [28, "id795"], [28, "id964"]], "microseconds (arkouda.timedelta property)": [[28, "arkouda.Timedelta.microseconds"], [28, "id828"]], "millisecond (arkouda.datetime property)": [[28, "arkouda.Datetime.millisecond"], [28, "id796"], [28, "id965"]], "min() (arkouda.groupby method)": [[28, "arkouda.GroupBy.min"], [28, "id275"], [28, "id461"], [28, "id582"], [28, "id876"], [28, "id93"], [85, "arkouda.GroupBy.min"]], "min() (arkouda.segarray method)": [[28, "arkouda.SegArray.min"]], "min() (arkouda.pdarray method)": [[28, "arkouda.pdarray.min"], [28, "id210"], [28, "id28"], [28, "id325"], [28, "id508"], [28, "id629"], [86, "arkouda.pdarray.min"]], "min() (in module arkouda)": [[28, "arkouda.min"], [80, "arkouda.min"]], "mink() (arkouda.pdarray method)": [[28, "arkouda.pdarray.mink"], [28, "id219"], [28, "id334"], [28, "id37"], [28, "id517"], [28, "id638"], [86, "arkouda.pdarray.mink"]], "mink() (in module arkouda)": [[28, "arkouda.mink"], [80, "arkouda.mink"]], "minute (arkouda.datetime property)": [[28, "arkouda.Datetime.minute"], [28, "id798"], [28, "id967"]], "mod() (in module arkouda)": [[28, "arkouda.mod"]], "mode() (arkouda.groupby method)": [[28, "arkouda.GroupBy.mode"], [28, "id104"], [28, "id286"], [28, "id472"], [28, "id593"], [28, "id887"], [85, "arkouda.GroupBy.mode"]], "month (arkouda.datetime property)": [[28, "arkouda.Datetime.month"], [28, "id801"], [28, "id970"]], "most_common() (arkouda.groupby method)": [[28, "arkouda.GroupBy.most_common"], [28, "id113"], [28, "id295"], [28, "id481"], [28, "id602"], [28, "id896"], [85, "arkouda.GroupBy.most_common"]], "name (arkouda.pdarray attribute)": [[28, "arkouda.pdarray.name"], [28, "id188"], [28, "id303"], [28, "id486"], [28, "id6"], [28, "id607"], [88, "arkouda.pdarray.name"]], "nanosecond (arkouda.datetime property)": [[28, "arkouda.Datetime.nanosecond"], [28, "id794"], [28, "id963"]], "nanoseconds (arkouda.timedelta property)": [[28, "arkouda.Timedelta.nanoseconds"], [28, "id827"]], "nbytes (arkouda.strings attribute)": [[28, "arkouda.Strings.nbytes"], [28, "id118"], [28, "id370"], [28, "id678"], [28, "id900"]], "ndim (arkouda.arrayview attribute)": [[28, "arkouda.ArrayView.ndim"], [81, "arkouda.ArrayView.ndim"]], "ndim (arkouda.strings attribute)": [[28, "arkouda.Strings.ndim"], [28, "id119"], [28, "id371"], [28, "id679"], [28, "id901"]], "ndim (arkouda.pdarray attribute)": [[28, "arkouda.pdarray.ndim"], [28, "id191"], [28, "id306"], [28, "id489"], [28, "id610"], [28, "id9"], [88, "arkouda.pdarray.ndim"]], "ngroups (arkouda.groupby attribute)": [[28, "arkouda.GroupBy.ngroups"], [28, "id257"], [28, "id443"], [28, "id564"], [28, "id75"], [28, "id858"], [85, "arkouda.GroupBy.ngroups"]], "nkeys (arkouda.groupby attribute)": [[28, "arkouda.GroupBy.nkeys"], [28, "id253"], [28, "id439"], [28, "id560"], [28, "id71"], [28, "id854"], [85, "arkouda.GroupBy.nkeys"]], "non_empty (arkouda.segarray property)": [[28, "arkouda.SegArray.non_empty"]], "normalize() (arkouda.ipv4 method)": [[28, "arkouda.IPv4.normalize"]], "numeric_scalars (in module arkouda)": [[28, "arkouda.numeric_scalars"]], "numpy_scalars (in module arkouda)": [[28, "arkouda.numpy_scalars"]], "nunique() (arkouda.groupby method)": [[28, "arkouda.GroupBy.nunique"], [28, "id279"], [28, "id465"], [28, "id586"], [28, "id880"], [28, "id97"], [85, "arkouda.GroupBy.nunique"]], "nunique() (arkouda.segarray method)": [[28, "arkouda.SegArray.nunique"]], "objtype (arkouda.arrayview attribute)": [[28, "arkouda.ArrayView.objType"]], "objtype (arkouda.dataframe attribute)": [[28, "arkouda.DataFrame.objType"], [28, "id749"]], "objtype (arkouda.groupby attribute)": [[28, "arkouda.GroupBy.objType"], [28, "id262"], [28, "id448"], [28, "id569"], [28, "id80"], [28, "id863"]], "objtype (arkouda.index attribute)": [[28, "arkouda.Index.objType"]], "objtype (arkouda.multiindex attribute)": [[28, "arkouda.MultiIndex.objType"]], "objtype (arkouda.segarray attribute)": [[28, "arkouda.SegArray.objType"]], "objtype (arkouda.series attribute)": [[28, "arkouda.Series.objType"]], "objtype (arkouda.strings attribute)": [[28, "arkouda.Strings.objType"], [28, "id124"], [28, "id376"], [28, "id684"], [28, "id906"]], "objtype (arkouda.pdarray attribute)": [[28, "arkouda.pdarray.objType"], [28, "id15"], [28, "id197"], [28, "id312"], [28, "id495"], [28, "id616"]], "ones() (in module arkouda)": [[28, "arkouda.ones"], [28, "id364"], [28, "id548"], [28, "id668"], [83, "arkouda.ones"]], "ones_like() (in module arkouda)": [[28, "arkouda.ones_like"], [83, "arkouda.ones_like"]], "opeq() (arkouda.bitvector method)": [[28, "arkouda.BitVector.opeq"]], "opeq() (arkouda.fields method)": [[28, "arkouda.Fields.opeq"]], "opeq() (arkouda.ipv4 method)": [[28, "arkouda.IPv4.opeq"]], "opeq() (arkouda.pdarray method)": [[28, "arkouda.pdarray.opeq"], [28, "id18"], [28, "id200"], [28, "id315"], [28, "id498"], [28, "id619"]], "order (arkouda.arrayview attribute)": [[28, "arkouda.ArrayView.order"], [81, "arkouda.ArrayView.order"]], "parity() (arkouda.pdarray method)": [[28, "arkouda.pdarray.parity"], [28, "id224"], [28, "id339"], [28, "id42"], [28, "id522"], [28, "id643"]], "parity() (in module arkouda)": [[28, "arkouda.parity"]], "pdarray (class in arkouda)": [[28, "arkouda.pdarray"], [28, "id187"], [28, "id302"], [28, "id485"], [28, "id5"], [28, "id606"], [88, "arkouda.pdarray"]], "pdconcat() (arkouda.series static method)": [[28, "arkouda.Series.pdconcat"]], "peel() (arkouda.strings method)": [[28, "arkouda.Strings.peel"], [28, "id156"], [28, "id408"], [28, "id716"], [28, "id938"], [93, "arkouda.Strings.peel"]], "permutation (arkouda.groupby attribute)": [[28, "arkouda.GroupBy.permutation"], [28, "id255"], [28, "id441"], [28, "id562"], [28, "id73"], [28, "id856"], [85, "arkouda.GroupBy.permutation"]], "plot_dist() (in module arkouda)": [[28, "arkouda.plot_dist"]], "popcount() (arkouda.pdarray method)": [[28, "arkouda.pdarray.popcount"], [28, "id223"], [28, "id338"], [28, "id41"], [28, "id521"], [28, "id642"]], "popcount() (in module arkouda)": [[28, "arkouda.popcount"]], "power() (in module arkouda)": [[28, "arkouda.power"]], "prepend_single() (arkouda.segarray method)": [[28, "arkouda.SegArray.prepend_single"]], "pretty_print_info() (arkouda.strings method)": [[28, "arkouda.Strings.pretty_print_info"], [28, "id173"], [28, "id425"], [28, "id733"], [28, "id955"]], "pretty_print_info() (arkouda.pdarray method)": [[28, "arkouda.pdarray.pretty_print_info"], [28, "id206"], [28, "id24"], [28, "id321"], [28, "id504"], [28, "id625"]], "pretty_print_information() (in module arkouda)": [[28, "arkouda.pretty_print_information"]], "prod() (arkouda.groupby method)": [[28, "arkouda.GroupBy.prod"], [28, "id270"], [28, "id456"], [28, "id577"], [28, "id871"], [28, "id88"], [85, "arkouda.GroupBy.prod"]], "prod() (arkouda.segarray method)": [[28, "arkouda.SegArray.prod"]], "prod() (arkouda.pdarray method)": [[28, "arkouda.pdarray.prod"], [28, "id209"], [28, "id27"], [28, "id324"], [28, "id507"], [28, "id628"], [86, "arkouda.pdarray.prod"]], "prod() (in module arkouda)": [[28, "arkouda.prod"], [80, "arkouda.prod"]], "purge_cached_regex_patterns() (arkouda.strings method)": [[28, "arkouda.Strings.purge_cached_regex_patterns"], [28, "id143"], [28, "id395"], [28, "id703"], [28, "id925"]], "rad2deg() (in module arkouda)": [[28, "arkouda.rad2deg"]], "randint() (in module arkouda)": [[28, "arkouda.randint"], [83, "arkouda.randint"]], "random_strings_lognormal() (in module arkouda)": [[28, "arkouda.random_strings_lognormal"]], "random_strings_uniform() (in module arkouda)": [[28, "arkouda.random_strings_uniform"]], "read() (in module arkouda)": [[28, "arkouda.read"], [77, "arkouda.read"]], "read_csv() (arkouda.dataframe class method)": [[28, "arkouda.DataFrame.read_csv"], [28, "id771"]], "read_csv() (in module arkouda)": [[28, "arkouda.read_csv"]], "read_hdf() (arkouda.segarray class method)": [[28, "arkouda.SegArray.read_hdf"]], "read_hdf() (in module arkouda)": [[28, "arkouda.read_hdf"]], "read_parquet() (in module arkouda)": [[28, "arkouda.read_parquet"]], "read_tagged_data() (in module arkouda)": [[28, "arkouda.read_tagged_data"]], "receive() (in module arkouda)": [[28, "arkouda.receive"]], "receive_dataframe() (in module arkouda)": [[28, "arkouda.receive_dataframe"]], "register() (arkouda.bitvector method)": [[28, "arkouda.BitVector.register"]], "register() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.register"], [28, "id787"]], "register() (arkouda.datetime method)": [[28, "arkouda.Datetime.register"], [28, "id823"], [28, "id992"]], "register() (arkouda.groupby method)": [[28, "arkouda.GroupBy.register"], [28, "id108"], [28, "id290"], [28, "id476"], [28, "id597"], [28, "id891"], [85, "arkouda.GroupBy.register"]], "register() (arkouda.ipv4 method)": [[28, "arkouda.IPv4.register"]], "register() (arkouda.index method)": [[28, "arkouda.Index.register"]], "register() (arkouda.multiindex method)": [[28, "arkouda.MultiIndex.register"]], "register() (arkouda.segarray method)": [[28, "arkouda.SegArray.register"]], "register() (arkouda.series method)": [[28, "arkouda.Series.register"]], "register() (arkouda.strings method)": [[28, "arkouda.Strings.register"], [28, "id174"], [28, "id426"], [28, "id734"], [28, "id956"]], "register() (arkouda.timedelta method)": [[28, "arkouda.Timedelta.register"], [28, "id845"]], "register() (arkouda.pdarray method)": [[28, "arkouda.pdarray.register"], [28, "id244"], [28, "id359"], [28, "id542"], [28, "id62"], [28, "id663"]], "remove_repeats() (arkouda.segarray method)": [[28, "arkouda.SegArray.remove_repeats"]], "rename() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.rename"], [28, "id756"]], "reset_index() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.reset_index"], [28, "id754"]], "reshape() (arkouda.pdarray method)": [[28, "arkouda.pdarray.reshape"], [28, "id233"], [28, "id348"], [28, "id51"], [28, "id531"], [28, "id652"]], "resolve_scalar_dtype() (in module arkouda)": [[28, "arkouda.resolve_scalar_dtype"]], "restore() (in module arkouda)": [[28, "arkouda.restore"]], "return_validity (arkouda.errormode attribute)": [[28, "arkouda.ErrorMode.return_validity"]], "right_align() (in module arkouda)": [[28, "arkouda.right_align"]], "rotl() (arkouda.pdarray method)": [[28, "arkouda.pdarray.rotl"], [28, "id227"], [28, "id342"], [28, "id45"], [28, "id525"], [28, "id646"]], "rotl() (in module arkouda)": [[28, "arkouda.rotl"]], "rotr() (arkouda.pdarray method)": [[28, "arkouda.pdarray.rotr"], [28, "id228"], [28, "id343"], [28, "id46"], [28, "id526"], [28, "id647"]], "rotr() (in module arkouda)": [[28, "arkouda.rotr"]], "round() (in module arkouda)": [[28, "arkouda.round"]], "rpeel() (arkouda.strings method)": [[28, "arkouda.Strings.rpeel"], [28, "id157"], [28, "id409"], [28, "id717"], [28, "id939"], [93, "arkouda.Strings.rpeel"]], "sample() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.sample"], [28, "id761"]], "save() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.save"], [28, "id774"]], "save() (arkouda.index method)": [[28, "arkouda.Index.save"]], "save() (arkouda.segarray method)": [[28, "arkouda.SegArray.save"]], "save() (arkouda.strings method)": [[28, "arkouda.Strings.save"], [28, "id171"], [28, "id423"], [28, "id731"], [28, "id953"]], "save() (arkouda.pdarray method)": [[28, "arkouda.pdarray.save"], [28, "id243"], [28, "id358"], [28, "id541"], [28, "id61"], [28, "id662"]], "save_all() (in module arkouda)": [[28, "arkouda.save_all"]], "search() (arkouda.strings method)": [[28, "arkouda.Strings.search"], [28, "id145"], [28, "id397"], [28, "id705"], [28, "id927"], [93, "arkouda.Strings.search"]], "search_intervals() (in module arkouda)": [[28, "arkouda.search_intervals"]], "second (arkouda.datetime property)": [[28, "arkouda.Datetime.second"], [28, "id797"], [28, "id966"]], "seconds (arkouda.timedelta property)": [[28, "arkouda.Timedelta.seconds"], [28, "id829"]], "segarray() (in module arkouda)": [[28, "arkouda.segarray"]], "segments (arkouda.groupby attribute)": [[28, "arkouda.GroupBy.segments"], [28, "id258"], [28, "id444"], [28, "id565"], [28, "id76"], [28, "id859"], [85, "arkouda.GroupBy.segments"]], "set_dtype() (arkouda.index method)": [[28, "arkouda.Index.set_dtype"]], "set_dtype() (arkouda.multiindex method)": [[28, "arkouda.MultiIndex.set_dtype"]], "set_jth() (arkouda.segarray method)": [[28, "arkouda.SegArray.set_jth"]], "setdiff() (arkouda.segarray method)": [[28, "arkouda.SegArray.setdiff"]], "setdiff1d() (in module arkouda)": [[28, "arkouda.setdiff1d"], [91, "arkouda.setdiff1d"]], "setxor() (arkouda.segarray method)": [[28, "arkouda.SegArray.setxor"]], "setxor1d() (in module arkouda)": [[28, "arkouda.setxor1d"], [91, "arkouda.setxor1d"]], "shape (arkouda.arrayview attribute)": [[28, "arkouda.ArrayView.shape"], [81, "arkouda.ArrayView.shape"]], "shape (arkouda.dataframe property)": [[28, "arkouda.DataFrame.shape"], [28, "id744"]], "shape (arkouda.index property)": [[28, "arkouda.Index.shape"]], "shape (arkouda.series property)": [[28, "arkouda.Series.shape"]], "shape (arkouda.strings attribute)": [[28, "arkouda.Strings.shape"], [28, "id120"], [28, "id372"], [28, "id680"], [28, "id902"]], "shape (arkouda.pdarray attribute)": [[28, "arkouda.pdarray.shape"], [28, "id10"], [28, "id192"], [28, "id307"], [28, "id490"], [28, "id611"], [88, "arkouda.pdarray.shape"]], "sign() (in module arkouda)": [[28, "arkouda.sign"]], "sin() (in module arkouda)": [[28, "arkouda.sin"], [80, "arkouda.sin"]], "sinh() (in module arkouda)": [[28, "arkouda.sinh"]], "size (arkouda.arrayview attribute)": [[28, "arkouda.ArrayView.size"], [81, "arkouda.ArrayView.size"]], "size (arkouda.dataframe property)": [[28, "arkouda.DataFrame.size"], [28, "id741"]], "size (arkouda.groupby attribute)": [[28, "arkouda.GroupBy.size"], [28, "id254"], [28, "id440"], [28, "id561"], [28, "id72"], [28, "id855"], [85, "arkouda.GroupBy.size"]], "size (arkouda.strings attribute)": [[28, "arkouda.Strings.size"], [28, "id117"], [28, "id369"], [28, "id677"], [28, "id899"]], "size (arkouda.pdarray attribute)": [[28, "arkouda.pdarray.size"], [28, "id190"], [28, "id305"], [28, "id488"], [28, "id609"], [28, "id8"], [88, "arkouda.pdarray.size"]], "size() (arkouda.groupby method)": [[28, "id0"], [28, "id266"], [28, "id452"], [28, "id573"], [28, "id84"], [28, "id867"], [85, "id0"]], "skew() (in module arkouda)": [[28, "arkouda.skew"]], "slice_bits() (arkouda.pdarray method)": [[28, "arkouda.pdarray.slice_bits"], [28, "id231"], [28, "id346"], [28, "id49"], [28, "id529"], [28, "id650"]], "snapshot() (in module arkouda)": [[28, "arkouda.snapshot"]], "sort() (in module arkouda)": [[28, "arkouda.sort"]], "sort_index() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.sort_index"], [28, "id778"]], "sort_index() (arkouda.series method)": [[28, "arkouda.Series.sort_index"]], "sort_values() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.sort_values"], [28, "id779"]], "sort_values() (arkouda.series method)": [[28, "arkouda.Series.sort_values"]], "sorted() (in module arkouda)": [[28, "arkouda.sorted"]], "special_objtype (arkouda.bitvector attribute)": [[28, "arkouda.BitVector.special_objType"]], "special_objtype (arkouda.datetime attribute)": [[28, "arkouda.Datetime.special_objType"], [28, "id819"], [28, "id988"]], "special_objtype (arkouda.ipv4 attribute)": [[28, "arkouda.IPv4.special_objType"]], "special_objtype (arkouda.timedelta attribute)": [[28, "arkouda.Timedelta.special_objType"], [28, "id839"]], "split() (arkouda.strings method)": [[28, "arkouda.Strings.split"], [28, "id148"], [28, "id400"], [28, "id708"], [28, "id930"], [93, "arkouda.Strings.split"]], "sqrt() (in module arkouda)": [[28, "arkouda.sqrt"]], "square() (in module arkouda)": [[28, "arkouda.square"]], "standard_normal() (in module arkouda)": [[28, "arkouda.standard_normal"]], "startswith() (arkouda.strings method)": [[28, "arkouda.Strings.startswith"], [28, "id153"], [28, "id405"], [28, "id713"], [28, "id935"], [93, "arkouda.Strings.startswith"]], "std() (arkouda.groupby method)": [[28, "arkouda.GroupBy.std"], [28, "id272"], [28, "id458"], [28, "id579"], [28, "id873"], [28, "id90"], [85, "arkouda.GroupBy.std"]], "std() (arkouda.timedelta method)": [[28, "arkouda.Timedelta.std"], [28, "id842"]], "std() (arkouda.pdarray method)": [[28, "arkouda.pdarray.std"], [28, "id216"], [28, "id331"], [28, "id34"], [28, "id514"], [28, "id635"], [86, "arkouda.pdarray.std"]], "std() (in module arkouda)": [[28, "arkouda.std"], [80, "arkouda.std"]], "stick() (arkouda.strings method)": [[28, "arkouda.Strings.stick"], [28, "id158"], [28, "id410"], [28, "id718"], [28, "id940"], [93, "arkouda.Strings.stick"]], "str_ (in module arkouda)": [[28, "arkouda.str_"], [28, "id250"]], "str_acc (arkouda.series attribute)": [[28, "arkouda.Series.str_acc"]], "str_scalars (in module arkouda)": [[28, "arkouda.str_scalars"]], "strict (arkouda.errormode attribute)": [[28, "arkouda.ErrorMode.strict"]], "string_operators() (in module arkouda)": [[28, "arkouda.string_operators"]], "strip() (arkouda.strings method)": [[28, "arkouda.Strings.strip"], [28, "id141"], [28, "id393"], [28, "id701"], [28, "id923"]], "sub() (arkouda.strings method)": [[28, "arkouda.Strings.sub"], [28, "id150"], [28, "id402"], [28, "id710"], [28, "id932"], [93, "arkouda.Strings.sub"]], "subn() (arkouda.strings method)": [[28, "arkouda.Strings.subn"], [28, "id151"], [28, "id403"], [28, "id711"], [28, "id933"], [93, "arkouda.Strings.subn"]], "sum() (arkouda.datetime method)": [[28, "arkouda.Datetime.sum"], [28, "id822"], [28, "id991"]], "sum() (arkouda.groupby method)": [[28, "arkouda.GroupBy.sum"], [28, "id269"], [28, "id455"], [28, "id576"], [28, "id87"], [28, "id870"], [85, "arkouda.GroupBy.sum"]], "sum() (arkouda.segarray method)": [[28, "arkouda.SegArray.sum"]], "sum() (arkouda.timedelta method)": [[28, "arkouda.Timedelta.sum"], [28, "id843"]], "sum() (arkouda.pdarray method)": [[28, "arkouda.pdarray.sum"], [28, "id208"], [28, "id26"], [28, "id323"], [28, "id506"], [28, "id627"], [86, "arkouda.pdarray.sum"]], "sum() (in module arkouda)": [[28, "arkouda.sum"], [80, "arkouda.sum"]], "supported_opeq (arkouda.datetime attribute)": [[28, "arkouda.Datetime.supported_opeq"], [28, "id816"], [28, "id985"]], "supported_opeq (arkouda.timedelta attribute)": [[28, "arkouda.Timedelta.supported_opeq"], [28, "id836"]], "supported_with_datetime (arkouda.datetime attribute)": [[28, "arkouda.Datetime.supported_with_datetime"], [28, "id812"], [28, "id981"]], "supported_with_datetime (arkouda.timedelta attribute)": [[28, "arkouda.Timedelta.supported_with_datetime"], [28, "id832"]], "supported_with_pdarray (arkouda.datetime attribute)": [[28, "arkouda.Datetime.supported_with_pdarray"], [28, "id817"], [28, "id986"]], "supported_with_pdarray (arkouda.timedelta attribute)": [[28, "arkouda.Timedelta.supported_with_pdarray"], [28, "id837"]], "supported_with_r_datetime (arkouda.datetime attribute)": [[28, "arkouda.Datetime.supported_with_r_datetime"], [28, "id813"], [28, "id982"]], "supported_with_r_datetime (arkouda.timedelta attribute)": [[28, "arkouda.Timedelta.supported_with_r_datetime"], [28, "id833"]], "supported_with_r_pdarray (arkouda.datetime attribute)": [[28, "arkouda.Datetime.supported_with_r_pdarray"], [28, "id818"], [28, "id987"]], "supported_with_r_pdarray (arkouda.timedelta attribute)": [[28, "arkouda.Timedelta.supported_with_r_pdarray"], [28, "id838"]], "supported_with_r_timedelta (arkouda.datetime attribute)": [[28, "arkouda.Datetime.supported_with_r_timedelta"], [28, "id815"], [28, "id984"]], "supported_with_r_timedelta (arkouda.timedelta attribute)": [[28, "arkouda.Timedelta.supported_with_r_timedelta"], [28, "id835"]], "supported_with_timedelta (arkouda.datetime attribute)": [[28, "arkouda.Datetime.supported_with_timedelta"], [28, "id814"], [28, "id983"]], "supported_with_timedelta (arkouda.timedelta attribute)": [[28, "arkouda.Timedelta.supported_with_timedelta"], [28, "id834"]], "tail() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.tail"], [28, "id760"]], "tail() (arkouda.series method)": [[28, "arkouda.Series.tail"]], "tan() (in module arkouda)": [[28, "arkouda.tan"]], "tanh() (in module arkouda)": [[28, "arkouda.tanh"]], "timedelta_range() (in module arkouda)": [[28, "arkouda.timedelta_range"], [28, "id849"]], "title() (arkouda.strings method)": [[28, "arkouda.Strings.title"], [28, "id134"], [28, "id386"], [28, "id694"], [28, "id916"]], "to_csv() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.to_csv"], [28, "id768"]], "to_csv() (arkouda.index method)": [[28, "arkouda.Index.to_csv"]], "to_csv() (arkouda.strings method)": [[28, "arkouda.Strings.to_csv"], [28, "id170"], [28, "id422"], [28, "id730"], [28, "id952"]], "to_csv() (arkouda.pdarray method)": [[28, "arkouda.pdarray.to_csv"], [28, "id240"], [28, "id355"], [28, "id538"], [28, "id58"], [28, "id659"]], "to_csv() (in module arkouda)": [[28, "arkouda.to_csv"]], "to_cuda() (arkouda.pdarray method)": [[28, "arkouda.pdarray.to_cuda"], [28, "id236"], [28, "id351"], [28, "id534"], [28, "id54"], [28, "id655"]], "to_dataframe() (arkouda.series method)": [[28, "arkouda.Series.to_dataframe"]], "to_dict() (arkouda.index method)": [[28, "arkouda.Index.to_dict"]], "to_dict() (arkouda.multiindex method)": [[28, "arkouda.MultiIndex.to_dict"]], "to_hdf() (arkouda.arrayview method)": [[28, "arkouda.ArrayView.to_hdf"]], "to_hdf() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.to_hdf"], [28, "id765"]], "to_hdf() (arkouda.groupby method)": [[28, "arkouda.GroupBy.to_hdf"], [28, "id264"], [28, "id450"], [28, "id571"], [28, "id82"], [28, "id865"], [85, "arkouda.GroupBy.to_hdf"]], "to_hdf() (arkouda.ipv4 method)": [[28, "arkouda.IPv4.to_hdf"]], "to_hdf() (arkouda.index method)": [[28, "arkouda.Index.to_hdf"]], "to_hdf() (arkouda.multiindex method)": [[28, "arkouda.MultiIndex.to_hdf"]], "to_hdf() (arkouda.segarray method)": [[28, "arkouda.SegArray.to_hdf"]], "to_hdf() (arkouda.strings method)": [[28, "arkouda.Strings.to_hdf"], [28, "id168"], [28, "id420"], [28, "id728"], [28, "id950"]], "to_hdf() (arkouda.pdarray method)": [[28, "arkouda.pdarray.to_hdf"], [28, "id238"], [28, "id353"], [28, "id536"], [28, "id56"], [28, "id657"]], "to_hdf() (in module arkouda)": [[28, "arkouda.to_hdf"]], "to_list() (arkouda.arrayview method)": [[28, "arkouda.ArrayView.to_list"]], "to_list() (arkouda.bitvector method)": [[28, "arkouda.BitVector.to_list"]], "to_list() (arkouda.ipv4 method)": [[28, "arkouda.IPv4.to_list"]], "to_list() (arkouda.index method)": [[28, "arkouda.Index.to_list"]], "to_list() (arkouda.multiindex method)": [[28, "arkouda.MultiIndex.to_list"]], "to_list() (arkouda.segarray method)": [[28, "arkouda.SegArray.to_list"]], "to_list() (arkouda.series method)": [[28, "arkouda.Series.to_list"]], "to_list() (arkouda.strings method)": [[28, "arkouda.Strings.to_list"], [28, "id165"], [28, "id417"], [28, "id725"], [28, "id947"]], "to_list() (arkouda.pdarray method)": [[28, "arkouda.pdarray.to_list"], [28, "id235"], [28, "id350"], [28, "id53"], [28, "id533"], [28, "id654"]], "to_ndarray() (arkouda.arrayview method)": [[28, "arkouda.ArrayView.to_ndarray"]], "to_ndarray() (arkouda.bitvector method)": [[28, "arkouda.BitVector.to_ndarray"]], "to_ndarray() (arkouda.ipv4 method)": [[28, "arkouda.IPv4.to_ndarray"]], "to_ndarray() (arkouda.index method)": [[28, "arkouda.Index.to_ndarray"]], "to_ndarray() (arkouda.multiindex method)": [[28, "arkouda.MultiIndex.to_ndarray"]], "to_ndarray() (arkouda.segarray method)": [[28, "arkouda.SegArray.to_ndarray"]], "to_ndarray() (arkouda.strings method)": [[28, "arkouda.Strings.to_ndarray"], [28, "id164"], [28, "id416"], [28, "id724"], [28, "id946"]], "to_ndarray() (arkouda.pdarray method)": [[28, "arkouda.pdarray.to_ndarray"], [28, "id234"], [28, "id349"], [28, "id52"], [28, "id532"], [28, "id653"]], "to_pandas() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.to_pandas"], [28, "id764"]], "to_pandas() (arkouda.datetime method)": [[28, "arkouda.Datetime.to_pandas"], [28, "id821"], [28, "id990"]], "to_pandas() (arkouda.index method)": [[28, "arkouda.Index.to_pandas"]], "to_pandas() (arkouda.multiindex method)": [[28, "arkouda.MultiIndex.to_pandas"]], "to_pandas() (arkouda.series method)": [[28, "arkouda.Series.to_pandas"]], "to_pandas() (arkouda.timedelta method)": [[28, "arkouda.Timedelta.to_pandas"], [28, "id841"]], "to_parquet() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.to_parquet"], [28, "id767"]], "to_parquet() (arkouda.index method)": [[28, "arkouda.Index.to_parquet"]], "to_parquet() (arkouda.segarray method)": [[28, "arkouda.SegArray.to_parquet"]], "to_parquet() (arkouda.strings method)": [[28, "arkouda.Strings.to_parquet"], [28, "id167"], [28, "id419"], [28, "id727"], [28, "id949"]], "to_parquet() (arkouda.pdarray method)": [[28, "arkouda.pdarray.to_parquet"], [28, "id237"], [28, "id352"], [28, "id535"], [28, "id55"], [28, "id656"]], "to_parquet() (in module arkouda)": [[28, "arkouda.to_parquet"]], "topn() (arkouda.series method)": [[28, "arkouda.Series.topn"]], "total_seconds() (arkouda.timedelta method)": [[28, "arkouda.Timedelta.total_seconds"], [28, "id840"]], "transfer() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.transfer"], [28, "id750"]], "transfer() (arkouda.segarray method)": [[28, "arkouda.SegArray.transfer"]], "transfer() (arkouda.strings method)": [[28, "arkouda.Strings.transfer"], [28, "id179"], [28, "id431"], [28, "id739"], [28, "id961"]], "transfer() (arkouda.pdarray method)": [[28, "arkouda.pdarray.transfer"], [28, "id17"], [28, "id199"], [28, "id314"], [28, "id497"], [28, "id618"]], "translate_np_dtype() (in module arkouda)": [[28, "arkouda.translate_np_dtype"]], "trunc() (in module arkouda)": [[28, "arkouda.trunc"]], "uint16 (in module arkouda)": [[28, "arkouda.uint16"]], "uint32 (in module arkouda)": [[28, "arkouda.uint32"]], "uint64 (in module arkouda)": [[28, "arkouda.uint64"]], "uint8 (in module arkouda)": [[28, "arkouda.uint8"]], "uniform() (in module arkouda)": [[28, "arkouda.uniform"]], "union() (arkouda.segarray method)": [[28, "arkouda.SegArray.union"]], "union1d() (in module arkouda)": [[28, "arkouda.union1d"], [91, "arkouda.union1d"]], "unique() (arkouda.groupby method)": [[28, "arkouda.GroupBy.unique"], [28, "id105"], [28, "id287"], [28, "id473"], [28, "id594"], [28, "id888"], [85, "arkouda.GroupBy.unique"]], "unique() (arkouda.segarray method)": [[28, "arkouda.SegArray.unique"]], "unique() (in module arkouda)": [[28, "arkouda.unique"], [28, "id482"], [28, "id604"], [91, "arkouda.unique"]], "unique_keys (arkouda.groupby attribute)": [[28, "arkouda.GroupBy.unique_keys"], [28, "id256"], [28, "id442"], [28, "id563"], [28, "id74"], [28, "id857"], [85, "arkouda.GroupBy.unique_keys"]], "unregister() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.unregister"], [28, "id788"]], "unregister() (arkouda.datetime method)": [[28, "arkouda.Datetime.unregister"], [28, "id824"], [28, "id993"]], "unregister() (arkouda.groupby method)": [[28, "arkouda.GroupBy.unregister"], [28, "id109"], [28, "id291"], [28, "id477"], [28, "id598"], [28, "id892"], [85, "arkouda.GroupBy.unregister"]], "unregister() (arkouda.index method)": [[28, "arkouda.Index.unregister"]], "unregister() (arkouda.multiindex method)": [[28, "arkouda.MultiIndex.unregister"]], "unregister() (arkouda.segarray method)": [[28, "arkouda.SegArray.unregister"]], "unregister() (arkouda.series method)": [[28, "arkouda.Series.unregister"]], "unregister() (arkouda.strings method)": [[28, "arkouda.Strings.unregister"], [28, "id175"], [28, "id427"], [28, "id735"], [28, "id957"]], "unregister() (arkouda.timedelta method)": [[28, "arkouda.Timedelta.unregister"], [28, "id846"]], "unregister() (arkouda.pdarray method)": [[28, "arkouda.pdarray.unregister"], [28, "id245"], [28, "id360"], [28, "id543"], [28, "id63"], [28, "id664"]], "unregister_dataframe_by_name() (arkouda.dataframe static method)": [[28, "arkouda.DataFrame.unregister_dataframe_by_name"], [28, "id791"]], "unregister_groupby_by_name() (arkouda.groupby static method)": [[28, "arkouda.GroupBy.unregister_groupby_by_name"], [28, "id112"], [28, "id294"], [28, "id480"], [28, "id601"], [28, "id895"], [85, "arkouda.GroupBy.unregister_groupby_by_name"]], "unregister_pdarray_by_name() (in module arkouda)": [[28, "arkouda.unregister_pdarray_by_name"]], "unregister_segarray_by_name() (arkouda.segarray static method)": [[28, "arkouda.SegArray.unregister_segarray_by_name"]], "unregister_strings_by_name() (arkouda.strings static method)": [[28, "arkouda.Strings.unregister_strings_by_name"], [28, "id178"], [28, "id430"], [28, "id738"], [28, "id960"]], "unsqueeze() (in module arkouda)": [[28, "arkouda.unsqueeze"]], "update_hdf() (arkouda.arrayview method)": [[28, "arkouda.ArrayView.update_hdf"]], "update_hdf() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.update_hdf"], [28, "id766"]], "update_hdf() (arkouda.groupby method)": [[28, "arkouda.GroupBy.update_hdf"], [28, "id265"], [28, "id451"], [28, "id572"], [28, "id83"], [28, "id866"]], "update_hdf() (arkouda.ipv4 method)": [[28, "arkouda.IPv4.update_hdf"]], "update_hdf() (arkouda.index method)": [[28, "arkouda.Index.update_hdf"]], "update_hdf() (arkouda.multiindex method)": [[28, "arkouda.MultiIndex.update_hdf"]], "update_hdf() (arkouda.segarray method)": [[28, "arkouda.SegArray.update_hdf"]], "update_hdf() (arkouda.strings method)": [[28, "arkouda.Strings.update_hdf"], [28, "id169"], [28, "id421"], [28, "id729"], [28, "id951"]], "update_hdf() (arkouda.pdarray method)": [[28, "arkouda.pdarray.update_hdf"], [28, "id239"], [28, "id354"], [28, "id537"], [28, "id57"], [28, "id658"]], "update_hdf() (in module arkouda)": [[28, "arkouda.update_hdf"]], "update_size() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.update_size"], [28, "id755"]], "upper() (arkouda.strings method)": [[28, "arkouda.Strings.upper"], [28, "id133"], [28, "id385"], [28, "id693"], [28, "id915"]], "validate_key() (arkouda.series method)": [[28, "arkouda.Series.validate_key"]], "validate_val() (arkouda.series method)": [[28, "arkouda.Series.validate_val"]], "value_counts() (arkouda.series method)": [[28, "arkouda.Series.value_counts"]], "value_counts() (arkouda.pdarray method)": [[28, "arkouda.pdarray.value_counts"], [28, "id229"], [28, "id344"], [28, "id47"], [28, "id527"], [28, "id648"]], "value_counts() (in module arkouda)": [[28, "arkouda.value_counts"], [86, "arkouda.value_counts"]], "var() (arkouda.groupby method)": [[28, "arkouda.GroupBy.var"], [28, "id271"], [28, "id457"], [28, "id578"], [28, "id872"], [28, "id89"], [85, "arkouda.GroupBy.var"]], "var() (arkouda.pdarray method)": [[28, "arkouda.pdarray.var"], [28, "id215"], [28, "id33"], [28, "id330"], [28, "id513"], [28, "id634"], [86, "arkouda.pdarray.var"]], "var() (in module arkouda)": [[28, "arkouda.var"], [80, "arkouda.var"]], "week (arkouda.datetime property)": [[28, "arkouda.Datetime.week"], [28, "id808"], [28, "id977"]], "weekday (arkouda.datetime property)": [[28, "arkouda.Datetime.weekday"], [28, "id807"], [28, "id976"]], "weekofyear (arkouda.datetime property)": [[28, "arkouda.Datetime.weekofyear"], [28, "id809"], [28, "id978"]], "where() (in module arkouda)": [[28, "arkouda.where"], [28, "id605"], [28, "id69"], [80, "arkouda.where"]], "write_log() (in module arkouda)": [[28, "arkouda.write_log"]], "year (arkouda.datetime property)": [[28, "arkouda.Datetime.year"], [28, "id802"], [28, "id971"]], "zero_up() (in module arkouda)": [[28, "arkouda.zero_up"]], "zeros() (in module arkouda)": [[28, "arkouda.zeros"], [28, "id365"], [28, "id669"], [28, "id67"], [83, "arkouda.zeros"]], "zeros_like() (in module arkouda)": [[28, "arkouda.zeros_like"], [83, "arkouda.zeros_like"]], "index (class in arkouda.index)": [[29, "arkouda.index.Index"]], "multiindex (class in arkouda.index)": [[29, "arkouda.index.MultiIndex"]], "argsort() (arkouda.index.index method)": [[29, "arkouda.index.Index.argsort"]], "argsort() (arkouda.index.multiindex method)": [[29, "arkouda.index.MultiIndex.argsort"]], "arkouda.index": [[29, "module-arkouda.index"]], "concat() (arkouda.index.index method)": [[29, "arkouda.index.Index.concat"]], "concat() (arkouda.index.multiindex method)": [[29, "arkouda.index.MultiIndex.concat"]], "factory() (arkouda.index.index static method)": [[29, "arkouda.index.Index.factory"]], "from_return_msg() (arkouda.index.index class method)": [[29, "arkouda.index.Index.from_return_msg"]], "index (arkouda.index.index property)": [[29, "arkouda.index.Index.index"]], "index (arkouda.index.multiindex property)": [[29, "arkouda.index.MultiIndex.index"]], "is_registered() (arkouda.index.index method)": [[29, "arkouda.index.Index.is_registered"]], "is_registered() (arkouda.index.multiindex method)": [[29, "arkouda.index.MultiIndex.is_registered"]], "is_unique (arkouda.index.index property)": [[29, "arkouda.index.Index.is_unique"]], "lookup() (arkouda.index.index method)": [[29, "arkouda.index.Index.lookup"]], "lookup() (arkouda.index.multiindex method)": [[29, "arkouda.index.MultiIndex.lookup"]], "objtype (arkouda.index.index attribute)": [[29, "arkouda.index.Index.objType"]], "objtype (arkouda.index.multiindex attribute)": [[29, "arkouda.index.MultiIndex.objType"]], "register() (arkouda.index.index method)": [[29, "arkouda.index.Index.register"]], "register() (arkouda.index.multiindex method)": [[29, "arkouda.index.MultiIndex.register"]], "save() (arkouda.index.index method)": [[29, "arkouda.index.Index.save"]], "set_dtype() (arkouda.index.index method)": [[29, "arkouda.index.Index.set_dtype"]], "set_dtype() (arkouda.index.multiindex method)": [[29, "arkouda.index.MultiIndex.set_dtype"]], "shape (arkouda.index.index property)": [[29, "arkouda.index.Index.shape"]], "to_csv() (arkouda.index.index method)": [[29, "arkouda.index.Index.to_csv"]], "to_dict() (arkouda.index.index method)": [[29, "arkouda.index.Index.to_dict"]], "to_dict() (arkouda.index.multiindex method)": [[29, "arkouda.index.MultiIndex.to_dict"]], "to_hdf() (arkouda.index.index method)": [[29, "arkouda.index.Index.to_hdf"]], "to_hdf() (arkouda.index.multiindex method)": [[29, "arkouda.index.MultiIndex.to_hdf"]], "to_list() (arkouda.index.index method)": [[29, "arkouda.index.Index.to_list"]], "to_list() (arkouda.index.multiindex method)": [[29, "arkouda.index.MultiIndex.to_list"]], "to_ndarray() (arkouda.index.index method)": [[29, "arkouda.index.Index.to_ndarray"]], "to_ndarray() (arkouda.index.multiindex method)": [[29, "arkouda.index.MultiIndex.to_ndarray"]], "to_pandas() (arkouda.index.index method)": [[29, "arkouda.index.Index.to_pandas"]], "to_pandas() (arkouda.index.multiindex method)": [[29, "arkouda.index.MultiIndex.to_pandas"]], "to_parquet() (arkouda.index.index method)": [[29, "arkouda.index.Index.to_parquet"]], "unregister() (arkouda.index.index method)": [[29, "arkouda.index.Index.unregister"]], "unregister() (arkouda.index.multiindex method)": [[29, "arkouda.index.MultiIndex.unregister"]], "update_hdf() (arkouda.index.index method)": [[29, "arkouda.index.Index.update_hdf"]], "update_hdf() (arkouda.index.multiindex method)": [[29, "arkouda.index.MultiIndex.update_hdf"]], "allsymbols (in module arkouda.infoclass)": [[30, "arkouda.infoclass.AllSymbols"]], "registeredsymbols (in module arkouda.infoclass)": [[30, "arkouda.infoclass.RegisteredSymbols"]], "arkouda.infoclass": [[30, "module-arkouda.infoclass"]], "information() (in module arkouda.infoclass)": [[30, "arkouda.infoclass.information"]], "list_registry() (in module arkouda.infoclass)": [[30, "arkouda.infoclass.list_registry"]], "list_symbol_table() (in module arkouda.infoclass)": [[30, "arkouda.infoclass.list_symbol_table"]], "pretty_print_information() (in module arkouda.infoclass)": [[30, "arkouda.infoclass.pretty_print_information"]], "arkouda.io": [[31, "module-arkouda.io"]], "export() (in module arkouda.io)": [[31, "arkouda.io.export"]], "get_columns() (in module arkouda.io)": [[31, "arkouda.io.get_columns"]], "get_datasets() (in module arkouda.io)": [[31, "arkouda.io.get_datasets"]], "get_filetype() (in module arkouda.io)": [[31, "arkouda.io.get_filetype"]], "get_null_indices() (in module arkouda.io)": [[31, "arkouda.io.get_null_indices"]], "import_data() (in module arkouda.io)": [[31, "arkouda.io.import_data"]], "load() (in module arkouda.io)": [[31, "arkouda.io.load"]], "load_all() (in module arkouda.io)": [[31, "arkouda.io.load_all"]], "ls() (in module arkouda.io)": [[31, "arkouda.io.ls"]], "ls_csv() (in module arkouda.io)": [[31, "arkouda.io.ls_csv"]], "read() (in module arkouda.io)": [[31, "arkouda.io.read"]], "read_csv() (in module arkouda.io)": [[31, "arkouda.io.read_csv"]], "read_hdf() (in module arkouda.io)": [[31, "arkouda.io.read_hdf"]], "read_parquet() (in module arkouda.io)": [[31, "arkouda.io.read_parquet"]], "read_tagged_data() (in module arkouda.io)": [[31, "arkouda.io.read_tagged_data"]], "receive() (in module arkouda.io)": [[31, "arkouda.io.receive"]], "receive_dataframe() (in module arkouda.io)": [[31, "arkouda.io.receive_dataframe"]], "restore() (in module arkouda.io)": [[31, "arkouda.io.restore"]], "save_all() (in module arkouda.io)": [[31, "arkouda.io.save_all"]], "snapshot() (in module arkouda.io)": [[31, "arkouda.io.snapshot"]], "to_csv() (in module arkouda.io)": [[31, "arkouda.io.to_csv"]], "to_hdf() (in module arkouda.io)": [[31, "arkouda.io.to_hdf"]], "to_parquet() (in module arkouda.io)": [[31, "arkouda.io.to_parquet"]], "update_hdf() (in module arkouda.io)": [[31, "arkouda.io.update_hdf"]], "arkouda.io_util": [[32, "module-arkouda.io_util"]], "delimited_file_to_dict() (in module arkouda.io_util)": [[32, "arkouda.io_util.delimited_file_to_dict"]], "dict_to_delimited_file() (in module arkouda.io_util)": [[32, "arkouda.io_util.dict_to_delimited_file"]], "get_directory() (in module arkouda.io_util)": [[32, "arkouda.io_util.get_directory"]], "write_line_to_file() (in module arkouda.io_util)": [[32, "arkouda.io_util.write_line_to_file"]], "arkouda.join": [[33, "module-arkouda.join"]], "compute_join_size() (in module arkouda.join)": [[33, "arkouda.join.compute_join_size"]], "gen_ranges() (in module arkouda.join)": [[33, "arkouda.join.gen_ranges"]], "join_on_eq_with_dt() (in module arkouda.join)": [[33, "arkouda.join.join_on_eq_with_dt"]], "critical (arkouda.logger.loglevel attribute)": [[34, "arkouda.logger.LogLevel.CRITICAL"]], "debug (arkouda.logger.loglevel attribute)": [[34, "arkouda.logger.LogLevel.DEBUG"]], "error (arkouda.logger.loglevel attribute)": [[34, "arkouda.logger.LogLevel.ERROR"]], "info (arkouda.logger.loglevel attribute)": [[34, "arkouda.logger.LogLevel.INFO"]], "loglevel (class in arkouda.logger)": [[34, "arkouda.logger.LogLevel"]], "warn (arkouda.logger.loglevel attribute)": [[34, "arkouda.logger.LogLevel.WARN"]], "arkouda.logger": [[34, "module-arkouda.logger"]], "disableverbose() (in module arkouda.logger)": [[34, "arkouda.logger.disableVerbose"]], "enableverbose() (in module arkouda.logger)": [[34, "arkouda.logger.enableVerbose"]], "write_log() (in module arkouda.logger)": [[34, "arkouda.logger.write_log"]], "match (class in arkouda.match)": [[35, "arkouda.match.Match"]], "arkouda.match": [[35, "module-arkouda.match"]], "end() (arkouda.match.match method)": [[35, "arkouda.match.Match.end"], [93, "arkouda.match.Match.end"]], "find_matches() (arkouda.match.match method)": [[35, "arkouda.match.Match.find_matches"], [93, "arkouda.match.Match.find_matches"]], "group() (arkouda.match.match method)": [[35, "arkouda.match.Match.group"], [93, "arkouda.match.Match.group"]], "match_type() (arkouda.match.match method)": [[35, "arkouda.match.Match.match_type"], [93, "arkouda.match.Match.match_type"]], "matched() (arkouda.match.match method)": [[35, "arkouda.match.Match.matched"], [93, "arkouda.match.Match.matched"]], "start() (arkouda.match.match method)": [[35, "arkouda.match.Match.start"], [93, "arkouda.match.Match.start"]], "locationsinfo (arkouda.matcher.matcher attribute)": [[36, "arkouda.matcher.Matcher.LocationsInfo"]], "matcher (class in arkouda.matcher)": [[36, "arkouda.matcher.Matcher"]], "arkouda.matcher": [[36, "module-arkouda.matcher"]], "find_locations() (arkouda.matcher.matcher method)": [[36, "arkouda.matcher.Matcher.find_locations"]], "findall() (arkouda.matcher.matcher method)": [[36, "arkouda.matcher.Matcher.findall"]], "get_match() (arkouda.matcher.matcher method)": [[36, "arkouda.matcher.Matcher.get_match"]], "split() (arkouda.matcher.matcher method)": [[36, "arkouda.matcher.Matcher.split"]], "sub() (arkouda.matcher.matcher method)": [[36, "arkouda.matcher.Matcher.sub"]], "errormode (class in arkouda.numeric)": [[37, "arkouda.numeric.ErrorMode"]], "abs() (in module arkouda.numeric)": [[37, "arkouda.numeric.abs"]], "arccos() (in module arkouda.numeric)": [[37, "arkouda.numeric.arccos"]], "arccosh() (in module arkouda.numeric)": [[37, "arkouda.numeric.arccosh"]], "arcsin() (in module arkouda.numeric)": [[37, "arkouda.numeric.arcsin"]], "arcsinh() (in module arkouda.numeric)": [[37, "arkouda.numeric.arcsinh"]], "arctan() (in module arkouda.numeric)": [[37, "arkouda.numeric.arctan"]], "arctan2() (in module arkouda.numeric)": [[37, "arkouda.numeric.arctan2"]], "arctanh() (in module arkouda.numeric)": [[37, "arkouda.numeric.arctanh"]], "arkouda.numeric": [[37, "module-arkouda.numeric"]], "cast() (in module arkouda.numeric)": [[37, "arkouda.numeric.cast"]], "ceil() (in module arkouda.numeric)": [[37, "arkouda.numeric.ceil"]], "cos() (in module arkouda.numeric)": [[37, "arkouda.numeric.cos"]], "cosh() (in module arkouda.numeric)": [[37, "arkouda.numeric.cosh"]], "cumprod() (in module arkouda.numeric)": [[37, "arkouda.numeric.cumprod"]], "cumsum() (in module arkouda.numeric)": [[37, "arkouda.numeric.cumsum"]], "deg2rad() (in module arkouda.numeric)": [[37, "arkouda.numeric.deg2rad"]], "exp() (in module arkouda.numeric)": [[37, "arkouda.numeric.exp"]], "expm1() (in module arkouda.numeric)": [[37, "arkouda.numeric.expm1"]], "floor() (in module arkouda.numeric)": [[37, "arkouda.numeric.floor"]], "hash() (in module arkouda.numeric)": [[37, "arkouda.numeric.hash"]], "histogram() (in module arkouda.numeric)": [[37, "arkouda.numeric.histogram"]], "histogram2d() (in module arkouda.numeric)": [[37, "arkouda.numeric.histogram2d"]], "histogramdd() (in module arkouda.numeric)": [[37, "arkouda.numeric.histogramdd"]], "ignore (arkouda.numeric.errormode attribute)": [[37, "arkouda.numeric.ErrorMode.ignore"]], "isfinite() (in module arkouda.numeric)": [[37, "arkouda.numeric.isfinite"]], "isinf() (in module arkouda.numeric)": [[37, "arkouda.numeric.isinf"]], "isnan() (in module arkouda.numeric)": [[37, "arkouda.numeric.isnan"]], "log() (in module arkouda.numeric)": [[37, "arkouda.numeric.log"]], "log10() (in module arkouda.numeric)": [[37, "arkouda.numeric.log10"]], "log1p() (in module arkouda.numeric)": [[37, "arkouda.numeric.log1p"]], "log2() (in module arkouda.numeric)": [[37, "arkouda.numeric.log2"]], "rad2deg() (in module arkouda.numeric)": [[37, "arkouda.numeric.rad2deg"]], "return_validity (arkouda.numeric.errormode attribute)": [[37, "arkouda.numeric.ErrorMode.return_validity"]], "round() (in module arkouda.numeric)": [[37, "arkouda.numeric.round"]], "sign() (in module arkouda.numeric)": [[37, "arkouda.numeric.sign"]], "sin() (in module arkouda.numeric)": [[37, "arkouda.numeric.sin"]], "sinh() (in module arkouda.numeric)": [[37, "arkouda.numeric.sinh"]], "square() (in module arkouda.numeric)": [[37, "arkouda.numeric.square"]], "strict (arkouda.numeric.errormode attribute)": [[37, "arkouda.numeric.ErrorMode.strict"]], "tan() (in module arkouda.numeric)": [[37, "arkouda.numeric.tan"]], "tanh() (in module arkouda.numeric)": [[37, "arkouda.numeric.tanh"]], "trunc() (in module arkouda.numeric)": [[37, "arkouda.numeric.trunc"]], "value_counts() (in module arkouda.numeric)": [[37, "arkouda.numeric.value_counts"]], "where() (in module arkouda.numeric)": [[37, "arkouda.numeric.where"]], "binops (arkouda.pdarrayclass.pdarray attribute)": [[38, "arkouda.pdarrayclass.pdarray.BinOps"]], "opeqops (arkouda.pdarrayclass.pdarray attribute)": [[38, "arkouda.pdarrayclass.pdarray.OpEqOps"]], "all() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.all"]], "all() (in module arkouda.pdarrayclass)": [[38, "arkouda.pdarrayclass.all"]], "any() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.any"]], "any() (in module arkouda.pdarrayclass)": [[38, "arkouda.pdarrayclass.any"]], "argmax() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.argmax"]], "argmax() (in module arkouda.pdarrayclass)": [[38, "arkouda.pdarrayclass.argmax"]], "argmaxk() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.argmaxk"]], "argmaxk() (in module arkouda.pdarrayclass)": [[38, "arkouda.pdarrayclass.argmaxk"]], "argmin() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.argmin"]], "argmin() (in module arkouda.pdarrayclass)": [[38, "arkouda.pdarrayclass.argmin"]], "argmink() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.argmink"]], "argmink() (in module arkouda.pdarrayclass)": [[38, "arkouda.pdarrayclass.argmink"]], "arkouda.pdarrayclass": [[38, "module-arkouda.pdarrayclass"]], "astype() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.astype"]], "attach() (arkouda.pdarrayclass.pdarray static method)": [[38, "arkouda.pdarrayclass.pdarray.attach"]], "attach_pdarray() (in module arkouda.pdarrayclass)": [[38, "arkouda.pdarrayclass.attach_pdarray"]], "bigint_to_uint_arrays() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.bigint_to_uint_arrays"]], "broadcast_to_shape() (in module arkouda.pdarrayclass)": [[38, "arkouda.pdarrayclass.broadcast_to_shape"]], "clear() (in module arkouda.pdarrayclass)": [[38, "arkouda.pdarrayclass.clear"]], "clz() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.clz"]], "clz() (in module arkouda.pdarrayclass)": [[38, "arkouda.pdarrayclass.clz"]], "corr() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.corr"]], "corr() (in module arkouda.pdarrayclass)": [[38, "arkouda.pdarrayclass.corr"]], "cov() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.cov"]], "cov() (in module arkouda.pdarrayclass)": [[38, "arkouda.pdarrayclass.cov"]], "ctz() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.ctz"]], "ctz() (in module arkouda.pdarrayclass)": [[38, "arkouda.pdarrayclass.ctz"]], "divmod() (in module arkouda.pdarrayclass)": [[38, "arkouda.pdarrayclass.divmod"]], "dtype (arkouda.pdarrayclass.pdarray attribute)": [[38, "arkouda.pdarrayclass.pdarray.dtype"]], "fill() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.fill"]], "fmod() (in module arkouda.pdarrayclass)": [[38, "arkouda.pdarrayclass.fmod"]], "format_other() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.format_other"]], "info() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.info"]], "is_registered() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.is_registered"]], "is_sorted() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.is_sorted"]], "is_sorted() (in module arkouda.pdarrayclass)": [[38, "arkouda.pdarrayclass.is_sorted"]], "itemsize (arkouda.pdarrayclass.pdarray attribute)": [[38, "arkouda.pdarrayclass.pdarray.itemsize"]], "max() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.max"]], "max() (in module arkouda.pdarrayclass)": [[38, "arkouda.pdarrayclass.max"]], "max_bits (arkouda.pdarrayclass.pdarray property)": [[38, "arkouda.pdarrayclass.pdarray.max_bits"]], "maxk() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.maxk"]], "maxk() (in module arkouda.pdarrayclass)": [[38, "arkouda.pdarrayclass.maxk"]], "mean() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.mean"]], "mean() (in module arkouda.pdarrayclass)": [[38, "arkouda.pdarrayclass.mean"]], "min() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.min"]], "min() (in module arkouda.pdarrayclass)": [[38, "arkouda.pdarrayclass.min"]], "mink() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.mink"]], "mink() (in module arkouda.pdarrayclass)": [[38, "arkouda.pdarrayclass.mink"]], "mod() (in module arkouda.pdarrayclass)": [[38, "arkouda.pdarrayclass.mod"]], "name (arkouda.pdarrayclass.pdarray attribute)": [[38, "arkouda.pdarrayclass.pdarray.name"]], "ndim (arkouda.pdarrayclass.pdarray attribute)": [[38, "arkouda.pdarrayclass.pdarray.ndim"]], "objtype (arkouda.pdarrayclass.pdarray attribute)": [[38, "arkouda.pdarrayclass.pdarray.objType"]], "opeq() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.opeq"]], "parity() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.parity"]], "parity() (in module arkouda.pdarrayclass)": [[38, "arkouda.pdarrayclass.parity"]], "pdarray (class in arkouda.pdarrayclass)": [[38, "arkouda.pdarrayclass.pdarray"]], "popcount() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.popcount"]], "popcount() (in module arkouda.pdarrayclass)": [[38, "arkouda.pdarrayclass.popcount"]], "power() (in module arkouda.pdarrayclass)": [[38, "arkouda.pdarrayclass.power"]], "pretty_print_info() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.pretty_print_info"]], "prod() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.prod"]], "prod() (in module arkouda.pdarrayclass)": [[38, "arkouda.pdarrayclass.prod"]], "register() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.register"]], "reshape() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.reshape"]], "rotl() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.rotl"]], "rotl() (in module arkouda.pdarrayclass)": [[38, "arkouda.pdarrayclass.rotl"]], "rotr() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.rotr"]], "rotr() (in module arkouda.pdarrayclass)": [[38, "arkouda.pdarrayclass.rotr"]], "save() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.save"]], "shape (arkouda.pdarrayclass.pdarray attribute)": [[38, "arkouda.pdarrayclass.pdarray.shape"]], "size (arkouda.pdarrayclass.pdarray attribute)": [[38, "arkouda.pdarrayclass.pdarray.size"]], "slice_bits() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.slice_bits"]], "sqrt() (in module arkouda.pdarrayclass)": [[38, "arkouda.pdarrayclass.sqrt"]], "std() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.std"]], "std() (in module arkouda.pdarrayclass)": [[38, "arkouda.pdarrayclass.std"]], "sum() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.sum"]], "sum() (in module arkouda.pdarrayclass)": [[38, "arkouda.pdarrayclass.sum"]], "to_csv() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.to_csv"]], "to_cuda() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.to_cuda"]], "to_hdf() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.to_hdf"]], "to_list() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.to_list"]], "to_ndarray() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.to_ndarray"]], "to_parquet() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.to_parquet"]], "transfer() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.transfer"]], "unregister() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.unregister"]], "unregister_pdarray_by_name() (in module arkouda.pdarrayclass)": [[38, "arkouda.pdarrayclass.unregister_pdarray_by_name"]], "update_hdf() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.update_hdf"]], "value_counts() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.value_counts"]], "var() (arkouda.pdarrayclass.pdarray method)": [[38, "arkouda.pdarrayclass.pdarray.var"]], "var() (in module arkouda.pdarrayclass)": [[38, "arkouda.pdarrayclass.var"]], "arange() (in module arkouda.pdarraycreation)": [[39, "arkouda.pdarraycreation.arange"]], "arkouda.pdarraycreation": [[39, "module-arkouda.pdarraycreation"]], "array() (in module arkouda.pdarraycreation)": [[39, "arkouda.pdarraycreation.array"]], "bigint_from_uint_arrays() (in module arkouda.pdarraycreation)": [[39, "arkouda.pdarraycreation.bigint_from_uint_arrays"]], "from_series() (in module arkouda.pdarraycreation)": [[39, "arkouda.pdarraycreation.from_series"]], "full() (in module arkouda.pdarraycreation)": [[39, "arkouda.pdarraycreation.full"]], "full_like() (in module arkouda.pdarraycreation)": [[39, "arkouda.pdarraycreation.full_like"]], "linspace() (in module arkouda.pdarraycreation)": [[39, "arkouda.pdarraycreation.linspace"]], "ones() (in module arkouda.pdarraycreation)": [[39, "arkouda.pdarraycreation.ones"]], "ones_like() (in module arkouda.pdarraycreation)": [[39, "arkouda.pdarraycreation.ones_like"]], "randint() (in module arkouda.pdarraycreation)": [[39, "arkouda.pdarraycreation.randint"]], "random_strings_lognormal() (in module arkouda.pdarraycreation)": [[39, "arkouda.pdarraycreation.random_strings_lognormal"]], "random_strings_uniform() (in module arkouda.pdarraycreation)": [[39, "arkouda.pdarraycreation.random_strings_uniform"]], "standard_normal() (in module arkouda.pdarraycreation)": [[39, "arkouda.pdarraycreation.standard_normal"]], "uniform() (in module arkouda.pdarraycreation)": [[39, "arkouda.pdarraycreation.uniform"]], "zeros() (in module arkouda.pdarraycreation)": [[39, "arkouda.pdarraycreation.zeros"]], "zeros_like() (in module arkouda.pdarraycreation)": [[39, "arkouda.pdarraycreation.zeros_like"]], "arkouda.pdarraysetops": [[40, "module-arkouda.pdarraysetops"]], "concatenate() (in module arkouda.pdarraysetops)": [[40, "arkouda.pdarraysetops.concatenate"]], "in1d() (in module arkouda.pdarraysetops)": [[40, "arkouda.pdarraysetops.in1d"]], "indexof1d() (in module arkouda.pdarraysetops)": [[40, "arkouda.pdarraysetops.indexof1d"]], "intersect1d() (in module arkouda.pdarraysetops)": [[40, "arkouda.pdarraysetops.intersect1d"]], "setdiff1d() (in module arkouda.pdarraysetops)": [[40, "arkouda.pdarraysetops.setdiff1d"]], "setxor1d() (in module arkouda.pdarraysetops)": [[40, "arkouda.pdarraysetops.setxor1d"]], "union1d() (in module arkouda.pdarraysetops)": [[40, "arkouda.pdarraysetops.union1d"]], "arkouda.plotting": [[41, "module-arkouda.plotting"]], "hist_all() (in module arkouda.plotting)": [[41, "arkouda.plotting.hist_all"]], "plot_dist() (in module arkouda.plotting)": [[41, "arkouda.plotting.plot_dist"]], "row (class in arkouda.row)": [[42, "arkouda.row.Row"]], "arkouda.row": [[42, "module-arkouda.row"]], "arkouda.security": [[43, "module-arkouda.security"]], "generate_token() (in module arkouda.security)": [[43, "arkouda.security.generate_token"]], "generate_username_token_json() (in module arkouda.security)": [[43, "arkouda.security.generate_username_token_json"]], "get_arkouda_client_directory() (in module arkouda.security)": [[43, "arkouda.security.get_arkouda_client_directory"]], "get_home_directory() (in module arkouda.security)": [[43, "arkouda.security.get_home_directory"]], "get_username() (in module arkouda.security)": [[43, "arkouda.security.get_username"]], "username_tokenizer (in module arkouda.security)": [[43, "arkouda.security.username_tokenizer"]], "and() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.AND"]], "len_suffix (in module arkouda.segarray)": [[44, "arkouda.segarray.LEN_SUFFIX"]], "or() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.OR"]], "seg_suffix (in module arkouda.segarray)": [[44, "arkouda.segarray.SEG_SUFFIX"]], "segarray (class in arkouda.segarray)": [[44, "arkouda.segarray.SegArray"]], "val_suffix (in module arkouda.segarray)": [[44, "arkouda.segarray.VAL_SUFFIX"]], "xor() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.XOR"]], "aggregate() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.aggregate"]], "all() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.all"]], "any() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.any"]], "append() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.append"]], "append_single() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.append_single"]], "argmax() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.argmax"]], "argmin() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.argmin"]], "arkouda.segarray": [[44, "module-arkouda.segarray"]], "attach() (arkouda.segarray.segarray class method)": [[44, "arkouda.segarray.SegArray.attach"]], "concat() (arkouda.segarray.segarray class method)": [[44, "arkouda.segarray.SegArray.concat"]], "copy() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.copy"]], "filter() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.filter"]], "from_multi_array() (arkouda.segarray.segarray class method)": [[44, "arkouda.segarray.SegArray.from_multi_array"]], "from_parts() (arkouda.segarray.segarray class method)": [[44, "arkouda.segarray.SegArray.from_parts"]], "from_return_msg() (arkouda.segarray.segarray class method)": [[44, "arkouda.segarray.SegArray.from_return_msg"]], "get_jth() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.get_jth"]], "get_length_n() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.get_length_n"]], "get_ngrams() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.get_ngrams"]], "get_prefixes() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.get_prefixes"]], "get_suffixes() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.get_suffixes"]], "grouping (arkouda.segarray.segarray property)": [[44, "arkouda.segarray.SegArray.grouping"]], "hash() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.hash"]], "intersect() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.intersect"]], "is_registered() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.is_registered"]], "load() (arkouda.segarray.segarray class method)": [[44, "arkouda.segarray.SegArray.load"]], "max() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.max"]], "mean() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.mean"]], "min() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.min"]], "non_empty (arkouda.segarray.segarray property)": [[44, "arkouda.segarray.SegArray.non_empty"]], "nunique() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.nunique"]], "objtype (arkouda.segarray.segarray attribute)": [[44, "arkouda.segarray.SegArray.objType"]], "prepend_single() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.prepend_single"]], "prod() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.prod"]], "read_hdf() (arkouda.segarray.segarray class method)": [[44, "arkouda.segarray.SegArray.read_hdf"]], "register() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.register"]], "remove_repeats() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.remove_repeats"]], "save() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.save"]], "segarray() (in module arkouda.segarray)": [[44, "arkouda.segarray.segarray"]], "set_jth() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.set_jth"]], "setdiff() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.setdiff"]], "setxor() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.setxor"]], "sum() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.sum"]], "to_hdf() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.to_hdf"]], "to_list() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.to_list"]], "to_ndarray() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.to_ndarray"]], "to_parquet() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.to_parquet"]], "transfer() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.transfer"]], "union() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.union"]], "unique() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.unique"]], "unregister() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.unregister"]], "unregister_segarray_by_name() (arkouda.segarray.segarray static method)": [[44, "arkouda.segarray.SegArray.unregister_segarray_by_name"]], "update_hdf() (arkouda.segarray.segarray method)": [[44, "arkouda.segarray.SegArray.update_hdf"]], "series (class in arkouda.series)": [[45, "arkouda.series.Series"]], "add() (arkouda.series.series method)": [[45, "arkouda.series.Series.add"]], "arkouda.series": [[45, "module-arkouda.series"]], "at (arkouda.series.series property)": [[45, "arkouda.series.Series.at"]], "attach() (arkouda.series.series static method)": [[45, "arkouda.series.Series.attach"]], "concat() (arkouda.series.series static method)": [[45, "arkouda.series.Series.concat"]], "diff() (arkouda.series.series method)": [[45, "arkouda.series.Series.diff"]], "dt (arkouda.series.series attribute)": [[45, "arkouda.series.Series.dt"]], "from_return_msg() (arkouda.series.series class method)": [[45, "arkouda.series.Series.from_return_msg"]], "has_repeat_labels() (arkouda.series.series method)": [[45, "arkouda.series.Series.has_repeat_labels"]], "head() (arkouda.series.series method)": [[45, "arkouda.series.Series.head"]], "iat (arkouda.series.series property)": [[45, "arkouda.series.Series.iat"]], "iloc (arkouda.series.series property)": [[45, "arkouda.series.Series.iloc"]], "is_registered() (arkouda.series.series method)": [[45, "arkouda.series.Series.is_registered"]], "isin() (arkouda.series.series method)": [[45, "arkouda.series.Series.isin"]], "loc (arkouda.series.series property)": [[45, "arkouda.series.Series.loc"]], "locate() (arkouda.series.series method)": [[45, "arkouda.series.Series.locate"]], "objtype (arkouda.series.series attribute)": [[45, "arkouda.series.Series.objType"]], "pdconcat() (arkouda.series.series static method)": [[45, "arkouda.series.Series.pdconcat"]], "register() (arkouda.series.series method)": [[45, "arkouda.series.Series.register"]], "shape (arkouda.series.series property)": [[45, "arkouda.series.Series.shape"]], "sort_index() (arkouda.series.series method)": [[45, "arkouda.series.Series.sort_index"]], "sort_values() (arkouda.series.series method)": [[45, "arkouda.series.Series.sort_values"]], "str_acc (arkouda.series.series attribute)": [[45, "arkouda.series.Series.str_acc"]], "tail() (arkouda.series.series method)": [[45, "arkouda.series.Series.tail"]], "to_dataframe() (arkouda.series.series method)": [[45, "arkouda.series.Series.to_dataframe"]], "to_list() (arkouda.series.series method)": [[45, "arkouda.series.Series.to_list"]], "to_pandas() (arkouda.series.series method)": [[45, "arkouda.series.Series.to_pandas"]], "topn() (arkouda.series.series method)": [[45, "arkouda.series.Series.topn"]], "unregister() (arkouda.series.series method)": [[45, "arkouda.series.Series.unregister"]], "validate_key() (arkouda.series.series method)": [[45, "arkouda.series.Series.validate_key"]], "validate_val() (arkouda.series.series method)": [[45, "arkouda.series.Series.validate_val"]], "value_counts() (arkouda.series.series method)": [[45, "arkouda.series.Series.value_counts"]], "argsort() (in module arkouda.sorting)": [[46, "arkouda.sorting.argsort"]], "arkouda.sorting": [[46, "module-arkouda.sorting"]], "coargsort() (in module arkouda.sorting)": [[46, "arkouda.sorting.coargsort"]], "sort() (in module arkouda.sorting)": [[46, "arkouda.sorting.sort"]], "binops (arkouda.strings.strings attribute)": [[47, "arkouda.strings.Strings.BinOps"]], "strings (class in arkouda.strings)": [[47, "arkouda.strings.Strings"]], "arkouda.strings": [[47, "module-arkouda.strings"]], "astype() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.astype"]], "attach() (arkouda.strings.strings static method)": [[47, "arkouda.strings.Strings.attach"]], "cached_regex_patterns() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.cached_regex_patterns"]], "contains() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.contains"]], "decode() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.decode"]], "dtype (arkouda.strings.strings attribute)": [[47, "arkouda.strings.Strings.dtype"]], "encode() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.encode"]], "endswith() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.endswith"]], "entry (arkouda.strings.strings attribute)": [[47, "arkouda.strings.Strings.entry"]], "find_locations() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.find_locations"]], "findall() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.findall"]], "flatten() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.flatten"]], "from_parts() (arkouda.strings.strings static method)": [[47, "arkouda.strings.Strings.from_parts"]], "from_return_msg() (arkouda.strings.strings static method)": [[47, "arkouda.strings.Strings.from_return_msg"]], "fullmatch() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.fullmatch"]], "get_bytes() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.get_bytes"]], "get_lengths() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.get_lengths"]], "get_offsets() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.get_offsets"]], "get_prefixes() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.get_prefixes"]], "get_suffixes() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.get_suffixes"]], "group() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.group"]], "hash() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.hash"]], "info() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.info"]], "is_registered() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.is_registered"]], "isalnum() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.isalnum"]], "isalpha() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.isalpha"]], "isdigit() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.isdigit"]], "islower() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.islower"]], "istitle() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.istitle"]], "isupper() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.isupper"]], "logger (arkouda.strings.strings attribute)": [[47, "arkouda.strings.Strings.logger"]], "lower() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.lower"]], "lstick() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.lstick"]], "match() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.match"]], "nbytes (arkouda.strings.strings attribute)": [[47, "arkouda.strings.Strings.nbytes"]], "ndim (arkouda.strings.strings attribute)": [[47, "arkouda.strings.Strings.ndim"]], "objtype (arkouda.strings.strings attribute)": [[47, "arkouda.strings.Strings.objType"]], "peel() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.peel"]], "pretty_print_info() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.pretty_print_info"]], "purge_cached_regex_patterns() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.purge_cached_regex_patterns"]], "register() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.register"]], "rpeel() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.rpeel"]], "save() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.save"]], "search() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.search"]], "shape (arkouda.strings.strings attribute)": [[47, "arkouda.strings.Strings.shape"]], "size (arkouda.strings.strings attribute)": [[47, "arkouda.strings.Strings.size"]], "split() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.split"]], "startswith() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.startswith"]], "stick() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.stick"]], "strip() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.strip"]], "sub() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.sub"]], "subn() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.subn"]], "title() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.title"]], "to_csv() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.to_csv"]], "to_hdf() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.to_hdf"]], "to_list() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.to_list"]], "to_ndarray() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.to_ndarray"]], "to_parquet() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.to_parquet"]], "transfer() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.transfer"]], "unregister() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.unregister"]], "unregister_strings_by_name() (arkouda.strings.strings static method)": [[47, "arkouda.strings.Strings.unregister_strings_by_name"]], "update_hdf() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.update_hdf"]], "upper() (arkouda.strings.strings method)": [[47, "arkouda.strings.Strings.upper"]], "datetime (class in arkouda.timeclass)": [[48, "arkouda.timeclass.Datetime"]], "timedelta (class in arkouda.timeclass)": [[48, "arkouda.timeclass.Timedelta"]], "abs() (arkouda.timeclass.timedelta method)": [[48, "arkouda.timeclass.Timedelta.abs"]], "arkouda.timeclass": [[48, "module-arkouda.timeclass"]], "components (arkouda.timeclass.timedelta property)": [[48, "arkouda.timeclass.Timedelta.components"]], "date (arkouda.timeclass.datetime property)": [[48, "arkouda.timeclass.Datetime.date"]], "date_range() (in module arkouda.timeclass)": [[48, "arkouda.timeclass.date_range"]], "day (arkouda.timeclass.datetime property)": [[48, "arkouda.timeclass.Datetime.day"]], "day_of_week (arkouda.timeclass.datetime property)": [[48, "arkouda.timeclass.Datetime.day_of_week"]], "day_of_year (arkouda.timeclass.datetime property)": [[48, "arkouda.timeclass.Datetime.day_of_year"]], "dayofweek (arkouda.timeclass.datetime property)": [[48, "arkouda.timeclass.Datetime.dayofweek"]], "dayofyear (arkouda.timeclass.datetime property)": [[48, "arkouda.timeclass.Datetime.dayofyear"]], "days (arkouda.timeclass.timedelta property)": [[48, "arkouda.timeclass.Timedelta.days"]], "hour (arkouda.timeclass.datetime property)": [[48, "arkouda.timeclass.Datetime.hour"]], "is_leap_year (arkouda.timeclass.datetime property)": [[48, "arkouda.timeclass.Datetime.is_leap_year"]], "is_registered() (arkouda.timeclass.datetime method)": [[48, "arkouda.timeclass.Datetime.is_registered"]], "is_registered() (arkouda.timeclass.timedelta method)": [[48, "arkouda.timeclass.Timedelta.is_registered"]], "isocalendar() (arkouda.timeclass.datetime method)": [[48, "arkouda.timeclass.Datetime.isocalendar"]], "microsecond (arkouda.timeclass.datetime property)": [[48, "arkouda.timeclass.Datetime.microsecond"]], "microseconds (arkouda.timeclass.timedelta property)": [[48, "arkouda.timeclass.Timedelta.microseconds"]], "millisecond (arkouda.timeclass.datetime property)": [[48, "arkouda.timeclass.Datetime.millisecond"]], "minute (arkouda.timeclass.datetime property)": [[48, "arkouda.timeclass.Datetime.minute"]], "month (arkouda.timeclass.datetime property)": [[48, "arkouda.timeclass.Datetime.month"]], "nanosecond (arkouda.timeclass.datetime property)": [[48, "arkouda.timeclass.Datetime.nanosecond"]], "nanoseconds (arkouda.timeclass.timedelta property)": [[48, "arkouda.timeclass.Timedelta.nanoseconds"]], "register() (arkouda.timeclass.datetime method)": [[48, "arkouda.timeclass.Datetime.register"]], "register() (arkouda.timeclass.timedelta method)": [[48, "arkouda.timeclass.Timedelta.register"]], "second (arkouda.timeclass.datetime property)": [[48, "arkouda.timeclass.Datetime.second"]], "seconds (arkouda.timeclass.timedelta property)": [[48, "arkouda.timeclass.Timedelta.seconds"]], "special_objtype (arkouda.timeclass.datetime attribute)": [[48, "arkouda.timeclass.Datetime.special_objType"]], "special_objtype (arkouda.timeclass.timedelta attribute)": [[48, "arkouda.timeclass.Timedelta.special_objType"]], "std() (arkouda.timeclass.timedelta method)": [[48, "arkouda.timeclass.Timedelta.std"]], "sum() (arkouda.timeclass.datetime method)": [[48, "arkouda.timeclass.Datetime.sum"]], "sum() (arkouda.timeclass.timedelta method)": [[48, "arkouda.timeclass.Timedelta.sum"]], "supported_opeq (arkouda.timeclass.datetime attribute)": [[48, "arkouda.timeclass.Datetime.supported_opeq"]], "supported_opeq (arkouda.timeclass.timedelta attribute)": [[48, "arkouda.timeclass.Timedelta.supported_opeq"]], "supported_with_datetime (arkouda.timeclass.datetime attribute)": [[48, "arkouda.timeclass.Datetime.supported_with_datetime"]], "supported_with_datetime (arkouda.timeclass.timedelta attribute)": [[48, "arkouda.timeclass.Timedelta.supported_with_datetime"]], "supported_with_pdarray (arkouda.timeclass.datetime attribute)": [[48, "arkouda.timeclass.Datetime.supported_with_pdarray"]], "supported_with_pdarray (arkouda.timeclass.timedelta attribute)": [[48, "arkouda.timeclass.Timedelta.supported_with_pdarray"]], "supported_with_r_datetime (arkouda.timeclass.datetime attribute)": [[48, "arkouda.timeclass.Datetime.supported_with_r_datetime"]], "supported_with_r_datetime (arkouda.timeclass.timedelta attribute)": [[48, "arkouda.timeclass.Timedelta.supported_with_r_datetime"]], "supported_with_r_pdarray (arkouda.timeclass.datetime attribute)": [[48, "arkouda.timeclass.Datetime.supported_with_r_pdarray"]], "supported_with_r_pdarray (arkouda.timeclass.timedelta attribute)": [[48, "arkouda.timeclass.Timedelta.supported_with_r_pdarray"]], "supported_with_r_timedelta (arkouda.timeclass.datetime attribute)": [[48, "arkouda.timeclass.Datetime.supported_with_r_timedelta"]], "supported_with_r_timedelta (arkouda.timeclass.timedelta attribute)": [[48, "arkouda.timeclass.Timedelta.supported_with_r_timedelta"]], "supported_with_timedelta (arkouda.timeclass.datetime attribute)": [[48, "arkouda.timeclass.Datetime.supported_with_timedelta"]], "supported_with_timedelta (arkouda.timeclass.timedelta attribute)": [[48, "arkouda.timeclass.Timedelta.supported_with_timedelta"]], "timedelta_range() (in module arkouda.timeclass)": [[48, "arkouda.timeclass.timedelta_range"]], "to_pandas() (arkouda.timeclass.datetime method)": [[48, "arkouda.timeclass.Datetime.to_pandas"]], "to_pandas() (arkouda.timeclass.timedelta method)": [[48, "arkouda.timeclass.Timedelta.to_pandas"]], "total_seconds() (arkouda.timeclass.timedelta method)": [[48, "arkouda.timeclass.Timedelta.total_seconds"]], "unregister() (arkouda.timeclass.datetime method)": [[48, "arkouda.timeclass.Datetime.unregister"]], "unregister() (arkouda.timeclass.timedelta method)": [[48, "arkouda.timeclass.Timedelta.unregister"]], "week (arkouda.timeclass.datetime property)": [[48, "arkouda.timeclass.Datetime.week"]], "weekday (arkouda.timeclass.datetime property)": [[48, "arkouda.timeclass.Datetime.weekday"]], "weekofyear (arkouda.timeclass.datetime property)": [[48, "arkouda.timeclass.Datetime.weekofyear"]], "year (arkouda.timeclass.datetime property)": [[48, "arkouda.timeclass.Datetime.year"]], "arkouda.util": [[49, "module-arkouda.util"]], "attach() (in module arkouda.util)": [[49, "arkouda.util.attach"]], "attach_all() (in module arkouda.util)": [[49, "arkouda.util.attach_all"]], "broadcast_dims() (in module arkouda.util)": [[49, "arkouda.util.broadcast_dims"]], "concatenate() (in module arkouda.util)": [[49, "arkouda.util.concatenate"]], "convert_if_categorical() (in module arkouda.util)": [[49, "arkouda.util.convert_if_categorical"]], "enrich_inplace() (in module arkouda.util)": [[49, "arkouda.util.enrich_inplace"]], "expand() (in module arkouda.util)": [[49, "arkouda.util.expand"]], "generic_concat() (in module arkouda.util)": [[49, "arkouda.util.generic_concat"]], "get_callback() (in module arkouda.util)": [[49, "arkouda.util.get_callback"]], "identity() (in module arkouda.util)": [[49, "arkouda.util.identity"]], "invert_permutation() (in module arkouda.util)": [[49, "arkouda.util.invert_permutation"]], "is_registered() (in module arkouda.util)": [[49, "arkouda.util.is_registered"]], "most_common() (in module arkouda.util)": [[49, "arkouda.util.most_common"]], "register() (in module arkouda.util)": [[49, "arkouda.util.register"]], "register_all() (in module arkouda.util)": [[49, "arkouda.util.register_all"]], "report_mem() (in module arkouda.util)": [[49, "arkouda.util.report_mem"]], "unregister() (in module arkouda.util)": [[49, "arkouda.util.unregister"]], "unregister_all() (in module arkouda.util)": [[49, "arkouda.util.unregister_all"]], "to_ndarray() (in module arkouda.strings)": [[77, "arkouda.Strings.to_ndarray"], [93, "arkouda.Strings.to_ndarray"]], "to_ndarray() (in module arkouda.pdarray)": [[77, "arkouda.pdarray.to_ndarray"], [88, "arkouda.pdarray.to_ndarray"]], "argsort() (in module arkouda.index)": [[78, "arkouda.Index.argsort"]], "argsort() (in module arkouda.multiindex)": [[78, "arkouda.MultiIndex.argsort"]], "concat() (in module arkouda.index)": [[78, "arkouda.Index.concat"]], "concat() (in module arkouda.multiindex)": [[78, "arkouda.MultiIndex.concat"]], "lookup() (in module arkouda.index)": [[78, "arkouda.Index.lookup"]], "lookup() (in module arkouda.multiindex)": [[78, "arkouda.MultiIndex.lookup"]], "set_dtype() (in module arkouda.index)": [[78, "arkouda.Index.set_dtype"]], "set_dtype() (in module arkouda.multiindex)": [[78, "arkouda.MultiIndex.set_dtype"]], "to_ndarray() (in module arkouda.arrayview)": [[81, "arkouda.ArrayView.to_ndarray"]], "categorical (class in arkouda)": [[82, "arkouda.Categorical"]], "categories (arkouda.categorical attribute)": [[82, "arkouda.Categorical.categories"]], "codes (arkouda.categorical attribute)": [[82, "arkouda.Categorical.codes"]], "contains() (arkouda.categorical method)": [[82, "arkouda.Categorical.contains"]], "endswith() (arkouda.categorical method)": [[82, "arkouda.Categorical.endswith"]], "from_codes() (arkouda.categorical class method)": [[82, "arkouda.Categorical.from_codes"]], "ndim (arkouda.categorical attribute)": [[82, "arkouda.Categorical.ndim"]], "nlevels (arkouda.categorical attribute)": [[82, "arkouda.Categorical.nlevels"]], "permutation (arkouda.categorical attribute)": [[82, "arkouda.Categorical.permutation"]], "segments (arkouda.categorical attribute)": [[82, "arkouda.Categorical.segments"]], "shape (arkouda.categorical attribute)": [[82, "arkouda.Categorical.shape"]], "size (arkouda.categorical attribute)": [[82, "arkouda.Categorical.size"]], "startswith() (arkouda.categorical method)": [[82, "arkouda.Categorical.startswith"]], "to_ndarray() (in module arkouda.categorical)": [[82, "arkouda.Categorical.to_ndarray"]], "apply_permutation() (in module arkouda.dataframe)": [[84, "arkouda.DataFrame.apply_permutation"]], "argsort() (in module arkouda.dataframe)": [[84, "arkouda.DataFrame.argsort"]], "coargsort() (in module arkouda.dataframe)": [[84, "arkouda.DataFrame.coargsort"]], "concat() (in module arkouda.dataframe)": [[84, "arkouda.DataFrame.concat"]], "copy() (in module arkouda.dataframe)": [[84, "arkouda.DataFrame.copy"]], "drop() (in module arkouda.dataframe)": [[84, "arkouda.DataFrame.drop"]], "drop_duplicates() (in module arkouda.dataframe)": [[84, "arkouda.DataFrame.drop_duplicates"]], "groupby() (in module arkouda.dataframe)": [[84, "arkouda.DataFrame.groupby"]], "head() (in module arkouda.dataframe)": [[84, "arkouda.DataFrame.head"]], "rename() (in module arkouda.dataframe)": [[84, "arkouda.DataFrame.rename"]], "reset_index() (in module arkouda.dataframe)": [[84, "arkouda.DataFrame.reset_index"]], "sort_values() (in module arkouda.dataframe)": [[84, "arkouda.DataFrame.sort_values"]], "tail() (in module arkouda.dataframe)": [[84, "arkouda.DataFrame.tail"]], "to_pandas() (in module arkouda.dataframe)": [[84, "arkouda.DataFrame.to_pandas"]], "append() (in module arkouda.segarray)": [[89, "arkouda.SegArray.append"]], "append_single() (in module arkouda.segarray)": [[89, "arkouda.SegArray.append_single"]], "get_jth() (in module arkouda.segarray)": [[89, "arkouda.SegArray.get_jth"]], "get_length_n() (in module arkouda.segarray)": [[89, "arkouda.SegArray.get_length_n"]], "get_ngrams() (in module arkouda.segarray)": [[89, "arkouda.SegArray.get_ngrams"]], "get_prefixes() (in module arkouda.segarray)": [[89, "arkouda.SegArray.get_prefixes"]], "get_suffixes() (in module arkouda.segarray)": [[89, "arkouda.SegArray.get_suffixes"]], "intersect() (in module arkouda.segarray)": [[89, "arkouda.SegArray.intersect"]], "prepend_single() (in module arkouda.segarray)": [[89, "arkouda.SegArray.prepend_single"]], "remove_repeats() (in module arkouda.segarray)": [[89, "arkouda.SegArray.remove_repeats"]], "set_jth() (in module arkouda.segarray)": [[89, "arkouda.SegArray.set_jth"]], "setdiff() (in module arkouda.segarray)": [[89, "arkouda.SegArray.setdiff"]], "setxor() (in module arkouda.segarray)": [[89, "arkouda.SegArray.setxor"]], "to_ndarray() (in module arkouda.segarray)": [[89, "arkouda.SegArray.to_ndarray"]], "union() (in module arkouda.segarray)": [[89, "arkouda.SegArray.union"]], "head() (in module arkouda.series)": [[90, "arkouda.Series.head"]], "locate() (in module arkouda.series)": [[90, "arkouda.Series.locate"], [90, "id0"]], "pdconcat() (in module arkouda.series)": [[90, "arkouda.Series.pdconcat"]], "sort_index() (in module arkouda.series)": [[90, "arkouda.Series.sort_index"]], "sort_values() (in module arkouda.series)": [[90, "arkouda.Series.sort_values"]], "tail() (in module arkouda.series)": [[90, "arkouda.Series.tail"]], "to_pandas() (in module arkouda.series)": [[90, "arkouda.Series.to_pandas"]], "topn() (in module arkouda.series)": [[90, "arkouda.Series.topn"]], "value_counts() (in module arkouda.series)": [[90, "arkouda.Series.value_counts"]], "connect() (in module arkouda)": [[92, "arkouda.connect"]]}})