Search.setIndex({"docnames": ["CONTRIBUTING_LINK", "ENVIRONMENT", "autoapi/arkouda/accessor/index", "autoapi/arkouda/akmath/_math/index", "autoapi/arkouda/akmath/index", "autoapi/arkouda/akstats/_stats_py/index", "autoapi/arkouda/akstats/index", "autoapi/arkouda/alignment/index", "autoapi/arkouda/array_api/_array_object/index", "autoapi/arkouda/array_api/_constants/index", "autoapi/arkouda/array_api/_creation_functions/index", "autoapi/arkouda/array_api/_data_type_functions/index", "autoapi/arkouda/array_api/_dtypes/index", "autoapi/arkouda/array_api/_elementwise_functions/index", "autoapi/arkouda/array_api/_indexing_functions/index", "autoapi/arkouda/array_api/_manipulation_functions/index", "autoapi/arkouda/array_api/_searching_functions/index", "autoapi/arkouda/array_api/_set_functions/index", "autoapi/arkouda/array_api/_sorting_functions/index", "autoapi/arkouda/array_api/_statistical_functions/index", "autoapi/arkouda/array_api/_typing/index", "autoapi/arkouda/array_api/_utility_functions/index", "autoapi/arkouda/array_api/index", "autoapi/arkouda/array_api/linalg/index", "autoapi/arkouda/array_view/index", "autoapi/arkouda/categorical/index", "autoapi/arkouda/client/index", "autoapi/arkouda/client_dtypes/index", "autoapi/arkouda/dataframe/index", "autoapi/arkouda/dtypes/index", "autoapi/arkouda/groupbyclass/index", "autoapi/arkouda/history/index", "autoapi/arkouda/index", "autoapi/arkouda/index/index", "autoapi/arkouda/infoclass/index", "autoapi/arkouda/io/index", "autoapi/arkouda/io_util/index", "autoapi/arkouda/join/index", "autoapi/arkouda/logger/index", "autoapi/arkouda/match/index", "autoapi/arkouda/matcher/index", "autoapi/arkouda/numeric/index", "autoapi/arkouda/pdarrayclass/index", "autoapi/arkouda/pdarraycreation/index", "autoapi/arkouda/pdarraysetops/index", "autoapi/arkouda/plotting/index", "autoapi/arkouda/row/index", "autoapi/arkouda/security/index", "autoapi/arkouda/segarray/index", "autoapi/arkouda/series/index", "autoapi/arkouda/sorting/index", "autoapi/arkouda/strings/index", "autoapi/arkouda/timeclass/index", "autoapi/arkouda/util/index", "autoapi/index", "developer/ADDING_FEATURES", "developer/BENCHMARK", "developer/GASNET", "developer/MEMORY", "developer/RELEASE_PROCESS", "developer/TIPS", "developer/USER_BUGS", "developer/dev_menu", "examples", "file_io/CSV", "file_io/HDF5", "file_io/IMPORT_EXPORT", "file_io/PARQUET", "file_io/io_menu", "index", "quickstart", "server/index", "setup/BUILD", "setup/LINUX_INSTALL", "setup/MAC_INSTALL", "setup/MODULAR", "setup/REQUIREMENTS", "setup/WINDOWS_INSTALL", "setup/install_menu", "setup/testing", "usage", "usage/IO", "usage/Index", "usage/argsort", "usage/arithmetic", "usage/arrayview", "usage/categorical", "usage/creation", "usage/dataframe", "usage/groupby", "usage/histogram", "usage/indexing", "usage/pdarray", "usage/segarray", "usage/series", "usage/setops", "usage/startup", "usage/strings"], "filenames": ["CONTRIBUTING_LINK.md", "ENVIRONMENT.md", "autoapi/arkouda/accessor/index.rst", "autoapi/arkouda/akmath/_math/index.rst", "autoapi/arkouda/akmath/index.rst", "autoapi/arkouda/akstats/_stats_py/index.rst", "autoapi/arkouda/akstats/index.rst", "autoapi/arkouda/alignment/index.rst", "autoapi/arkouda/array_api/_array_object/index.rst", "autoapi/arkouda/array_api/_constants/index.rst", "autoapi/arkouda/array_api/_creation_functions/index.rst", "autoapi/arkouda/array_api/_data_type_functions/index.rst", "autoapi/arkouda/array_api/_dtypes/index.rst", "autoapi/arkouda/array_api/_elementwise_functions/index.rst", "autoapi/arkouda/array_api/_indexing_functions/index.rst", "autoapi/arkouda/array_api/_manipulation_functions/index.rst", "autoapi/arkouda/array_api/_searching_functions/index.rst", "autoapi/arkouda/array_api/_set_functions/index.rst", "autoapi/arkouda/array_api/_sorting_functions/index.rst", "autoapi/arkouda/array_api/_statistical_functions/index.rst", "autoapi/arkouda/array_api/_typing/index.rst", "autoapi/arkouda/array_api/_utility_functions/index.rst", "autoapi/arkouda/array_api/index.rst", "autoapi/arkouda/array_api/linalg/index.rst", "autoapi/arkouda/array_view/index.rst", "autoapi/arkouda/categorical/index.rst", "autoapi/arkouda/client/index.rst", "autoapi/arkouda/client_dtypes/index.rst", "autoapi/arkouda/dataframe/index.rst", "autoapi/arkouda/dtypes/index.rst", "autoapi/arkouda/groupbyclass/index.rst", "autoapi/arkouda/history/index.rst", "autoapi/arkouda/index.rst", "autoapi/arkouda/index/index.rst", "autoapi/arkouda/infoclass/index.rst", "autoapi/arkouda/io/index.rst", "autoapi/arkouda/io_util/index.rst", "autoapi/arkouda/join/index.rst", "autoapi/arkouda/logger/index.rst", "autoapi/arkouda/match/index.rst", "autoapi/arkouda/matcher/index.rst", "autoapi/arkouda/numeric/index.rst", "autoapi/arkouda/pdarrayclass/index.rst", "autoapi/arkouda/pdarraycreation/index.rst", "autoapi/arkouda/pdarraysetops/index.rst", "autoapi/arkouda/plotting/index.rst", "autoapi/arkouda/row/index.rst", "autoapi/arkouda/security/index.rst", "autoapi/arkouda/segarray/index.rst", "autoapi/arkouda/series/index.rst", "autoapi/arkouda/sorting/index.rst", "autoapi/arkouda/strings/index.rst", "autoapi/arkouda/timeclass/index.rst", "autoapi/arkouda/util/index.rst", "autoapi/index.rst", "developer/ADDING_FEATURES.md", "developer/BENCHMARK.md", "developer/GASNET.md", "developer/MEMORY.md", "developer/RELEASE_PROCESS.md", "developer/TIPS.md", "developer/USER_BUGS.md", "developer/dev_menu.rst", "examples.rst", "file_io/CSV.md", "file_io/HDF5.md", "file_io/IMPORT_EXPORT.md", "file_io/PARQUET.md", "file_io/io_menu.rst", "index.rst", "quickstart.rst", "server/index.rst", "setup/BUILD.md", "setup/LINUX_INSTALL.md", "setup/MAC_INSTALL.md", "setup/MODULAR.md", "setup/REQUIREMENTS.md", "setup/WINDOWS_INSTALL.md", "setup/install_menu.rst", "setup/testing.rst", "usage.rst", "usage/IO.rst", "usage/Index.rst", "usage/argsort.rst", "usage/arithmetic.rst", "usage/arrayview.rst", "usage/categorical.rst", "usage/creation.rst", "usage/dataframe.rst", "usage/groupby.rst", "usage/histogram.rst", "usage/indexing.rst", "usage/pdarray.rst", "usage/segarray.rst", "usage/series.rst", "usage/setops.rst", "usage/startup.rst", "usage/strings.rst"], "titles": ["Contributing", "Environment Variables", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.accessor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.akmath._math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.akmath</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.akstats._stats_py</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.akstats</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.alignment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._array_object</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._constants</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._creation_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._data_type_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._dtypes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._elementwise_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._indexing_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._manipulation_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._searching_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._set_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._sorting_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._statistical_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._typing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._utility_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api.linalg</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_view</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.categorical</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.client</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.client_dtypes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.dataframe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.dtypes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.groupbyclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.index</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.infoclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.io</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.io_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.join</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.match</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.numeric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.pdarrayclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.pdarraycreation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.pdarraysetops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.plotting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.row</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.security</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.segarray</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.series</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.sorting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.strings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.timeclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.util</span></code>", "API Reference", "Adding Your First Feature", "PyTest Benchmarks", "GASNet Development", "Reducing Memory Usage of Arkouda Builds", "Release Process", "Speeding up Arkouda Compilation", "Tips for Reproducing User Bugs", "Developer Documentation", "Examples", "CSV", "HDF5", "Import/Export", "Parquet", "File I/O", "Arkouda Documentation", "Quickstart", "Chapel API Reference", "Building the Server", "Linux", "MacOS", "Modular Server Builds", "Requirements", "Windows (WSL2)", "Installation", "Performance Testing", "Usage Guide", "Data I/O", "Indexs in Arkouda", "Sorting", "Arithmetic and Numeric Operations", "ArrayView in Arkouda", "Categoricals", "Creating Arrays", "DataFrames in Arkouda", "GroupBy", "Summarizing Data", "Indexing and Assignment", "The <code class=\"docutils literal notranslate\"><span class=\"pre\">pdarray</span></code> class", "SegArrays in Arkouda", "Series in Arkouda", "Array Set Operations", "Startup", "Strings in Arkouda"], "terms": {"i": [0, 1, 3, 4, 5, 6, 7, 8, 11, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 70, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96], "an": [0, 1, 7, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 70, 73, 77, 79, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97], "open": [0, 7, 25, 28, 32, 33, 35, 36, 42, 48, 51, 52, 77], "sourc": [0, 1, 5, 6, 32, 57, 65, 70, 72, 73], "project": [0, 56, 59, 72], "we": [0, 1, 8, 28, 32, 33, 35, 41, 42, 51, 55, 56, 57, 59, 61, 63, 64, 67, 72, 73, 74, 76, 77, 90, 92], "love": 0, "see": [0, 1, 7, 8, 11, 13, 14, 15, 16, 17, 18, 20, 21, 30, 32, 41, 42, 45, 49, 51, 52, 53, 55, 56, 59, 60, 61, 70, 72, 75, 81, 84, 86, 89, 90, 92, 93, 94, 95, 97], "new": [0, 24, 25, 28, 30, 32, 33, 35, 36, 38, 39, 40, 41, 42, 45, 48, 49, 51, 55, 59, 60, 61, 76, 88, 89, 92, 93, 94, 97], "contributor": [0, 5, 6, 32], "welcom": 0, "via": [0, 1, 25, 28, 30, 32, 42, 43, 51, 55, 72, 73, 74, 81, 86, 89, 91, 92, 97], "most": [0, 1, 27, 30, 32, 40, 49, 51, 56, 58, 59, 63, 65, 70, 72, 74, 77, 81, 87, 89, 92, 94, 97], "fall": 0, "under": [0, 2, 24, 25, 27, 28, 30, 32, 33, 35, 42, 43, 48, 49, 51, 52, 56, 59, 81, 85, 86, 89, 92, 97], "broad": 0, "categori": [0, 25, 32, 50, 59, 65, 80, 83, 86], "If": [0, 1, 7, 24, 25, 26, 27, 28, 30, 32, 33, 35, 36, 39, 40, 41, 42, 43, 44, 48, 49, 51, 52, 55, 57, 58, 59, 60, 64, 65, 67, 70, 72, 73, 74, 75, 77, 78, 81, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97], "your": [0, 1, 28, 32, 33, 35, 42, 51, 57, 58, 59, 61, 62, 70, 72, 73, 74, 75, 76, 77, 78, 88, 96, 97], "doesn": [0, 59, 72], "t": [0, 8, 20, 28, 32, 35, 51, 52, 55, 59, 60, 61, 72, 73, 74, 77, 79, 97], "fit": [0, 56, 59, 81], "either": [0, 25, 28, 30, 32, 34, 35, 41, 42, 43, 44, 48, 49, 75, 77, 81, 93, 94, 95], "pleas": [0, 25, 27, 28, 30, 32, 33, 35, 42, 48, 49, 51, 52, 57, 59, 60, 63, 65, 67, 68, 72, 73, 74, 75, 86, 88, 89], "add": [0, 1, 13, 24, 25, 28, 30, 32, 35, 48, 49, 55, 59, 72, 73, 74, 75, 77, 88, 89], "anywai": [0, 87], "provid": [0, 11, 24, 25, 28, 30, 32, 33, 35, 42, 48, 51, 53, 56, 58, 63, 64, 65, 67, 68, 72, 73, 74, 76, 81, 84, 88, 89, 93], "much": [0, 7, 24, 25, 28, 32, 35, 42, 48, 51, 58, 63, 65, 81, 85, 86, 92, 97], "detail": [0, 11, 20, 32, 34, 42, 56, 59, 72, 73, 74, 76, 90, 96, 97], "possibl": [0, 28, 32, 35, 41, 48, 51, 52, 55, 56, 59, 63, 72, 77, 81, 93, 97], "It": [0, 8, 27, 28, 32, 42, 47, 48, 53, 57, 58, 61, 63, 64, 65, 67, 70, 72, 73, 74, 77, 88, 89, 93], "alwai": [0, 30, 32, 35, 42, 52, 64, 81, 84, 86, 88, 89, 90, 92, 97], "good": [0, 59, 61], "idea": [0, 59, 61, 64, 81], "current": [0, 24, 25, 26, 28, 30, 32, 33, 34, 35, 41, 42, 43, 47, 51, 58, 59, 60, 64, 65, 66, 67, 73, 74, 78, 81, 82, 84, 86, 87, 88, 89, 90, 92, 93, 96, 97], "list": [0, 7, 8, 10, 15, 20, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 41, 42, 43, 44, 45, 48, 49, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 64, 68, 70, 72, 74, 75, 78, 81, 82, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97], "make": [0, 1, 25, 27, 28, 32, 41, 52, 55, 56, 57, 58, 59, 61, 70, 72, 73, 74, 75, 77, 86, 88], "sure": [0, 28, 32, 33, 35, 42, 51, 59, 77], "alreadi": [0, 1, 25, 28, 30, 32, 33, 35, 42, 48, 49, 51, 52, 60, 64, 65, 67, 72, 86, 89, 95], "present": [0, 7, 25, 27, 28, 32, 33, 35, 41, 42, 44, 48, 49, 51, 63, 65, 81, 90, 95], "us": [0, 1, 5, 6, 7, 8, 20, 25, 26, 27, 28, 30, 31, 32, 33, 35, 38, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 62, 64, 65, 66, 67, 73, 74, 77, 78, 79, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97], "github": [0, 5, 6, 28, 32, 59, 61, 72, 73, 74, 78], "markdown": 0, "especi": [0, 25, 28, 32, 61, 74, 86], "block": [0, 25, 32, 44, 51, 55, 63, 70, 87], "veri": [0, 28, 32, 63, 87, 88], "appreci": 0, "when": [0, 1, 7, 24, 25, 27, 28, 30, 32, 33, 35, 41, 42, 44, 48, 49, 51, 52, 53, 55, 56, 59, 60, 61, 63, 65, 67, 70, 72, 74, 75, 76, 77, 81, 84, 86, 88, 89, 92, 93, 95], "includ": [0, 1, 7, 28, 30, 32, 33, 34, 35, 41, 42, 51, 52, 55, 56, 59, 64, 65, 70, 72, 73, 75, 81, 84, 88, 89, 92, 93], "follow": [0, 1, 5, 6, 7, 26, 32, 41, 55, 56, 57, 59, 70, 72, 73, 74, 75, 76, 77, 78, 84, 86, 89, 92, 93, 95, 96, 97], "inform": [0, 1, 8, 11, 13, 14, 15, 16, 17, 18, 20, 21, 25, 26, 30, 32, 34, 42, 51, 56, 59, 60, 61, 63, 64, 65, 67, 68, 70, 72, 73, 74, 75, 76, 86, 93, 95, 97], "summari": [0, 28, 32], "problem": [0, 56, 70, 79], "what": [0, 29, 32, 48, 55, 59, 60, 61, 75, 96], "behavior": [0, 8, 28, 32, 42, 43, 84, 85, 87, 88, 97], "did": [0, 26], "you": [0, 1, 25, 27, 28, 30, 32, 33, 35, 42, 48, 49, 51, 52, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 70, 72, 73, 74, 75, 76, 77, 78, 88, 89, 91], "observ": [0, 5, 6, 32, 42, 84], "encount": [0, 32, 35], "expect": [0, 5, 6, 24, 28, 30, 32, 33, 35, 42, 51, 56, 65, 73, 74, 81, 85, 89, 92], "thi": [0, 1, 5, 6, 8, 20, 24, 25, 26, 27, 28, 30, 32, 33, 35, 38, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 70, 72, 73, 74, 75, 77, 78, 81, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97], "known": [0, 32, 41], "work": [0, 25, 28, 32, 35, 42, 44, 46, 51, 60, 63, 65, 67, 70, 73, 74, 75, 81, 86, 88, 91, 95, 97], "around": [0, 8, 20, 27, 32, 59, 61], "step": [0, 10, 30, 32, 56, 57, 58, 61, 72, 75, 78, 95, 96], "reproduc": [0, 62], "simplifi": [0, 56], "program": [0, 25, 27, 28, 30, 32, 33, 42, 48, 49, 51, 52, 70, 89, 96], "demonstr": [0, 55], "configur": [0, 1, 32, 56, 63, 70, 74, 77, 82, 88, 94], "": [0, 1, 2, 7, 24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 41, 42, 47, 48, 49, 51, 52, 55, 58, 59, 63, 72, 73, 74, 77, 78, 79, 81, 84, 85, 86, 88, 89, 90, 92, 93, 94, 96, 97], "output": [0, 1, 24, 25, 27, 28, 30, 32, 33, 35, 41, 42, 48, 51, 59, 63, 67, 70, 81, 84, 89, 90, 92, 95, 96], "ak": [0, 1, 3, 4, 5, 6, 7, 13, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 39, 41, 42, 43, 44, 45, 48, 50, 51, 52, 53, 55, 60, 61, 63, 64, 70, 72, 75, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97], "get_config": [0, 26], "like": [0, 2, 7, 27, 28, 30, 32, 42, 52, 57, 59, 60, 61, 63, 66, 70, 72, 75, 81, 82, 88, 89, 91, 94, 96, 97], "arkoudavers": 0, "version": [0, 5, 6, 25, 32, 53, 56, 59, 65, 70, 72, 73, 74, 76, 77], "server": [0, 1, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 38, 39, 42, 43, 47, 48, 49, 51, 52, 58, 60, 61, 73, 74, 77, 79, 80, 84, 85, 86, 87, 88, 89, 90, 92, 93, 97], "wa": [0, 24, 25, 27, 28, 30, 32, 33, 35, 41, 42, 48, 49, 51, 52, 60, 65, 66, 72, 74, 81, 89, 92, 93], "built": [0, 24, 25, 32, 42, 51, 57, 59, 60, 61, 70, 72, 74, 75, 81, 85, 86, 92, 97], "Be": [0, 28, 32, 33, 35, 42, 51, 55], "specif": [0, 8, 20, 28, 32, 35, 61, 64, 65, 66, 73, 75, 80, 81, 88], "exampl": [0, 3, 4, 5, 6, 7, 20, 24, 25, 26, 28, 30, 32, 35, 39, 41, 42, 43, 44, 45, 48, 50, 51, 52, 53, 56, 59, 65, 70, 72, 74, 75, 77, 81, 83, 84, 85, 87, 88, 89, 90, 92, 93, 95, 96, 97], "appropri": [0, 28, 32, 35, 55, 59, 66, 70, 72, 76, 81], "base": [0, 1, 2, 5, 6, 7, 8, 17, 20, 24, 25, 27, 28, 31, 32, 33, 35, 38, 41, 42, 46, 50, 52, 59, 72, 74, 78, 80, 81, 82, 83, 84, 85, 86, 88, 92, 94, 97], "anoth": [0, 28, 30, 32, 35, 41, 42, 51, 65, 70, 74, 77, 81, 88, 89, 91, 92, 93, 97], "librari": [0, 1, 55, 77, 97], "e": [0, 1, 2, 7, 9, 25, 27, 28, 30, 32, 35, 41, 42, 43, 48, 51, 52, 55, 59, 60, 61, 73, 74, 76, 81, 84, 86, 87, 89, 93, 96, 97], "numpi": [0, 3, 4, 5, 6, 8, 20, 24, 25, 27, 28, 29, 30, 32, 33, 37, 41, 42, 43, 48, 49, 51, 52, 55, 56, 63, 76, 79, 81, 84, 85, 86, 87, 88, 90, 91, 92, 93, 95, 97], "panda": [0, 28, 32, 33, 35, 43, 49, 52, 55, 66, 68, 76, 81, 82, 86, 88], "scipi": [0, 5, 6, 32, 76], "link": [0, 1, 32, 35, 52, 59, 72, 73], "support": [0, 25, 27, 28, 29, 30, 32, 33, 35, 36, 41, 42, 43, 44, 47, 48, 49, 51, 52, 55, 63, 66, 70, 73, 74, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97], "document": [0, 1, 54, 55, 56, 60, 61, 63, 68, 74, 75], "refer": [0, 5, 6, 30, 32, 60, 63, 72, 74, 76, 89], "don": [0, 28, 32, 35, 51, 60, 61, 77], "have": [0, 1, 3, 4, 7, 25, 28, 30, 32, 33, 35, 41, 42, 43, 44, 45, 48, 49, 51, 52, 55, 58, 59, 60, 61, 63, 64, 65, 67, 72, 73, 74, 75, 76, 81, 84, 86, 87, 88, 89, 92, 93, 94], "anyth": [0, 32, 42, 59], "mind": [0, 20, 63, 77], "check": [0, 1, 7, 20, 24, 25, 28, 30, 32, 33, 35, 41, 42, 48, 51, 53, 55, 59, 60, 61, 79, 86, 95, 96, 97], "out": [0, 26, 28, 32, 41, 48, 60, 61, 64, 65, 67, 72, 75, 90, 91, 93], "our": [0, 32, 42, 55, 56, 58, 59, 63, 65, 70, 72, 77, 78, 81], "outstand": 0, "filter": [0, 28, 31, 32, 48, 81], "label": [0, 25, 28, 30, 32, 33, 45, 49, 86, 88, 89, 94], "first": [0, 7, 28, 30, 32, 35, 36, 41, 42, 43, 44, 49, 51, 57, 61, 62, 63, 64, 65, 70, 72, 73, 75, 80, 81, 84, 87, 88, 89, 90, 94, 97], "identifi": [0, 7, 25, 32, 35, 42, 92], "befor": [0, 32, 52, 56, 72, 81], "start": [0, 7, 8, 10, 20, 25, 30, 32, 33, 37, 39, 42, 43, 48, 50, 51, 52, 65, 80, 83, 86, 87, 89, 91, 93, 97], "onc": [0, 28, 32, 35, 42, 49, 51, 57, 58, 59, 61, 63, 64, 67, 72, 77], "find": [0, 7, 25, 28, 30, 32, 40, 42, 44, 47, 49, 51, 53, 56, 59, 62, 73, 84, 89, 90, 95, 97], "creat": [0, 24, 25, 27, 28, 30, 32, 33, 35, 36, 40, 42, 43, 45, 48, 49, 51, 52, 54, 55, 56, 59, 61, 65, 67, 70, 72, 73, 74, 75, 76, 77, 80, 81, 85, 86, 88, 89, 90, 92], "intend": [0, 25, 27, 28, 32, 41, 42, 48, 51, 64, 70, 73, 74, 82, 88, 94], "leav": [0, 32, 41, 90], "comment": [0, 60, 75], "indic": [0, 7, 11, 14, 17, 24, 25, 26, 27, 28, 30, 32, 33, 35, 37, 39, 41, 42, 44, 48, 49, 50, 51, 52, 53, 63, 65, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97], "mention": [0, 61], "bear": [0, 59, 73, 74], "r": [0, 28, 32, 56, 59, 63, 73, 74, 79], "u": [0, 27, 32, 43, 52, 59, 73, 74, 81], "dev": [0, 28, 32, 73, 74, 76], "awar": 0, "assign": [0, 25, 28, 30, 32, 49, 64, 65, 80, 86, 89, 93, 97], "avoid": [0, 58, 61], "anyon": 0, "duplic": [0, 28, 32, 88], "need": [0, 8, 25, 28, 32, 35, 42, 48, 49, 51, 55, 56, 59, 60, 61, 64, 72, 73, 74, 75, 77, 81, 88, 94], "assist": [0, 75], "want": [0, 1, 28, 32, 70, 74, 76, 88], "discuss": 0, "design": [0, 59, 81], "someon": [0, 59], "tag": [0, 32, 35, 38, 59, 61], "reach": 0, "git": [0, 61, 73, 74], "fork": [0, 72, 73, 74, 78], "workflow": [0, 32, 35, 59, 75, 81], "recommend": [0, 32, 41, 57, 61, 67, 73, 76, 77, 78, 88, 93], "simpl": [0, 20, 63, 75, 90], "branch": [0, 55, 56, 59, 72], "own": [0, 1, 32, 52, 93, 97], "standard": [0, 8, 25, 30, 32, 42, 43, 52, 55, 56, 57, 84, 89, 90], "laid": 0, "pep8": 0, "continu": [0, 59], "integr": [0, 30, 32, 35, 42, 43, 59, 81, 87, 89], "ha": [0, 8, 25, 27, 28, 30, 32, 33, 35, 41, 42, 43, 44, 48, 49, 51, 52, 57, 59, 60, 64, 65, 75, 81, 84, 86, 87, 88, 89, 91, 92, 93, 94], "linter": 0, "flake8": [0, 76], "verifi": [0, 1, 28, 32, 66, 81, 88], "all": [0, 7, 21, 24, 25, 26, 28, 30, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 48, 51, 52, 53, 55, 56, 59, 60, 61, 64, 65, 67, 70, 73, 74, 75, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 97], "meet": 0, "requir": [0, 7, 8, 20, 26, 28, 30, 32, 33, 35, 37, 42, 43, 49, 57, 58, 60, 61, 65, 66, 67, 70, 75, 81, 87, 88, 89], "isort": 0, "black": 0, "typic": [0, 27, 32, 55, 60, 61, 86], "order": [0, 5, 6, 24, 25, 27, 28, 30, 32, 35, 41, 42, 43, 44, 48, 49, 50, 51, 53, 57, 65, 67, 72, 80, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 97], "ensur": [0, 28, 32, 41, 59, 65, 72, 74, 88, 92], "consist": [0, 28, 32, 41, 63, 84, 88], "util": [0, 28, 32, 35, 54, 59, 72, 73, 74], "line": [0, 32, 36, 60, 64, 70, 75, 85, 96], "length": [0, 7, 25, 30, 32, 35, 37, 39, 43, 44, 47, 48, 49, 51, 56, 65, 79, 84, 87, 89, 93, 94, 95, 97], "105": [0, 26], "paramet": [0, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 74, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97], "example_featur": 0, "py": [0, 1, 28, 32, 55, 56, 60, 72, 75, 76, 79], "fix": [0, 32, 41, 52, 59, 77, 97], "reformat": [0, 81], "done": [0, 28, 32, 61, 72, 75, 88], "1": [0, 1, 3, 4, 5, 6, 7, 10, 18, 23, 24, 25, 26, 28, 30, 32, 35, 37, 39, 41, 42, 43, 44, 48, 49, 50, 51, 53, 54, 56, 57, 59, 60, 63, 64, 65, 68, 70, 73, 74, 75, 76, 77, 79, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97], "file": [0, 1, 20, 24, 25, 28, 30, 32, 33, 35, 36, 42, 47, 48, 51, 55, 57, 60, 61, 66, 67, 70, 72, 73, 74, 76, 77, 89, 97], "For": [0, 2, 7, 25, 28, 30, 32, 35, 39, 43, 50, 51, 52, 53, 55, 56, 60, 63, 68, 70, 72, 73, 74, 75, 78, 81, 83, 87, 89, 90, 91, 92, 93, 95, 97], "user": [0, 1, 24, 25, 27, 28, 30, 32, 33, 35, 38, 41, 42, 43, 45, 47, 48, 49, 51, 52, 53, 56, 59, 62, 63, 65, 66, 68, 70, 72, 73, 74, 75, 76, 77, 78, 81, 85, 86, 89, 92, 97], "pycharm": 0, "nice": 0, "interoper": 0, "tool": [0, 73, 74], "style": [0, 25, 27, 28, 30, 32, 33, 42, 48, 49, 51, 52, 88, 89, 92], "doc": [0, 5, 6, 32, 55, 72, 73, 85], "string": [0, 1, 5, 6, 7, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 59, 75, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 92, 93, 94, 95], "look": [0, 1, 55, 59, 60, 63, 75, 81, 96], "similar": [0, 32, 35, 51, 56, 63, 81, 92, 93, 97], "surround": 0, "function": [0, 1, 8, 20, 25, 49, 51, 56, 59, 60, 63, 64, 66, 67, 70, 75, 80, 81, 82, 85, 86, 88, 89, 90, 92, 93, 94, 95, 97], "space": [0, 1, 7, 32, 41, 43, 51, 52, 56, 72, 75, 87, 90, 97], "The": [0, 1, 2, 5, 6, 7, 8, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 55, 57, 59, 63, 64, 65, 66, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97], "ci": 0, "fail": [0, 28, 32, 35, 41, 59, 81, 88, 92], "tab": [0, 59, 72], "ar": [0, 1, 7, 8, 20, 25, 27, 28, 30, 32, 33, 35, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 56, 57, 59, 60, 61, 63, 64, 65, 67, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97], "lowercamelcas": 0, "variabl": [0, 30, 32, 35, 37, 42, 47, 48, 51, 56, 57, 73, 74, 75, 84, 89, 93, 97], "name": [0, 1, 2, 7, 20, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 38, 42, 43, 48, 49, 51, 52, 53, 56, 57, 59, 63, 64, 65, 67, 72, 74, 75, 76, 80, 81, 82, 86, 87, 88, 89, 94], "procedur": 0, "var": [0, 1, 19, 30, 32, 42, 55, 80, 84, 89, 90], "ax": [0, 15], "0": [0, 3, 4, 5, 6, 7, 10, 15, 19, 20, 24, 25, 26, 28, 30, 32, 33, 35, 37, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 55, 56, 57, 63, 64, 65, 70, 73, 74, 76, 77, 79, 81, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97], "real": [0, 13, 32, 43, 59, 65], "proc": [0, 55], "printit": 0, "x": [0, 3, 4, 5, 6, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 27, 28, 29, 30, 32, 35, 41, 42, 45, 48, 51, 53, 63, 77, 81, 84, 85, 86, 88, 89, 92, 93, 97], "writeln": 0, "uppercamelcas": 0, "class": [0, 43, 56, 80, 81, 82, 85, 86, 88, 89, 93, 94, 97], "foo": [0, 2, 32], "foopar": 0, "re": [0, 25, 26, 28, 30, 32, 72, 89, 96, 97], "confirm": [0, 59], "again": [0, 61, 63, 64, 72, 73], "realli": [0, 32, 51], "behav": [0, 24, 32, 85], "properli": [0, 60, 65, 73, 74], "thing": [0, 8, 20, 63], "note": [0, 1, 2, 5, 6, 7, 8, 20, 24, 25, 26, 27, 28, 30, 32, 33, 35, 36, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 57, 61, 63, 65, 67, 72, 74, 75, 77, 81, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97], "test_": 0, "begin": [0, 32, 51, 91, 97], "otherwis": [0, 24, 25, 28, 29, 30, 32, 33, 35, 39, 42, 43, 44, 48, 49, 51, 55, 78, 81, 85, 86, 88, 89, 92, 93, 95, 97], "pytest": [0, 62, 76], "ini": [0, 56], "so": [0, 1, 25, 27, 28, 30, 32, 35, 41, 42, 48, 49, 51, 56, 58, 59, 60, 61, 75, 76, 77, 81, 84, 85, 88, 89, 94, 95], "dure": [0, 1, 32, 35, 61, 63, 65, 66, 75, 76], "wiki": [0, 5, 6, 32], "more": [0, 1, 7, 8, 11, 13, 14, 15, 16, 17, 18, 20, 21, 24, 25, 28, 32, 33, 35, 41, 42, 49, 51, 52, 55, 56, 57, 59, 60, 61, 63, 65, 67, 68, 70, 72, 73, 74, 76, 81, 85, 86, 88, 92, 93, 97], "info": [0, 1, 25, 28, 32, 34, 38, 42, 51], "how": [0, 24, 25, 27, 28, 32, 33, 35, 41, 42, 48, 51, 55, 56, 59, 64, 76, 85, 89, 92], "http": [0, 5, 6, 11, 28, 32, 53, 55, 73, 74, 85], "com": [0, 5, 6, 28, 32, 73, 74], "unit": [0, 1, 26, 28, 32, 41, 52], "categoricaltest": 0, "v": [0, 32, 48, 59, 73, 79, 93], "print": [0, 1, 25, 26, 28, 32, 34, 42, 46, 51, 77, 96], "m": [0, 32, 39, 41, 48, 52, 56, 72, 77, 97], "categorical_test": 0, "singl": [0, 2, 7, 8, 20, 24, 25, 27, 28, 30, 32, 33, 35, 37, 41, 42, 44, 48, 51, 60, 61, 63, 65, 67, 72, 75, 79, 81, 87, 88, 89, 91, 93, 95], "from": [0, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 38, 39, 41, 42, 43, 45, 48, 49, 51, 55, 56, 57, 59, 60, 61, 63, 64, 65, 70, 72, 73, 75, 77, 79, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97], "foo_test": 0, "server_util": [0, 1], "parallel_start_test": 0, "d": [0, 8, 20, 25, 32, 43, 44, 45, 48, 51, 52, 63, 79, 93, 95, 97], "post": [0, 59], "local": [0, 1, 24, 25, 26, 28, 30, 32, 33, 35, 42, 48, 49, 51, 52, 56, 57, 65, 70, 72, 73, 74, 81, 87, 89, 94, 96], "catch": 0, "common": [0, 7, 30, 32, 44, 55, 77, 81, 89, 95, 97], "failur": [0, 32, 35, 72, 81], "earli": 0, "usual": [0, 30, 32, 55, 89], "mypi": [0, 76], "everi": [0, 1, 28, 32, 56, 88, 97], "should": [0, 1, 8, 20, 25, 28, 29, 30, 32, 35, 41, 42, 43, 49, 51, 53, 55, 59, 60, 61, 63, 64, 65, 66, 70, 72, 73, 74, 76, 81, 88, 89, 92, 96], "least": [0, 27, 28, 32, 42, 48, 50, 51, 83, 93], "one": [0, 1, 2, 7, 8, 20, 25, 28, 29, 30, 32, 33, 35, 36, 41, 42, 43, 44, 48, 49, 51, 55, 56, 59, 61, 63, 64, 65, 67, 70, 73, 74, 75, 76, 77, 81, 84, 86, 87, 88, 89, 93, 95, 97], "associ": [0, 1, 32, 35, 49, 53, 56, 59, 81, 93, 94], "number": [0, 1, 7, 24, 25, 26, 27, 28, 30, 31, 32, 33, 35, 37, 40, 41, 42, 43, 48, 49, 51, 52, 56, 57, 59, 60, 61, 63, 65, 73, 75, 77, 79, 81, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97], "titl": [0, 32, 51, 59], "bodi": 0, "close": [0, 7, 32, 43, 52, 55, 63, 87], "keyword": [0, 25, 32, 48, 49, 87, 94], "doubt": [0, 59], "take": [0, 14, 27, 30, 32, 38, 42, 57, 58, 60, 61, 63, 66, 81, 89], "some": [0, 8, 25, 28, 32, 57, 63, 67, 72, 73, 86, 88, 93, 97], "99999": 0, "pr": [0, 59], "implement": [0, 8, 25, 26, 27, 28, 31, 32, 41, 42, 44, 47, 48, 51, 55, 64, 70, 84, 87, 88, 96, 97], "arg": [0, 7, 32, 43, 48, 52, 55, 75, 87, 89], "super": 0, "cool": 0, "help": [0, 27, 32, 75], "keep": [0, 7, 28, 32, 63, 74, 77, 81, 88], "part": [0, 8, 20, 32, 48, 51, 77, 97], "those": [0, 8, 20, 32, 50, 63, 73, 75, 83, 91], "As": [0, 32, 41, 42, 49, 59, 64, 66, 73, 74, 81, 84, 92, 94, 97], "person": 0, "who": [0, 73, 74], "left": [0, 7, 27, 28, 32, 41, 42, 50, 51, 52, 83, 90, 97], "feedback": 0, "resolv": [0, 58, 70, 77], "convers": [0, 25, 32, 81, 86, 92, 97], "decid": 0, "author": 0, "address": [0, 26, 27, 32, 96], "try": [0, 29, 32, 33, 35, 42, 77], "feel": 0, "readi": [0, 57, 59, 73, 74], "necessari": [0, 55, 59, 72, 77], "track": [0, 60, 67], "ani": [0, 7, 21, 24, 25, 28, 30, 32, 33, 34, 35, 36, 41, 42, 43, 48, 49, 51, 55, 56, 59, 61, 65, 67, 73, 74, 80, 84, 88, 89, 90, 92, 93, 97], "which": [0, 7, 24, 25, 26, 27, 28, 30, 32, 33, 35, 41, 42, 43, 44, 48, 49, 50, 51, 52, 55, 56, 58, 59, 61, 63, 72, 73, 74, 75, 79, 81, 83, 84, 85, 86, 87, 88, 89, 92, 93, 95, 96, 97], "outsid": [0, 64, 75], "scope": [0, 75], "member": 0, "quit": [0, 70], "bit": [0, 11, 25, 27, 32, 41, 42, 43, 48, 51, 56, 60, 81, 85, 87, 88, 92], "experi": [0, 81], "unsur": 0, "ask": 0, "2": [0, 3, 4, 5, 6, 7, 24, 25, 28, 30, 32, 35, 39, 41, 42, 43, 44, 48, 49, 50, 51, 53, 55, 56, 57, 59, 63, 64, 65, 72, 73, 74, 75, 76, 77, 81, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97], "concurr": [0, 81], "approv": 0, "limit": [0, 8, 24, 25, 32, 37, 42, 43, 51, 52, 64, 67, 70, 81, 85, 86, 88, 92, 97], "except": [0, 7, 28, 32, 42, 55, 63, 73, 88, 97], "after": [0, 25, 28, 32, 51, 59, 61, 72, 88, 97], "pass": [0, 1, 7, 20, 25, 27, 28, 30, 32, 35, 41, 42, 48, 49, 51, 59, 81, 88, 89, 94], "conflict": 0, "ideal": [0, 59], "rebas": 0, "master": [0, 59, 72], "prefer": [0, 74, 76, 78], "wrote": 0, "best": [0, 7, 32], "practic": [0, 30, 32, 42, 75, 84, 89], "els": [0, 55, 59], "To": [0, 1, 28, 30, 32, 41, 52, 55, 56, 57, 61, 64, 70, 72, 74, 75, 85, 86, 88, 90, 92, 97], "commit": [0, 59], "histori": [0, 26, 32, 54, 59], "allow": [0, 5, 6, 25, 27, 28, 32, 35, 38, 42, 43, 48, 51, 56, 57, 63, 65, 66, 68, 75, 77, 81, 93], "easi": [0, 32, 38, 56, 59, 63, 72], "manipul": 0, "squash": 0, "web": [0, 59], "interfac": [0, 59], "pierce314159": 0, "ethan": 0, "debandi99": 0, "consensu": [0, 59], "There": [1, 30, 32, 35, 56, 63, 72, 77, 87, 95], "can": [1, 7, 20, 24, 25, 27, 28, 30, 32, 33, 35, 41, 42, 43, 44, 47, 48, 49, 51, 52, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 70, 72, 73, 74, 75, 76, 77, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97], "role": 1, "develop": [1, 25, 32, 59, 60, 61, 73, 74, 75, 78, 81], "highlight": [1, 59, 63], "variou": [1, 64], "avail": [1, 26, 32, 35, 42, 56, 61, 65, 77, 81, 90], "separ": [1, 8, 27, 28, 32, 33, 35, 36, 42, 51, 56, 64, 65, 75, 81, 92, 97], "section": [1, 32, 41, 56, 58, 59, 60, 61, 63, 65, 70, 72, 76, 84], "These": [1, 20, 63, 65, 68, 70, 81], "env": [1, 32, 60, 70, 72, 73, 74, 76], "arkouda_serv": [1, 26, 29, 32, 57, 60, 61, 70, 72, 75, 96], "arkouda_server_connection_info": 1, "set": [1, 7, 24, 25, 27, 28, 30, 32, 33, 35, 38, 41, 42, 43, 44, 47, 48, 49, 51, 52, 56, 57, 59, 64, 65, 72, 73, 74, 75, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 97], "write": [1, 24, 25, 28, 32, 33, 35, 36, 38, 42, 48, 49, 51, 56, 59, 64, 81, 85], "port": [1, 25, 26, 28, 32, 35, 42, 48, 51, 60, 70, 79, 96], "startup": [1, 70, 80], "tune": 1, "buffer": 1, "messag": [1, 24, 25, 26, 28, 32, 33, 38, 42, 43, 48, 51, 55, 70, 81], "aggreg": [1, 28, 30, 32, 48, 53, 63, 80, 81, 88, 89], "sort": [1, 7, 18, 25, 28, 30, 32, 41, 42, 44, 48, 49, 51, 54, 59, 79, 80, 84, 86, 87, 89, 90, 95, 97], "non": [1, 7, 25, 30, 32, 40, 41, 42, 43, 44, 50, 51, 58, 81, 83, 84, 87, 89, 90, 91, 97], "crazi": 1, "system": [1, 24, 25, 32, 42, 47, 51, 55, 56, 74, 75, 76, 77, 78, 81, 84, 85, 86, 92, 96, 97], "thei": [1, 20, 25, 26, 27, 28, 30, 32, 33, 35, 42, 48, 49, 51, 52, 57, 59, 64, 65, 66, 73, 74, 81, 85, 86, 89, 94], "per": [1, 24, 25, 26, 28, 30, 32, 33, 35, 42, 48, 51, 55, 56, 61, 65, 75, 81, 84, 89], "task": [1, 26], "content": [1, 64, 81], "between": [1, 25, 26, 32, 37, 41, 42, 43, 51, 52, 56, 63, 75, 87, 90, 92, 97], "compet": 1, "arkouda_server_aggregation_dst_buff_s": 1, "commun": [1, 32, 50, 59, 74, 83, 87], "arkouda_server_aggregation_src_buff_s": 1, "arkouda_server_aggregation_yield_frequ": 1, "frequenc": [1, 5, 6, 32, 52], "yield": [1, 24, 25, 28, 32, 33, 35, 42, 48, 51, 88, 91], "default": [1, 5, 6, 7, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 38, 39, 41, 42, 43, 44, 47, 48, 49, 51, 52, 53, 56, 58, 64, 65, 70, 74, 75, 79, 81, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97], "1024": [1, 32, 42], "build": [1, 30, 32, 56, 59, 62, 70, 73, 77, 89, 96], "chpl_flag": [1, 58], "A": [1, 2, 24, 25, 26, 27, 28, 30, 31, 32, 35, 41, 42, 43, 45, 47, 48, 49, 51, 59, 63, 69, 79, 81, 84, 85, 86, 88, 90, 91, 92, 93, 94, 95, 97], "automat": [1, 25, 32, 35, 49, 65, 81, 86, 94], "chpl": [1, 55, 60, 72, 73, 74, 75], "addit": [1, 30, 32, 41, 45, 55, 57, 65, 67, 73, 92, 95, 96], "ones": [1, 10, 26, 32, 41, 43, 56, 60, 79, 80, 84, 87], "here": [1, 53, 56, 57, 60, 61, 62, 63, 65, 67, 72, 74, 75, 76, 77, 78, 96], "smemtrack": 1, "true": [1, 7, 10, 11, 18, 24, 25, 26, 27, 28, 30, 32, 33, 35, 37, 39, 40, 41, 42, 43, 44, 45, 48, 49, 51, 52, 53, 56, 63, 74, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97], "lhdf5": 1, "lhdf5_hl": 1, "lzmq": 1, "liconv": 1, "lidn2": 1, "fast": [1, 25, 32, 51], "unless": [1, 32, 35, 41, 51, 97], "arkouda_develop": [1, 60], "o1": 1, "mutual": 1, "exclus": [1, 32, 37, 43, 44, 63, 87, 91, 95], "arkouda_quick_compil": [1, 60, 74], "loop": 1, "invari": 1, "code": [1, 5, 6, 25, 32, 33, 35, 50, 55, 59, 60, 63, 65, 70, 75, 80, 83, 86], "motion": 1, "ccflag": 1, "o0": 1, "arkouda_print_passes_fil": 1, "time": [1, 25, 26, 28, 30, 32, 33, 35, 37, 41, 42, 48, 49, 51, 52, 56, 58, 60, 61, 64, 65, 67, 75, 79, 81, 86, 89, 90, 93, 95, 97], "specifi": [1, 7, 8, 11, 15, 24, 27, 28, 30, 32, 33, 35, 36, 42, 43, 45, 48, 49, 51, 52, 53, 56, 60, 66, 81, 84, 85, 87, 88, 89, 93], "mainli": 1, "nightli": 1, "infrastructur": 1, "chpl_debug_flag": 1, "regex_max_captur": 1, "integ": [1, 25, 27, 28, 30, 32, 35, 37, 41, 42, 43, 44, 52, 65, 80, 84, 85, 86, 87, 88, 89, 92, 93, 95, 97], "chang": [1, 27, 28, 32, 33, 35, 42, 56, 59, 61, 70, 73, 74, 76, 81, 84, 88], "maximum": [1, 26, 28, 30, 32, 42, 43, 56, 81, 84, 87, 88, 89, 90], "captur": [1, 39, 97], "group": [1, 25, 28, 30, 32, 39, 48, 49, 50, 51, 56, 63, 65, 80, 83, 86, 88, 89, 94, 95, 97], "access": [1, 2, 26, 32, 35, 47, 49, 51, 63, 68, 74, 80, 81, 96], "match": [1, 20, 24, 25, 28, 30, 32, 33, 35, 40, 41, 42, 43, 48, 49, 51, 52, 54, 56, 80, 81, 84, 85, 87, 89, 92, 94, 96], "20": [1, 5, 6, 7, 32, 41, 59, 63, 76, 77, 84, 85, 91], "folk": 1, "instal": [1, 32, 42, 60, 77, 96], "anaconda": [1, 70, 72, 77, 78], "through": [1, 32, 41, 55, 57, 59, 70, 74], "instruct": [1, 32, 51, 70, 73, 74, 76, 77, 78, 96], "altern": [1, 59, 60, 72, 74, 77], "setup": [1, 72, 77], "them": [1, 28, 32, 35, 44, 51, 59, 73, 81, 88, 95], "explicitli": [1, 28, 32, 44, 75, 95], "arkouda_zmq_path": 1, "zmq": [1, 72], "arkouda_hdf5_path": 1, "hdf5": [1, 24, 25, 28, 30, 32, 33, 35, 42, 48, 51, 64, 66, 67, 68, 72, 76, 81, 89, 97], "arkouda_arrow_path": 1, "arrow": [1, 76], "arkouda_iconv_path": 1, "iconv": [1, 72, 76], "arkouda_idn2_path": 1, "idn2": [1, 72, 76], "ld_library_path": 1, "lib": [1, 72, 77, 95], "arkouda_skip_check_dep": 1, "skip": [1, 30, 32, 35, 51, 73, 81, 89, 95, 97], "autom": [1, 59], "do": [1, 7, 24, 25, 26, 28, 30, 32, 33, 35, 41, 42, 48, 49, 51, 56, 60, 61, 73, 75, 76, 78, 84, 85, 88, 89, 94], "repeat": [1, 25, 32, 48, 86, 93], "sinc": [1, 8, 32, 41, 61, 86, 88, 92, 97], "dep": [1, 72, 73, 74], "been": [1, 25, 26, 32, 35, 42, 44, 48, 51, 57, 58, 59, 72, 75, 84, 86, 87], "up": [1, 7, 25, 26, 28, 30, 32, 35, 41, 42, 44, 48, 51, 55, 58, 61, 62, 72, 73, 74, 75, 81, 84, 85, 86, 87, 95, 97], "arkouda_server_user_modul": [1, 75], "absolut": [1, 32, 41, 52, 75, 84], "must": [1, 3, 4, 7, 25, 26, 27, 28, 30, 32, 33, 35, 41, 42, 43, 44, 45, 48, 49, 51, 52, 55, 57, 60, 63, 64, 70, 72, 73, 75, 84, 87, 88, 89, 91, 92, 93, 94, 96, 97], "also": [1, 7, 8, 25, 27, 30, 32, 37, 41, 43, 44, 48, 49, 51, 58, 60, 63, 64, 66, 67, 68, 70, 73, 77, 81, 87, 91, 92, 93, 95, 97], "servermodul": [1, 60, 61, 75], "cfg": [1, 60, 61, 75], "regist": [1, 25, 27, 28, 30, 32, 33, 34, 42, 48, 49, 51, 52, 53, 55, 80, 89], "readm": 1, "verbos": [1, 32, 34, 38], "arkouda_verbos": 1, "arkouda_server_host": 1, "hostnam": [1, 25, 26, 28, 32, 35, 42, 48, 51, 60, 70, 79, 96], "arkouda_server_port": 1, "arkouda_client_timeout": 1, "control": [1, 27, 32, 41, 92], "timeout": [1, 26, 96], "arkouda_full_stack_test": 1, "option": [1, 7, 25, 26, 27, 28, 30, 31, 32, 33, 35, 39, 42, 43, 44, 45, 48, 49, 51, 52, 55, 56, 59, 65, 70, 72, 73, 74, 76, 79, 81, 87, 88, 89, 94, 95, 96, 97], "test_data_url": 1, "readalltest": 1, "read_all_test": 1, "arkouda_numlocal": 1, "where": [1, 16, 25, 26, 28, 30, 32, 33, 35, 36, 37, 41, 42, 43, 44, 47, 48, 51, 53, 55, 56, 57, 58, 65, 73, 74, 80, 81, 87, 89, 90, 91, 92, 93, 95, 96, 97], "found": [1, 7, 28, 32, 33, 35, 42, 51, 55, 56, 63, 67, 74, 75, 77], "arkouda_hom": 1, "locat": [1, 30, 32, 33, 41, 42, 47, 49, 51, 56, 59, 61, 72, 77, 84, 89, 94, 97], "execut": [1, 26, 31, 32, 35, 42, 51, 55, 57, 58, 60, 61, 64, 72, 73, 75, 86, 96], "warn": [1, 32, 35, 38, 51, 81, 97], "subject": [1, 32, 52], "futur": [1, 27, 32, 35, 51, 81, 90], "intern": [1, 8, 20, 32, 37, 42, 51, 59], "arkouda_client_directori": [1, 47], "parent": [1, 40], "token": [1, 26, 47, 70, 96], "txt": 1, "arkouda_tunnel_serv": 1, "ssh": 1, "tunnel": 1, "url": [1, 26, 70, 72, 96], "arkouda_key_fil": 1, "keyfil": 1, "arkouda_password": 1, "password": [1, 77], "arkouda_log_level": [1, 32], "side": [1, 24, 25, 26, 28, 30, 32, 33, 34, 35, 39, 42, 43, 48, 49, 51, 52, 55, 59, 60, 70, 75, 77, 81, 84, 85, 86, 89, 90, 91, 92, 93, 96, 97], "log": [1, 3, 4, 5, 6, 13, 30, 32, 38, 41, 43, 45, 51, 80, 84, 89], "level": [1, 32, 38, 44, 49, 56, 60, 64, 65, 72, 73, 74, 75, 78, 81, 94, 95], "arkouda_client_mod": 1, "mode": [1, 24, 25, 27, 30, 32, 33, 35, 42, 48, 51, 80, 87, 89], "ui": 1, "api": [1, 8, 11, 13, 14, 15, 16, 17, 18, 20, 21, 30, 32, 53, 55, 69, 89, 92], "displai": [1, 27, 32, 45, 53, 72, 77], "splash": 1, "cachedaccessor": [2, 32], "str": [2, 10, 11, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 48, 49, 51, 52, 53, 56, 64, 81, 82, 84, 85, 86, 87, 88, 89, 92, 96, 97], "custom": [2, 32, 38, 55, 64, 72, 90], "properti": [2, 8, 20, 28, 32, 33, 42, 48, 49, 52, 55, 65], "object": [2, 7, 8, 10, 20, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 55, 64, 65, 66, 67, 68, 77, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95], "descriptor": [2, 32, 51], "cach": [2, 25, 32, 51], "param": [2, 25, 28, 32, 33, 35, 42, 48, 51, 56], "namespac": [2, 8, 20, 32, 35], "g": [2, 25, 27, 28, 30, 32, 35, 41, 42, 48, 51, 52, 53, 60, 61, 63, 73, 81, 84, 86, 87, 89, 93, 96, 97], "df": [2, 28, 32, 63, 88], "type": [2, 3, 4, 5, 6, 7, 8, 11, 20, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 55, 56, 66, 72, 76, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 94, 96, 97], "extens": [2, 25, 32, 33, 35, 42, 48, 51, 72, 81], "method": [2, 8, 25, 26, 27, 28, 30, 31, 32, 35, 41, 42, 43, 47, 48, 51, 58, 63, 64, 80, 81, 86, 87, 89, 90, 92], "cl": [2, 32], "__init__": [2, 32], "assum": [2, 28, 30, 32, 35, 43, 44, 49, 59, 64, 65, 66, 73, 74, 78, 81, 88, 89, 94, 95], "seri": [2, 28, 32, 43, 52, 54], "datafram": [2, 32, 35, 45, 46, 49, 54, 66, 81, 94], "index": [2, 7, 10, 24, 25, 27, 28, 30, 32, 35, 37, 39, 42, 43, 44, 48, 49, 51, 54, 56, 63, 72, 79, 80, 81, 84, 86, 87, 89, 90, 93, 94, 97], "argument": [2, 7, 27, 28, 30, 32, 41, 42, 48, 49, 51, 53, 55, 70, 75, 94], "data": [2, 11, 24, 25, 27, 28, 29, 30, 32, 33, 35, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 55, 56, 63, 66, 68, 69, 80, 82, 83, 85, 86, 87, 89, 93, 94, 96, 97], "string_oper": [2, 32], "date_oper": [2, 32], "datetimeaccessor": [2, 32], "stringaccessor": [2, 32], "xlogi": [3, 4, 32], "pdarrayclass": [3, 4, 24, 25, 27, 28, 30, 32, 33, 35, 37, 39, 41, 43, 44, 48, 49, 50, 51, 54], "pdarrai": [3, 4, 5, 6, 7, 24, 25, 27, 28, 30, 32, 33, 35, 37, 39, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 55, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 97], "float64": [3, 4, 5, 6, 12, 29, 30, 32, 41, 42, 43, 44, 50, 56, 64, 65, 79, 83, 84, 87, 88, 89, 90, 92, 95], "y": [3, 4, 5, 6, 32, 41, 42, 45, 57, 73], "comput": [3, 4, 5, 6, 25, 26, 28, 30, 32, 37, 41, 42, 48, 51, 55, 63, 81, 84, 86, 88, 89, 90, 92, 93, 95, 97], "np": [3, 4, 8, 11, 13, 14, 15, 16, 17, 18, 20, 21, 24, 25, 28, 29, 30, 32, 37, 41, 42, 43, 45, 48, 51, 52, 63, 81, 84, 85, 86, 87, 88, 89, 90, 92, 93, 97], "datatyp": [3, 4, 32, 43, 65], "castabl": [3, 4, 32], "return": [3, 4, 5, 6, 7, 11, 20, 24, 25, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 55, 64, 66, 81, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97], "import": [3, 4, 5, 6, 25, 27, 28, 32, 35, 41, 45, 47, 51, 55, 59, 65, 70, 72, 75, 88, 90, 96], "connect": [3, 4, 5, 6, 26, 32, 43, 47, 55, 60, 77, 80, 81], "arrai": [3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 30, 32, 33, 35, 37, 39, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 55, 56, 64, 65, 70, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 97], "3": [3, 4, 5, 6, 24, 28, 30, 32, 35, 39, 41, 42, 43, 44, 45, 48, 50, 51, 55, 56, 63, 64, 65, 73, 74, 76, 79, 80, 81, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 97], "4": [3, 4, 24, 25, 28, 30, 32, 35, 39, 41, 42, 43, 44, 48, 50, 51, 56, 63, 65, 73, 74, 76, 81, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 97], "5": [3, 4, 5, 6, 7, 24, 25, 26, 28, 30, 32, 41, 42, 43, 44, 48, 50, 51, 56, 63, 64, 65, 67, 74, 76, 81, 83, 84, 85, 87, 88, 89, 91, 92, 93, 95, 97], "6": [3, 4, 7, 24, 28, 30, 32, 35, 41, 42, 43, 44, 48, 51, 56, 63, 73, 74, 76, 77, 79, 81, 84, 85, 87, 88, 89, 90, 91, 93, 95, 97], "7": [3, 4, 28, 30, 32, 41, 42, 43, 44, 48, 50, 63, 73, 74, 76, 81, 83, 84, 85, 87, 88, 89, 91, 93, 95], "8": [3, 4, 5, 6, 28, 30, 32, 35, 41, 42, 43, 48, 50, 51, 56, 63, 64, 74, 76, 81, 83, 84, 85, 87, 88, 89, 91, 92, 93], "6094379124341003": [3, 4, 32], "5835189384561099": [3, 4, 32], "8377304471659395": [3, 4, 32], "317766166719343": [3, 4, 32], "00000000000000000": [3, 4, 32], "4657359027997265": [3, 4, 32], "4930614433405491": [3, 4, 32], "9314718055994531": [3, 4, 32], "power_divergenceresult": [5, 6, 32], "namedtupl": [5, 6, 17, 32], "statist": [5, 6, 30, 32, 42, 56, 80, 84, 89], "pvalu": [5, 6, 32], "result": [5, 6, 7, 25, 28, 30, 32, 33, 35, 37, 41, 42, 43, 44, 45, 48, 49, 51, 52, 55, 56, 63, 64, 65, 66, 74, 81, 84, 87, 88, 89, 92, 93, 94, 97], "power": [5, 6, 13, 32, 42, 69, 91], "diverg": [5, 6, 32], "test": [5, 6, 7, 25, 28, 32, 35, 44, 57, 59, 60, 61, 63, 70, 75, 88, 95], "power_diverg": [5, 6, 32], "f_ob": [5, 6, 32], "f_exp": [5, 6, 32], "none": [5, 6, 7, 8, 10, 14, 15, 16, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 45, 46, 48, 49, 51, 52, 53, 56, 73, 74, 81, 82, 86, 87, 88, 89, 90, 92, 94, 96], "ddof": [5, 6, 30, 32, 42, 52, 84, 89, 90], "lambda_": [5, 6, 32], "p": [5, 6, 7, 32, 42, 43], "valu": [5, 6, 7, 8, 17, 24, 25, 26, 27, 28, 30, 32, 33, 35, 36, 37, 41, 42, 43, 44, 48, 49, 51, 52, 53, 56, 63, 65, 67, 74, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 95, 96, 97], "int": [5, 6, 7, 8, 10, 11, 14, 15, 16, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 39, 40, 41, 42, 43, 44, 47, 48, 49, 51, 52, 53, 55, 65, 81, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97], "delta": [5, 6, 30, 32, 37, 42, 84, 89, 90], "degre": [5, 6, 30, 32, 41, 42, 84, 89, 90], "freedom": [5, 6, 30, 32, 42, 84, 89, 90], "lambda": [5, 6, 32], "pearson": [5, 6, 28, 32, 42], "cressi": [5, 6, 32], "read": [5, 6, 24, 25, 28, 32, 33, 35, 36, 42, 49, 51, 64, 65, 66, 67, 85, 97], "likelihood": [5, 6, 30, 32, 42, 84, 89], "freeman": [5, 6, 32], "tukei": [5, 6, 32], "mod": [5, 6, 32, 42], "neyman": [5, 6, 32], "correspond": [5, 6, 7, 25, 27, 28, 30, 32, 33, 35, 36, 37, 39, 41, 42, 43, 47, 48, 49, 51, 55, 65, 67, 81, 84, 86, 88, 89, 90, 91, 93, 94, 97], "10": [5, 6, 7, 25, 30, 32, 35, 41, 42, 43, 45, 48, 49, 50, 51, 55, 56, 63, 72, 74, 76, 81, 83, 84, 85, 87, 89, 90, 91, 92, 93, 94], "30": [5, 6, 7, 32, 60, 76, 85], "333333333333334": [5, 6, 32], "03960235520756414": [5, 6, 32], "109302162163285": [5, 6, 32], "04380595350226197": [5, 6, 32], "stat": [5, 6, 32, 56], "chisquar": [5, 6, 32], "modifi": [5, 6, 32, 60], "scale": [5, 6, 25, 32, 45, 58, 63, 69], "org": [5, 6, 11, 32, 53, 55, 85], "gener": [5, 6, 11, 20, 25, 26, 28, 31, 32, 37, 38, 41, 42, 43, 45, 47, 49, 52, 54, 55, 56, 60, 61, 63, 64, 65, 67, 72, 73, 77, 79, 81, 84, 87, 94], "html": [5, 6, 11, 32, 53, 55, 72, 85], "2024": [5, 6, 32], "v1": [5, 6, 32], "12": [5, 6, 7, 30, 32, 35, 41, 48, 51, 56, 76, 84, 85, 89, 91, 93], "chi": [5, 6, 32], "squar": [5, 6, 13, 30, 32, 41, 42, 84, 89], "en": [5, 6, 32, 55], "wikipedia": [5, 6, 32], "squared_test": [5, 6, 32], "unsqueez": [7, 32], "zero_up": [7, 32], "val": [7, 29, 30, 32, 48, 49, 53, 89, 93], "map": [7, 25, 26, 27, 28, 32, 35, 36, 51, 53, 81, 88, 97], "spars": [7, 30, 32, 89, 92], "dens": [7, 25, 30, 32, 89], "replac": [7, 28, 32, 35, 40, 42, 48, 51, 57, 59, 65, 74, 75, 76, 93, 97], "multipl": [7, 28, 32, 35, 41, 48, 52, 55, 56, 57, 63, 65, 67, 68, 75, 79, 81, 82, 84, 88, 93], "sequenc": [7, 25, 27, 32, 41, 42, 43, 44, 48, 50, 53, 83, 87, 92, 93, 95, 97], "right_align": [7, 32], "right": [7, 27, 28, 32, 42, 50, 51, 52, 59, 83, 88, 91, 96, 97], "two": [7, 23, 25, 27, 28, 30, 32, 33, 37, 41, 42, 43, 44, 48, 49, 51, 52, 53, 63, 64, 73, 75, 81, 84, 87, 89, 95, 97], "impli": [7, 32, 91], "discard": [7, 25, 32, 86], "appear": [7, 25, 28, 30, 32, 33, 35, 42, 44, 49, 51, 59, 89, 90], "hand": [7, 32, 59, 91], "defin": [7, 8, 20, 25, 27, 28, 29, 30, 31, 32, 33, 35, 38, 41, 42, 43, 48, 49, 51, 52, 55, 59, 85, 86, 87, 88, 89, 90, 92], "bool": [7, 10, 11, 12, 15, 16, 18, 19, 21, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 56, 65, 79, 81, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97], "logic": [7, 24, 25, 32, 41, 43, 48, 51, 55, 80, 85, 87, 90, 93], "surviv": [7, 32], "left_align": [7, 32], "nonuniqueerror": [7, 32], "valueerror": [7, 25, 26, 28, 30, 32, 33, 35, 36, 37, 41, 42, 43, 44, 48, 49, 50, 51, 81, 83, 84, 86, 87, 89, 90, 93, 94, 96, 97], "inappropri": [7, 32], "correct": [7, 19, 28, 32, 55, 60, 73, 77, 79, 88], "queri": [7, 32, 81], "item": [7, 25, 28, 32, 42, 43, 44, 49, 53, 86, 88, 94, 95], "search": [7, 25, 32, 39, 44, 51, 80, 86], "each": [7, 24, 25, 26, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 48, 49, 51, 52, 53, 55, 56, 63, 65, 72, 75, 81, 84, 85, 86, 88, 89, 90, 92, 93, 94, 95, 97], "row": [7, 28, 30, 32, 33, 35, 42, 44, 48, 50, 51, 54, 63, 64, 81, 83, 88, 89, 93, 95], "same": [7, 24, 25, 27, 28, 30, 32, 33, 35, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 59, 63, 64, 65, 67, 73, 74, 75, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97], "shape": [7, 8, 10, 15, 20, 24, 25, 28, 32, 33, 41, 42, 49, 51, 53, 65, 80, 84, 85, 86, 92], "dtype": [7, 8, 10, 11, 19, 20, 24, 25, 28, 30, 32, 33, 35, 37, 40, 41, 42, 43, 44, 48, 50, 51, 52, 54, 55, 56, 63, 79, 80, 81, 84, 85, 87, 89, 90, 91, 92, 95, 97], "its": [7, 11, 13, 14, 15, 16, 17, 18, 21, 25, 29, 32, 33, 41, 42, 48, 49, 51, 59, 65, 74, 84, 92, 93, 94, 97], "int64": [7, 12, 25, 27, 28, 29, 30, 32, 35, 37, 39, 41, 42, 43, 44, 48, 50, 51, 52, 55, 56, 63, 64, 65, 79, 81, 83, 84, 86, 87, 88, 89, 90, 92, 93, 95, 97], "lookup": [7, 32, 33, 49], "kei": [7, 25, 28, 30, 32, 33, 34, 35, 36, 41, 44, 49, 55, 63, 65, 75, 77, 82, 88, 89, 94, 95], "fillvalu": [7, 32], "appli": [7, 28, 30, 32, 41, 56, 84, 88, 89, 97], "domain": [7, 32], "entri": [7, 28, 32, 42, 49, 51, 55, 56, 88], "uniqu": [7, 17, 25, 28, 30, 32, 33, 41, 42, 44, 48, 49, 51, 63, 65, 80, 81, 86, 89, 90, 91, 93, 94, 95, 97], "given": [7, 20, 25, 28, 30, 32, 35, 42, 43, 44, 51, 52, 53, 56, 76, 81, 86, 87, 88, 89, 97], "treat": [7, 24, 27, 28, 29, 32, 50, 56, 63, 83, 85, 88], "tupl": [7, 8, 10, 11, 15, 16, 19, 20, 21, 25, 27, 28, 29, 30, 32, 37, 41, 42, 43, 44, 48, 49, 51, 53, 63, 81, 86, 87, 88, 89, 90, 92, 94, 95, 97], "rang": [7, 25, 28, 32, 33, 35, 37, 41, 42, 43, 48, 49, 51, 52, 79, 81, 84, 87, 88, 90, 94, 97], "evalu": [7, 32, 42, 84, 90], "scalar": [7, 25, 32, 41, 42, 48, 49, 55, 56, 79, 80, 86, 90, 91, 93, 94], "over": [7, 25, 28, 32, 35, 41, 42, 48, 51, 79, 84, 85, 86, 88, 90, 92, 93, 97], "while": [7, 32, 35, 50, 61, 65, 67, 72, 77, 81, 83], "cannot": [7, 24, 25, 27, 28, 30, 32, 33, 35, 41, 42, 43, 48, 49, 51, 52, 67, 77, 81, 85, 86, 89, 92, 97], "other": [7, 25, 27, 28, 30, 32, 33, 35, 41, 42, 43, 48, 50, 51, 52, 56, 60, 61, 63, 81, 82, 83, 84, 86, 89, 93, 95, 97], "complex": [7, 32, 70], "achiev": [7, 32, 72], "arang": [7, 10, 24, 28, 30, 32, 35, 41, 42, 43, 44, 45, 48, 55, 63, 80, 81, 84, 85, 87, 89, 90, 91, 92, 93, 95], "desir": [7, 26, 27, 32, 41, 42, 43, 47, 56, 57, 70, 75, 84, 87, 90, 92, 96, 97], "word": [7, 32], "keys1": [7, 32], "twenti": [7, 32], "_": [7, 32, 39, 51, 97], "keys2": [7, 32], "three": [7, 32, 43, 44, 51, 52, 72, 87, 91, 92, 97], "four": [7, 32, 44, 51, 52, 87, 97], "five": [7, 32, 44, 51, 87, 97], "21": [7, 32, 41, 84, 85], "22": [7, 32, 84, 85], "23": [7, 32, 85], "24": [7, 32, 41, 42, 56, 76, 84, 85], "25": [7, 30, 32, 35, 42, 43, 85, 87, 89], "args1": [7, 32], "thirti": [7, 32], "args2": [7, 32], "aku": [7, 28, 32, 33, 46, 82, 88], "direct": [7, 32, 59, 65, 72], "intermedi": [7, 32], "revkei": [7, 32], "revindic": [7, 32], "size": [7, 8, 20, 24, 25, 28, 29, 30, 32, 33, 35, 37, 41, 42, 43, 48, 49, 50, 51, 52, 53, 56, 63, 65, 66, 67, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97], "revarg": [7, 32], "idx": [7, 32, 63], "in1d_interv": [7, 32], "interv": [7, 32, 41, 43, 52, 87, 90], "symmetr": [7, 32, 44, 48, 63, 80, 95], "fals": [7, 16, 18, 19, 21, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 48, 49, 51, 52, 53, 56, 63, 79, 81, 84, 86, 87, 88, 89, 92, 93, 95, 97], "membership": [7, 32, 44, 95], "half": [7, 32], "python": [7, 8, 20, 24, 25, 26, 27, 28, 31, 32, 42, 43, 44, 47, 49, 51, 56, 69, 72, 77, 78, 80, 81, 84, 85, 86, 87, 88, 91, 92, 97], "float": [7, 10, 11, 19, 26, 28, 32, 41, 42, 43, 84, 87, 88, 90, 92], "overlap": [7, 28, 32, 40, 51, 97], "lower_bounds_inclus": [7, 32], "upper_bounds_exclus": [7, 32], "boolean": [7, 11, 25, 28, 30, 32, 39, 41, 42, 44, 48, 49, 51, 63, 65, 84, 86, 88, 89, 91, 92, 93, 94, 95, 97], "contain": [7, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 39, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 54, 55, 56, 60, 61, 63, 64, 65, 70, 75, 79, 80, 81, 83, 84, 86, 87, 88, 89, 92, 93, 94, 95, 97], "low": [7, 27, 28, 32, 41, 42, 43, 63, 81, 87], "high": [7, 27, 28, 32, 41, 42, 43, 63, 87], "inclus": [7, 28, 32, 41, 42, 43, 52, 84, 87, 91], "equival": [7, 24, 25, 28, 30, 32, 35, 41, 42, 43, 44, 50, 51, 52, 60, 63, 83, 84, 85, 87, 95], "But": [7, 32], "faster": [7, 25, 32, 44, 60, 86, 95], "mani": [7, 25, 32, 56, 86, 89], "second": [7, 26, 32, 36, 41, 43, 44, 49, 51, 52, 55, 56, 60, 63, 84, 87, 92, 94, 95, 96, 97], "trivial": [7, 32], "search_interv": [7, 32], "tiebreak": [7, 32], "hierarch": [7, 32], "uint": [7, 28, 32, 35, 42, 43, 51, 64], "numer": [7, 28, 32, 42, 43, 45, 49, 50, 54, 65, 80, 81, 83, 86, 92, 94, 97], "than": [7, 8, 24, 25, 28, 30, 32, 33, 35, 41, 42, 43, 44, 48, 49, 50, 51, 57, 59, 60, 67, 81, 83, 85, 86, 87, 88, 89, 92, 95, 97], "lowest": [7, 28, 32, 42, 43], "chosen": [7, 32, 41, 42, 84, 92, 93], "compon": [7, 25, 27, 28, 30, 32, 33, 34, 42, 48, 49, 51, 52, 53, 56, 65, 67, 89], "dimens": [7, 24, 25, 32, 41, 42, 51, 63, 65, 85, 86, 92, 93], "multi": [7, 24, 27, 30, 32, 35, 44, 49, 63, 82, 85, 87, 89, 92, 94, 95], "dimension": [7, 24, 32, 41, 43, 49, 81, 85, 92, 94], "satisfi": [7, 28, 32, 35], "condit": [7, 16, 28, 32, 41, 42, 84], "11": [7, 28, 32, 41, 48, 56, 61, 63, 64, 84, 85, 88, 90, 91, 93], "end": [7, 25, 28, 32, 37, 39, 41, 42, 43, 48, 51, 52, 58, 80, 86, 87, 91, 93, 97], "9": [7, 25, 28, 30, 32, 35, 41, 42, 43, 48, 50, 51, 56, 63, 73, 74, 81, 83, 84, 85, 87, 89, 90, 91, 93, 97], "15": [7, 25, 32, 51, 74, 85, 91], "bi_start": [7, 32], "bigint_from_uint_arrai": [7, 32, 42, 43], "cast": [7, 8, 27, 32, 41, 42, 43, 51, 55, 80, 81, 87, 97], "uint64": [7, 12, 27, 29, 30, 32, 41, 42, 43, 50, 56, 65, 79, 83, 84, 87, 88, 90, 92, 97], "bi_end": [7, 32], "bi_val": [7, 32], "92233720368547758091": [7, 32], "92233720368547758090": [7, 32], "166020696663385964564": [7, 32], "36893488147419103233": [7, 32], "92233720368547758085": [7, 32], "92233720368547758095": [7, 32], "110680464442257309696": [7, 32], "110680464442257309708": [7, 32], "166020696663385964574": [7, 32], "is_cosort": [7, 32], "iff": [7, 25, 32, 33, 42, 49, 51, 52, 84, 90], "cosort": [7, 32], "were": [7, 24, 30, 32, 33, 35, 42, 48, 51, 60, 75, 85, 89, 93, 97], "column": [7, 25, 28, 30, 32, 33, 35, 42, 45, 48, 49, 50, 51, 63, 64, 67, 68, 81, 83, 89, 93, 94], "tabl": [7, 26, 32, 34, 42, 48, 51, 55, 56, 76, 92, 93], "cosorted": [7, 32], "rais": [7, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 55, 81, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97], "typeerror": [7, 25, 27, 28, 29, 30, 32, 33, 35, 37, 38, 41, 42, 43, 44, 48, 49, 50, 51, 52, 55, 81, 83, 84, 86, 87, 89, 90, 94, 95, 97], "interval_lookup": [7, 32], "express": [7, 25, 32, 35, 51, 56, 80, 81, 86, 88, 91, 92], "upper_bounds_inclus": [7, 32], "valid": [7, 20, 25, 32, 35, 41, 43, 49, 51, 81, 86, 92, 97], "wrapper": [8, 11, 13, 14, 15, 16, 17, 18, 20, 21, 27, 32, 92], "ndarrai": [8, 20, 24, 25, 32, 42, 43, 45, 48, 51, 63, 81, 84, 85, 86, 92, 93, 97], "differ": [8, 25, 26, 27, 28, 30, 32, 33, 35, 37, 41, 42, 43, 44, 47, 48, 49, 51, 52, 53, 55, 56, 61, 63, 64, 65, 67, 73, 74, 80, 81, 85, 87, 88, 89, 90, 95, 96], "particular": [8, 75], "promot": [8, 55], "rule": [8, 32, 41, 92], "subset": [8, 25, 26, 28, 31, 32, 48, 75, 84, 88, 93], "goal": 8, "minim": [8, 28, 32, 60, 61, 87, 88], "compliant": 8, "onli": [8, 20, 25, 28, 30, 32, 33, 35, 39, 41, 42, 43, 44, 48, 49, 50, 51, 55, 56, 58, 60, 61, 63, 65, 67, 72, 75, 76, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97], "subclass": 8, "n": [8, 20, 25, 28, 30, 32, 35, 41, 42, 43, 44, 48, 49, 51, 52, 64, 74, 76, 79, 84, 85, 86, 87, 88, 89, 93, 94], "docstr": [8, 11, 13, 14, 15, 16, 17, 18, 20, 21, 55], "restrict": [8, 20], "usag": [8, 20, 62, 70, 79, 93, 96], "attribut": [8, 24, 25, 28, 33, 35, 42, 51, 52, 81, 85, 92], "underscor": [8, 20], "construct": [8, 20, 25, 32, 43, 48, 51, 55, 63, 80, 89, 91], "directli": [8, 20, 25, 32, 42, 49, 50, 51, 63, 72, 83, 85, 86, 88, 92, 97], "rather": [8, 20, 25, 28, 32, 51], "creation": [8, 20, 25, 32, 55, 59, 80], "asarrai": [8, 10, 20], "_type": [8, 10, 11, 19], "devic": [8, 10, 20], "mt": [8, 20], "ndim": [8, 20, 24, 25, 32, 42, 51, 80, 85, 86, 92], "ellipsi": [8, 10, 11, 15, 16, 19, 20, 21, 32, 42, 43, 53], "tolist": [8, 20], "convert": [8, 20, 24, 25, 27, 28, 32, 41, 42, 43, 48, 49, 51, 52, 53, 64, 81, 85, 86, 88, 92, 93, 94, 95, 97], "nest": [8, 20, 32, 35, 65, 81], "to_ndarrai": [8, 20, 24, 25, 27, 32, 33, 41, 42, 43, 45, 48, 51, 52, 63, 80, 81, 85, 86, 90, 92, 93, 97], "to_devic": [8, 20], "stream": [8, 20, 60], "inf": [9, 32, 41], "nan": [9, 28, 30, 32, 41, 49, 88, 89, 92], "pi": [9, 32, 41], "obj": [10, 28, 32, 35, 53], "_array_object": [10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 23], "nestedsequ": 10, "supportsbufferprotocol": [10, 20], "copi": [10, 11, 15, 24, 28, 32, 33, 35, 48, 50, 93], "stop": [10, 26, 32, 43, 87, 91], "empti": [10, 27, 28, 30, 32, 35, 41, 42, 44, 48, 49, 51, 72, 84, 87, 88, 90, 94], "empty_lik": 10, "ey": 10, "n_row": 10, "n_col": 10, "k": [10, 32, 42, 56, 84, 90], "from_dlpack": 10, "full": [10, 25, 32, 39, 41, 43, 45, 51, 52, 58, 60, 70, 72, 74, 78, 86, 97], "fill_valu": [10, 32, 43], "full_lik": [10, 32, 43], "linspac": [10, 30, 32, 41, 43, 80, 84, 87, 89, 92], "num": [10, 26, 29, 32, 41], "endpoint": 10, "meshgrid": 10, "xy": 10, "ones_lik": [10, 32, 43, 80, 87], "tril": 10, "triu": 10, "zero": [10, 30, 32, 41, 42, 43, 59, 80, 87, 89, 91, 92], "zeros_lik": [10, 32, 43, 80, 87], "astyp": [11, 32, 42, 51], "can_cast": 11, "from_": 11, "compat": [11, 13, 14, 15, 16, 17, 18, 21, 25, 28, 32, 42, 48, 52, 53, 88, 89], "finfo_object": 11, "ep": 11, "max": [11, 19, 30, 32, 41, 42, 48, 51, 56, 80, 84, 89, 90, 97], "min": [11, 19, 30, 32, 41, 42, 48, 56, 80, 84, 89, 90], "smallest_norm": 11, "iinfo_object": 11, "isdtyp": 11, "kind": [11, 29, 32], "whether": [11, 25, 28, 30, 32, 35, 39, 41, 44, 48, 49, 51, 52, 63, 81, 86, 93, 94, 95, 97], "latest": [11, 32, 53, 55, 73, 74, 77], "api_specif": [11, 32, 53], "result_typ": 11, "arrays_and_dtyp": 11, "int8": [12, 29, 32, 84, 87, 90, 92, 97], "int16": [12, 29, 32, 84, 87, 90, 92, 97], "int32": [12, 29, 32, 84, 87, 90, 92, 97], "uint8": [12, 29, 32, 41, 51, 65, 84, 87, 90, 92, 97], "uint16": [12, 29, 32, 84, 87, 90, 92, 97], "uint32": [12, 29, 32, 35, 81, 84, 87, 90, 92, 97], "float32": [12, 29, 32, 84, 87, 90], "complex64": [12, 29, 32], "complex128": [12, 29, 32], "ab": [13, 32, 41, 52, 80, 84], "aco": 13, "arcco": [13, 32, 41], "acosh": 13, "arccosh": [13, 32, 41], "x1": [13, 16, 23], "x2": [13, 16, 23], "asin": 13, "arcsin": [13, 32, 41], "asinh": 13, "arcsinh": [13, 32, 41], "atan": 13, "arctan": [13, 32, 41], "atan2": 13, "arctan2": [13, 32, 41], "atanh": 13, "arctanh": [13, 32, 41], "bitwise_and": 13, "bitwise_left_shift": 13, "left_shift": 13, "bitwise_invert": 13, "invert": [13, 30, 32, 44, 95], "bitwise_or": 13, "bitwise_right_shift": 13, "right_shift": 13, "bitwise_xor": 13, "ceil": [13, 32, 41], "conj": 13, "co": [13, 30, 32, 41, 43, 80, 84, 89], "cosh": [13, 32, 41], "divid": [13, 32, 42], "equal": [13, 28, 32, 37, 41, 65, 67, 90, 93], "exp": [13, 32, 41, 43, 80, 84], "expm1": [13, 32, 41], "floor": [13, 32, 41, 42], "floor_divid": [13, 32, 42], "greater": [13, 32, 43, 87], "greater_equ": 13, "imag": 13, "isfinit": [13, 32, 41], "isinf": [13, 32, 41], "isnan": [13, 32, 41], "less": [13, 25, 30, 32, 33, 42, 48, 51], "less_equ": 13, "log1p": [13, 32, 41], "log2": [13, 32, 41], "log10": [13, 32, 41], "logaddexp": 13, "logical_and": 13, "logical_not": 13, "logical_or": 13, "logical_xor": 13, "multipli": [13, 30, 32, 55, 89], "neg": [13, 32, 43, 48, 58, 87, 91, 93], "not_equ": 13, "posit": [13, 28, 32, 39, 40, 42, 49, 51, 91, 94, 97], "pow": 13, "remaind": [13, 32, 42, 51, 97], "round": [13, 32, 41, 56], "sign": [13, 32, 35, 41, 42, 81, 88, 92], "sin": [13, 32, 41, 80, 84], "sinh": [13, 32, 41], "sqrt": [13, 30, 32, 42, 84, 89], "subtract": 13, "tan": [13, 32, 41], "tanh": [13, 32, 41], "trunc": [13, 32, 41], "axi": [14, 15, 16, 18, 19, 21, 23, 28, 32, 45, 48, 49, 50, 83, 88, 93, 94], "broadcast_arrai": 15, "broadcast_to": 15, "broadcast": [15, 30, 32, 41, 42, 53, 80, 84, 89], "concat": [15, 28, 32, 33, 48, 49, 88, 94], "concaten": [15, 25, 28, 32, 44, 48, 49, 51, 53, 55, 80, 93, 94, 97], "expand_dim": 15, "flip": 15, "permute_dim": 15, "transpos": [15, 32, 48, 81], "reshap": [15, 24, 28, 32, 42, 80, 85], "roll": 15, "shift": 15, "squeez": 15, "stack": [15, 97], "argmax": [16, 30, 32, 42, 48, 80, 84, 89, 90], "keepdim": [16, 19, 21], "argmin": [16, 30, 32, 42, 48, 80, 84, 89, 90], "nonzero": [16, 30, 32, 40, 51, 97], "uniqueallresult": 17, "inverse_indic": 17, "count": [17, 28, 30, 32, 40, 41, 42, 48, 49, 51, 56, 63, 80, 84, 89, 93, 97], "uniquecountsresult": 17, "uniqueinverseresult": 17, "unique_al": 17, "unique_count": 17, "unique_invers": 17, "unique_valu": [17, 32, 41, 42, 90], "argsort": [18, 25, 26, 28, 30, 32, 33, 42, 50, 80, 83, 84, 86, 88, 89, 97], "descend": [18, 28, 32, 43, 49, 87, 88, 94], "stabl": [18, 32, 50, 83, 85], "mean": [19, 26, 28, 30, 32, 35, 42, 43, 47, 48, 51, 56, 80, 81, 84, 89, 90], "prod": [19, 30, 32, 42, 48, 80, 84, 89, 90], "std": [19, 30, 32, 42, 52, 80, 84, 89, 90], "sum": [19, 30, 32, 41, 42, 48, 52, 80, 84, 89, 90], "annot": 20, "aren": [20, 73, 74], "signatur": [20, 31, 55], "input": [20, 25, 27, 28, 30, 41, 42, 43, 44, 48, 50, 52, 55, 59, 81, 83, 84, 86, 89, 92, 94, 95], "pycapsul": 20, "supportsdlpack": 20, "protocol": 20, "proto": 20, "def": [20, 55, 64, 75], "meth": 20, "self": [20, 25, 28, 32, 42, 48, 51, 81, 82, 85, 86, 88, 92, 93, 94, 97], "Such": 20, "primarili": [20, 81], "static": [20, 25, 28, 30, 32, 33, 42, 48, 49, 51, 89], "checker": 20, "recogn": 20, "structur": [20, 25, 28, 32, 48, 63, 67, 88, 89, 92, 93, 97], "subtyp": 20, "duck": 20, "c": [20, 24, 28, 32, 42, 43, 44, 45, 48, 51, 56, 58, 60, 73, 79, 85, 88, 92, 93, 95, 97], "func": 20, "pep": 20, "544": 20, "decor": 20, "runtime_check": 20, "act": [20, 32, 42, 55], "runtim": [20, 26, 58], "presenc": 20, "ignor": [20, 28, 30, 32, 35, 41, 52, 81, 88, 92], "genproto": 20, "linalg": [22, 32, 54], "matmul": 23, "matrix": [23, 28, 30, 32, 89], "product": [23, 30, 32, 41, 42, 43, 81, 84, 85, 89, 90], "tensordot": 23, "matrix_transpos": 23, "vecdot": 23, "arrayview": [24, 32, 35, 41, 42, 80, 81, 92], "row_major": [24, 32, 42, 85], "view": [24, 32, 59, 63, 68, 72, 78, 85, 92], "arraryview": [24, 32, 85], "similarli": [24, 32, 56, 63, 85], "store": [24, 27, 28, 30, 32, 35, 43, 47, 51, 56, 64, 65, 68, 77, 81, 85, 86, 87, 89, 93, 97], "being": [24, 28, 32, 33, 35, 41, 42, 49, 63, 65, 66, 67, 75, 81, 85, 88, 91, 94], "element": [24, 25, 28, 30, 32, 36, 37, 39, 41, 42, 43, 44, 48, 49, 51, 52, 55, 63, 75, 80, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97], "int_scalar": [24, 25, 28, 29, 30, 32, 35, 41, 42, 43, 48, 50, 51, 52, 83, 84, 85, 87, 89, 90, 92], "items": [24, 32, 42, 43, 51, 80, 81, 85, 92], "byte": [24, 25, 28, 29, 32, 35, 37, 42, 43, 51, 65, 70, 81, 85, 86, 88, 92, 97], "By": [24, 25, 27, 28, 30, 32, 33, 35, 41, 42, 44, 48, 51, 52, 85, 89, 95, 97], "f": [24, 25, 32, 41, 42, 43, 51, 70, 73, 74, 76, 81, 84, 85, 97], "column_major": [24, 32, 42, 85], "objtyp": [24, 25, 28, 30, 32, 33, 42, 48, 49, 51, 65], "transfer": [24, 25, 28, 32, 35, 42, 48, 51, 56, 81, 85, 86, 88, 92, 93, 97], "client": [24, 25, 28, 32, 42, 43, 51, 52, 54, 66, 72, 73, 74, 75, 76, 77, 80, 85, 86, 88, 92, 93, 97], "exce": [24, 25, 28, 32, 42, 43, 51, 52, 81, 85, 86, 87, 88, 92, 97], "maxtransferbyt": [24, 25, 28, 32, 42, 43, 51, 52, 81, 85, 86, 88, 92, 97], "runtimeerror": [24, 25, 26, 28, 30, 32, 33, 34, 35, 39, 41, 42, 43, 44, 48, 49, 51, 52, 81, 84, 85, 86, 87, 89, 90, 92, 95, 96, 97], "error": [24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 38, 39, 41, 42, 43, 48, 49, 51, 52, 55, 65, 67, 77, 81, 84, 85, 86, 88, 89, 90, 92, 96, 97], "thrown": [24, 25, 28, 32, 33, 34, 35, 39, 42, 43, 48, 49, 51, 81, 84, 85, 86, 90, 92, 97], "receiv": [24, 25, 26, 28, 32, 33, 35, 42, 48, 51, 81, 85, 92, 96], "doe": [24, 25, 26, 28, 30, 32, 33, 35, 36, 42, 43, 45, 48, 49, 51, 60, 63, 65, 67, 81, 85, 86, 87, 88, 89, 92, 94, 96, 97], "protect": [24, 25, 32, 42, 43, 51, 81, 85, 86, 92, 97], "overflow": [24, 25, 32, 41, 42, 51, 81, 85, 86, 92, 97], "memori": [24, 25, 26, 28, 32, 33, 35, 42, 48, 51, 61, 62, 65, 70, 81, 85, 86, 92, 97], "run": [24, 25, 26, 28, 32, 35, 41, 42, 48, 51, 60, 61, 63, 70, 72, 73, 74, 76, 77, 79, 81, 85, 86, 92, 93, 96, 97], "assumpt": [24, 25, 32, 42, 43, 51, 81, 85, 86, 92, 97], "distribut": [24, 25, 27, 28, 30, 32, 33, 35, 42, 43, 45, 48, 51, 70, 73, 74, 81, 84, 85, 86, 87, 89, 92, 95, 97], "mai": [24, 25, 28, 32, 33, 35, 42, 43, 44, 51, 63, 65, 70, 72, 74, 76, 77, 81, 85, 86, 87, 88, 92, 97], "overrid": [24, 25, 27, 32, 42, 43, 51, 60, 81, 85, 86, 92, 97], "larger": [24, 25, 32, 42, 43, 51, 59, 63, 81, 85, 86, 92, 97], "proce": [24, 25, 32, 42, 43, 51, 81, 85, 86, 92, 97], "caution": [24, 25, 32, 42, 43, 51, 81, 85, 86, 92, 97], "to_list": [24, 25, 27, 32, 33, 42, 48, 49, 51, 63, 81, 85, 92, 93, 97], "to_hdf": [24, 25, 27, 28, 30, 32, 33, 35, 42, 48, 51, 65, 68, 80, 81, 89], "prefix_path": [24, 25, 27, 28, 30, 32, 33, 35, 42, 48, 51, 89], "dataset": [24, 25, 27, 28, 30, 32, 33, 35, 42, 48, 51, 64, 65, 67, 68, 89, 97], "truncat": [24, 25, 27, 30, 32, 33, 35, 41, 42, 48, 51, 65, 67, 89], "file_typ": [24, 25, 27, 28, 30, 32, 33, 35, 42, 48, 51, 89], "save": [24, 25, 28, 30, 32, 33, 35, 42, 48, 51, 56, 57, 59, 60, 65, 66, 67, 81, 86, 89, 95], "path": [24, 28, 32, 33, 35, 36, 42, 47, 56, 61, 72, 73, 74, 75, 77, 81], "append": [24, 25, 28, 30, 32, 33, 35, 42, 44, 48, 51, 65, 67, 80, 87, 89, 97], "overwrit": [24, 25, 28, 30, 32, 33, 35, 42, 48, 51, 89, 92], "exist": [24, 25, 26, 28, 30, 32, 33, 35, 36, 42, 43, 48, 51, 65, 67, 72, 87, 88, 89, 96], "format": [24, 25, 26, 27, 28, 32, 33, 34, 35, 42, 47, 48, 51, 55, 63, 65, 66, 67, 75, 88, 93, 96, 97], "date": [24, 32, 52, 59], "update_hdf": [24, 25, 27, 28, 30, 32, 33, 35, 42, 48, 51], "repack": [24, 25, 27, 28, 30, 32, 33, 35, 42, 48, 51], "ad": [24, 25, 27, 28, 32, 33, 35, 38, 42, 48, 51, 60, 62, 63, 67, 72, 81, 96], "directori": [24, 25, 28, 30, 32, 33, 35, 36, 42, 47, 48, 51, 56, 57, 60, 61, 70, 72, 73, 74, 75, 76, 77, 78, 79, 89], "filenam": [24, 25, 28, 30, 32, 33, 35, 42, 48, 51, 56, 81, 89], "prefix": [24, 25, 28, 30, 32, 33, 35, 42, 48, 51, 52, 80, 89, 97], "share": [24, 25, 28, 30, 32, 33, 42, 48, 51, 59, 77, 89], "releas": [24, 25, 28, 32, 33, 35, 42, 48, 51, 56, 61, 62, 73, 74], "delet": [24, 25, 26, 27, 28, 30, 32, 33, 35, 42, 48, 49, 51, 52, 56, 61, 70, 89], "inaccess": [24, 25, 28, 32, 33, 35, 42, 48, 51], "overwritten": [24, 25, 28, 32, 33, 35, 42, 48, 51, 65, 67], "remov": [24, 25, 28, 32, 33, 35, 42, 48, 51, 56, 60, 76, 88, 93, 97], "remain": [24, 25, 28, 32, 33, 35, 42, 48, 51, 73, 81, 82, 88, 94], "better": [24, 25, 28, 32, 33, 35, 42, 48, 51], "perform": [24, 25, 28, 30, 32, 33, 35, 37, 41, 42, 44, 48, 51, 56, 58, 59, 60, 63, 64, 66, 72, 80, 81, 84, 87, 88, 89, 92], "caus": [24, 25, 28, 32, 33, 35, 42, 48, 51, 70, 72], "expand": [24, 25, 28, 32, 33, 35, 42, 48, 51, 53, 81], "success": [24, 25, 26, 28, 32, 33, 35, 37, 41, 42, 48, 51, 92, 96], "file_format": [24, 25, 28, 32, 33, 35, 42, 48, 51], "_local": [24, 25, 28, 32, 33, 35, 42, 48, 51, 65], "determin": [24, 25, 28, 30, 32, 33, 35, 42, 48, 51, 53, 59, 65, 75, 81, 86, 88, 89], "becaus": [24, 25, 28, 32, 33, 35, 41, 43, 48, 51, 60, 63, 64, 65, 66, 70, 81, 86, 87, 88, 93, 97], "kwarg": [25, 30, 32, 43, 46, 52, 53, 86, 89], "repres": [25, 27, 30, 32, 48, 49, 51, 52, 56, 65, 86, 89, 97], "belong": [25, 32, 86], "often": [25, 32, 86, 90], "speed": [25, 32, 44, 58, 62, 75, 86, 87, 95], "oper": [25, 26, 27, 28, 30, 32, 33, 35, 42, 47, 48, 50, 51, 55, 56, 59, 66, 70, 76, 78, 79, 80, 83, 88, 89, 91, 96], "cost": [25, 32, 86], "initi": [25, 26, 32, 42, 43, 56, 74, 79, 86, 87, 92, 96], "navalu": [25, 32, 86], "miss": [25, 32, 86], "null": [25, 32, 35, 51, 65, 86, 97], "permut": [25, 28, 30, 32, 50, 51, 53, 65, 80, 83, 86, 89, 95], "segment": [25, 30, 32, 35, 37, 48, 51, 53, 65, 80, 81, 86, 89, 93, 95, 97], "offset": [25, 30, 32, 35, 43, 51, 65, 81, 86, 95, 97], "union": [25, 26, 28, 32, 34, 35, 37, 41, 42, 43, 44, 48, 50, 51, 63, 80, 81, 83, 84, 86, 87, 90, 95, 97], "nlevel": [25, 32, 80, 86], "distinct": [25, 28, 32, 86], "rank": [25, 32, 42, 43, 51, 65, 80, 81, 86, 87, 91], "binop": [25, 28, 32, 35, 42, 48, 51], "registerablepiec": [25, 32], "requiredpiec": [25, 32], "classmethod": [25, 27, 28, 32, 33, 48, 49, 86], "from_cod": [25, 32, 80, 86], "pre": [25, 32, 53, 86], "constructor": [25, 32, 48, 63, 86], "normal": [25, 26, 27, 28, 30, 32, 42, 43, 52, 55, 84, 86, 88, 89], "from_return_msg": [25, 27, 28, 30, 32, 33, 48, 49, 51], "rep_msg": [25, 27, 28, 30, 32, 33, 48, 51, 75], "standardize_categori": [25, 32], "origin": [25, 27, 28, 30, 32, 33, 35, 39, 41, 42, 44, 48, 49, 51, 52, 84, 86, 87, 88, 89, 93, 97], "remap": [25, 32], "set_categori": [25, 32], "new_categori": [25, 32], "old": [25, 32, 59], "unchang": [25, 32], "na": [25, 32, 65], "produc": [25, 32, 51, 86, 97], "isna": [25, 32], "reset_categori": [25, 32], "recomput": [25, 32, 35], "unus": [25, 32, 35, 81], "slice": [25, 28, 32, 42, 63, 80, 85, 86, 88, 93, 97], "In": [25, 28, 30, 32, 35, 41, 42, 51, 55, 56, 57, 59, 60, 63, 70, 72, 73, 75, 77, 81, 84, 89, 90, 91, 93, 96, 97], "case": [25, 26, 30, 32, 33, 35, 41, 42, 49, 51, 52, 56, 58, 63, 64, 65, 67, 72, 73, 75, 77, 84, 94], "elimin": [25, 32, 67], "instanc": [25, 27, 28, 30, 32, 42, 43, 49, 51, 56, 67, 72, 75, 81, 84, 88, 89, 90, 92, 97], "substr": [25, 27, 32, 51, 80, 86], "str_scalar": [25, 29, 32, 40, 51, 86, 97], "regex": [25, 32, 51, 86, 97], "regular": [25, 32, 51, 80, 86], "handl": [25, 26, 28, 32, 41, 51, 66, 81, 86, 88, 92, 97], "re2": [25, 32, 51, 72, 86, 97], "lookahead": [25, 32, 51, 86, 97], "lookbehind": [25, 32, 51, 86, 97], "rasi": [25, 32, 51, 86, 97], "startswith": [25, 32, 51, 80, 86, 97], "endswith": [25, 32, 51, 80, 86, 97], "significantli": [25, 32, 60, 86], "instead": [25, 27, 28, 30, 32, 35, 42, 51, 56, 79, 81, 84, 86, 89, 97], "in1d": [25, 32, 44, 55, 63, 80, 86, 95, 97], "against": [25, 32, 48, 51, 56, 63, 81, 93, 97], "intersect1d": [25, 32, 44, 48, 55, 63, 80, 93, 95], "union1d": [25, 32, 44, 48, 55, 63, 80, 93, 95], "consid": [25, 28, 32, 59, 97], "wise": [25, 32, 41, 42, 80, 85], "b": [25, 26, 28, 30, 32, 35, 37, 41, 42, 43, 44, 45, 48, 49, 50, 51, 63, 79, 83, 84, 88, 89, 90, 91, 92, 93, 95, 97], "arbitrarili": [25, 32], "larg": [25, 32, 56, 84], "cat": [25, 32, 35, 77], "cattwo": [25, 32], "hash": [25, 32, 41, 48, 50, 51, 83], "128": [25, 32, 41, 48, 51], "ith": [25, 32, 48, 51], "siphash128": [25, 32, 51], "balanc": [25, 32, 51], "dictionari": [25, 26, 28, 30, 32, 35, 36, 51, 53, 75, 81, 88, 89], "realist": [25, 32, 51], "about": [25, 26, 32, 34, 42, 51, 52, 55, 56, 60, 70, 75, 84, 85, 97], "probabl": [25, 32, 51], "collis": [25, 32, 41, 51], "neglig": [25, 32, 51], "place": [25, 27, 28, 30, 32, 33, 35, 38, 42, 47, 48, 49, 51, 52, 53, 57, 61, 84, 89], "togeth": [25, 28, 30, 32, 51, 88, 89, 95], "guarante": [25, 32, 50, 51, 83, 97], "lie": [25, 32, 51], "contigu": [25, 32, 37, 51], "necessarili": [25, 32, 51], "groupbi": [25, 28, 30, 32, 35, 48, 51, 80, 86, 97], "simpli": [25, 26, 32, 41, 87], "even": [25, 28, 30, 32, 42, 65, 84, 88, 89, 96], "merg": [25, 28, 32, 59], "synchron": [25, 32], "interleav": [25, 28, 32, 44, 87], "greatli": [25, 32, 44, 87], "improv": [25, 32, 44, 59, 60, 75, 87], "determinist": [25, 32, 44, 87], "expens": [25, 32], "slower": [25, 32, 97], "categorical_arrai": [25, 32], "collect": [25, 28, 30, 32, 33, 35, 42, 46, 48, 51, 73, 89], "within": [25, 26, 28, 30, 31, 32, 33, 35, 42, 43, 48, 51, 55, 56, 65, 67, 87, 88, 89, 93], "written": [25, 28, 30, 32, 33, 35, 36, 38, 42, 48, 49, 51, 64, 65, 66, 67, 68, 72, 81, 89, 92], "load": [25, 28, 32, 33, 35, 42, 48, 51, 64, 65, 67, 68, 77, 81], "without": [25, 28, 32, 35, 42, 61, 70, 72, 81, 88], "to_parquet": [25, 28, 32, 33, 35, 42, 48, 51, 67, 68, 81], "compress": [25, 28, 32, 33, 35, 42, 48, 51, 56, 91, 93], "parquet": [25, 28, 30, 32, 33, 35, 42, 48, 51, 56, 64, 66, 68, 81, 89], "chunk": [25, 32, 33, 35, 42, 48, 51], "snappi": [25, 28, 32, 33, 35, 42, 48, 51, 56, 67, 72], "gzip": [25, 28, 32, 33, 35, 42, 48, 51, 56, 67], "brotli": [25, 28, 32, 33, 35, 42, 48, 51, 56, 67], "zstd": [25, 28, 32, 33, 35, 42, 48, 51, 56, 67], "lz4": [25, 28, 32, 33, 35, 42, 48, 51, 56, 67], "On": [25, 26, 32, 96], "due": [25, 32, 35, 64, 67, 81], "issu": [25, 28, 30, 32, 55, 59, 72, 77, 89, 93], "visibl": [25, 26, 32, 33, 35, 42, 48, 51, 96], "permiss": [25, 32, 33, 42, 48, 51], "form": [25, 29, 32, 33, 42, 47, 48, 51, 59, 75, 97], "numlocal": [25, 26, 28, 32, 33, 35, 42, 48, 51, 96], "effici": [25, 28, 32, 33, 42, 51, 93, 97], "o": [25, 32, 33, 42, 47, 48, 51, 78, 80], "reli": [25, 32, 33, 42, 48, 51, 89], "deprec": [25, 28, 30, 32, 33, 35, 42, 48, 49, 51, 52, 59, 81, 89], "impact": [25, 30, 32, 33, 42, 48, 58, 59, 61, 89], "neither": [25, 32, 33, 42, 43, 51, 52, 87, 97], "nor": [25, 32, 33, 42, 43, 51, 87, 97], "state": [25, 32, 51, 59], "charact": [25, 26, 27, 31, 32, 43, 51, 75, 97], "user_defined_nam": [25, 27, 28, 30, 32, 33, 42, 48, 49, 51, 52, 89], "underli": [25, 27, 28, 30, 32, 33, 41, 48, 49, 52, 89], "root": [25, 27, 28, 30, 32, 33, 42, 49, 52, 56, 65, 73, 81, 84, 89], "now": [25, 27, 28, 30, 32, 33, 42, 48, 49, 51, 52, 53, 55, 60, 61, 64, 67, 72, 73, 74, 89], "updat": [25, 27, 28, 30, 32, 33, 35, 42, 45, 48, 49, 51, 52, 67, 72, 77, 81, 89], "modif": [25, 27, 28, 30, 32, 33, 42, 48, 49, 51, 52, 75, 88, 89], "fluid": [25, 27, 28, 30, 32, 33, 42, 48, 49, 51, 52, 89], "registrationerror": [25, 27, 28, 30, 32, 33, 42, 48, 49, 51, 52, 89], "unabl": [25, 27, 28, 30, 32, 33, 42, 49, 51, 52, 89], "unregist": [25, 27, 28, 30, 32, 33, 42, 48, 49, 51, 52, 53, 80, 89], "attach": [25, 27, 28, 30, 32, 33, 42, 48, 49, 51, 52, 53, 80, 89], "unregister_categorical_by_nam": [25, 32], "is_regist": [25, 27, 28, 30, 32, 33, 42, 48, 49, 51, 52, 53, 80, 89], "immun": [25, 27, 28, 30, 32, 33, 42, 48, 49, 51, 52, 89], "until": [25, 27, 28, 30, 32, 33, 42, 48, 49, 51, 52, 61, 89], "previous": [25, 28, 30, 32, 33, 35, 42, 48, 49, 51, 52, 89], "attempt": [25, 28, 30, 32, 33, 35, 42, 48, 49, 50, 51, 52, 72, 81, 88, 89], "bool_": [25, 32, 42, 51, 52, 84, 90], "registri": [25, 28, 30, 32, 33, 34, 42, 49, 51, 52, 53, 89], "mi": [25, 32, 33, 49, 52], "json": [25, 26, 32, 34, 42, 47, 51], "pretty_print_info": [25, 32, 42, 51], "human": [25, 32, 34, 42, 51], "readabl": [25, 32, 34, 35, 42, 51, 65, 81], "parse_hdf_categor": [25, 32], "dict": [25, 26, 28, 30, 32, 34, 35, 36, 46, 53, 88, 89], "conjunct": [25, 32, 81, 86, 97], "load_al": [25, 28, 32, 33, 35, 42, 51, 68], "reconstitut": [25, 32], "convent": [25, 32], "call": [25, 26, 27, 28, 30, 32, 35, 42, 43, 48, 49, 51, 55, 63, 67, 70, 72, 74, 75, 81, 84, 85, 87, 88, 89, 92, 96], "send": [25, 26, 28, 32, 35, 42, 43, 48, 51, 55, 81, 88, 96], "node": [25, 28, 32, 35, 42, 48, 51, 56, 65, 79, 81], "1234": [25, 28, 32, 35, 42, 48, 51, 59], "1235": [25, 28, 32, 35, 42, 48, 51], "1236": [25, 28, 32, 35, 42, 48, 51], "1237": [25, 28, 32, 35, 42, 48, 51], "receive_arrai": [25, 28, 32, 42, 48, 51], "complet": [25, 26, 28, 32, 42, 48, 51, 55, 57, 59, 72, 74, 96, 97], "op": [25, 27, 28, 32, 35, 42, 48, 51, 56], "localhost": [26, 70, 96], "5555": [26, 70, 96], "access_token": [26, 96], "connect_url": [26, 70, 96], "access_channel": [26, 96], "channel": [26, 96], "machin": [26, 56, 57, 60, 70, 73, 74, 96], "whicn": [26, 96], "interpret": [26, 32, 35, 56, 81, 96], "socket": [26, 96], "enabl": [26, 32, 38, 42, 47, 60, 72, 73, 75, 81, 96], "authent": [26, 47, 70, 96], "tcp": [26, 70, 96], "token_valu": [26, 96], "zmqchannel": [26, 96], "connectionerror": [26, 96], "pars": [26, 27, 32, 33, 42, 55, 96], "seen": [26, 96], "disconnect": [26, 32, 42], "shutdown": [26, 60, 61, 75], "symtabl": 26, "shut": [26, 70, 75], "down": [26, 58, 59, 61, 70, 72, 75], "get": [26, 28, 29, 31, 32, 35, 41, 48, 55, 56, 59, 60, 61, 73, 77, 81, 85, 92, 93], "serverhostnam": 26, "serverport": 26, "numpu": 26, "processor": [26, 56], "maxtaskpar": 26, "physicalmemori": 26, "get_mem_us": 26, "as_perc": 26, "amount": [26, 28, 32, 42, 75, 88, 97], "symbol": [26, 32, 34, 42, 48, 51, 55, 92], "kb": [26, 28, 32], "mb": [26, 28, 32], "gb": [26, 28, 32], "tb": 26, "pb": 26, "percent": 26, "alloc": 26, "get_mem_avail": 26, "get_mem_statu": 26, "retriev": [26, 31, 32, 34, 42, 47, 49, 59], "statu": 26, "total_mem": 26, "total": [26, 30, 32, 35, 51, 56, 81, 89], "physic": [26, 39, 97], "host": [26, 47, 72], "avail_mem": 26, "arkouda_mem_alloc": 26, "chapel": [26, 32, 41, 55, 58, 60, 65, 69, 70, 72, 75, 76, 77, 78, 92, 96, 97], "process": [26, 32, 34, 35, 49, 55, 62, 65, 70, 77, 81, 93, 97], "pct_avail_mem": 26, "percentag": 26, "locale_id": 26, "id": [26, 56, 77, 89], "locale_hostnam": 26, "get_server_command": 26, "command": [26, 31, 32, 42, 55, 56, 57, 59, 61, 70, 72, 74, 75, 76, 77, 96], "commandmap": [26, 55, 75], "print_server_command": 26, "ruok": 26, "imok": 26, "imnotok": 26, "occur": [26, 28, 30, 32, 35, 40, 41, 42, 49, 51, 55, 72, 89, 90, 94, 97], "basic": [26, 32, 42, 47, 59, 77, 85, 92], "wai": [26, 56, 60, 65, 70, 75, 84, 86, 87, 88, 92, 97], "quick": [26, 60], "healthcheck": 26, "respons": [26, 32, 51, 55], "both": [26, 28, 32, 35, 37, 42, 44, 52, 60, 63, 65, 66, 70, 72, 81, 86, 95, 97], "latter": [26, 97], "generate_histori": 26, "num_command": [26, 31], "command_filt": [26, 31], "shell": [26, 31, 32, 35, 74, 81], "jupyt": [26, 31, 70], "notebook": [26, 31, 70], "ipython": [26, 31, 70], "cmd_filter": 26, "select": [26, 28, 31, 32, 35, 48, 55, 59, 72, 78, 88, 93], "10000": 26, "randint": [26, 30, 32, 41, 43, 50, 63, 80, 83, 84, 87, 89, 90], "500": [26, 57, 60], "457": 26, "647": 26, "9362": 26, "9602": 26, "9683": 26, "bitvector": [27, 32], "width": [27, 32, 97], "64": [27, 32, 41, 42, 43, 56, 87, 88, 92], "revers": [27, 30, 32], "callback": [27, 32], "field": [27, 32, 43, 51, 59, 81, 97], "vector": [27, 30, 32, 80, 89], "signific": [27, 32, 41, 42, 50, 59, 75, 83, 84], "callabl": [27, 28, 32, 88], "flag": [27, 32, 35, 45, 56, 61, 75, 96], "binari": [27, 32, 43, 73, 74, 84], "thin": [27, 32], "mostli": [27, 32], "affect": [27, 32], "conserv": [27, 32], "special_objtyp": [27, 32, 52], "export": [27, 32, 35, 41, 57, 60, 72, 73, 74, 77, 90], "opeq": [27, 32, 42], "msb_left": [27, 32], "pad": [27, 32, 59], "show_int": [27, 32], "back": [27, 30, 32, 55, 58, 61, 81, 89], "represent": [27, 32, 42], "accord": [27, 28, 32, 41, 88, 92], "ip_address": [27, 32, 33, 82], "ip": [27, 32], "ipv4": [27, 32, 35, 81], "helper": [27, 32], "proof": [27, 32], "made": [27, 28, 32, 51, 97], "accomod": [27, 32], "ipv6": [27, 32], "prevent": [27, 32, 35, 42, 48, 64, 65, 73, 93], "inadvert": [27, 32], "export_uint": [27, 32], "ipaddress": [27, 32], "special": [27, 32, 49, 92, 94], "is_ipv4": [27, 32], "ip2": [27, 32], "well": [27, 32, 56, 63, 76], "deal": [27, 32], "is_ipv6": [27, 32], "initialdata": [28, 32, 88], "userdict": [28, 32, 46], "homogen": [28, 32, 88], "frame": [28, 32, 49, 88, 94], "stringifi": [28, 32, 88], "pd": [28, 32, 35, 43, 52, 53, 63, 81, 88], "usernam": [28, 32, 47, 88], "alic": [28, 32, 88], "bob": [28, 32, 88], "carol": [28, 32, 88], "userid": [28, 32, 88, 89], "111": [28, 32, 51, 88], "222": [28, 32, 88], "333": [28, 32, 88], "dai": [28, 32, 52, 59, 88, 89], "224": [28, 32, 88], "slightli": [28, 32, 35, 88], "stride": [28, 32, 37, 43, 87, 88, 91], "148": [28, 32, 88], "112": [28, 32, 88], "96": [28, 32, 42, 88], "column_class": [28, 32], "from_panda": [28, 32], "pd_df": [28, 32, 63], "drop": [28, 30, 32, 42, 59, 84, 89], "inplac": [28, 32, 88], "datefram": [28, 32, 88], "col_nam": [28, 32, 35, 88], "drop_dupl": [28, 32, 88], "duplcat": [28, 32, 88], "iter": [28, 32, 35, 43, 50, 56, 80, 81, 83], "dedup": [28, 32, 88], "last": [28, 32, 42, 43, 49, 50, 51, 59, 75, 83, 88, 94, 96, 97], "reset_index": [28, 32, 88], "longer": [28, 32, 43, 65, 76, 88], "caller": [28, 32, 88], "correctli": [28, 32, 77, 88], "update_s": [28, 32], "renam": [28, 32], "mapper": [28, 32, 88], "nonexist": [28, 32, 88], "99": [28, 32, 56, 88], "lower": [28, 32, 51, 65, 88], "onto": [28, 32, 51, 97], "sens": [28, 32], "whose": [28, 32, 48, 49, 51, 94], "essenti": [28, 32, 42, 48, 51, 88, 93], "diffen": [28, 32, 88], "head": [28, 32, 49, 59], "quickli": [28, 32, 57, 88], "tail": [28, 32, 43, 49], "sampl": [28, 32, 41, 43], "random": [28, 32, 43, 45, 56, 79, 80], "use_seri": [28, 32, 88], "as_index": [28, 32, 88], "dropna": [28, 30, 32, 80, 88, 89], "groupbyclass": [28, 32, 44, 49, 54, 95], "kept": [28, 30, 32, 48, 88, 89], "memory_usag": [28, 32], "One": [28, 30, 32, 42, 49, 63, 89, 94], "to_panda": [28, 32, 33, 49, 52, 63, 88, 94], "datalimit": [28, 32, 88], "retain_index": [28, 32, 88], "megabyt": [28, 32, 88], "request": [28, 30, 32, 36, 42, 43, 51, 55, 59, 87, 88, 89], "estim": [28, 30, 32, 42, 84, 88, 89], "book": [28, 32, 88], "disk": [28, 32, 33, 35, 42, 51, 97], "preserv": [28, 32, 49, 94, 97], "across": [28, 32, 35, 65, 81], "suffix": [28, 32, 35, 48, 51, 65, 80, 97], "convert_categor": [28, 32, 35], "categor": [28, 30, 32, 33, 35, 41, 44, 49, 50, 53, 54, 80, 81, 82, 83, 84, 87, 88, 89, 90, 92, 94, 95], "to_csv": [28, 32, 33, 35, 42, 51, 64, 68], "col_delim": [28, 32, 33, 35, 42, 51], "csv": [28, 32, 33, 35, 42, 51, 68, 81], "header": [28, 32, 33, 35, 42, 51, 81], "denot": [28, 32, 33, 35, 42, 51, 52], "unlik": [28, 32, 35, 51, 52], "utf": [28, 32, 35, 51], "NOT": [28, 32, 33, 35, 41, 42, 51, 72, 81, 92], "allow_error": [28, 32, 33, 35, 42, 51, 81], "unknown": [28, 32, 33, 35, 42, 43, 51], "arkouda_typ": [28, 32, 33, 35, 42, 51], "delimit": [28, 32, 33, 35, 36, 42, 49, 51, 56, 59, 64, 81, 97], "newlin": [28, 32, 33, 35, 42, 51, 64], "read_csv": [28, 32, 35, 64, 68], "infer": [28, 29, 30, 32, 35, 43, 65, 81], "ascend": [28, 30, 32, 33, 41, 42, 49, 82, 88, 90, 94], "coargsort": [28, 32, 50, 80, 83, 86, 88, 97], "sort_index": [28, 32, 49, 94], "sort_valu": [28, 32, 49, 88, 94], "apply_permut": [28, 32, 88], "perm": [28, 32, 50, 53, 83, 88], "entir": [28, 32, 48, 51, 56, 61, 88, 93], "unsort": [28, 32, 88], "arbitrari": [28, 32, 88], "invers": [28, 32, 41, 53, 88], "filter_by_rang": [28, 32], "highest": [28, 32, 42, 43], "unlimit": [28, 32], "qualifi": [28, 32], "filter_by_count": [28, 32], "deep": [28, 32, 48, 88], "reflect": [28, 32, 74, 88, 93], "shallow": [28, 32, 88], "vice": [28, 32, 81, 88], "versa": [28, 32, 81, 88], "alia": [28, 30, 32, 48, 52, 88, 89], "isin": [28, 32, 49], "show": [28, 32, 35, 45, 72, 81, 85, 89], "col_a": [28, 32], "col_b": [28, 32], "position": [28, 32], "other_df": [28, 32], "col_c": [28, 32], "corr": [28, 32, 42], "pairwis": [28, 32], "correl": [28, 32, 42], "inner": [28, 32, 37], "left_suffix": [28, 32], "_x": [28, 32], "right_suffix": [28, 32], "_y": [28, 32], "join": [28, 32, 48, 51, 54, 55, 80], "inner_join_merg": [28, 32], "right_join_merg": [28, 32], "blob": [28, 32], "main": [28, 32, 56, 59, 65], "core": [28, 31, 32, 56, 59], "l137": [28, 32], "intersect": [28, 32, 44, 48, 63, 80, 95], "unregister_dataframe_by_nam": [28, 32], "mismatch": [28, 30, 32, 72, 89], "analog": [28, 30, 32, 52, 89], "intx": [28, 32], "ident": [28, 32, 53, 84, 92], "point": [28, 32, 33, 37, 41, 42, 43, 49, 77, 87, 88, 92], "invert_permut": [28, 32, 53], "str_": [29, 32, 84, 86, 90, 97], "bigint": [29, 32, 41, 42, 43, 56, 81, 87, 92], "inttyp": [29, 32], "bittyp": [29, 32], "bool_scalar": [29, 32], "float_scalar": [29, 32, 42, 43], "numeric_scalar": [29, 32, 41, 42, 43, 84, 87], "numpy_scalar": [29, 32, 42, 84], "all_scalar": [29, 32, 43, 87], "enum": [29, 32, 38, 41, 65], "arkouda_supported_dtyp": [29, 32], "dtypeobject": [29, 32], "scalardtyp": [29, 32], "issupportednumb": [29, 32], "check_np_dtyp": [29, 32], "dt": [29, 32, 37, 41, 49, 92], "assert": [29, 32], "translate_np_dtyp": [29, 32], "split": [29, 32, 40, 51, 59, 80], "unsupport": [29, 30, 32, 35, 47, 50, 81, 95], "resolve_scalar_dtyp": [29, 32], "get_byteord": [29, 32], "concret": [29, 32], "byteord": [29, 32], "turn": [29, 32, 49, 60, 70, 94], "get_server_byteord": [29, 32], "pda": [30, 32, 41, 42, 43, 50, 52, 55, 83, 84, 87, 90, 92, 95], "groupabl": [30, 32, 44, 89, 95], "return_group": [30, 32, 95], "assume_sort": [30, 32, 89, 95], "return_indic": [30, 32, 95], "come": [30, 32, 61, 81, 87, 95], "applic": [30, 32, 41, 81, 87, 89, 95], "along": [30, 32, 41, 43, 87, 95], "consider": [30, 32, 95, 97], "groupby_reduction_typ": [30, 32], "prepar": [30, 32, 72, 89], "nkei": [30, 32, 49, 80, 89], "unique_kei": [30, 32, 80, 89], "ngroup": [30, 32, 80, 89], "logger": [30, 32, 51, 54, 80, 89], "arkoudalogg": [30, 32, 38, 51, 89], "nativ": [30, 32, 66, 67, 74, 81, 89, 93], "inherit": [30, 32, 89, 92], "overload": [30, 32, 89], "_get_grouping_kei": [30, 32, 89], "reduct": [30, 32, 42, 79, 80, 89, 90], "skipna": [30, 32, 89], "reduc": [30, 32, 60, 62, 89], "calcul": [30, 32, 35, 42, 44, 56, 65, 81, 84, 89, 90, 95], "77777777777777768": [30, 32, 89], "55555555555555536": [30, 32, 89], "33333333333333348": [30, 32, 89], "11111111111111116": [30, 32, 89], "77777777777777779": [30, 32, 89], "55555555555555558": [30, 32, 89], "33333333333333337": [30, 32, 89], "33333333333333326": [30, 32, 89], "group_sum": [30, 32, 89], "14": [30, 32, 56, 63, 64, 73, 84, 85, 89, 91], "group_product": [30, 32, 89], "108": [30, 32, 89], "00000000000003": [30, 32, 89], "9999999999999982": [30, 32, 89], "varianc": [30, 32, 42, 84, 89, 90], "group_var": [30, 32, 89], "averag": [30, 32, 42, 43, 56, 84, 89], "deviat": [30, 32, 42, 43, 52, 84, 89, 90], "len": [30, 32, 42, 48, 51, 84, 89, 91, 93, 97], "howev": [30, 32, 41, 42, 65, 72, 76, 77, 84, 86, 89], "divisor": [30, 32, 42, 84, 89], "unbias": [30, 32, 42, 84, 89], "hypothet": [30, 32, 37, 42, 84, 89], "infinit": [30, 32, 41, 42, 84, 89], "popul": [30, 32, 36, 40, 42, 84, 89], "333333333333333": [30, 32, 89], "group_std": [30, 32, 89], "se": [30, 32, 42, 84, 89], "5275252316519465": [30, 32, 89], "0954451150103321": [30, 32, 89], "group_mean": [30, 32, 89], "6666666666666665": [30, 32, 89], "7999999999999998": [30, 32, 89], "median": [30, 32, 56, 80, 89], "group_median": [30, 32, 89], "75": [30, 32, 43, 87, 89], "minimum": [30, 32, 42, 43, 73, 84, 89, 90], "minima": [30, 32, 89], "group_minima": [30, 32, 89], "maxima": [30, 32, 89], "group_maxima": [30, 32, 89], "group_argminima": [30, 32, 89], "group_argmaxima": [30, 32, 89], "nuniqu": [30, 32, 48, 80, 89], "group_nuniqu": [30, 32, 89], "group_ani": [30, 32, 89], "OR": [30, 32, 48, 59, 80, 89], "bitwis": [30, 32, 89, 92], "AND": [30, 32, 48, 80, 89], "xor": [30, 32, 42, 48, 80, 89], "groupable_element_typ": [30, 32, 49, 89, 94], "modal": [30, 32, 89], "segarrai": [30, 32, 35, 41, 54, 80, 81, 88, 89], "fill": [30, 32, 42, 43, 56, 79, 87, 89], "constant": [30, 32, 42, 80, 89], "put": [30, 32, 61, 89], "tensor": [30, 32, 89], "replic": [30, 32, 89], "With": [30, 32, 75, 85, 89, 91], "build_from_compon": [30, 32, 80, 89], "init": [30, 32, 74, 89], "rebuild": [30, 32, 55, 58, 60, 61, 89], "orig_kei": [30, 32, 89], "unregister_groupby_by_nam": [30, 32, 80, 89], "most_common": [30, 32, 53, 80, 89], "go": [30, 32, 59, 61, 73, 77, 87], "suppli": [30, 32, 35, 43, 48, 65, 67, 68, 87, 88], "row_start": [30, 32], "nnz": [30, 32], "row_numb": [30, 32], "historyretriev": 31, "abstract": 31, "_filter_arkouda_command": 31, "repl": [31, 32, 40, 51, 97], "shellhistoryretriev": 31, "notebookhistoryretriev": 31, "historyaccessor": 31, "akmath": [32, 54], "akstat": [32, 54], "array_api": [32, 54], "accessor": [32, 54], "align": [32, 54], "array_view": [32, 35, 54, 85], "client_dtyp": [32, 35, 54], "infoclass": [32, 54], "io": [32, 54, 55, 56, 66, 67, 68], "io_util": [32, 54], "matcher": [32, 54], "pdarraycr": [32, 42, 54], "pdarraysetop": [32, 48, 54, 55, 93], "plot": [32, 41, 54, 81, 90], "secur": [32, 41, 54], "timeclass": [32, 35, 54], "issupportedint": 32, "akuint64": 32, "akcast": 32, "errormod": [32, 41, 92], "strict": [32, 41, 92], "target": [32, 36, 41, 43, 56, 58, 59, 72, 81, 87, 91, 92], "return_valid": [32, 41, 92], "never": [32, 41, 92], "uninterpret": [32, 41, 92], "63": [32, 41, 42, 92], "succeed": [32, 41, 92], "safe": [32, 41, 59, 92], "underflow": [32, 41, 92], "precis": [32, 35, 41, 81, 92], "capac": [32, 41, 92], "hold": [32, 41, 92], "upon": [32, 41, 51, 74, 75, 78, 84], "choos": [32, 41, 59, 74, 77, 84, 96], "claus": [32, 41, 84], "unequ": [32, 41, 84], "a1": [32, 37, 41, 84], "a2": [32, 37, 41, 84], "cond": [32, 41, 84], "s1": [32, 41, 84], "s2": [32, 41, 84], "c1": [32, 41, 84], "c2": [32, 41, 84], "mydtyp": [32, 42, 92], "max_bit": [32, 42, 43, 56, 81, 87, 92], "attributi": [32, 42, 92], "resid": [32, 42, 51, 92], "opeqop": [32, 42], "format_oth": [32, 42], "itself": [32, 42, 59], "is_sort": [32, 42, 80, 84, 90], "monoton": [32, 42, 84, 90], "decreas": [32, 42, 43, 60, 84, 87, 90], "numeric_and_bool_scalar": [32, 42], "occurr": [32, 40, 41, 42, 51, 84, 90, 97], "cov": [32, 42], "covari": [32, 42], "coeffici": [32, 42], "mink": [32, 42, 75, 80, 84, 90], "maxk": [32, 42, 75, 80, 84, 90], "argmink": [32, 42, 80, 84, 90], "argmaxk": [32, 42, 80, 84, 90], "popcount": [32, 42], "pariti": [32, 42], "clz": [32, 42], "lead": [32, 42, 51], "ctz": [32, 42], "trail": [32, 42, 51], "rotl": [32, 42], "rotat": [32, 41, 42], "rotr": [32, 42], "value_count": [32, 41, 42, 49, 80, 90, 94], "shorthand": [32, 42, 51], "slice_bit": [32, 42], "bottom": [32, 42, 59], "65": [32, 42], "bin": [32, 41, 42, 45, 72, 73, 74, 77, 90], "0b101111111111111111111111111111111111111111111111111111111111111111": [32, 42], "0b10": [32, 42], "bigint_to_uint_arrai": [32, 42, 43], "18446744073709551616": [32, 42, 43], "18446744073709551617": [32, 42, 43], "18446744073709551618": [32, 42, 43], "18446744073709551619": [32, 42, 43], "18446744073709551620": [32, 42, 43], "give": [32, 42, 49, 64, 76, 94, 96], "fastest": [32, 42], "fortran": [32, 42, 92], "to_cuda": [32, 42], "numba": [32, 42], "devicend": [32, 42], "builtin": [32, 42], "gpu": [32, 42], "devicendarrai": [32, 42], "importerror": [32, 42], "cuda": [32, 42], "modulenotfounderror": [32, 42], "cours": [32, 42], "cwd": [32, 35, 42], "name_prefix_local": [32, 35, 42], "to_parqet": [32, 42], "h5": [32, 35, 42, 81], "name_prefix": [32, 35, 42, 81], "repons": [32, 33, 42, 51], "insensit": [32, 33, 42, 51, 56], "save_al": [32, 33, 35, 42, 68], "older": [32, 33, 42, 65, 73], "later": [32, 42, 51, 76], "former": [32, 42, 51, 97], "free": [32, 42, 51], "registr": [32, 42, 51], "list_registri": [32, 34, 42], "unregister_pdarray_by_nam": [32, 42], "100": [32, 41, 42, 45, 56, 63, 84], "my_zero": [32, 42], "potenti": [32, 42], "reconnect": [32, 42], "attahc": [32, 42], "could": [32, 42, 45, 48, 51, 60, 75, 97], "bound": [32, 42, 43, 48, 52, 87, 93], "consecut": [32, 43, 49, 87], "third": [32, 43, 59, 87], "zerodivisionerror": [32, 42, 43, 87], "compos": [32, 43, 51, 70, 81], "dequ": [32, 43, 81], "nbyte": [32, 43, 51, 81], "malform": [32, 43, 81], "overwhelm": [32, 43, 81], "bandwidth": [32, 43, 81], "pdrrai": [32, 41, 43, 81], "twice": [32, 43, 81], "recurs": [32, 43, 81], "respect": [32, 41, 42, 43, 44, 52, 59, 81, 87], "create_pdarrai": [32, 55], "repmsg": [32, 49, 55], "six": [32, 51, 97], "parseabl": [32, 43, 87], "strings_pdarrai": [32, 51], "bytes_s": [32, 51], "encapsul": [32, 43, 47, 51], "composit": [32, 51], "raw": [32, 51, 97], "factori": [32, 33, 51], "from_part": [32, 48, 51], "offset_attrib": [32, 51], "bytes_attrib": [32, 51], "assembl": [32, 51], "entiti": [32, 51], "get_length": [32, 51], "get_byt": [32, 51], "getter": [32, 51], "110": [32, 51], "101": [32, 51], "116": [32, 51], "119": [32, 51], "104": [32, 51], "114": [32, 51], "get_offset": [32, 51], "encod": [32, 51, 56, 97], "toencod": [32, 51], "fromencod": [32, 51], "decod": [32, 51], "uppercas": [32, 43, 51], "lowercas": [32, 43, 51], "upper": [32, 51, 59], "titlecas": [32, 51], "islow": [32, 51], "isupp": [32, 51], "istitl": [32, 51], "mix": [32, 51, 52, 56, 85], "isalnum": [32, 51], "alphanumer": [32, 51], "not_alnum": [32, 51], "alnum": [32, 51], "strings0": [32, 51], "strings1": [32, 51], "strings2": [32, 51], "isalpha": [32, 51], "alphabet": [32, 51], "not_alpha": [32, 51], "alpha": [32, 51, 56, 79], "stringa": [32, 51], "stringb": [32, 51], "stringc": [32, 51], "isdigit": [32, 51], "digit": [32, 50, 51, 83], "not_digit": [32, 51], "120": [32, 51], "121": [32, 51], "122": [32, 51], "isempti": [32, 51], "not_empti": [32, 51], "isspac": [32, 51], "whitespac": [32, 35, 51], "not_spac": [32, 51], "u0009": [32, 51], "u000b": [32, 51], "u000c": [32, 51], "u000d": [32, 51], "u0009nu000bu000cu000d": [32, 51], "strip": [32, 51], "char": [32, 51], "omit": [32, 51, 52, 56, 65], "combin": [32, 51, 52, 61], "1string": [32, 51], "cached_regex_pattern": [32, 51], "pattern": [32, 39, 40, 51, 59, 63, 89, 97], "purge_cached_regex_pattern": [32, 51], "purg": [32, 51], "find_loc": [32, 40, 51, 80, 97], "postit": [32, 51, 97], "positon": [32, 51, 97], "findal": [32, 40, 51, 80, 97], "num_match": [32, 51, 97], "1_2___": [32, 39, 51, 97], "____": [32, 39, 51, 97], "__4___5____6___7": [32, 39, 51, 97], "span": [32, 51, 97], "fullmatch": [32, 51, 80, 97], "whole": [32, 51, 59, 97], "maxsplit": [32, 40, 51, 97], "return_seg": [32, 40, 51, 97], "5____6___7": [32, 51, 97], "return_match_origin": [32, 39, 40, 51, 97], "conta": [32, 51, 97], "___": [32, 51, 97], "__": [32, 39, 51, 97], "sub": [32, 40, 48, 51, 80, 97], "obtain": [32, 40, 51, 97], "substitut": [32, 40, 51, 70, 72, 97], "substitu": [32, 51, 97], "subn": [32, 51, 80, 97], "new_str": [32, 51, 97], "number_of_substit": [32, 51, 97], "ior": [32, 51, 97], "strings_end": [32, 51, 97], "strings_start": [32, 51, 97], "ing": [32, 51, 97], "flatten": [32, 37, 48, 51, 65, 80, 93], "unpack": [32, 51, 70, 74, 97], "flat": [32, 51, 97], "peel": [32, 51, 80, 97], "rpeel": [32, 51, 80, 97], "orig": [32, 51, 97], "one_two": [32, 51, 97], "three_____four____f": [32, 51, 97], "under_flat": [32, 51, 97], "under_map": [32, 51, 97], "includedelimit": [32, 51, 97], "keepparti": [32, 51, 97], "fromright": [32, 51, 97], "off": [32, 51, 60, 97], "partit": [32, 51, 97], "experiment": [32, 51, 97], "sought": [32, 51, 97], "prepend": [32, 48, 51, 80, 97], "stick": [32, 51, 61, 80, 97], "lstick": [32, 51, 80, 97], "rpartit": [32, 51, 97], "compar": [32, 51, 59, 79, 81, 97], "toleft": [32, 51, 97], "insert": [32, 51, 97], "get_prefix": [32, 48, 51, 80, 93], "return_origin": [32, 48, 51, 93], "proper": [32, 41, 48, 51, 53, 93], "long": [32, 48, 51, 61, 93], "enough": [32, 48, 51, 65, 73, 74, 93], "mask": [32, 48, 51, 93], "origin_indic": [32, 48, 51, 93], "get_suffix": [32, 48, 51, 80, 93], "compil": [32, 51, 58, 61, 62, 72, 73, 74, 75, 77], "ssegmentedstr": [32, 51], "usehash": [32, 51], "mere": [32, 51], "hello": [32, 51, 81, 97], "my": [32, 51, 60, 81, 97], "world": [32, 51, 81, 97], "u5": [32, 51, 81, 97], "segstr": [32, 51], "strings_arrai": [32, 51, 65], "save_offset": [32, 51], "deriv": [32, 35, 36, 38, 41, 51, 92], "unregister_strings_by_nam": [32, 51], "clear": [32, 42], "smallest": [32, 42, 49, 84, 94], "outperform": [32, 42, 84], "grow": [32, 42, 84], "beyond": [32, 42, 63, 84], "certain": [32, 42, 57, 75, 84], "depend": [32, 42, 65, 73, 74, 77, 78, 84, 93], "million": [32, 41, 42, 84], "degred": [32, 42, 84], "largest": [32, 42, 49, 84, 94], "degrad": [32, 42, 84], "maxmum": [32, 42, 84], "odd": [32, 42], "lz": [32, 42], "62": [32, 42, 56], "61": [32, 42], "60": [32, 42], "rot": [32, 42], "160": [32, 42], "384": [32, 42], "896": [32, 42], "2048": [32, 42], "4608": [32, 42], "512": [32, 42], "256": [32, 42, 56], "56": [32, 42, 64], "32": [32, 41, 42, 47, 56, 63, 65, 73, 74], "18": [32, 42, 56, 84, 85, 91], "divmod": [32, 42], "dividend": [32, 42], "floordivis": [32, 42], "modular": [32, 42, 61], "divis": [32, 42], "denomin": [32, 41, 42], "At": [32, 41, 42, 84], "elsewher": [32, 41, 42, 84], "retain": [32, 41, 42, 53, 84], "quotient": [32, 42], "No": [32, 42, 72, 77], "div": [32, 42], "4142135623730951": [32, 42], "7320508075688772": [32, 42], "pwr": [32, 42], "uniniti": [32, 42], "vari": [32, 42, 63, 72, 74, 76, 78, 93], "27": [32, 42, 56, 63, 85], "complementari": [32, 42], "fmod": [32, 42], "attach_pdarrai": [32, 42], "broadcast_to_shap": [32, 42], "algorithm": [32, 41, 50, 53, 70, 83], "sortingalgorithm": [32, 50, 83], "radixsortlsd": [32, 50, 83], "radix": [32, 50, 83], "resili": [32, 50, 83], "uniform": [32, 41, 43, 50, 81, 83, 84, 87], "intens": [32, 50, 63, 83, 87], "move": [32, 50, 61, 63, 83, 87, 93], "forward": [32, 50, 77, 83, 93], "thu": [32, 35, 43, 50, 55, 65, 66, 83, 93], "lexicograph": [32, 50, 59, 83], "pda1": [32, 44, 95], "pda2": [32, 44, 95], "assume_uniqu": [32, 44, 95], "1d": [32, 44, 48, 49, 93, 94, 95], "multia": [32, 44, 95], "multib": [32, 44, 95], "setdiff1d": [32, 44, 48, 55, 63, 80, 93, 95], "setxor1d": [32, 44, 48, 55, 63, 80, 93, 95], "indexof1d": [32, 44], "arr": [32, 44], "Ones": [32, 43, 87], "deleg": [32, 41, 43, 87, 90], "accordingli": [32, 43, 65, 87], "linearli": [32, 43, 52, 87], "evenli": [32, 41, 43, 87, 90], "akint64": [32, 43], "seed": [32, 43, 56, 79, 87], "pull": [32, 35, 43, 59, 65, 87], "drawn": [32, 43, 87], "uniformli": [32, 43, 87], "undefin": [32, 43, 87], "92176432277231968": [32, 43, 87], "083130710959903542": [32, 43, 87], "68894208386667544": [32, 43, 87], "9160772326374946": [32, 43, 87], "353429832157099": [32, 43, 87], "5392023718621486": [32, 43, 87], "invok": [32, 43], "30013431967121934": [32, 43], "47383036230759112": [32, 43], "0441791878997098": [32, 43], "standard_norm": [32, 43], "draw": [32, 43], "mu": [32, 43], "sigma": [32, 43], "68586185091150265": [32, 43], "1723810583573375": [32, 43], "567584107142031": [32, 43], "random_strings_uniform": [32, 43], "minlen": [32, 43], "maxlen": [32, 43], "printabl": [32, 43], "random_strings_lognorm": [32, 43], "tvkj": [32, 43], "ewab": [32, 43], "hfmd": [32, 43], "4k": [32, 43], "hff": [32, 43], "logmean": [32, 43], "logstd": [32, 43], "lognorm": [32, 43], "heavi": [32, 43], "toward": [32, 43], "tvkjte": [32, 43], "abocorhfm": [32, 43], "ludmmgtb": [32, 43], "kwoqnphz": [32, 43], "vsxrrl": [32, 43], "fp": [32, 43], "3q4kc": [32, 43], "hf": [32, 43], "ie": [32, 43], "djkba": [32, 43], "5oz1": [32, 43], "from_seri": [32, 43], "overridden": [32, 43, 47], "situat": [32, 43], "datetim": [32, 35, 43, 52, 56, 81], "timedelta": [32, 35, 43, 52, 81], "57600036956445599": [32, 43], "41619265571741659": [32, 43], "6615356693784662": [32, 43], "choic": [32, 43, 72], "to_datetim": [32, 43], "2018": [32, 43], "datetime64": [32, 43, 52], "01": [32, 43, 56, 59, 61], "1514764800000000000": [32, 43], "nanosecond": [32, 43, 52], "nearest": [32, 41], "14159": [32, 41], "finit": [32, 41], "natur": [32, 41, 84], "logarithm": [32, 41, 84], "3025850929940459": [32, 41, 84], "6051701859880918": [32, 41, 84], "3219280948873626": [32, 41, 84], "6438561897747253": [32, 41, 84], "plu": [32, 41], "exponenti": [32, 41, 84], "7182818284590451": [32, 41, 84], "3890560989306504": [32, 41, 84], "085536923187668": [32, 41, 84], "54": [32, 41, 84], "598150033144236": [32, 41, 84], "84010843172504": [32, 41, 84], "46": [32, 41, 84], "454368507659211": [32, 41, 84], "5571769623557188": [32, 41, 84], "33": [32, 41, 84], "494295836924771": [32, 41, 84], "13": [32, 41, 56, 73, 76, 84, 85, 90, 91], "478894913238722": [32, 41, 84], "minu": [32, 41], "exp1m": [32, 41], "19": [32, 41, 85, 91], "53": [32, 41], "45": [32, 41], "16": [32, 41, 56, 57, 58, 73, 74, 84, 85, 91], "cumsum": [32, 41, 80, 84], "cumul": [32, 41, 45, 79, 84], "th": [32, 41, 48, 84, 93], "1598310770203937": [32, 41, 84], "4110385860243131": [32, 41, 84], "1622479306453748": [32, 41, 84], "710615785506533": [32, 41, 84], "945880905466208": [32, 41, 84], "cumprod": [32, 41, 80, 84], "5728783400481925": [32, 41, 84], "0472855509390593": [32, 41, 84], "78523998586553": [32, 41, 84], "134": [32, 41, 84], "05309592737584": [32, 41, 84], "450": [32, 41, 84], "21589865655358": [32, 41, 84], "sine": [32, 41, 84], "cosin": [32, 41, 84], "tangent": [32, 41], "denom": [32, 41], "pair": [32, 36, 37, 41, 48, 93], "angl": [32, 41], "radian": [32, 41], "rai": [32, 41], "placement": [32, 41], "circl": [32, 41], "hyperbol": [32, 41], "rad2deg": [32, 41], "deg2rad": [32, 41], "siphash": [32, 41], "risk": [32, 41, 65], "few": [32, 41, 63], "small": [32, 41, 65, 81], "strongli": [32, 41], "cryptograph": [32, 41], "Not": [32, 35, 41, 52, 56, 88], "emploi": [32, 41], "adversari": [32, 41], "engin": [32, 41], "linear": [32, 41, 97], "subsequ": [32, 41, 65], "xore": [32, 41], "cancel": [32, 41], "henc": [32, 41], "ordin": [32, 41], "histogram": [32, 41, 45, 80], "edg": [32, 41, 45, 90], "notimplementederror": [32, 41, 55, 90], "histogram2d": [32, 41, 90], "matplotlib": [32, 41, 45, 76, 90], "pyplot": [32, 41, 45, 90], "plt": [32, 41, 45, 90], "nbin": [32, 41, 90], "h": [32, 41, 45, 52, 79, 90, 96], "bi": [32, 41], "coordin": [32, 41, 85], "nx": [32, 41, 56], "ny": [32, 41], "hist": [32, 41], "x_edg": [32, 41], "y_edg": [32, 41], "histogramdd": [32, 41], "multidimension": [32, 41], "nd": [32, 41], "z": [32, 41], "return_count": [32, 41, 90], "enumer": [32, 38, 41], "join_on_eq_with_dt": [32, 37], "t1": [32, 37], "t2": [32, 37], "pred": [32, 37], "result_limit": [32, 37], "1000": [32, 37, 90], "window": [32, 37, 47, 70, 78], "predic": [32, 37], "timestamp": [32, 37], "milli": [32, 37], "result_array_on": [32, 37], "true_dt": [32, 37], "abs_dt": [32, 37], "pos_dt": [32, 37], "gen_rang": [32, 37], "actual": [32, 37, 55, 64], "compute_join_s": [32, 37], "loglevel": [32, 38], "debug": [32, 38, 55, 57, 61], "critic": [32, 38], "enableverbos": [32, 38], "disableverbos": [32, 38], "disabl": [32, 38, 57], "defaultt": [32, 38], "write_log": [32, 38], "log_msg": [32, 38], "clientgeneratedlog": [32, 38], "log_lvl": [32, 38], "identif": [32, 38], "akab": 32, "_base_unit": [32, 52], "_abstractbasetim": [32, 52], "datetimeindex": [32, 52], "timeseri": [32, 52], "carri": [32, 52], "sensit": [32, 52], "sec": [32, 52, 56], "accept": [32, 49, 52, 56, 94], "week": [32, 52, 89], "w": [32, 39, 52, 97], "hour": [32, 52], "minut": [32, 52], "millisecond": [32, 52], "l": [32, 35, 52, 57, 59, 63, 64, 72, 81], "microsecond": [32, 52], "month": [32, 52, 59], "year": [32, 52], "day_of_year": [32, 52], "dayofyear": [32, 52], "day_of_week": [32, 52], "dayofweek": [32, 52, 89], "weekdai": [32, 52], "weekofyear": [32, 52], "is_leap_year": [32, 52], "supported_with_datetim": [32, 52], "supported_with_r_datetim": [32, 52], "supported_with_timedelta": [32, 52], "supported_with_r_timedelta": [32, 52], "supported_opeq": [32, 52], "supported_with_pdarrai": [32, 52], "supported_with_r_pdarrai": [32, 52], "isocalendar": [32, 52], "durat": [32, 52], "timedeltaindex": [32, 52], "timedelta64": [32, 52], "total_second": [32, 52], "date_rang": [32, 52], "period": [32, 52], "freq": [32, 52], "tz": [32, 52], "impos": [32, 52], "dateoffset": [32, 52], "5h": [32, 52], "offset_alias": [32, 52], "alias": [32, 52], "tzinfo": [32, 52], "zone": [32, 52], "asia": [32, 52], "hong_kong": [32, 52], "timezon": [32, 52], "naiv": [32, 52], "midnight": [32, 52], "boundari": [32, 52], "effect": [32, 52, 61, 95], "rng": [32, 52], "Of": [32, 52], "exactli": [32, 52], "learn": [32, 52, 55, 70], "timedelta_rang": [32, 52], "allsymbol": [32, 34], "__allsymbols__": [32, 34], "registeredsymbol": [32, 34], "__registeredsymbols__": [32, 34], "list_symbol_t": [32, 34], "pretty_print_inform": [32, 34], "akbool": 32, "getarkoudalogg": 32, "handler": 32, "logformat": 32, "default_log_format": 32, "conveni": [32, 73, 74, 81], "instanti": 32, "streamhandl": 32, "consol": 32, "lineno": 32, "levelnam": 32, "dynam": 32, "seg_suffix": [32, 48], "_segment": [32, 48, 65], "val_suffix": [32, 48], "_valu": [32, 48, 65], "len_suffix": [32, 48], "_length": [32, 48], "non_empti": [32, 48], "face": [32, 48, 59, 92], "from_multi_arrai": [32, 48], "vertic": [32, 48, 49, 93], "horizont": [32, 48, 49, 93, 94], "unord": [32, 48], "yet": [32, 48, 72, 81, 85], "get_ngram": [32, 48, 80, 93], "gram": [32, 48, 93], "came": [32, 48, 93], "ngram": [32, 48, 80], "get_jth": [32, 48, 80, 93], "j": [32, 48, 57, 58, 73, 74, 93], "backward": [32, 48, 53, 93], "set_jth": [32, 48, 80, 93], "get_length_n": [32, 48, 80, 93], "increas": [32, 48, 93], "append_singl": [32, 48, 80, 93], "prepend_singl": [32, 48, 80, 93], "remove_repeat": [32, 48, 80, 93], "return_multipl": [32, 48, 93], "condens": [32, 48, 93], "norepeat": [32, 48, 93], "segarr": [32, 48, 93], "maintain": [32, 33, 35, 48, 66, 81], "read_hdf": [32, 35, 48, 68, 81], "segment_nam": [32, 48], "value_nam": [32, 48], "seg_a": [32, 48, 93], "seg_b": [32, 48, 93], "setdiff": [32, 48, 80, 93], "setxor": [32, 48, 80, 93], "discard_empti": [32, 48], "unregister_segarray_by_nam": [32, 48], "individu": [32, 46, 57, 97], "akfloat64": 32, "convert_if_categor": [32, 53], "generic_concat": [32, 53], "get_callback": [32, 53], "is_uniqu": [32, 33], "rtype": [32, 33, 49], "set_dtyp": [32, 33, 82], "to_dict": [32, 33], "multiindex": [32, 33, 49, 82, 94], "enter": [32, 49, 81, 94], "loc": [32, 49], "_locindex": [32, 49], "supported_scalar": [32, 49], "iloc": [32, 49], "_ilocindex": [32, 49], "iat": [32, 49], "str_acc": [32, 49], "validate_kei": [32, 49], "might": [32, 49, 72, 74, 75], "keyerror": [32, 49], "indexerror": [32, 49], "validate_v": [32, 49], "has_repeat_label": [32, 49], "lst": [32, 49], "scaler": [32, 49, 94], "topn": [32, 49, 94], "top": [32, 49, 55, 60, 65, 72, 73, 74, 78, 94], "frequent": [32, 49, 75, 94], "diff": [32, 49], "to_datafram": [32, 49], "index_label": [32, 49], "value_label": [32, 49], "registerd": [32, 49], "verticl": [32, 49, 94], "pdconcat": [32, 49, 94], "skew": 32, "bia": 32, "weight": 32, "9442193396379163": 32, "plot_dist": [32, 45], "xlabel": [32, 45], "newfig": [32, 45], "graph": [32, 45, 89], "figur": [32, 45, 61], "below": [32, 45, 56, 57, 63, 72, 73, 74, 76, 81, 88], "hist_al": [32, 45], "ak_df": [32, 45], "col": [32, 45], "grid": [32, 45], "visual": [32, 45], "randn": [32, 45], "get_filetyp": [32, 35], "read_parquet": [32, 35, 68, 81], "read_nest": [32, 35, 81], "h5l": [32, 35], "imit": [32, 35], "technic": [32, 35], "ls_csv": [32, 35, 64, 68], "get_null_indic": [32, 35], "datasetnam": [32, 35, 81], "get_dataset": [32, 35, 64, 68, 81], "column_delim": [32, 35, 81], "get_column": [32, 35, 64, 68], "strict_typ": [32, 35], "calc_string_offset": [32, 35, 81], "tag_data": [32, 35], "tell": [32, 35, 56, 81], "versu": [32, 35, 81], "tagdata": [32, 35], "glob": [32, 35, 81], "independ": [32, 35, 47, 81], "sequenti": [32, 35, 81], "read_tagged_data": [32, 35], "dset_nam": [32, 35], "stricttyp": [32, 35, 81], "invalid": [32, 35, 81], "filetyp": [32, 35, 81], "detect": [32, 35, 65, 81], "record": [32, 35], "filename_cod": [32, 35], "filname_cod": [32, 35], "import_data": [32, 35, 66, 81], "read_path": [32, 35, 81], "write_fil": [32, 35, 81], "return_obj": [32, 35, 81], "runtimewarn": [32, 35, 81], "dataset_nam": [32, 35, 81], "ak_data": [32, 35, 81], "path_prefix": [32, 35], "wrong": [32, 35, 96], "termin": [32, 35, 65, 70, 77, 96], "filenotfound": [32, 35], "datsetnam": [32, 35], "read_": [32, 35], "snapshot": [32, 35], "restor": [32, 35], "alongsid": [32, 35], "sent": [32, 35, 66], "receive_datafram": [32, 35], "send_arrai": [32, 35], "attach_al": [32, 53], "unregister_al": [32, 53], "register_al": [32, 53], "myarrai": [32, 53], "as_compon": [32, 53], "broadcast_dim": [32, 53], "sa": [32, 53], "sb": [32, 53], "get_directori": 36, "pathlib": [36, 47], "write_line_to_fil": 36, "unsupportedopt": 36, "delimited_file_to_dict": 36, "unsupportedoper": 36, "dict_to_delimited_fil": 36, "oerror": 36, "parent_entry_nam": [39, 40], "match_typ": [39, 40, 80, 97], "matchtyp": [39, 40, 97], "indici": [39, 97], "find_match": [39, 80, 97], "group_num": [39, 97], "return_group_origin": [39, 97], "isaac": [39, 97], "newton": [39, 97], "calculu": [39, 97], "gottfri": [39, 97], "leibniz": [39, 97], "math": [39, 97], "locationsinfo": 40, "get_match": 40, "return_num_sub": 40, "username_token": 47, "generate_token": 47, "secret": 47, "token_hex": 47, "hexidecim": 47, "get_home_directori": 47, "platform": 47, "home": [47, 72, 75], "expandus": 47, "get_arkouda_client_directori": 47, "artifact": 47, "environ": [47, 56, 70, 75, 76], "get_usernam": 47, "environmenterror": 47, "linux": [47, 56, 72, 77, 78], "maco": [47, 70, 73, 78], "aka": 47, "darwin": [47, 74], "generate_username_token_json": 47, "report_mem": 53, "enrich_inplac": 53, "keynam": 53, "seg": 53, "earlier": [53, 63], "page": [54, 59, 72], "auto": [54, 59], "arkouda": [54, 56, 59, 61, 62, 66, 68, 76, 77, 78, 79, 80, 81, 83, 84, 86, 87, 89, 90, 91, 92, 95], "sphinx": [54, 72, 76], "autoapi": [54, 76], "guid": [55, 70, 72, 73, 74], "describ": [55, 59], "walk": [55, 57, 70], "times2": 55, "conform": 55, "somewher": 55, "subdirectori": 55, "numpydoc": 55, "readthedoc": 55, "generic_msg": [55, 75], "repli": 55, "possibli": 55, "typecheck": 55, "doubl": 55, "isinst": 55, "cmd": [55, 75], "arg1": 55, "__all__": 55, "contribut": 55, "machineri": 55, "broken": 55, "dispatch": 55, "arraysetop": [55, 95], "arraysetopsmsg": 55, "modul": [55, 60, 61, 70, 81, 97], "sake": 55, "simplic": 55, "happen": [55, 59], "serverdaemon": 55, "times2msg": 55, "gensymentri": 55, "getgenerictypearrayentri": 55, "tosymentri": 55, "symentri": 55, "st": 55, "addentri": 55, "servererrorstr": 55, "src": [55, 75], "manner": 55, "respond": 55, "reqmsg": 55, "msgarg": 55, "borrow": 55, "messagearg": 55, "symtab": 55, "msgtupl": 55, "throw": 55, "vname": 55, "nextnam": 55, "gent": 55, "getgenerictypedarrayentri": 55, "getvalueof": 55, "av": 55, "createsymentri": 55, "attrib": 55, "aslogg": 55, "getmodulenam": [55, 75], "getroutinenam": 55, "getlinenumb": 55, "msgtype": 55, "errormsg": 55, "ret": 55, "final": [55, 56, 59, 72], "resisterfunct": 55, "abl": [55, 59, 65, 66, 72, 81], "launch": [55, 77, 80], "script": [55, 60, 74, 75, 79], "undoubl": 55, "overview": 56, "simplest": 56, "navig": [56, 59, 72, 73, 74, 76], "python3": [56, 60, 72, 73], "autosav": 56, "storag": 56, "benchmark_v2": 56, "commandlin": 56, "0001_0d4865d7c9453adc6af6409568da326845c358b9_20230406_165330": 56, "Will": 56, "counter_nam": 56, "trial": [56, 79], "comma": [56, 64, 72], "NO": 56, "comparison": [56, 64, 86, 92, 93, 97], "maxbit": 56, "wraparound": 56, "unaffect": 56, "index_s": [56, 79], "gather": [56, 80], "scatter": [56, 80], "value_s": [56, 79], "idna": 56, "ascii": 56, "io_only_writ": 56, "io_only_read": 56, "io_only_delet": 56, "io_files_per_loc": 56, "io_compress": 56, "io_path": 56, "ak_io_benchmark": 56, "measur": [56, 79], "rate": 56, "encoding_benchmark": 56, "arkouda_root": 56, "cpython": 56, "64bit": 56, "0014_31de39be8b19c76d073a8999def6673a305c250d_20230405_145759_uncommit": 56, "strings_encodedecod": 56, "stddev": 56, "iqr": 56, "outlier": 56, "bench_encod": 56, "3304": 56, "2561": 56, "7544": 56, "5306": 56, "8075": 56, "9012": 56, "210": 56, "3306": 56, "79": 56, "3805": 56, "02": 56, "8800": 56, "7336": 56, "6465": 56, "58": 56, "4231": 56, "5246": 56, "267": 56, "8380": 56, "bench_decod": 56, "4444": 56, "03": 56, "4177": 56, "7852": 56, "4097": 56, "5622": 56, "04": [56, 77], "5837": 56, "264": 56, "1882": 56, "4621": 56, "9177": 56, "2250": 56, "6125": 56, "50": [56, 63], "0197": 56, "17": [56, 63, 85, 91], "9991": 56, "90": 56, "236": 56, "6864": 56, "88": 56, "0015_31de39be8b19c76d073a8999def6673a305c250d_20230405_145947_uncommit": 56, "4298": 56, "6450": 56, "5541": 56, "0889": 56, "5801": 56, "00": 56, "1436": 56, "281": 56, "3620": 56, "4875": 56, "5255": 56, "7912": 56, "07": 56, "4328": 56, "87": 56, "5652": 56, "4869": 56, "39": 56, "263": 56, "7659": 56, "94": 56, "lot": 56, "benefici": [56, 67], "purpos": [56, 59, 82, 88, 94], "area": 56, "care": 56, "lesser": 56, "extent": 56, "cpu": 56, "architectur": 56, "ran": [56, 60], "350": 56, "relat": [56, 59, 63], "abov": [56, 61, 63, 70, 72, 73, 88, 97], "machine_info": 56, "msi": 56, "x86_64": [56, 73, 77], "python_compil": 56, "gcc": [56, 73], "python_implement": 56, "python_implementation_vers": 56, "python_vers": 56, "python_build": 56, "nov": 56, "26": [56, 85], "2020": 56, "57": 56, "microsoft": [56, 77], "wsl2": [56, 78], "cpuinfo_vers": 56, "cpuinfo_version_str": 56, "arch": 56, "arch_string_raw": 56, "vendor_id_raw": 56, "genuineintel": 56, "brand_raw": 56, "intel": 56, "tm": 56, "i7": 56, "8750h": 56, "20ghz": 56, "hz_advertised_friendli": 56, "2000": 56, "ghz": 56, "hz_actual_friendli": 56, "2080": 56, "hz_advertis": 56, "2200000000": 56, "hz_actual": 56, "2207999000": 56, "model": 56, "158": 56, "famili": 56, "3dnowprefetch": 56, "abm": 56, "adx": 56, "ae": 56, "apic": 56, "arch_cap": 56, "avx": 56, "avx2": 56, "bmi1": 56, "bmi2": 56, "clflush": 56, "clflushopt": 56, "cmov": 56, "constant_tsc": 56, "cpuid": 56, "cx16": 56, "cx8": 56, "de": 56, "erm": 56, "f16c": 56, "flush_l1d": 56, "fma": 56, "fpu": 56, "fsgsbase": 56, "fxsr": 56, "ht": 56, "hypervisor": 56, "ibpb": 56, "ibr": 56, "invpcid": 56, "invpcid_singl": 56, "lahf_lm": 56, "lm": 56, "mca": 56, "mce": 56, "mmx": 56, "movb": 56, "msr": 56, "mtrr": 56, "nopl": 56, "osxsav": 56, "pae": 56, "pat": 56, "pcid": 56, "pclmulqdq": 56, "pdpe1gb": 56, "pge": 56, "pni": 56, "popcnt": 56, "pse": 56, "pse36": 56, "pti": 56, "rdrand": 56, "rdrnd": 56, "rdseed": 56, "rdtscp": 56, "rep_good": 56, "sep": 56, "smap": 56, "smep": 56, "ss": 56, "ssbd": 56, "sse": 56, "sse2": 56, "sse4_1": 56, "sse4_2": 56, "ssse3": 56, "stibp": 56, "syscal": 56, "tsc": 56, "vme": 56, "xgetbv1": 56, "xsave": 56, "xsavec": 56, "xsaveopt": 56, "xtopologi": 56, "l3_cache_s": 56, "9437184": 56, "l2_cache_s": 56, "mib": 56, "l1_data_cache_s": 56, "196608": 56, "l1_instruction_cache_s": 56, "l2_cache_line_s": 56, "l2_cache_associ": 56, "commit_info": 56, "31de39be8b19c76d073a8999def6673a305c250d": 56, "2023": [56, 70, 73], "04t16": 56, "author_tim": 56, "04t12": 56, "dirti": 56, "2324_pytest_benchmark_doc": 56, "fullnam": 56, "extra_info": 56, "descript": [56, 59, 63, 80], "problem_s": 56, "transfer_r": 56, "0002": 56, "gib": 56, "disable_gc": 56, "timer": 56, "perf_count": 56, "min_round": 56, "max_tim": 56, "min_tim": 56, "5e": 56, "06": 56, "warmup": 56, "004066600000442122": 56, "007168699999965611": 56, "0048064200000226265": 56, "001326192548940973": 56, "004246700000294368": 56, "0009575499998391024": 56, "q1": 56, "004131924999910552": 56, "q3": 56, "005089474999749655": 56, "iqr_outli": 56, "stddev_outli": 56, "ld15iqr": 56, "hd15iqr": 56, "208": 56, "0550596900172": 56, "024032100000113132": 56, "00383609999971668": 56, "0043372999998609885": 56, "004057779999857303": 56, "00018361238254747651": 56, "0040258999997604406": 56, "0002090000002681336": 56, "0039507749997937935": 56, "004159775000061927": 56, "246": 56, "44017172817806": 56, "020288899999286514": 56, "05t15": 56, "09": [56, 73], "097392": 56, "pai": 56, "attent": 56, "featur": [57, 58, 59, 60, 62, 72, 75, 81, 89], "chpl_comm": [57, 73, 74], "gasnet_spawnfn": 57, "gasnet_route_output": 57, "chpl_gasnet_cfg_opt": 57, "ibv": 57, "gasnet_quiet": 57, "gasnet_masterip": 57, "127": 57, "gasnet_workerip": 57, "chpl_test_timeout": 57, "chpl_rt_oversubscrib": 57, "ye": 57, "gasnetsetup": 57, "cd": [57, 70, 73, 74, 76], "chpl_home": [57, 73, 74], "nl": [57, 70, 96], "would": [57, 61, 66, 81, 84, 89], "too": [58, 81], "backend": [58, 72], "parallel": [58, 81, 92, 95], "leverag": [58, 73], "increment": [58, 59], "everyth": [58, 59], "cut": [58, 59, 61], "somewhat": 58, "heroic": 58, "acceler": 58, "makebinari": 58, "bottleneck": 58, "tend": 58, "chpl_target_compil": 58, "clang": [58, 73], "gnu": [58, 77], "j16": 58, "outlin": [59, 65], "taken": [59, 75], "evolv": 59, "gain": 59, "team": 59, "action": 59, "click": [59, 72, 78], "draft": 59, "button": 59, "bring": 59, "text": [59, 64, 81], "box": 59, "publish": 59, "scheme": 59, "yyyi": 59, "mm": 59, "dd": 59, "v2022": 59, "31": [59, 77], "dot": 59, "hei": 59, "mistak": 59, "ok": 59, "dash": 59, "etc": [59, 73, 77], "underneath": 59, "excel": 59, "next": [59, 61, 72, 75, 96], "major": [59, 64, 82, 88, 94], "minor": 59, "review": 59, "Or": 59, "straight": 59, "green": 59, "believ": 59, "loos": 59, "remot": [59, 73, 74, 96], "upstream": [59, 73, 74], "someth": [59, 60, 96], "fetch": [59, 61], "previou": [59, 61, 74], "recent": 59, "ellips": 59, "prev": 59, "onlin": [59, 77], "concis": 59, "onelin": 59, "graphic": 59, "gitk": 59, "push": [59, 72], "strive": 59, "hyperlink": 59, "reason": [59, 61, 74], "guidelin": [59, 97], "substanti": 59, "bug": [59, 62], "smaller": [59, 64, 81], "coupl": 60, "unset": [60, 74], "optim": 60, "wors": 60, "matter": 60, "hit": 60, "chpl_develop": [60, 74], "rebuilt": 60, "homebrew": [60, 72], "shouldn": [60, 61], "worri": 60, "biggest": 60, "involv": [60, 78], "focus": 60, "just": [60, 61, 92], "crucial": 60, "saveusedmodul": [60, 61, 75], "piec": 60, "benchmark": [60, 62, 75, 79], "interact": [60, 64, 68, 69, 70, 74, 76], "session": [60, 70], "usedmodul": [60, 61, 75], "ctrl": 60, "easiest": 60, "mv": [60, 61], "arkouda_config_fil": [60, 75], "know": 60, "ll": [60, 61, 72], "suggest": [61, 77], "gasnet": [61, 62, 73, 74], "report": 61, "pretti": 61, "frustrat": 61, "past": 61, "recompil": 61, "checkout": 61, "v2023": [61, 70], "isn": 61, "mine": 61, "wherev": 61, "rememb": [61, 63], "won": 61, "overnight": 61, "hog": 61, "ve": [61, 73, 74], "got": 61, "forget": [61, 77], "techniqu": 61, "unnecessari": 61, "tip": [62, 72], "aim": 63, "introduct": 63, "commonli": 63, "exhaust": [63, 65], "ak_arr": 63, "easili": 63, "np_arr": 63, "52": 63, "84": 63, "80": 63, "71": 63, "aid": [63, 65], "transit": 63, "toolset": 63, "IN": 63, "ak_in1d": 63, "ak_int": 63, "m1": 63, "m2": 63, "ak_in1dmult": 63, "ak_in1dmulti": 63, "ak_intmult": 63, "though": 63, "extrem": [63, 65, 67], "let": 63, "sever": [63, 65, 81, 84, 87], "column_nam": 63, "column_data": 63, "fname": 63, "john": 63, "jane": 63, "jake": 63, "lname": 63, "smith": 63, "brown": 63, "ag": 63, "37": 63, "35": 63, "salari": 63, "75000": 63, "77000": 63, "100000": 63, "35000": 63, "f_name": 63, "l_name": 63, "notic": 63, "demo": 63, "computation": 63, "interest": 63, "cola": 64, "colb": 64, "colc": 64, "abc": 64, "ghi": 64, "arkodua": [64, 65], "flexibl": 65, "adher": 65, "portion": 65, "isbool": 65, "file_vers": 65, "arkouda_vers": 65, "c_string": 65, "mark": 65, "therefor": 65, "unflatten": 65, "reconstruct": 65, "number_of_dimens": 65, "array_of_size_rank": 65, "current_arkouda_vers": 65, "na_cod": 65, "unique_key_idx": 65, "key_": 65, "notifi": 65, "elect": [65, 66], "ONE": 65, "explicit": [65, 92], "still": [65, 97], "orient": [67, 86, 88, 92, 97], "writ": 67, "paruqet": 67, "ineffiec": 67, "fact": 67, "analyt": 69, "supercomput": 69, "visit": [70, 73, 74], "conda": [70, 72, 73, 74, 76], "yml": [70, 73, 74, 76], "download": [70, 73, 74, 78], "05": 70, "tar": [70, 72, 73, 74], "xzf": [70, 74], "gz": [70, 72, 73, 74], "listen": [70, 96], "your_machin": 70, "chapel_vers": 70, "15461882265": 70, "token_str": 70, "node01": [70, 96], "hang": 70, "exit": [70, 77], "prerequisit": [72, 73, 74], "proceed": 72, "manag": [72, 73, 74, 76, 78], "mac": [72, 74], "makefil": 72, "zeromq": [72, 76], "eval": 72, "anaconda3": [72, 73, 74], "pip": [72, 73, 74], "grep": [72, 77], "opt": [72, 73, 74], "caskroom": [72, 74], "miniforg": 72, "site": 72, "rpath": 72, "boost": 72, "cpp": 72, "thrift": 72, "utf8proc": 72, "virtual": 72, "venv": [72, 73], "activ": [72, 73, 74, 89], "upgrad": [72, 76], "wheel": 72, "clean": 72, "deactiv": 72, "rm": 72, "rf": 72, "dist": 72, "whl": 72, "chpldoc": [72, 73], "frontend": 72, "browser": 72, "ghpage": 72, "scroll": 72, "folder": 72, "homepag": 72, "md": [72, 73, 74], "sudo": [73, 77], "apt": 73, "m4": 73, "perl": 73, "bash": [73, 74], "mawk": 73, "pkg": 73, "config": [73, 75], "cmake": [73, 76], "llvm": [73, 74, 77], "libclang": 73, "cpp14": 73, "libedit": 73, "repo": [73, 74, 78], "encourag": [73, 74], "your_fork": [73, 74], "further": [73, 74, 78], "highli": 73, "archiv": 73, "x86": 73, "wget": 73, "sh": [73, 74], "bashrc": [73, 74, 77], "packag": [73, 74, 76, 78], "pythonpath": [73, 74], "live": [73, 74], "pwd": [73, 74], "quickstart": [73, 74, 78], "particularli": [73, 75], "regard": 73, "distro": 73, "cento": 73, "consequ": 73, "newer": 73, "devtoolset": 73, "softwar": 73, "explod": 73, "lang": 73, "xvf": 73, "setchplenv": [73, 74], "chplconfig": 73, "chpl_re2": [73, 74], "bundl": [73, 74], "chpl_llvm": [73, 74], "chpl_gmp": [73, 74], "linux64": 73, "yum": 73, "devel": 73, "gawk": 73, "curl": 73, "incompat": 73, "el7": 73, "scl": 73, "rh": 73, "cm_version": 73, "kitwar": 73, "licens": 73, "subdir": 73, "simul": [73, 74], "manual": 74, "brew": 74, "cask": 74, "exact": 74, "chipset": 74, "2022": 74, "macosx": 74, "arm64": 74, "progress": 74, "life": [74, 76], "cycl": [74, 76], "sync": 74, "zsh": 74, "gmp": 74, "rc": 74, "path_to_chpl": 74, "chpl_target_cpu": 74, "path_to_ark": 74, "reactiv": 74, "zshrc": 74, "successfulli": 74, "hello3": 74, "datapar": 74, "defautl": 74, "funcion": 75, "prior": 75, "exclud": 75, "valuabl": 75, "switch": [75, 85], "totestmsg": 75, "testmsg": 75, "addition": [75, 82], "kextrememsg": 75, "registerfunct": 75, "minkmsg": 75, "maxkmsg": 75, "accomplish": [75, 81], "approach": [75, 93], "test_command": 75, "__dict__": 75, "sometim": [75, 85, 92], "difficult": 75, "discov": 75, "inspect": [75, 81], "wish": 75, "pyzmq": 76, "typeguard": 76, "tabul": 76, "pyfiglet": 76, "h5py": [76, 81], "pyarrow": [76, 81], "pexpect": 76, "argpars": 76, "furo": 76, "myst": 76, "parser": 76, "linkifi": 76, "ast": 76, "931": 76, "990": 76, "yaml": 76, "env_nam": 76, "yaml_fil": 76, "prune": 76, "path_to_arkouda": 76, "strategi": [76, 77, 81], "eager": 76, "subsystem": 77, "wsl": 77, "rout": 77, "ubuntu": 77, "tutori": 77, "app": 77, "account": 77, "symlink": 77, "lt": 77, "tblgen": 77, "libtinfow": 77, "ln": 77, "libtic": 77, "plan": [77, 78, 90, 92], "powershel": 77, "vcxsrv": 77, "x410": 77, "whichev": 77, "firewal": 77, "xserver": 77, "hous": 77, "conf": 77, "nameserv": 77, "awk": 77, "serv": 78, "clone": 78, "100000000": 79, "arithmet": [80, 92], "scan": 80, "summar": [80, 81], "dedupl": 80, "setop": 80, "columnar": 81, "spread": 81, "mpi": 81, "layer": 81, "pipelin": [81, 97], "aggress": 81, "hundr": 81, "thousand": 81, "ingest": [81, 97], "customiz": 81, "schema": 81, "taht": 81, "autoclass": 82, "offer": [82, 88, 94, 97], "mathemat": 84, "multiplex": 84, "28": 85, "29": 85, "advanc": 85, "talk": 85, "cartesian": 85, "wherea": [85, 97], "discourag": [85, 86, 88, 92, 93, 97], "forc": [85, 86, 88, 92, 97], "concept": 86, "almost": [86, 88, 92, 97], "liter": [86, 97], "alon": [86, 97], "unrel": 87, "movement": 87, "unsign": 88, "ieee": [88, 92], "1073741824": 88, "workhors": 89, "scienc": 89, "extract": 89, "imagin": 89, "bydayofweek": 89, "numid": 89, "013": 90, "36": 90, "934176000000015": 90, "07734942223993": 90, "syntax": 91, "assig": 91, "42": 91, "ind": 91, "matlab": 91, "outer": 91, "touch": 91, "expans": 91, "lim": 91, "backbon": 92, "And": 92, "expos": 92, "incorpor": 92, "implicit": 92, "loss": 93, "functioanl": 93, "strucutur": 93, "abil": 93, "shown": 96, "sai": 96, "went": 96, "reachabl": 96, "wide": 97, "compris": 97, "whenev": 97, "threshold": 97, "pipe": 97, "googl": 97, "sacrific": 97, "notabl": 97, "exchang": 97}, "objects": {"": [[32, 0, 0, "-", "arkouda"]], "arkouda": [[32, 1, 1, "", "ARKOUDA_SUPPORTED_DTYPES"], [32, 1, 1, "", "AllSymbols"], [85, 2, 1, "", "ArrayView"], [32, 2, 1, "", "BitVector"], [32, 5, 1, "", "BitVectorizer"], [32, 2, 1, "", "CachedAccessor"], [86, 2, 1, "", "Categorical"], [32, 1, 1, "", "DTypeObjects"], [32, 1, 1, "", "DTypes"], [88, 2, 1, "", "DataFrame"], [32, 2, 1, "id1066", "Datetime"], [32, 2, 1, "", "DatetimeAccessor"], [32, 2, 1, "", "ErrorMode"], [32, 2, 1, "", "Fields"], [32, 1, 1, "", "GROUPBY_REDUCTION_TYPES"], [89, 2, 1, "", "GroupBy"], [32, 2, 1, "", "IPv4"], [82, 2, 1, "", "Index"], [32, 1, 1, "", "LEN_SUFFIX"], [32, 2, 1, "", "LogLevel"], [32, 2, 1, "", "MultiIndex"], [32, 7, 1, "", "NonUniqueError"], [32, 2, 1, "", "Power_divergenceResult"], [32, 2, 1, "", "Properties"], [32, 1, 1, "", "RegisteredSymbols"], [32, 7, 1, "id490", "RegistrationError"], [32, 2, 1, "", "Row"], [32, 1, 1, "", "SEG_SUFFIX"], [32, 1, 1, "", "ScalarDTypes"], [32, 2, 1, "", "SegArray"], [94, 2, 1, "", "Series"], [32, 2, 1, "", "StringAccessor"], [32, 2, 1, "id999", "Strings"], [32, 2, 1, "id881", "Timedelta"], [32, 1, 1, "", "VAL_SUFFIX"], [84, 5, 1, "", "abs"], [2, 0, 0, "-", "accessor"], [32, 5, 1, "", "akabs"], [32, 1, 1, "id442", "akbool"], [32, 5, 1, "id489", "akcast"], [32, 1, 1, "id609", "akfloat64"], [32, 1, 1, "id610", "akint64"], [4, 0, 0, "-", "akmath"], [6, 0, 0, "-", "akstats"], [32, 1, 1, "id611", "akuint64"], [32, 5, 1, "", "align"], [7, 0, 0, "-", "alignment"], [84, 5, 1, "", "all"], [32, 1, 1, "", "all_scalars"], [84, 5, 1, "", "any"], [87, 5, 1, "", "arange"], [32, 5, 1, "", "arccos"], [32, 5, 1, "", "arccosh"], [32, 5, 1, "", "arcsin"], [32, 5, 1, "", "arcsinh"], [32, 5, 1, "", "arctan"], [32, 5, 1, "", "arctan2"], [32, 5, 1, "", "arctanh"], [84, 5, 1, "", "argmax"], [84, 5, 1, "", "argmaxk"], [84, 5, 1, "", "argmin"], [84, 5, 1, "", "argmink"], [83, 5, 1, "", "argsort"], [81, 5, 1, "", "array"], [22, 0, 0, "-", "array_api"], [24, 0, 0, "-", "array_view"], [32, 5, 1, "", "attach"], [32, 5, 1, "", "attach_all"], [32, 5, 1, "", "attach_pdarray"], [32, 1, 1, "id608", "bigint"], [32, 5, 1, "", "bigint_from_uint_arrays"], [32, 1, 1, "id4", "bitType"], [32, 1, 1, "", "bool"], [32, 1, 1, "", "bool_scalars"], [32, 5, 1, "id656", "broadcast"], [32, 5, 1, "", "broadcast_dims"], [32, 5, 1, "", "broadcast_to_shape"], [92, 5, 1, "", "cast"], [25, 0, 0, "-", "categorical"], [32, 5, 1, "", "ceil"], [32, 5, 1, "", "check_np_dtype"], [32, 5, 1, "", "chisquare"], [32, 5, 1, "", "clear"], [26, 0, 0, "-", "client"], [27, 0, 0, "-", "client_dtypes"], [32, 5, 1, "", "clz"], [83, 5, 1, "", "coargsort"], [32, 1, 1, "", "complex128"], [32, 1, 1, "", "complex64"], [32, 5, 1, "", "compute_join_size"], [87, 5, 1, "", "concatenate"], [96, 5, 1, "", "connect"], [32, 5, 1, "", "convert_if_categorical"], [32, 5, 1, "", "corr"], [84, 5, 1, "", "cos"], [32, 5, 1, "", "cosh"], [32, 5, 1, "", "cov"], [32, 5, 1, "id553", "create_pdarray"], [32, 5, 1, "", "ctz"], [84, 5, 1, "", "cumprod"], [84, 5, 1, "", "cumsum"], [28, 0, 0, "-", "dataframe"], [32, 5, 1, "", "date_operators"], [32, 5, 1, "id903", "date_range"], [32, 5, 1, "", "deg2rad"], [32, 5, 1, "", "disableVerbose"], [32, 5, 1, "", "divmod"], [32, 5, 1, "", "dtype"], [29, 0, 0, "-", "dtypes"], [32, 5, 1, "", "enableVerbose"], [84, 5, 1, "", "exp"], [32, 5, 1, "", "expm1"], [81, 5, 1, "", "export"], [32, 5, 1, "", "find"], [32, 1, 1, "", "float32"], [32, 1, 1, "", "float64"], [32, 1, 1, "", "float_scalars"], [32, 5, 1, "", "floor"], [32, 5, 1, "", "fmod"], [32, 5, 1, "id251", "from_series"], [32, 5, 1, "id720", "full"], [32, 5, 1, "", "full_like"], [32, 5, 1, "id301", "gen_ranges"], [32, 5, 1, "", "generic_concat"], [32, 5, 1, "", "getArkoudaLogger"], [32, 5, 1, "", "get_byteorder"], [32, 5, 1, "", "get_callback"], [32, 5, 1, "", "get_columns"], [81, 5, 1, "", "get_datasets"], [32, 5, 1, "", "get_filetype"], [32, 5, 1, "", "get_null_indices"], [32, 5, 1, "", "get_server_byteorder"], [30, 0, 0, "-", "groupbyclass"], [32, 5, 1, "", "hash"], [32, 5, 1, "", "hist_all"], [90, 5, 1, "", "histogram"], [32, 5, 1, "", "histogram2d"], [32, 5, 1, "", "histogramdd"], [31, 0, 0, "-", "history"], [81, 5, 1, "", "import_data"], [95, 5, 1, "", "in1d"], [32, 5, 1, "", "in1d_intervals"], [33, 0, 0, "-", "index"], [32, 5, 1, "", "indexof1d"], [34, 0, 0, "-", "infoclass"], [32, 5, 1, "", "information"], [32, 1, 1, "", "int16"], [32, 1, 1, "", "int32"], [32, 1, 1, "id184", "int64"], [32, 1, 1, "", "int8"], [32, 1, 1, "id186", "intTypes"], [32, 1, 1, "id252", "int_scalars"], [32, 5, 1, "", "intersect"], [95, 5, 1, "", "intersect1d"], [32, 5, 1, "", "interval_lookup"], [32, 5, 1, "", "intx"], [32, 5, 1, "", "invert_permutation"], [35, 0, 0, "-", "io"], [36, 0, 0, "-", "io_util"], [32, 5, 1, "", "ip_address"], [32, 5, 1, "id253", "isSupportedInt"], [32, 5, 1, "", "isSupportedNumber"], [32, 5, 1, "", "is_cosorted"], [32, 5, 1, "", "is_ipv4"], [32, 5, 1, "", "is_ipv6"], [32, 5, 1, "", "is_registered"], [84, 5, 1, "", "is_sorted"], [32, 5, 1, "", "isfinite"], [32, 5, 1, "", "isinf"], [32, 5, 1, "id907", "isnan"], [37, 0, 0, "-", "join"], [32, 5, 1, "", "join_on_eq_with_dt"], [32, 5, 1, "", "left_align"], [87, 5, 1, "", "linspace"], [32, 5, 1, "", "list_registry"], [32, 5, 1, "", "list_symbol_table"], [32, 5, 1, "", "load"], [32, 5, 1, "", "load_all"], [84, 5, 1, "", "log"], [32, 5, 1, "", "log10"], [32, 5, 1, "", "log1p"], [32, 5, 1, "", "log2"], [38, 0, 0, "-", "logger"], [32, 5, 1, "", "lookup"], [32, 5, 1, "", "ls"], [32, 5, 1, "", "ls_csv"], [39, 0, 0, "-", "match"], [40, 0, 0, "-", "matcher"], [84, 5, 1, "", "max"], [84, 5, 1, "", "maxk"], [84, 5, 1, "", "mean"], [32, 5, 1, "", "merge"], [84, 5, 1, "", "min"], [84, 5, 1, "", "mink"], [32, 5, 1, "", "mod"], [41, 0, 0, "-", "numeric"], [32, 1, 1, "", "numeric_scalars"], [32, 1, 1, "", "numpy_scalars"], [87, 5, 1, "", "ones"], [87, 5, 1, "", "ones_like"], [32, 5, 1, "", "parity"], [92, 2, 1, "", "pdarray"], [42, 0, 0, "-", "pdarrayclass"], [43, 0, 0, "-", "pdarraycreation"], [44, 0, 0, "-", "pdarraysetops"], [32, 5, 1, "", "plot_dist"], [45, 0, 0, "-", "plotting"], [32, 5, 1, "", "popcount"], [32, 5, 1, "", "power"], [32, 5, 1, "", "power_divergence"], [32, 5, 1, "", "pretty_print_information"], [84, 5, 1, "", "prod"], [32, 5, 1, "", "rad2deg"], [87, 5, 1, "", "randint"], [32, 5, 1, "", "random_strings_lognormal"], [32, 5, 1, "", "random_strings_uniform"], [81, 5, 1, "", "read"], [32, 5, 1, "", "read_csv"], [32, 5, 1, "", "read_hdf"], [32, 5, 1, "", "read_parquet"], [32, 5, 1, "", "read_tagged_data"], [32, 5, 1, "", "receive"], [32, 5, 1, "", "receive_dataframe"], [32, 5, 1, "", "register_all"], [32, 5, 1, "", "resolve_scalar_dtype"], [32, 5, 1, "", "restore"], [32, 5, 1, "", "right_align"], [32, 5, 1, "", "rotl"], [32, 5, 1, "", "rotr"], [32, 5, 1, "", "round"], [46, 0, 0, "-", "row"], [32, 5, 1, "", "save_all"], [32, 5, 1, "", "search_intervals"], [47, 0, 0, "-", "security"], [48, 0, 0, "-", "segarray"], [49, 0, 0, "-", "series"], [95, 5, 1, "", "setdiff1d"], [95, 5, 1, "", "setxor1d"], [32, 5, 1, "", "sign"], [84, 5, 1, "", "sin"], [32, 5, 1, "", "sinh"], [32, 5, 1, "", "skew"], [32, 5, 1, "", "snapshot"], [32, 5, 1, "", "sort"], [32, 5, 1, "", "sorted"], [50, 0, 0, "-", "sorting"], [32, 5, 1, "", "sqrt"], [32, 5, 1, "", "square"], [32, 5, 1, "", "standard_normal"], [84, 5, 1, "", "std"], [32, 1, 1, "id254", "str_"], [32, 1, 1, "", "str_scalars"], [32, 5, 1, "", "string_operators"], [51, 0, 0, "-", "strings"], [84, 5, 1, "", "sum"], [32, 5, 1, "", "tan"], [32, 5, 1, "", "tanh"], [52, 0, 0, "-", "timeclass"], [32, 5, 1, "id904", "timedelta_range"], [32, 5, 1, "", "to_csv"], [32, 5, 1, "", "to_hdf"], [32, 5, 1, "", "to_parquet"], [32, 5, 1, "", "translate_np_dtype"], [32, 5, 1, "", "trunc"], [32, 1, 1, "", "uint16"], [32, 1, 1, "", "uint32"], [32, 1, 1, "", "uint64"], [32, 1, 1, "", "uint8"], [32, 5, 1, "", "uniform"], [95, 5, 1, "", "union1d"], [95, 5, 1, "", "unique"], [32, 5, 1, "", "unregister"], [32, 5, 1, "", "unregister_all"], [32, 5, 1, "", "unregister_pdarray_by_name"], [32, 5, 1, "", "unsqueeze"], [32, 5, 1, "", "update_hdf"], [53, 0, 0, "-", "util"], [90, 5, 1, "", "value_counts"], [84, 5, 1, "", "var"], [84, 5, 1, "", "where"], [32, 5, 1, "", "write_log"], [32, 5, 1, "", "xlogy"], [32, 5, 1, "", "zero_up"], [87, 5, 1, "", "zeros"], [87, 5, 1, "", "zeros_like"]], "arkouda.ArrayView": [[85, 3, 1, "", "base"], [85, 3, 1, "", "dtype"], [85, 3, 1, "", "itemsize"], [85, 3, 1, "", "ndim"], [32, 3, 1, "", "objType"], [85, 3, 1, "", "order"], [85, 3, 1, "", "shape"], [85, 3, 1, "", "size"], [32, 4, 1, "", "to_hdf"], [32, 4, 1, "", "to_list"], [85, 5, 1, "", "to_ndarray"], [32, 4, 1, "", "update_hdf"]], "arkouda.BitVector": [[32, 3, 1, "", "conserves"], [32, 4, 1, "", "format"], [32, 4, 1, "", "from_return_msg"], [32, 4, 1, "", "opeq"], [32, 4, 1, "", "register"], [32, 3, 1, "", "special_objType"], [32, 4, 1, "", "to_list"], [32, 4, 1, "", "to_ndarray"]], "arkouda.Categorical": [[32, 3, 1, "id961", "BinOps"], [32, 3, 1, "id962", "RegisterablePieces"], [32, 3, 1, "id963", "RequiredPieces"], [32, 4, 1, "id983", "argsort"], [32, 4, 1, "id995", "attach"], [86, 3, 1, "", "categories"], [86, 3, 1, "", "codes"], [32, 4, 1, "id985", "concatenate"], [86, 4, 1, "", "contains"], [32, 3, 1, "id967", "dtype"], [86, 4, 1, "", "endswith"], [86, 4, 1, "", "from_codes"], [32, 4, 1, "id969", "from_return_msg"], [32, 4, 1, "id982", "group"], [32, 4, 1, "id981", "hash"], [32, 4, 1, "id979", "in1d"], [32, 4, 1, "id993", "info"], [32, 4, 1, "id992", "is_registered"], [32, 4, 1, "id974", "isna"], [86, 3, 1, "", "ndim"], [86, 3, 1, "", "nlevels"], [32, 3, 1, "id966", "objType"], [32, 4, 1, "id997", "parse_hdf_categoricals"], [86, 3, 1, "", "permutation"], [32, 4, 1, "id994", "pretty_print_info"], [32, 4, 1, "id990", "register"], [32, 4, 1, "id975", "reset_categories"], [32, 4, 1, "id989", "save"], [86, 3, 1, "", "segments"], [32, 4, 1, "id971", "set_categories"], [86, 3, 1, "", "shape"], [86, 3, 1, "", "size"], [32, 4, 1, "id984", "sort"], [32, 4, 1, "id970", "standardize_categories"], [86, 4, 1, "", "startswith"], [32, 4, 1, "id986", "to_hdf"], [32, 4, 1, "id973", "to_list"], [86, 5, 1, "", "to_ndarray"], [32, 4, 1, "id988", "to_parquet"], [32, 4, 1, "id998", "transfer"], [32, 4, 1, "id980", "unique"], [32, 4, 1, "id991", "unregister"], [32, 4, 1, "id996", "unregister_categorical_by_name"], [32, 4, 1, "id987", "update_hdf"]], "arkouda.DataFrame": [[32, 3, 1, "id803", "COLUMN_CLASSES"], [32, 4, 1, "id817", "GroupBy"], [32, 4, 1, "id812", "append"], [88, 5, 1, "", "apply_permutation"], [88, 5, 1, "", "argsort"], [32, 4, 1, "id845", "attach"], [88, 5, 1, "", "coargsort"], [32, 6, 1, "id800", "columns"], [88, 5, 1, "", "concat"], [88, 5, 1, "", "copy"], [32, 4, 1, "id840", "corr"], [88, 5, 1, "", "drop"], [88, 5, 1, "", "drop_duplicates"], [32, 6, 1, "id797", "dtypes"], [32, 6, 1, "id798", "empty"], [32, 4, 1, "id836", "filter_by_range"], [32, 4, 1, "id806", "from_pandas"], [32, 4, 1, "id847", "from_return_msg"], [88, 5, 1, "", "groupby"], [88, 5, 1, "", "head"], [32, 6, 1, "id801", "index"], [32, 6, 1, "id802", "info"], [32, 4, 1, "id844", "is_registered"], [32, 4, 1, "id839", "isin"], [32, 4, 1, "id830", "load"], [32, 4, 1, "id818", "memory_usage"], [32, 4, 1, "id841", "merge"], [32, 3, 1, "id804", "objType"], [32, 4, 1, "id826", "read_csv"], [32, 4, 1, "id842", "register"], [88, 5, 1, "", "rename"], [88, 5, 1, "", "reset_index"], [32, 4, 1, "id816", "sample"], [32, 4, 1, "id829", "save"], [32, 6, 1, "id799", "shape"], [32, 6, 1, "id796", "size"], [32, 4, 1, "id833", "sort_index"], [88, 5, 1, "", "sort_values"], [88, 5, 1, "", "tail"], [32, 4, 1, "id823", "to_csv"], [32, 4, 1, "id820", "to_hdf"], [88, 5, 1, "", "to_pandas"], [32, 4, 1, "id822", "to_parquet"], [32, 4, 1, "id805", "transfer"], [32, 4, 1, "id843", "unregister"], [32, 4, 1, "id846", "unregister_dataframe_by_name"], [32, 4, 1, "id821", "update_hdf"], [32, 4, 1, "id810", "update_size"]], "arkouda.Datetime": [[32, 6, 1, "id1083", "date"], [32, 6, 1, "id1073", "day"], [32, 6, 1, "id1078", "day_of_week"], [32, 6, 1, "id1076", "day_of_year"], [32, 6, 1, "id1079", "dayofweek"], [32, 6, 1, "id1077", "dayofyear"], [32, 6, 1, "id1072", "hour"], [32, 6, 1, "id1084", "is_leap_year"], [32, 4, 1, "id1098", "is_registered"], [32, 4, 1, "id1093", "isocalendar"], [32, 6, 1, "id1068", "microsecond"], [32, 6, 1, "id1069", "millisecond"], [32, 6, 1, "id1071", "minute"], [32, 6, 1, "id1074", "month"], [32, 6, 1, "id1067", "nanosecond"], [32, 4, 1, "id1096", "register"], [32, 6, 1, "id1070", "second"], [32, 3, 1, "id1092", "special_objType"], [32, 4, 1, "id1095", "sum"], [32, 3, 1, "id1089", "supported_opeq"], [32, 3, 1, "id1085", "supported_with_datetime"], [32, 3, 1, "id1090", "supported_with_pdarray"], [32, 3, 1, "id1086", "supported_with_r_datetime"], [32, 3, 1, "id1091", "supported_with_r_pdarray"], [32, 3, 1, "id1088", "supported_with_r_timedelta"], [32, 3, 1, "id1087", "supported_with_timedelta"], [32, 4, 1, "id1094", "to_pandas"], [32, 4, 1, "id1097", "unregister"], [32, 6, 1, "id1081", "week"], [32, 6, 1, "id1080", "weekday"], [32, 6, 1, "id1082", "weekofyear"], [32, 6, 1, "id1075", "year"]], "arkouda.ErrorMode": [[32, 3, 1, "", "ignore"], [32, 3, 1, "", "return_validity"], [32, 3, 1, "", "strict"]], "arkouda.Fields": [[32, 4, 1, "", "format"], [32, 4, 1, "", "opeq"]], "arkouda.GroupBy": [[89, 4, 1, "", "AND"], [89, 4, 1, "", "OR"], [32, 3, 1, "id917", "Reductions"], [89, 4, 1, "", "XOR"], [89, 4, 1, "", "aggregate"], [89, 4, 1, "", "all"], [89, 4, 1, "", "any"], [89, 4, 1, "", "argmax"], [89, 4, 1, "", "argmin"], [89, 4, 1, "", "attach"], [89, 4, 1, "", "broadcast"], [89, 4, 1, "", "build_from_components"], [89, 4, 1, "", "count"], [89, 3, 1, "", "dropna"], [89, 4, 1, "", "first"], [32, 4, 1, "id919", "from_return_msg"], [89, 4, 1, "", "is_registered"], [89, 3, 1, "", "logger"], [89, 4, 1, "", "max"], [89, 4, 1, "", "mean"], [89, 4, 1, "", "median"], [89, 4, 1, "", "min"], [89, 4, 1, "", "mode"], [89, 4, 1, "", "most_common"], [89, 3, 1, "", "ngroups"], [89, 3, 1, "", "nkeys"], [89, 4, 1, "", "nunique"], [32, 3, 1, "id918", "objType"], [89, 3, 1, "", "permutation"], [89, 4, 1, "", "prod"], [89, 4, 1, "", "register"], [89, 3, 1, "", "segments"], [89, 4, 1, "id0", "size"], [89, 4, 1, "", "std"], [89, 4, 1, "", "sum"], [89, 4, 1, "", "to_hdf"], [89, 4, 1, "", "unique"], [89, 3, 1, "", "unique_keys"], [89, 4, 1, "", "unregister"], [89, 4, 1, "", "unregister_groupby_by_name"], [32, 4, 1, "id921", "update_hdf"], [89, 4, 1, "", "var"]], "arkouda.IPv4": [[32, 4, 1, "", "export_uint"], [32, 4, 1, "", "format"], [32, 4, 1, "", "normalize"], [32, 4, 1, "", "opeq"], [32, 4, 1, "", "register"], [32, 3, 1, "", "special_objType"], [32, 4, 1, "", "to_hdf"], [32, 4, 1, "", "to_list"], [32, 4, 1, "", "to_ndarray"], [32, 4, 1, "", "update_hdf"]], "arkouda.Index": [[82, 5, 1, "", "argsort"], [82, 5, 1, "", "concat"], [32, 4, 1, "", "factory"], [32, 4, 1, "", "from_return_msg"], [32, 6, 1, "", "index"], [32, 4, 1, "", "is_registered"], [32, 6, 1, "", "is_unique"], [82, 5, 1, "", "lookup"], [32, 3, 1, "", "objType"], [32, 4, 1, "", "register"], [32, 4, 1, "", "save"], [82, 5, 1, "", "set_dtype"], [32, 6, 1, "", "shape"], [32, 4, 1, "", "to_csv"], [32, 4, 1, "", "to_dict"], [32, 4, 1, "", "to_hdf"], [32, 4, 1, "", "to_list"], [32, 4, 1, "", "to_ndarray"], [32, 4, 1, "", "to_pandas"], [32, 4, 1, "", "to_parquet"], [32, 4, 1, "", "unregister"], [32, 4, 1, "", "update_hdf"]], "arkouda.LogLevel": [[32, 3, 1, "", "CRITICAL"], [32, 3, 1, "", "DEBUG"], [32, 3, 1, "", "ERROR"], [32, 3, 1, "", "INFO"], [32, 3, 1, "", "WARN"]], "arkouda.MultiIndex": [[82, 5, 1, "", "argsort"], [82, 5, 1, "", "concat"], [32, 6, 1, "", "index"], [32, 4, 1, "", "is_registered"], [82, 5, 1, "", "lookup"], [32, 3, 1, "", "objType"], [32, 4, 1, "", "register"], [82, 5, 1, "", "set_dtype"], [32, 4, 1, "", "to_dict"], [32, 4, 1, "", "to_hdf"], [32, 4, 1, "", "to_list"], [32, 4, 1, "", "to_ndarray"], [32, 4, 1, "", "to_pandas"], [32, 4, 1, "", "unregister"], [32, 4, 1, "", "update_hdf"]], "arkouda.Power_divergenceResult": [[32, 3, 1, "", "pvalue"], [32, 3, 1, "", "statistic"]], "arkouda.SegArray": [[32, 4, 1, "", "AND"], [32, 4, 1, "", "OR"], [32, 4, 1, "", "XOR"], [32, 4, 1, "", "aggregate"], [32, 4, 1, "", "all"], [32, 4, 1, "", "any"], [93, 5, 1, "", "append"], [93, 5, 1, "", "append_single"], [32, 4, 1, "", "argmax"], [32, 4, 1, "", "argmin"], [32, 4, 1, "", "attach"], [32, 4, 1, "", "concat"], [32, 4, 1, "", "copy"], [32, 4, 1, "", "filter"], [32, 4, 1, "", "from_multi_array"], [32, 4, 1, "", "from_parts"], [32, 4, 1, "", "from_return_msg"], [93, 5, 1, "", "get_jth"], [93, 5, 1, "", "get_length_n"], [93, 5, 1, "", "get_ngrams"], [93, 5, 1, "", "get_prefixes"], [93, 5, 1, "", "get_suffixes"], [32, 6, 1, "", "grouping"], [32, 4, 1, "", "hash"], [93, 5, 1, "", "intersect"], [32, 4, 1, "", "is_registered"], [32, 4, 1, "", "load"], [32, 4, 1, "", "max"], [32, 4, 1, "", "mean"], [32, 4, 1, "", "min"], [32, 6, 1, "", "non_empty"], [32, 4, 1, "", "nunique"], [32, 3, 1, "", "objType"], [93, 5, 1, "", "prepend_single"], [32, 4, 1, "", "prod"], [32, 4, 1, "", "read_hdf"], [32, 4, 1, "", "register"], [93, 5, 1, "", "remove_repeats"], [32, 4, 1, "", "save"], [93, 5, 1, "", "set_jth"], [93, 5, 1, "", "setdiff"], [93, 5, 1, "", "setxor"], [32, 4, 1, "", "sum"], [32, 4, 1, "", "to_hdf"], [32, 4, 1, "", "to_list"], [93, 5, 1, "", "to_ndarray"], [32, 4, 1, "", "to_parquet"], [32, 4, 1, "", "transfer"], [93, 5, 1, "", "union"], [32, 4, 1, "", "unique"], [32, 4, 1, "", "unregister"], [32, 4, 1, "", "unregister_segarray_by_name"], [32, 4, 1, "", "update_hdf"]], "arkouda.Series": [[32, 4, 1, "", "add"], [32, 6, 1, "", "at"], [32, 4, 1, "", "attach"], [32, 4, 1, "", "concat"], [32, 4, 1, "", "diff"], [32, 3, 1, "", "dt"], [32, 4, 1, "", "from_return_msg"], [32, 4, 1, "", "has_repeat_labels"], [94, 5, 1, "", "head"], [32, 6, 1, "", "iat"], [32, 6, 1, "", "iloc"], [32, 4, 1, "", "is_registered"], [32, 4, 1, "", "isin"], [32, 6, 1, "", "loc"], [94, 5, 1, "id0", "locate"], [32, 3, 1, "", "objType"], [94, 5, 1, "", "pdconcat"], [32, 4, 1, "", "register"], [32, 6, 1, "", "shape"], [94, 5, 1, "", "sort_index"], [94, 5, 1, "", "sort_values"], [32, 3, 1, "", "str_acc"], [94, 5, 1, "", "tail"], [32, 4, 1, "", "to_dataframe"], [32, 4, 1, "", "to_list"], [94, 5, 1, "", "to_pandas"], [94, 5, 1, "", "topn"], [32, 4, 1, "", "unregister"], [32, 4, 1, "", "validate_key"], [32, 4, 1, "", "validate_val"], [94, 5, 1, "", "value_counts"]], "arkouda.Strings": [[32, 3, 1, "id1007", "BinOps"], [32, 4, 1, "id1052", "astype"], [32, 4, 1, "id1063", "attach"], [32, 4, 1, "id1028", "cached_regex_patterns"], [97, 4, 1, "", "contains"], [32, 4, 1, "id1015", "decode"], [32, 3, 1, "id1005", "dtype"], [32, 4, 1, "id1014", "encode"], [97, 4, 1, "", "endswith"], [32, 3, 1, "id1000", "entry"], [97, 4, 1, "", "find_locations"], [97, 4, 1, "", "findall"], [97, 4, 1, "", "flatten"], [32, 4, 1, "id1010", "from_parts"], [32, 4, 1, "id1009", "from_return_msg"], [97, 4, 1, "", "fullmatch"], [32, 4, 1, "id1012", "get_bytes"], [32, 4, 1, "id1011", "get_lengths"], [32, 4, 1, "id1013", "get_offsets"], [32, 4, 1, "id1046", "get_prefixes"], [32, 4, 1, "id1047", "get_suffixes"], [32, 4, 1, "id1049", "group"], [32, 4, 1, "id1048", "hash"], [32, 4, 1, "id1058", "info"], [32, 4, 1, "id1062", "is_registered"], [32, 4, 1, "id1022", "isalnum"], [32, 4, 1, "id1023", "isalpha"], [32, 4, 1, "id1024", "isdigit"], [32, 4, 1, "id1025", "isempty"], [32, 4, 1, "id1019", "islower"], [32, 4, 1, "id1026", "isspace"], [32, 4, 1, "id1021", "istitle"], [32, 4, 1, "id1020", "isupper"], [32, 3, 1, "id1006", "logger"], [32, 4, 1, "id1016", "lower"], [97, 4, 1, "", "lstick"], [97, 4, 1, "", "match"], [32, 3, 1, "id1002", "nbytes"], [32, 3, 1, "id1003", "ndim"], [32, 3, 1, "id1008", "objType"], [97, 4, 1, "", "peel"], [32, 4, 1, "id1059", "pretty_print_info"], [32, 4, 1, "id1029", "purge_cached_regex_patterns"], [32, 4, 1, "id1060", "register"], [97, 4, 1, "", "rpeel"], [32, 4, 1, "id1057", "save"], [97, 4, 1, "", "search"], [32, 3, 1, "id1004", "shape"], [32, 3, 1, "id1001", "size"], [97, 4, 1, "", "split"], [97, 4, 1, "", "startswith"], [97, 4, 1, "", "stick"], [32, 4, 1, "id1027", "strip"], [97, 4, 1, "", "sub"], [97, 4, 1, "", "subn"], [32, 4, 1, "id1018", "title"], [32, 4, 1, "id1056", "to_csv"], [32, 4, 1, "id1054", "to_hdf"], [32, 4, 1, "id1051", "to_list"], [97, 5, 1, "", "to_ndarray"], [32, 4, 1, "id1053", "to_parquet"], [32, 4, 1, "id1065", "transfer"], [32, 4, 1, "id1061", "unregister"], [32, 4, 1, "id1064", "unregister_strings_by_name"], [32, 4, 1, "id1055", "update_hdf"], [32, 4, 1, "id1017", "upper"]], "arkouda.Timedelta": [[32, 4, 1, "id899", "abs"], [32, 6, 1, "id886", "components"], [32, 6, 1, "id885", "days"], [32, 4, 1, "id902", "is_registered"], [32, 6, 1, "id883", "microseconds"], [32, 6, 1, "id882", "nanoseconds"], [32, 4, 1, "id900", "register"], [32, 6, 1, "id884", "seconds"], [32, 3, 1, "id894", "special_objType"], [32, 4, 1, "id897", "std"], [32, 4, 1, "id898", "sum"], [32, 3, 1, "id891", "supported_opeq"], [32, 3, 1, "id887", "supported_with_datetime"], [32, 3, 1, "id892", "supported_with_pdarray"], [32, 3, 1, "id888", "supported_with_r_datetime"], [32, 3, 1, "id893", "supported_with_r_pdarray"], [32, 3, 1, "id890", "supported_with_r_timedelta"], [32, 3, 1, "id889", "supported_with_timedelta"], [32, 4, 1, "id896", "to_pandas"], [32, 4, 1, "id895", "total_seconds"], [32, 4, 1, "id901", "unregister"]], "arkouda.accessor": [[2, 2, 1, "", "CachedAccessor"], [2, 2, 1, "", "DatetimeAccessor"], [2, 2, 1, "", "Properties"], [2, 2, 1, "", "StringAccessor"], [2, 5, 1, "", "date_operators"], [2, 5, 1, "", "string_operators"]], "arkouda.akmath": [[3, 0, 0, "-", "_math"], [4, 5, 1, "", "xlogy"]], "arkouda.akmath._math": [[3, 5, 1, "", "xlogy"]], "arkouda.akstats": [[6, 2, 1, "", "Power_divergenceResult"], [5, 0, 0, "-", "_stats_py"], [6, 5, 1, "", "chisquare"], [6, 5, 1, "", "power_divergence"]], "arkouda.akstats.Power_divergenceResult": [[6, 3, 1, "", "pvalue"], [6, 3, 1, "", "statistic"]], "arkouda.akstats._stats_py": [[5, 2, 1, "", "Power_divergenceResult"], [5, 5, 1, "", "chisquare"], [5, 5, 1, "", "power_divergence"]], "arkouda.akstats._stats_py.Power_divergenceResult": [[5, 3, 1, "", "pvalue"], [5, 3, 1, "", "statistic"]], "arkouda.alignment": [[7, 7, 1, "", "NonUniqueError"], [7, 5, 1, "", "align"], [7, 5, 1, "", "find"], [7, 5, 1, "", "in1d_intervals"], [7, 5, 1, "", "interval_lookup"], [7, 5, 1, "", "is_cosorted"], [7, 5, 1, "", "left_align"], [7, 5, 1, "", "lookup"], [7, 5, 1, "", "right_align"], [7, 5, 1, "", "search_intervals"], [7, 5, 1, "", "unsqueeze"], [7, 5, 1, "", "zero_up"]], "arkouda.array_api": [[8, 0, 0, "-", "_array_object"], [9, 0, 0, "-", "_constants"], [10, 0, 0, "-", "_creation_functions"], [11, 0, 0, "-", "_data_type_functions"], [12, 0, 0, "-", "_dtypes"], [13, 0, 0, "-", "_elementwise_functions"], [14, 0, 0, "-", "_indexing_functions"], [15, 0, 0, "-", "_manipulation_functions"], [16, 0, 0, "-", "_searching_functions"], [17, 0, 0, "-", "_set_functions"], [18, 0, 0, "-", "_sorting_functions"], [19, 0, 0, "-", "_statistical_functions"], [20, 0, 0, "-", "_typing"], [21, 0, 0, "-", "_utility_functions"], [23, 0, 0, "-", "linalg"]], "arkouda.array_api._array_object": [[8, 2, 1, "", "Array"]], "arkouda.array_api._array_object.Array": [[8, 6, 1, "", "T"], [8, 6, 1, "", "device"], [8, 6, 1, "", "dtype"], [8, 6, 1, "", "mT"], [8, 6, 1, "", "ndim"], [8, 6, 1, "", "shape"], [8, 6, 1, "", "size"], [8, 4, 1, "", "to_device"], [8, 4, 1, "", "to_ndarray"], [8, 4, 1, "", "tolist"]], "arkouda.array_api._constants": [[9, 1, 1, "", "e"], [9, 1, 1, "", "inf"], [9, 1, 1, "", "nan"], [9, 1, 1, "", "pi"]], "arkouda.array_api._creation_functions": [[10, 5, 1, "", "arange"], [10, 5, 1, "", "asarray"], [10, 5, 1, "", "empty"], [10, 5, 1, "", "empty_like"], [10, 5, 1, "", "eye"], [10, 5, 1, "", "from_dlpack"], [10, 5, 1, "", "full"], [10, 5, 1, "", "full_like"], [10, 5, 1, "", "linspace"], [10, 5, 1, "", "meshgrid"], [10, 5, 1, "", "ones"], [10, 5, 1, "", "ones_like"], [10, 5, 1, "", "tril"], [10, 5, 1, "", "triu"], [10, 5, 1, "", "zeros"], [10, 5, 1, "", "zeros_like"]], "arkouda.array_api._data_type_functions": [[11, 5, 1, "", "astype"], [11, 5, 1, "", "can_cast"], [11, 2, 1, "", "finfo_object"], [11, 2, 1, "", "iinfo_object"], [11, 5, 1, "", "isdtype"], [11, 5, 1, "", "result_type"]], "arkouda.array_api._data_type_functions.finfo_object": [[11, 3, 1, "", "bits"], [11, 3, 1, "", "dtype"], [11, 3, 1, "", "eps"], [11, 3, 1, "", "max"], [11, 3, 1, "", "min"], [11, 3, 1, "", "smallest_normal"]], "arkouda.array_api._data_type_functions.iinfo_object": [[11, 3, 1, "", "bits"], [11, 3, 1, "", "dtype"], [11, 3, 1, "", "max"], [11, 3, 1, "", "min"]], "arkouda.array_api._dtypes": [[12, 1, 1, "", "bool"], [12, 1, 1, "", "complex128"], [12, 1, 1, "", "complex64"], [12, 1, 1, "", "float32"], [12, 1, 1, "", "float64"], [12, 1, 1, "", "int16"], [12, 1, 1, "", "int32"], [12, 1, 1, "", "int64"], [12, 1, 1, "", "int8"], [12, 1, 1, "", "uint16"], [12, 1, 1, "", "uint32"], [12, 1, 1, "", "uint64"], [12, 1, 1, "", "uint8"]], "arkouda.array_api._elementwise_functions": [[13, 5, 1, "", "abs"], [13, 5, 1, "", "acos"], [13, 5, 1, "", "acosh"], [13, 5, 1, "", "add"], [13, 5, 1, "", "asin"], [13, 5, 1, "", "asinh"], [13, 5, 1, "", "atan"], [13, 5, 1, "", "atan2"], [13, 5, 1, "", "atanh"], [13, 5, 1, "", "bitwise_and"], [13, 5, 1, "", "bitwise_invert"], [13, 5, 1, "", "bitwise_left_shift"], [13, 5, 1, "", "bitwise_or"], [13, 5, 1, "", "bitwise_right_shift"], [13, 5, 1, "", "bitwise_xor"], [13, 5, 1, "", "ceil"], [13, 5, 1, "", "conj"], [13, 5, 1, "", "cos"], [13, 5, 1, "", "cosh"], [13, 5, 1, "", "divide"], [13, 5, 1, "", "equal"], [13, 5, 1, "", "exp"], [13, 5, 1, "", "expm1"], [13, 5, 1, "", "floor"], [13, 5, 1, "", "floor_divide"], [13, 5, 1, "", "greater"], [13, 5, 1, "", "greater_equal"], [13, 5, 1, "", "imag"], [13, 5, 1, "", "isfinite"], [13, 5, 1, "", "isinf"], [13, 5, 1, "", "isnan"], [13, 5, 1, "", "less"], [13, 5, 1, "", "less_equal"], [13, 5, 1, "", "log"], [13, 5, 1, "", "log10"], [13, 5, 1, "", "log1p"], [13, 5, 1, "", "log2"], [13, 5, 1, "", "logaddexp"], [13, 5, 1, "", "logical_and"], [13, 5, 1, "", "logical_not"], [13, 5, 1, "", "logical_or"], [13, 5, 1, "", "logical_xor"], [13, 5, 1, "", "multiply"], [13, 5, 1, "", "negative"], [13, 5, 1, "", "not_equal"], [13, 5, 1, "", "positive"], [13, 5, 1, "", "pow"], [13, 5, 1, "", "real"], [13, 5, 1, "", "remainder"], [13, 5, 1, "", "round"], [13, 5, 1, "", "sign"], [13, 5, 1, "", "sin"], [13, 5, 1, "", "sinh"], [13, 5, 1, "", "sqrt"], [13, 5, 1, "", "square"], [13, 5, 1, "", "subtract"], [13, 5, 1, "", "tan"], [13, 5, 1, "", "tanh"], [13, 5, 1, "", "trunc"]], "arkouda.array_api._indexing_functions": [[14, 5, 1, "", "take"]], "arkouda.array_api._manipulation_functions": [[15, 5, 1, "", "broadcast_arrays"], [15, 5, 1, "", "broadcast_to"], [15, 5, 1, "", "concat"], [15, 5, 1, "", "expand_dims"], [15, 5, 1, "", "flip"], [15, 5, 1, "", "permute_dims"], [15, 5, 1, "", "reshape"], [15, 5, 1, "", "roll"], [15, 5, 1, "", "squeeze"], [15, 5, 1, "", "stack"]], "arkouda.array_api._searching_functions": [[16, 5, 1, "", "argmax"], [16, 5, 1, "", "argmin"], [16, 5, 1, "", "nonzero"], [16, 5, 1, "", "where"]], "arkouda.array_api._set_functions": [[17, 2, 1, "", "UniqueAllResult"], [17, 2, 1, "", "UniqueCountsResult"], [17, 2, 1, "", "UniqueInverseResult"], [17, 5, 1, "", "unique_all"], [17, 5, 1, "", "unique_counts"], [17, 5, 1, "", "unique_inverse"], [17, 5, 1, "", "unique_values"]], "arkouda.array_api._set_functions.UniqueAllResult": [[17, 3, 1, "", "counts"], [17, 3, 1, "", "indices"], [17, 3, 1, "", "inverse_indices"], [17, 3, 1, "", "values"]], "arkouda.array_api._set_functions.UniqueCountsResult": [[17, 3, 1, "", "counts"], [17, 3, 1, "", "values"]], "arkouda.array_api._set_functions.UniqueInverseResult": [[17, 3, 1, "", "inverse_indices"], [17, 3, 1, "", "values"]], "arkouda.array_api._sorting_functions": [[18, 5, 1, "", "argsort"], [18, 5, 1, "", "sort"]], "arkouda.array_api._statistical_functions": [[19, 5, 1, "", "max"], [19, 5, 1, "", "mean"], [19, 5, 1, "", "min"], [19, 5, 1, "", "prod"], [19, 5, 1, "", "std"], [19, 5, 1, "", "sum"], [19, 5, 1, "", "var"]], "arkouda.array_api._typing": [[20, 2, 1, "", "Array"], [20, 1, 1, "", "Device"], [20, 1, 1, "", "Dtype"], [20, 1, 1, "", "PyCapsule"], [20, 1, 1, "", "SupportsBufferProtocol"], [20, 2, 1, "", "SupportsDLPack"]], "arkouda.array_api._typing.Array": [[20, 6, 1, "", "T"], [20, 6, 1, "", "device"], [20, 6, 1, "", "dtype"], [20, 6, 1, "", "mT"], [20, 6, 1, "", "ndim"], [20, 6, 1, "", "shape"], [20, 6, 1, "", "size"], [20, 4, 1, "", "to_device"], [20, 4, 1, "", "to_ndarray"], [20, 4, 1, "", "tolist"]], "arkouda.array_api._utility_functions": [[21, 5, 1, "", "all"], [21, 5, 1, "", "any"]], "arkouda.array_api.linalg": [[23, 5, 1, "", "matmul"], [23, 5, 1, "", "matrix_transpose"], [23, 5, 1, "", "tensordot"], [23, 5, 1, "", "vecdot"]], "arkouda.array_view": [[24, 2, 1, "", "ArrayView"]], "arkouda.array_view.ArrayView": [[24, 3, 1, "", "base"], [24, 3, 1, "", "dtype"], [24, 3, 1, "", "itemsize"], [24, 3, 1, "", "ndim"], [24, 3, 1, "", "objType"], [24, 3, 1, "", "order"], [24, 3, 1, "", "shape"], [24, 3, 1, "", "size"], [24, 4, 1, "", "to_hdf"], [24, 4, 1, "", "to_list"], [24, 4, 1, "", "to_ndarray"], [24, 4, 1, "", "update_hdf"]], "arkouda.categorical": [[25, 2, 1, "", "Categorical"]], "arkouda.categorical.Categorical": [[25, 3, 1, "", "BinOps"], [25, 3, 1, "", "RegisterablePieces"], [25, 3, 1, "", "RequiredPieces"], [25, 4, 1, "", "argsort"], [25, 4, 1, "", "attach"], [25, 3, 1, "", "categories"], [25, 3, 1, "", "codes"], [25, 4, 1, "", "concatenate"], [25, 4, 1, "", "contains"], [25, 3, 1, "", "dtype"], [25, 4, 1, "", "endswith"], [25, 4, 1, "", "from_codes"], [25, 4, 1, "", "from_return_msg"], [25, 4, 1, "", "group"], [25, 4, 1, "", "hash"], [25, 4, 1, "", "in1d"], [25, 4, 1, "", "info"], [25, 4, 1, "", "is_registered"], [25, 4, 1, "", "isna"], [25, 3, 1, "", "ndim"], [25, 3, 1, "", "nlevels"], [25, 3, 1, "", "objType"], [25, 4, 1, "", "parse_hdf_categoricals"], [25, 3, 1, "id0", "permutation"], [25, 4, 1, "", "pretty_print_info"], [25, 4, 1, "", "register"], [25, 4, 1, "", "reset_categories"], [25, 4, 1, "", "save"], [25, 3, 1, "id1", "segments"], [25, 4, 1, "", "set_categories"], [25, 3, 1, "", "shape"], [25, 3, 1, "", "size"], [25, 4, 1, "", "sort"], [25, 4, 1, "", "standardize_categories"], [25, 4, 1, "", "startswith"], [25, 4, 1, "", "to_hdf"], [25, 4, 1, "", "to_list"], [25, 4, 1, "", "to_ndarray"], [25, 4, 1, "", "to_parquet"], [25, 4, 1, "", "transfer"], [25, 4, 1, "", "unique"], [25, 4, 1, "", "unregister"], [25, 4, 1, "", "unregister_categorical_by_name"], [25, 4, 1, "", "update_hdf"]], "arkouda.client": [[26, 5, 1, "", "connect"], [26, 5, 1, "", "disconnect"], [26, 5, 1, "", "generate_history"], [26, 5, 1, "", "get_config"], [26, 5, 1, "", "get_mem_avail"], [26, 5, 1, "", "get_mem_status"], [26, 5, 1, "", "get_mem_used"], [26, 5, 1, "", "get_server_commands"], [26, 5, 1, "", "print_server_commands"], [26, 5, 1, "", "ruok"], [26, 5, 1, "", "shutdown"]], "arkouda.client_dtypes": [[27, 2, 1, "", "BitVector"], [27, 5, 1, "", "BitVectorizer"], [27, 2, 1, "", "Fields"], [27, 2, 1, "", "IPv4"], [27, 5, 1, "", "ip_address"], [27, 5, 1, "", "is_ipv4"], [27, 5, 1, "", "is_ipv6"]], "arkouda.client_dtypes.BitVector": [[27, 3, 1, "", "conserves"], [27, 4, 1, "", "format"], [27, 4, 1, "", "from_return_msg"], [27, 4, 1, "", "opeq"], [27, 4, 1, "", "register"], [27, 3, 1, "", "special_objType"], [27, 4, 1, "", "to_list"], [27, 4, 1, "", "to_ndarray"]], "arkouda.client_dtypes.Fields": [[27, 4, 1, "", "format"], [27, 4, 1, "", "opeq"]], "arkouda.client_dtypes.IPv4": [[27, 4, 1, "", "export_uint"], [27, 4, 1, "", "format"], [27, 4, 1, "", "normalize"], [27, 4, 1, "", "opeq"], [27, 4, 1, "", "register"], [27, 3, 1, "", "special_objType"], [27, 4, 1, "", "to_hdf"], [27, 4, 1, "", "to_list"], [27, 4, 1, "", "to_ndarray"], [27, 4, 1, "", "update_hdf"]], "arkouda.dataframe": [[28, 2, 1, "", "DataFrame"], [28, 5, 1, "", "intersect"], [28, 5, 1, "", "intx"], [28, 5, 1, "", "invert_permutation"], [28, 5, 1, "", "merge"], [28, 5, 1, "", "sorted"]], "arkouda.dataframe.DataFrame": [[28, 3, 1, "", "COLUMN_CLASSES"], [28, 4, 1, "", "GroupBy"], [28, 4, 1, "", "append"], [28, 4, 1, "", "apply_permutation"], [28, 4, 1, "", "argsort"], [28, 4, 1, "", "attach"], [28, 4, 1, "", "coargsort"], [28, 6, 1, "", "columns"], [28, 4, 1, "", "concat"], [28, 4, 1, "", "copy"], [28, 4, 1, "", "corr"], [28, 4, 1, "", "drop"], [28, 4, 1, "", "drop_duplicates"], [28, 6, 1, "", "dtypes"], [28, 6, 1, "", "empty"], [28, 4, 1, "", "filter_by_range"], [28, 4, 1, "", "from_pandas"], [28, 4, 1, "", "from_return_msg"], [28, 4, 1, "", "groupby"], [28, 4, 1, "", "head"], [28, 6, 1, "", "index"], [28, 6, 1, "", "info"], [28, 4, 1, "", "is_registered"], [28, 4, 1, "", "isin"], [28, 4, 1, "", "load"], [28, 4, 1, "", "memory_usage"], [28, 4, 1, "", "merge"], [28, 3, 1, "", "objType"], [28, 4, 1, "", "read_csv"], [28, 4, 1, "", "register"], [28, 4, 1, "", "rename"], [28, 4, 1, "", "reset_index"], [28, 4, 1, "", "sample"], [28, 4, 1, "", "save"], [28, 6, 1, "", "shape"], [28, 6, 1, "", "size"], [28, 4, 1, "", "sort_index"], [28, 4, 1, "", "sort_values"], [28, 4, 1, "", "tail"], [28, 4, 1, "", "to_csv"], [28, 4, 1, "", "to_hdf"], [28, 4, 1, "", "to_pandas"], [28, 4, 1, "", "to_parquet"], [28, 4, 1, "", "transfer"], [28, 4, 1, "", "unregister"], [28, 4, 1, "", "unregister_dataframe_by_name"], [28, 4, 1, "", "update_hdf"], [28, 4, 1, "", "update_size"]], "arkouda.dtypes": [[29, 1, 1, "", "ARKOUDA_SUPPORTED_DTYPES"], [29, 1, 1, "", "DTypeObjects"], [29, 1, 1, "", "DTypes"], [29, 1, 1, "", "ScalarDTypes"], [29, 1, 1, "", "all_scalars"], [29, 1, 1, "", "bigint"], [29, 1, 1, "", "bitType"], [29, 1, 1, "", "bool"], [29, 1, 1, "", "bool_scalars"], [29, 5, 1, "", "check_np_dtype"], [29, 1, 1, "", "complex128"], [29, 1, 1, "", "complex64"], [29, 5, 1, "", "dtype"], [29, 1, 1, "", "float32"], [29, 1, 1, "", "float64"], [29, 1, 1, "", "float_scalars"], [29, 5, 1, "", "get_byteorder"], [29, 5, 1, "", "get_server_byteorder"], [29, 1, 1, "", "int16"], [29, 1, 1, "", "int32"], [29, 1, 1, "", "int64"], [29, 1, 1, "", "int8"], [29, 1, 1, "", "intTypes"], [29, 1, 1, "", "int_scalars"], [29, 5, 1, "", "isSupportedNumber"], [29, 1, 1, "", "numeric_scalars"], [29, 1, 1, "", "numpy_scalars"], [29, 5, 1, "", "resolve_scalar_dtype"], [29, 1, 1, "", "str_"], [29, 1, 1, "", "str_scalars"], [29, 5, 1, "", "translate_np_dtype"], [29, 1, 1, "", "uint16"], [29, 1, 1, "", "uint32"], [29, 1, 1, "", "uint64"], [29, 1, 1, "", "uint8"]], "arkouda.groupbyclass": [[30, 1, 1, "", "GROUPBY_REDUCTION_TYPES"], [30, 2, 1, "", "GroupBy"], [30, 5, 1, "", "broadcast"], [30, 5, 1, "", "unique"]], "arkouda.groupbyclass.GroupBy": [[30, 4, 1, "", "AND"], [30, 4, 1, "", "OR"], [30, 3, 1, "", "Reductions"], [30, 4, 1, "", "XOR"], [30, 4, 1, "", "aggregate"], [30, 4, 1, "", "all"], [30, 4, 1, "", "any"], [30, 4, 1, "", "argmax"], [30, 4, 1, "", "argmin"], [30, 4, 1, "", "attach"], [30, 4, 1, "", "broadcast"], [30, 4, 1, "", "build_from_components"], [30, 4, 1, "", "count"], [30, 3, 1, "", "dropna"], [30, 4, 1, "", "first"], [30, 4, 1, "", "from_return_msg"], [30, 4, 1, "", "is_registered"], [30, 3, 1, "", "logger"], [30, 4, 1, "", "max"], [30, 4, 1, "", "mean"], [30, 4, 1, "", "median"], [30, 4, 1, "", "min"], [30, 4, 1, "", "mode"], [30, 4, 1, "", "most_common"], [30, 3, 1, "", "ngroups"], [30, 3, 1, "", "nkeys"], [30, 4, 1, "", "nunique"], [30, 3, 1, "", "objType"], [30, 3, 1, "", "permutation"], [30, 4, 1, "", "prod"], [30, 4, 1, "", "register"], [30, 3, 1, "", "segments"], [30, 4, 1, "id0", "size"], [30, 4, 1, "", "std"], [30, 4, 1, "", "sum"], [30, 4, 1, "", "to_hdf"], [30, 4, 1, "", "unique"], [30, 3, 1, "", "unique_keys"], [30, 4, 1, "", "unregister"], [30, 4, 1, "", "unregister_groupby_by_name"], [30, 4, 1, "", "update_hdf"], [30, 4, 1, "", "var"]], "arkouda.history": [[31, 2, 1, "", "HistoryRetriever"], [31, 2, 1, "", "NotebookHistoryRetriever"], [31, 2, 1, "", "ShellHistoryRetriever"]], "arkouda.history.HistoryRetriever": [[31, 4, 1, "", "retrieve"]], "arkouda.history.NotebookHistoryRetriever": [[31, 4, 1, "", "retrieve"]], "arkouda.history.ShellHistoryRetriever": [[31, 4, 1, "", "retrieve"]], "arkouda.index": [[33, 2, 1, "", "Index"], [33, 2, 1, "", "MultiIndex"]], "arkouda.index.Index": [[33, 4, 1, "", "argsort"], [33, 4, 1, "", "concat"], [33, 4, 1, "", "factory"], [33, 4, 1, "", "from_return_msg"], [33, 6, 1, "", "index"], [33, 4, 1, "", "is_registered"], [33, 6, 1, "", "is_unique"], [33, 4, 1, "", "lookup"], [33, 3, 1, "", "objType"], [33, 4, 1, "", "register"], [33, 4, 1, "", "save"], [33, 4, 1, "", "set_dtype"], [33, 6, 1, "", "shape"], [33, 4, 1, "", "to_csv"], [33, 4, 1, "", "to_dict"], [33, 4, 1, "", "to_hdf"], [33, 4, 1, "", "to_list"], [33, 4, 1, "", "to_ndarray"], [33, 4, 1, "", "to_pandas"], [33, 4, 1, "", "to_parquet"], [33, 4, 1, "", "unregister"], [33, 4, 1, "", "update_hdf"]], "arkouda.index.MultiIndex": [[33, 4, 1, "", "argsort"], [33, 4, 1, "", "concat"], [33, 6, 1, "", "index"], [33, 4, 1, "", "is_registered"], [33, 4, 1, "", "lookup"], [33, 3, 1, "", "objType"], [33, 4, 1, "", "register"], [33, 4, 1, "", "set_dtype"], [33, 4, 1, "", "to_dict"], [33, 4, 1, "", "to_hdf"], [33, 4, 1, "", "to_list"], [33, 4, 1, "", "to_ndarray"], [33, 4, 1, "", "to_pandas"], [33, 4, 1, "", "unregister"], [33, 4, 1, "", "update_hdf"]], "arkouda.infoclass": [[34, 1, 1, "", "AllSymbols"], [34, 1, 1, "", "RegisteredSymbols"], [34, 5, 1, "", "information"], [34, 5, 1, "", "list_registry"], [34, 5, 1, "", "list_symbol_table"], [34, 5, 1, "", "pretty_print_information"]], "arkouda.io": [[35, 5, 1, "", "export"], [35, 5, 1, "", "get_columns"], [35, 5, 1, "", "get_datasets"], [35, 5, 1, "", "get_filetype"], [35, 5, 1, "", "get_null_indices"], [35, 5, 1, "", "import_data"], [35, 5, 1, "", "load"], [35, 5, 1, "", "load_all"], [35, 5, 1, "", "ls"], [35, 5, 1, "", "ls_csv"], [35, 5, 1, "", "read"], [35, 5, 1, "", "read_csv"], [35, 5, 1, "", "read_hdf"], [35, 5, 1, "", "read_parquet"], [35, 5, 1, "", "read_tagged_data"], [35, 5, 1, "", "receive"], [35, 5, 1, "", "receive_dataframe"], [35, 5, 1, "", "restore"], [35, 5, 1, "", "save_all"], [35, 5, 1, "", "snapshot"], [35, 5, 1, "", "to_csv"], [35, 5, 1, "", "to_hdf"], [35, 5, 1, "", "to_parquet"], [35, 5, 1, "", "update_hdf"]], "arkouda.io_util": [[36, 5, 1, "", "delimited_file_to_dict"], [36, 5, 1, "", "dict_to_delimited_file"], [36, 5, 1, "", "get_directory"], [36, 5, 1, "", "write_line_to_file"]], "arkouda.join": [[37, 5, 1, "", "compute_join_size"], [37, 5, 1, "", "gen_ranges"], [37, 5, 1, "", "join_on_eq_with_dt"]], "arkouda.logger": [[38, 2, 1, "", "LogLevel"], [38, 5, 1, "", "disableVerbose"], [38, 5, 1, "", "enableVerbose"], [38, 5, 1, "", "write_log"]], "arkouda.logger.LogLevel": [[38, 3, 1, "", "CRITICAL"], [38, 3, 1, "", "DEBUG"], [38, 3, 1, "", "ERROR"], [38, 3, 1, "", "INFO"], [38, 3, 1, "", "WARN"]], "arkouda.match": [[39, 2, 1, "", "Match"]], "arkouda.match.Match": [[97, 4, 1, "", "end"], [97, 4, 1, "", "find_matches"], [97, 4, 1, "", "group"], [97, 4, 1, "", "match_type"], [97, 4, 1, "", "matched"], [97, 4, 1, "", "start"]], "arkouda.matcher": [[40, 2, 1, "", "Matcher"]], "arkouda.matcher.Matcher": [[40, 3, 1, "", "LocationsInfo"], [40, 4, 1, "", "find_locations"], [40, 4, 1, "", "findall"], [40, 4, 1, "", "get_match"], [40, 4, 1, "", "split"], [40, 4, 1, "", "sub"]], "arkouda.numeric": [[41, 2, 1, "", "ErrorMode"], [41, 5, 1, "", "abs"], [41, 5, 1, "", "arccos"], [41, 5, 1, "", "arccosh"], [41, 5, 1, "", "arcsin"], [41, 5, 1, "", "arcsinh"], [41, 5, 1, "", "arctan"], [41, 5, 1, "", "arctan2"], [41, 5, 1, "", "arctanh"], [41, 5, 1, "", "cast"], [41, 5, 1, "", "ceil"], [41, 5, 1, "", "cos"], [41, 5, 1, "", "cosh"], [41, 5, 1, "", "cumprod"], [41, 5, 1, "", "cumsum"], [41, 5, 1, "", "deg2rad"], [41, 5, 1, "", "exp"], [41, 5, 1, "", "expm1"], [41, 5, 1, "", "floor"], [41, 5, 1, "", "hash"], [41, 5, 1, "", "histogram"], [41, 5, 1, "", "histogram2d"], [41, 5, 1, "", "histogramdd"], [41, 5, 1, "", "isfinite"], [41, 5, 1, "", "isinf"], [41, 5, 1, "", "isnan"], [41, 5, 1, "", "log"], [41, 5, 1, "", "log10"], [41, 5, 1, "", "log1p"], [41, 5, 1, "", "log2"], [41, 5, 1, "", "rad2deg"], [41, 5, 1, "", "round"], [41, 5, 1, "", "sign"], [41, 5, 1, "", "sin"], [41, 5, 1, "", "sinh"], [41, 5, 1, "", "square"], [41, 5, 1, "", "tan"], [41, 5, 1, "", "tanh"], [41, 5, 1, "", "trunc"], [41, 5, 1, "", "value_counts"], [41, 5, 1, "", "where"]], "arkouda.numeric.ErrorMode": [[41, 3, 1, "", "ignore"], [41, 3, 1, "", "return_validity"], [41, 3, 1, "", "strict"]], "arkouda.pdarray": [[32, 3, 1, "id667", "BinOps"], [32, 3, 1, "id668", "OpEqOps"], [90, 4, 1, "", "all"], [90, 4, 1, "", "any"], [90, 4, 1, "", "argmax"], [90, 4, 1, "", "argmaxk"], [90, 4, 1, "", "argmin"], [90, 4, 1, "", "argmink"], [32, 4, 1, "id702", "astype"], [32, 4, 1, "id718", "attach"], [32, 4, 1, "id704", "bigint_to_uint_arrays"], [32, 4, 1, "id697", "clz"], [32, 4, 1, "id690", "corr"], [32, 4, 1, "id689", "cov"], [32, 4, 1, "id698", "ctz"], [92, 3, 1, "", "dtype"], [32, 4, 1, "id673", "fill"], [32, 4, 1, "id670", "format_other"], [32, 4, 1, "id677", "info"], [32, 4, 1, "id676", "is_registered"], [90, 4, 1, "", "is_sorted"], [92, 3, 1, "", "itemsize"], [90, 4, 1, "", "max"], [32, 6, 1, "id666", "max_bits"], [90, 4, 1, "", "maxk"], [90, 4, 1, "", "mean"], [90, 4, 1, "", "min"], [90, 4, 1, "", "mink"], [92, 3, 1, "", "name"], [92, 3, 1, "", "ndim"], [32, 3, 1, "id669", "objType"], [32, 4, 1, "id672", "opeq"], [32, 4, 1, "id696", "parity"], [32, 4, 1, "id695", "popcount"], [32, 4, 1, "id678", "pretty_print_info"], [90, 4, 1, "", "prod"], [32, 4, 1, "id716", "register"], [32, 4, 1, "id705", "reshape"], [32, 4, 1, "id699", "rotl"], [32, 4, 1, "id700", "rotr"], [32, 4, 1, "id715", "save"], [92, 3, 1, "", "shape"], [92, 3, 1, "", "size"], [32, 4, 1, "id703", "slice_bits"], [90, 4, 1, "", "std"], [90, 4, 1, "", "sum"], [32, 4, 1, "id712", "to_csv"], [32, 4, 1, "id708", "to_cuda"], [32, 4, 1, "id710", "to_hdf"], [32, 4, 1, "id707", "to_list"], [92, 5, 1, "", "to_ndarray"], [32, 4, 1, "id709", "to_parquet"], [32, 4, 1, "id671", "transfer"], [32, 4, 1, "id717", "unregister"], [32, 4, 1, "id711", "update_hdf"], [32, 4, 1, "id701", "value_counts"], [90, 4, 1, "", "var"]], "arkouda.pdarrayclass": [[42, 7, 1, "", "RegistrationError"], [42, 5, 1, "", "all"], [42, 5, 1, "", "any"], [42, 5, 1, "", "argmax"], [42, 5, 1, "", "argmaxk"], [42, 5, 1, "", "argmin"], [42, 5, 1, "", "argmink"], [42, 5, 1, "", "attach_pdarray"], [42, 5, 1, "", "broadcast_to_shape"], [42, 5, 1, "", "clear"], [42, 5, 1, "", "clz"], [42, 5, 1, "", "corr"], [42, 5, 1, "", "cov"], [42, 5, 1, "", "ctz"], [42, 5, 1, "", "divmod"], [42, 5, 1, "", "fmod"], [42, 5, 1, "", "is_sorted"], [42, 5, 1, "", "max"], [42, 5, 1, "", "maxk"], [42, 5, 1, "", "mean"], [42, 5, 1, "", "min"], [42, 5, 1, "", "mink"], [42, 5, 1, "", "mod"], [42, 5, 1, "", "parity"], [42, 2, 1, "", "pdarray"], [42, 5, 1, "", "popcount"], [42, 5, 1, "", "power"], [42, 5, 1, "", "prod"], [42, 5, 1, "", "rotl"], [42, 5, 1, "", "rotr"], [42, 5, 1, "", "sqrt"], [42, 5, 1, "", "std"], [42, 5, 1, "", "sum"], [42, 5, 1, "", "unregister_pdarray_by_name"], [42, 5, 1, "", "var"]], "arkouda.pdarrayclass.pdarray": [[42, 3, 1, "", "BinOps"], [42, 3, 1, "", "OpEqOps"], [42, 4, 1, "", "all"], [42, 4, 1, "", "any"], [42, 4, 1, "", "argmax"], [42, 4, 1, "", "argmaxk"], [42, 4, 1, "", "argmin"], [42, 4, 1, "", "argmink"], [42, 4, 1, "", "astype"], [42, 4, 1, "", "attach"], [42, 4, 1, "", "bigint_to_uint_arrays"], [42, 4, 1, "", "clz"], [42, 4, 1, "", "corr"], [42, 4, 1, "", "cov"], [42, 4, 1, "", "ctz"], [42, 3, 1, "", "dtype"], [42, 4, 1, "", "fill"], [42, 4, 1, "", "format_other"], [42, 4, 1, "", "info"], [42, 4, 1, "", "is_registered"], [42, 4, 1, "", "is_sorted"], [42, 3, 1, "", "itemsize"], [42, 4, 1, "", "max"], [42, 6, 1, "", "max_bits"], [42, 4, 1, "", "maxk"], [42, 4, 1, "", "mean"], [42, 4, 1, "", "min"], [42, 4, 1, "", "mink"], [42, 3, 1, "", "name"], [42, 3, 1, "", "ndim"], [42, 3, 1, "", "objType"], [42, 4, 1, "", "opeq"], [42, 4, 1, "", "parity"], [42, 4, 1, "", "popcount"], [42, 4, 1, "", "pretty_print_info"], [42, 4, 1, "", "prod"], [42, 4, 1, "", "register"], [42, 4, 1, "", "reshape"], [42, 4, 1, "", "rotl"], [42, 4, 1, "", "rotr"], [42, 4, 1, "", "save"], [42, 3, 1, "", "shape"], [42, 3, 1, "", "size"], [42, 4, 1, "", "slice_bits"], [42, 4, 1, "", "std"], [42, 4, 1, "", "sum"], [42, 4, 1, "", "to_csv"], [42, 4, 1, "", "to_cuda"], [42, 4, 1, "", "to_hdf"], [42, 4, 1, "", "to_list"], [42, 4, 1, "", "to_ndarray"], [42, 4, 1, "", "to_parquet"], [42, 4, 1, "", "transfer"], [42, 4, 1, "", "unregister"], [42, 4, 1, "", "update_hdf"], [42, 4, 1, "", "value_counts"], [42, 4, 1, "", "var"]], "arkouda.pdarraycreation": [[43, 5, 1, "", "arange"], [43, 5, 1, "", "array"], [43, 5, 1, "", "bigint_from_uint_arrays"], [43, 5, 1, "", "from_series"], [43, 5, 1, "", "full"], [43, 5, 1, "", "full_like"], [43, 5, 1, "", "linspace"], [43, 5, 1, "", "ones"], [43, 5, 1, "", "ones_like"], [43, 5, 1, "", "randint"], [43, 5, 1, "", "random_strings_lognormal"], [43, 5, 1, "", "random_strings_uniform"], [43, 5, 1, "", "standard_normal"], [43, 5, 1, "", "uniform"], [43, 5, 1, "", "zeros"], [43, 5, 1, "", "zeros_like"]], "arkouda.pdarraysetops": [[44, 5, 1, "", "concatenate"], [44, 5, 1, "", "in1d"], [44, 5, 1, "", "indexof1d"], [44, 5, 1, "", "intersect1d"], [44, 5, 1, "", "setdiff1d"], [44, 5, 1, "", "setxor1d"], [44, 5, 1, "", "union1d"]], "arkouda.plotting": [[45, 5, 1, "", "hist_all"], [45, 5, 1, "", "plot_dist"]], "arkouda.row": [[46, 2, 1, "", "Row"]], "arkouda.security": [[47, 5, 1, "", "generate_token"], [47, 5, 1, "", "generate_username_token_json"], [47, 5, 1, "", "get_arkouda_client_directory"], [47, 5, 1, "", "get_home_directory"], [47, 5, 1, "", "get_username"], [47, 1, 1, "", "username_tokenizer"]], "arkouda.segarray": [[48, 1, 1, "", "LEN_SUFFIX"], [48, 1, 1, "", "SEG_SUFFIX"], [48, 2, 1, "", "SegArray"], [48, 1, 1, "", "VAL_SUFFIX"], [48, 5, 1, "", "segarray"]], "arkouda.segarray.SegArray": [[48, 4, 1, "", "AND"], [48, 4, 1, "", "OR"], [48, 4, 1, "", "XOR"], [48, 4, 1, "", "aggregate"], [48, 4, 1, "", "all"], [48, 4, 1, "", "any"], [48, 4, 1, "", "append"], [48, 4, 1, "", "append_single"], [48, 4, 1, "", "argmax"], [48, 4, 1, "", "argmin"], [48, 4, 1, "", "attach"], [48, 4, 1, "", "concat"], [48, 4, 1, "", "copy"], [48, 4, 1, "", "filter"], [48, 4, 1, "", "from_multi_array"], [48, 4, 1, "", "from_parts"], [48, 4, 1, "", "from_return_msg"], [48, 4, 1, "", "get_jth"], [48, 4, 1, "", "get_length_n"], [48, 4, 1, "", "get_ngrams"], [48, 4, 1, "", "get_prefixes"], [48, 4, 1, "", "get_suffixes"], [48, 6, 1, "", "grouping"], [48, 4, 1, "", "hash"], [48, 4, 1, "", "intersect"], [48, 4, 1, "", "is_registered"], [48, 4, 1, "", "load"], [48, 4, 1, "", "max"], [48, 4, 1, "", "mean"], [48, 4, 1, "", "min"], [48, 6, 1, "", "non_empty"], [48, 4, 1, "", "nunique"], [48, 3, 1, "", "objType"], [48, 4, 1, "", "prepend_single"], [48, 4, 1, "", "prod"], [48, 4, 1, "", "read_hdf"], [48, 4, 1, "", "register"], [48, 4, 1, "", "remove_repeats"], [48, 4, 1, "", "save"], [48, 4, 1, "", "set_jth"], [48, 4, 1, "", "setdiff"], [48, 4, 1, "", "setxor"], [48, 4, 1, "", "sum"], [48, 4, 1, "", "to_hdf"], [48, 4, 1, "", "to_list"], [48, 4, 1, "", "to_ndarray"], [48, 4, 1, "", "to_parquet"], [48, 4, 1, "", "transfer"], [48, 4, 1, "", "union"], [48, 4, 1, "", "unique"], [48, 4, 1, "", "unregister"], [48, 4, 1, "", "unregister_segarray_by_name"], [48, 4, 1, "", "update_hdf"]], "arkouda.series": [[49, 2, 1, "", "Series"]], "arkouda.series.Series": [[49, 4, 1, "", "add"], [49, 6, 1, "", "at"], [49, 4, 1, "", "attach"], [49, 4, 1, "", "concat"], [49, 4, 1, "", "diff"], [49, 3, 1, "", "dt"], [49, 4, 1, "", "from_return_msg"], [49, 4, 1, "", "has_repeat_labels"], [49, 4, 1, "", "head"], [49, 6, 1, "", "iat"], [49, 6, 1, "", "iloc"], [49, 4, 1, "", "is_registered"], [49, 4, 1, "", "isin"], [49, 6, 1, "", "loc"], [49, 4, 1, "", "locate"], [49, 3, 1, "", "objType"], [49, 4, 1, "", "pdconcat"], [49, 4, 1, "", "register"], [49, 6, 1, "", "shape"], [49, 4, 1, "", "sort_index"], [49, 4, 1, "", "sort_values"], [49, 3, 1, "", "str_acc"], [49, 4, 1, "", "tail"], [49, 4, 1, "", "to_dataframe"], [49, 4, 1, "", "to_list"], [49, 4, 1, "", "to_pandas"], [49, 4, 1, "", "topn"], [49, 4, 1, "", "unregister"], [49, 4, 1, "", "validate_key"], [49, 4, 1, "", "validate_val"], [49, 4, 1, "", "value_counts"]], "arkouda.sorting": [[50, 5, 1, "", "argsort"], [50, 5, 1, "", "coargsort"], [50, 5, 1, "", "sort"]], "arkouda.strings": [[51, 2, 1, "", "Strings"]], "arkouda.strings.Strings": [[51, 3, 1, "", "BinOps"], [51, 4, 1, "", "astype"], [51, 4, 1, "", "attach"], [51, 4, 1, "", "cached_regex_patterns"], [51, 4, 1, "", "contains"], [51, 4, 1, "", "decode"], [51, 3, 1, "", "dtype"], [51, 4, 1, "", "encode"], [51, 4, 1, "", "endswith"], [51, 3, 1, "", "entry"], [51, 4, 1, "", "find_locations"], [51, 4, 1, "", "findall"], [51, 4, 1, "", "flatten"], [51, 4, 1, "", "from_parts"], [51, 4, 1, "", "from_return_msg"], [51, 4, 1, "", "fullmatch"], [51, 4, 1, "", "get_bytes"], [51, 4, 1, "", "get_lengths"], [51, 4, 1, "", "get_offsets"], [51, 4, 1, "", "get_prefixes"], [51, 4, 1, "", "get_suffixes"], [51, 4, 1, "", "group"], [51, 4, 1, "", "hash"], [51, 4, 1, "", "info"], [51, 4, 1, "", "is_registered"], [51, 4, 1, "", "isalnum"], [51, 4, 1, "", "isalpha"], [51, 4, 1, "", "isdigit"], [51, 4, 1, "", "isempty"], [51, 4, 1, "", "islower"], [51, 4, 1, "", "isspace"], [51, 4, 1, "", "istitle"], [51, 4, 1, "", "isupper"], [51, 3, 1, "", "logger"], [51, 4, 1, "", "lower"], [51, 4, 1, "", "lstick"], [51, 4, 1, "", "match"], [51, 3, 1, "", "nbytes"], [51, 3, 1, "", "ndim"], [51, 3, 1, "", "objType"], [51, 4, 1, "", "peel"], [51, 4, 1, "", "pretty_print_info"], [51, 4, 1, "", "purge_cached_regex_patterns"], [51, 4, 1, "", "register"], [51, 4, 1, "", "rpeel"], [51, 4, 1, "", "save"], [51, 4, 1, "", "search"], [51, 3, 1, "", "shape"], [51, 3, 1, "", "size"], [51, 4, 1, "", "split"], [51, 4, 1, "", "startswith"], [51, 4, 1, "", "stick"], [51, 4, 1, "", "strip"], [51, 4, 1, "", "sub"], [51, 4, 1, "", "subn"], [51, 4, 1, "", "title"], [51, 4, 1, "", "to_csv"], [51, 4, 1, "", "to_hdf"], [51, 4, 1, "", "to_list"], [51, 4, 1, "", "to_ndarray"], [51, 4, 1, "", "to_parquet"], [51, 4, 1, "", "transfer"], [51, 4, 1, "", "unregister"], [51, 4, 1, "", "unregister_strings_by_name"], [51, 4, 1, "", "update_hdf"], [51, 4, 1, "", "upper"]], "arkouda.timeclass": [[52, 2, 1, "", "Datetime"], [52, 2, 1, "", "Timedelta"], [52, 5, 1, "", "date_range"], [52, 5, 1, "", "timedelta_range"]], "arkouda.timeclass.Datetime": [[52, 6, 1, "", "date"], [52, 6, 1, "", "day"], [52, 6, 1, "", "day_of_week"], [52, 6, 1, "", "day_of_year"], [52, 6, 1, "", "dayofweek"], [52, 6, 1, "", "dayofyear"], [52, 6, 1, "", "hour"], [52, 6, 1, "", "is_leap_year"], [52, 4, 1, "", "is_registered"], [52, 4, 1, "", "isocalendar"], [52, 6, 1, "", "microsecond"], [52, 6, 1, "", "millisecond"], [52, 6, 1, "", "minute"], [52, 6, 1, "", "month"], [52, 6, 1, "", "nanosecond"], [52, 4, 1, "", "register"], [52, 6, 1, "", "second"], [52, 3, 1, "", "special_objType"], [52, 4, 1, "", "sum"], [52, 3, 1, "", "supported_opeq"], [52, 3, 1, "", "supported_with_datetime"], [52, 3, 1, "", "supported_with_pdarray"], [52, 3, 1, "", "supported_with_r_datetime"], [52, 3, 1, "", "supported_with_r_pdarray"], [52, 3, 1, "", "supported_with_r_timedelta"], [52, 3, 1, "", "supported_with_timedelta"], [52, 4, 1, "", "to_pandas"], [52, 4, 1, "", "unregister"], [52, 6, 1, "", "week"], [52, 6, 1, "", "weekday"], [52, 6, 1, "", "weekofyear"], [52, 6, 1, "", "year"]], "arkouda.timeclass.Timedelta": [[52, 4, 1, "", "abs"], [52, 6, 1, "", "components"], [52, 6, 1, "", "days"], [52, 4, 1, "", "is_registered"], [52, 6, 1, "", "microseconds"], [52, 6, 1, "", "nanoseconds"], [52, 4, 1, "", "register"], [52, 6, 1, "", "seconds"], [52, 3, 1, "", "special_objType"], [52, 4, 1, "", "std"], [52, 4, 1, "", "sum"], [52, 3, 1, "", "supported_opeq"], [52, 3, 1, "", "supported_with_datetime"], [52, 3, 1, "", "supported_with_pdarray"], [52, 3, 1, "", "supported_with_r_datetime"], [52, 3, 1, "", "supported_with_r_pdarray"], [52, 3, 1, "", "supported_with_r_timedelta"], [52, 3, 1, "", "supported_with_timedelta"], [52, 4, 1, "", "to_pandas"], [52, 4, 1, "", "total_seconds"], [52, 4, 1, "", "unregister"]], "arkouda.util": [[53, 5, 1, "", "attach"], [53, 5, 1, "", "attach_all"], [53, 5, 1, "", "broadcast_dims"], [53, 5, 1, "", "concatenate"], [53, 5, 1, "", "convert_if_categorical"], [53, 5, 1, "", "enrich_inplace"], [53, 5, 1, "", "expand"], [53, 5, 1, "", "generic_concat"], [53, 5, 1, "", "get_callback"], [53, 5, 1, "", "identity"], [53, 5, 1, "", "invert_permutation"], [53, 5, 1, "", "is_registered"], [53, 5, 1, "", "most_common"], [53, 5, 1, "", "register"], [53, 5, 1, "", "register_all"], [53, 5, 1, "", "report_mem"], [53, 5, 1, "", "unregister"], [53, 5, 1, "", "unregister_all"]]}, "objtypes": {"0": "py:module", "1": "py:data", "2": "py:class", "3": "py:attribute", "4": "py:method", "5": "py:function", "6": "py:property", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "data", "Python data"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "method", "Python method"], "5": ["py", "function", "Python function"], "6": ["py", "property", "Python property"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"contribut": 0, "ad": [0, 1, 55, 75], "issu": 0, "bug": [0, 61], "report": 0, "featur": [0, 55, 82, 88, 94], "request": 0, "develop": [0, 57, 62, 76], "arkouda": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 60, 63, 64, 65, 67, 69, 70, 72, 73, 74, 75, 82, 85, 88, 93, 94, 96, 97], "code": 0, "convent": 0, "lint": 0, "python3": 0, "chapel": [0, 1, 57, 71, 73, 74], "test": [0, 1, 56, 79], "run": [0, 1, 56, 57, 75], "python": [0, 1, 55, 63, 70, 73, 74, 76, 96], "write": [0, 65, 67, 68], "pull": 0, "review": 0, "core": 0, "team": 0, "onli": 0, "merg": 0, "releas": [0, 59], "process": [0, 59, 75], "environ": [1, 57, 60, 72, 73, 74], "variabl": [1, 60, 72], "compil": [1, 60], "makefil": 1, "flag": 1, "depend": [1, 70, 72, 76], "path": 1, "modul": [1, 2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 75], "from": [1, 74, 81], "outsid": 1, "src": 1, "directori": 1, "client": [1, 26, 55, 70, 81, 96], "accessor": 2, "content": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53], "class": [2, 5, 6, 8, 11, 17, 20, 24, 25, 27, 28, 30, 31, 32, 33, 38, 39, 40, 41, 42, 46, 48, 49, 51, 52, 92], "function": [2, 3, 4, 5, 6, 7, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 23, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 47, 48, 50, 52, 53, 55, 68, 84], "akmath": [3, 4], "_math": 3, "packag": [4, 6, 22, 32, 72], "akstat": [5, 6], "_stats_pi": 5, "align": 7, "array_api": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "_array_object": 8, "_constant": 9, "_creation_funct": 10, "_data_type_funct": 11, "_dtype": 12, "_elementwise_funct": 13, "_indexing_funct": 14, "_manipulation_funct": 15, "_searching_funct": 16, "_set_funct": 17, "_sorting_funct": 18, "_statistical_funct": 19, "_type": 20, "attribut": [20, 29, 30, 32, 34, 47, 48, 65], "_utility_funct": 21, "submodul": [22, 32], "linalg": 23, "array_view": 24, "categor": [25, 65, 67, 86], "client_dtyp": 27, "datafram": [28, 63, 64, 65, 67, 88], "dtype": [29, 82], "groupbyclass": 30, "histori": 31, "subpackag": 32, "return": [32, 44, 95], "type": [32, 44, 64, 65, 67, 88, 92, 95], "input": [32, 49], "index": [33, 64, 65, 67, 82, 85, 88, 91], "infoclass": 34, "io": 35, "io_util": 36, "join": [37, 97], "logger": 38, "match": [39, 97], "matcher": 40, "numer": [41, 84], "pdarrayclass": 42, "pdarraycr": 43, "pdarraysetop": 44, "plot": 45, "row": 46, "secur": 47, "segarrai": [48, 65, 67, 93], "seri": [49, 94], "sort": [50, 83, 88, 94], "string": [51, 64, 65, 67, 97], "timeclass": 52, "util": 53, "api": [54, 64, 65, 66, 67, 68, 71], "refer": [54, 64, 65, 66, 67, 71], "your": 55, "first": 55, "interfac": 55, "exampl": [55, 63, 64], "server": [55, 70, 72, 75, 81, 96], "pytest": 56, "benchmark": 56, "The": [56, 92], "full": [56, 61], "suit": 56, "argument": [56, 79], "singl": 56, "file": [56, 64, 65, 68, 75, 81], "read": [56, 68, 81], "json": 56, "output": 56, "gasnet": 57, "configur": [57, 65, 72, 75], "build": [57, 58, 60, 61, 72, 74, 75], "reduc": [58, 79], "memori": 58, "usag": [58, 80], "step": [59, 73, 74], "instruct": 59, "gener": [59, 68], "note": 59, "diff": 59, "git": 59, "log": 59, "speed": 60, "up": 60, "alwai": 60, "set": [60, 63, 93, 95], "us": [60, 63, 70, 72, 75, 76], "modular": [60, 72, 75], "system": 60, "tip": 61, "reproduc": 61, "user": 61, "save": [61, 75], "effici": 61, "document": [62, 69, 72], "arrai": [63, 87, 93, 95], "pdarrai": [63, 64, 65, 67, 91, 92], "creation": [63, 85], "export": [63, 66, 68, 81], "object": [63, 97], "oper": [63, 84, 86, 92, 93, 95, 97], "creat": [63, 87], "import": [63, 66, 68, 81], "panda": [63, 94], "map": 63, "basic": 63, "interact": 63, "groupbi": [63, 65, 88, 89], "csv": 64, "support": [64, 65, 67, 68, 81], "data": [64, 65, 67, 81, 88, 90, 92], "format": [64, 68, 81], "without": 64, "header": 64, "hdf5": 65, "metadata": 65, "schema": 65, "arrayview": [65, 85], "mode": [65, 67], "distribut": [65, 72], "legaci": 65, "parquet": 67, "compress": 67, "i": [68, 81, 97], "o": [68, 81, 97], "l": 68, "quickstart": 70, "instal": [70, 72, 73, 74, 76, 78], "launch": [70, 96], "connect": [70, 96], "3": [70, 96], "shutdown": 70, "disconnect": 70, "get": 72, "start": 72, "recommend": [72, 74], "manual": 72, "all": 72, "individu": 72, "arrow": 72, "troubleshoot": 72, "linux": 73, "updat": [73, 74, 76], "kernel": 73, "clone": [73, 74], "repositori": [73, 74], "anaconda": [73, 74, 76], "ubuntu": 73, "rhel": 73, "next": [73, 74], "maco": 74, "sourc": 74, "homebrew": 74, "specifi": 75, "custom": 75, "new": 75, "an": 75, "requir": [76, 78], "list": 76, "specif": [76, 93, 97], "pip": 76, "window": 77, "wsl2": 77, "overview": 78, "guid": [78, 80], "perform": [79, 93, 97], "argsort": [79, 82], "posit": 79, "name": [79, 92], "gather": [79, 91], "scan": [79, 84], "scatter": [79, 91], "stream": 79, "between": 81, "larg": 81, "dataset": 81, "preprocess": 81, "disk": 81, "chang": 82, "lookup": [82, 94], "concat": 82, "arithmet": 84, "vector": 84, "scalar": 84, "element": [84, 93], "wise": 84, "reduct": 84, "where": 84, "iter": [85, 86, 88, 92, 93, 97], "construct": 86, "constant": 87, "regular": [87, 97], "random": 87, "concaten": [87, 88], "drop": 88, "copi": 88, "filter": 88, "permut": 88, "tail": [88, 94], "head": [88, 94], "renam": 88, "column": 88, "append": [88, 93], "reset": 88, "dedupl": [88, 93], "summar": 90, "descript": 90, "statist": 90, "histogram": 90, "valu": [90, 94], "count": [90, 94], "assign": 91, "integ": 91, "slice": 91, "logic": 91, "rank": 92, "cast": 92, "reshap": 92, "method": [93, 97], "prefix": 93, "suffix": 93, "ngram": 93, "sub": 93, "size": 93, "access": 93, "prepend": 93, "setop": 93, "union": 93, "intersect": 93, "differ": 93, "symmetr": 93, "integr": 94, "startup": 96, "substr": 97, "search": 97, "split": 97, "flatten": 97, "express": 97}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 60}, "alltitles": {"Contributing": [[0, "contributing"]], "Adding Issues": [[0, "adding-issues"]], "Bug Reports": [[0, "bug-reports"]], "Feature Requests": [[0, "feature-requests"]], "Developing Arkouda": [[0, "developing-arkouda"]], "Coding Conventions and Linting": [[0, "coding-conventions-and-linting"]], "Python3": [[0, "python3"]], "Chapel": [[0, "chapel"]], "Testing": [[0, "testing"], [1, "testing"]], "Running python tests": [[0, "running-python-tests"]], "Running chapel tests": [[0, "running-chapel-tests"]], "Writing Pull Requests": [[0, "writing-pull-requests"]], "Reviewing Pull Requests": [[0, "reviewing-pull-requests"]], "Core Development Team Only": [[0, "core-development-team-only"]], "Merging Pull Requests": [[0, "merging-pull-requests"]], "Release Process": [[0, "release-process"], [59, "release-process"]], "Environment Variables": [[1, "environment-variables"], [72, "environment-variables"]], "Running": [[1, "running"]], "Compilation / Makefile": [[1, "compilation-makefile"]], "Chapel Compiler Flags": [[1, "chapel-compiler-flags"]], "Dependency Paths": [[1, "dependency-paths"]], "Adding a Module from Outside the Arkouda src Directory": [[1, "adding-a-module-from-outside-the-arkouda-src-directory"]], "Python Client": [[1, "python-client"]], "arkouda.accessor": [[2, "module-arkouda.accessor"]], "Module Contents": [[2, "module-contents"], [3, "module-contents"], [5, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"]], "Classes": [[2, "classes"], [5, "classes"], [6, "classes"], [8, "classes"], [11, "classes"], [17, "classes"], [20, "classes"], [24, "classes"], [25, "classes"], [27, "classes"], [28, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [46, "classes"], [48, "classes"], [49, "classes"], [51, "classes"], [52, "classes"]], "Functions": [[2, "functions"], [3, "functions"], [4, "functions"], [5, "functions"], [6, "functions"], [7, "functions"], [10, "functions"], [11, "functions"], [13, "functions"], [14, "functions"], [15, "functions"], [16, "functions"], [17, "functions"], [18, "functions"], [19, "functions"], [21, "functions"], [23, "functions"], [26, "functions"], [27, "functions"], [28, "functions"], [29, "functions"], [30, "functions"], [32, "functions"], [34, "functions"], [35, "functions"], [36, "functions"], [37, "functions"], [38, "functions"], [41, "functions"], [42, "functions"], [43, "functions"], [44, "functions"], [45, "functions"], [47, "functions"], [48, "functions"], [50, "functions"], [52, "functions"], [53, "functions"]], "arkouda.akmath._math": [[3, "module-arkouda.akmath._math"]], "arkouda.akmath": [[4, "module-arkouda.akmath"]], "Package Contents": [[4, "package-contents"], [6, "package-contents"], [22, "package-contents"], [32, "package-contents"]], "arkouda.akstats._stats_py": [[5, "module-arkouda.akstats._stats_py"]], "arkouda.akstats": [[6, "module-arkouda.akstats"]], "arkouda.alignment": [[7, "module-arkouda.alignment"]], "arkouda.array_api._array_object": [[8, "module-arkouda.array_api._array_object"]], "arkouda.array_api._constants": [[9, "module-arkouda.array_api._constants"]], "arkouda.array_api._creation_functions": [[10, "module-arkouda.array_api._creation_functions"]], "arkouda.array_api._data_type_functions": [[11, "module-arkouda.array_api._data_type_functions"]], "arkouda.array_api._dtypes": [[12, "module-arkouda.array_api._dtypes"]], "arkouda.array_api._elementwise_functions": [[13, "module-arkouda.array_api._elementwise_functions"]], "arkouda.array_api._indexing_functions": [[14, "module-arkouda.array_api._indexing_functions"]], "arkouda.array_api._manipulation_functions": [[15, "module-arkouda.array_api._manipulation_functions"]], "arkouda.array_api._searching_functions": [[16, "module-arkouda.array_api._searching_functions"]], "arkouda.array_api._set_functions": [[17, "module-arkouda.array_api._set_functions"]], "arkouda.array_api._sorting_functions": [[18, "module-arkouda.array_api._sorting_functions"]], "arkouda.array_api._statistical_functions": [[19, "module-arkouda.array_api._statistical_functions"]], "arkouda.array_api._typing": [[20, "module-arkouda.array_api._typing"]], "Attributes": [[20, "attributes"], [29, "attributes"], [30, "attributes"], [32, "attributes"], [34, "attributes"], [47, "attributes"], [48, "attributes"]], "arkouda.array_api._utility_functions": [[21, "module-arkouda.array_api._utility_functions"]], "arkouda.array_api": [[22, "module-arkouda.array_api"]], "Submodules": [[22, "submodules"], [32, "submodules"]], "arkouda.array_api.linalg": [[23, "module-arkouda.array_api.linalg"]], "arkouda.array_view": [[24, "module-arkouda.array_view"]], "arkouda.categorical": [[25, "module-arkouda.categorical"]], "arkouda.client": [[26, "module-arkouda.client"]], "arkouda.client_dtypes": [[27, "module-arkouda.client_dtypes"]], "arkouda.dataframe": [[28, "module-arkouda.dataframe"]], "arkouda.dtypes": [[29, "module-arkouda.dtypes"]], "arkouda.groupbyclass": [[30, "module-arkouda.groupbyclass"]], "arkouda.history": [[31, "module-arkouda.history"]], "arkouda": [[32, "module-arkouda"]], "Subpackages": [[32, "subpackages"]], "Return Type": [[32, "return-type"], [32, "id557"], [32, "id725"], [44, "return-type"], [95, "return-type"]], "Input": [[32, "input"], [49, "input"]], "arkouda.index": [[33, "module-arkouda.index"]], "arkouda.infoclass": [[34, "module-arkouda.infoclass"]], "arkouda.io": [[35, "module-arkouda.io"]], "arkouda.io_util": [[36, "module-arkouda.io_util"]], "arkouda.join": [[37, "module-arkouda.join"]], "arkouda.logger": [[38, "module-arkouda.logger"]], "arkouda.match": [[39, "module-arkouda.match"]], "arkouda.matcher": [[40, "module-arkouda.matcher"]], "arkouda.numeric": [[41, "module-arkouda.numeric"]], "arkouda.pdarrayclass": [[42, "module-arkouda.pdarrayclass"]], "arkouda.pdarraycreation": [[43, "module-arkouda.pdarraycreation"]], "arkouda.pdarraysetops": [[44, "module-arkouda.pdarraysetops"]], "arkouda.plotting": [[45, "module-arkouda.plotting"]], "arkouda.row": [[46, "module-arkouda.row"]], "arkouda.security": [[47, "module-arkouda.security"]], "arkouda.segarray": [[48, "module-arkouda.segarray"]], "arkouda.series": [[49, "module-arkouda.series"]], "arkouda.sorting": [[50, "module-arkouda.sorting"]], "arkouda.strings": [[51, "module-arkouda.strings"]], "arkouda.timeclass": [[52, "module-arkouda.timeclass"]], "arkouda.util": [[53, "module-arkouda.util"]], "API Reference": [[54, "api-reference"], [64, "api-reference"], [65, "api-reference"], [66, "api-reference"], [67, "api-reference"]], "Adding Your First Feature": [[55, "adding-your-first-feature"]], "Adding Python Functionality (Client Interface)": [[55, "adding-python-functionality-client-interface"]], "Example": [[55, "example"], [55, "id1"]], "Adding Functionality to the Arkouda Server": [[55, "adding-functionality-to-the-arkouda-server"]], "PyTest Benchmarks": [[56, "pytest-benchmarks"]], "Running The Full Suite": [[56, "running-the-full-suite"]], "Benchmark Arguments": [[56, "benchmark-arguments"]], "Running Single Files or Tests": [[56, "running-single-files-or-tests"]], "Reading the JSON Output": [[56, "reading-the-json-output"]], "GASNet Development": [[57, "gasnet-development"]], "Environment Configuration": [[57, "environment-configuration"]], "Build Chapel with GASNet": [[57, "build-chapel-with-gasnet"]], "Build Arkouda": [[57, "build-arkouda"]], "Run Arkouda": [[57, "run-arkouda"]], "Reducing Memory Usage of Arkouda Builds": [[58, "reducing-memory-usage-of-arkouda-builds"]], "Step-by-step instructions": [[59, "step-by-step-instructions"]], "Generating release notes": [[59, "generating-release-notes"]], "Diff the git logs": [[59, "diff-the-git-logs"]], "Speeding up Arkouda Compilation": [[60, "speeding-up-arkouda-compilation"]], "Environment Variables to Always Set": [[60, "environment-variables-to-always-set"]], "Using the Modular Build System": [[60, "using-the-modular-build-system"]], "Tips for Reproducing User Bugs": [[61, "tips-for-reproducing-user-bugs"]], "Saving Full Builds": [[61, "saving-full-builds"]], "Reproducing User Bugs Efficiently": [[61, "reproducing-user-bugs-efficiently"]], "Developer Documentation": [[62, "developer-documentation"]], "Examples": [[63, "examples"]], "Arkouda Arrays": [[63, "arkouda-arrays"]], "pdarray Creation": [[63, "pdarray-creation"]], "Exporting pdarray Objects": [[63, "exporting-pdarray-objects"]], "pdarray Set operations": [[63, "pdarray-set-operations"]], "Arkouda DataFrames": [[63, "arkouda-dataframes"]], "Creating & Using a DataFrame": [[63, "creating-using-a-dataframe"]], "Importing Pandas DataFrame": [[63, "importing-pandas-dataframe"]], "Python Mapping": [[63, "python-mapping"]], "Basic Interaction": [[63, "basic-interaction"]], "Exporting to Pandas": [[63, "exporting-to-pandas"]], "GroupBy": [[63, "groupby"], [65, "groupby"], [65, "id5"], [88, "groupby"], [89, "groupby"]], "pdarrays": [[63, "pdarrays"]], "DataFrames": [[63, "dataframes"]], "CSV": [[64, "csv"]], "Support Arkouda Data Types": [[64, "support-arkouda-data-types"]], "File Formatting": [[64, "file-formatting"]], "Example Files": [[64, "example-files"]], "Arkouda Formatted File": [[64, "arkouda-formatted-file"]], "File Without Header": [[64, "file-without-header"]], "Data Formatting": [[64, "data-formatting"]], "pdarray": [[64, "pdarray"], [65, "pdarray"], [65, "id1"], [67, "pdarray"]], "Strings": [[64, "strings"], [65, "strings"], [65, "id2"], [67, "strings"]], "Index": [[64, "index"], [65, "index"], [67, "index"]], "DataFrame": [[64, "dataframe"], [65, "dataframe"], [67, "dataframe"]], "HDF5": [[65, "hdf5"]], "File Configuration": [[65, "file-configuration"]], "Supported Arkouda Data Types": [[65, "supported-arkouda-data-types"], [67, "supported-arkouda-data-types"]], "MetaData Attributes": [[65, "metadata-attributes"]], "Data Schema": [[65, "data-schema"]], "ArrayView": [[65, "arrayview"]], "SegArray": [[65, "segarray"], [65, "id4"], [67, "segarray"]], "Categorical": [[65, "categorical"], [65, "id3"], [67, "categorical"]], "Supported Write Modes": [[65, "supported-write-modes"], [67, "supported-write-modes"]], "Data Distribution": [[65, "data-distribution"]], "Legacy File Support": [[65, "legacy-file-support"]], "Import/Export": [[66, "import-export"], [81, "import-export"]], "Export": [[66, "export"]], "Import": [[66, "import"]], "Parquet": [[67, "parquet"]], "Compression": [[67, "compression"]], "File I/O": [[68, "file-i-o"]], "Supported File Formats:": [[68, null]], "Import/Export Support": [[68, "import-export-support"]], "General I/O API": [[68, "general-i-o-api"]], "Write": [[68, "write"]], "Read": [[68, "read"]], "ls Functionality": [[68, "ls-functionality"]], "Arkouda Documentation": [[69, "arkouda-documentation"]], "Quickstart": [[70, "quickstart"]], "Install Dependencies": [[70, "install-dependencies"]], "Install Arkouda": [[70, "install-arkouda"]], "Launching the Server": [[70, "launching-the-server"]], "Connect the Python 3 Client": [[70, "connect-the-python-3-client"]], "Shutdown/Disconnect": [[70, "shutdown-disconnect"]], "Using Arkouda": [[70, "using-arkouda"]], "Chapel API Reference": [[71, "chapel-api-reference"]], "Building the Server": [[72, "building-the-server"]], "Getting Started": [[72, "getting-started"]], "Dependency Configuration": [[72, "dependency-configuration"]], "Using Environment Installed Dependencies (Recommended)": [[72, "using-environment-installed-dependencies-recommended"]], "Installing Dependencies Manually": [[72, "installing-dependencies-manually"]], "Dependencies": [[72, "dependencies"]], "All Dependencies": [[72, "all-dependencies"]], "Individual Installs": [[72, "individual-installs"]], "Arrow Install Troubleshooting": [[72, "arrow-install-troubleshooting"]], "Distributable Package": [[72, "distributable-package"]], "Build the Server": [[72, "build-the-server"]], "Building the Arkouda Documentation": [[72, "building-the-arkouda-documentation"]], "Modular Building": [[72, "modular-building"]], "Linux": [[73, "linux"]], "Update Kernel": [[73, "update-kernel"]], "Clone Arkouda Repository": [[73, "clone-arkouda-repository"], [74, "clone-arkouda-repository"]], "Python Environment - Anaconda (Linux)": [[73, "python-environment-anaconda-linux"]], "Chapel Installation": [[73, "chapel-installation"]], "Install Chapel (Ubuntu)": [[73, "install-chapel-ubuntu"]], "Install Chapel (RHEL)": [[73, "install-chapel-rhel"]], "Next Steps": [[73, "next-steps"], [74, "next-steps"]], "MacOS": [[74, "macos"]], "Python Environment - Anaconda": [[74, "python-environment-anaconda"]], "Updating Environment": [[74, "updating-environment"]], "Anaconda": [[74, "anaconda"]], "Install Chapel": [[74, "install-chapel"]], "Build from Source (Recommended)": [[74, "build-from-source-recommended"]], "Homebrew": [[74, "homebrew"]], "Modular Server Builds": [[75, "modular-server-builds"]], "Specifying a custom configuration file": [[75, "specifying-a-custom-configuration-file"]], "Adding new modules into the build process": [[75, "adding-new-modules-into-the-build-process"]], "Saving modules used in an Arkouda server run": [[75, "saving-modules-used-in-an-arkouda-server-run"]], "Requirements": [[76, "requirements"], [78, "requirements"]], "Dependency List": [[76, "dependency-list"]], "Python Dependencies": [[76, "python-dependencies"]], "Developer Specific": [[76, "developer-specific"]], "Installing/Updating Python Dependencies": [[76, "installing-updating-python-dependencies"]], "Using Anaconda": [[76, "using-anaconda"]], "Using Pip": [[76, "using-pip"]], "Windows (WSL2)": [[77, "windows-wsl2"]], "Installation": [[78, "installation"]], "Overview": [[78, "overview"]], "Install Guides": [[78, "install-guides"]], "Performance Testing": [[79, "performance-testing"]], "Argsort": [[79, "argsort"]], "Positional Arguments": [[79, "positional-arguments"], [79, "positional-arguments"], [79, "positional-arguments"], [79, "positional-arguments"], [79, "positional-arguments"], [79, "positional-arguments"]], "Named Arguments": [[79, "named-arguments"], [79, "named-arguments"], [79, "named-arguments"], [79, "named-arguments"], [79, "named-arguments"], [79, "named-arguments"]], "Gather": [[79, "gather"]], "Reduce": [[79, "reduce"]], "Scan": [[79, "scan"]], "Scatter": [[79, "scatter"]], "Stream": [[79, "stream"]], "Usage Guide": [[80, "usage-guide"]], "Data I/O": [[81, "data-i-o"]], "Between client and server": [[81, "between-client-and-server"]], "Large Datasets": [[81, "large-datasets"]], "Supported File Formats": [[81, "supported-file-formats"]], "Data Preprocessing": [[81, "data-preprocessing"]], "Reading data from disk": [[81, "reading-data-from-disk"]], "Indexs in Arkouda": [[82, "indexs-in-arkouda"]], "Features": [[82, "features"], [88, "features"], [94, "features"]], "Change Dtype": [[82, "change-dtype"]], "ArgSort": [[82, "argsort"]], "Lookup": [[82, "lookup"], [94, "lookup"], [94, "id1"]], "Concat": [[82, "concat"]], "Sorting": [[83, "sorting"], [88, "sorting"], [94, "sorting"]], "Arithmetic and Numeric Operations": [[84, "arithmetic-and-numeric-operations"]], "Vector and Scalar Arithmetic": [[84, "vector-and-scalar-arithmetic"]], "Element-wise Functions": [[84, "element-wise-functions"]], "Scans": [[84, "scans"]], "Reductions": [[84, "reductions"]], "Where": [[84, "where"]], "ArrayView in Arkouda": [[85, "arrayview-in-arkouda"]], "Creation": [[85, "creation"]], "Indexing": [[85, "indexing"]], "Iteration": [[85, "iteration"], [86, "iteration"], [88, "iteration"], [92, "iteration"], [93, "iteration"], [97, "iteration"]], "Categoricals": [[86, "categoricals"]], "Construction": [[86, "construction"]], "Operations": [[86, "operations"], [97, "operations"]], "Creating Arrays": [[87, "creating-arrays"]], "Constant": [[87, "constant"]], "Regular": [[87, "regular"]], "Random": [[87, "random"]], "Concatenation": [[87, "concatenation"]], "DataFrames in Arkouda": [[88, "dataframes-in-arkouda"]], "Data Types": [[88, "data-types"]], "Drop": [[88, "drop"]], "Copy": [[88, "copy"]], "Filter": [[88, "filter"]], "Permutations": [[88, "permutations"]], "Tail/Head of Data": [[88, "tail-head-of-data"]], "Rename Columns": [[88, "rename-columns"]], "Append": [[88, "append"]], "Concatenate": [[88, "concatenate"]], "Reset Indexes": [[88, "reset-indexes"]], "Deduplication": [[88, "deduplication"], [93, "deduplication"]], "Summarizing Data": [[90, "summarizing-data"]], "Descriptive Statistics": [[90, "descriptive-statistics"]], "Histogram": [[90, "histogram"]], "Value Counts": [[90, "value-counts"], [94, "value-counts"]], "Indexing and Assignment": [[91, "indexing-and-assignment"]], "Integer": [[91, "integer"]], "Slice": [[91, "slice"]], "Gather/Scatter (pdarray)": [[91, "gather-scatter-pdarray"]], "Integer pdarray index": [[91, "integer-pdarray-index"]], "Logical indexing": [[91, "logical-indexing"]], "The pdarray class": [[92, "the-pdarray-class"]], "Data Type": [[92, "data-type"]], "Rank": [[92, "rank"]], "Name": [[92, "name"]], "Operators": [[92, "operators"]], "Type Casting": [[92, "type-casting"]], "Reshape": [[92, "reshape"]], "SegArrays in Arkouda": [[93, "segarrays-in-arkouda"]], "Performance": [[93, "performance"], [97, "performance"]], "Operation": [[93, "operation"]], "SegArray Specific Methods": [[93, "segarray-specific-methods"]], "Prefix & Suffix": [[93, "prefix-suffix"]], "NGrams": [[93, "ngrams"]], "Sub-array of Size": [[93, "sub-array-of-size"]], "Access/Set Specific Elements in Sub-Array": [[93, "access-set-specific-elements-in-sub-array"]], "Append & Prepend": [[93, "append-prepend"]], "SegArray SetOps": [[93, "segarray-setops"]], "Union": [[93, "union"]], "Intersect": [[93, "intersect"]], "Set Difference": [[93, "set-difference"]], "Symmetric Difference": [[93, "symmetric-difference"]], "Series in Arkouda": [[94, "series-in-arkouda"]], "Head/Tail": [[94, "head-tail"]], "Pandas Integration": [[94, "pandas-integration"]], "Array Set Operations": [[95, "array-set-operations"]], "Startup": [[96, "startup"]], "Launch arkouda server": [[96, "launch-arkouda-server"]], "Connect a Python 3 client": [[96, "connect-a-python-3-client"]], "Strings in Arkouda": [[97, "strings-in-arkouda"]], "I/O": [[97, "i-o"]], "String-Specific Methods": [[97, "string-specific-methods"]], "Substring search": [[97, "substring-search"]], "Splitting and joining": [[97, "splitting-and-joining"]], "Flattening": [[97, "flattening"]], "Regular Expressions": [[97, "regular-expressions"]], "Match Object": [[97, "match-object"]]}, "indexentries": {"cachedaccessor (class in arkouda.accessor)": [[2, "arkouda.accessor.CachedAccessor"]], "datetimeaccessor (class in arkouda.accessor)": [[2, "arkouda.accessor.DatetimeAccessor"]], "properties (class in arkouda.accessor)": [[2, "arkouda.accessor.Properties"]], "stringaccessor (class in arkouda.accessor)": [[2, "arkouda.accessor.StringAccessor"]], "arkouda.accessor": [[2, "module-arkouda.accessor"]], "date_operators() (in module arkouda.accessor)": [[2, "arkouda.accessor.date_operators"]], "module": [[2, "module-arkouda.accessor"], [3, "module-arkouda.akmath._math"], [4, "module-arkouda.akmath"], [5, "module-arkouda.akstats._stats_py"], [6, "module-arkouda.akstats"], [7, "module-arkouda.alignment"], [8, "module-arkouda.array_api._array_object"], [9, "module-arkouda.array_api._constants"], [10, "module-arkouda.array_api._creation_functions"], [11, "module-arkouda.array_api._data_type_functions"], [12, "module-arkouda.array_api._dtypes"], [13, "module-arkouda.array_api._elementwise_functions"], [14, "module-arkouda.array_api._indexing_functions"], [15, "module-arkouda.array_api._manipulation_functions"], [16, "module-arkouda.array_api._searching_functions"], [17, "module-arkouda.array_api._set_functions"], [18, "module-arkouda.array_api._sorting_functions"], [19, "module-arkouda.array_api._statistical_functions"], [20, "module-arkouda.array_api._typing"], [21, "module-arkouda.array_api._utility_functions"], [22, "module-arkouda.array_api"], [23, "module-arkouda.array_api.linalg"], [24, "module-arkouda.array_view"], [25, "module-arkouda.categorical"], [26, "module-arkouda.client"], [27, "module-arkouda.client_dtypes"], [28, "module-arkouda.dataframe"], [29, "module-arkouda.dtypes"], [30, "module-arkouda.groupbyclass"], [31, "module-arkouda.history"], [32, "module-arkouda"], [33, "module-arkouda.index"], [34, "module-arkouda.infoclass"], [35, "module-arkouda.io"], [36, "module-arkouda.io_util"], [37, "module-arkouda.join"], [38, "module-arkouda.logger"], [39, "module-arkouda.match"], [40, "module-arkouda.matcher"], [41, "module-arkouda.numeric"], [42, "module-arkouda.pdarrayclass"], [43, "module-arkouda.pdarraycreation"], [44, "module-arkouda.pdarraysetops"], [45, "module-arkouda.plotting"], [46, "module-arkouda.row"], [47, "module-arkouda.security"], [48, "module-arkouda.segarray"], [49, "module-arkouda.series"], [50, "module-arkouda.sorting"], [51, "module-arkouda.strings"], [52, "module-arkouda.timeclass"], [53, "module-arkouda.util"]], "string_operators() (in module arkouda.accessor)": [[2, "arkouda.accessor.string_operators"]], "arkouda.akmath._math": [[3, "module-arkouda.akmath._math"]], "xlogy() (in module arkouda.akmath._math)": [[3, "arkouda.akmath._math.xlogy"]], "arkouda.akmath": [[4, "module-arkouda.akmath"]], "xlogy() (in module arkouda.akmath)": [[4, "arkouda.akmath.xlogy"]], "power_divergenceresult (class in arkouda.akstats._stats_py)": [[5, "arkouda.akstats._stats_py.Power_divergenceResult"]], "arkouda.akstats._stats_py": [[5, "module-arkouda.akstats._stats_py"]], "chisquare() (in module arkouda.akstats._stats_py)": [[5, "arkouda.akstats._stats_py.chisquare"]], "power_divergence() (in module arkouda.akstats._stats_py)": [[5, "arkouda.akstats._stats_py.power_divergence"]], "pvalue (arkouda.akstats._stats_py.power_divergenceresult attribute)": [[5, "arkouda.akstats._stats_py.Power_divergenceResult.pvalue"]], "statistic (arkouda.akstats._stats_py.power_divergenceresult attribute)": [[5, "arkouda.akstats._stats_py.Power_divergenceResult.statistic"]], "power_divergenceresult (class in arkouda.akstats)": [[6, "arkouda.akstats.Power_divergenceResult"]], "arkouda.akstats": [[6, "module-arkouda.akstats"]], "chisquare() (in module arkouda.akstats)": [[6, "arkouda.akstats.chisquare"]], "power_divergence() (in module arkouda.akstats)": [[6, "arkouda.akstats.power_divergence"]], "pvalue (arkouda.akstats.power_divergenceresult attribute)": [[6, "arkouda.akstats.Power_divergenceResult.pvalue"]], "statistic (arkouda.akstats.power_divergenceresult attribute)": [[6, "arkouda.akstats.Power_divergenceResult.statistic"]], "nonuniqueerror": [[7, "arkouda.alignment.NonUniqueError"], [32, "arkouda.NonUniqueError"]], "align() (in module arkouda.alignment)": [[7, "arkouda.alignment.align"]], "arkouda.alignment": [[7, "module-arkouda.alignment"]], "find() (in module arkouda.alignment)": [[7, "arkouda.alignment.find"]], "in1d_intervals() (in module arkouda.alignment)": [[7, "arkouda.alignment.in1d_intervals"]], "interval_lookup() (in module arkouda.alignment)": [[7, "arkouda.alignment.interval_lookup"]], "is_cosorted() (in module arkouda.alignment)": [[7, "arkouda.alignment.is_cosorted"]], "left_align() (in module arkouda.alignment)": [[7, "arkouda.alignment.left_align"]], "lookup() (in module arkouda.alignment)": [[7, "arkouda.alignment.lookup"]], "right_align() (in module arkouda.alignment)": [[7, "arkouda.alignment.right_align"]], "search_intervals() (in module arkouda.alignment)": [[7, "arkouda.alignment.search_intervals"]], "unsqueeze() (in module arkouda.alignment)": [[7, "arkouda.alignment.unsqueeze"]], "zero_up() (in module arkouda.alignment)": [[7, "arkouda.alignment.zero_up"]], "array (class in arkouda.array_api._array_object)": [[8, "arkouda.array_api._array_object.Array"]], "t (arkouda.array_api._array_object.array property)": [[8, "arkouda.array_api._array_object.Array.T"]], "arkouda.array_api._array_object": [[8, "module-arkouda.array_api._array_object"]], "device (arkouda.array_api._array_object.array property)": [[8, "arkouda.array_api._array_object.Array.device"]], "dtype (arkouda.array_api._array_object.array property)": [[8, "arkouda.array_api._array_object.Array.dtype"]], "mt (arkouda.array_api._array_object.array property)": [[8, "arkouda.array_api._array_object.Array.mT"]], "ndim (arkouda.array_api._array_object.array property)": [[8, "arkouda.array_api._array_object.Array.ndim"]], "shape (arkouda.array_api._array_object.array property)": [[8, "arkouda.array_api._array_object.Array.shape"]], "size (arkouda.array_api._array_object.array property)": [[8, "arkouda.array_api._array_object.Array.size"]], "to_device() (arkouda.array_api._array_object.array method)": [[8, "arkouda.array_api._array_object.Array.to_device"]], "to_ndarray() (arkouda.array_api._array_object.array method)": [[8, "arkouda.array_api._array_object.Array.to_ndarray"]], "tolist() (arkouda.array_api._array_object.array method)": [[8, "arkouda.array_api._array_object.Array.tolist"]], "arkouda.array_api._constants": [[9, "module-arkouda.array_api._constants"]], "e (in module arkouda.array_api._constants)": [[9, "arkouda.array_api._constants.e"]], "inf (in module arkouda.array_api._constants)": [[9, "arkouda.array_api._constants.inf"]], "nan (in module arkouda.array_api._constants)": [[9, "arkouda.array_api._constants.nan"]], "pi (in module arkouda.array_api._constants)": [[9, "arkouda.array_api._constants.pi"]], "arange() (in module arkouda.array_api._creation_functions)": [[10, "arkouda.array_api._creation_functions.arange"]], "arkouda.array_api._creation_functions": [[10, "module-arkouda.array_api._creation_functions"]], "asarray() (in module arkouda.array_api._creation_functions)": [[10, "arkouda.array_api._creation_functions.asarray"]], "empty() (in module arkouda.array_api._creation_functions)": [[10, "arkouda.array_api._creation_functions.empty"]], "empty_like() (in module arkouda.array_api._creation_functions)": [[10, "arkouda.array_api._creation_functions.empty_like"]], "eye() (in module arkouda.array_api._creation_functions)": [[10, "arkouda.array_api._creation_functions.eye"]], "from_dlpack() (in module arkouda.array_api._creation_functions)": [[10, "arkouda.array_api._creation_functions.from_dlpack"]], "full() (in module arkouda.array_api._creation_functions)": [[10, "arkouda.array_api._creation_functions.full"]], "full_like() (in module arkouda.array_api._creation_functions)": [[10, "arkouda.array_api._creation_functions.full_like"]], "linspace() (in module arkouda.array_api._creation_functions)": [[10, "arkouda.array_api._creation_functions.linspace"]], "meshgrid() (in module arkouda.array_api._creation_functions)": [[10, "arkouda.array_api._creation_functions.meshgrid"]], "ones() (in module arkouda.array_api._creation_functions)": [[10, "arkouda.array_api._creation_functions.ones"]], "ones_like() (in module arkouda.array_api._creation_functions)": [[10, "arkouda.array_api._creation_functions.ones_like"]], "tril() (in module arkouda.array_api._creation_functions)": [[10, "arkouda.array_api._creation_functions.tril"]], "triu() (in module arkouda.array_api._creation_functions)": [[10, "arkouda.array_api._creation_functions.triu"]], "zeros() (in module arkouda.array_api._creation_functions)": [[10, "arkouda.array_api._creation_functions.zeros"]], "zeros_like() (in module arkouda.array_api._creation_functions)": [[10, "arkouda.array_api._creation_functions.zeros_like"]], "arkouda.array_api._data_type_functions": [[11, "module-arkouda.array_api._data_type_functions"]], "astype() (in module arkouda.array_api._data_type_functions)": [[11, "arkouda.array_api._data_type_functions.astype"]], "bits (arkouda.array_api._data_type_functions.finfo_object attribute)": [[11, "arkouda.array_api._data_type_functions.finfo_object.bits"]], "bits (arkouda.array_api._data_type_functions.iinfo_object attribute)": [[11, "arkouda.array_api._data_type_functions.iinfo_object.bits"]], "can_cast() (in module arkouda.array_api._data_type_functions)": [[11, "arkouda.array_api._data_type_functions.can_cast"]], "dtype (arkouda.array_api._data_type_functions.finfo_object attribute)": [[11, "arkouda.array_api._data_type_functions.finfo_object.dtype"]], "dtype (arkouda.array_api._data_type_functions.iinfo_object attribute)": [[11, "arkouda.array_api._data_type_functions.iinfo_object.dtype"]], "eps (arkouda.array_api._data_type_functions.finfo_object attribute)": [[11, "arkouda.array_api._data_type_functions.finfo_object.eps"]], "finfo_object (class in arkouda.array_api._data_type_functions)": [[11, "arkouda.array_api._data_type_functions.finfo_object"]], "iinfo_object (class in arkouda.array_api._data_type_functions)": [[11, "arkouda.array_api._data_type_functions.iinfo_object"]], "isdtype() (in module arkouda.array_api._data_type_functions)": [[11, "arkouda.array_api._data_type_functions.isdtype"]], "max (arkouda.array_api._data_type_functions.finfo_object attribute)": [[11, "arkouda.array_api._data_type_functions.finfo_object.max"]], "max (arkouda.array_api._data_type_functions.iinfo_object attribute)": [[11, "arkouda.array_api._data_type_functions.iinfo_object.max"]], "min (arkouda.array_api._data_type_functions.finfo_object attribute)": [[11, "arkouda.array_api._data_type_functions.finfo_object.min"]], "min (arkouda.array_api._data_type_functions.iinfo_object attribute)": [[11, "arkouda.array_api._data_type_functions.iinfo_object.min"]], "result_type() (in module arkouda.array_api._data_type_functions)": [[11, "arkouda.array_api._data_type_functions.result_type"]], "smallest_normal (arkouda.array_api._data_type_functions.finfo_object attribute)": [[11, "arkouda.array_api._data_type_functions.finfo_object.smallest_normal"]], "arkouda.array_api._dtypes": [[12, "module-arkouda.array_api._dtypes"]], "bool (in module arkouda.array_api._dtypes)": [[12, "arkouda.array_api._dtypes.bool"]], "complex128 (in module arkouda.array_api._dtypes)": [[12, "arkouda.array_api._dtypes.complex128"]], "complex64 (in module arkouda.array_api._dtypes)": [[12, "arkouda.array_api._dtypes.complex64"]], "float32 (in module arkouda.array_api._dtypes)": [[12, "arkouda.array_api._dtypes.float32"]], "float64 (in module arkouda.array_api._dtypes)": [[12, "arkouda.array_api._dtypes.float64"]], "int16 (in module arkouda.array_api._dtypes)": [[12, "arkouda.array_api._dtypes.int16"]], "int32 (in module arkouda.array_api._dtypes)": [[12, "arkouda.array_api._dtypes.int32"]], "int64 (in module arkouda.array_api._dtypes)": [[12, "arkouda.array_api._dtypes.int64"]], "int8 (in module arkouda.array_api._dtypes)": [[12, "arkouda.array_api._dtypes.int8"]], "uint16 (in module arkouda.array_api._dtypes)": [[12, "arkouda.array_api._dtypes.uint16"]], "uint32 (in module arkouda.array_api._dtypes)": [[12, "arkouda.array_api._dtypes.uint32"]], "uint64 (in module arkouda.array_api._dtypes)": [[12, "arkouda.array_api._dtypes.uint64"]], "uint8 (in module arkouda.array_api._dtypes)": [[12, "arkouda.array_api._dtypes.uint8"]], "abs() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.abs"]], "acos() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.acos"]], "acosh() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.acosh"]], "add() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.add"]], "arkouda.array_api._elementwise_functions": [[13, "module-arkouda.array_api._elementwise_functions"]], "asin() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.asin"]], "asinh() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.asinh"]], "atan() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.atan"]], "atan2() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.atan2"]], "atanh() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.atanh"]], "bitwise_and() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.bitwise_and"]], "bitwise_invert() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.bitwise_invert"]], "bitwise_left_shift() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.bitwise_left_shift"]], "bitwise_or() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.bitwise_or"]], "bitwise_right_shift() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.bitwise_right_shift"]], "bitwise_xor() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.bitwise_xor"]], "ceil() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.ceil"]], "conj() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.conj"]], "cos() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.cos"]], "cosh() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.cosh"]], "divide() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.divide"]], "equal() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.equal"]], "exp() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.exp"]], "expm1() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.expm1"]], "floor() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.floor"]], "floor_divide() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.floor_divide"]], "greater() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.greater"]], "greater_equal() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.greater_equal"]], "imag() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.imag"]], "isfinite() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.isfinite"]], "isinf() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.isinf"]], "isnan() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.isnan"]], "less() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.less"]], "less_equal() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.less_equal"]], "log() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.log"]], "log10() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.log10"]], "log1p() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.log1p"]], "log2() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.log2"]], "logaddexp() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.logaddexp"]], "logical_and() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.logical_and"]], "logical_not() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.logical_not"]], "logical_or() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.logical_or"]], "logical_xor() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.logical_xor"]], "multiply() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.multiply"]], "negative() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.negative"]], "not_equal() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.not_equal"]], "positive() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.positive"]], "pow() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.pow"]], "real() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.real"]], "remainder() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.remainder"]], "round() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.round"]], "sign() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.sign"]], "sin() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.sin"]], "sinh() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.sinh"]], "sqrt() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.sqrt"]], "square() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.square"]], "subtract() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.subtract"]], "tan() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.tan"]], "tanh() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.tanh"]], "trunc() (in module arkouda.array_api._elementwise_functions)": [[13, "arkouda.array_api._elementwise_functions.trunc"]], "arkouda.array_api._indexing_functions": [[14, "module-arkouda.array_api._indexing_functions"]], "take() (in module arkouda.array_api._indexing_functions)": [[14, "arkouda.array_api._indexing_functions.take"]], "arkouda.array_api._manipulation_functions": [[15, "module-arkouda.array_api._manipulation_functions"]], "broadcast_arrays() (in module arkouda.array_api._manipulation_functions)": [[15, "arkouda.array_api._manipulation_functions.broadcast_arrays"]], "broadcast_to() (in module arkouda.array_api._manipulation_functions)": [[15, "arkouda.array_api._manipulation_functions.broadcast_to"]], "concat() (in module arkouda.array_api._manipulation_functions)": [[15, "arkouda.array_api._manipulation_functions.concat"]], "expand_dims() (in module arkouda.array_api._manipulation_functions)": [[15, "arkouda.array_api._manipulation_functions.expand_dims"]], "flip() (in module arkouda.array_api._manipulation_functions)": [[15, "arkouda.array_api._manipulation_functions.flip"]], "permute_dims() (in module arkouda.array_api._manipulation_functions)": [[15, "arkouda.array_api._manipulation_functions.permute_dims"]], "reshape() (in module arkouda.array_api._manipulation_functions)": [[15, "arkouda.array_api._manipulation_functions.reshape"]], "roll() (in module arkouda.array_api._manipulation_functions)": [[15, "arkouda.array_api._manipulation_functions.roll"]], "squeeze() (in module arkouda.array_api._manipulation_functions)": [[15, "arkouda.array_api._manipulation_functions.squeeze"]], "stack() (in module arkouda.array_api._manipulation_functions)": [[15, "arkouda.array_api._manipulation_functions.stack"]], "argmax() (in module arkouda.array_api._searching_functions)": [[16, "arkouda.array_api._searching_functions.argmax"]], "argmin() (in module arkouda.array_api._searching_functions)": [[16, "arkouda.array_api._searching_functions.argmin"]], "arkouda.array_api._searching_functions": [[16, "module-arkouda.array_api._searching_functions"]], "nonzero() (in module arkouda.array_api._searching_functions)": [[16, "arkouda.array_api._searching_functions.nonzero"]], "where() (in module arkouda.array_api._searching_functions)": [[16, "arkouda.array_api._searching_functions.where"]], "uniqueallresult (class in arkouda.array_api._set_functions)": [[17, "arkouda.array_api._set_functions.UniqueAllResult"]], "uniquecountsresult (class in arkouda.array_api._set_functions)": [[17, "arkouda.array_api._set_functions.UniqueCountsResult"]], "uniqueinverseresult (class in arkouda.array_api._set_functions)": [[17, "arkouda.array_api._set_functions.UniqueInverseResult"]], "arkouda.array_api._set_functions": [[17, "module-arkouda.array_api._set_functions"]], "counts (arkouda.array_api._set_functions.uniqueallresult attribute)": [[17, "arkouda.array_api._set_functions.UniqueAllResult.counts"]], "counts (arkouda.array_api._set_functions.uniquecountsresult attribute)": [[17, "arkouda.array_api._set_functions.UniqueCountsResult.counts"]], "indices (arkouda.array_api._set_functions.uniqueallresult attribute)": [[17, "arkouda.array_api._set_functions.UniqueAllResult.indices"]], "inverse_indices (arkouda.array_api._set_functions.uniqueallresult attribute)": [[17, "arkouda.array_api._set_functions.UniqueAllResult.inverse_indices"]], "inverse_indices (arkouda.array_api._set_functions.uniqueinverseresult attribute)": [[17, "arkouda.array_api._set_functions.UniqueInverseResult.inverse_indices"]], "unique_all() (in module arkouda.array_api._set_functions)": [[17, "arkouda.array_api._set_functions.unique_all"]], "unique_counts() (in module arkouda.array_api._set_functions)": [[17, "arkouda.array_api._set_functions.unique_counts"]], "unique_inverse() (in module arkouda.array_api._set_functions)": [[17, "arkouda.array_api._set_functions.unique_inverse"]], "unique_values() (in module arkouda.array_api._set_functions)": [[17, "arkouda.array_api._set_functions.unique_values"]], "values (arkouda.array_api._set_functions.uniqueallresult attribute)": [[17, "arkouda.array_api._set_functions.UniqueAllResult.values"]], "values (arkouda.array_api._set_functions.uniquecountsresult attribute)": [[17, "arkouda.array_api._set_functions.UniqueCountsResult.values"]], "values (arkouda.array_api._set_functions.uniqueinverseresult attribute)": [[17, "arkouda.array_api._set_functions.UniqueInverseResult.values"]], "argsort() (in module arkouda.array_api._sorting_functions)": [[18, "arkouda.array_api._sorting_functions.argsort"]], "arkouda.array_api._sorting_functions": [[18, "module-arkouda.array_api._sorting_functions"]], "sort() (in module arkouda.array_api._sorting_functions)": [[18, "arkouda.array_api._sorting_functions.sort"]], "arkouda.array_api._statistical_functions": [[19, "module-arkouda.array_api._statistical_functions"]], "max() (in module arkouda.array_api._statistical_functions)": [[19, "arkouda.array_api._statistical_functions.max"]], "mean() (in module arkouda.array_api._statistical_functions)": [[19, "arkouda.array_api._statistical_functions.mean"]], "min() (in module arkouda.array_api._statistical_functions)": [[19, "arkouda.array_api._statistical_functions.min"]], "prod() (in module arkouda.array_api._statistical_functions)": [[19, "arkouda.array_api._statistical_functions.prod"]], "std() (in module arkouda.array_api._statistical_functions)": [[19, "arkouda.array_api._statistical_functions.std"]], "sum() (in module arkouda.array_api._statistical_functions)": [[19, "arkouda.array_api._statistical_functions.sum"]], "var() (in module arkouda.array_api._statistical_functions)": [[19, "arkouda.array_api._statistical_functions.var"]], "array (class in arkouda.array_api._typing)": [[20, "arkouda.array_api._typing.Array"]], "device (in module arkouda.array_api._typing)": [[20, "arkouda.array_api._typing.Device"]], "dtype (in module arkouda.array_api._typing)": [[20, "arkouda.array_api._typing.Dtype"]], "pycapsule (in module arkouda.array_api._typing)": [[20, "arkouda.array_api._typing.PyCapsule"]], "supportsbufferprotocol (in module arkouda.array_api._typing)": [[20, "arkouda.array_api._typing.SupportsBufferProtocol"]], "supportsdlpack (class in arkouda.array_api._typing)": [[20, "arkouda.array_api._typing.SupportsDLPack"]], "t (arkouda.array_api._typing.array property)": [[20, "arkouda.array_api._typing.Array.T"]], "arkouda.array_api._typing": [[20, "module-arkouda.array_api._typing"]], "device (arkouda.array_api._typing.array property)": [[20, "arkouda.array_api._typing.Array.device"]], "dtype (arkouda.array_api._typing.array property)": [[20, "arkouda.array_api._typing.Array.dtype"]], "mt (arkouda.array_api._typing.array property)": [[20, "arkouda.array_api._typing.Array.mT"]], "ndim (arkouda.array_api._typing.array property)": [[20, "arkouda.array_api._typing.Array.ndim"]], "shape (arkouda.array_api._typing.array property)": [[20, "arkouda.array_api._typing.Array.shape"]], "size (arkouda.array_api._typing.array property)": [[20, "arkouda.array_api._typing.Array.size"]], "to_device() (arkouda.array_api._typing.array method)": [[20, "arkouda.array_api._typing.Array.to_device"]], "to_ndarray() (arkouda.array_api._typing.array method)": [[20, "arkouda.array_api._typing.Array.to_ndarray"]], "tolist() (arkouda.array_api._typing.array method)": [[20, "arkouda.array_api._typing.Array.tolist"]], "all() (in module arkouda.array_api._utility_functions)": [[21, "arkouda.array_api._utility_functions.all"]], "any() (in module arkouda.array_api._utility_functions)": [[21, "arkouda.array_api._utility_functions.any"]], "arkouda.array_api._utility_functions": [[21, "module-arkouda.array_api._utility_functions"]], "arkouda.array_api": [[22, "module-arkouda.array_api"]], "arkouda.array_api.linalg": [[23, "module-arkouda.array_api.linalg"]], "matmul() (in module arkouda.array_api.linalg)": [[23, "arkouda.array_api.linalg.matmul"]], "matrix_transpose() (in module arkouda.array_api.linalg)": [[23, "arkouda.array_api.linalg.matrix_transpose"]], "tensordot() (in module arkouda.array_api.linalg)": [[23, "arkouda.array_api.linalg.tensordot"]], "vecdot() (in module arkouda.array_api.linalg)": [[23, "arkouda.array_api.linalg.vecdot"]], "arrayview (class in arkouda.array_view)": [[24, "arkouda.array_view.ArrayView"]], "arkouda.array_view": [[24, "module-arkouda.array_view"]], "base (arkouda.array_view.arrayview attribute)": [[24, "arkouda.array_view.ArrayView.base"]], "dtype (arkouda.array_view.arrayview attribute)": [[24, "arkouda.array_view.ArrayView.dtype"]], "itemsize (arkouda.array_view.arrayview attribute)": [[24, "arkouda.array_view.ArrayView.itemsize"]], "ndim (arkouda.array_view.arrayview attribute)": [[24, "arkouda.array_view.ArrayView.ndim"]], "objtype (arkouda.array_view.arrayview attribute)": [[24, "arkouda.array_view.ArrayView.objType"]], "order (arkouda.array_view.arrayview attribute)": [[24, "arkouda.array_view.ArrayView.order"]], "shape (arkouda.array_view.arrayview attribute)": [[24, "arkouda.array_view.ArrayView.shape"]], "size (arkouda.array_view.arrayview attribute)": [[24, "arkouda.array_view.ArrayView.size"]], "to_hdf() (arkouda.array_view.arrayview method)": [[24, "arkouda.array_view.ArrayView.to_hdf"]], "to_list() (arkouda.array_view.arrayview method)": [[24, "arkouda.array_view.ArrayView.to_list"]], "to_ndarray() (arkouda.array_view.arrayview method)": [[24, "arkouda.array_view.ArrayView.to_ndarray"]], "update_hdf() (arkouda.array_view.arrayview method)": [[24, "arkouda.array_view.ArrayView.update_hdf"]], "binops (arkouda.categorical.categorical attribute)": [[25, "arkouda.categorical.Categorical.BinOps"]], "categorical (class in arkouda.categorical)": [[25, "arkouda.categorical.Categorical"]], "registerablepieces (arkouda.categorical.categorical attribute)": [[25, "arkouda.categorical.Categorical.RegisterablePieces"]], "requiredpieces (arkouda.categorical.categorical attribute)": [[25, "arkouda.categorical.Categorical.RequiredPieces"]], "argsort() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.argsort"]], "arkouda.categorical": [[25, "module-arkouda.categorical"]], "attach() (arkouda.categorical.categorical static method)": [[25, "arkouda.categorical.Categorical.attach"]], "categories (arkouda.categorical.categorical attribute)": [[25, "arkouda.categorical.Categorical.categories"]], "codes (arkouda.categorical.categorical attribute)": [[25, "arkouda.categorical.Categorical.codes"]], "concatenate() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.concatenate"]], "contains() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.contains"]], "dtype (arkouda.categorical.categorical attribute)": [[25, "arkouda.categorical.Categorical.dtype"]], "endswith() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.endswith"]], "from_codes() (arkouda.categorical.categorical class method)": [[25, "arkouda.categorical.Categorical.from_codes"]], "from_return_msg() (arkouda.categorical.categorical class method)": [[25, "arkouda.categorical.Categorical.from_return_msg"]], "group() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.group"]], "hash() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.hash"]], "in1d() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.in1d"]], "info() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.info"]], "is_registered() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.is_registered"]], "isna() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.isna"]], "ndim (arkouda.categorical.categorical attribute)": [[25, "arkouda.categorical.Categorical.ndim"]], "nlevels (arkouda.categorical.categorical attribute)": [[25, "arkouda.categorical.Categorical.nlevels"]], "objtype (arkouda.categorical.categorical attribute)": [[25, "arkouda.categorical.Categorical.objType"]], "parse_hdf_categoricals() (arkouda.categorical.categorical static method)": [[25, "arkouda.categorical.Categorical.parse_hdf_categoricals"]], "permutation (arkouda.categorical.categorical attribute)": [[25, "arkouda.categorical.Categorical.permutation"], [25, "id0"]], "pretty_print_info() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.pretty_print_info"]], "register() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.register"]], "reset_categories() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.reset_categories"]], "save() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.save"]], "segments (arkouda.categorical.categorical attribute)": [[25, "arkouda.categorical.Categorical.segments"], [25, "id1"]], "set_categories() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.set_categories"]], "shape (arkouda.categorical.categorical attribute)": [[25, "arkouda.categorical.Categorical.shape"]], "size (arkouda.categorical.categorical attribute)": [[25, "arkouda.categorical.Categorical.size"]], "sort() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.sort"]], "standardize_categories() (arkouda.categorical.categorical class method)": [[25, "arkouda.categorical.Categorical.standardize_categories"]], "startswith() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.startswith"]], "to_hdf() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.to_hdf"]], "to_list() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.to_list"]], "to_ndarray() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.to_ndarray"]], "to_parquet() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.to_parquet"]], "transfer() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.transfer"]], "unique() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.unique"]], "unregister() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.unregister"]], "unregister_categorical_by_name() (arkouda.categorical.categorical static method)": [[25, "arkouda.categorical.Categorical.unregister_categorical_by_name"]], "update_hdf() (arkouda.categorical.categorical method)": [[25, "arkouda.categorical.Categorical.update_hdf"]], "arkouda.client": [[26, "module-arkouda.client"]], "connect() (in module arkouda.client)": [[26, "arkouda.client.connect"]], "disconnect() (in module arkouda.client)": [[26, "arkouda.client.disconnect"]], "generate_history() (in module arkouda.client)": [[26, "arkouda.client.generate_history"]], "get_config() (in module arkouda.client)": [[26, "arkouda.client.get_config"]], "get_mem_avail() (in module arkouda.client)": [[26, "arkouda.client.get_mem_avail"]], "get_mem_status() (in module arkouda.client)": [[26, "arkouda.client.get_mem_status"]], "get_mem_used() (in module arkouda.client)": [[26, "arkouda.client.get_mem_used"]], "get_server_commands() (in module arkouda.client)": [[26, "arkouda.client.get_server_commands"]], "print_server_commands() (in module arkouda.client)": [[26, "arkouda.client.print_server_commands"]], "ruok() (in module arkouda.client)": [[26, "arkouda.client.ruok"]], "shutdown() (in module arkouda.client)": [[26, "arkouda.client.shutdown"]], "bitvector (class in arkouda.client_dtypes)": [[27, "arkouda.client_dtypes.BitVector"]], "bitvectorizer() (in module arkouda.client_dtypes)": [[27, "arkouda.client_dtypes.BitVectorizer"]], "fields (class in arkouda.client_dtypes)": [[27, "arkouda.client_dtypes.Fields"]], "ipv4 (class in arkouda.client_dtypes)": [[27, "arkouda.client_dtypes.IPv4"]], "arkouda.client_dtypes": [[27, "module-arkouda.client_dtypes"]], "conserves (arkouda.client_dtypes.bitvector attribute)": [[27, "arkouda.client_dtypes.BitVector.conserves"]], "export_uint() (arkouda.client_dtypes.ipv4 method)": [[27, "arkouda.client_dtypes.IPv4.export_uint"]], "format() (arkouda.client_dtypes.bitvector method)": [[27, "arkouda.client_dtypes.BitVector.format"]], "format() (arkouda.client_dtypes.fields method)": [[27, "arkouda.client_dtypes.Fields.format"]], "format() (arkouda.client_dtypes.ipv4 method)": [[27, "arkouda.client_dtypes.IPv4.format"]], "from_return_msg() (arkouda.client_dtypes.bitvector class method)": [[27, "arkouda.client_dtypes.BitVector.from_return_msg"]], "ip_address() (in module arkouda.client_dtypes)": [[27, "arkouda.client_dtypes.ip_address"]], "is_ipv4() (in module arkouda.client_dtypes)": [[27, "arkouda.client_dtypes.is_ipv4"]], "is_ipv6() (in module arkouda.client_dtypes)": [[27, "arkouda.client_dtypes.is_ipv6"]], "normalize() (arkouda.client_dtypes.ipv4 method)": [[27, "arkouda.client_dtypes.IPv4.normalize"]], "opeq() (arkouda.client_dtypes.bitvector method)": [[27, "arkouda.client_dtypes.BitVector.opeq"]], "opeq() (arkouda.client_dtypes.fields method)": [[27, "arkouda.client_dtypes.Fields.opeq"]], "opeq() (arkouda.client_dtypes.ipv4 method)": [[27, "arkouda.client_dtypes.IPv4.opeq"]], "register() (arkouda.client_dtypes.bitvector method)": [[27, "arkouda.client_dtypes.BitVector.register"]], "register() (arkouda.client_dtypes.ipv4 method)": [[27, "arkouda.client_dtypes.IPv4.register"]], "special_objtype (arkouda.client_dtypes.bitvector attribute)": [[27, "arkouda.client_dtypes.BitVector.special_objType"]], "special_objtype (arkouda.client_dtypes.ipv4 attribute)": [[27, "arkouda.client_dtypes.IPv4.special_objType"]], "to_hdf() (arkouda.client_dtypes.ipv4 method)": [[27, "arkouda.client_dtypes.IPv4.to_hdf"]], "to_list() (arkouda.client_dtypes.bitvector method)": [[27, "arkouda.client_dtypes.BitVector.to_list"]], "to_list() (arkouda.client_dtypes.ipv4 method)": [[27, "arkouda.client_dtypes.IPv4.to_list"]], "to_ndarray() (arkouda.client_dtypes.bitvector method)": [[27, "arkouda.client_dtypes.BitVector.to_ndarray"]], "to_ndarray() (arkouda.client_dtypes.ipv4 method)": [[27, "arkouda.client_dtypes.IPv4.to_ndarray"]], "update_hdf() (arkouda.client_dtypes.ipv4 method)": [[27, "arkouda.client_dtypes.IPv4.update_hdf"]], "column_classes (arkouda.dataframe.dataframe attribute)": [[28, "arkouda.dataframe.DataFrame.COLUMN_CLASSES"]], "dataframe (class in arkouda.dataframe)": [[28, "arkouda.dataframe.DataFrame"]], "groupby() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.GroupBy"], [28, "arkouda.dataframe.DataFrame.groupby"]], "append() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.append"]], "apply_permutation() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.apply_permutation"]], "argsort() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.argsort"]], "arkouda.dataframe": [[28, "module-arkouda.dataframe"]], "attach() (arkouda.dataframe.dataframe static method)": [[28, "arkouda.dataframe.DataFrame.attach"]], "coargsort() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.coargsort"]], "columns (arkouda.dataframe.dataframe property)": [[28, "arkouda.dataframe.DataFrame.columns"]], "concat() (arkouda.dataframe.dataframe class method)": [[28, "arkouda.dataframe.DataFrame.concat"]], "copy() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.copy"]], "corr() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.corr"]], "drop() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.drop"]], "drop_duplicates() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.drop_duplicates"]], "dtypes (arkouda.dataframe.dataframe property)": [[28, "arkouda.dataframe.DataFrame.dtypes"]], "empty (arkouda.dataframe.dataframe property)": [[28, "arkouda.dataframe.DataFrame.empty"]], "filter_by_range() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.filter_by_range"]], "from_pandas() (arkouda.dataframe.dataframe class method)": [[28, "arkouda.dataframe.DataFrame.from_pandas"]], "from_return_msg() (arkouda.dataframe.dataframe class method)": [[28, "arkouda.dataframe.DataFrame.from_return_msg"]], "head() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.head"]], "index (arkouda.dataframe.dataframe property)": [[28, "arkouda.dataframe.DataFrame.index"]], "info (arkouda.dataframe.dataframe property)": [[28, "arkouda.dataframe.DataFrame.info"]], "intersect() (in module arkouda.dataframe)": [[28, "arkouda.dataframe.intersect"]], "intx() (in module arkouda.dataframe)": [[28, "arkouda.dataframe.intx"]], "invert_permutation() (in module arkouda.dataframe)": [[28, "arkouda.dataframe.invert_permutation"]], "is_registered() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.is_registered"]], "isin() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.isin"]], "load() (arkouda.dataframe.dataframe class method)": [[28, "arkouda.dataframe.DataFrame.load"]], "memory_usage() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.memory_usage"]], "merge() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.merge"]], "merge() (in module arkouda.dataframe)": [[28, "arkouda.dataframe.merge"]], "objtype (arkouda.dataframe.dataframe attribute)": [[28, "arkouda.dataframe.DataFrame.objType"]], "read_csv() (arkouda.dataframe.dataframe class method)": [[28, "arkouda.dataframe.DataFrame.read_csv"]], "register() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.register"]], "rename() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.rename"]], "reset_index() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.reset_index"]], "sample() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.sample"]], "save() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.save"]], "shape (arkouda.dataframe.dataframe property)": [[28, "arkouda.dataframe.DataFrame.shape"]], "size (arkouda.dataframe.dataframe property)": [[28, "arkouda.dataframe.DataFrame.size"]], "sort_index() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.sort_index"]], "sort_values() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.sort_values"]], "sorted() (in module arkouda.dataframe)": [[28, "arkouda.dataframe.sorted"]], "tail() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.tail"]], "to_csv() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.to_csv"]], "to_hdf() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.to_hdf"]], "to_pandas() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.to_pandas"]], "to_parquet() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.to_parquet"]], "transfer() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.transfer"]], "unregister() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.unregister"]], "unregister_dataframe_by_name() (arkouda.dataframe.dataframe static method)": [[28, "arkouda.dataframe.DataFrame.unregister_dataframe_by_name"]], "update_hdf() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.update_hdf"]], "update_size() (arkouda.dataframe.dataframe method)": [[28, "arkouda.dataframe.DataFrame.update_size"]], "arkouda_supported_dtypes (in module arkouda.dtypes)": [[29, "arkouda.dtypes.ARKOUDA_SUPPORTED_DTYPES"]], "dtypeobjects (in module arkouda.dtypes)": [[29, "arkouda.dtypes.DTypeObjects"]], "dtypes (in module arkouda.dtypes)": [[29, "arkouda.dtypes.DTypes"]], "scalardtypes (in module arkouda.dtypes)": [[29, "arkouda.dtypes.ScalarDTypes"]], "all_scalars (in module arkouda.dtypes)": [[29, "arkouda.dtypes.all_scalars"]], "arkouda.dtypes": [[29, "module-arkouda.dtypes"]], "bigint (in module arkouda.dtypes)": [[29, "arkouda.dtypes.bigint"]], "bittype (in module arkouda.dtypes)": [[29, "arkouda.dtypes.bitType"]], "bool (in module arkouda.dtypes)": [[29, "arkouda.dtypes.bool"]], "bool_scalars (in module arkouda.dtypes)": [[29, "arkouda.dtypes.bool_scalars"]], "check_np_dtype() (in module arkouda.dtypes)": [[29, "arkouda.dtypes.check_np_dtype"]], "complex128 (in module arkouda.dtypes)": [[29, "arkouda.dtypes.complex128"]], "complex64 (in module arkouda.dtypes)": [[29, "arkouda.dtypes.complex64"]], "dtype() (in module arkouda.dtypes)": [[29, "arkouda.dtypes.dtype"]], "float32 (in module arkouda.dtypes)": [[29, "arkouda.dtypes.float32"]], "float64 (in module arkouda.dtypes)": [[29, "arkouda.dtypes.float64"]], "float_scalars (in module arkouda.dtypes)": [[29, "arkouda.dtypes.float_scalars"]], "get_byteorder() (in module arkouda.dtypes)": [[29, "arkouda.dtypes.get_byteorder"]], "get_server_byteorder() (in module arkouda.dtypes)": [[29, "arkouda.dtypes.get_server_byteorder"]], "int16 (in module arkouda.dtypes)": [[29, "arkouda.dtypes.int16"]], "int32 (in module arkouda.dtypes)": [[29, "arkouda.dtypes.int32"]], "int64 (in module arkouda.dtypes)": [[29, "arkouda.dtypes.int64"]], "int8 (in module arkouda.dtypes)": [[29, "arkouda.dtypes.int8"]], "inttypes (in module arkouda.dtypes)": [[29, "arkouda.dtypes.intTypes"]], "int_scalars (in module arkouda.dtypes)": [[29, "arkouda.dtypes.int_scalars"]], "issupportednumber() (in module arkouda.dtypes)": [[29, "arkouda.dtypes.isSupportedNumber"]], "numeric_scalars (in module arkouda.dtypes)": [[29, "arkouda.dtypes.numeric_scalars"]], "numpy_scalars (in module arkouda.dtypes)": [[29, "arkouda.dtypes.numpy_scalars"]], "resolve_scalar_dtype() (in module arkouda.dtypes)": [[29, "arkouda.dtypes.resolve_scalar_dtype"]], "str_ (in module arkouda.dtypes)": [[29, "arkouda.dtypes.str_"]], "str_scalars (in module arkouda.dtypes)": [[29, "arkouda.dtypes.str_scalars"]], "translate_np_dtype() (in module arkouda.dtypes)": [[29, "arkouda.dtypes.translate_np_dtype"]], "uint16 (in module arkouda.dtypes)": [[29, "arkouda.dtypes.uint16"]], "uint32 (in module arkouda.dtypes)": [[29, "arkouda.dtypes.uint32"]], "uint64 (in module arkouda.dtypes)": [[29, "arkouda.dtypes.uint64"]], "uint8 (in module arkouda.dtypes)": [[29, "arkouda.dtypes.uint8"]], "and() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.AND"]], "groupby_reduction_types (in module arkouda.groupbyclass)": [[30, "arkouda.groupbyclass.GROUPBY_REDUCTION_TYPES"]], "groupby (class in arkouda.groupbyclass)": [[30, "arkouda.groupbyclass.GroupBy"]], "or() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.OR"]], "reductions (arkouda.groupbyclass.groupby attribute)": [[30, "arkouda.groupbyclass.GroupBy.Reductions"]], "xor() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.XOR"]], "aggregate() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.aggregate"]], "all() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.all"]], "any() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.any"]], "argmax() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.argmax"]], "argmin() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.argmin"]], "arkouda.groupbyclass": [[30, "module-arkouda.groupbyclass"]], "attach() (arkouda.groupbyclass.groupby static method)": [[30, "arkouda.groupbyclass.GroupBy.attach"]], "broadcast() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.broadcast"]], "broadcast() (in module arkouda.groupbyclass)": [[30, "arkouda.groupbyclass.broadcast"]], "build_from_components() (arkouda.groupbyclass.groupby static method)": [[30, "arkouda.groupbyclass.GroupBy.build_from_components"]], "count() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.count"]], "dropna (arkouda.groupbyclass.groupby attribute)": [[30, "arkouda.groupbyclass.GroupBy.dropna"]], "first() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.first"]], "from_return_msg() (arkouda.groupbyclass.groupby static method)": [[30, "arkouda.groupbyclass.GroupBy.from_return_msg"]], "is_registered() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.is_registered"]], "logger (arkouda.groupbyclass.groupby attribute)": [[30, "arkouda.groupbyclass.GroupBy.logger"]], "max() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.max"]], "mean() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.mean"]], "median() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.median"]], "min() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.min"]], "mode() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.mode"]], "most_common() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.most_common"]], "ngroups (arkouda.groupbyclass.groupby attribute)": [[30, "arkouda.groupbyclass.GroupBy.ngroups"]], "nkeys (arkouda.groupbyclass.groupby attribute)": [[30, "arkouda.groupbyclass.GroupBy.nkeys"]], "nunique() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.nunique"]], "objtype (arkouda.groupbyclass.groupby attribute)": [[30, "arkouda.groupbyclass.GroupBy.objType"]], "permutation (arkouda.groupbyclass.groupby attribute)": [[30, "arkouda.groupbyclass.GroupBy.permutation"]], "prod() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.prod"]], "register() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.register"]], "segments (arkouda.groupbyclass.groupby attribute)": [[30, "arkouda.groupbyclass.GroupBy.segments"]], "size (arkouda.groupbyclass.groupby attribute)": [[30, "arkouda.groupbyclass.GroupBy.size"]], "size() (arkouda.groupbyclass.groupby method)": [[30, "id0"]], "std() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.std"]], "sum() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.sum"]], "to_hdf() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.to_hdf"]], "unique() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.unique"]], "unique() (in module arkouda.groupbyclass)": [[30, "arkouda.groupbyclass.unique"]], "unique_keys (arkouda.groupbyclass.groupby attribute)": [[30, "arkouda.groupbyclass.GroupBy.unique_keys"]], "unregister() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.unregister"]], "unregister_groupby_by_name() (arkouda.groupbyclass.groupby static method)": [[30, "arkouda.groupbyclass.GroupBy.unregister_groupby_by_name"]], "update_hdf() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.update_hdf"]], "var() (arkouda.groupbyclass.groupby method)": [[30, "arkouda.groupbyclass.GroupBy.var"]], "historyretriever (class in arkouda.history)": [[31, "arkouda.history.HistoryRetriever"]], "notebookhistoryretriever (class in arkouda.history)": [[31, "arkouda.history.NotebookHistoryRetriever"]], "shellhistoryretriever (class in arkouda.history)": [[31, "arkouda.history.ShellHistoryRetriever"]], "arkouda.history": [[31, "module-arkouda.history"]], "retrieve() (arkouda.history.historyretriever method)": [[31, "arkouda.history.HistoryRetriever.retrieve"]], "retrieve() (arkouda.history.notebookhistoryretriever method)": [[31, "arkouda.history.NotebookHistoryRetriever.retrieve"]], "retrieve() (arkouda.history.shellhistoryretriever method)": [[31, "arkouda.history.ShellHistoryRetriever.retrieve"]], "and() (arkouda.groupby method)": [[32, "arkouda.GroupBy.AND"], [32, "id101"], [32, "id287"], [32, "id475"], [32, "id643"], [32, "id939"], [89, "arkouda.GroupBy.AND"]], "and() (arkouda.segarray method)": [[32, "arkouda.SegArray.AND"]], "arkouda_supported_dtypes (in module arkouda)": [[32, "arkouda.ARKOUDA_SUPPORTED_DTYPES"]], "allsymbols (in module arkouda)": [[32, "arkouda.AllSymbols"]], "arrayview (class in arkouda)": [[32, "arkouda.ArrayView"], [85, "arkouda.ArrayView"]], "binops (arkouda.categorical attribute)": [[32, "arkouda.Categorical.BinOps"], [32, "id570"], [32, "id961"]], "binops (arkouda.strings attribute)": [[32, "arkouda.Strings.BinOps"], [32, "id1007"], [32, "id123"], [32, "id379"], [32, "id736"]], "binops (arkouda.pdarray attribute)": [[32, "arkouda.pdarray.BinOps"], [32, "id13"], [32, "id199"], [32, "id314"], [32, "id499"], [32, "id667"]], "bitvector (class in arkouda)": [[32, "arkouda.BitVector"]], "bitvectorizer() (in module arkouda)": [[32, "arkouda.BitVectorizer"]], "column_classes (arkouda.dataframe attribute)": [[32, "arkouda.DataFrame.COLUMN_CLASSES"], [32, "id803"]], "critical (arkouda.loglevel attribute)": [[32, "arkouda.LogLevel.CRITICAL"]], "cachedaccessor (class in arkouda)": [[32, "arkouda.CachedAccessor"]], "categorical (class in arkouda)": [[32, "arkouda.Categorical"], [32, "id561"], [32, "id952"], [86, "arkouda.Categorical"]], "debug (arkouda.loglevel attribute)": [[32, "arkouda.LogLevel.DEBUG"]], "dtypeobjects (in module arkouda)": [[32, "arkouda.DTypeObjects"]], "dtypes (in module arkouda)": [[32, "arkouda.DTypes"]], "dataframe (class in arkouda)": [[32, "arkouda.DataFrame"], [32, "id795"], [88, "arkouda.DataFrame"]], "datetime (class in arkouda)": [[32, "arkouda.Datetime"], [32, "id1066"], [32, "id848"]], "datetimeaccessor (class in arkouda)": [[32, "arkouda.DatetimeAccessor"]], "error (arkouda.loglevel attribute)": [[32, "arkouda.LogLevel.ERROR"]], "errormode (class in arkouda)": [[32, "arkouda.ErrorMode"]], "fields (class in arkouda)": [[32, "arkouda.Fields"]], "groupby_reduction_types (in module arkouda)": [[32, "arkouda.GROUPBY_REDUCTION_TYPES"]], "groupby (class in arkouda)": [[32, "arkouda.GroupBy"], [32, "id256"], [32, "id444"], [32, "id612"], [32, "id70"], [32, "id908"], [89, "arkouda.GroupBy"]], "groupby() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.GroupBy"], [32, "id817"], [32, "arkouda.DataFrame.groupby"], [32, "id838"]], "info (arkouda.loglevel attribute)": [[32, "arkouda.LogLevel.INFO"]], "ipv4 (class in arkouda)": [[32, "arkouda.IPv4"]], "index (class in arkouda)": [[32, "arkouda.Index"], [82, "arkouda.Index"]], "len_suffix (in module arkouda)": [[32, "arkouda.LEN_SUFFIX"]], "loglevel (class in arkouda)": [[32, "arkouda.LogLevel"]], "multiindex (class in arkouda)": [[32, "arkouda.MultiIndex"]], "or() (arkouda.groupby method)": [[32, "arkouda.GroupBy.OR"], [32, "id100"], [32, "id286"], [32, "id474"], [32, "id642"], [32, "id938"], [89, "arkouda.GroupBy.OR"]], "or() (arkouda.segarray method)": [[32, "arkouda.SegArray.OR"]], "opeqops (arkouda.pdarray attribute)": [[32, "arkouda.pdarray.OpEqOps"], [32, "id14"], [32, "id200"], [32, "id315"], [32, "id500"], [32, "id668"]], "power_divergenceresult (class in arkouda)": [[32, "arkouda.Power_divergenceResult"]], "properties (class in arkouda)": [[32, "arkouda.Properties"]], "reductions (arkouda.groupby attribute)": [[32, "arkouda.GroupBy.Reductions"], [32, "id265"], [32, "id453"], [32, "id621"], [32, "id79"], [32, "id917"]], "registerablepieces (arkouda.categorical attribute)": [[32, "arkouda.Categorical.RegisterablePieces"], [32, "id571"], [32, "id962"]], "registeredsymbols (in module arkouda)": [[32, "arkouda.RegisteredSymbols"]], "registrationerror": [[32, "arkouda.RegistrationError"], [32, "id189"], [32, "id303"], [32, "id490"], [32, "id65"], [42, "arkouda.pdarrayclass.RegistrationError"]], "requiredpieces (arkouda.categorical attribute)": [[32, "arkouda.Categorical.RequiredPieces"], [32, "id572"], [32, "id963"]], "row (class in arkouda)": [[32, "arkouda.Row"]], "seg_suffix (in module arkouda)": [[32, "arkouda.SEG_SUFFIX"]], "scalardtypes (in module arkouda)": [[32, "arkouda.ScalarDTypes"]], "segarray (class in arkouda)": [[32, "arkouda.SegArray"]], "series (class in arkouda)": [[32, "arkouda.Series"], [94, "arkouda.Series"]], "stringaccessor (class in arkouda)": [[32, "arkouda.StringAccessor"]], "strings (class in arkouda)": [[32, "arkouda.Strings"], [32, "id115"], [32, "id371"], [32, "id728"], [32, "id999"]], "timedelta (class in arkouda)": [[32, "arkouda.Timedelta"], [32, "id881"]], "val_suffix (in module arkouda)": [[32, "arkouda.VAL_SUFFIX"]], "warn (arkouda.loglevel attribute)": [[32, "arkouda.LogLevel.WARN"]], "xor() (arkouda.groupby method)": [[32, "arkouda.GroupBy.XOR"], [32, "id102"], [32, "id288"], [32, "id476"], [32, "id644"], [32, "id940"], [89, "arkouda.GroupBy.XOR"]], "xor() (arkouda.segarray method)": [[32, "arkouda.SegArray.XOR"]], "abs() (arkouda.timedelta method)": [[32, "arkouda.Timedelta.abs"], [32, "id899"]], "abs() (in module arkouda)": [[32, "arkouda.abs"], [84, "arkouda.abs"]], "add() (arkouda.series method)": [[32, "arkouda.Series.add"]], "aggregate() (arkouda.groupby method)": [[32, "arkouda.GroupBy.aggregate"], [32, "id272"], [32, "id460"], [32, "id628"], [32, "id86"], [32, "id924"], [89, "arkouda.GroupBy.aggregate"]], "aggregate() (arkouda.segarray method)": [[32, "arkouda.SegArray.aggregate"]], "akabs() (in module arkouda)": [[32, "arkouda.akabs"]], "akbool (in module arkouda)": [[32, "arkouda.akbool"], [32, "id442"]], "akcast() (in module arkouda)": [[32, "arkouda.akcast"], [32, "id489"]], "akfloat64 (in module arkouda)": [[32, "arkouda.akfloat64"], [32, "id609"]], "akint64 (in module arkouda)": [[32, "arkouda.akint64"], [32, "id443"], [32, "id610"]], "akuint64 (in module arkouda)": [[32, "arkouda.akuint64"], [32, "id255"], [32, "id611"]], "align() (in module arkouda)": [[32, "arkouda.align"]], "all() (arkouda.groupby method)": [[32, "arkouda.GroupBy.all"], [32, "id285"], [32, "id473"], [32, "id641"], [32, "id937"], [32, "id99"], [89, "arkouda.GroupBy.all"]], "all() (arkouda.segarray method)": [[32, "arkouda.SegArray.all"]], "all() (arkouda.pdarray method)": [[32, "arkouda.pdarray.all"], [32, "id207"], [32, "id21"], [32, "id322"], [32, "id507"], [32, "id675"], [90, "arkouda.pdarray.all"]], "all() (in module arkouda)": [[32, "arkouda.all"], [84, "arkouda.all"]], "all_scalars (in module arkouda)": [[32, "arkouda.all_scalars"]], "any() (arkouda.groupby method)": [[32, "arkouda.GroupBy.any"], [32, "id284"], [32, "id472"], [32, "id640"], [32, "id936"], [32, "id98"], [89, "arkouda.GroupBy.any"]], "any() (arkouda.segarray method)": [[32, "arkouda.SegArray.any"]], "any() (arkouda.pdarray method)": [[32, "arkouda.pdarray.any"], [32, "id20"], [32, "id206"], [32, "id321"], [32, "id506"], [32, "id674"], [90, "arkouda.pdarray.any"]], "any() (in module arkouda)": [[32, "arkouda.any"], [84, "arkouda.any"]], "append() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.append"], [32, "id812"]], "append() (arkouda.segarray method)": [[32, "arkouda.SegArray.append"]], "append_single() (arkouda.segarray method)": [[32, "arkouda.SegArray.append_single"]], "apply_permutation() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.apply_permutation"], [32, "id835"]], "arange() (in module arkouda)": [[32, "arkouda.arange"], [32, "id366"], [32, "id551"], [32, "id68"], [32, "id719"], [32, "id905"], [87, "arkouda.arange"]], "arccos() (in module arkouda)": [[32, "arkouda.arccos"]], "arccosh() (in module arkouda)": [[32, "arkouda.arccosh"]], "arcsin() (in module arkouda)": [[32, "arkouda.arcsin"]], "arcsinh() (in module arkouda)": [[32, "arkouda.arcsinh"]], "arctan() (in module arkouda)": [[32, "arkouda.arctan"]], "arctan2() (in module arkouda)": [[32, "arkouda.arctan2"]], "arctanh() (in module arkouda)": [[32, "arkouda.arctanh"]], "argmax() (arkouda.groupby method)": [[32, "arkouda.GroupBy.argmax"], [32, "id282"], [32, "id470"], [32, "id638"], [32, "id934"], [32, "id96"], [89, "arkouda.GroupBy.argmax"]], "argmax() (arkouda.segarray method)": [[32, "arkouda.SegArray.argmax"]], "argmax() (arkouda.pdarray method)": [[32, "arkouda.pdarray.argmax"], [32, "id217"], [32, "id31"], [32, "id332"], [32, "id517"], [32, "id685"], [90, "arkouda.pdarray.argmax"]], "argmax() (in module arkouda)": [[32, "arkouda.argmax"], [84, "arkouda.argmax"]], "argmaxk() (arkouda.pdarray method)": [[32, "arkouda.pdarray.argmaxk"], [32, "id226"], [32, "id341"], [32, "id40"], [32, "id526"], [32, "id694"], [90, "arkouda.pdarray.argmaxk"]], "argmaxk() (in module arkouda)": [[32, "arkouda.argmaxk"], [84, "arkouda.argmaxk"]], "argmin() (arkouda.groupby method)": [[32, "arkouda.GroupBy.argmin"], [32, "id281"], [32, "id469"], [32, "id637"], [32, "id933"], [32, "id95"], [89, "arkouda.GroupBy.argmin"]], "argmin() (arkouda.segarray method)": [[32, "arkouda.SegArray.argmin"]], "argmin() (arkouda.pdarray method)": [[32, "arkouda.pdarray.argmin"], [32, "id216"], [32, "id30"], [32, "id331"], [32, "id516"], [32, "id684"], [90, "arkouda.pdarray.argmin"]], "argmin() (in module arkouda)": [[32, "arkouda.argmin"], [84, "arkouda.argmin"]], "argmink() (arkouda.pdarray method)": [[32, "arkouda.pdarray.argmink"], [32, "id225"], [32, "id340"], [32, "id39"], [32, "id525"], [32, "id693"], [90, "arkouda.pdarray.argmink"]], "argmink() (in module arkouda)": [[32, "arkouda.argmink"], [84, "arkouda.argmink"]], "argsort() (arkouda.categorical method)": [[32, "arkouda.Categorical.argsort"], [32, "id592"], [32, "id983"]], "argsort() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.argsort"], [32, "id831"]], "argsort() (arkouda.index method)": [[32, "arkouda.Index.argsort"]], "argsort() (arkouda.multiindex method)": [[32, "arkouda.MultiIndex.argsort"]], "argsort() (in module arkouda)": [[32, "arkouda.argsort"], [32, "id555"], [32, "id726"], [83, "arkouda.argsort"]], "arkouda": [[32, "module-arkouda"]], "array() (in module arkouda)": [[32, "arkouda.array"], [32, "id367"], [32, "id552"], [32, "id66"], [81, "arkouda.array"]], "astype() (arkouda.strings method)": [[32, "arkouda.Strings.astype"], [32, "id1052"], [32, "id168"], [32, "id424"], [32, "id781"]], "astype() (arkouda.pdarray method)": [[32, "arkouda.pdarray.astype"], [32, "id234"], [32, "id349"], [32, "id48"], [32, "id534"], [32, "id702"]], "at (arkouda.series property)": [[32, "arkouda.Series.at"]], "attach() (arkouda.categorical static method)": [[32, "arkouda.Categorical.attach"], [32, "id604"], [32, "id995"]], "attach() (arkouda.dataframe static method)": [[32, "arkouda.DataFrame.attach"], [32, "id845"]], "attach() (arkouda.groupby static method)": [[32, "arkouda.GroupBy.attach"], [32, "id111"], [32, "id297"], [32, "id485"], [32, "id653"], [32, "id949"], [89, "arkouda.GroupBy.attach"]], "attach() (arkouda.segarray class method)": [[32, "arkouda.SegArray.attach"]], "attach() (arkouda.series static method)": [[32, "arkouda.Series.attach"]], "attach() (arkouda.strings static method)": [[32, "arkouda.Strings.attach"], [32, "id1063"], [32, "id179"], [32, "id435"], [32, "id792"]], "attach() (arkouda.pdarray static method)": [[32, "arkouda.pdarray.attach"], [32, "id250"], [32, "id365"], [32, "id550"], [32, "id64"], [32, "id718"]], "attach() (in module arkouda)": [[32, "arkouda.attach"]], "attach_all() (in module arkouda)": [[32, "arkouda.attach_all"]], "attach_pdarray() (in module arkouda)": [[32, "arkouda.attach_pdarray"]], "base (arkouda.arrayview attribute)": [[32, "arkouda.ArrayView.base"], [85, "arkouda.ArrayView.base"]], "bigint (in module arkouda)": [[32, "arkouda.bigint"], [32, "id608"]], "bigint_from_uint_arrays() (in module arkouda)": [[32, "arkouda.bigint_from_uint_arrays"]], "bigint_to_uint_arrays() (arkouda.pdarray method)": [[32, "arkouda.pdarray.bigint_to_uint_arrays"], [32, "id236"], [32, "id351"], [32, "id50"], [32, "id536"], [32, "id704"]], "bittype (in module arkouda)": [[32, "arkouda.bitType"], [32, "id4"]], "bool (in module arkouda)": [[32, "arkouda.bool"]], "bool_scalars (in module arkouda)": [[32, "arkouda.bool_scalars"]], "broadcast() (arkouda.groupby method)": [[32, "arkouda.GroupBy.broadcast"], [32, "id106"], [32, "id292"], [32, "id480"], [32, "id648"], [32, "id944"], [89, "arkouda.GroupBy.broadcast"]], "broadcast() (in module arkouda)": [[32, "arkouda.broadcast"], [32, "id114"], [32, "id300"], [32, "id656"]], "broadcast_dims() (in module arkouda)": [[32, "arkouda.broadcast_dims"]], "broadcast_to_shape() (in module arkouda)": [[32, "arkouda.broadcast_to_shape"]], "build_from_components() (arkouda.groupby static method)": [[32, "arkouda.GroupBy.build_from_components"], [32, "id107"], [32, "id293"], [32, "id481"], [32, "id649"], [32, "id945"], [89, "arkouda.GroupBy.build_from_components"]], "cached_regex_patterns() (arkouda.strings method)": [[32, "arkouda.Strings.cached_regex_patterns"], [32, "id1028"], [32, "id144"], [32, "id400"], [32, "id757"]], "cast() (in module arkouda)": [[32, "arkouda.cast"], [32, "id188"], [92, "arkouda.cast"]], "categories (arkouda.categorical attribute)": [[32, "arkouda.Categorical.categories"], [32, "id562"], [32, "id953"], [86, "arkouda.Categorical.categories"]], "ceil() (in module arkouda)": [[32, "arkouda.ceil"]], "check_np_dtype() (in module arkouda)": [[32, "arkouda.check_np_dtype"]], "chisquare() (in module arkouda)": [[32, "arkouda.chisquare"]], "clear() (in module arkouda)": [[32, "arkouda.clear"]], "clz() (arkouda.pdarray method)": [[32, "arkouda.pdarray.clz"], [32, "id229"], [32, "id344"], [32, "id43"], [32, "id529"], [32, "id697"]], "clz() (in module arkouda)": [[32, "arkouda.clz"]], "coargsort() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.coargsort"], [32, "id832"]], "coargsort() (in module arkouda)": [[32, "arkouda.coargsort"], [32, "id558"], [32, "id727"], [83, "arkouda.coargsort"]], "codes (arkouda.categorical attribute)": [[32, "arkouda.Categorical.codes"], [32, "id563"], [32, "id954"], [86, "arkouda.Categorical.codes"]], "columns (arkouda.dataframe property)": [[32, "arkouda.DataFrame.columns"], [32, "id800"]], "complex128 (in module arkouda)": [[32, "arkouda.complex128"]], "complex64 (in module arkouda)": [[32, "arkouda.complex64"]], "components (arkouda.timedelta property)": [[32, "arkouda.Timedelta.components"], [32, "id886"]], "compute_join_size() (in module arkouda)": [[32, "arkouda.compute_join_size"]], "concat() (arkouda.dataframe class method)": [[32, "arkouda.DataFrame.concat"], [32, "id813"]], "concat() (arkouda.index method)": [[32, "arkouda.Index.concat"]], "concat() (arkouda.multiindex method)": [[32, "arkouda.MultiIndex.concat"]], "concat() (arkouda.segarray class method)": [[32, "arkouda.SegArray.concat"]], "concat() (arkouda.series static method)": [[32, "arkouda.Series.concat"]], "concatenate() (arkouda.categorical method)": [[32, "arkouda.Categorical.concatenate"], [32, "id594"], [32, "id985"]], "concatenate() (in module arkouda)": [[32, "arkouda.concatenate"], [32, "id370"], [32, "id723"], [87, "arkouda.concatenate"]], "conserves (arkouda.bitvector attribute)": [[32, "arkouda.BitVector.conserves"]], "contains() (arkouda.categorical method)": [[32, "arkouda.Categorical.contains"], [32, "id585"], [32, "id976"], [86, "arkouda.Categorical.contains"]], "contains() (arkouda.strings method)": [[32, "arkouda.Strings.contains"], [32, "id1038"], [32, "id154"], [32, "id410"], [32, "id767"], [97, "arkouda.Strings.contains"]], "convert_if_categorical() (in module arkouda)": [[32, "arkouda.convert_if_categorical"]], "copy() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.copy"], [32, "id837"]], "copy() (arkouda.segarray method)": [[32, "arkouda.SegArray.copy"]], "corr() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.corr"], [32, "id840"]], "corr() (arkouda.pdarray method)": [[32, "arkouda.pdarray.corr"], [32, "id222"], [32, "id337"], [32, "id36"], [32, "id522"], [32, "id690"]], "corr() (in module arkouda)": [[32, "arkouda.corr"]], "cos() (in module arkouda)": [[32, "arkouda.cos"], [84, "arkouda.cos"]], "cosh() (in module arkouda)": [[32, "arkouda.cosh"]], "count() (arkouda.groupby method)": [[32, "arkouda.GroupBy.count"], [32, "id271"], [32, "id459"], [32, "id627"], [32, "id85"], [32, "id923"], [89, "arkouda.GroupBy.count"]], "cov() (arkouda.pdarray method)": [[32, "arkouda.pdarray.cov"], [32, "id221"], [32, "id336"], [32, "id35"], [32, "id521"], [32, "id689"]], "cov() (in module arkouda)": [[32, "arkouda.cov"]], "create_pdarray() (in module arkouda)": [[32, "arkouda.create_pdarray"], [32, "id190"], [32, "id304"], [32, "id553"]], "ctz() (arkouda.pdarray method)": [[32, "arkouda.pdarray.ctz"], [32, "id230"], [32, "id345"], [32, "id44"], [32, "id530"], [32, "id698"]], "ctz() (in module arkouda)": [[32, "arkouda.ctz"]], "cumprod() (in module arkouda)": [[32, "arkouda.cumprod"], [84, "arkouda.cumprod"]], "cumsum() (in module arkouda)": [[32, "arkouda.cumsum"], [32, "id302"], [84, "arkouda.cumsum"]], "date (arkouda.datetime property)": [[32, "arkouda.Datetime.date"], [32, "id1083"], [32, "id865"]], "date_operators() (in module arkouda)": [[32, "arkouda.date_operators"]], "date_range() (in module arkouda)": [[32, "arkouda.date_range"], [32, "id903"]], "day (arkouda.datetime property)": [[32, "arkouda.Datetime.day"], [32, "id1073"], [32, "id855"]], "day_of_week (arkouda.datetime property)": [[32, "arkouda.Datetime.day_of_week"], [32, "id1078"], [32, "id860"]], "day_of_year (arkouda.datetime property)": [[32, "arkouda.Datetime.day_of_year"], [32, "id1076"], [32, "id858"]], "dayofweek (arkouda.datetime property)": [[32, "arkouda.Datetime.dayofweek"], [32, "id1079"], [32, "id861"]], "dayofyear (arkouda.datetime property)": [[32, "arkouda.Datetime.dayofyear"], [32, "id1077"], [32, "id859"]], "days (arkouda.timedelta property)": [[32, "arkouda.Timedelta.days"], [32, "id885"]], "decode() (arkouda.strings method)": [[32, "arkouda.Strings.decode"], [32, "id1015"], [32, "id131"], [32, "id387"], [32, "id744"]], "deg2rad() (in module arkouda)": [[32, "arkouda.deg2rad"]], "diff() (arkouda.series method)": [[32, "arkouda.Series.diff"]], "disableverbose() (in module arkouda)": [[32, "arkouda.disableVerbose"]], "divmod() (in module arkouda)": [[32, "arkouda.divmod"]], "drop() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.drop"], [32, "id807"]], "drop_duplicates() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.drop_duplicates"], [32, "id808"]], "dropna (arkouda.groupby attribute)": [[32, "arkouda.GroupBy.dropna"], [32, "id264"], [32, "id452"], [32, "id620"], [32, "id78"], [32, "id916"], [89, "arkouda.GroupBy.dropna"]], "dt (arkouda.series attribute)": [[32, "arkouda.Series.dt"]], "dtype (arkouda.arrayview attribute)": [[32, "arkouda.ArrayView.dtype"], [85, "arkouda.ArrayView.dtype"]], "dtype (arkouda.categorical attribute)": [[32, "arkouda.Categorical.dtype"], [32, "id576"], [32, "id967"]], "dtype (arkouda.strings attribute)": [[32, "arkouda.Strings.dtype"], [32, "id1005"], [32, "id121"], [32, "id377"], [32, "id734"]], "dtype (arkouda.pdarray attribute)": [[32, "arkouda.pdarray.dtype"], [32, "id193"], [32, "id308"], [32, "id493"], [32, "id661"], [32, "id7"], [92, "arkouda.pdarray.dtype"]], "dtype() (in module arkouda)": [[32, "arkouda.dtype"]], "dtypes (arkouda.dataframe property)": [[32, "arkouda.DataFrame.dtypes"], [32, "id797"]], "empty (arkouda.dataframe property)": [[32, "arkouda.DataFrame.empty"], [32, "id798"]], "enableverbose() (in module arkouda)": [[32, "arkouda.enableVerbose"]], "encode() (arkouda.strings method)": [[32, "arkouda.Strings.encode"], [32, "id1014"], [32, "id130"], [32, "id386"], [32, "id743"]], "endswith() (arkouda.categorical method)": [[32, "arkouda.Categorical.endswith"], [32, "id587"], [32, "id978"], [86, "arkouda.Categorical.endswith"]], "endswith() (arkouda.strings method)": [[32, "arkouda.Strings.endswith"], [32, "id1040"], [32, "id156"], [32, "id412"], [32, "id769"], [97, "arkouda.Strings.endswith"]], "entry (arkouda.strings attribute)": [[32, "arkouda.Strings.entry"], [32, "id1000"], [32, "id116"], [32, "id372"], [32, "id729"]], "exp() (in module arkouda)": [[32, "arkouda.exp"], [84, "arkouda.exp"]], "expm1() (in module arkouda)": [[32, "arkouda.expm1"]], "export() (in module arkouda)": [[32, "arkouda.export"], [81, "arkouda.export"]], "export_uint() (arkouda.ipv4 method)": [[32, "arkouda.IPv4.export_uint"]], "factory() (arkouda.index static method)": [[32, "arkouda.Index.factory"]], "fill() (arkouda.pdarray method)": [[32, "arkouda.pdarray.fill"], [32, "id19"], [32, "id205"], [32, "id320"], [32, "id505"], [32, "id673"]], "filter() (arkouda.segarray method)": [[32, "arkouda.SegArray.filter"]], "filter_by_range() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.filter_by_range"], [32, "id836"]], "find() (in module arkouda)": [[32, "arkouda.find"]], "find_locations() (arkouda.strings method)": [[32, "arkouda.Strings.find_locations"], [32, "id1030"], [32, "id146"], [32, "id402"], [32, "id759"], [97, "arkouda.Strings.find_locations"]], "findall() (arkouda.strings method)": [[32, "arkouda.Strings.findall"], [32, "id1035"], [32, "id151"], [32, "id407"], [32, "id764"], [97, "arkouda.Strings.findall"]], "first() (arkouda.groupby method)": [[32, "arkouda.GroupBy.first"], [32, "id103"], [32, "id289"], [32, "id477"], [32, "id645"], [32, "id941"], [89, "arkouda.GroupBy.first"]], "flatten() (arkouda.strings method)": [[32, "arkouda.Strings.flatten"], [32, "id1041"], [32, "id157"], [32, "id413"], [32, "id770"], [97, "arkouda.Strings.flatten"]], "float32 (in module arkouda)": [[32, "arkouda.float32"]], "float64 (in module arkouda)": [[32, "arkouda.float64"]], "float_scalars (in module arkouda)": [[32, "arkouda.float_scalars"]], "floor() (in module arkouda)": [[32, "arkouda.floor"]], "fmod() (in module arkouda)": [[32, "arkouda.fmod"]], "format() (arkouda.bitvector method)": [[32, "arkouda.BitVector.format"]], "format() (arkouda.fields method)": [[32, "arkouda.Fields.format"]], "format() (arkouda.ipv4 method)": [[32, "arkouda.IPv4.format"]], "format_other() (arkouda.pdarray method)": [[32, "arkouda.pdarray.format_other"], [32, "id16"], [32, "id202"], [32, "id317"], [32, "id502"], [32, "id670"]], "from_codes() (arkouda.categorical class method)": [[32, "arkouda.Categorical.from_codes"], [32, "id577"], [32, "id968"], [86, "arkouda.Categorical.from_codes"]], "from_multi_array() (arkouda.segarray class method)": [[32, "arkouda.SegArray.from_multi_array"]], "from_pandas() (arkouda.dataframe class method)": [[32, "arkouda.DataFrame.from_pandas"], [32, "id806"]], "from_parts() (arkouda.segarray class method)": [[32, "arkouda.SegArray.from_parts"]], "from_parts() (arkouda.strings static method)": [[32, "arkouda.Strings.from_parts"], [32, "id1010"], [32, "id126"], [32, "id382"], [32, "id739"]], "from_return_msg() (arkouda.bitvector class method)": [[32, "arkouda.BitVector.from_return_msg"]], "from_return_msg() (arkouda.categorical class method)": [[32, "arkouda.Categorical.from_return_msg"], [32, "id578"], [32, "id969"]], "from_return_msg() (arkouda.dataframe class method)": [[32, "arkouda.DataFrame.from_return_msg"], [32, "id847"]], "from_return_msg() (arkouda.groupby static method)": [[32, "arkouda.GroupBy.from_return_msg"], [32, "id267"], [32, "id455"], [32, "id623"], [32, "id81"], [32, "id919"]], "from_return_msg() (arkouda.index class method)": [[32, "arkouda.Index.from_return_msg"]], "from_return_msg() (arkouda.segarray class method)": [[32, "arkouda.SegArray.from_return_msg"]], "from_return_msg() (arkouda.series class method)": [[32, "arkouda.Series.from_return_msg"]], "from_return_msg() (arkouda.strings static method)": [[32, "arkouda.Strings.from_return_msg"], [32, "id1009"], [32, "id125"], [32, "id381"], [32, "id738"]], "from_series() (in module arkouda)": [[32, "arkouda.from_series"], [32, "id251"]], "full() (in module arkouda)": [[32, "arkouda.full"], [32, "id720"]], "full_like() (in module arkouda)": [[32, "arkouda.full_like"]], "fullmatch() (arkouda.strings method)": [[32, "arkouda.Strings.fullmatch"], [32, "id1033"], [32, "id149"], [32, "id405"], [32, "id762"], [97, "arkouda.Strings.fullmatch"]], "gen_ranges() (in module arkouda)": [[32, "arkouda.gen_ranges"], [32, "id301"]], "generic_concat() (in module arkouda)": [[32, "arkouda.generic_concat"]], "getarkoudalogger() (in module arkouda)": [[32, "arkouda.getArkoudaLogger"]], "get_byteorder() (in module arkouda)": [[32, "arkouda.get_byteorder"]], "get_bytes() (arkouda.strings method)": [[32, "arkouda.Strings.get_bytes"], [32, "id1012"], [32, "id128"], [32, "id384"], [32, "id741"]], "get_callback() (in module arkouda)": [[32, "arkouda.get_callback"]], "get_columns() (in module arkouda)": [[32, "arkouda.get_columns"]], "get_datasets() (in module arkouda)": [[32, "arkouda.get_datasets"], [81, "arkouda.get_datasets"]], "get_filetype() (in module arkouda)": [[32, "arkouda.get_filetype"]], "get_jth() (arkouda.segarray method)": [[32, "arkouda.SegArray.get_jth"]], "get_length_n() (arkouda.segarray method)": [[32, "arkouda.SegArray.get_length_n"]], "get_lengths() (arkouda.strings method)": [[32, "arkouda.Strings.get_lengths"], [32, "id1011"], [32, "id127"], [32, "id383"], [32, "id740"]], "get_ngrams() (arkouda.segarray method)": [[32, "arkouda.SegArray.get_ngrams"]], "get_null_indices() (in module arkouda)": [[32, "arkouda.get_null_indices"]], "get_offsets() (arkouda.strings method)": [[32, "arkouda.Strings.get_offsets"], [32, "id1013"], [32, "id129"], [32, "id385"], [32, "id742"]], "get_prefixes() (arkouda.segarray method)": [[32, "arkouda.SegArray.get_prefixes"]], "get_prefixes() (arkouda.strings method)": [[32, "arkouda.Strings.get_prefixes"], [32, "id1046"], [32, "id162"], [32, "id418"], [32, "id775"]], "get_server_byteorder() (in module arkouda)": [[32, "arkouda.get_server_byteorder"]], "get_suffixes() (arkouda.segarray method)": [[32, "arkouda.SegArray.get_suffixes"]], "get_suffixes() (arkouda.strings method)": [[32, "arkouda.Strings.get_suffixes"], [32, "id1047"], [32, "id163"], [32, "id419"], [32, "id776"]], "group() (arkouda.categorical method)": [[32, "arkouda.Categorical.group"], [32, "id591"], [32, "id982"]], "group() (arkouda.strings method)": [[32, "arkouda.Strings.group"], [32, "id1049"], [32, "id165"], [32, "id421"], [32, "id778"]], "grouping (arkouda.segarray property)": [[32, "arkouda.SegArray.grouping"]], "has_repeat_labels() (arkouda.series method)": [[32, "arkouda.Series.has_repeat_labels"]], "hash() (arkouda.categorical method)": [[32, "arkouda.Categorical.hash"], [32, "id590"], [32, "id981"]], "hash() (arkouda.segarray method)": [[32, "arkouda.SegArray.hash"]], "hash() (arkouda.strings method)": [[32, "arkouda.Strings.hash"], [32, "id1048"], [32, "id164"], [32, "id420"], [32, "id777"]], "hash() (in module arkouda)": [[32, "arkouda.hash"]], "head() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.head"], [32, "id814"]], "head() (arkouda.series method)": [[32, "arkouda.Series.head"]], "hist_all() (in module arkouda)": [[32, "arkouda.hist_all"]], "histogram() (in module arkouda)": [[32, "arkouda.histogram"], [32, "id906"], [90, "arkouda.histogram"]], "histogram2d() (in module arkouda)": [[32, "arkouda.histogram2d"]], "histogramdd() (in module arkouda)": [[32, "arkouda.histogramdd"]], "hour (arkouda.datetime property)": [[32, "arkouda.Datetime.hour"], [32, "id1072"], [32, "id854"]], "iat (arkouda.series property)": [[32, "arkouda.Series.iat"]], "ignore (arkouda.errormode attribute)": [[32, "arkouda.ErrorMode.ignore"]], "iloc (arkouda.series property)": [[32, "arkouda.Series.iloc"]], "import_data() (in module arkouda)": [[32, "arkouda.import_data"], [81, "arkouda.import_data"]], "in1d() (arkouda.categorical method)": [[32, "arkouda.Categorical.in1d"], [32, "id588"], [32, "id979"]], "in1d() (in module arkouda)": [[32, "arkouda.in1d"], [32, "id556"], [32, "id724"], [95, "arkouda.in1d"]], "in1d_intervals() (in module arkouda)": [[32, "arkouda.in1d_intervals"]], "index (arkouda.dataframe property)": [[32, "arkouda.DataFrame.index"], [32, "id801"]], "index (arkouda.index property)": [[32, "arkouda.Index.index"]], "index (arkouda.multiindex property)": [[32, "arkouda.MultiIndex.index"]], "indexof1d() (in module arkouda)": [[32, "arkouda.indexof1d"]], "info (arkouda.dataframe property)": [[32, "arkouda.DataFrame.info"], [32, "id802"]], "info() (arkouda.categorical method)": [[32, "arkouda.Categorical.info"], [32, "id602"], [32, "id993"]], "info() (arkouda.strings method)": [[32, "arkouda.Strings.info"], [32, "id1058"], [32, "id174"], [32, "id430"], [32, "id787"]], "info() (arkouda.pdarray method)": [[32, "arkouda.pdarray.info"], [32, "id209"], [32, "id23"], [32, "id324"], [32, "id509"], [32, "id677"]], "information() (in module arkouda)": [[32, "arkouda.information"]], "int16 (in module arkouda)": [[32, "arkouda.int16"]], "int32 (in module arkouda)": [[32, "arkouda.int32"]], "int64 (in module arkouda)": [[32, "arkouda.int64"], [32, "id184"]], "int8 (in module arkouda)": [[32, "arkouda.int8"]], "inttypes (in module arkouda)": [[32, "arkouda.intTypes"], [32, "id186"], [32, "id3"]], "int_scalars (in module arkouda)": [[32, "arkouda.int_scalars"], [32, "id185"], [32, "id252"]], "intersect() (arkouda.segarray method)": [[32, "arkouda.SegArray.intersect"]], "intersect() (in module arkouda)": [[32, "arkouda.intersect"]], "intersect1d() (in module arkouda)": [[32, "arkouda.intersect1d"], [95, "arkouda.intersect1d"]], "interval_lookup() (in module arkouda)": [[32, "arkouda.interval_lookup"]], "intx() (in module arkouda)": [[32, "arkouda.intx"]], "invert_permutation() (in module arkouda)": [[32, "arkouda.invert_permutation"]], "ip_address() (in module arkouda)": [[32, "arkouda.ip_address"]], "issupportedint() (in module arkouda)": [[32, "arkouda.isSupportedInt"], [32, "id187"], [32, "id253"]], "issupportednumber() (in module arkouda)": [[32, "arkouda.isSupportedNumber"]], "is_cosorted() (in module arkouda)": [[32, "arkouda.is_cosorted"]], "is_ipv4() (in module arkouda)": [[32, "arkouda.is_ipv4"]], "is_ipv6() (in module arkouda)": [[32, "arkouda.is_ipv6"]], "is_leap_year (arkouda.datetime property)": [[32, "arkouda.Datetime.is_leap_year"], [32, "id1084"], [32, "id866"]], "is_registered() (arkouda.categorical method)": [[32, "arkouda.Categorical.is_registered"], [32, "id601"], [32, "id992"]], "is_registered() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.is_registered"], [32, "id844"]], "is_registered() (arkouda.datetime method)": [[32, "arkouda.Datetime.is_registered"], [32, "id1098"], [32, "id880"]], "is_registered() (arkouda.groupby method)": [[32, "arkouda.GroupBy.is_registered"], [32, "id110"], [32, "id296"], [32, "id484"], [32, "id652"], [32, "id948"], [89, "arkouda.GroupBy.is_registered"]], "is_registered() (arkouda.index method)": [[32, "arkouda.Index.is_registered"]], "is_registered() (arkouda.multiindex method)": [[32, "arkouda.MultiIndex.is_registered"]], "is_registered() (arkouda.segarray method)": [[32, "arkouda.SegArray.is_registered"]], "is_registered() (arkouda.series method)": [[32, "arkouda.Series.is_registered"]], "is_registered() (arkouda.strings method)": [[32, "arkouda.Strings.is_registered"], [32, "id1062"], [32, "id178"], [32, "id434"], [32, "id791"]], "is_registered() (arkouda.timedelta method)": [[32, "arkouda.Timedelta.is_registered"], [32, "id902"]], "is_registered() (arkouda.pdarray method)": [[32, "arkouda.pdarray.is_registered"], [32, "id208"], [32, "id22"], [32, "id323"], [32, "id508"], [32, "id676"]], "is_registered() (in module arkouda)": [[32, "arkouda.is_registered"]], "is_sorted() (arkouda.pdarray method)": [[32, "arkouda.pdarray.is_sorted"], [32, "id211"], [32, "id25"], [32, "id326"], [32, "id511"], [32, "id679"], [90, "arkouda.pdarray.is_sorted"]], "is_sorted() (in module arkouda)": [[32, "arkouda.is_sorted"], [32, "id305"], [84, "arkouda.is_sorted"]], "is_unique (arkouda.index property)": [[32, "arkouda.Index.is_unique"]], "isalnum() (arkouda.strings method)": [[32, "arkouda.Strings.isalnum"], [32, "id1022"], [32, "id138"], [32, "id394"], [32, "id751"]], "isalpha() (arkouda.strings method)": [[32, "arkouda.Strings.isalpha"], [32, "id1023"], [32, "id139"], [32, "id395"], [32, "id752"]], "isdigit() (arkouda.strings method)": [[32, "arkouda.Strings.isdigit"], [32, "id1024"], [32, "id140"], [32, "id396"], [32, "id753"]], "isempty() (arkouda.strings method)": [[32, "arkouda.Strings.isempty"], [32, "id1025"], [32, "id141"], [32, "id397"], [32, "id754"]], "isfinite() (in module arkouda)": [[32, "arkouda.isfinite"]], "isin() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.isin"], [32, "id839"]], "isin() (arkouda.series method)": [[32, "arkouda.Series.isin"]], "isinf() (in module arkouda)": [[32, "arkouda.isinf"]], "islower() (arkouda.strings method)": [[32, "arkouda.Strings.islower"], [32, "id1019"], [32, "id135"], [32, "id391"], [32, "id748"]], "isna() (arkouda.categorical method)": [[32, "arkouda.Categorical.isna"], [32, "id583"], [32, "id974"]], "isnan() (in module arkouda)": [[32, "arkouda.isnan"], [32, "id907"]], "isocalendar() (arkouda.datetime method)": [[32, "arkouda.Datetime.isocalendar"], [32, "id1093"], [32, "id875"]], "isspace() (arkouda.strings method)": [[32, "arkouda.Strings.isspace"], [32, "id1026"], [32, "id142"], [32, "id398"], [32, "id755"]], "istitle() (arkouda.strings method)": [[32, "arkouda.Strings.istitle"], [32, "id1021"], [32, "id137"], [32, "id393"], [32, "id750"]], "isupper() (arkouda.strings method)": [[32, "arkouda.Strings.isupper"], [32, "id1020"], [32, "id136"], [32, "id392"], [32, "id749"]], "itemsize (arkouda.arrayview attribute)": [[32, "arkouda.ArrayView.itemsize"], [85, "arkouda.ArrayView.itemsize"]], "itemsize (arkouda.pdarray attribute)": [[32, "arkouda.pdarray.itemsize"], [32, "id11"], [32, "id197"], [32, "id312"], [32, "id497"], [32, "id665"], [92, "arkouda.pdarray.itemsize"]], "join_on_eq_with_dt() (in module arkouda)": [[32, "arkouda.join_on_eq_with_dt"]], "left_align() (in module arkouda)": [[32, "arkouda.left_align"]], "linspace() (in module arkouda)": [[32, "arkouda.linspace"], [87, "arkouda.linspace"]], "list_registry() (in module arkouda)": [[32, "arkouda.list_registry"]], "list_symbol_table() (in module arkouda)": [[32, "arkouda.list_symbol_table"]], "load() (arkouda.dataframe class method)": [[32, "arkouda.DataFrame.load"], [32, "id830"]], "load() (arkouda.segarray class method)": [[32, "arkouda.SegArray.load"]], "load() (in module arkouda)": [[32, "arkouda.load"]], "load_all() (in module arkouda)": [[32, "arkouda.load_all"]], "loc (arkouda.series property)": [[32, "arkouda.Series.loc"]], "locate() (arkouda.series method)": [[32, "arkouda.Series.locate"]], "log() (in module arkouda)": [[32, "arkouda.log"], [84, "arkouda.log"]], "log10() (in module arkouda)": [[32, "arkouda.log10"]], "log1p() (in module arkouda)": [[32, "arkouda.log1p"]], "log2() (in module arkouda)": [[32, "arkouda.log2"]], "logger (arkouda.groupby attribute)": [[32, "arkouda.GroupBy.logger"], [32, "id263"], [32, "id451"], [32, "id619"], [32, "id77"], [32, "id915"], [89, "arkouda.GroupBy.logger"]], "logger (arkouda.strings attribute)": [[32, "arkouda.Strings.logger"], [32, "id1006"], [32, "id122"], [32, "id378"], [32, "id735"]], "lookup() (arkouda.index method)": [[32, "arkouda.Index.lookup"]], "lookup() (arkouda.multiindex method)": [[32, "arkouda.MultiIndex.lookup"]], "lookup() (in module arkouda)": [[32, "arkouda.lookup"]], "lower() (arkouda.strings method)": [[32, "arkouda.Strings.lower"], [32, "id1016"], [32, "id132"], [32, "id388"], [32, "id745"]], "ls() (in module arkouda)": [[32, "arkouda.ls"]], "ls_csv() (in module arkouda)": [[32, "arkouda.ls_csv"]], "lstick() (arkouda.strings method)": [[32, "arkouda.Strings.lstick"], [32, "id1045"], [32, "id161"], [32, "id417"], [32, "id774"], [97, "arkouda.Strings.lstick"]], "match() (arkouda.strings method)": [[32, "arkouda.Strings.match"], [32, "id1032"], [32, "id148"], [32, "id404"], [32, "id761"], [97, "arkouda.Strings.match"]], "max() (arkouda.groupby method)": [[32, "arkouda.GroupBy.max"], [32, "id280"], [32, "id468"], [32, "id636"], [32, "id932"], [32, "id94"], [89, "arkouda.GroupBy.max"]], "max() (arkouda.segarray method)": [[32, "arkouda.SegArray.max"]], "max() (arkouda.pdarray method)": [[32, "arkouda.pdarray.max"], [32, "id215"], [32, "id29"], [32, "id330"], [32, "id515"], [32, "id683"], [90, "arkouda.pdarray.max"]], "max() (in module arkouda)": [[32, "arkouda.max"], [84, "arkouda.max"]], "max_bits (arkouda.pdarray property)": [[32, "arkouda.pdarray.max_bits"], [32, "id12"], [32, "id198"], [32, "id313"], [32, "id498"], [32, "id666"]], "maxk() (arkouda.pdarray method)": [[32, "arkouda.pdarray.maxk"], [32, "id224"], [32, "id339"], [32, "id38"], [32, "id524"], [32, "id692"], [90, "arkouda.pdarray.maxk"]], "maxk() (in module arkouda)": [[32, "arkouda.maxk"], [84, "arkouda.maxk"]], "mean() (arkouda.groupby method)": [[32, "arkouda.GroupBy.mean"], [32, "id277"], [32, "id465"], [32, "id633"], [32, "id91"], [32, "id929"], [89, "arkouda.GroupBy.mean"]], "mean() (arkouda.segarray method)": [[32, "arkouda.SegArray.mean"]], "mean() (arkouda.pdarray method)": [[32, "arkouda.pdarray.mean"], [32, "id218"], [32, "id32"], [32, "id333"], [32, "id518"], [32, "id686"], [90, "arkouda.pdarray.mean"]], "mean() (in module arkouda)": [[32, "arkouda.mean"], [84, "arkouda.mean"]], "median() (arkouda.groupby method)": [[32, "arkouda.GroupBy.median"], [32, "id278"], [32, "id466"], [32, "id634"], [32, "id92"], [32, "id930"], [89, "arkouda.GroupBy.median"]], "memory_usage() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.memory_usage"], [32, "id818"]], "merge() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.merge"], [32, "id841"]], "merge() (in module arkouda)": [[32, "arkouda.merge"]], "microsecond (arkouda.datetime property)": [[32, "arkouda.Datetime.microsecond"], [32, "id1068"], [32, "id850"]], "microseconds (arkouda.timedelta property)": [[32, "arkouda.Timedelta.microseconds"], [32, "id883"]], "millisecond (arkouda.datetime property)": [[32, "arkouda.Datetime.millisecond"], [32, "id1069"], [32, "id851"]], "min() (arkouda.groupby method)": [[32, "arkouda.GroupBy.min"], [32, "id279"], [32, "id467"], [32, "id635"], [32, "id93"], [32, "id931"], [89, "arkouda.GroupBy.min"]], "min() (arkouda.segarray method)": [[32, "arkouda.SegArray.min"]], "min() (arkouda.pdarray method)": [[32, "arkouda.pdarray.min"], [32, "id214"], [32, "id28"], [32, "id329"], [32, "id514"], [32, "id682"], [90, "arkouda.pdarray.min"]], "min() (in module arkouda)": [[32, "arkouda.min"], [84, "arkouda.min"]], "mink() (arkouda.pdarray method)": [[32, "arkouda.pdarray.mink"], [32, "id223"], [32, "id338"], [32, "id37"], [32, "id523"], [32, "id691"], [90, "arkouda.pdarray.mink"]], "mink() (in module arkouda)": [[32, "arkouda.mink"], [84, "arkouda.mink"]], "minute (arkouda.datetime property)": [[32, "arkouda.Datetime.minute"], [32, "id1071"], [32, "id853"]], "mod() (in module arkouda)": [[32, "arkouda.mod"]], "mode() (arkouda.groupby method)": [[32, "arkouda.GroupBy.mode"], [32, "id104"], [32, "id290"], [32, "id478"], [32, "id646"], [32, "id942"], [89, "arkouda.GroupBy.mode"]], "month (arkouda.datetime property)": [[32, "arkouda.Datetime.month"], [32, "id1074"], [32, "id856"]], "most_common() (arkouda.groupby method)": [[32, "arkouda.GroupBy.most_common"], [32, "id113"], [32, "id299"], [32, "id487"], [32, "id655"], [32, "id951"], [89, "arkouda.GroupBy.most_common"]], "name (arkouda.pdarray attribute)": [[32, "arkouda.pdarray.name"], [32, "id192"], [32, "id307"], [32, "id492"], [32, "id6"], [32, "id660"], [92, "arkouda.pdarray.name"]], "nanosecond (arkouda.datetime property)": [[32, "arkouda.Datetime.nanosecond"], [32, "id1067"], [32, "id849"]], "nanoseconds (arkouda.timedelta property)": [[32, "arkouda.Timedelta.nanoseconds"], [32, "id882"]], "nbytes (arkouda.strings attribute)": [[32, "arkouda.Strings.nbytes"], [32, "id1002"], [32, "id118"], [32, "id374"], [32, "id731"]], "ndim (arkouda.arrayview attribute)": [[32, "arkouda.ArrayView.ndim"], [85, "arkouda.ArrayView.ndim"]], "ndim (arkouda.categorical attribute)": [[32, "arkouda.Categorical.ndim"], [32, "id568"], [32, "id959"], [86, "arkouda.Categorical.ndim"]], "ndim (arkouda.strings attribute)": [[32, "arkouda.Strings.ndim"], [32, "id1003"], [32, "id119"], [32, "id375"], [32, "id732"]], "ndim (arkouda.pdarray attribute)": [[32, "arkouda.pdarray.ndim"], [32, "id195"], [32, "id310"], [32, "id495"], [32, "id663"], [32, "id9"], [92, "arkouda.pdarray.ndim"]], "ngroups (arkouda.groupby attribute)": [[32, "arkouda.GroupBy.ngroups"], [32, "id261"], [32, "id449"], [32, "id617"], [32, "id75"], [32, "id913"], [89, "arkouda.GroupBy.ngroups"]], "nkeys (arkouda.groupby attribute)": [[32, "arkouda.GroupBy.nkeys"], [32, "id257"], [32, "id445"], [32, "id613"], [32, "id71"], [32, "id909"], [89, "arkouda.GroupBy.nkeys"]], "nlevels (arkouda.categorical attribute)": [[32, "arkouda.Categorical.nlevels"], [32, "id567"], [32, "id958"], [86, "arkouda.Categorical.nlevels"]], "non_empty (arkouda.segarray property)": [[32, "arkouda.SegArray.non_empty"]], "normalize() (arkouda.ipv4 method)": [[32, "arkouda.IPv4.normalize"]], "numeric_scalars (in module arkouda)": [[32, "arkouda.numeric_scalars"]], "numpy_scalars (in module arkouda)": [[32, "arkouda.numpy_scalars"]], "nunique() (arkouda.groupby method)": [[32, "arkouda.GroupBy.nunique"], [32, "id283"], [32, "id471"], [32, "id639"], [32, "id935"], [32, "id97"], [89, "arkouda.GroupBy.nunique"]], "nunique() (arkouda.segarray method)": [[32, "arkouda.SegArray.nunique"]], "objtype (arkouda.arrayview attribute)": [[32, "arkouda.ArrayView.objType"]], "objtype (arkouda.categorical attribute)": [[32, "arkouda.Categorical.objType"], [32, "id575"], [32, "id966"]], "objtype (arkouda.dataframe attribute)": [[32, "arkouda.DataFrame.objType"], [32, "id804"]], "objtype (arkouda.groupby attribute)": [[32, "arkouda.GroupBy.objType"], [32, "id266"], [32, "id454"], [32, "id622"], [32, "id80"], [32, "id918"]], "objtype (arkouda.index attribute)": [[32, "arkouda.Index.objType"]], "objtype (arkouda.multiindex attribute)": [[32, "arkouda.MultiIndex.objType"]], "objtype (arkouda.segarray attribute)": [[32, "arkouda.SegArray.objType"]], "objtype (arkouda.series attribute)": [[32, "arkouda.Series.objType"]], "objtype (arkouda.strings attribute)": [[32, "arkouda.Strings.objType"], [32, "id1008"], [32, "id124"], [32, "id380"], [32, "id737"]], "objtype (arkouda.pdarray attribute)": [[32, "arkouda.pdarray.objType"], [32, "id15"], [32, "id201"], [32, "id316"], [32, "id501"], [32, "id669"]], "ones() (in module arkouda)": [[32, "arkouda.ones"], [32, "id368"], [32, "id554"], [32, "id721"], [87, "arkouda.ones"]], "ones_like() (in module arkouda)": [[32, "arkouda.ones_like"], [87, "arkouda.ones_like"]], "opeq() (arkouda.bitvector method)": [[32, "arkouda.BitVector.opeq"]], "opeq() (arkouda.fields method)": [[32, "arkouda.Fields.opeq"]], "opeq() (arkouda.ipv4 method)": [[32, "arkouda.IPv4.opeq"]], "opeq() (arkouda.pdarray method)": [[32, "arkouda.pdarray.opeq"], [32, "id18"], [32, "id204"], [32, "id319"], [32, "id504"], [32, "id672"]], "order (arkouda.arrayview attribute)": [[32, "arkouda.ArrayView.order"], [85, "arkouda.ArrayView.order"]], "parity() (arkouda.pdarray method)": [[32, "arkouda.pdarray.parity"], [32, "id228"], [32, "id343"], [32, "id42"], [32, "id528"], [32, "id696"]], "parity() (in module arkouda)": [[32, "arkouda.parity"]], "parse_hdf_categoricals() (arkouda.categorical static method)": [[32, "arkouda.Categorical.parse_hdf_categoricals"], [32, "id606"], [32, "id997"]], "pdarray (class in arkouda)": [[32, "arkouda.pdarray"], [32, "id191"], [32, "id306"], [32, "id491"], [32, "id5"], [32, "id659"], [92, "arkouda.pdarray"]], "pdconcat() (arkouda.series static method)": [[32, "arkouda.Series.pdconcat"]], "peel() (arkouda.strings method)": [[32, "arkouda.Strings.peel"], [32, "id1042"], [32, "id158"], [32, "id414"], [32, "id771"], [97, "arkouda.Strings.peel"]], "permutation (arkouda.categorical attribute)": [[32, "arkouda.Categorical.permutation"], [32, "id182"], [32, "id564"], [32, "id573"], [32, "id955"], [32, "id964"], [86, "arkouda.Categorical.permutation"]], "permutation (arkouda.groupby attribute)": [[32, "arkouda.GroupBy.permutation"], [32, "id259"], [32, "id447"], [32, "id615"], [32, "id73"], [32, "id911"], [89, "arkouda.GroupBy.permutation"]], "plot_dist() (in module arkouda)": [[32, "arkouda.plot_dist"]], "popcount() (arkouda.pdarray method)": [[32, "arkouda.pdarray.popcount"], [32, "id227"], [32, "id342"], [32, "id41"], [32, "id527"], [32, "id695"]], "popcount() (in module arkouda)": [[32, "arkouda.popcount"]], "power() (in module arkouda)": [[32, "arkouda.power"]], "power_divergence() (in module arkouda)": [[32, "arkouda.power_divergence"]], "prepend_single() (arkouda.segarray method)": [[32, "arkouda.SegArray.prepend_single"]], "pretty_print_info() (arkouda.categorical method)": [[32, "arkouda.Categorical.pretty_print_info"], [32, "id603"], [32, "id994"]], "pretty_print_info() (arkouda.strings method)": [[32, "arkouda.Strings.pretty_print_info"], [32, "id1059"], [32, "id175"], [32, "id431"], [32, "id788"]], "pretty_print_info() (arkouda.pdarray method)": [[32, "arkouda.pdarray.pretty_print_info"], [32, "id210"], [32, "id24"], [32, "id325"], [32, "id510"], [32, "id678"]], "pretty_print_information() (in module arkouda)": [[32, "arkouda.pretty_print_information"]], "prod() (arkouda.groupby method)": [[32, "arkouda.GroupBy.prod"], [32, "id274"], [32, "id462"], [32, "id630"], [32, "id88"], [32, "id926"], [89, "arkouda.GroupBy.prod"]], "prod() (arkouda.segarray method)": [[32, "arkouda.SegArray.prod"]], "prod() (arkouda.pdarray method)": [[32, "arkouda.pdarray.prod"], [32, "id213"], [32, "id27"], [32, "id328"], [32, "id513"], [32, "id681"], [90, "arkouda.pdarray.prod"]], "prod() (in module arkouda)": [[32, "arkouda.prod"], [84, "arkouda.prod"]], "purge_cached_regex_patterns() (arkouda.strings method)": [[32, "arkouda.Strings.purge_cached_regex_patterns"], [32, "id1029"], [32, "id145"], [32, "id401"], [32, "id758"]], "pvalue (arkouda.power_divergenceresult attribute)": [[32, "arkouda.Power_divergenceResult.pvalue"]], "rad2deg() (in module arkouda)": [[32, "arkouda.rad2deg"]], "randint() (in module arkouda)": [[32, "arkouda.randint"], [87, "arkouda.randint"]], "random_strings_lognormal() (in module arkouda)": [[32, "arkouda.random_strings_lognormal"]], "random_strings_uniform() (in module arkouda)": [[32, "arkouda.random_strings_uniform"]], "read() (in module arkouda)": [[32, "arkouda.read"], [81, "arkouda.read"]], "read_csv() (arkouda.dataframe class method)": [[32, "arkouda.DataFrame.read_csv"], [32, "id826"]], "read_csv() (in module arkouda)": [[32, "arkouda.read_csv"]], "read_hdf() (arkouda.segarray class method)": [[32, "arkouda.SegArray.read_hdf"]], "read_hdf() (in module arkouda)": [[32, "arkouda.read_hdf"]], "read_parquet() (in module arkouda)": [[32, "arkouda.read_parquet"]], "read_tagged_data() (in module arkouda)": [[32, "arkouda.read_tagged_data"]], "receive() (in module arkouda)": [[32, "arkouda.receive"]], "receive_dataframe() (in module arkouda)": [[32, "arkouda.receive_dataframe"]], "register() (arkouda.bitvector method)": [[32, "arkouda.BitVector.register"]], "register() (arkouda.categorical method)": [[32, "arkouda.Categorical.register"], [32, "id599"], [32, "id990"]], "register() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.register"], [32, "id842"]], "register() (arkouda.datetime method)": [[32, "arkouda.Datetime.register"], [32, "id1096"], [32, "id878"]], "register() (arkouda.groupby method)": [[32, "arkouda.GroupBy.register"], [32, "id108"], [32, "id294"], [32, "id482"], [32, "id650"], [32, "id946"], [89, "arkouda.GroupBy.register"]], "register() (arkouda.ipv4 method)": [[32, "arkouda.IPv4.register"]], "register() (arkouda.index method)": [[32, "arkouda.Index.register"]], "register() (arkouda.multiindex method)": [[32, "arkouda.MultiIndex.register"]], "register() (arkouda.segarray method)": [[32, "arkouda.SegArray.register"]], "register() (arkouda.series method)": [[32, "arkouda.Series.register"]], "register() (arkouda.strings method)": [[32, "arkouda.Strings.register"], [32, "id1060"], [32, "id176"], [32, "id432"], [32, "id789"]], "register() (arkouda.timedelta method)": [[32, "arkouda.Timedelta.register"], [32, "id900"]], "register() (arkouda.pdarray method)": [[32, "arkouda.pdarray.register"], [32, "id248"], [32, "id363"], [32, "id548"], [32, "id62"], [32, "id716"]], "register_all() (in module arkouda)": [[32, "arkouda.register_all"]], "remove_repeats() (arkouda.segarray method)": [[32, "arkouda.SegArray.remove_repeats"]], "rename() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.rename"], [32, "id811"]], "reset_categories() (arkouda.categorical method)": [[32, "arkouda.Categorical.reset_categories"], [32, "id584"], [32, "id975"]], "reset_index() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.reset_index"], [32, "id809"]], "reshape() (arkouda.pdarray method)": [[32, "arkouda.pdarray.reshape"], [32, "id237"], [32, "id352"], [32, "id51"], [32, "id537"], [32, "id705"]], "resolve_scalar_dtype() (in module arkouda)": [[32, "arkouda.resolve_scalar_dtype"]], "restore() (in module arkouda)": [[32, "arkouda.restore"]], "return_validity (arkouda.errormode attribute)": [[32, "arkouda.ErrorMode.return_validity"]], "right_align() (in module arkouda)": [[32, "arkouda.right_align"]], "rotl() (arkouda.pdarray method)": [[32, "arkouda.pdarray.rotl"], [32, "id231"], [32, "id346"], [32, "id45"], [32, "id531"], [32, "id699"]], "rotl() (in module arkouda)": [[32, "arkouda.rotl"]], "rotr() (arkouda.pdarray method)": [[32, "arkouda.pdarray.rotr"], [32, "id232"], [32, "id347"], [32, "id46"], [32, "id532"], [32, "id700"]], "rotr() (in module arkouda)": [[32, "arkouda.rotr"]], "round() (in module arkouda)": [[32, "arkouda.round"]], "rpeel() (arkouda.strings method)": [[32, "arkouda.Strings.rpeel"], [32, "id1043"], [32, "id159"], [32, "id415"], [32, "id772"], [97, "arkouda.Strings.rpeel"]], "sample() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.sample"], [32, "id816"]], "save() (arkouda.categorical method)": [[32, "arkouda.Categorical.save"], [32, "id598"], [32, "id989"]], "save() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.save"], [32, "id829"]], "save() (arkouda.index method)": [[32, "arkouda.Index.save"]], "save() (arkouda.segarray method)": [[32, "arkouda.SegArray.save"]], "save() (arkouda.strings method)": [[32, "arkouda.Strings.save"], [32, "id1057"], [32, "id173"], [32, "id429"], [32, "id786"]], "save() (arkouda.pdarray method)": [[32, "arkouda.pdarray.save"], [32, "id247"], [32, "id362"], [32, "id547"], [32, "id61"], [32, "id715"]], "save_all() (in module arkouda)": [[32, "arkouda.save_all"]], "search() (arkouda.strings method)": [[32, "arkouda.Strings.search"], [32, "id1031"], [32, "id147"], [32, "id403"], [32, "id760"], [97, "arkouda.Strings.search"]], "search_intervals() (in module arkouda)": [[32, "arkouda.search_intervals"]], "second (arkouda.datetime property)": [[32, "arkouda.Datetime.second"], [32, "id1070"], [32, "id852"]], "seconds (arkouda.timedelta property)": [[32, "arkouda.Timedelta.seconds"], [32, "id884"]], "segarray() (in module arkouda)": [[32, "arkouda.segarray"]], "segments (arkouda.categorical attribute)": [[32, "arkouda.Categorical.segments"], [32, "id183"], [32, "id565"], [32, "id574"], [32, "id956"], [32, "id965"], [86, "arkouda.Categorical.segments"]], "segments (arkouda.groupby attribute)": [[32, "arkouda.GroupBy.segments"], [32, "id262"], [32, "id450"], [32, "id618"], [32, "id76"], [32, "id914"], [89, "arkouda.GroupBy.segments"]], "set_categories() (arkouda.categorical method)": [[32, "arkouda.Categorical.set_categories"], [32, "id580"], [32, "id971"]], "set_dtype() (arkouda.index method)": [[32, "arkouda.Index.set_dtype"]], "set_dtype() (arkouda.multiindex method)": [[32, "arkouda.MultiIndex.set_dtype"]], "set_jth() (arkouda.segarray method)": [[32, "arkouda.SegArray.set_jth"]], "setdiff() (arkouda.segarray method)": [[32, "arkouda.SegArray.setdiff"]], "setdiff1d() (in module arkouda)": [[32, "arkouda.setdiff1d"], [95, "arkouda.setdiff1d"]], "setxor() (arkouda.segarray method)": [[32, "arkouda.SegArray.setxor"]], "setxor1d() (in module arkouda)": [[32, "arkouda.setxor1d"], [95, "arkouda.setxor1d"]], "shape (arkouda.arrayview attribute)": [[32, "arkouda.ArrayView.shape"], [85, "arkouda.ArrayView.shape"]], "shape (arkouda.categorical attribute)": [[32, "arkouda.Categorical.shape"], [32, "id569"], [32, "id960"], [86, "arkouda.Categorical.shape"]], "shape (arkouda.dataframe property)": [[32, "arkouda.DataFrame.shape"], [32, "id799"]], "shape (arkouda.index property)": [[32, "arkouda.Index.shape"]], "shape (arkouda.series property)": [[32, "arkouda.Series.shape"]], "shape (arkouda.strings attribute)": [[32, "arkouda.Strings.shape"], [32, "id1004"], [32, "id120"], [32, "id376"], [32, "id733"]], "shape (arkouda.pdarray attribute)": [[32, "arkouda.pdarray.shape"], [32, "id10"], [32, "id196"], [32, "id311"], [32, "id496"], [32, "id664"], [92, "arkouda.pdarray.shape"]], "sign() (in module arkouda)": [[32, "arkouda.sign"]], "sin() (in module arkouda)": [[32, "arkouda.sin"], [84, "arkouda.sin"]], "sinh() (in module arkouda)": [[32, "arkouda.sinh"]], "size (arkouda.arrayview attribute)": [[32, "arkouda.ArrayView.size"], [85, "arkouda.ArrayView.size"]], "size (arkouda.categorical attribute)": [[32, "arkouda.Categorical.size"], [32, "id566"], [32, "id957"], [86, "arkouda.Categorical.size"]], "size (arkouda.dataframe property)": [[32, "arkouda.DataFrame.size"], [32, "id796"]], "size (arkouda.groupby attribute)": [[32, "arkouda.GroupBy.size"], [32, "id258"], [32, "id446"], [32, "id614"], [32, "id72"], [32, "id910"], [89, "arkouda.GroupBy.size"]], "size (arkouda.strings attribute)": [[32, "arkouda.Strings.size"], [32, "id1001"], [32, "id117"], [32, "id373"], [32, "id730"]], "size (arkouda.pdarray attribute)": [[32, "arkouda.pdarray.size"], [32, "id194"], [32, "id309"], [32, "id494"], [32, "id662"], [32, "id8"], [92, "arkouda.pdarray.size"]], "size() (arkouda.groupby method)": [[32, "id0"], [32, "id270"], [32, "id458"], [32, "id626"], [32, "id84"], [32, "id922"], [89, "id0"]], "skew() (in module arkouda)": [[32, "arkouda.skew"]], "slice_bits() (arkouda.pdarray method)": [[32, "arkouda.pdarray.slice_bits"], [32, "id235"], [32, "id350"], [32, "id49"], [32, "id535"], [32, "id703"]], "snapshot() (in module arkouda)": [[32, "arkouda.snapshot"]], "sort() (arkouda.categorical method)": [[32, "arkouda.Categorical.sort"], [32, "id593"], [32, "id984"]], "sort() (in module arkouda)": [[32, "arkouda.sort"]], "sort_index() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.sort_index"], [32, "id833"]], "sort_index() (arkouda.series method)": [[32, "arkouda.Series.sort_index"]], "sort_values() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.sort_values"], [32, "id834"]], "sort_values() (arkouda.series method)": [[32, "arkouda.Series.sort_values"]], "sorted() (in module arkouda)": [[32, "arkouda.sorted"]], "special_objtype (arkouda.bitvector attribute)": [[32, "arkouda.BitVector.special_objType"]], "special_objtype (arkouda.datetime attribute)": [[32, "arkouda.Datetime.special_objType"], [32, "id1092"], [32, "id874"]], "special_objtype (arkouda.ipv4 attribute)": [[32, "arkouda.IPv4.special_objType"]], "special_objtype (arkouda.timedelta attribute)": [[32, "arkouda.Timedelta.special_objType"], [32, "id894"]], "split() (arkouda.strings method)": [[32, "arkouda.Strings.split"], [32, "id1034"], [32, "id150"], [32, "id406"], [32, "id763"], [97, "arkouda.Strings.split"]], "sqrt() (in module arkouda)": [[32, "arkouda.sqrt"]], "square() (in module arkouda)": [[32, "arkouda.square"]], "standard_normal() (in module arkouda)": [[32, "arkouda.standard_normal"]], "standardize_categories() (arkouda.categorical class method)": [[32, "arkouda.Categorical.standardize_categories"], [32, "id579"], [32, "id970"]], "startswith() (arkouda.categorical method)": [[32, "arkouda.Categorical.startswith"], [32, "id586"], [32, "id977"], [86, "arkouda.Categorical.startswith"]], "startswith() (arkouda.strings method)": [[32, "arkouda.Strings.startswith"], [32, "id1039"], [32, "id155"], [32, "id411"], [32, "id768"], [97, "arkouda.Strings.startswith"]], "statistic (arkouda.power_divergenceresult attribute)": [[32, "arkouda.Power_divergenceResult.statistic"]], "std() (arkouda.groupby method)": [[32, "arkouda.GroupBy.std"], [32, "id276"], [32, "id464"], [32, "id632"], [32, "id90"], [32, "id928"], [89, "arkouda.GroupBy.std"]], "std() (arkouda.timedelta method)": [[32, "arkouda.Timedelta.std"], [32, "id897"]], "std() (arkouda.pdarray method)": [[32, "arkouda.pdarray.std"], [32, "id220"], [32, "id335"], [32, "id34"], [32, "id520"], [32, "id688"], [90, "arkouda.pdarray.std"]], "std() (in module arkouda)": [[32, "arkouda.std"], [84, "arkouda.std"]], "stick() (arkouda.strings method)": [[32, "arkouda.Strings.stick"], [32, "id1044"], [32, "id160"], [32, "id416"], [32, "id773"], [97, "arkouda.Strings.stick"]], "str_ (in module arkouda)": [[32, "arkouda.str_"], [32, "id254"]], "str_acc (arkouda.series attribute)": [[32, "arkouda.Series.str_acc"]], "str_scalars (in module arkouda)": [[32, "arkouda.str_scalars"]], "strict (arkouda.errormode attribute)": [[32, "arkouda.ErrorMode.strict"]], "string_operators() (in module arkouda)": [[32, "arkouda.string_operators"]], "strip() (arkouda.strings method)": [[32, "arkouda.Strings.strip"], [32, "id1027"], [32, "id143"], [32, "id399"], [32, "id756"]], "sub() (arkouda.strings method)": [[32, "arkouda.Strings.sub"], [32, "id1036"], [32, "id152"], [32, "id408"], [32, "id765"], [97, "arkouda.Strings.sub"]], "subn() (arkouda.strings method)": [[32, "arkouda.Strings.subn"], [32, "id1037"], [32, "id153"], [32, "id409"], [32, "id766"], [97, "arkouda.Strings.subn"]], "sum() (arkouda.datetime method)": [[32, "arkouda.Datetime.sum"], [32, "id1095"], [32, "id877"]], "sum() (arkouda.groupby method)": [[32, "arkouda.GroupBy.sum"], [32, "id273"], [32, "id461"], [32, "id629"], [32, "id87"], [32, "id925"], [89, "arkouda.GroupBy.sum"]], "sum() (arkouda.segarray method)": [[32, "arkouda.SegArray.sum"]], "sum() (arkouda.timedelta method)": [[32, "arkouda.Timedelta.sum"], [32, "id898"]], "sum() (arkouda.pdarray method)": [[32, "arkouda.pdarray.sum"], [32, "id212"], [32, "id26"], [32, "id327"], [32, "id512"], [32, "id680"], [90, "arkouda.pdarray.sum"]], "sum() (in module arkouda)": [[32, "arkouda.sum"], [84, "arkouda.sum"]], "supported_opeq (arkouda.datetime attribute)": [[32, "arkouda.Datetime.supported_opeq"], [32, "id1089"], [32, "id871"]], "supported_opeq (arkouda.timedelta attribute)": [[32, "arkouda.Timedelta.supported_opeq"], [32, "id891"]], "supported_with_datetime (arkouda.datetime attribute)": [[32, "arkouda.Datetime.supported_with_datetime"], [32, "id1085"], [32, "id867"]], "supported_with_datetime (arkouda.timedelta attribute)": [[32, "arkouda.Timedelta.supported_with_datetime"], [32, "id887"]], "supported_with_pdarray (arkouda.datetime attribute)": [[32, "arkouda.Datetime.supported_with_pdarray"], [32, "id1090"], [32, "id872"]], "supported_with_pdarray (arkouda.timedelta attribute)": [[32, "arkouda.Timedelta.supported_with_pdarray"], [32, "id892"]], "supported_with_r_datetime (arkouda.datetime attribute)": [[32, "arkouda.Datetime.supported_with_r_datetime"], [32, "id1086"], [32, "id868"]], "supported_with_r_datetime (arkouda.timedelta attribute)": [[32, "arkouda.Timedelta.supported_with_r_datetime"], [32, "id888"]], "supported_with_r_pdarray (arkouda.datetime attribute)": [[32, "arkouda.Datetime.supported_with_r_pdarray"], [32, "id1091"], [32, "id873"]], "supported_with_r_pdarray (arkouda.timedelta attribute)": [[32, "arkouda.Timedelta.supported_with_r_pdarray"], [32, "id893"]], "supported_with_r_timedelta (arkouda.datetime attribute)": [[32, "arkouda.Datetime.supported_with_r_timedelta"], [32, "id1088"], [32, "id870"]], "supported_with_r_timedelta (arkouda.timedelta attribute)": [[32, "arkouda.Timedelta.supported_with_r_timedelta"], [32, "id890"]], "supported_with_timedelta (arkouda.datetime attribute)": [[32, "arkouda.Datetime.supported_with_timedelta"], [32, "id1087"], [32, "id869"]], "supported_with_timedelta (arkouda.timedelta attribute)": [[32, "arkouda.Timedelta.supported_with_timedelta"], [32, "id889"]], "tail() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.tail"], [32, "id815"]], "tail() (arkouda.series method)": [[32, "arkouda.Series.tail"]], "tan() (in module arkouda)": [[32, "arkouda.tan"]], "tanh() (in module arkouda)": [[32, "arkouda.tanh"]], "timedelta_range() (in module arkouda)": [[32, "arkouda.timedelta_range"], [32, "id904"]], "title() (arkouda.strings method)": [[32, "arkouda.Strings.title"], [32, "id1018"], [32, "id134"], [32, "id390"], [32, "id747"]], "to_csv() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.to_csv"], [32, "id823"]], "to_csv() (arkouda.index method)": [[32, "arkouda.Index.to_csv"]], "to_csv() (arkouda.strings method)": [[32, "arkouda.Strings.to_csv"], [32, "id1056"], [32, "id172"], [32, "id428"], [32, "id785"]], "to_csv() (arkouda.pdarray method)": [[32, "arkouda.pdarray.to_csv"], [32, "id244"], [32, "id359"], [32, "id544"], [32, "id58"], [32, "id712"]], "to_csv() (in module arkouda)": [[32, "arkouda.to_csv"]], "to_cuda() (arkouda.pdarray method)": [[32, "arkouda.pdarray.to_cuda"], [32, "id240"], [32, "id355"], [32, "id54"], [32, "id540"], [32, "id708"]], "to_dataframe() (arkouda.series method)": [[32, "arkouda.Series.to_dataframe"]], "to_dict() (arkouda.index method)": [[32, "arkouda.Index.to_dict"]], "to_dict() (arkouda.multiindex method)": [[32, "arkouda.MultiIndex.to_dict"]], "to_hdf() (arkouda.arrayview method)": [[32, "arkouda.ArrayView.to_hdf"]], "to_hdf() (arkouda.categorical method)": [[32, "arkouda.Categorical.to_hdf"], [32, "id595"], [32, "id986"]], "to_hdf() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.to_hdf"], [32, "id820"]], "to_hdf() (arkouda.groupby method)": [[32, "arkouda.GroupBy.to_hdf"], [32, "id268"], [32, "id456"], [32, "id624"], [32, "id82"], [32, "id920"], [89, "arkouda.GroupBy.to_hdf"]], "to_hdf() (arkouda.ipv4 method)": [[32, "arkouda.IPv4.to_hdf"]], "to_hdf() (arkouda.index method)": [[32, "arkouda.Index.to_hdf"]], "to_hdf() (arkouda.multiindex method)": [[32, "arkouda.MultiIndex.to_hdf"]], "to_hdf() (arkouda.segarray method)": [[32, "arkouda.SegArray.to_hdf"]], "to_hdf() (arkouda.strings method)": [[32, "arkouda.Strings.to_hdf"], [32, "id1054"], [32, "id170"], [32, "id426"], [32, "id783"]], "to_hdf() (arkouda.pdarray method)": [[32, "arkouda.pdarray.to_hdf"], [32, "id242"], [32, "id357"], [32, "id542"], [32, "id56"], [32, "id710"]], "to_hdf() (in module arkouda)": [[32, "arkouda.to_hdf"]], "to_list() (arkouda.arrayview method)": [[32, "arkouda.ArrayView.to_list"]], "to_list() (arkouda.bitvector method)": [[32, "arkouda.BitVector.to_list"]], "to_list() (arkouda.categorical method)": [[32, "arkouda.Categorical.to_list"], [32, "id582"], [32, "id973"]], "to_list() (arkouda.ipv4 method)": [[32, "arkouda.IPv4.to_list"]], "to_list() (arkouda.index method)": [[32, "arkouda.Index.to_list"]], "to_list() (arkouda.multiindex method)": [[32, "arkouda.MultiIndex.to_list"]], "to_list() (arkouda.segarray method)": [[32, "arkouda.SegArray.to_list"]], "to_list() (arkouda.series method)": [[32, "arkouda.Series.to_list"]], "to_list() (arkouda.strings method)": [[32, "arkouda.Strings.to_list"], [32, "id1051"], [32, "id167"], [32, "id423"], [32, "id780"]], "to_list() (arkouda.pdarray method)": [[32, "arkouda.pdarray.to_list"], [32, "id239"], [32, "id354"], [32, "id53"], [32, "id539"], [32, "id707"]], "to_ndarray() (arkouda.arrayview method)": [[32, "arkouda.ArrayView.to_ndarray"]], "to_ndarray() (arkouda.bitvector method)": [[32, "arkouda.BitVector.to_ndarray"]], "to_ndarray() (arkouda.categorical method)": [[32, "arkouda.Categorical.to_ndarray"], [32, "id581"], [32, "id972"]], "to_ndarray() (arkouda.ipv4 method)": [[32, "arkouda.IPv4.to_ndarray"]], "to_ndarray() (arkouda.index method)": [[32, "arkouda.Index.to_ndarray"]], "to_ndarray() (arkouda.multiindex method)": [[32, "arkouda.MultiIndex.to_ndarray"]], "to_ndarray() (arkouda.segarray method)": [[32, "arkouda.SegArray.to_ndarray"]], "to_ndarray() (arkouda.strings method)": [[32, "arkouda.Strings.to_ndarray"], [32, "id1050"], [32, "id166"], [32, "id422"], [32, "id779"]], "to_ndarray() (arkouda.pdarray method)": [[32, "arkouda.pdarray.to_ndarray"], [32, "id238"], [32, "id353"], [32, "id52"], [32, "id538"], [32, "id706"]], "to_pandas() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.to_pandas"], [32, "id819"]], "to_pandas() (arkouda.datetime method)": [[32, "arkouda.Datetime.to_pandas"], [32, "id1094"], [32, "id876"]], "to_pandas() (arkouda.index method)": [[32, "arkouda.Index.to_pandas"]], "to_pandas() (arkouda.multiindex method)": [[32, "arkouda.MultiIndex.to_pandas"]], "to_pandas() (arkouda.series method)": [[32, "arkouda.Series.to_pandas"]], "to_pandas() (arkouda.timedelta method)": [[32, "arkouda.Timedelta.to_pandas"], [32, "id896"]], "to_parquet() (arkouda.categorical method)": [[32, "arkouda.Categorical.to_parquet"], [32, "id597"], [32, "id988"]], "to_parquet() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.to_parquet"], [32, "id822"]], "to_parquet() (arkouda.index method)": [[32, "arkouda.Index.to_parquet"]], "to_parquet() (arkouda.segarray method)": [[32, "arkouda.SegArray.to_parquet"]], "to_parquet() (arkouda.strings method)": [[32, "arkouda.Strings.to_parquet"], [32, "id1053"], [32, "id169"], [32, "id425"], [32, "id782"]], "to_parquet() (arkouda.pdarray method)": [[32, "arkouda.pdarray.to_parquet"], [32, "id241"], [32, "id356"], [32, "id541"], [32, "id55"], [32, "id709"]], "to_parquet() (in module arkouda)": [[32, "arkouda.to_parquet"]], "topn() (arkouda.series method)": [[32, "arkouda.Series.topn"]], "total_seconds() (arkouda.timedelta method)": [[32, "arkouda.Timedelta.total_seconds"], [32, "id895"]], "transfer() (arkouda.categorical method)": [[32, "arkouda.Categorical.transfer"], [32, "id607"], [32, "id998"]], "transfer() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.transfer"], [32, "id805"]], "transfer() (arkouda.segarray method)": [[32, "arkouda.SegArray.transfer"]], "transfer() (arkouda.strings method)": [[32, "arkouda.Strings.transfer"], [32, "id1065"], [32, "id181"], [32, "id437"], [32, "id794"]], "transfer() (arkouda.pdarray method)": [[32, "arkouda.pdarray.transfer"], [32, "id17"], [32, "id203"], [32, "id318"], [32, "id503"], [32, "id671"]], "translate_np_dtype() (in module arkouda)": [[32, "arkouda.translate_np_dtype"]], "trunc() (in module arkouda)": [[32, "arkouda.trunc"]], "uint16 (in module arkouda)": [[32, "arkouda.uint16"]], "uint32 (in module arkouda)": [[32, "arkouda.uint32"]], "uint64 (in module arkouda)": [[32, "arkouda.uint64"]], "uint8 (in module arkouda)": [[32, "arkouda.uint8"]], "uniform() (in module arkouda)": [[32, "arkouda.uniform"]], "union() (arkouda.segarray method)": [[32, "arkouda.SegArray.union"]], "union1d() (in module arkouda)": [[32, "arkouda.union1d"], [95, "arkouda.union1d"]], "unique() (arkouda.categorical method)": [[32, "arkouda.Categorical.unique"], [32, "id589"], [32, "id980"]], "unique() (arkouda.groupby method)": [[32, "arkouda.GroupBy.unique"], [32, "id105"], [32, "id291"], [32, "id479"], [32, "id647"], [32, "id943"], [89, "arkouda.GroupBy.unique"]], "unique() (arkouda.segarray method)": [[32, "arkouda.SegArray.unique"]], "unique() (in module arkouda)": [[32, "arkouda.unique"], [32, "id488"], [32, "id657"], [95, "arkouda.unique"]], "unique_keys (arkouda.groupby attribute)": [[32, "arkouda.GroupBy.unique_keys"], [32, "id260"], [32, "id448"], [32, "id616"], [32, "id74"], [32, "id912"], [89, "arkouda.GroupBy.unique_keys"]], "unregister() (arkouda.categorical method)": [[32, "arkouda.Categorical.unregister"], [32, "id600"], [32, "id991"]], "unregister() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.unregister"], [32, "id843"]], "unregister() (arkouda.datetime method)": [[32, "arkouda.Datetime.unregister"], [32, "id1097"], [32, "id879"]], "unregister() (arkouda.groupby method)": [[32, "arkouda.GroupBy.unregister"], [32, "id109"], [32, "id295"], [32, "id483"], [32, "id651"], [32, "id947"], [89, "arkouda.GroupBy.unregister"]], "unregister() (arkouda.index method)": [[32, "arkouda.Index.unregister"]], "unregister() (arkouda.multiindex method)": [[32, "arkouda.MultiIndex.unregister"]], "unregister() (arkouda.segarray method)": [[32, "arkouda.SegArray.unregister"]], "unregister() (arkouda.series method)": [[32, "arkouda.Series.unregister"]], "unregister() (arkouda.strings method)": [[32, "arkouda.Strings.unregister"], [32, "id1061"], [32, "id177"], [32, "id433"], [32, "id790"]], "unregister() (arkouda.timedelta method)": [[32, "arkouda.Timedelta.unregister"], [32, "id901"]], "unregister() (arkouda.pdarray method)": [[32, "arkouda.pdarray.unregister"], [32, "id249"], [32, "id364"], [32, "id549"], [32, "id63"], [32, "id717"]], "unregister() (in module arkouda)": [[32, "arkouda.unregister"]], "unregister_all() (in module arkouda)": [[32, "arkouda.unregister_all"]], "unregister_categorical_by_name() (arkouda.categorical static method)": [[32, "arkouda.Categorical.unregister_categorical_by_name"], [32, "id605"], [32, "id996"]], "unregister_dataframe_by_name() (arkouda.dataframe static method)": [[32, "arkouda.DataFrame.unregister_dataframe_by_name"], [32, "id846"]], "unregister_groupby_by_name() (arkouda.groupby static method)": [[32, "arkouda.GroupBy.unregister_groupby_by_name"], [32, "id112"], [32, "id298"], [32, "id486"], [32, "id654"], [32, "id950"], [89, "arkouda.GroupBy.unregister_groupby_by_name"]], "unregister_pdarray_by_name() (in module arkouda)": [[32, "arkouda.unregister_pdarray_by_name"]], "unregister_segarray_by_name() (arkouda.segarray static method)": [[32, "arkouda.SegArray.unregister_segarray_by_name"]], "unregister_strings_by_name() (arkouda.strings static method)": [[32, "arkouda.Strings.unregister_strings_by_name"], [32, "id1064"], [32, "id180"], [32, "id436"], [32, "id793"]], "unsqueeze() (in module arkouda)": [[32, "arkouda.unsqueeze"]], "update_hdf() (arkouda.arrayview method)": [[32, "arkouda.ArrayView.update_hdf"]], "update_hdf() (arkouda.categorical method)": [[32, "arkouda.Categorical.update_hdf"], [32, "id596"], [32, "id987"]], "update_hdf() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.update_hdf"], [32, "id821"]], "update_hdf() (arkouda.groupby method)": [[32, "arkouda.GroupBy.update_hdf"], [32, "id269"], [32, "id457"], [32, "id625"], [32, "id83"], [32, "id921"]], "update_hdf() (arkouda.ipv4 method)": [[32, "arkouda.IPv4.update_hdf"]], "update_hdf() (arkouda.index method)": [[32, "arkouda.Index.update_hdf"]], "update_hdf() (arkouda.multiindex method)": [[32, "arkouda.MultiIndex.update_hdf"]], "update_hdf() (arkouda.segarray method)": [[32, "arkouda.SegArray.update_hdf"]], "update_hdf() (arkouda.strings method)": [[32, "arkouda.Strings.update_hdf"], [32, "id1055"], [32, "id171"], [32, "id427"], [32, "id784"]], "update_hdf() (arkouda.pdarray method)": [[32, "arkouda.pdarray.update_hdf"], [32, "id243"], [32, "id358"], [32, "id543"], [32, "id57"], [32, "id711"]], "update_hdf() (in module arkouda)": [[32, "arkouda.update_hdf"]], "update_size() (arkouda.dataframe method)": [[32, "arkouda.DataFrame.update_size"], [32, "id810"]], "upper() (arkouda.strings method)": [[32, "arkouda.Strings.upper"], [32, "id1017"], [32, "id133"], [32, "id389"], [32, "id746"]], "validate_key() (arkouda.series method)": [[32, "arkouda.Series.validate_key"]], "validate_val() (arkouda.series method)": [[32, "arkouda.Series.validate_val"]], "value_counts() (arkouda.series method)": [[32, "arkouda.Series.value_counts"]], "value_counts() (arkouda.pdarray method)": [[32, "arkouda.pdarray.value_counts"], [32, "id233"], [32, "id348"], [32, "id47"], [32, "id533"], [32, "id701"]], "value_counts() (in module arkouda)": [[32, "arkouda.value_counts"], [90, "arkouda.value_counts"]], "var() (arkouda.groupby method)": [[32, "arkouda.GroupBy.var"], [32, "id275"], [32, "id463"], [32, "id631"], [32, "id89"], [32, "id927"], [89, "arkouda.GroupBy.var"]], "var() (arkouda.pdarray method)": [[32, "arkouda.pdarray.var"], [32, "id219"], [32, "id33"], [32, "id334"], [32, "id519"], [32, "id687"], [90, "arkouda.pdarray.var"]], "var() (in module arkouda)": [[32, "arkouda.var"], [84, "arkouda.var"]], "week (arkouda.datetime property)": [[32, "arkouda.Datetime.week"], [32, "id1081"], [32, "id863"]], "weekday (arkouda.datetime property)": [[32, "arkouda.Datetime.weekday"], [32, "id1080"], [32, "id862"]], "weekofyear (arkouda.datetime property)": [[32, "arkouda.Datetime.weekofyear"], [32, "id1082"], [32, "id864"]], "where() (in module arkouda)": [[32, "arkouda.where"], [32, "id658"], [32, "id69"], [84, "arkouda.where"]], "write_log() (in module arkouda)": [[32, "arkouda.write_log"]], "xlogy() (in module arkouda)": [[32, "arkouda.xlogy"]], "year (arkouda.datetime property)": [[32, "arkouda.Datetime.year"], [32, "id1075"], [32, "id857"]], "zero_up() (in module arkouda)": [[32, "arkouda.zero_up"]], "zeros() (in module arkouda)": [[32, "arkouda.zeros"], [32, "id369"], [32, "id67"], [32, "id722"], [87, "arkouda.zeros"]], "zeros_like() (in module arkouda)": [[32, "arkouda.zeros_like"], [87, "arkouda.zeros_like"]], "index (class in arkouda.index)": [[33, "arkouda.index.Index"]], "multiindex (class in arkouda.index)": [[33, "arkouda.index.MultiIndex"]], "argsort() (arkouda.index.index method)": [[33, "arkouda.index.Index.argsort"]], "argsort() (arkouda.index.multiindex method)": [[33, "arkouda.index.MultiIndex.argsort"]], "arkouda.index": [[33, "module-arkouda.index"]], "concat() (arkouda.index.index method)": [[33, "arkouda.index.Index.concat"]], "concat() (arkouda.index.multiindex method)": [[33, "arkouda.index.MultiIndex.concat"]], "factory() (arkouda.index.index static method)": [[33, "arkouda.index.Index.factory"]], "from_return_msg() (arkouda.index.index class method)": [[33, "arkouda.index.Index.from_return_msg"]], "index (arkouda.index.index property)": [[33, "arkouda.index.Index.index"]], "index (arkouda.index.multiindex property)": [[33, "arkouda.index.MultiIndex.index"]], "is_registered() (arkouda.index.index method)": [[33, "arkouda.index.Index.is_registered"]], "is_registered() (arkouda.index.multiindex method)": [[33, "arkouda.index.MultiIndex.is_registered"]], "is_unique (arkouda.index.index property)": [[33, "arkouda.index.Index.is_unique"]], "lookup() (arkouda.index.index method)": [[33, "arkouda.index.Index.lookup"]], "lookup() (arkouda.index.multiindex method)": [[33, "arkouda.index.MultiIndex.lookup"]], "objtype (arkouda.index.index attribute)": [[33, "arkouda.index.Index.objType"]], "objtype (arkouda.index.multiindex attribute)": [[33, "arkouda.index.MultiIndex.objType"]], "register() (arkouda.index.index method)": [[33, "arkouda.index.Index.register"]], "register() (arkouda.index.multiindex method)": [[33, "arkouda.index.MultiIndex.register"]], "save() (arkouda.index.index method)": [[33, "arkouda.index.Index.save"]], "set_dtype() (arkouda.index.index method)": [[33, "arkouda.index.Index.set_dtype"]], "set_dtype() (arkouda.index.multiindex method)": [[33, "arkouda.index.MultiIndex.set_dtype"]], "shape (arkouda.index.index property)": [[33, "arkouda.index.Index.shape"]], "to_csv() (arkouda.index.index method)": [[33, "arkouda.index.Index.to_csv"]], "to_dict() (arkouda.index.index method)": [[33, "arkouda.index.Index.to_dict"]], "to_dict() (arkouda.index.multiindex method)": [[33, "arkouda.index.MultiIndex.to_dict"]], "to_hdf() (arkouda.index.index method)": [[33, "arkouda.index.Index.to_hdf"]], "to_hdf() (arkouda.index.multiindex method)": [[33, "arkouda.index.MultiIndex.to_hdf"]], "to_list() (arkouda.index.index method)": [[33, "arkouda.index.Index.to_list"]], "to_list() (arkouda.index.multiindex method)": [[33, "arkouda.index.MultiIndex.to_list"]], "to_ndarray() (arkouda.index.index method)": [[33, "arkouda.index.Index.to_ndarray"]], "to_ndarray() (arkouda.index.multiindex method)": [[33, "arkouda.index.MultiIndex.to_ndarray"]], "to_pandas() (arkouda.index.index method)": [[33, "arkouda.index.Index.to_pandas"]], "to_pandas() (arkouda.index.multiindex method)": [[33, "arkouda.index.MultiIndex.to_pandas"]], "to_parquet() (arkouda.index.index method)": [[33, "arkouda.index.Index.to_parquet"]], "unregister() (arkouda.index.index method)": [[33, "arkouda.index.Index.unregister"]], "unregister() (arkouda.index.multiindex method)": [[33, "arkouda.index.MultiIndex.unregister"]], "update_hdf() (arkouda.index.index method)": [[33, "arkouda.index.Index.update_hdf"]], "update_hdf() (arkouda.index.multiindex method)": [[33, "arkouda.index.MultiIndex.update_hdf"]], "allsymbols (in module arkouda.infoclass)": [[34, "arkouda.infoclass.AllSymbols"]], "registeredsymbols (in module arkouda.infoclass)": [[34, "arkouda.infoclass.RegisteredSymbols"]], "arkouda.infoclass": [[34, "module-arkouda.infoclass"]], "information() (in module arkouda.infoclass)": [[34, "arkouda.infoclass.information"]], "list_registry() (in module arkouda.infoclass)": [[34, "arkouda.infoclass.list_registry"]], "list_symbol_table() (in module arkouda.infoclass)": [[34, "arkouda.infoclass.list_symbol_table"]], "pretty_print_information() (in module arkouda.infoclass)": [[34, "arkouda.infoclass.pretty_print_information"]], "arkouda.io": [[35, "module-arkouda.io"]], "export() (in module arkouda.io)": [[35, "arkouda.io.export"]], "get_columns() (in module arkouda.io)": [[35, "arkouda.io.get_columns"]], "get_datasets() (in module arkouda.io)": [[35, "arkouda.io.get_datasets"]], "get_filetype() (in module arkouda.io)": [[35, "arkouda.io.get_filetype"]], "get_null_indices() (in module arkouda.io)": [[35, "arkouda.io.get_null_indices"]], "import_data() (in module arkouda.io)": [[35, "arkouda.io.import_data"]], "load() (in module arkouda.io)": [[35, "arkouda.io.load"]], "load_all() (in module arkouda.io)": [[35, "arkouda.io.load_all"]], "ls() (in module arkouda.io)": [[35, "arkouda.io.ls"]], "ls_csv() (in module arkouda.io)": [[35, "arkouda.io.ls_csv"]], "read() (in module arkouda.io)": [[35, "arkouda.io.read"]], "read_csv() (in module arkouda.io)": [[35, "arkouda.io.read_csv"]], "read_hdf() (in module arkouda.io)": [[35, "arkouda.io.read_hdf"]], "read_parquet() (in module arkouda.io)": [[35, "arkouda.io.read_parquet"]], "read_tagged_data() (in module arkouda.io)": [[35, "arkouda.io.read_tagged_data"]], "receive() (in module arkouda.io)": [[35, "arkouda.io.receive"]], "receive_dataframe() (in module arkouda.io)": [[35, "arkouda.io.receive_dataframe"]], "restore() (in module arkouda.io)": [[35, "arkouda.io.restore"]], "save_all() (in module arkouda.io)": [[35, "arkouda.io.save_all"]], "snapshot() (in module arkouda.io)": [[35, "arkouda.io.snapshot"]], "to_csv() (in module arkouda.io)": [[35, "arkouda.io.to_csv"]], "to_hdf() (in module arkouda.io)": [[35, "arkouda.io.to_hdf"]], "to_parquet() (in module arkouda.io)": [[35, "arkouda.io.to_parquet"]], "update_hdf() (in module arkouda.io)": [[35, "arkouda.io.update_hdf"]], "arkouda.io_util": [[36, "module-arkouda.io_util"]], "delimited_file_to_dict() (in module arkouda.io_util)": [[36, "arkouda.io_util.delimited_file_to_dict"]], "dict_to_delimited_file() (in module arkouda.io_util)": [[36, "arkouda.io_util.dict_to_delimited_file"]], "get_directory() (in module arkouda.io_util)": [[36, "arkouda.io_util.get_directory"]], "write_line_to_file() (in module arkouda.io_util)": [[36, "arkouda.io_util.write_line_to_file"]], "arkouda.join": [[37, "module-arkouda.join"]], "compute_join_size() (in module arkouda.join)": [[37, "arkouda.join.compute_join_size"]], "gen_ranges() (in module arkouda.join)": [[37, "arkouda.join.gen_ranges"]], "join_on_eq_with_dt() (in module arkouda.join)": [[37, "arkouda.join.join_on_eq_with_dt"]], "critical (arkouda.logger.loglevel attribute)": [[38, "arkouda.logger.LogLevel.CRITICAL"]], "debug (arkouda.logger.loglevel attribute)": [[38, "arkouda.logger.LogLevel.DEBUG"]], "error (arkouda.logger.loglevel attribute)": [[38, "arkouda.logger.LogLevel.ERROR"]], "info (arkouda.logger.loglevel attribute)": [[38, "arkouda.logger.LogLevel.INFO"]], "loglevel (class in arkouda.logger)": [[38, "arkouda.logger.LogLevel"]], "warn (arkouda.logger.loglevel attribute)": [[38, "arkouda.logger.LogLevel.WARN"]], "arkouda.logger": [[38, "module-arkouda.logger"]], "disableverbose() (in module arkouda.logger)": [[38, "arkouda.logger.disableVerbose"]], "enableverbose() (in module arkouda.logger)": [[38, "arkouda.logger.enableVerbose"]], "write_log() (in module arkouda.logger)": [[38, "arkouda.logger.write_log"]], "match (class in arkouda.match)": [[39, "arkouda.match.Match"]], "arkouda.match": [[39, "module-arkouda.match"]], "end() (arkouda.match.match method)": [[39, "arkouda.match.Match.end"], [97, "arkouda.match.Match.end"]], "find_matches() (arkouda.match.match method)": [[39, "arkouda.match.Match.find_matches"], [97, "arkouda.match.Match.find_matches"]], "group() (arkouda.match.match method)": [[39, "arkouda.match.Match.group"], [97, "arkouda.match.Match.group"]], "match_type() (arkouda.match.match method)": [[39, "arkouda.match.Match.match_type"], [97, "arkouda.match.Match.match_type"]], "matched() (arkouda.match.match method)": [[39, "arkouda.match.Match.matched"], [97, "arkouda.match.Match.matched"]], "start() (arkouda.match.match method)": [[39, "arkouda.match.Match.start"], [97, "arkouda.match.Match.start"]], "locationsinfo (arkouda.matcher.matcher attribute)": [[40, "arkouda.matcher.Matcher.LocationsInfo"]], "matcher (class in arkouda.matcher)": [[40, "arkouda.matcher.Matcher"]], "arkouda.matcher": [[40, "module-arkouda.matcher"]], "find_locations() (arkouda.matcher.matcher method)": [[40, "arkouda.matcher.Matcher.find_locations"]], "findall() (arkouda.matcher.matcher method)": [[40, "arkouda.matcher.Matcher.findall"]], "get_match() (arkouda.matcher.matcher method)": [[40, "arkouda.matcher.Matcher.get_match"]], "split() (arkouda.matcher.matcher method)": [[40, "arkouda.matcher.Matcher.split"]], "sub() (arkouda.matcher.matcher method)": [[40, "arkouda.matcher.Matcher.sub"]], "errormode (class in arkouda.numeric)": [[41, "arkouda.numeric.ErrorMode"]], "abs() (in module arkouda.numeric)": [[41, "arkouda.numeric.abs"]], "arccos() (in module arkouda.numeric)": [[41, "arkouda.numeric.arccos"]], "arccosh() (in module arkouda.numeric)": [[41, "arkouda.numeric.arccosh"]], "arcsin() (in module arkouda.numeric)": [[41, "arkouda.numeric.arcsin"]], "arcsinh() (in module arkouda.numeric)": [[41, "arkouda.numeric.arcsinh"]], "arctan() (in module arkouda.numeric)": [[41, "arkouda.numeric.arctan"]], "arctan2() (in module arkouda.numeric)": [[41, "arkouda.numeric.arctan2"]], "arctanh() (in module arkouda.numeric)": [[41, "arkouda.numeric.arctanh"]], "arkouda.numeric": [[41, "module-arkouda.numeric"]], "cast() (in module arkouda.numeric)": [[41, "arkouda.numeric.cast"]], "ceil() (in module arkouda.numeric)": [[41, "arkouda.numeric.ceil"]], "cos() (in module arkouda.numeric)": [[41, "arkouda.numeric.cos"]], "cosh() (in module arkouda.numeric)": [[41, "arkouda.numeric.cosh"]], "cumprod() (in module arkouda.numeric)": [[41, "arkouda.numeric.cumprod"]], "cumsum() (in module arkouda.numeric)": [[41, "arkouda.numeric.cumsum"]], "deg2rad() (in module arkouda.numeric)": [[41, "arkouda.numeric.deg2rad"]], "exp() (in module arkouda.numeric)": [[41, "arkouda.numeric.exp"]], "expm1() (in module arkouda.numeric)": [[41, "arkouda.numeric.expm1"]], "floor() (in module arkouda.numeric)": [[41, "arkouda.numeric.floor"]], "hash() (in module arkouda.numeric)": [[41, "arkouda.numeric.hash"]], "histogram() (in module arkouda.numeric)": [[41, "arkouda.numeric.histogram"]], "histogram2d() (in module arkouda.numeric)": [[41, "arkouda.numeric.histogram2d"]], "histogramdd() (in module arkouda.numeric)": [[41, "arkouda.numeric.histogramdd"]], "ignore (arkouda.numeric.errormode attribute)": [[41, "arkouda.numeric.ErrorMode.ignore"]], "isfinite() (in module arkouda.numeric)": [[41, "arkouda.numeric.isfinite"]], "isinf() (in module arkouda.numeric)": [[41, "arkouda.numeric.isinf"]], "isnan() (in module arkouda.numeric)": [[41, "arkouda.numeric.isnan"]], "log() (in module arkouda.numeric)": [[41, "arkouda.numeric.log"]], "log10() (in module arkouda.numeric)": [[41, "arkouda.numeric.log10"]], "log1p() (in module arkouda.numeric)": [[41, "arkouda.numeric.log1p"]], "log2() (in module arkouda.numeric)": [[41, "arkouda.numeric.log2"]], "rad2deg() (in module arkouda.numeric)": [[41, "arkouda.numeric.rad2deg"]], "return_validity (arkouda.numeric.errormode attribute)": [[41, "arkouda.numeric.ErrorMode.return_validity"]], "round() (in module arkouda.numeric)": [[41, "arkouda.numeric.round"]], "sign() (in module arkouda.numeric)": [[41, "arkouda.numeric.sign"]], "sin() (in module arkouda.numeric)": [[41, "arkouda.numeric.sin"]], "sinh() (in module arkouda.numeric)": [[41, "arkouda.numeric.sinh"]], "square() (in module arkouda.numeric)": [[41, "arkouda.numeric.square"]], "strict (arkouda.numeric.errormode attribute)": [[41, "arkouda.numeric.ErrorMode.strict"]], "tan() (in module arkouda.numeric)": [[41, "arkouda.numeric.tan"]], "tanh() (in module arkouda.numeric)": [[41, "arkouda.numeric.tanh"]], "trunc() (in module arkouda.numeric)": [[41, "arkouda.numeric.trunc"]], "value_counts() (in module arkouda.numeric)": [[41, "arkouda.numeric.value_counts"]], "where() (in module arkouda.numeric)": [[41, "arkouda.numeric.where"]], "binops (arkouda.pdarrayclass.pdarray attribute)": [[42, "arkouda.pdarrayclass.pdarray.BinOps"]], "opeqops (arkouda.pdarrayclass.pdarray attribute)": [[42, "arkouda.pdarrayclass.pdarray.OpEqOps"]], "all() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.all"]], "all() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.all"]], "any() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.any"]], "any() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.any"]], "argmax() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.argmax"]], "argmax() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.argmax"]], "argmaxk() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.argmaxk"]], "argmaxk() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.argmaxk"]], "argmin() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.argmin"]], "argmin() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.argmin"]], "argmink() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.argmink"]], "argmink() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.argmink"]], "arkouda.pdarrayclass": [[42, "module-arkouda.pdarrayclass"]], "astype() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.astype"]], "attach() (arkouda.pdarrayclass.pdarray static method)": [[42, "arkouda.pdarrayclass.pdarray.attach"]], "attach_pdarray() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.attach_pdarray"]], "bigint_to_uint_arrays() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.bigint_to_uint_arrays"]], "broadcast_to_shape() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.broadcast_to_shape"]], "clear() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.clear"]], "clz() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.clz"]], "clz() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.clz"]], "corr() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.corr"]], "corr() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.corr"]], "cov() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.cov"]], "cov() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.cov"]], "ctz() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.ctz"]], "ctz() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.ctz"]], "divmod() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.divmod"]], "dtype (arkouda.pdarrayclass.pdarray attribute)": [[42, "arkouda.pdarrayclass.pdarray.dtype"]], "fill() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.fill"]], "fmod() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.fmod"]], "format_other() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.format_other"]], "info() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.info"]], "is_registered() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.is_registered"]], "is_sorted() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.is_sorted"]], "is_sorted() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.is_sorted"]], "itemsize (arkouda.pdarrayclass.pdarray attribute)": [[42, "arkouda.pdarrayclass.pdarray.itemsize"]], "max() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.max"]], "max() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.max"]], "max_bits (arkouda.pdarrayclass.pdarray property)": [[42, "arkouda.pdarrayclass.pdarray.max_bits"]], "maxk() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.maxk"]], "maxk() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.maxk"]], "mean() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.mean"]], "mean() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.mean"]], "min() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.min"]], "min() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.min"]], "mink() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.mink"]], "mink() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.mink"]], "mod() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.mod"]], "name (arkouda.pdarrayclass.pdarray attribute)": [[42, "arkouda.pdarrayclass.pdarray.name"]], "ndim (arkouda.pdarrayclass.pdarray attribute)": [[42, "arkouda.pdarrayclass.pdarray.ndim"]], "objtype (arkouda.pdarrayclass.pdarray attribute)": [[42, "arkouda.pdarrayclass.pdarray.objType"]], "opeq() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.opeq"]], "parity() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.parity"]], "parity() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.parity"]], "pdarray (class in arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.pdarray"]], "popcount() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.popcount"]], "popcount() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.popcount"]], "power() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.power"]], "pretty_print_info() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.pretty_print_info"]], "prod() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.prod"]], "prod() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.prod"]], "register() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.register"]], "reshape() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.reshape"]], "rotl() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.rotl"]], "rotl() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.rotl"]], "rotr() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.rotr"]], "rotr() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.rotr"]], "save() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.save"]], "shape (arkouda.pdarrayclass.pdarray attribute)": [[42, "arkouda.pdarrayclass.pdarray.shape"]], "size (arkouda.pdarrayclass.pdarray attribute)": [[42, "arkouda.pdarrayclass.pdarray.size"]], "slice_bits() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.slice_bits"]], "sqrt() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.sqrt"]], "std() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.std"]], "std() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.std"]], "sum() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.sum"]], "sum() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.sum"]], "to_csv() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.to_csv"]], "to_cuda() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.to_cuda"]], "to_hdf() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.to_hdf"]], "to_list() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.to_list"]], "to_ndarray() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.to_ndarray"]], "to_parquet() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.to_parquet"]], "transfer() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.transfer"]], "unregister() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.unregister"]], "unregister_pdarray_by_name() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.unregister_pdarray_by_name"]], "update_hdf() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.update_hdf"]], "value_counts() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.value_counts"]], "var() (arkouda.pdarrayclass.pdarray method)": [[42, "arkouda.pdarrayclass.pdarray.var"]], "var() (in module arkouda.pdarrayclass)": [[42, "arkouda.pdarrayclass.var"]], "arange() (in module arkouda.pdarraycreation)": [[43, "arkouda.pdarraycreation.arange"]], "arkouda.pdarraycreation": [[43, "module-arkouda.pdarraycreation"]], "array() (in module arkouda.pdarraycreation)": [[43, "arkouda.pdarraycreation.array"]], "bigint_from_uint_arrays() (in module arkouda.pdarraycreation)": [[43, "arkouda.pdarraycreation.bigint_from_uint_arrays"]], "from_series() (in module arkouda.pdarraycreation)": [[43, "arkouda.pdarraycreation.from_series"]], "full() (in module arkouda.pdarraycreation)": [[43, "arkouda.pdarraycreation.full"]], "full_like() (in module arkouda.pdarraycreation)": [[43, "arkouda.pdarraycreation.full_like"]], "linspace() (in module arkouda.pdarraycreation)": [[43, "arkouda.pdarraycreation.linspace"]], "ones() (in module arkouda.pdarraycreation)": [[43, "arkouda.pdarraycreation.ones"]], "ones_like() (in module arkouda.pdarraycreation)": [[43, "arkouda.pdarraycreation.ones_like"]], "randint() (in module arkouda.pdarraycreation)": [[43, "arkouda.pdarraycreation.randint"]], "random_strings_lognormal() (in module arkouda.pdarraycreation)": [[43, "arkouda.pdarraycreation.random_strings_lognormal"]], "random_strings_uniform() (in module arkouda.pdarraycreation)": [[43, "arkouda.pdarraycreation.random_strings_uniform"]], "standard_normal() (in module arkouda.pdarraycreation)": [[43, "arkouda.pdarraycreation.standard_normal"]], "uniform() (in module arkouda.pdarraycreation)": [[43, "arkouda.pdarraycreation.uniform"]], "zeros() (in module arkouda.pdarraycreation)": [[43, "arkouda.pdarraycreation.zeros"]], "zeros_like() (in module arkouda.pdarraycreation)": [[43, "arkouda.pdarraycreation.zeros_like"]], "arkouda.pdarraysetops": [[44, "module-arkouda.pdarraysetops"]], "concatenate() (in module arkouda.pdarraysetops)": [[44, "arkouda.pdarraysetops.concatenate"]], "in1d() (in module arkouda.pdarraysetops)": [[44, "arkouda.pdarraysetops.in1d"]], "indexof1d() (in module arkouda.pdarraysetops)": [[44, "arkouda.pdarraysetops.indexof1d"]], "intersect1d() (in module arkouda.pdarraysetops)": [[44, "arkouda.pdarraysetops.intersect1d"]], "setdiff1d() (in module arkouda.pdarraysetops)": [[44, "arkouda.pdarraysetops.setdiff1d"]], "setxor1d() (in module arkouda.pdarraysetops)": [[44, "arkouda.pdarraysetops.setxor1d"]], "union1d() (in module arkouda.pdarraysetops)": [[44, "arkouda.pdarraysetops.union1d"]], "arkouda.plotting": [[45, "module-arkouda.plotting"]], "hist_all() (in module arkouda.plotting)": [[45, "arkouda.plotting.hist_all"]], "plot_dist() (in module arkouda.plotting)": [[45, "arkouda.plotting.plot_dist"]], "row (class in arkouda.row)": [[46, "arkouda.row.Row"]], "arkouda.row": [[46, "module-arkouda.row"]], "arkouda.security": [[47, "module-arkouda.security"]], "generate_token() (in module arkouda.security)": [[47, "arkouda.security.generate_token"]], "generate_username_token_json() (in module arkouda.security)": [[47, "arkouda.security.generate_username_token_json"]], "get_arkouda_client_directory() (in module arkouda.security)": [[47, "arkouda.security.get_arkouda_client_directory"]], "get_home_directory() (in module arkouda.security)": [[47, "arkouda.security.get_home_directory"]], "get_username() (in module arkouda.security)": [[47, "arkouda.security.get_username"]], "username_tokenizer (in module arkouda.security)": [[47, "arkouda.security.username_tokenizer"]], "and() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.AND"]], "len_suffix (in module arkouda.segarray)": [[48, "arkouda.segarray.LEN_SUFFIX"]], "or() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.OR"]], "seg_suffix (in module arkouda.segarray)": [[48, "arkouda.segarray.SEG_SUFFIX"]], "segarray (class in arkouda.segarray)": [[48, "arkouda.segarray.SegArray"]], "val_suffix (in module arkouda.segarray)": [[48, "arkouda.segarray.VAL_SUFFIX"]], "xor() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.XOR"]], "aggregate() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.aggregate"]], "all() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.all"]], "any() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.any"]], "append() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.append"]], "append_single() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.append_single"]], "argmax() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.argmax"]], "argmin() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.argmin"]], "arkouda.segarray": [[48, "module-arkouda.segarray"]], "attach() (arkouda.segarray.segarray class method)": [[48, "arkouda.segarray.SegArray.attach"]], "concat() (arkouda.segarray.segarray class method)": [[48, "arkouda.segarray.SegArray.concat"]], "copy() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.copy"]], "filter() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.filter"]], "from_multi_array() (arkouda.segarray.segarray class method)": [[48, "arkouda.segarray.SegArray.from_multi_array"]], "from_parts() (arkouda.segarray.segarray class method)": [[48, "arkouda.segarray.SegArray.from_parts"]], "from_return_msg() (arkouda.segarray.segarray class method)": [[48, "arkouda.segarray.SegArray.from_return_msg"]], "get_jth() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.get_jth"]], "get_length_n() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.get_length_n"]], "get_ngrams() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.get_ngrams"]], "get_prefixes() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.get_prefixes"]], "get_suffixes() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.get_suffixes"]], "grouping (arkouda.segarray.segarray property)": [[48, "arkouda.segarray.SegArray.grouping"]], "hash() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.hash"]], "intersect() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.intersect"]], "is_registered() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.is_registered"]], "load() (arkouda.segarray.segarray class method)": [[48, "arkouda.segarray.SegArray.load"]], "max() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.max"]], "mean() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.mean"]], "min() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.min"]], "non_empty (arkouda.segarray.segarray property)": [[48, "arkouda.segarray.SegArray.non_empty"]], "nunique() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.nunique"]], "objtype (arkouda.segarray.segarray attribute)": [[48, "arkouda.segarray.SegArray.objType"]], "prepend_single() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.prepend_single"]], "prod() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.prod"]], "read_hdf() (arkouda.segarray.segarray class method)": [[48, "arkouda.segarray.SegArray.read_hdf"]], "register() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.register"]], "remove_repeats() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.remove_repeats"]], "save() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.save"]], "segarray() (in module arkouda.segarray)": [[48, "arkouda.segarray.segarray"]], "set_jth() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.set_jth"]], "setdiff() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.setdiff"]], "setxor() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.setxor"]], "sum() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.sum"]], "to_hdf() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.to_hdf"]], "to_list() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.to_list"]], "to_ndarray() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.to_ndarray"]], "to_parquet() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.to_parquet"]], "transfer() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.transfer"]], "union() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.union"]], "unique() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.unique"]], "unregister() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.unregister"]], "unregister_segarray_by_name() (arkouda.segarray.segarray static method)": [[48, "arkouda.segarray.SegArray.unregister_segarray_by_name"]], "update_hdf() (arkouda.segarray.segarray method)": [[48, "arkouda.segarray.SegArray.update_hdf"]], "series (class in arkouda.series)": [[49, "arkouda.series.Series"]], "add() (arkouda.series.series method)": [[49, "arkouda.series.Series.add"]], "arkouda.series": [[49, "module-arkouda.series"]], "at (arkouda.series.series property)": [[49, "arkouda.series.Series.at"]], "attach() (arkouda.series.series static method)": [[49, "arkouda.series.Series.attach"]], "concat() (arkouda.series.series static method)": [[49, "arkouda.series.Series.concat"]], "diff() (arkouda.series.series method)": [[49, "arkouda.series.Series.diff"]], "dt (arkouda.series.series attribute)": [[49, "arkouda.series.Series.dt"]], "from_return_msg() (arkouda.series.series class method)": [[49, "arkouda.series.Series.from_return_msg"]], "has_repeat_labels() (arkouda.series.series method)": [[49, "arkouda.series.Series.has_repeat_labels"]], "head() (arkouda.series.series method)": [[49, "arkouda.series.Series.head"]], "iat (arkouda.series.series property)": [[49, "arkouda.series.Series.iat"]], "iloc (arkouda.series.series property)": [[49, "arkouda.series.Series.iloc"]], "is_registered() (arkouda.series.series method)": [[49, "arkouda.series.Series.is_registered"]], "isin() (arkouda.series.series method)": [[49, "arkouda.series.Series.isin"]], "loc (arkouda.series.series property)": [[49, "arkouda.series.Series.loc"]], "locate() (arkouda.series.series method)": [[49, "arkouda.series.Series.locate"]], "objtype (arkouda.series.series attribute)": [[49, "arkouda.series.Series.objType"]], "pdconcat() (arkouda.series.series static method)": [[49, "arkouda.series.Series.pdconcat"]], "register() (arkouda.series.series method)": [[49, "arkouda.series.Series.register"]], "shape (arkouda.series.series property)": [[49, "arkouda.series.Series.shape"]], "sort_index() (arkouda.series.series method)": [[49, "arkouda.series.Series.sort_index"]], "sort_values() (arkouda.series.series method)": [[49, "arkouda.series.Series.sort_values"]], "str_acc (arkouda.series.series attribute)": [[49, "arkouda.series.Series.str_acc"]], "tail() (arkouda.series.series method)": [[49, "arkouda.series.Series.tail"]], "to_dataframe() (arkouda.series.series method)": [[49, "arkouda.series.Series.to_dataframe"]], "to_list() (arkouda.series.series method)": [[49, "arkouda.series.Series.to_list"]], "to_pandas() (arkouda.series.series method)": [[49, "arkouda.series.Series.to_pandas"]], "topn() (arkouda.series.series method)": [[49, "arkouda.series.Series.topn"]], "unregister() (arkouda.series.series method)": [[49, "arkouda.series.Series.unregister"]], "validate_key() (arkouda.series.series method)": [[49, "arkouda.series.Series.validate_key"]], "validate_val() (arkouda.series.series method)": [[49, "arkouda.series.Series.validate_val"]], "value_counts() (arkouda.series.series method)": [[49, "arkouda.series.Series.value_counts"]], "argsort() (in module arkouda.sorting)": [[50, "arkouda.sorting.argsort"]], "arkouda.sorting": [[50, "module-arkouda.sorting"]], "coargsort() (in module arkouda.sorting)": [[50, "arkouda.sorting.coargsort"]], "sort() (in module arkouda.sorting)": [[50, "arkouda.sorting.sort"]], "binops (arkouda.strings.strings attribute)": [[51, "arkouda.strings.Strings.BinOps"]], "strings (class in arkouda.strings)": [[51, "arkouda.strings.Strings"]], "arkouda.strings": [[51, "module-arkouda.strings"]], "astype() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.astype"]], "attach() (arkouda.strings.strings static method)": [[51, "arkouda.strings.Strings.attach"]], "cached_regex_patterns() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.cached_regex_patterns"]], "contains() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.contains"]], "decode() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.decode"]], "dtype (arkouda.strings.strings attribute)": [[51, "arkouda.strings.Strings.dtype"]], "encode() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.encode"]], "endswith() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.endswith"]], "entry (arkouda.strings.strings attribute)": [[51, "arkouda.strings.Strings.entry"]], "find_locations() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.find_locations"]], "findall() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.findall"]], "flatten() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.flatten"]], "from_parts() (arkouda.strings.strings static method)": [[51, "arkouda.strings.Strings.from_parts"]], "from_return_msg() (arkouda.strings.strings static method)": [[51, "arkouda.strings.Strings.from_return_msg"]], "fullmatch() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.fullmatch"]], "get_bytes() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.get_bytes"]], "get_lengths() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.get_lengths"]], "get_offsets() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.get_offsets"]], "get_prefixes() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.get_prefixes"]], "get_suffixes() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.get_suffixes"]], "group() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.group"]], "hash() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.hash"]], "info() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.info"]], "is_registered() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.is_registered"]], "isalnum() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.isalnum"]], "isalpha() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.isalpha"]], "isdigit() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.isdigit"]], "isempty() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.isempty"]], "islower() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.islower"]], "isspace() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.isspace"]], "istitle() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.istitle"]], "isupper() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.isupper"]], "logger (arkouda.strings.strings attribute)": [[51, "arkouda.strings.Strings.logger"]], "lower() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.lower"]], "lstick() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.lstick"]], "match() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.match"]], "nbytes (arkouda.strings.strings attribute)": [[51, "arkouda.strings.Strings.nbytes"]], "ndim (arkouda.strings.strings attribute)": [[51, "arkouda.strings.Strings.ndim"]], "objtype (arkouda.strings.strings attribute)": [[51, "arkouda.strings.Strings.objType"]], "peel() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.peel"]], "pretty_print_info() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.pretty_print_info"]], "purge_cached_regex_patterns() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.purge_cached_regex_patterns"]], "register() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.register"]], "rpeel() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.rpeel"]], "save() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.save"]], "search() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.search"]], "shape (arkouda.strings.strings attribute)": [[51, "arkouda.strings.Strings.shape"]], "size (arkouda.strings.strings attribute)": [[51, "arkouda.strings.Strings.size"]], "split() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.split"]], "startswith() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.startswith"]], "stick() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.stick"]], "strip() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.strip"]], "sub() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.sub"]], "subn() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.subn"]], "title() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.title"]], "to_csv() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.to_csv"]], "to_hdf() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.to_hdf"]], "to_list() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.to_list"]], "to_ndarray() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.to_ndarray"]], "to_parquet() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.to_parquet"]], "transfer() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.transfer"]], "unregister() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.unregister"]], "unregister_strings_by_name() (arkouda.strings.strings static method)": [[51, "arkouda.strings.Strings.unregister_strings_by_name"]], "update_hdf() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.update_hdf"]], "upper() (arkouda.strings.strings method)": [[51, "arkouda.strings.Strings.upper"]], "datetime (class in arkouda.timeclass)": [[52, "arkouda.timeclass.Datetime"]], "timedelta (class in arkouda.timeclass)": [[52, "arkouda.timeclass.Timedelta"]], "abs() (arkouda.timeclass.timedelta method)": [[52, "arkouda.timeclass.Timedelta.abs"]], "arkouda.timeclass": [[52, "module-arkouda.timeclass"]], "components (arkouda.timeclass.timedelta property)": [[52, "arkouda.timeclass.Timedelta.components"]], "date (arkouda.timeclass.datetime property)": [[52, "arkouda.timeclass.Datetime.date"]], "date_range() (in module arkouda.timeclass)": [[52, "arkouda.timeclass.date_range"]], "day (arkouda.timeclass.datetime property)": [[52, "arkouda.timeclass.Datetime.day"]], "day_of_week (arkouda.timeclass.datetime property)": [[52, "arkouda.timeclass.Datetime.day_of_week"]], "day_of_year (arkouda.timeclass.datetime property)": [[52, "arkouda.timeclass.Datetime.day_of_year"]], "dayofweek (arkouda.timeclass.datetime property)": [[52, "arkouda.timeclass.Datetime.dayofweek"]], "dayofyear (arkouda.timeclass.datetime property)": [[52, "arkouda.timeclass.Datetime.dayofyear"]], "days (arkouda.timeclass.timedelta property)": [[52, "arkouda.timeclass.Timedelta.days"]], "hour (arkouda.timeclass.datetime property)": [[52, "arkouda.timeclass.Datetime.hour"]], "is_leap_year (arkouda.timeclass.datetime property)": [[52, "arkouda.timeclass.Datetime.is_leap_year"]], "is_registered() (arkouda.timeclass.datetime method)": [[52, "arkouda.timeclass.Datetime.is_registered"]], "is_registered() (arkouda.timeclass.timedelta method)": [[52, "arkouda.timeclass.Timedelta.is_registered"]], "isocalendar() (arkouda.timeclass.datetime method)": [[52, "arkouda.timeclass.Datetime.isocalendar"]], "microsecond (arkouda.timeclass.datetime property)": [[52, "arkouda.timeclass.Datetime.microsecond"]], "microseconds (arkouda.timeclass.timedelta property)": [[52, "arkouda.timeclass.Timedelta.microseconds"]], "millisecond (arkouda.timeclass.datetime property)": [[52, "arkouda.timeclass.Datetime.millisecond"]], "minute (arkouda.timeclass.datetime property)": [[52, "arkouda.timeclass.Datetime.minute"]], "month (arkouda.timeclass.datetime property)": [[52, "arkouda.timeclass.Datetime.month"]], "nanosecond (arkouda.timeclass.datetime property)": [[52, "arkouda.timeclass.Datetime.nanosecond"]], "nanoseconds (arkouda.timeclass.timedelta property)": [[52, "arkouda.timeclass.Timedelta.nanoseconds"]], "register() (arkouda.timeclass.datetime method)": [[52, "arkouda.timeclass.Datetime.register"]], "register() (arkouda.timeclass.timedelta method)": [[52, "arkouda.timeclass.Timedelta.register"]], "second (arkouda.timeclass.datetime property)": [[52, "arkouda.timeclass.Datetime.second"]], "seconds (arkouda.timeclass.timedelta property)": [[52, "arkouda.timeclass.Timedelta.seconds"]], "special_objtype (arkouda.timeclass.datetime attribute)": [[52, "arkouda.timeclass.Datetime.special_objType"]], "special_objtype (arkouda.timeclass.timedelta attribute)": [[52, "arkouda.timeclass.Timedelta.special_objType"]], "std() (arkouda.timeclass.timedelta method)": [[52, "arkouda.timeclass.Timedelta.std"]], "sum() (arkouda.timeclass.datetime method)": [[52, "arkouda.timeclass.Datetime.sum"]], "sum() (arkouda.timeclass.timedelta method)": [[52, "arkouda.timeclass.Timedelta.sum"]], "supported_opeq (arkouda.timeclass.datetime attribute)": [[52, "arkouda.timeclass.Datetime.supported_opeq"]], "supported_opeq (arkouda.timeclass.timedelta attribute)": [[52, "arkouda.timeclass.Timedelta.supported_opeq"]], "supported_with_datetime (arkouda.timeclass.datetime attribute)": [[52, "arkouda.timeclass.Datetime.supported_with_datetime"]], "supported_with_datetime (arkouda.timeclass.timedelta attribute)": [[52, "arkouda.timeclass.Timedelta.supported_with_datetime"]], "supported_with_pdarray (arkouda.timeclass.datetime attribute)": [[52, "arkouda.timeclass.Datetime.supported_with_pdarray"]], "supported_with_pdarray (arkouda.timeclass.timedelta attribute)": [[52, "arkouda.timeclass.Timedelta.supported_with_pdarray"]], "supported_with_r_datetime (arkouda.timeclass.datetime attribute)": [[52, "arkouda.timeclass.Datetime.supported_with_r_datetime"]], "supported_with_r_datetime (arkouda.timeclass.timedelta attribute)": [[52, "arkouda.timeclass.Timedelta.supported_with_r_datetime"]], "supported_with_r_pdarray (arkouda.timeclass.datetime attribute)": [[52, "arkouda.timeclass.Datetime.supported_with_r_pdarray"]], "supported_with_r_pdarray (arkouda.timeclass.timedelta attribute)": [[52, "arkouda.timeclass.Timedelta.supported_with_r_pdarray"]], "supported_with_r_timedelta (arkouda.timeclass.datetime attribute)": [[52, "arkouda.timeclass.Datetime.supported_with_r_timedelta"]], "supported_with_r_timedelta (arkouda.timeclass.timedelta attribute)": [[52, "arkouda.timeclass.Timedelta.supported_with_r_timedelta"]], "supported_with_timedelta (arkouda.timeclass.datetime attribute)": [[52, "arkouda.timeclass.Datetime.supported_with_timedelta"]], "supported_with_timedelta (arkouda.timeclass.timedelta attribute)": [[52, "arkouda.timeclass.Timedelta.supported_with_timedelta"]], "timedelta_range() (in module arkouda.timeclass)": [[52, "arkouda.timeclass.timedelta_range"]], "to_pandas() (arkouda.timeclass.datetime method)": [[52, "arkouda.timeclass.Datetime.to_pandas"]], "to_pandas() (arkouda.timeclass.timedelta method)": [[52, "arkouda.timeclass.Timedelta.to_pandas"]], "total_seconds() (arkouda.timeclass.timedelta method)": [[52, "arkouda.timeclass.Timedelta.total_seconds"]], "unregister() (arkouda.timeclass.datetime method)": [[52, "arkouda.timeclass.Datetime.unregister"]], "unregister() (arkouda.timeclass.timedelta method)": [[52, "arkouda.timeclass.Timedelta.unregister"]], "week (arkouda.timeclass.datetime property)": [[52, "arkouda.timeclass.Datetime.week"]], "weekday (arkouda.timeclass.datetime property)": [[52, "arkouda.timeclass.Datetime.weekday"]], "weekofyear (arkouda.timeclass.datetime property)": [[52, "arkouda.timeclass.Datetime.weekofyear"]], "year (arkouda.timeclass.datetime property)": [[52, "arkouda.timeclass.Datetime.year"]], "arkouda.util": [[53, "module-arkouda.util"]], "attach() (in module arkouda.util)": [[53, "arkouda.util.attach"]], "attach_all() (in module arkouda.util)": [[53, "arkouda.util.attach_all"]], "broadcast_dims() (in module arkouda.util)": [[53, "arkouda.util.broadcast_dims"]], "concatenate() (in module arkouda.util)": [[53, "arkouda.util.concatenate"]], "convert_if_categorical() (in module arkouda.util)": [[53, "arkouda.util.convert_if_categorical"]], "enrich_inplace() (in module arkouda.util)": [[53, "arkouda.util.enrich_inplace"]], "expand() (in module arkouda.util)": [[53, "arkouda.util.expand"]], "generic_concat() (in module arkouda.util)": [[53, "arkouda.util.generic_concat"]], "get_callback() (in module arkouda.util)": [[53, "arkouda.util.get_callback"]], "identity() (in module arkouda.util)": [[53, "arkouda.util.identity"]], "invert_permutation() (in module arkouda.util)": [[53, "arkouda.util.invert_permutation"]], "is_registered() (in module arkouda.util)": [[53, "arkouda.util.is_registered"]], "most_common() (in module arkouda.util)": [[53, "arkouda.util.most_common"]], "register() (in module arkouda.util)": [[53, "arkouda.util.register"]], "register_all() (in module arkouda.util)": [[53, "arkouda.util.register_all"]], "report_mem() (in module arkouda.util)": [[53, "arkouda.util.report_mem"]], "unregister() (in module arkouda.util)": [[53, "arkouda.util.unregister"]], "unregister_all() (in module arkouda.util)": [[53, "arkouda.util.unregister_all"]], "to_ndarray() (in module arkouda.strings)": [[81, "arkouda.Strings.to_ndarray"], [97, "arkouda.Strings.to_ndarray"]], "to_ndarray() (in module arkouda.pdarray)": [[81, "arkouda.pdarray.to_ndarray"], [92, "arkouda.pdarray.to_ndarray"]], "argsort() (in module arkouda.index)": [[82, "arkouda.Index.argsort"]], "argsort() (in module arkouda.multiindex)": [[82, "arkouda.MultiIndex.argsort"]], "concat() (in module arkouda.index)": [[82, "arkouda.Index.concat"]], "concat() (in module arkouda.multiindex)": [[82, "arkouda.MultiIndex.concat"]], "lookup() (in module arkouda.index)": [[82, "arkouda.Index.lookup"]], "lookup() (in module arkouda.multiindex)": [[82, "arkouda.MultiIndex.lookup"]], "set_dtype() (in module arkouda.index)": [[82, "arkouda.Index.set_dtype"]], "set_dtype() (in module arkouda.multiindex)": [[82, "arkouda.MultiIndex.set_dtype"]], "to_ndarray() (in module arkouda.arrayview)": [[85, "arkouda.ArrayView.to_ndarray"]], "to_ndarray() (in module arkouda.categorical)": [[86, "arkouda.Categorical.to_ndarray"]], "apply_permutation() (in module arkouda.dataframe)": [[88, "arkouda.DataFrame.apply_permutation"]], "argsort() (in module arkouda.dataframe)": [[88, "arkouda.DataFrame.argsort"]], "coargsort() (in module arkouda.dataframe)": [[88, "arkouda.DataFrame.coargsort"]], "concat() (in module arkouda.dataframe)": [[88, "arkouda.DataFrame.concat"]], "copy() (in module arkouda.dataframe)": [[88, "arkouda.DataFrame.copy"]], "drop() (in module arkouda.dataframe)": [[88, "arkouda.DataFrame.drop"]], "drop_duplicates() (in module arkouda.dataframe)": [[88, "arkouda.DataFrame.drop_duplicates"]], "groupby() (in module arkouda.dataframe)": [[88, "arkouda.DataFrame.groupby"]], "head() (in module arkouda.dataframe)": [[88, "arkouda.DataFrame.head"]], "rename() (in module arkouda.dataframe)": [[88, "arkouda.DataFrame.rename"]], "reset_index() (in module arkouda.dataframe)": [[88, "arkouda.DataFrame.reset_index"]], "sort_values() (in module arkouda.dataframe)": [[88, "arkouda.DataFrame.sort_values"]], "tail() (in module arkouda.dataframe)": [[88, "arkouda.DataFrame.tail"]], "to_pandas() (in module arkouda.dataframe)": [[88, "arkouda.DataFrame.to_pandas"]], "append() (in module arkouda.segarray)": [[93, "arkouda.SegArray.append"]], "append_single() (in module arkouda.segarray)": [[93, "arkouda.SegArray.append_single"]], "get_jth() (in module arkouda.segarray)": [[93, "arkouda.SegArray.get_jth"]], "get_length_n() (in module arkouda.segarray)": [[93, "arkouda.SegArray.get_length_n"]], "get_ngrams() (in module arkouda.segarray)": [[93, "arkouda.SegArray.get_ngrams"]], "get_prefixes() (in module arkouda.segarray)": [[93, "arkouda.SegArray.get_prefixes"]], "get_suffixes() (in module arkouda.segarray)": [[93, "arkouda.SegArray.get_suffixes"]], "intersect() (in module arkouda.segarray)": [[93, "arkouda.SegArray.intersect"]], "prepend_single() (in module arkouda.segarray)": [[93, "arkouda.SegArray.prepend_single"]], "remove_repeats() (in module arkouda.segarray)": [[93, "arkouda.SegArray.remove_repeats"]], "set_jth() (in module arkouda.segarray)": [[93, "arkouda.SegArray.set_jth"]], "setdiff() (in module arkouda.segarray)": [[93, "arkouda.SegArray.setdiff"]], "setxor() (in module arkouda.segarray)": [[93, "arkouda.SegArray.setxor"]], "to_ndarray() (in module arkouda.segarray)": [[93, "arkouda.SegArray.to_ndarray"]], "union() (in module arkouda.segarray)": [[93, "arkouda.SegArray.union"]], "head() (in module arkouda.series)": [[94, "arkouda.Series.head"]], "locate() (in module arkouda.series)": [[94, "arkouda.Series.locate"], [94, "id0"]], "pdconcat() (in module arkouda.series)": [[94, "arkouda.Series.pdconcat"]], "sort_index() (in module arkouda.series)": [[94, "arkouda.Series.sort_index"]], "sort_values() (in module arkouda.series)": [[94, "arkouda.Series.sort_values"]], "tail() (in module arkouda.series)": [[94, "arkouda.Series.tail"]], "to_pandas() (in module arkouda.series)": [[94, "arkouda.Series.to_pandas"]], "topn() (in module arkouda.series)": [[94, "arkouda.Series.topn"]], "value_counts() (in module arkouda.series)": [[94, "arkouda.Series.value_counts"]], "connect() (in module arkouda)": [[96, "arkouda.connect"]]}})