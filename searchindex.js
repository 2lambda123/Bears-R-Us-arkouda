Search.setIndex({"docnames": ["CONTRIBUTING_LINK", "ENVIRONMENT", "autoapi/arkouda/accessor/index", "autoapi/arkouda/alignment/index", "autoapi/arkouda/array_view/index", "autoapi/arkouda/categorical/index", "autoapi/arkouda/client/index", "autoapi/arkouda/client_dtypes/index", "autoapi/arkouda/dataframe/index", "autoapi/arkouda/dtypes/index", "autoapi/arkouda/groupbyclass/index", "autoapi/arkouda/history/index", "autoapi/arkouda/index", "autoapi/arkouda/index/index", "autoapi/arkouda/infoclass/index", "autoapi/arkouda/io/index", "autoapi/arkouda/io_util/index", "autoapi/arkouda/join/index", "autoapi/arkouda/logger/index", "autoapi/arkouda/match/index", "autoapi/arkouda/matcher/index", "autoapi/arkouda/numeric/index", "autoapi/arkouda/pdarrayclass/index", "autoapi/arkouda/pdarraycreation/index", "autoapi/arkouda/pdarraysetops/index", "autoapi/arkouda/plotting/index", "autoapi/arkouda/row/index", "autoapi/arkouda/security/index", "autoapi/arkouda/segarray/index", "autoapi/arkouda/series/index", "autoapi/arkouda/sorting/index", "autoapi/arkouda/strings/index", "autoapi/arkouda/timeclass/index", "autoapi/arkouda/util/index", "autoapi/index", "developer/ADDING_FEATURES", "developer/BENCHMARK", "developer/GASNET", "developer/MEMORY", "developer/RELEASE_PROCESS", "developer/TIPS", "developer/USER_BUGS", "developer/dev_menu", "examples", "file_io/CSV", "file_io/HDF5", "file_io/IMPORT_EXPORT", "file_io/PARQUET", "file_io/io_menu", "index", "quickstart", "server/index", "setup/BUILD", "setup/LINUX_INSTALL", "setup/MAC_INSTALL", "setup/MODULAR", "setup/REQUIREMENTS", "setup/WINDOWS_INSTALL", "setup/install_menu", "setup/testing", "usage", "usage/IO", "usage/Index", "usage/argsort", "usage/arithmetic", "usage/arrayview", "usage/categorical", "usage/creation", "usage/dataframe", "usage/groupby", "usage/histogram", "usage/indexing", "usage/pdarray", "usage/segarray", "usage/series", "usage/setops", "usage/startup", "usage/strings"], "filenames": ["CONTRIBUTING_LINK.md", "ENVIRONMENT.md", "autoapi/arkouda/accessor/index.rst", "autoapi/arkouda/alignment/index.rst", "autoapi/arkouda/array_view/index.rst", "autoapi/arkouda/categorical/index.rst", "autoapi/arkouda/client/index.rst", "autoapi/arkouda/client_dtypes/index.rst", "autoapi/arkouda/dataframe/index.rst", "autoapi/arkouda/dtypes/index.rst", "autoapi/arkouda/groupbyclass/index.rst", "autoapi/arkouda/history/index.rst", "autoapi/arkouda/index.rst", "autoapi/arkouda/index/index.rst", "autoapi/arkouda/infoclass/index.rst", "autoapi/arkouda/io/index.rst", "autoapi/arkouda/io_util/index.rst", "autoapi/arkouda/join/index.rst", "autoapi/arkouda/logger/index.rst", "autoapi/arkouda/match/index.rst", "autoapi/arkouda/matcher/index.rst", "autoapi/arkouda/numeric/index.rst", "autoapi/arkouda/pdarrayclass/index.rst", "autoapi/arkouda/pdarraycreation/index.rst", "autoapi/arkouda/pdarraysetops/index.rst", "autoapi/arkouda/plotting/index.rst", "autoapi/arkouda/row/index.rst", "autoapi/arkouda/security/index.rst", "autoapi/arkouda/segarray/index.rst", "autoapi/arkouda/series/index.rst", "autoapi/arkouda/sorting/index.rst", "autoapi/arkouda/strings/index.rst", "autoapi/arkouda/timeclass/index.rst", "autoapi/arkouda/util/index.rst", "autoapi/index.rst", "developer/ADDING_FEATURES.md", "developer/BENCHMARK.md", "developer/GASNET.md", "developer/MEMORY.md", "developer/RELEASE_PROCESS.md", "developer/TIPS.md", "developer/USER_BUGS.md", "developer/dev_menu.rst", "examples.rst", "file_io/CSV.md", "file_io/HDF5.md", "file_io/IMPORT_EXPORT.md", "file_io/PARQUET.md", "file_io/io_menu.rst", "index.rst", "quickstart.rst", "server/index.rst", "setup/BUILD.md", "setup/LINUX_INSTALL.md", "setup/MAC_INSTALL.md", "setup/MODULAR.md", "setup/REQUIREMENTS.md", "setup/WINDOWS_INSTALL.md", "setup/install_menu.rst", "setup/testing.rst", "usage.rst", "usage/IO.rst", "usage/Index.rst", "usage/argsort.rst", "usage/arithmetic.rst", "usage/arrayview.rst", "usage/categorical.rst", "usage/creation.rst", "usage/dataframe.rst", "usage/groupby.rst", "usage/histogram.rst", "usage/indexing.rst", "usage/pdarray.rst", "usage/segarray.rst", "usage/series.rst", "usage/setops.rst", "usage/startup.rst", "usage/strings.rst"], "titles": ["Contributing", "Environment Variables", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.accessor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.alignment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_view</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.categorical</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.client</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.client_dtypes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.dataframe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.dtypes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.groupbyclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.index</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.infoclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.io</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.io_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.join</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.match</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.numeric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.pdarrayclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.pdarraycreation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.pdarraysetops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.plotting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.row</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.security</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.segarray</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.series</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.sorting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.strings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.timeclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.util</span></code>", "API Reference", "Adding Your First Feature", "PyTest Benchmarks", "GASNet Development", "Reducing Memory Usage of Arkouda Builds", "Release Process", "Speeding up Arkouda Compilation", "Tips for Reproducing User Bugs", "Developer Documentation", "Examples", "CSV", "HDF5", "Import/Export", "Parquet", "File I/O", "Arkouda Documentation", "Quickstart", "Chapel API Reference", "Building the Server", "Linux", "MacOS", "Modular Server Builds", "Requirements", "Windows (WSL2)", "Installation", "Performance Testing", "Usage Guide", "Data I/O", "Indexs in Arkouda", "Sorting", "Arithmetic and Numeric Operations", "ArrayView in Arkouda", "Categoricals", "Creating Arrays", "DataFrames in Arkouda", "GroupBy", "Summarizing Data", "Indexing and Assignment", "The <code class=\"docutils literal notranslate\"><span class=\"pre\">pdarray</span></code> class", "SegArrays in Arkouda", "Series in Arkouda", "Array Set Operations", "Startup", "Strings in Arkouda"], "terms": {"i": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 50, 52, 53, 54, 55, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "an": [0, 1, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 43, 44, 45, 46, 47, 50, 53, 57, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77], "open": [0, 3, 5, 8, 12, 13, 15, 16, 22, 28, 31, 32, 57], "sourc": [0, 1, 37, 45, 50, 52, 53], "project": [0, 36, 39, 52], "we": [0, 1, 8, 12, 13, 15, 21, 22, 31, 35, 36, 37, 39, 41, 43, 44, 47, 52, 53, 54, 56, 57, 70, 72], "love": 0, "see": [0, 1, 3, 10, 12, 21, 22, 25, 29, 31, 32, 35, 36, 39, 40, 41, 50, 52, 55, 61, 64, 66, 69, 70, 72, 73, 74, 75, 77], "new": [0, 4, 5, 8, 10, 12, 13, 15, 16, 18, 19, 20, 21, 22, 25, 28, 29, 31, 35, 39, 40, 41, 56, 68, 69, 72, 73, 74, 77], "contributor": 0, "welcom": 0, "via": [0, 1, 5, 8, 10, 12, 22, 23, 31, 35, 52, 53, 54, 61, 66, 69, 71, 72, 77], "most": [0, 1, 7, 10, 12, 20, 29, 31, 36, 38, 39, 43, 45, 50, 52, 54, 57, 61, 67, 69, 72, 74, 77], "fall": 0, "under": [0, 2, 4, 5, 7, 8, 10, 12, 13, 15, 22, 23, 28, 29, 31, 32, 36, 39, 61, 65, 66, 69, 72, 77], "broad": 0, "categori": [0, 5, 12, 30, 39, 45, 60, 63, 66], "If": [0, 1, 3, 4, 5, 6, 7, 8, 10, 12, 13, 15, 16, 19, 20, 21, 22, 23, 24, 28, 29, 31, 32, 35, 37, 38, 39, 40, 44, 45, 47, 50, 52, 53, 54, 55, 57, 58, 61, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77], "your": [0, 1, 8, 12, 13, 15, 22, 31, 37, 38, 39, 41, 42, 50, 52, 53, 54, 55, 56, 57, 58, 68, 76, 77], "doesn": [0, 39, 52], "t": [0, 8, 12, 15, 31, 32, 35, 39, 40, 41, 52, 53, 54, 57, 59, 77], "fit": [0, 36, 39, 61], "either": [0, 5, 8, 10, 12, 14, 15, 21, 22, 23, 24, 28, 29, 55, 57, 61, 73, 74, 75], "pleas": [0, 5, 7, 8, 10, 12, 13, 15, 22, 28, 29, 31, 32, 37, 39, 40, 43, 45, 47, 48, 52, 53, 54, 55, 66, 68, 69], "add": [0, 1, 4, 5, 8, 10, 12, 15, 28, 29, 35, 39, 52, 53, 54, 55, 57, 68, 69], "anywai": [0, 67], "provid": [0, 4, 5, 8, 10, 12, 13, 15, 22, 28, 31, 33, 36, 38, 43, 44, 45, 47, 48, 52, 53, 54, 56, 61, 64, 68, 69, 73], "much": [0, 3, 4, 5, 8, 12, 15, 22, 28, 31, 38, 43, 45, 61, 65, 66, 72, 77], "detail": [0, 12, 14, 22, 36, 39, 52, 53, 54, 56, 70, 76, 77], "possibl": [0, 8, 12, 15, 21, 28, 31, 32, 35, 36, 39, 43, 52, 57, 61, 73, 77], "It": [0, 7, 8, 12, 22, 27, 28, 33, 37, 38, 41, 43, 44, 45, 47, 50, 52, 53, 54, 57, 68, 69, 73], "alwai": [0, 10, 12, 15, 22, 32, 44, 61, 64, 66, 68, 69, 70, 72, 77], "good": [0, 39, 41], "idea": [0, 39, 41, 44, 61], "current": [0, 4, 5, 6, 8, 10, 12, 13, 14, 15, 21, 22, 23, 27, 31, 38, 39, 40, 44, 45, 46, 47, 53, 54, 58, 61, 62, 64, 66, 67, 68, 69, 70, 72, 73, 76, 77], "list": [0, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 21, 22, 23, 24, 25, 28, 29, 31, 32, 33, 35, 36, 37, 39, 40, 41, 43, 44, 48, 50, 52, 54, 55, 58, 61, 62, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77], "make": [0, 1, 5, 7, 8, 12, 21, 32, 35, 36, 37, 38, 39, 41, 50, 52, 53, 54, 55, 57, 66, 68], "sure": [0, 8, 12, 13, 15, 22, 31, 39, 57], "alreadi": [0, 1, 5, 8, 10, 12, 13, 15, 22, 28, 29, 31, 32, 40, 44, 45, 47, 52, 66, 69, 75], "present": [0, 3, 5, 7, 8, 12, 13, 15, 21, 22, 24, 28, 31, 43, 45, 61, 70, 75], "us": [0, 1, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 18, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 42, 44, 45, 46, 47, 53, 54, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77], "github": [0, 8, 12, 39, 41, 52, 53, 54, 58], "markdown": 0, "especi": [0, 5, 8, 12, 41, 54, 66], "block": [0, 5, 12, 24, 31, 35, 43, 50, 67], "veri": [0, 8, 12, 43, 67, 68], "appreci": 0, "when": [0, 1, 3, 4, 5, 7, 8, 10, 12, 13, 15, 21, 22, 24, 28, 29, 31, 32, 33, 35, 36, 39, 40, 41, 43, 45, 47, 50, 52, 54, 55, 56, 57, 61, 64, 66, 68, 69, 72, 73, 75], "includ": [0, 1, 3, 8, 12, 13, 14, 15, 21, 22, 31, 32, 35, 36, 39, 44, 45, 50, 52, 53, 55, 61, 64, 68, 72, 73], "follow": [0, 1, 3, 6, 12, 21, 35, 36, 37, 39, 50, 52, 53, 54, 55, 56, 57, 58, 64, 66, 69, 72, 73, 75, 76, 77], "inform": [0, 1, 5, 6, 10, 12, 14, 22, 31, 36, 39, 40, 41, 43, 44, 45, 47, 48, 50, 52, 53, 54, 55, 56, 66, 73, 75, 77], "summari": [0, 8, 12], "problem": [0, 36, 50, 59], "what": [0, 9, 12, 28, 35, 39, 40, 41, 55, 76], "behavior": [0, 8, 12, 22, 23, 64, 65, 67, 68, 77], "did": [0, 6], "you": [0, 1, 5, 7, 8, 10, 12, 13, 15, 22, 28, 29, 31, 32, 35, 36, 37, 39, 40, 41, 42, 43, 45, 46, 50, 52, 53, 54, 55, 56, 57, 58, 68, 69, 71], "observ": [0, 12, 22, 64], "encount": [0, 12, 15], "expect": [0, 4, 8, 10, 12, 13, 15, 22, 31, 36, 45, 53, 54, 61, 65, 69, 72], "thi": [0, 1, 4, 5, 6, 7, 8, 10, 12, 13, 15, 18, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 50, 52, 53, 54, 55, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77], "known": [0, 12, 21], "work": [0, 5, 8, 12, 15, 22, 24, 26, 31, 40, 43, 45, 47, 50, 53, 54, 55, 61, 66, 68, 71, 75, 77], "around": [0, 7, 12, 39, 41], "step": [0, 10, 12, 36, 37, 38, 41, 52, 55, 58, 75, 76], "reproduc": [0, 42], "simplifi": [0, 36], "program": [0, 5, 7, 8, 10, 12, 13, 22, 28, 29, 31, 32, 50, 69, 76], "demonstr": [0, 35], "configur": [0, 1, 12, 36, 43, 50, 54, 57, 62, 68, 74], "": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 21, 22, 27, 28, 29, 31, 32, 35, 38, 39, 43, 52, 53, 54, 57, 58, 59, 61, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77], "output": [0, 1, 4, 5, 7, 8, 10, 12, 13, 15, 21, 22, 28, 31, 39, 43, 47, 50, 61, 64, 69, 70, 72, 75, 76], "ak": [0, 1, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 19, 21, 22, 23, 24, 25, 28, 30, 31, 32, 33, 35, 40, 41, 43, 44, 50, 52, 55, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77], "get_config": [0, 6], "like": [0, 2, 3, 7, 8, 10, 12, 22, 32, 37, 39, 40, 41, 43, 46, 50, 52, 55, 61, 62, 68, 69, 71, 74, 76, 77], "arkoudavers": 0, "version": [0, 5, 12, 33, 36, 39, 45, 50, 52, 53, 54, 56, 57], "server": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 19, 22, 23, 27, 28, 29, 31, 32, 38, 40, 41, 53, 54, 57, 59, 60, 64, 65, 66, 67, 68, 69, 70, 72, 73, 77], "wa": [0, 4, 5, 7, 8, 10, 12, 13, 15, 21, 22, 28, 29, 31, 32, 40, 45, 46, 52, 54, 61, 69, 72, 73], "built": [0, 4, 5, 12, 22, 31, 37, 39, 40, 41, 50, 52, 54, 55, 61, 65, 66, 72, 77], "Be": [0, 8, 12, 13, 15, 22, 31, 35], "specif": [0, 8, 12, 15, 41, 44, 45, 46, 53, 55, 60, 61, 68], "exampl": [0, 3, 4, 5, 6, 8, 10, 12, 15, 19, 21, 22, 23, 24, 25, 28, 30, 31, 32, 33, 36, 39, 45, 50, 52, 54, 55, 57, 61, 63, 64, 65, 67, 68, 69, 70, 72, 73, 75, 76, 77], "appropri": [0, 8, 12, 15, 35, 39, 46, 50, 52, 56, 61], "base": [0, 1, 2, 3, 4, 5, 7, 8, 11, 12, 13, 15, 18, 21, 22, 26, 30, 32, 39, 52, 54, 58, 60, 61, 62, 63, 64, 65, 66, 68, 72, 74, 77], "anoth": [0, 8, 10, 12, 15, 21, 22, 31, 45, 50, 54, 57, 61, 68, 69, 71, 72, 73, 77], "librari": [0, 1, 35, 57, 77], "e": [0, 1, 2, 3, 5, 7, 8, 10, 12, 15, 21, 22, 23, 28, 31, 32, 35, 39, 40, 41, 53, 54, 56, 61, 64, 66, 67, 69, 73, 76, 77], "numpi": [0, 4, 5, 7, 8, 9, 10, 12, 13, 17, 21, 22, 23, 28, 29, 31, 32, 35, 36, 43, 56, 59, 61, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 77], "panda": [0, 8, 10, 12, 13, 15, 23, 29, 32, 35, 46, 48, 56, 61, 62, 66, 68, 69], "scipi": [0, 12], "link": [0, 1, 12, 15, 32, 39, 52, 53], "support": [0, 5, 7, 8, 9, 10, 12, 13, 15, 16, 21, 22, 23, 24, 27, 28, 29, 31, 32, 35, 43, 46, 50, 53, 54, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77], "document": [0, 1, 34, 35, 36, 40, 41, 43, 48, 54, 55], "refer": [0, 10, 12, 40, 43, 52, 54, 56, 69], "don": [0, 8, 12, 15, 31, 40, 41, 57], "have": [0, 1, 3, 5, 8, 10, 12, 13, 15, 21, 22, 23, 24, 25, 28, 29, 31, 32, 35, 38, 39, 40, 41, 43, 44, 45, 47, 52, 53, 54, 55, 56, 61, 64, 66, 67, 68, 69, 72, 73, 74], "anyth": [0, 12, 22, 39], "mind": [0, 43, 57], "check": [0, 1, 3, 4, 5, 8, 10, 12, 13, 15, 22, 28, 31, 33, 35, 39, 40, 41, 59, 66, 75, 76, 77], "out": [0, 6, 8, 12, 21, 28, 40, 41, 44, 45, 47, 52, 55, 70, 71, 73], "our": [0, 12, 22, 35, 36, 38, 39, 43, 45, 50, 52, 57, 58, 61], "outstand": 0, "filter": [0, 8, 11, 12, 28, 61], "label": [0, 5, 8, 10, 12, 13, 25, 29, 66, 68, 69, 74], "first": [0, 3, 8, 10, 12, 15, 16, 21, 22, 23, 29, 31, 37, 41, 42, 43, 44, 45, 50, 52, 53, 55, 60, 61, 64, 67, 68, 69, 70, 74, 77], "identifi": [0, 3, 5, 12, 15, 22, 72], "befor": [0, 12, 32, 36, 52, 61], "start": [0, 3, 5, 10, 12, 13, 17, 19, 22, 23, 28, 30, 31, 32, 45, 60, 63, 66, 67, 69, 71, 73, 77], "onc": [0, 8, 12, 15, 22, 31, 37, 38, 39, 41, 43, 44, 47, 52, 57], "find": [0, 3, 5, 8, 10, 12, 20, 22, 24, 27, 29, 31, 33, 36, 39, 42, 53, 64, 69, 70, 75, 77], "creat": [0, 4, 5, 7, 8, 10, 12, 13, 15, 16, 20, 22, 23, 25, 28, 29, 31, 32, 34, 35, 36, 39, 41, 45, 47, 50, 52, 53, 54, 55, 56, 57, 60, 61, 65, 66, 68, 69, 70, 72], "intend": [0, 5, 7, 8, 12, 21, 22, 28, 31, 44, 50, 53, 54, 62, 68, 74], "leav": [0, 12, 21, 70], "comment": [0, 40, 55], "indic": [0, 3, 4, 5, 6, 7, 8, 10, 12, 13, 15, 17, 19, 21, 22, 28, 29, 30, 31, 32, 33, 43, 45, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77], "mention": [0, 41], "bear": [0, 39, 53, 54], "r": [0, 8, 12, 36, 39, 43, 53, 54, 59], "u": [0, 7, 12, 23, 32, 39, 53, 54, 61], "dev": [0, 8, 12, 53, 54, 56], "awar": 0, "assign": [0, 5, 8, 10, 12, 44, 45, 60, 66, 69, 73, 77], "avoid": [0, 38, 41], "anyon": 0, "duplic": [0, 8, 12, 68], "need": [0, 5, 8, 12, 15, 22, 28, 29, 31, 35, 36, 39, 40, 41, 44, 52, 53, 54, 55, 57, 61, 68, 74], "assist": [0, 55], "want": [0, 1, 8, 12, 50, 54, 56, 68], "discuss": 0, "design": [0, 39, 61], "someon": [0, 39], "tag": [0, 12, 15, 18, 39, 41], "reach": 0, "git": [0, 41, 53, 54], "fork": [0, 52, 53, 54, 58], "workflow": [0, 12, 15, 39, 55, 61], "recommend": [0, 12, 21, 37, 41, 47, 53, 56, 57, 58, 68, 73], "simpl": [0, 43, 55, 70], "branch": [0, 35, 36, 39, 52], "own": [0, 1, 12, 32, 73, 77], "standard": [0, 5, 10, 12, 22, 23, 32, 35, 36, 37, 64, 69, 70], "laid": 0, "pep8": 0, "continu": [0, 39], "integr": [0, 10, 12, 15, 22, 23, 39, 61, 67, 69], "ha": [0, 5, 7, 8, 10, 12, 13, 15, 21, 22, 23, 24, 28, 29, 31, 32, 37, 39, 40, 44, 45, 55, 61, 64, 66, 67, 68, 69, 71, 72, 73, 74], "linter": 0, "flake8": [0, 56], "verifi": [0, 1, 8, 12, 46, 61, 68], "all": [0, 3, 4, 5, 6, 8, 10, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 28, 31, 32, 33, 35, 36, 39, 40, 41, 44, 45, 47, 50, 53, 54, 55, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77], "meet": 0, "requir": [0, 3, 6, 8, 10, 12, 13, 15, 17, 22, 23, 37, 38, 40, 41, 45, 46, 47, 50, 55, 61, 67, 68, 69], "isort": 0, "black": 0, "typic": [0, 7, 12, 35, 40, 41, 66], "order": [0, 4, 5, 7, 8, 10, 12, 15, 21, 22, 23, 24, 28, 29, 30, 31, 33, 37, 45, 47, 52, 60, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 77], "ensur": [0, 8, 12, 21, 39, 45, 52, 54, 68, 72], "consist": [0, 8, 12, 21, 43, 64, 68], "util": [0, 8, 12, 15, 34, 39, 52, 53, 54], "line": [0, 12, 16, 40, 44, 50, 55, 65, 76], "length": [0, 3, 5, 10, 12, 15, 17, 19, 23, 24, 27, 28, 29, 31, 36, 45, 59, 64, 67, 69, 73, 74, 75, 77], "105": [0, 6], "paramet": [0, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 54, 61, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77], "example_featur": 0, "py": [0, 1, 8, 12, 35, 36, 40, 52, 55, 56, 59], "fix": [0, 12, 21, 32, 39, 57, 77], "reformat": [0, 61], "done": [0, 8, 12, 41, 52, 55, 68], "1": [0, 1, 3, 4, 5, 6, 8, 10, 12, 15, 17, 19, 21, 22, 23, 24, 28, 29, 30, 31, 33, 34, 36, 37, 39, 40, 43, 44, 45, 48, 50, 53, 54, 55, 56, 57, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77], "file": [0, 1, 4, 5, 8, 10, 12, 13, 15, 16, 22, 27, 28, 31, 35, 37, 40, 41, 46, 47, 50, 52, 53, 54, 56, 57, 69, 77], "For": [0, 2, 3, 5, 8, 10, 12, 15, 19, 23, 30, 31, 32, 33, 35, 36, 40, 43, 48, 50, 52, 53, 54, 55, 58, 61, 63, 67, 69, 70, 71, 72, 73, 75, 77], "user": [0, 1, 4, 5, 7, 8, 10, 12, 13, 15, 18, 21, 22, 23, 25, 27, 28, 29, 31, 32, 33, 36, 39, 42, 43, 45, 46, 48, 50, 52, 53, 54, 55, 56, 57, 58, 61, 65, 66, 69, 72, 77], "pycharm": 0, "nice": 0, "interoper": 0, "tool": [0, 53, 54], "style": [0, 5, 7, 8, 10, 12, 13, 22, 28, 29, 31, 32, 68, 69, 72], "doc": [0, 35, 52, 53, 65], "string": [0, 1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 32, 33, 34, 35, 36, 39, 55, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75], "look": [0, 1, 35, 39, 40, 43, 55, 61, 76], "similar": [0, 12, 15, 31, 36, 43, 61, 72, 73, 77], "surround": 0, "function": [0, 1, 5, 29, 31, 36, 39, 40, 43, 44, 46, 47, 50, 55, 60, 61, 62, 65, 66, 68, 69, 70, 72, 73, 74, 75, 77], "space": [0, 1, 3, 12, 21, 23, 32, 36, 52, 55, 67, 70, 77], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 35, 37, 39, 43, 44, 45, 46, 50, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77], "ci": 0, "fail": [0, 8, 12, 15, 21, 39, 61, 68, 72], "tab": [0, 39, 52], "ar": [0, 1, 3, 5, 7, 8, 10, 12, 13, 15, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 36, 37, 39, 40, 41, 43, 44, 45, 47, 50, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77], "lowercamelcas": 0, "variabl": [0, 10, 12, 15, 17, 22, 27, 28, 31, 36, 37, 53, 54, 55, 64, 69, 73, 77], "name": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 18, 22, 23, 28, 29, 31, 32, 33, 36, 37, 39, 43, 44, 45, 47, 52, 54, 55, 56, 60, 61, 62, 66, 67, 68, 69, 74], "procedur": 0, "var": [0, 1, 10, 12, 22, 35, 60, 64, 69, 70], "ax": 0, "0": [0, 3, 4, 5, 6, 8, 10, 12, 13, 15, 17, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 35, 36, 37, 43, 44, 45, 50, 53, 54, 56, 57, 59, 61, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77], "real": [0, 12, 23, 39, 45], "proc": [0, 35], "printit": 0, "x": [0, 7, 8, 9, 10, 12, 15, 21, 22, 25, 28, 31, 33, 43, 57, 61, 64, 65, 66, 68, 69, 72, 73, 77], "writeln": 0, "uppercamelcas": 0, "class": [0, 23, 36, 60, 61, 62, 65, 66, 68, 69, 73, 74, 77], "foo": [0, 2, 12], "foopar": 0, "re": [0, 5, 6, 8, 10, 12, 52, 69, 76, 77], "confirm": [0, 39], "again": [0, 41, 43, 44, 52, 53], "realli": [0, 12, 31], "behav": [0, 4, 12, 65], "properli": [0, 40, 45, 53, 54], "thing": [0, 43], "note": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 15, 16, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 37, 41, 43, 45, 47, 52, 54, 55, 57, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77], "test_": 0, "begin": [0, 12, 31, 71, 77], "otherwis": [0, 4, 5, 8, 9, 10, 12, 13, 15, 19, 21, 22, 23, 24, 28, 29, 31, 35, 58, 61, 65, 66, 68, 69, 72, 73, 75, 77], "pytest": [0, 42, 56], "ini": [0, 36], "so": [0, 1, 5, 7, 8, 10, 12, 15, 21, 22, 28, 29, 31, 36, 38, 39, 40, 41, 55, 56, 57, 61, 64, 65, 68, 69, 74, 75], "dure": [0, 1, 12, 15, 41, 43, 45, 46, 55, 56], "wiki": 0, "more": [0, 1, 3, 4, 5, 8, 12, 13, 15, 21, 22, 31, 32, 35, 36, 37, 39, 40, 41, 43, 45, 47, 48, 50, 52, 53, 54, 56, 61, 65, 66, 68, 72, 73, 77], "info": [0, 1, 5, 8, 12, 14, 18, 22, 31], "how": [0, 4, 5, 7, 8, 12, 13, 15, 21, 22, 28, 31, 35, 36, 39, 44, 56, 65, 69, 72], "http": [0, 8, 12, 35, 53, 54, 65], "com": [0, 8, 12, 53, 54], "unit": [0, 1, 6, 8, 12, 21, 32], "categoricaltest": 0, "v": [0, 12, 28, 39, 53, 59, 73], "print": [0, 1, 5, 6, 8, 12, 14, 22, 26, 31, 57, 76], "m": [0, 12, 19, 21, 28, 32, 36, 52, 57, 77], "categorical_test": 0, "singl": [0, 2, 3, 4, 5, 7, 8, 10, 12, 13, 15, 17, 21, 22, 24, 28, 31, 40, 41, 43, 45, 47, 52, 55, 59, 61, 67, 68, 69, 71, 73, 75], "from": [0, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 18, 19, 21, 22, 23, 25, 28, 31, 35, 36, 37, 39, 40, 41, 43, 44, 45, 50, 52, 53, 55, 57, 59, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77], "foo_test": 0, "server_util": [0, 1], "parallel_start_test": 0, "d": [0, 5, 12, 23, 24, 25, 28, 31, 32, 43, 59, 73, 75, 77], "post": [0, 39], "local": [0, 1, 4, 5, 6, 8, 10, 12, 13, 15, 22, 28, 29, 31, 32, 36, 37, 45, 50, 52, 53, 54, 61, 67, 69, 74, 76], "catch": 0, "common": [0, 3, 10, 12, 24, 35, 57, 61, 69, 75, 77], "failur": [0, 12, 15, 52, 61], "earli": 0, "usual": [0, 10, 12, 35, 69], "mypi": [0, 56], "everi": [0, 1, 8, 12, 36, 68, 77], "should": [0, 1, 5, 8, 9, 10, 12, 15, 21, 22, 23, 29, 31, 33, 35, 39, 40, 41, 43, 44, 45, 46, 50, 52, 53, 54, 56, 61, 68, 69, 72, 76], "least": [0, 7, 8, 12, 22, 28, 30, 31, 63, 73], "one": [0, 1, 2, 3, 5, 8, 9, 10, 12, 13, 15, 16, 21, 22, 23, 24, 28, 31, 35, 36, 39, 41, 43, 44, 45, 47, 50, 53, 54, 55, 56, 57, 61, 64, 66, 67, 68, 69, 73, 75, 77], "associ": [0, 1, 12, 15, 29, 33, 36, 39, 61, 73, 74], "number": [0, 1, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 17, 20, 21, 22, 23, 28, 29, 31, 32, 36, 37, 39, 40, 41, 43, 45, 53, 55, 57, 59, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77], "titl": [0, 12, 31, 39], "bodi": 0, "close": [0, 3, 12, 23, 32, 35, 43, 67], "keyword": [0, 5, 12, 28, 29, 67, 74], "doubt": [0, 39], "take": [0, 7, 10, 12, 18, 22, 37, 38, 40, 41, 43, 46, 61, 69], "some": [0, 5, 8, 12, 37, 43, 47, 52, 53, 66, 68, 73, 77], "99999": 0, "pr": [0, 39], "implement": [0, 5, 6, 7, 8, 11, 12, 21, 22, 24, 27, 28, 31, 35, 44, 50, 64, 67, 68, 76, 77], "arg": [0, 3, 12, 23, 28, 32, 35, 55, 67, 69], "super": 0, "cool": 0, "help": [0, 7, 12, 55], "keep": [0, 3, 8, 12, 43, 54, 57, 61, 68], "part": [0, 12, 28, 31, 57, 77], "those": [0, 30, 43, 53, 55, 63, 71], "As": [0, 12, 21, 22, 29, 39, 44, 46, 53, 54, 61, 64, 72, 74, 77], "person": 0, "who": [0, 53, 54], "left": [0, 3, 7, 8, 12, 21, 22, 30, 31, 32, 63, 70, 77], "feedback": 0, "resolv": [0, 38, 50, 57], "convers": [0, 5, 12, 61, 66, 72, 77], "decid": 0, "author": 0, "address": [0, 6, 7, 12, 76], "try": [0, 9, 12, 13, 15, 22, 57], "feel": 0, "readi": [0, 37, 39, 53, 54], "necessari": [0, 35, 39, 52, 57], "track": [0, 40, 47], "ani": [0, 3, 4, 5, 8, 10, 12, 13, 14, 15, 16, 21, 22, 23, 28, 31, 35, 36, 39, 41, 45, 47, 53, 54, 60, 64, 68, 69, 70, 72, 73, 77], "which": [0, 3, 4, 5, 6, 7, 8, 10, 12, 13, 15, 21, 22, 23, 24, 28, 29, 30, 31, 32, 35, 36, 38, 39, 41, 43, 52, 53, 54, 55, 59, 61, 63, 64, 65, 66, 67, 68, 69, 72, 73, 75, 76, 77], "outsid": [0, 44, 55], "scope": [0, 55], "member": 0, "quit": [0, 50], "bit": [0, 5, 7, 12, 21, 22, 23, 28, 31, 36, 40, 61, 65, 67, 68, 72], "experi": [0, 61], "unsur": 0, "ask": 0, "2": [0, 3, 4, 5, 8, 10, 12, 15, 19, 21, 22, 23, 24, 28, 29, 30, 31, 33, 35, 36, 37, 39, 43, 44, 45, 52, 53, 54, 55, 56, 57, 61, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77], "concurr": [0, 61], "approv": 0, "limit": [0, 4, 5, 12, 17, 22, 23, 31, 32, 44, 47, 50, 61, 65, 66, 68, 72, 77], "except": [0, 3, 8, 12, 22, 35, 43, 53, 68, 77], "after": [0, 5, 8, 12, 31, 39, 41, 52, 68, 77], "pass": [0, 1, 3, 5, 7, 8, 10, 12, 15, 21, 22, 28, 29, 31, 39, 61, 68, 69, 74], "conflict": 0, "ideal": [0, 39], "rebas": 0, "master": [0, 39, 52], "prefer": [0, 54, 56, 58], "wrote": 0, "best": [0, 3, 12], "practic": [0, 10, 12, 22, 55, 64, 69], "els": [0, 35, 39], "To": [0, 1, 8, 10, 12, 21, 32, 35, 36, 37, 41, 44, 50, 52, 54, 55, 65, 66, 68, 70, 72, 77], "commit": [0, 39], "histori": [0, 6, 12, 34, 39], "allow": [0, 5, 7, 8, 12, 15, 18, 22, 23, 28, 31, 36, 37, 43, 45, 46, 48, 55, 57, 61, 73], "easi": [0, 12, 18, 36, 39, 43, 52], "manipul": 0, "squash": 0, "web": [0, 39], "interfac": [0, 39], "pierce314159": 0, "ethan": 0, "debandi99": 0, "consensu": [0, 39], "There": [1, 10, 12, 15, 36, 43, 52, 57, 67, 75], "can": [1, 3, 4, 5, 7, 8, 10, 12, 13, 15, 21, 22, 23, 24, 27, 28, 29, 31, 32, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 50, 52, 53, 54, 55, 56, 57, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77], "role": 1, "develop": [1, 5, 12, 39, 40, 41, 53, 54, 55, 58, 61], "highlight": [1, 39, 43], "variou": [1, 44], "avail": [1, 6, 12, 15, 22, 36, 41, 45, 57, 61, 70], "separ": [1, 7, 8, 12, 13, 15, 16, 22, 31, 36, 44, 45, 55, 61, 72, 77], "section": [1, 12, 21, 36, 38, 39, 40, 41, 43, 45, 50, 52, 56, 64], "These": [1, 43, 45, 48, 50, 61], "env": [1, 12, 40, 50, 52, 53, 54, 56], "arkouda_serv": [1, 6, 9, 12, 37, 40, 41, 50, 52, 55, 76], "arkouda_server_connection_info": 1, "set": [1, 3, 4, 5, 7, 8, 10, 12, 13, 15, 18, 21, 22, 23, 24, 27, 28, 29, 31, 32, 36, 37, 39, 44, 45, 52, 53, 54, 55, 60, 61, 65, 66, 67, 68, 69, 70, 71, 72, 77], "write": [1, 4, 5, 8, 12, 13, 15, 16, 18, 22, 28, 31, 36, 39, 44, 61, 65], "port": [1, 5, 6, 8, 12, 15, 22, 28, 31, 40, 50, 59, 76], "startup": [1, 50, 60], "tune": 1, "buffer": 1, "messag": [1, 4, 5, 6, 8, 12, 13, 18, 22, 23, 28, 31, 35, 50, 61], "aggreg": [1, 10, 12, 28, 33, 43, 60, 61, 69], "sort": [1, 3, 5, 8, 10, 12, 21, 22, 24, 28, 29, 31, 34, 39, 59, 60, 64, 66, 67, 69, 70, 75, 77], "non": [1, 3, 5, 10, 12, 20, 21, 22, 23, 24, 30, 31, 38, 61, 63, 64, 67, 69, 70, 71, 77], "crazi": 1, "system": [1, 4, 5, 12, 22, 27, 31, 35, 36, 54, 55, 56, 57, 58, 61, 64, 65, 66, 72, 76, 77], "thei": [1, 5, 6, 7, 8, 10, 12, 13, 15, 22, 28, 29, 31, 32, 37, 39, 44, 45, 46, 53, 54, 61, 65, 66, 69, 74], "per": [1, 4, 5, 6, 8, 10, 12, 13, 15, 22, 28, 31, 35, 36, 41, 45, 55, 61, 64, 69], "task": [1, 6], "content": [1, 44, 61], "between": [1, 5, 6, 12, 17, 21, 22, 23, 31, 32, 36, 43, 55, 67, 70, 72, 77], "compet": 1, "arkouda_server_aggregation_dst_buff_s": 1, "commun": [1, 30, 39, 54, 63, 67], "arkouda_server_aggregation_src_buff_s": 1, "arkouda_server_aggregation_yield_frequ": 1, "frequenc": [1, 12, 32], "yield": [1, 4, 5, 8, 12, 13, 15, 22, 28, 31, 68, 71], "default": [1, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 18, 19, 21, 22, 23, 24, 27, 28, 29, 31, 32, 33, 36, 38, 44, 45, 50, 54, 55, 59, 61, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77], "1024": [1, 12, 22], "build": [1, 10, 12, 36, 39, 42, 50, 53, 57, 69, 76], "chpl_flag": [1, 38], "A": [1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 15, 21, 22, 23, 25, 27, 28, 29, 31, 39, 43, 49, 59, 61, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 77], "automat": [1, 5, 12, 15, 29, 45, 61, 66, 74], "chpl": [1, 35, 40, 52, 53, 54, 55], "addit": [1, 10, 12, 21, 25, 35, 37, 45, 47, 53, 72, 75, 76], "ones": [1, 6, 12, 21, 23, 36, 40, 59, 60, 64, 67], "here": [1, 33, 36, 37, 40, 41, 42, 43, 45, 47, 52, 54, 55, 56, 57, 58, 76], "smemtrack": 1, "true": [1, 3, 4, 5, 6, 7, 8, 10, 12, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 28, 29, 31, 32, 33, 36, 43, 54, 61, 62, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77], "lhdf5": 1, "lhdf5_hl": 1, "lzmq": 1, "liconv": 1, "lidn2": 1, "fast": [1, 5, 12, 31], "unless": [1, 12, 15, 21, 31, 77], "arkouda_develop": [1, 40], "o1": 1, "mutual": 1, "exclus": [1, 12, 17, 23, 24, 43, 67, 71, 75], "arkouda_quick_compil": [1, 40, 54], "loop": 1, "invari": 1, "code": [1, 5, 12, 13, 15, 30, 35, 39, 40, 43, 45, 50, 55, 60, 63, 66], "motion": 1, "ccflag": 1, "o0": 1, "arkouda_print_passes_fil": 1, "time": [1, 5, 6, 8, 10, 12, 13, 15, 17, 21, 22, 28, 31, 32, 36, 38, 40, 41, 44, 45, 47, 55, 59, 61, 66, 69, 70, 73, 75, 77], "specifi": [1, 3, 4, 7, 8, 10, 12, 13, 15, 16, 22, 23, 25, 28, 29, 31, 32, 33, 36, 40, 46, 61, 64, 65, 67, 68, 69, 73], "mainli": 1, "nightli": 1, "infrastructur": 1, "chpl_debug_flag": 1, "regex_max_captur": 1, "integ": [1, 5, 7, 8, 10, 12, 15, 17, 22, 23, 32, 45, 60, 64, 65, 66, 67, 68, 69, 72, 73, 75, 77], "chang": [1, 7, 8, 12, 13, 15, 22, 36, 39, 41, 50, 53, 54, 56, 61, 64, 68], "maximum": [1, 6, 8, 10, 12, 22, 23, 36, 61, 64, 67, 68, 69, 70], "captur": [1, 19, 77], "group": [1, 5, 8, 10, 12, 19, 28, 29, 30, 31, 36, 43, 45, 60, 63, 66, 68, 69, 74, 75, 77], "access": [1, 2, 6, 12, 15, 27, 31, 43, 48, 54, 60, 61, 76], "match": [1, 4, 5, 8, 10, 12, 13, 15, 20, 21, 22, 23, 28, 29, 31, 32, 34, 36, 60, 61, 64, 65, 67, 69, 72, 74, 76], "20": [1, 3, 12, 21, 39, 43, 56, 57, 64, 65, 71], "folk": 1, "instal": [1, 12, 22, 40, 57, 76], "anaconda": [1, 50, 52, 57, 58], "through": [1, 12, 21, 35, 37, 39, 50, 54], "instruct": [1, 12, 31, 50, 53, 54, 56, 57, 58, 76], "altern": [1, 39, 40, 52, 54, 57], "setup": [1, 52, 57], "them": [1, 8, 12, 15, 24, 31, 39, 53, 61, 68, 75], "explicitli": [1, 8, 12, 24, 55, 75], "arkouda_zmq_path": 1, "zmq": [1, 52], "arkouda_hdf5_path": 1, "hdf5": [1, 4, 5, 8, 10, 12, 13, 15, 22, 28, 31, 44, 46, 47, 48, 52, 56, 61, 69, 77], "arkouda_arrow_path": 1, "arrow": [1, 56], "arkouda_iconv_path": 1, "iconv": [1, 52, 56], "arkouda_idn2_path": 1, "idn2": [1, 52, 56], "ld_library_path": 1, "lib": [1, 52, 57, 75], "arkouda_skip_check_dep": 1, "skip": [1, 10, 12, 15, 31, 53, 61, 69, 75, 77], "autom": [1, 39], "do": [1, 3, 4, 5, 6, 8, 10, 12, 13, 15, 21, 22, 28, 29, 31, 36, 40, 41, 53, 55, 56, 58, 64, 65, 68, 69, 74], "repeat": [1, 5, 12, 28, 66, 73], "sinc": [1, 12, 21, 41, 66, 68, 72, 77], "dep": [1, 52, 53, 54], "been": [1, 5, 6, 12, 15, 22, 24, 28, 31, 37, 38, 39, 52, 55, 64, 66, 67], "up": [1, 3, 5, 6, 8, 10, 12, 15, 21, 22, 24, 28, 31, 35, 38, 41, 42, 52, 53, 54, 55, 61, 64, 65, 66, 67, 75, 77], "arkouda_server_user_modul": [1, 55], "absolut": [1, 12, 21, 32, 55, 64], "must": [1, 3, 5, 6, 7, 8, 10, 12, 13, 15, 21, 22, 23, 24, 25, 28, 29, 31, 32, 35, 37, 40, 43, 44, 50, 52, 53, 55, 64, 67, 68, 69, 71, 72, 73, 74, 76, 77], "also": [1, 3, 5, 7, 10, 12, 17, 21, 23, 24, 28, 31, 38, 40, 43, 44, 46, 47, 48, 50, 53, 57, 61, 67, 71, 72, 73, 75, 77], "servermodul": [1, 40, 41, 55], "cfg": [1, 40, 41, 55], "regist": [1, 5, 7, 8, 10, 12, 13, 14, 22, 28, 29, 31, 32, 33, 35, 60, 69], "readm": 1, "verbos": [1, 12, 14, 18], "arkouda_verbos": 1, "arkouda_server_host": 1, "hostnam": [1, 5, 6, 8, 12, 15, 22, 28, 31, 40, 50, 59, 76], "arkouda_server_port": 1, "arkouda_client_timeout": 1, "control": [1, 7, 12, 21, 72], "timeout": [1, 6, 76], "arkouda_full_stack_test": 1, "option": [1, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 19, 22, 23, 24, 25, 28, 29, 31, 32, 35, 36, 39, 45, 50, 52, 53, 54, 56, 59, 61, 67, 68, 69, 74, 75, 76, 77], "test_data_url": 1, "readalltest": 1, "read_all_test": 1, "arkouda_numlocal": 1, "where": [1, 5, 6, 8, 10, 12, 13, 15, 16, 17, 21, 22, 23, 24, 27, 28, 31, 33, 35, 36, 37, 38, 45, 53, 54, 60, 61, 67, 69, 70, 71, 72, 73, 75, 76, 77], "found": [1, 3, 8, 12, 13, 15, 22, 31, 35, 36, 43, 47, 54, 55, 57], "arkouda_hom": 1, "locat": [1, 10, 12, 13, 22, 27, 29, 31, 36, 39, 41, 52, 57, 69, 74, 77], "execut": [1, 6, 11, 12, 15, 22, 31, 35, 37, 38, 40, 41, 44, 52, 53, 55, 66, 76], "warn": [1, 12, 15, 18, 31, 61, 77], "subject": [1, 12, 32], "futur": [1, 7, 12, 15, 31, 61, 70], "intern": [1, 12, 17, 22, 31, 39], "arkouda_client_directori": [1, 27], "parent": [1, 20], "token": [1, 6, 27, 50, 76], "txt": 1, "arkouda_tunnel_serv": 1, "ssh": 1, "tunnel": 1, "url": [1, 6, 50, 52, 76], "arkouda_key_fil": 1, "keyfil": 1, "arkouda_password": 1, "password": [1, 57], "arkouda_log_level": [1, 12], "side": [1, 4, 5, 6, 8, 10, 12, 13, 14, 15, 19, 22, 23, 28, 29, 31, 32, 35, 39, 40, 50, 55, 57, 61, 64, 65, 66, 69, 70, 71, 72, 73, 76, 77], "log": [1, 10, 12, 18, 21, 23, 25, 31, 60, 64, 69], "level": [1, 12, 18, 24, 29, 36, 40, 44, 45, 52, 53, 54, 55, 58, 61, 74, 75], "arkouda_client_mod": 1, "mode": [1, 4, 5, 7, 10, 12, 13, 15, 22, 28, 31, 60, 67, 69], "ui": 1, "api": [1, 10, 12, 35, 49, 69, 72], "displai": [1, 7, 12, 25, 33, 52, 57], "splash": 1, "cachedaccessor": [2, 12], "str": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 31, 32, 33, 36, 44, 61, 62, 64, 65, 66, 67, 68, 69, 72, 76, 77], "custom": [2, 12, 18, 35, 44, 52, 70], "properti": [2, 8, 12, 13, 22, 28, 29, 32, 35, 45], "object": [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 44, 45, 46, 47, 48, 57, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75], "descriptor": [2, 12, 31], "cach": [2, 5, 12, 31], "param": [2, 5, 8, 12, 13, 15, 22, 28, 31, 36], "namespac": [2, 12, 15], "g": [2, 5, 7, 8, 10, 12, 15, 21, 22, 28, 31, 32, 33, 40, 41, 43, 53, 61, 64, 66, 67, 69, 73, 76, 77], "df": [2, 8, 12, 43, 68], "type": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 35, 36, 46, 52, 56, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 73, 74, 76, 77], "extens": [2, 5, 12, 13, 15, 22, 28, 31, 52, 61], "method": [2, 5, 6, 7, 8, 10, 11, 12, 15, 21, 22, 23, 27, 28, 31, 38, 43, 44, 60, 61, 66, 67, 69, 70, 72], "cl": [2, 12], "__init__": [2, 12], "assum": [2, 8, 10, 12, 15, 23, 24, 29, 39, 44, 45, 46, 53, 54, 58, 61, 68, 69, 74, 75], "seri": [2, 8, 12, 23, 32, 34], "datafram": [2, 12, 15, 25, 26, 29, 34, 46, 61, 74], "index": [2, 3, 4, 5, 7, 8, 10, 12, 15, 17, 19, 22, 23, 28, 29, 31, 34, 36, 43, 52, 59, 60, 61, 64, 66, 67, 69, 70, 73, 74, 77], "argument": [2, 3, 7, 8, 10, 12, 21, 22, 28, 29, 31, 33, 35, 50, 55, 74], "data": [2, 4, 5, 7, 8, 9, 10, 12, 13, 15, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 35, 36, 43, 46, 48, 49, 60, 62, 63, 65, 66, 67, 69, 73, 74, 76, 77], "string_oper": [2, 12], "date_oper": [2, 12], "datetimeaccessor": [2, 12], "stringaccessor": [2, 12], "unsqueez": [3, 12], "p": [3, 12, 22, 23], "zero_up": [3, 12], "val": [3, 9, 10, 12, 28, 33, 69, 73], "map": [3, 5, 6, 7, 8, 12, 15, 16, 31, 33, 61, 68, 77], "arrai": [3, 4, 5, 6, 7, 8, 10, 12, 13, 15, 17, 19, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 35, 36, 44, 45, 50, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 77], "spars": [3, 10, 12, 69, 72], "valu": [3, 4, 5, 6, 7, 8, 10, 12, 13, 15, 16, 17, 21, 22, 23, 24, 28, 29, 31, 32, 33, 36, 43, 45, 47, 54, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 75, 76, 77], "pdarrai": [3, 4, 5, 7, 8, 10, 12, 13, 15, 17, 19, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 35, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 77], "dens": [3, 5, 10, 12, 69], "return": [3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 35, 44, 46, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 76, 77], "replac": [3, 8, 12, 15, 20, 22, 28, 31, 37, 39, 45, 54, 55, 56, 73, 77], "multipl": [3, 8, 12, 15, 21, 28, 32, 35, 36, 37, 43, 45, 47, 48, 55, 59, 61, 62, 64, 68, 73], "sequenc": [3, 5, 7, 12, 21, 22, 23, 24, 28, 30, 63, 67, 72, 73, 75, 77], "right_align": [3, 12], "right": [3, 7, 8, 12, 22, 30, 31, 32, 39, 63, 68, 71, 76, 77], "two": [3, 5, 7, 8, 10, 12, 13, 17, 21, 22, 23, 24, 28, 29, 31, 32, 43, 44, 53, 55, 61, 64, 67, 69, 75, 77], "impli": [3, 12, 71], "discard": [3, 5, 12, 66], "appear": [3, 5, 8, 10, 12, 13, 15, 22, 31, 39, 69, 70], "hand": [3, 12, 39, 71], "defin": [3, 5, 7, 8, 9, 10, 11, 12, 13, 15, 18, 21, 22, 23, 28, 29, 31, 32, 35, 39, 65, 66, 67, 68, 69, 70, 72], "bool": [3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 36, 45, 59, 61, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77], "logic": [3, 4, 5, 12, 21, 23, 28, 31, 35, 60, 65, 67, 70, 73], "surviv": [3, 12], "left_align": [3, 12], "nonuniqueerror": [3, 12], "valueerror": [3, 5, 6, 8, 10, 12, 13, 15, 16, 17, 21, 22, 23, 24, 28, 29, 30, 31, 61, 63, 64, 66, 67, 69, 70, 73, 74, 76, 77], "inappropri": [3, 12], "correct": [3, 8, 12, 35, 40, 53, 57, 59, 68], "queri": [3, 12, 61], "item": [3, 5, 8, 12, 22, 23, 24, 29, 33, 66, 68, 74, 75], "search": [3, 5, 12, 19, 31, 60, 66], "each": [3, 4, 5, 6, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 28, 29, 31, 32, 33, 35, 36, 43, 45, 52, 55, 61, 64, 65, 66, 68, 69, 70, 72, 73, 74, 75, 77], "row": [3, 8, 10, 12, 13, 15, 22, 24, 28, 30, 31, 34, 43, 44, 61, 63, 68, 69, 73, 75], "same": [3, 4, 5, 7, 8, 10, 12, 13, 15, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 39, 43, 44, 45, 47, 53, 54, 55, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77], "shape": [3, 4, 5, 8, 12, 13, 21, 22, 29, 31, 45, 60, 64, 65, 66, 72], "dtype": [3, 4, 5, 8, 10, 12, 13, 15, 17, 20, 21, 22, 23, 24, 28, 30, 31, 32, 34, 35, 36, 43, 59, 60, 61, 64, 65, 67, 69, 70, 71, 72, 75, 77], "its": [3, 5, 9, 12, 13, 22, 28, 29, 31, 39, 45, 54, 72, 73, 74, 77], "int64": [3, 5, 7, 8, 9, 10, 12, 15, 17, 19, 21, 22, 23, 24, 28, 30, 31, 32, 35, 36, 43, 44, 45, 59, 61, 63, 64, 66, 67, 68, 69, 70, 72, 73, 75, 77], "lookup": [3, 12, 13, 29], "kei": [3, 5, 8, 10, 12, 13, 14, 15, 16, 21, 29, 35, 43, 45, 55, 57, 62, 68, 69, 74, 75], "fillvalu": [3, 12], "appli": [3, 8, 10, 12, 21, 36, 64, 68, 69, 77], "domain": [3, 12], "entri": [3, 8, 12, 22, 31, 35, 36, 68], "uniqu": [3, 5, 8, 10, 12, 13, 21, 22, 24, 28, 29, 31, 43, 45, 60, 61, 66, 69, 70, 71, 73, 74, 75, 77], "given": [3, 5, 8, 10, 12, 15, 22, 23, 24, 31, 32, 36, 56, 61, 66, 67, 68, 69, 77], "treat": [3, 4, 7, 9, 12, 30, 36, 43, 63, 65], "tupl": [3, 5, 7, 8, 9, 10, 12, 17, 21, 22, 23, 24, 28, 29, 31, 43, 61, 66, 67, 68, 69, 70, 72, 74, 75, 77], "rang": [3, 5, 8, 12, 13, 15, 17, 21, 22, 23, 28, 29, 31, 32, 59, 61, 64, 67, 68, 70, 74, 77], "evalu": [3, 12, 22, 64, 70], "scalar": [3, 5, 12, 21, 22, 28, 29, 35, 36, 59, 60, 66, 70, 71, 73, 74], "result": [3, 5, 8, 10, 12, 13, 15, 17, 21, 22, 23, 24, 25, 28, 29, 31, 32, 35, 36, 43, 44, 45, 46, 54, 61, 64, 67, 68, 69, 72, 73, 74, 77], "over": [3, 5, 8, 12, 15, 21, 22, 28, 31, 59, 64, 65, 66, 68, 70, 72, 73, 77], "while": [3, 12, 15, 30, 41, 45, 47, 52, 57, 61, 63], "cannot": [3, 4, 5, 7, 8, 10, 12, 13, 15, 21, 22, 23, 28, 29, 31, 32, 47, 57, 61, 65, 66, 69, 72, 77], "other": [3, 5, 7, 8, 10, 12, 13, 15, 21, 22, 23, 28, 30, 31, 32, 36, 40, 41, 43, 61, 62, 63, 64, 66, 69, 73, 75, 77], "complex": [3, 12, 50], "achiev": [3, 12, 52], "arang": [3, 4, 8, 10, 12, 15, 21, 22, 23, 24, 25, 28, 35, 43, 60, 61, 64, 65, 67, 69, 70, 71, 72, 73, 75], "desir": [3, 6, 7, 12, 21, 22, 23, 27, 36, 37, 50, 55, 64, 67, 70, 72, 76, 77], "word": [3, 12], "keys1": [3, 12], "twenti": [3, 12], "_": [3, 12, 19, 31, 77], "5": [3, 4, 5, 6, 8, 10, 12, 21, 22, 23, 24, 28, 30, 31, 36, 43, 44, 45, 47, 54, 56, 61, 63, 64, 65, 67, 68, 69, 71, 72, 73, 75, 77], "keys2": [3, 12], "three": [3, 12, 23, 24, 31, 32, 52, 67, 71, 72, 77], "four": [3, 12, 24, 31, 32, 67, 77], "five": [3, 12, 24, 31, 67, 77], "21": [3, 12, 21, 64, 65], "22": [3, 12, 64, 65], "23": [3, 12, 65], "24": [3, 12, 21, 22, 36, 56, 64, 65], "25": [3, 10, 12, 15, 22, 23, 65, 67, 69], "args1": [3, 12], "thirti": [3, 12], "args2": [3, 12], "aku": [3, 8, 12, 13, 26, 62, 68], "direct": [3, 12, 39, 45, 52], "intermedi": [3, 12], "revkei": [3, 12], "revindic": [3, 12], "size": [3, 4, 5, 8, 9, 10, 12, 13, 15, 17, 21, 22, 23, 28, 29, 30, 31, 32, 33, 36, 43, 45, 46, 47, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 77], "revarg": [3, 12], "idx": [3, 12, 43], "in1d_interv": [3, 12], "interv": [3, 12, 21, 23, 32, 67, 70], "symmetr": [3, 12, 24, 28, 43, 60, 75], "fals": [3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 28, 29, 31, 32, 33, 36, 43, 59, 61, 64, 66, 67, 68, 69, 72, 73, 75, 77], "test": [3, 5, 8, 12, 15, 21, 24, 37, 39, 40, 41, 43, 50, 55, 68, 75], "membership": [3, 12, 24, 75], "half": [3, 12], "python": [3, 4, 5, 6, 7, 8, 11, 12, 22, 23, 24, 27, 29, 31, 36, 49, 52, 57, 58, 60, 61, 64, 65, 66, 67, 68, 71, 72, 77], "int": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 17, 19, 20, 21, 22, 23, 27, 28, 29, 31, 32, 35, 45, 61, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77], "float": [3, 6, 8, 12, 21, 22, 23, 64, 67, 68, 70, 72], "overlap": [3, 8, 12, 20, 31, 77], "lower_bounds_inclus": [3, 12], "upper_bounds_exclus": [3, 12], "boolean": [3, 5, 8, 10, 12, 19, 22, 24, 28, 29, 31, 43, 45, 66, 68, 69, 71, 72, 73, 74, 75, 77], "contain": [3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 19, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 34, 35, 36, 40, 41, 43, 44, 45, 50, 55, 59, 60, 61, 63, 64, 66, 67, 69, 72, 73, 74, 75, 77], "correspond": [3, 5, 7, 8, 10, 12, 13, 15, 16, 17, 19, 21, 22, 23, 27, 28, 29, 31, 35, 45, 47, 61, 64, 66, 68, 69, 70, 71, 73, 74, 77], "low": [3, 7, 8, 12, 21, 22, 23, 43, 61, 67], "high": [3, 7, 8, 12, 21, 22, 23, 43, 67], "inclus": [3, 8, 12, 21, 22, 23, 32, 64, 67, 71], "equival": [3, 4, 5, 8, 10, 12, 15, 21, 22, 23, 24, 30, 31, 32, 40, 43, 63, 64, 65, 67, 75], "But": [3, 12], "faster": [3, 5, 12, 24, 40, 66, 75], "mani": [3, 5, 12, 36, 66, 69], "second": [3, 6, 12, 16, 21, 23, 24, 29, 31, 32, 35, 36, 40, 43, 64, 67, 72, 74, 75, 76, 77], "trivial": [3, 12], "search_interv": [3, 12], "tiebreak": [3, 12], "none": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 21, 22, 23, 25, 26, 28, 29, 31, 32, 33, 36, 53, 54, 61, 62, 66, 67, 68, 69, 70, 72, 74, 76], "hierarch": [3, 12], "uint": [3, 8, 12, 15, 22, 23, 31, 44], "numer": [3, 8, 12, 22, 23, 25, 29, 30, 34, 45, 60, 61, 63, 66, 72, 74, 77], "than": [3, 4, 5, 8, 10, 12, 13, 15, 21, 22, 23, 24, 28, 30, 31, 37, 39, 40, 47, 61, 63, 65, 66, 67, 68, 69, 72, 75, 77], "lowest": [3, 8, 12, 22, 23], "chosen": [3, 12, 21, 22, 64, 72, 73], "compon": [3, 5, 7, 8, 10, 12, 13, 14, 22, 28, 29, 31, 32, 33, 36, 45, 47, 69], "dimens": [3, 4, 5, 12, 21, 22, 31, 43, 45, 65, 66, 72, 73], "multi": [3, 4, 7, 10, 12, 15, 24, 29, 43, 62, 65, 67, 69, 72, 74, 75], "dimension": [3, 4, 12, 21, 23, 29, 61, 65, 72, 74], "satisfi": [3, 8, 12, 15], "condit": [3, 8, 12, 21, 22, 64], "11": [3, 8, 12, 21, 28, 36, 41, 43, 44, 64, 65, 68, 70, 71, 73], "end": [3, 5, 8, 12, 17, 19, 21, 22, 23, 28, 31, 32, 38, 60, 66, 67, 71, 73, 77], "9": [3, 5, 8, 10, 12, 15, 21, 22, 23, 28, 30, 31, 36, 43, 53, 54, 61, 63, 64, 65, 67, 69, 70, 71, 73, 77], "10": [3, 5, 10, 12, 15, 21, 22, 23, 25, 28, 29, 30, 31, 35, 36, 43, 52, 54, 56, 61, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74], "6": [3, 4, 8, 10, 12, 15, 21, 22, 23, 24, 28, 31, 36, 43, 53, 54, 56, 57, 59, 61, 64, 65, 67, 68, 69, 70, 71, 73, 75, 77], "15": [3, 5, 12, 31, 54, 65, 71], "12": [3, 10, 12, 15, 21, 28, 31, 36, 56, 64, 65, 69, 71, 73], "30": [3, 12, 40, 56, 65], "bi_start": [3, 12], "bigint_from_uint_arrai": [3, 12, 22, 23], "cast": [3, 7, 12, 21, 22, 23, 31, 35, 60, 61, 67, 77], "uint64": [3, 7, 9, 10, 12, 21, 22, 23, 30, 36, 45, 59, 63, 64, 67, 68, 70, 72, 77], "bi_end": [3, 12], "bi_val": [3, 12], "92233720368547758091": [3, 12], "92233720368547758090": [3, 12], "166020696663385964564": [3, 12], "36893488147419103233": [3, 12], "92233720368547758085": [3, 12], "92233720368547758095": [3, 12], "110680464442257309696": [3, 12], "110680464442257309708": [3, 12], "166020696663385964574": [3, 12], "is_cosort": [3, 12], "iff": [3, 5, 12, 13, 22, 29, 31, 32, 64, 70], "cosort": [3, 12], "were": [3, 4, 10, 12, 13, 15, 22, 28, 31, 40, 55, 65, 69, 73, 77], "column": [3, 5, 8, 10, 12, 13, 15, 22, 25, 28, 29, 30, 31, 43, 44, 47, 48, 61, 63, 69, 73, 74], "tabl": [3, 6, 12, 14, 22, 28, 31, 35, 36, 56, 72, 73], "cosorted": [3, 12], "rais": [3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 35, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77], "typeerror": [3, 5, 7, 8, 9, 10, 12, 13, 15, 17, 18, 21, 22, 23, 24, 28, 29, 30, 31, 32, 35, 61, 63, 64, 66, 67, 69, 70, 74, 75, 77], "interval_lookup": [3, 12], "express": [3, 5, 12, 15, 31, 36, 60, 61, 66, 68, 71, 72], "upper_bounds_inclus": [3, 12], "valid": [3, 5, 12, 15, 21, 23, 31, 61, 66, 72, 77], "arrayview": [4, 12, 15, 21, 22, 60, 61, 72], "pdarrayclass": [4, 5, 7, 8, 10, 12, 13, 15, 17, 19, 21, 23, 24, 28, 29, 30, 31, 34], "row_major": [4, 12, 22, 65], "view": [4, 12, 39, 43, 48, 52, 58, 65, 72], "arraryview": [4, 12, 65], "similarli": [4, 12, 36, 43, 65], "ndarrai": [4, 5, 12, 22, 23, 25, 28, 31, 43, 61, 64, 65, 66, 72, 73, 77], "store": [4, 7, 8, 10, 12, 15, 23, 27, 31, 36, 44, 45, 48, 57, 61, 65, 66, 67, 69, 73, 77], "being": [4, 8, 12, 13, 15, 21, 22, 29, 43, 45, 46, 47, 55, 61, 65, 68, 71, 74], "element": [4, 5, 8, 10, 12, 16, 17, 19, 21, 22, 23, 24, 28, 29, 31, 32, 35, 43, 55, 60, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 77], "int_scalar": [4, 5, 8, 9, 10, 12, 15, 21, 22, 23, 28, 31, 32, 64, 65, 67, 69, 70, 72], "ndim": [4, 5, 12, 22, 31, 60, 65, 66, 72], "items": [4, 12, 22, 23, 31, 60, 61, 65, 72], "byte": [4, 5, 8, 9, 12, 15, 17, 22, 23, 31, 45, 50, 61, 65, 66, 68, 72, 77], "read": [4, 5, 8, 12, 13, 15, 16, 22, 31, 44, 45, 46, 47, 65, 77], "By": [4, 5, 7, 8, 10, 12, 13, 15, 21, 22, 24, 28, 31, 32, 65, 69, 75, 77], "c": [4, 8, 12, 22, 23, 24, 25, 28, 31, 36, 38, 40, 53, 59, 65, 68, 72, 73, 75, 77], "f": [4, 5, 12, 21, 22, 23, 31, 50, 53, 54, 56, 61, 64, 65, 77], "column_major": [4, 12, 22, 65], "objtyp": [4, 5, 8, 10, 12, 13, 22, 28, 29, 31, 45], "to_ndarrai": [4, 5, 7, 12, 13, 21, 22, 23, 25, 28, 31, 32, 43, 60, 61, 65, 66, 70, 72, 73, 77], "convert": [4, 5, 7, 8, 12, 21, 22, 23, 28, 29, 31, 32, 33, 44, 61, 65, 66, 68, 72, 73, 74, 75, 77], "np": [4, 5, 8, 9, 10, 12, 17, 21, 22, 23, 25, 28, 31, 32, 43, 61, 64, 65, 66, 67, 68, 69, 70, 72, 73, 77], "transfer": [4, 5, 8, 12, 15, 22, 28, 31, 36, 61, 65, 66, 68, 72, 73, 77], "client": [4, 5, 8, 12, 22, 23, 31, 32, 34, 46, 52, 53, 54, 55, 56, 57, 60, 65, 66, 68, 72, 73, 77], "exce": [4, 5, 8, 12, 22, 23, 31, 32, 61, 65, 66, 67, 68, 72, 77], "maxtransferbyt": [4, 5, 8, 12, 22, 23, 31, 32, 61, 65, 66, 68, 72, 77], "runtimeerror": [4, 5, 6, 8, 10, 12, 13, 14, 15, 19, 21, 22, 23, 24, 28, 29, 31, 32, 61, 64, 65, 66, 67, 69, 70, 72, 75, 76, 77], "attribut": [4, 5, 8, 13, 15, 22, 31, 32, 61, 65, 72], "error": [4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 18, 19, 21, 22, 23, 28, 29, 31, 32, 35, 45, 47, 57, 61, 64, 65, 66, 68, 69, 70, 72, 76, 77], "thrown": [4, 5, 8, 12, 13, 14, 15, 19, 22, 23, 28, 29, 31, 61, 64, 65, 66, 70, 72, 77], "receiv": [4, 5, 6, 8, 12, 13, 15, 22, 28, 31, 61, 65, 72, 76], "doe": [4, 5, 6, 8, 10, 12, 13, 15, 16, 22, 23, 25, 28, 29, 31, 40, 43, 45, 47, 61, 65, 66, 67, 68, 69, 72, 74, 76, 77], "protect": [4, 5, 12, 22, 23, 31, 61, 65, 66, 72, 77], "overflow": [4, 5, 12, 21, 22, 31, 61, 65, 66, 72, 77], "memori": [4, 5, 6, 8, 12, 13, 15, 22, 28, 31, 41, 42, 45, 50, 61, 65, 66, 72, 77], "run": [4, 5, 6, 8, 12, 15, 21, 22, 28, 31, 40, 41, 43, 50, 52, 53, 54, 56, 57, 59, 61, 65, 66, 72, 73, 76, 77], "assumpt": [4, 5, 12, 22, 23, 31, 61, 65, 66, 72, 77], "distribut": [4, 5, 7, 8, 10, 12, 13, 15, 22, 23, 25, 28, 31, 50, 53, 54, 61, 64, 65, 66, 67, 69, 72, 75, 77], "mai": [4, 5, 8, 12, 13, 15, 22, 23, 24, 31, 43, 45, 50, 52, 54, 56, 57, 61, 65, 66, 67, 68, 72, 77], "overrid": [4, 5, 7, 12, 22, 23, 31, 40, 61, 65, 66, 72, 77], "larger": [4, 5, 12, 22, 23, 31, 39, 43, 61, 65, 66, 72, 77], "proce": [4, 5, 12, 22, 23, 31, 61, 65, 66, 72, 77], "caution": [4, 5, 12, 22, 23, 31, 61, 65, 66, 72, 77], "to_list": [4, 5, 7, 12, 13, 22, 28, 29, 31, 43, 61, 65, 72, 73, 77], "reshap": [4, 8, 12, 22, 60, 65], "3": [4, 8, 10, 12, 15, 19, 21, 22, 23, 24, 25, 28, 30, 31, 35, 36, 43, 44, 45, 53, 54, 56, 59, 60, 61, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 75, 77], "4": [4, 5, 8, 10, 12, 15, 19, 21, 22, 23, 24, 28, 30, 31, 36, 43, 45, 53, 54, 56, 61, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 75, 77], "to_hdf": [4, 5, 7, 8, 10, 12, 13, 15, 22, 28, 31, 45, 48, 60, 61, 69], "prefix_path": [4, 5, 7, 8, 10, 12, 13, 15, 22, 28, 31, 69], "dataset": [4, 5, 7, 8, 10, 12, 13, 15, 22, 28, 31, 44, 45, 47, 48, 69, 77], "truncat": [4, 5, 7, 10, 12, 13, 15, 22, 28, 31, 45, 47, 69], "file_typ": [4, 5, 7, 8, 10, 12, 13, 15, 22, 28, 31, 69], "save": [4, 5, 8, 10, 12, 13, 15, 22, 28, 31, 36, 37, 39, 40, 45, 46, 47, 61, 66, 69, 75], "path": [4, 8, 12, 13, 15, 16, 22, 27, 36, 41, 52, 53, 54, 55, 57, 61], "append": [4, 5, 8, 10, 12, 13, 15, 22, 24, 28, 31, 45, 47, 60, 67, 69, 77], "overwrit": [4, 5, 8, 10, 12, 13, 15, 22, 28, 31, 69, 72], "exist": [4, 5, 6, 8, 10, 12, 13, 15, 16, 22, 23, 28, 31, 45, 47, 52, 67, 68, 69, 76], "format": [4, 5, 6, 7, 8, 12, 13, 14, 15, 22, 27, 28, 31, 35, 43, 45, 46, 47, 55, 68, 73, 76, 77], "date": [4, 12, 32, 39], "update_hdf": [4, 5, 7, 8, 10, 12, 13, 15, 22, 28, 31], "repack": [4, 5, 7, 8, 10, 12, 13, 15, 22, 28, 31], "ad": [4, 5, 7, 8, 10, 12, 13, 15, 18, 22, 28, 31, 40, 42, 43, 47, 52, 61, 69, 76], "directori": [4, 5, 8, 10, 12, 13, 15, 16, 22, 27, 28, 31, 36, 37, 40, 41, 50, 52, 53, 54, 55, 56, 57, 58, 59, 69], "filenam": [4, 5, 8, 10, 12, 13, 15, 22, 28, 31, 36, 61, 69], "prefix": [4, 5, 8, 10, 12, 13, 15, 22, 28, 31, 32, 60, 69, 77], "share": [4, 5, 8, 10, 12, 13, 22, 28, 31, 39, 57, 69], "releas": [4, 5, 8, 12, 13, 15, 22, 28, 31, 36, 41, 42, 53, 54], "delet": [4, 5, 6, 7, 8, 10, 12, 13, 15, 22, 28, 29, 31, 32, 36, 41, 50, 69], "inaccess": [4, 5, 8, 12, 13, 15, 22, 28, 31], "overwritten": [4, 5, 8, 12, 13, 15, 22, 28, 31, 45, 47], "remov": [4, 5, 8, 12, 13, 15, 22, 28, 31, 36, 40, 56, 68, 73, 77], "remain": [4, 5, 8, 12, 13, 15, 22, 28, 31, 53, 61, 62, 68, 74], "better": [4, 5, 8, 12, 13, 15, 22, 28, 31], "perform": [4, 5, 8, 10, 12, 13, 15, 17, 21, 22, 24, 28, 31, 36, 38, 39, 40, 43, 44, 46, 52, 60, 61, 64, 67, 68, 69, 72], "caus": [4, 5, 8, 12, 13, 15, 22, 28, 31, 50, 52], "expand": [4, 5, 8, 12, 13, 15, 22, 28, 31, 33, 61], "success": [4, 5, 6, 8, 12, 13, 15, 17, 21, 22, 28, 31, 72, 76], "file_format": [4, 5, 8, 12, 13, 15, 22, 28, 31], "_local": [4, 5, 8, 12, 13, 15, 22, 28, 31, 45], "determin": [4, 5, 8, 10, 12, 13, 15, 22, 28, 31, 33, 39, 45, 55, 61, 66, 68, 69], "becaus": [4, 5, 8, 12, 13, 15, 21, 23, 28, 31, 40, 43, 44, 45, 46, 50, 61, 66, 67, 68, 73, 77], "copi": [4, 8, 12, 13, 15, 28, 30, 73], "kwarg": [5, 10, 12, 23, 26, 32, 33, 66, 69], "repres": [5, 7, 10, 12, 28, 29, 31, 32, 36, 45, 66, 69, 77], "belong": [5, 12, 66], "often": [5, 12, 66, 70], "speed": [5, 12, 24, 38, 42, 55, 66, 67, 75], "oper": [5, 6, 7, 8, 10, 12, 13, 15, 22, 27, 28, 30, 31, 35, 36, 39, 46, 50, 56, 58, 59, 60, 63, 68, 69, 71, 76], "cost": [5, 12, 66], "initi": [5, 6, 12, 22, 23, 36, 54, 59, 66, 67, 72, 76], "navalu": [5, 12, 66], "miss": [5, 12, 66], "null": [5, 12, 15, 31, 45, 66, 77], "n": [5, 8, 10, 12, 15, 21, 22, 23, 24, 28, 29, 31, 32, 44, 54, 56, 59, 64, 65, 66, 67, 68, 69, 73, 74], "permut": [5, 8, 10, 12, 30, 31, 33, 45, 60, 63, 66, 69, 75], "segment": [5, 10, 12, 15, 17, 28, 31, 33, 45, 60, 61, 66, 69, 73, 75, 77], "offset": [5, 10, 12, 15, 23, 31, 45, 61, 66, 75, 77], "union": [5, 6, 8, 12, 14, 15, 17, 21, 22, 23, 24, 28, 30, 31, 43, 60, 61, 63, 64, 66, 67, 70, 75, 77], "nlevel": [5, 12, 60, 66], "distinct": [5, 8, 12, 66], "rank": [5, 12, 22, 23, 31, 45, 60, 61, 66, 67, 71], "onli": [5, 8, 10, 12, 13, 15, 19, 21, 22, 23, 24, 28, 29, 30, 31, 35, 36, 38, 40, 41, 43, 45, 47, 52, 55, 56, 58, 59, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77], "binop": [5, 8, 12, 15, 22, 28, 31], "registerablepiec": [5, 12], "requiredpiec": [5, 12], "classmethod": [5, 7, 8, 12, 13, 28, 29, 66], "from_cod": [5, 12, 60, 66], "pre": [5, 12, 33, 66], "comput": [5, 6, 8, 10, 12, 17, 21, 22, 28, 31, 35, 43, 61, 64, 66, 68, 69, 70, 72, 73, 75, 77], "constructor": [5, 12, 28, 43, 66], "normal": [5, 6, 7, 8, 10, 12, 22, 23, 32, 35, 64, 66, 68, 69], "input": [5, 7, 8, 10, 21, 22, 23, 24, 28, 30, 32, 35, 39, 61, 63, 64, 66, 69, 72, 74, 75], "from_return_msg": [5, 7, 8, 10, 12, 13, 28, 29, 31], "rep_msg": [5, 7, 8, 10, 12, 13, 28, 31, 55], "standardize_categori": [5, 12], "origin": [5, 7, 8, 10, 12, 13, 15, 19, 21, 22, 24, 28, 29, 31, 32, 64, 66, 67, 68, 69, 73, 77], "remap": [5, 12], "set_categori": [5, 12], "new_categori": [5, 12], "old": [5, 12, 39], "unchang": [5, 12], "na": [5, 12, 45], "produc": [5, 12, 31, 66, 77], "isna": [5, 12], "self": [5, 8, 12, 22, 28, 31, 61, 62, 65, 66, 68, 72, 73, 74, 77], "reset_categori": [5, 12], "recomput": [5, 12, 15], "unus": [5, 12, 15, 61], "slice": [5, 8, 12, 22, 43, 60, 65, 66, 68, 73, 77], "subset": [5, 6, 8, 11, 12, 28, 55, 64, 68, 73], "In": [5, 8, 10, 12, 15, 21, 22, 31, 35, 36, 37, 39, 40, 43, 50, 52, 53, 55, 57, 61, 64, 69, 70, 71, 73, 76, 77], "case": [5, 6, 10, 12, 13, 15, 21, 22, 29, 31, 32, 36, 38, 43, 44, 45, 47, 52, 53, 55, 57, 64, 74], "elimin": [5, 12, 47], "gener": [5, 6, 8, 11, 12, 17, 18, 21, 22, 23, 25, 27, 29, 32, 34, 35, 36, 40, 41, 43, 44, 45, 47, 52, 53, 57, 59, 61, 64, 67, 74], "instanc": [5, 7, 8, 10, 12, 22, 23, 29, 31, 36, 47, 52, 55, 61, 64, 68, 69, 70, 72, 77], "substr": [5, 7, 12, 31, 60, 66], "str_scalar": [5, 9, 12, 20, 31, 66, 77], "regex": [5, 12, 31, 66, 77], "whether": [5, 8, 10, 12, 15, 19, 24, 28, 29, 31, 32, 43, 61, 66, 73, 74, 75, 77], "regular": [5, 12, 31, 60, 66], "handl": [5, 6, 8, 12, 21, 31, 46, 61, 66, 68, 72, 77], "re2": [5, 12, 31, 52, 66, 77], "lookahead": [5, 12, 31, 66, 77], "lookbehind": [5, 12, 31, 66, 77], "rasi": [5, 12, 31, 66, 77], "startswith": [5, 12, 31, 60, 66, 77], "endswith": [5, 12, 31, 60, 66, 77], "significantli": [5, 12, 40, 66], "instead": [5, 7, 8, 10, 12, 15, 22, 31, 36, 59, 61, 64, 66, 69, 77], "full": [5, 12, 19, 21, 23, 25, 31, 32, 38, 40, 50, 52, 54, 58, 66, 77], "in1d": [5, 12, 24, 35, 43, 60, 66, 75, 77], "against": [5, 12, 28, 31, 36, 43, 61, 73, 77], "intersect1d": [5, 12, 24, 28, 35, 43, 60, 73, 75], "union1d": [5, 12, 24, 28, 35, 43, 60, 73, 75], "consid": [5, 8, 12, 39, 77], "wise": [5, 12, 21, 22, 60, 65], "b": [5, 6, 8, 10, 12, 15, 17, 21, 22, 23, 24, 25, 28, 29, 30, 31, 43, 59, 63, 64, 68, 69, 70, 71, 72, 73, 75, 77], "scale": [5, 12, 25, 38, 43, 49], "arbitrarili": [5, 12], "larg": [5, 12, 36, 64], "cat": [5, 12, 15, 57], "cattwo": [5, 12], "hash": [5, 12, 21, 28, 30, 31, 63], "128": [5, 12, 21, 28, 31], "ith": [5, 12, 28, 31], "concaten": [5, 8, 12, 24, 28, 29, 31, 33, 35, 60, 73, 74, 77], "siphash128": [5, 12, 31], "balanc": [5, 12, 31], "dictionari": [5, 6, 8, 10, 12, 15, 16, 31, 33, 55, 61, 68, 69], "realist": [5, 12, 31], "about": [5, 6, 12, 14, 22, 31, 32, 35, 36, 40, 50, 55, 64, 65, 77], "probabl": [5, 12, 31], "collis": [5, 12, 21, 31], "neglig": [5, 12, 31], "place": [5, 7, 8, 10, 12, 13, 15, 18, 22, 27, 28, 29, 31, 32, 33, 37, 41, 64, 69], "togeth": [5, 8, 10, 12, 31, 75], "guarante": [5, 12, 30, 31, 63, 77], "lie": [5, 12, 31], "contigu": [5, 12, 17, 31], "necessarili": [5, 12, 31], "groupbi": [5, 8, 10, 12, 15, 28, 31, 60, 66, 77], "simpli": [5, 6, 12, 21, 67], "even": [5, 8, 10, 12, 22, 45, 64, 68, 69, 76], "rather": [5, 8, 12, 31], "argsort": [5, 6, 8, 10, 12, 13, 22, 30, 60, 63, 64, 66, 68, 69, 77], "merg": [5, 8, 12, 39], "synchron": [5, 12], "interleav": [5, 8, 12, 24, 67], "greatli": [5, 12, 24, 67], "improv": [5, 12, 24, 39, 40, 55, 67], "determinist": [5, 12, 24, 67], "expens": [5, 12], "slower": [5, 12, 77], "categorical_arrai": [5, 12], "collect": [5, 8, 10, 12, 13, 15, 22, 26, 28, 31, 53, 69], "within": [5, 6, 8, 10, 11, 12, 13, 15, 22, 23, 28, 31, 35, 36, 45, 47, 67, 68, 69, 73], "written": [5, 8, 10, 12, 13, 15, 16, 18, 22, 28, 31, 44, 45, 46, 47, 48, 52, 61, 69, 72], "load": [5, 8, 12, 13, 15, 22, 28, 31, 44, 45, 47, 48, 57, 61], "creation": [5, 12, 35, 39, 60], "without": [5, 8, 12, 15, 22, 41, 50, 52, 61, 68], "to_parquet": [5, 8, 12, 13, 15, 22, 28, 31, 47, 48, 61], "compress": [5, 8, 12, 13, 15, 22, 28, 31, 36, 71, 73], "parquet": [5, 8, 10, 12, 13, 15, 22, 28, 31, 36, 44, 46, 48, 61, 69], "chunk": [5, 12, 13, 15, 22, 28, 31], "snappi": [5, 8, 12, 13, 15, 22, 28, 31, 36, 47, 52], "gzip": [5, 8, 12, 13, 15, 22, 28, 31, 36, 47], "brotli": [5, 8, 12, 13, 15, 22, 28, 31, 36, 47], "zstd": [5, 8, 12, 13, 15, 22, 28, 31, 36, 47], "lz4": [5, 8, 12, 13, 15, 22, 28, 31, 36, 47], "On": [5, 6, 12, 76], "due": [5, 12, 15, 44, 47, 61], "compat": [5, 8, 12, 22, 28, 32, 33, 68, 69], "issu": [5, 8, 10, 12, 35, 39, 52, 57, 69, 73], "visibl": [5, 6, 12, 13, 15, 22, 28, 31, 76], "permiss": [5, 12, 13, 22, 28, 31], "form": [5, 9, 12, 13, 22, 27, 28, 31, 39, 55, 77], "numlocal": [5, 6, 8, 12, 13, 15, 22, 28, 31, 76], "effici": [5, 8, 12, 13, 22, 31, 73, 77], "less": [5, 10, 12, 13, 22, 28, 31], "o": [5, 12, 13, 22, 27, 28, 31, 58, 60], "reli": [5, 12, 13, 22, 28, 31, 69], "deprec": [5, 8, 10, 12, 13, 15, 22, 28, 29, 31, 32, 39, 61, 69], "impact": [5, 10, 12, 13, 22, 28, 38, 39, 41, 69], "differ": [5, 6, 7, 8, 10, 12, 13, 15, 17, 21, 22, 23, 24, 27, 28, 29, 31, 32, 33, 35, 36, 41, 43, 44, 45, 47, 53, 54, 60, 61, 65, 67, 68, 69, 70, 75, 76], "neither": [5, 12, 13, 22, 23, 31, 32, 67, 77], "nor": [5, 12, 13, 22, 23, 31, 67, 77], "import": [5, 7, 8, 12, 15, 21, 25, 27, 31, 35, 39, 45, 50, 52, 55, 68, 70, 76], "state": [5, 12, 31, 39], "charact": [5, 6, 7, 11, 12, 23, 31, 55, 77], "user_defined_nam": [5, 7, 8, 10, 12, 13, 22, 28, 29, 31, 32, 69], "underli": [5, 7, 8, 10, 12, 13, 21, 28, 29, 32, 69], "root": [5, 7, 8, 10, 12, 13, 22, 29, 32, 36, 45, 53, 61, 64, 69], "now": [5, 7, 8, 10, 12, 13, 22, 28, 29, 31, 32, 33, 35, 40, 41, 44, 47, 52, 53, 54, 69], "updat": [5, 7, 8, 10, 12, 13, 15, 22, 25, 28, 29, 31, 32, 47, 52, 57, 61, 69], "modif": [5, 7, 8, 10, 12, 13, 22, 28, 29, 31, 32, 55, 68, 69], "fluid": [5, 7, 8, 10, 12, 13, 22, 28, 29, 31, 32, 69], "registrationerror": [5, 7, 8, 10, 12, 13, 22, 28, 29, 31, 32, 69], "unabl": [5, 7, 8, 10, 12, 13, 22, 29, 31, 32, 69], "unregist": [5, 7, 8, 10, 12, 13, 22, 28, 29, 31, 32, 33, 60, 69], "attach": [5, 7, 8, 10, 12, 13, 22, 28, 29, 31, 32, 33, 60, 69], "unregister_categorical_by_nam": [5, 12], "is_regist": [5, 7, 8, 10, 12, 13, 22, 28, 29, 31, 32, 33, 60, 69], "immun": [5, 7, 8, 10, 12, 13, 22, 28, 29, 31, 32, 69], "until": [5, 7, 8, 10, 12, 13, 22, 28, 29, 31, 32, 41, 69], "previous": [5, 8, 10, 12, 13, 15, 22, 28, 29, 31, 32, 69], "attempt": [5, 8, 10, 12, 13, 15, 22, 28, 29, 30, 31, 32, 52, 61, 68, 69], "bool_": [5, 12, 22, 31, 32, 64, 70], "registri": [5, 8, 10, 12, 13, 14, 22, 29, 31, 32, 33, 69], "mi": [5, 12, 13, 29, 32], "json": [5, 6, 12, 14, 22, 27, 31], "pretty_print_info": [5, 12, 22, 31], "human": [5, 12, 14, 22, 31], "readabl": [5, 12, 14, 15, 22, 31, 45, 61], "static": [5, 8, 10, 12, 13, 22, 28, 29, 31, 69], "parse_hdf_categor": [5, 12], "dict": [5, 6, 8, 10, 12, 14, 15, 16, 26, 33, 68, 69], "conjunct": [5, 12, 61, 66, 77], "load_al": [5, 8, 12, 13, 15, 22, 31, 48], "reconstitut": [5, 12], "convent": [5, 12], "structur": [5, 8, 12, 28, 43, 47, 68, 69, 72, 73, 77], "construct": [5, 12, 23, 28, 31, 35, 43, 60, 69, 71], "call": [5, 6, 7, 8, 10, 12, 15, 22, 23, 28, 29, 31, 35, 43, 47, 50, 52, 54, 55, 61, 64, 65, 67, 68, 69, 72, 76], "directli": [5, 12, 22, 29, 30, 31, 43, 52, 63, 65, 66, 68, 72, 77], "send": [5, 6, 8, 12, 15, 22, 23, 28, 31, 35, 61, 68, 76], "node": [5, 8, 12, 15, 22, 28, 31, 36, 45, 59, 61], "1234": [5, 8, 12, 15, 22, 28, 31, 39], "1235": [5, 8, 12, 15, 22, 28, 31], "1236": [5, 8, 12, 15, 22, 28, 31], "1237": [5, 8, 12, 15, 22, 28, 31], "receive_arrai": [5, 8, 12, 22, 28, 31], "complet": [5, 6, 8, 12, 22, 28, 31, 35, 37, 39, 52, 54, 76, 77], "op": [5, 7, 8, 12, 15, 22, 28, 31, 36], "connect": [6, 12, 23, 27, 35, 40, 57, 60, 61], "localhost": [6, 50, 76], "5555": [6, 50, 76], "access_token": [6, 76], "connect_url": [6, 50, 76], "access_channel": [6, 76], "channel": [6, 76], "machin": [6, 36, 37, 40, 50, 53, 54, 76], "whicn": [6, 76], "interpret": [6, 12, 15, 36, 61, 76], "socket": [6, 76], "enabl": [6, 12, 18, 22, 27, 40, 52, 53, 55, 61, 76], "authent": [6, 27, 50, 76], "tcp": [6, 50, 76], "token_valu": [6, 76], "zmqchannel": [6, 76], "connectionerror": [6, 76], "pars": [6, 7, 12, 13, 22, 35, 76], "seen": [6, 76], "disconnect": [6, 12, 22], "shutdown": [6, 40, 41, 55], "symtabl": 6, "shut": [6, 50, 55], "down": [6, 38, 39, 41, 50, 52, 55], "stop": [6, 12, 23, 67, 71], "get": [6, 8, 9, 11, 12, 15, 21, 28, 35, 36, 39, 40, 41, 53, 57, 61, 65, 72, 73], "runtim": [6, 38], "serverhostnam": 6, "serverport": 6, "numpu": 6, "processor": [6, 36], "maxtaskpar": 6, "physicalmemori": 6, "get_mem_us": 6, "as_perc": 6, "amount": [6, 8, 12, 22, 55, 68, 77], "symbol": [6, 12, 14, 22, 28, 31, 35, 72], "kb": [6, 8, 12], "mb": [6, 8, 12], "gb": [6, 8, 12], "tb": 6, "pb": 6, "percent": 6, "alloc": 6, "get_mem_avail": 6, "get_mem_statu": 6, "retriev": [6, 11, 12, 14, 22, 27, 29, 39], "statu": 6, "total_mem": 6, "total": [6, 10, 12, 15, 31, 36, 61], "physic": [6, 19, 77], "host": [6, 27, 52], "avail_mem": 6, "arkouda_mem_alloc": 6, "chapel": [6, 12, 21, 35, 38, 40, 45, 49, 50, 52, 55, 56, 57, 58, 72, 76, 77], "process": [6, 12, 14, 15, 29, 35, 42, 45, 50, 57, 61, 73, 77], "pct_avail_mem": 6, "percentag": 6, "locale_id": 6, "id": [6, 36, 57, 69], "locale_hostnam": 6, "get_server_command": 6, "command": [6, 11, 12, 22, 35, 36, 37, 39, 41, 50, 52, 54, 55, 56, 57, 76], "commandmap": [6, 35, 55], "print_server_command": 6, "ruok": 6, "imok": 6, "mean": [6, 8, 10, 12, 15, 22, 23, 27, 28, 36, 60, 61, 64, 69, 70], "imnotok": 6, "occur": [6, 8, 10, 12, 15, 20, 21, 22, 29, 31, 35, 52, 69, 70, 74, 77], "basic": [6, 12, 22, 27, 39, 57, 65, 72], "wai": [6, 36, 40, 45, 50, 55, 64, 66, 67, 68, 72, 77], "quick": [6, 40], "healthcheck": 6, "respons": [6, 12, 31, 35], "both": [6, 8, 12, 15, 17, 22, 24, 32, 40, 43, 45, 46, 50, 52, 61, 66, 75, 77], "latter": [6, 77], "generate_histori": 6, "num_command": [6, 11], "command_filt": [6, 11], "shell": [6, 11, 12, 15, 54, 61], "jupyt": [6, 11, 50], "notebook": [6, 11, 50], "ipython": [6, 11, 50], "cmd_filter": 6, "select": [6, 8, 11, 12, 15, 28, 35, 39, 52, 58, 68, 73], "10000": 6, "num": [6, 9, 12, 21], "randint": [6, 10, 12, 21, 23, 30, 43, 60, 63, 64, 67, 69, 70], "500": [6, 37, 40], "457": 6, "647": 6, "9362": 6, "9602": 6, "9683": 6, "bitvector": [7, 12], "width": [7, 12, 77], "64": [7, 12, 21, 22, 23, 36, 67, 68, 72], "revers": [7, 10, 12], "callback": [7, 12], "field": [7, 12, 23, 31, 39, 61, 77], "vector": [7, 10, 12, 60, 69], "signific": [7, 12, 21, 22, 30, 39, 55, 63, 64], "callabl": [7, 8, 12, 68], "flag": [7, 12, 15, 25, 36, 41, 55, 76], "binari": [7, 12, 23, 53, 54, 64], "thin": [7, 12], "wrapper": [7, 12, 72], "mostli": [7, 12], "affect": [7, 12], "conserv": [7, 12], "special_objtyp": [7, 12, 32], "export": [7, 12, 15, 21, 37, 40, 52, 53, 54, 57, 70], "opeq": [7, 12, 22], "msb_left": [7, 12], "pad": [7, 12, 39], "show_int": [7, 12], "back": [7, 10, 12, 35, 38, 41, 61, 69], "represent": [7, 12, 22], "accord": [7, 8, 12, 21, 68, 72], "empti": [7, 8, 10, 12, 15, 21, 22, 24, 28, 29, 52, 64, 67, 68, 70, 74], "ip_address": [7, 12, 13, 62], "ip": [7, 12], "ipv4": [7, 12, 15, 61], "helper": [7, 12], "proof": [7, 12], "made": [7, 8, 12, 31, 77], "accomod": [7, 12], "ipv6": [7, 12], "prevent": [7, 12, 15, 22, 28, 44, 45, 53, 73], "inadvert": [7, 12], "export_uint": [7, 12], "ipaddress": [7, 12], "special": [7, 12, 29, 72, 74], "is_ipv4": [7, 12], "ip2": [7, 12], "well": [7, 12, 36, 43, 56], "deal": [7, 12], "is_ipv6": [7, 12], "initialdata": [8, 12, 68], "userdict": [8, 12, 26], "homogen": [8, 12, 68], "frame": [8, 12, 29, 68, 74], "stringifi": [8, 12, 68], "pd": [8, 12, 15, 23, 32, 43, 61, 68], "usernam": [8, 12, 27, 68], "alic": [8, 12, 68], "bob": [8, 12, 68], "carol": [8, 12, 68], "userid": [8, 12, 68, 69], "111": [8, 12, 31, 68], "222": [8, 12, 68], "333": [8, 12, 68], "dai": [8, 12, 32, 39, 68, 69], "224": [8, 12, 68], "slightli": [8, 12, 15, 68], "7": [8, 10, 12, 21, 22, 23, 24, 28, 30, 43, 53, 54, 56, 61, 63, 64, 65, 67, 68, 69, 71, 73, 75], "stride": [8, 12, 17, 23, 67, 68, 71], "148": [8, 12, 68], "112": [8, 12, 68], "96": [8, 12, 22, 68], "column_class": [8, 12], "from_panda": [8, 12], "pd_df": [8, 12, 43], "drop": [8, 12, 22, 39, 64], "axi": [8, 12, 25, 28, 29, 68, 73, 74], "inplac": [8, 12, 68], "datefram": [8, 12, 68], "col_nam": [8, 12, 15, 68], "drop_dupl": [8, 12, 68], "duplcat": [8, 12, 68], "iter": [8, 12, 15, 23, 30, 36, 60, 61, 63], "dedup": [8, 12, 68], "last": [8, 12, 22, 23, 29, 30, 31, 39, 55, 63, 68, 74, 76, 77], "reset_index": [8, 12, 68], "longer": [8, 12, 23, 45, 56, 68], "caller": [8, 12, 68], "correctli": [8, 12, 57, 68], "update_s": [8, 12], "renam": [8, 12], "mapper": [8, 12, 68], "nonexist": [8, 12, 68], "ignor": [8, 10, 12, 15, 21, 32, 61, 68, 72], "99": [8, 12, 36, 68], "lower": [8, 12, 31, 45, 68], "onto": [8, 12, 31, 77], "sens": [8, 12], "whose": [8, 12, 28, 29, 31, 74], "concat": [8, 12, 13, 28, 29, 68, 74], "essenti": [8, 12, 22, 28, 31, 68, 73], "diffen": [8, 12, 68], "head": [8, 12, 29, 39], "quickli": [8, 12, 37, 68], "tail": [8, 12, 23, 29], "sampl": [8, 12, 21, 23], "random": [8, 12, 23, 25, 36, 59, 60], "use_seri": [8, 12, 68], "oject": [8, 12], "memory_usag": [8, 12], "One": [8, 10, 12, 22, 29, 43, 69, 74], "to_panda": [8, 12, 13, 29, 32, 43, 68, 74], "datalimit": [8, 12, 68], "retain_index": [8, 12, 68], "megabyt": [8, 12, 68], "request": [8, 10, 12, 16, 22, 23, 31, 35, 39, 67, 68, 69], "estim": [8, 10, 12, 22, 64, 68, 69], "book": [8, 12, 68], "disk": [8, 12, 13, 15, 22, 31, 77], "preserv": [8, 12, 29, 74, 77], "across": [8, 12, 15, 45, 61], "suffix": [8, 12, 15, 28, 31, 45, 60, 77], "convert_categor": [8, 12, 15], "categor": [8, 10, 12, 13, 15, 21, 24, 29, 30, 33, 34, 60, 61, 62, 63, 64, 67, 68, 69, 70, 72, 74, 75], "to_csv": [8, 12, 13, 15, 22, 31, 44, 48], "col_delim": [8, 12, 13, 15, 22, 31], "csv": [8, 12, 13, 15, 22, 31, 48, 61], "header": [8, 12, 13, 15, 22, 31, 61], "denot": [8, 12, 13, 15, 22, 31, 32], "unlik": [8, 12, 15, 31, 32], "utf": [8, 12, 15, 31], "8": [8, 10, 12, 15, 21, 22, 23, 28, 30, 31, 36, 43, 44, 54, 56, 61, 63, 64, 65, 67, 68, 69, 71, 72, 73], "NOT": [8, 12, 13, 15, 21, 22, 31, 52, 61, 72], "allow_error": [8, 12, 13, 15, 22, 31, 61], "unknown": [8, 12, 13, 15, 22, 23, 31], "arkouda_typ": [8, 12, 13, 15, 22, 31], "delimit": [8, 12, 13, 15, 16, 22, 29, 31, 36, 39, 44, 61, 77], "newlin": [8, 12, 13, 15, 22, 31, 44], "read_csv": [8, 12, 15, 44, 48], "infer": [8, 9, 10, 12, 15, 23, 45, 61], "ascend": [8, 10, 12, 13, 21, 22, 29, 62, 68, 70, 74], "coargsort": [8, 12, 30, 60, 63, 66, 68, 77], "sort_valu": [8, 12, 29, 68, 74], "descend": [8, 12, 23, 29, 67, 68, 74], "apply_permut": [8, 12, 68], "perm": [8, 12, 30, 33, 63, 68], "entir": [8, 12, 28, 31, 36, 41, 68, 73], "unsort": [8, 12, 68], "arbitrari": [8, 12, 68], "invers": [8, 12, 21, 33, 68], "minim": [8, 12, 40, 41, 67, 68], "filter_by_rang": [8, 12], "count": [8, 10, 12, 20, 21, 22, 28, 29, 31, 36, 43, 60, 64, 69, 73, 77], "highest": [8, 12, 22, 23], "unlimit": [8, 12], "qualifi": [8, 12], "filter_by_count": [8, 12], "deep": [8, 12, 28, 68], "reflect": [8, 12, 54, 68, 73], "shallow": [8, 12, 68], "vice": [8, 12, 61, 68], "versa": [8, 12, 61, 68], "alia": [8, 10, 12, 28, 32, 68, 69], "isin": [8, 12, 29], "show": [8, 12, 15, 25, 52, 61, 65, 69], "col_a": [8, 12], "col_b": [8, 12], "position": [8, 12], "other_df": [8, 12], "col_c": [8, 12], "corr": [8, 12, 22], "pairwis": [8, 12], "correl": [8, 12, 22], "matrix": [8, 10, 12, 69], "pearson": [8, 12, 22], "inner": [8, 12, 17], "left_suffix": [8, 12], "_x": [8, 12], "right_suffix": [8, 12], "_y": [8, 12], "join": [8, 12, 28, 31, 34, 35, 60], "inner_join_merg": [8, 12], "right_join_merg": [8, 12], "blob": [8, 12], "main": [8, 12, 36, 39, 45], "core": [8, 11, 12, 36, 39], "l137": [8, 12], "intersect": [8, 12, 24, 28, 43, 60, 75], "unregister_dataframe_by_nam": [8, 12], "mismatch": [8, 10, 12, 52, 69], "analog": [8, 10, 12, 32, 69], "obj": [8, 12, 15, 33], "intx": [8, 12], "ident": [8, 12, 33, 64, 72], "point": [8, 12, 13, 17, 21, 22, 23, 29, 57, 67, 68, 72], "posit": [8, 12, 19, 20, 22, 29, 31, 71, 74, 77], "equal": [8, 12, 17, 21, 45, 47, 70, 73], "invert_permut": [8, 12, 33], "float64": [9, 10, 12, 21, 22, 23, 24, 30, 36, 44, 45, 59, 63, 64, 67, 68, 69, 70, 72, 75], "uint8": [9, 12, 21, 31, 45, 64, 67, 70, 72, 77], "str_": [9, 12, 64, 66, 70, 77], "bigint": [9, 12, 21, 22, 23, 36, 61, 67, 72], "inttyp": [9, 12], "bittyp": [9, 12], "bool_scalar": [9, 12], "float_scalar": [9, 12, 22, 23], "numeric_scalar": [9, 12, 21, 22, 23, 64, 67], "numpy_scalar": [9, 12, 22, 64], "all_scalar": [9, 12, 23, 67], "enum": [9, 12, 18, 21, 45], "arkouda_supported_dtyp": [9, 12], "dtypeobject": [9, 12], "issupportednumb": [9, 12], "check_np_dtyp": [9, 12], "dt": [9, 12, 17, 21, 29, 72], "assert": [9, 12], "translate_np_dtyp": [9, 12], "split": [9, 12, 20, 31, 39, 60], "kind": [9, 12], "unsupport": [9, 10, 12, 15, 27, 30, 61, 75], "resolve_scalar_dtyp": [9, 12], "get_byteord": [9, 12], "concret": [9, 12], "byteord": [9, 12], "turn": [9, 12, 29, 40, 50, 74], "get_server_byteord": [9, 12], "pda": [10, 12, 21, 22, 23, 30, 32, 35, 63, 64, 67, 70, 72, 75], "groupabl": [10, 12, 24, 69, 75], "return_group": [10, 12, 75], "assume_sort": [10, 12, 69, 75], "return_indic": [10, 12, 75], "come": [10, 12, 41, 61, 67, 75], "applic": [10, 12, 21, 61, 67, 69, 75], "along": [10, 12, 21, 23, 67, 75], "consider": [10, 12, 75, 77], "groupby_reduction_typ": [10, 12], "prepar": [10, 12, 52, 69], "nkei": [10, 12, 29, 60, 69], "unique_kei": [10, 12, 60, 69], "ngroup": [10, 12, 60, 69], "logger": [10, 12, 31, 34, 60, 69], "arkoudalogg": [10, 12, 18, 31, 69], "nativ": [10, 12, 46, 47, 54, 61, 69, 73], "inherit": [10, 12, 69, 72], "overload": [10, 12, 69], "_get_grouping_kei": [10, 12, 69], "co": [10, 12, 21, 23, 60, 64, 69], "reduct": [10, 12, 22, 59, 60, 69, 70], "conform": [10, 12, 35, 69], "skipna": [10, 12, 69], "ddof": [10, 12, 22, 32, 64, 69, 70], "reduc": [10, 12, 40, 42, 69], "nan": [10, 12, 21, 29, 69, 72], "delta": [10, 12, 17, 22, 64, 69, 70], "degre": [10, 12, 21, 22, 64, 69, 70], "freedom": [10, 12, 22, 64, 69, 70], "calcul": [10, 12, 15, 22, 24, 36, 45, 61, 64, 69, 70, 75], "std": [10, 12, 22, 32, 60, 64, 69, 70], "linspac": [10, 12, 21, 23, 60, 64, 67, 69, 72], "sum": [10, 12, 21, 22, 28, 32, 60, 64, 69, 70], "77777777777777768": [10, 12, 69], "55555555555555536": [10, 12, 69], "33333333333333348": [10, 12, 69], "11111111111111116": [10, 12, 69], "min": [10, 12, 21, 22, 28, 36, 60, 64, 69, 70], "77777777777777779": [10, 12, 69], "55555555555555558": [10, 12, 69], "33333333333333337": [10, 12, 69], "33333333333333326": [10, 12, 69], "group_sum": [10, 12, 69], "14": [10, 12, 36, 43, 44, 53, 64, 65, 69, 71], "prod": [10, 12, 22, 28, 60, 64, 69, 70], "product": [10, 12, 21, 22, 23, 61, 64, 65, 69, 70], "multipli": [10, 12, 35, 69], "group_product": [10, 12, 69], "108": [10, 12, 69], "00000000000003": [10, 12, 69], "9999999999999982": [10, 12, 69], "varianc": [10, 12, 22, 64, 69, 70], "group_var": [10, 12, 69], "averag": [10, 12, 22, 23, 36, 64, 69], "squar": [10, 12, 22, 64, 69], "deviat": [10, 12, 22, 23, 32, 64, 69, 70], "len": [10, 12, 22, 28, 31, 64, 69, 71, 73, 77], "howev": [10, 12, 21, 22, 45, 52, 56, 57, 64, 66, 69], "divisor": [10, 12, 22, 64, 69], "statist": [10, 12, 22, 36, 60, 64, 69], "unbias": [10, 12, 22, 64, 69], "hypothet": [10, 12, 17, 22, 64, 69], "infinit": [10, 12, 22, 64, 69], "popul": [10, 12, 16, 20, 22, 64, 69], "likelihood": [10, 12, 22, 64, 69], "333333333333333": [10, 12, 69], "group_std": [10, 12, 69], "sqrt": [10, 12, 22, 64, 69], "se": [10, 12, 22, 64, 69], "5275252316519465": [10, 12, 69], "0954451150103321": [10, 12, 69], "group_mean": [10, 12, 69], "6666666666666665": [10, 12, 69], "7999999999999998": [10, 12, 69], "median": [10, 12, 36, 60, 69], "group_median": [10, 12, 69], "75": [10, 12, 23, 67, 69], "minimum": [10, 12, 22, 23, 53, 64, 69, 70], "minima": [10, 12, 69], "group_minima": [10, 12, 69], "max": [10, 12, 21, 22, 28, 31, 36, 60, 64, 69, 70, 77], "maxima": [10, 12, 69], "group_maxima": [10, 12, 69], "argmin": [10, 12, 22, 28, 60, 64, 69, 70], "group_argminima": [10, 12, 69], "argmax": [10, 12, 22, 28, 60, 64, 69, 70], "group_argmaxima": [10, 12, 69], "nuniqu": [10, 12, 28, 60, 69], "group_nuniqu": [10, 12, 69], "group_ani": [10, 12, 69], "OR": [10, 12, 28, 39, 60, 69], "bitwis": [10, 12, 69, 72], "AND": [10, 12, 28, 60, 69], "xor": [10, 12, 22, 28, 60, 69], "groupable_element_typ": [10, 12, 29, 69, 74], "modal": [10, 12, 69], "segarrai": [10, 12, 15, 21, 34, 60, 61, 68, 69], "broadcast": [10, 12, 22, 33, 60, 69], "fill": [10, 12, 22, 23, 36, 59, 67, 69], "constant": [10, 12, 22, 60, 69], "put": [10, 12, 41, 69], "tensor": [10, 12, 69], "replic": [10, 12, 69], "zero": [10, 12, 21, 22, 23, 39, 60, 67, 69, 71, 72], "With": [10, 12, 55, 65, 69, 71], "build_from_compon": [10, 12, 60, 69], "init": [10, 12, 54, 69], "rebuild": [10, 12, 35, 38, 40, 41, 69], "orig_kei": [10, 12, 69], "unregister_groupby_by_nam": [10, 12, 60, 69], "most_common": [10, 12, 33, 60, 69], "nonzero": [10, 12, 20, 31, 77], "go": [10, 12, 39, 41, 53, 57, 67], "invert": [10, 12, 24, 75], "suppli": [10, 12, 15, 23, 28, 45, 47, 48, 67, 68], "row_start": [10, 12], "nnz": [10, 12], "row_numb": [10, 12], "historyretriev": 11, "abstract": 11, "signatur": [11, 35], "_filter_arkouda_command": 11, "repl": [11, 12, 20, 31, 77], "shellhistoryretriev": 11, "notebookhistoryretriev": 11, "historyaccessor": 11, "accessor": [12, 34], "align": [12, 34], "array_view": [12, 15, 34, 65], "client_dtyp": [12, 15, 34], "groupbyclass": [12, 24, 29, 34, 75], "infoclass": [12, 34], "io": [12, 34, 35, 36, 46, 47, 48], "io_util": [12, 34], "matcher": [12, 34], "pdarraycr": [12, 22, 34], "pdarraysetop": [12, 28, 34, 35, 73], "plot": [12, 21, 34, 61, 70], "secur": [12, 21, 34], "timeclass": [12, 15, 34], "issupportedint": 12, "akuint64": 12, "akcast": 12, "errormod": [12, 21, 72], "strict": [12, 21, 72], "target": [12, 16, 21, 23, 36, 38, 39, 52, 61, 67, 71, 72], "return_valid": [12, 21, 72], "never": [12, 21, 72], "uninterpret": [12, 21, 72], "63": [12, 21, 22, 72], "succeed": [12, 21, 72], "rule": [12, 21, 72], "safe": [12, 21, 39, 72], "underflow": [12, 21, 72], "precis": [12, 15, 21, 61, 72], "capac": [12, 21, 72], "hold": [12, 21, 72], "upon": [12, 21, 31, 54, 55, 58, 64], "choos": [12, 21, 39, 54, 57, 64, 76], "claus": [12, 21, 64], "unequ": [12, 21, 64], "a1": [12, 17, 21, 64], "a2": [12, 17, 21, 64], "cond": [12, 21, 64], "s1": [12, 21, 64], "s2": [12, 21, 64], "c1": [12, 21, 64], "c2": [12, 21, 64], "mydtyp": [12, 22, 72], "max_bit": [12, 22, 23, 36, 61, 67, 72], "attributi": [12, 22, 72], "resid": [12, 22, 31, 72], "opeqop": [12, 22], "format_oth": [12, 22], "itself": [12, 22, 39], "is_sort": [12, 22, 60, 64, 70], "monoton": [12, 22, 64, 70], "decreas": [12, 22, 23, 40, 64, 67, 70], "numeric_and_bool_scalar": [12, 22], "occurr": [12, 20, 21, 22, 31, 64, 70, 77], "cov": [12, 22], "y": [12, 21, 22, 25, 37, 53], "covari": [12, 22], "coeffici": [12, 22], "mink": [12, 22, 55, 60, 64, 70], "k": [12, 22, 36, 64, 70], "maxk": [12, 22, 55, 60, 64, 70], "argmink": [12, 22, 60, 64, 70], "argmaxk": [12, 22, 60, 64, 70], "popcount": [12, 22], "pariti": [12, 22], "clz": [12, 22], "lead": [12, 22, 31], "ctz": [12, 22], "trail": [12, 22, 31], "rotl": [12, 22], "rotat": [12, 21, 22], "rotr": [12, 22], "value_count": [12, 21, 22, 29, 60, 70, 74], "unique_valu": [12, 21, 22, 70], "astyp": [12, 22, 31], "shorthand": [12, 22, 31], "slice_bit": [12, 22], "bottom": [12, 22, 39], "65": [12, 22], "bin": [12, 21, 22, 25, 52, 53, 54, 57, 70], "0b101111111111111111111111111111111111111111111111111111111111111111": [12, 22], "0b10": [12, 22], "bigint_to_uint_arrai": [12, 22, 23], "18446744073709551616": [12, 22, 23], "18446744073709551617": [12, 22, 23], "18446744073709551618": [12, 22, 23], "18446744073709551619": [12, 22, 23], "18446744073709551620": [12, 22, 23], "give": [12, 22, 29, 44, 56, 74, 76], "fastest": [12, 22], "fortran": [12, 22, 72], "to_cuda": [12, 22], "numba": [12, 22], "devicend": [12, 22], "builtin": [12, 22], "gpu": [12, 22], "devicendarrai": [12, 22], "importerror": [12, 22], "cuda": [12, 22], "modulenotfounderror": [12, 22], "cours": [12, 22], "cwd": [12, 15, 22], "name_prefix_local": [12, 15, 22], "to_parqet": [12, 22], "h5": [12, 15, 22, 61], "name_prefix": [12, 15, 22, 61], "repons": [12, 13, 22, 31], "insensit": [12, 13, 22, 31, 36], "save_al": [12, 13, 15, 22, 48], "older": [12, 13, 22, 45, 53], "later": [12, 22, 31, 56], "former": [12, 22, 31, 77], "free": [12, 22, 31], "registr": [12, 22, 31], "list_registri": [12, 14, 22], "unregister_pdarray_by_nam": [12, 22], "100": [12, 21, 22, 25, 36, 43, 64], "my_zero": [12, 22], "potenti": [12, 22], "reconnect": [12, 22], "attahc": [12, 22], "could": [12, 22, 25, 28, 31, 40, 55, 77], "bound": [12, 22, 23, 28, 32, 67, 73], "consecut": [12, 23, 29, 67], "third": [12, 23, 39, 67], "zerodivisionerror": [12, 22, 23, 67], "neg": [12, 23, 28, 38, 67, 71, 73], "compos": [12, 23, 31, 50, 61], "dequ": [12, 23, 61], "nbyte": [12, 23, 31, 61], "malform": [12, 23, 61], "overwhelm": [12, 23, 61], "bandwidth": [12, 23, 61], "pdrrai": [12, 21, 23, 61], "twice": [12, 23, 61], "recurs": [12, 23, 61], "respect": [12, 21, 22, 23, 24, 32, 39, 61, 67], "create_pdarrai": [12, 35], "repmsg": [12, 29, 35], "datatyp": [12, 23, 45], "six": [12, 31, 77], "parseabl": [12, 23, 67], "zeros_lik": [12, 23, 60, 67], "strings_pdarrai": [12, 31], "bytes_s": [12, 31], "encapsul": [12, 23, 27, 31], "composit": [12, 31], "raw": [12, 31, 77], "factori": [12, 13, 31], "from_part": [12, 28, 31], "offset_attrib": [12, 31], "bytes_attrib": [12, 31], "assembl": [12, 31], "entiti": [12, 31], "get_length": [12, 31], "get_byt": [12, 31], "getter": [12, 31], "110": [12, 31], "101": [12, 31], "116": [12, 31], "119": [12, 31], "104": [12, 31], "114": [12, 31], "get_offset": [12, 31], "encod": [12, 31, 36, 77], "toencod": [12, 31], "fromencod": [12, 31], "decod": [12, 31], "to_low": [12, 31], "uppercas": [12, 23, 31], "lowercas": [12, 23, 31], "to_upp": [12, 31], "to_titl": [12, 31], "titlecas": [12, 31], "is_low": [12, 31], "is_upp": [12, 31], "upper": [12, 31, 39], "is_titl": [12, 31], "mix": [12, 31, 32, 36, 65], "strip": [12, 31], "char": [12, 31], "omit": [12, 31, 32, 36, 45], "whitespac": [12, 15, 31], "combin": [12, 31, 32, 41], "1string": [12, 31], "cached_regex_pattern": [12, 31], "pattern": [12, 19, 20, 31, 39, 43, 69, 77], "purge_cached_regex_pattern": [12, 31], "purg": [12, 31], "find_loc": [12, 20, 31, 60, 77], "postit": [12, 31, 77], "positon": [12, 31, 77], "findal": [12, 20, 31, 60, 77], "num_match": [12, 31, 77], "1_2___": [12, 19, 31, 77], "____": [12, 19, 31, 77], "__4___5____6___7": [12, 19, 31, 77], "span": [12, 31, 77], "fullmatch": [12, 31, 60, 77], "whole": [12, 31, 39, 77], "maxsplit": [12, 20, 31, 77], "return_seg": [12, 20, 31, 77], "5____6___7": [12, 31, 77], "return_match_origin": [12, 19, 20, 31, 77], "conta": [12, 31, 77], "___": [12, 31, 77], "__": [12, 19, 31, 77], "sub": [12, 20, 28, 31, 60, 77], "obtain": [12, 20, 31, 77], "substitut": [12, 20, 31, 50, 52, 77], "substitu": [12, 31, 77], "subn": [12, 31, 60, 77], "new_str": [12, 31, 77], "number_of_substit": [12, 31, 77], "ior": [12, 31, 77], "strings_end": [12, 31, 77], "strings_start": [12, 31, 77], "ing": [12, 31, 77], "flatten": [12, 17, 28, 31, 45, 60, 73], "unpack": [12, 31, 50, 54, 77], "flat": [12, 31, 77], "peel": [12, 31, 60, 77], "rpeel": [12, 31, 60, 77], "orig": [12, 31, 77], "one_two": [12, 31, 77], "three_____four____f": [12, 31, 77], "under_flat": [12, 31, 77], "under_map": [12, 31, 77], "includedelimit": [12, 31, 77], "keepparti": [12, 31, 77], "fromright": [12, 31, 77], "off": [12, 31, 40, 77], "partit": [12, 31, 77], "experiment": [12, 31, 77], "sought": [12, 31, 77], "prepend": [12, 28, 31, 60, 77], "remaind": [12, 22, 31, 77], "stick": [12, 31, 41, 60, 77], "lstick": [12, 31, 60, 77], "rpartit": [12, 31, 77], "compar": [12, 31, 39, 59, 61, 77], "toleft": [12, 31, 77], "insert": [12, 31, 77], "get_prefix": [12, 28, 31, 60, 73], "return_origin": [12, 28, 31, 73], "proper": [12, 21, 28, 31, 33, 73], "long": [12, 28, 31, 41, 73], "enough": [12, 28, 31, 45, 53, 54, 73], "mask": [12, 28, 31, 73], "origin_indic": [12, 28, 31, 73], "get_suffix": [12, 28, 31, 60, 73], "compil": [12, 31, 38, 41, 42, 52, 53, 54, 55, 57], "ssegmentedstr": [12, 31], "usehash": [12, 31], "mere": [12, 31], "hello": [12, 31, 61, 77], "my": [12, 31, 40, 61, 77], "world": [12, 31, 61, 77], "u5": [12, 31, 61, 77], "segstr": [12, 31], "strings_arrai": [12, 31, 45], "save_offset": [12, 31], "deriv": [12, 15, 16, 18, 21, 31, 72], "unregister_strings_by_nam": [12, 31], "clear": [12, 22], "smallest": [12, 22, 29, 64, 74], "outperform": [12, 22, 64], "grow": [12, 22, 64], "beyond": [12, 22, 43, 64], "certain": [12, 22, 37, 55, 64], "depend": [12, 22, 45, 53, 54, 57, 58, 64, 73], "million": [12, 21, 22, 64], "degred": [12, 22, 64], "largest": [12, 22, 29, 64, 74], "degrad": [12, 22, 64], "maxmum": [12, 22, 64], "odd": [12, 22], "lz": [12, 22], "62": [12, 22, 36], "61": [12, 22], "60": [12, 22], "rot": [12, 22], "160": [12, 22], "384": [12, 22], "896": [12, 22], "2048": [12, 22], "4608": [12, 22], "512": [12, 22], "256": [12, 22, 36], "56": [12, 22, 44], "32": [12, 22, 27, 36, 43, 45, 53, 54], "18": [12, 22, 36, 64, 65, 71], "divmod": [12, 22], "dividend": [12, 22], "floordivis": [12, 22], "act": [12, 22, 35], "modular": [12, 22, 41], "divis": [12, 22], "denomin": [12, 21, 22], "At": [12, 22], "divid": [12, 22], "floor": [12, 22], "elsewher": [12, 22], "retain": [12, 22, 33], "quotient": [12, 22], "No": [12, 22, 52, 57], "div": [12, 22], "mod": [12, 22], "4142135623730951": [12, 22], "7320508075688772": [12, 22], "power": [12, 22, 49, 71], "pwr": [12, 22], "uniniti": [12, 22], "vari": [12, 22, 43, 52, 54, 56, 58, 73], "27": [12, 22, 36, 43, 65], "complementari": [12, 22], "floor_divid": [12, 22], "sign": [12, 15, 21, 22, 61, 68, 72], "fmod": [12, 22], "attach_pdarrai": [12, 22], "pda1": [12, 24, 75], "pda2": [12, 24, 75], "assume_uniqu": [12, 24, 75], "1d": [12, 24, 28, 29, 73, 74, 75], "multia": [12, 24, 75], "multib": [12, 24, 75], "setdiff1d": [12, 24, 28, 35, 43, 60, 73, 75], "setxor1d": [12, 24, 28, 35, 43, 60, 73, 75], "Ones": [12, 23, 67], "ones_lik": [12, 23, 60, 67], "fill_valu": [12, 23], "deleg": [12, 21, 23, 67, 70], "accordingli": [12, 23, 45, 67], "full_lik": [12, 23], "linearli": [12, 23, 32, 67], "evenli": [12, 21, 23, 67, 70], "greater": [12, 23, 67], "akint64": [12, 23], "seed": [12, 23, 36, 59, 67], "pull": [12, 15, 23, 39, 45, 67], "drawn": [12, 23, 67], "uniformli": [12, 23, 67], "uniform": [12, 21, 23, 30, 61, 63, 64, 67], "undefin": [12, 23, 67], "92176432277231968": [12, 23, 67], "083130710959903542": [12, 23, 67], "68894208386667544": [12, 23, 67], "9160772326374946": [12, 23, 67], "353429832157099": [12, 23, 67], "5392023718621486": [12, 23, 67], "invok": [12, 23], "30013431967121934": [12, 23], "47383036230759112": [12, 23], "0441791878997098": [12, 23], "standard_norm": [12, 23], "draw": [12, 23], "mu": [12, 23], "sigma": [12, 23], "68586185091150265": [12, 23], "1723810583573375": [12, 23], "567584107142031": [12, 23], "random_strings_uniform": [12, 23], "minlen": [12, 23], "maxlen": [12, 23], "printabl": [12, 23], "random_strings_lognorm": [12, 23], "tvkj": [12, 23], "ewab": [12, 23], "hfmd": [12, 23], "4k": [12, 23], "hff": [12, 23], "logmean": [12, 23], "logstd": [12, 23], "lognorm": [12, 23], "thu": [12, 15, 23, 30, 35, 45, 46, 63, 73], "exp": [12, 21, 23, 60, 64], "heavi": [12, 23], "toward": [12, 23], "tvkjte": [12, 23], "abocorhfm": [12, 23], "ludmmgtb": [12, 23], "kwoqnphz": [12, 23], "vsxrrl": [12, 23], "fp": [12, 23], "3q4kc": [12, 23], "hf": [12, 23], "ie": [12, 23], "djkba": [12, 23], "5oz1": [12, 23], "from_seri": [12, 23], "overridden": [12, 23, 27], "situat": [12, 23], "datetim": [12, 15, 23, 32, 36, 61], "timedelta": [12, 15, 23, 32, 61], "57600036956445599": [12, 23], "41619265571741659": [12, 23], "6615356693784662": [12, 23], "choic": [12, 23, 52], "to_datetim": [12, 23], "2018": [12, 23], "datetime64": [12, 23, 32], "01": [12, 23, 36, 39, 41], "1514764800000000000": [12, 23], "nanosecond": [12, 23, 32], "ab": [12, 21, 32, 60, 64], "natur": [12, 21, 64], "logarithm": [12, 21, 64], "3025850929940459": [12, 21, 64], "6051701859880918": [12, 21, 64], "3219280948873626": [12, 21, 64], "6438561897747253": [12, 21, 64], "exponenti": [12, 21, 64], "7182818284590451": [12, 21, 64], "3890560989306504": [12, 21, 64], "085536923187668": [12, 21, 64], "54": [12, 21, 64], "598150033144236": [12, 21, 64], "84010843172504": [12, 21, 64], "46": [12, 21, 64], "454368507659211": [12, 21, 64], "5571769623557188": [12, 21, 64], "33": [12, 21, 64], "494295836924771": [12, 21, 64], "13": [12, 21, 36, 53, 56, 64, 65, 70, 71], "478894913238722": [12, 21, 64], "cumsum": [12, 21, 60, 64], "cumul": [12, 21, 25, 59, 64], "th": [12, 21, 28, 64, 73], "1598310770203937": [12, 21, 64], "4110385860243131": [12, 21, 64], "1622479306453748": [12, 21, 64], "710615785506533": [12, 21, 64], "945880905466208": [12, 21, 64], "cumprod": [12, 21, 60, 64], "5728783400481925": [12, 21, 64], "0472855509390593": [12, 21, 64], "78523998586553": [12, 21, 64], "134": [12, 21, 64], "05309592737584": [12, 21, 64], "450": [12, 21, 64], "21589865655358": [12, 21, 64], "sin": [12, 21, 60, 64], "sine": [12, 21, 64], "cosin": [12, 21, 64], "tan": [12, 21], "tangent": [12, 21], "arcsin": [12, 21], "pi": [12, 21], "arcco": [12, 21], "arctan": [12, 21], "arctan2": [12, 21], "denom": [12, 21], "pair": [12, 16, 17, 21, 28, 73], "angl": [12, 21], "radian": [12, 21], "rai": [12, 21], "placement": [12, 21], "circl": [12, 21], "sinh": [12, 21], "hyperbol": [12, 21], "cosh": [12, 21], "tanh": [12, 21], "arcsinh": [12, 21], "arccosh": [12, 21], "arctanh": [12, 21], "rad2deg": [12, 21], "deg2rad": [12, 21], "siphash": [12, 21], "algorithm": [12, 21, 30, 50, 63], "risk": [12, 21, 45], "few": [12, 21, 43], "small": [12, 21, 45, 61], "strongli": [12, 21], "cryptograph": [12, 21], "Not": [12, 15, 21, 32, 36, 68], "emploi": [12, 21], "adversari": [12, 21], "engin": [12, 21], "linear": [12, 21, 77], "subsequ": [12, 21, 45], "xore": [12, 21], "cancel": [12, 21], "henc": [12, 21], "ordin": [12, 21], "histogram": [12, 21, 25, 60], "edg": [12, 21, 25, 70], "notimplementederror": [12, 21, 35, 70], "histogram2d": [12, 21, 70], "matplotlib": [12, 21, 25, 56, 70], "pyplot": [12, 21, 25, 70], "plt": [12, 21, 25, 70], "nbin": [12, 21, 70], "h": [12, 21, 25, 32, 59, 70, 76], "bi": [12, 21], "coordin": [12, 21, 65], "nx": [12, 21, 36], "ny": [12, 21], "hist": [12, 21], "x_edg": [12, 21], "y_edg": [12, 21], "histogramdd": [12, 21], "multidimension": [12, 21], "nd": [12, 21], "z": [12, 21], "return_count": [12, 21, 70], "isnan": [12, 21], "enumer": [12, 18, 21], "join_on_eq_with_dt": [12, 17], "t1": [12, 17], "t2": [12, 17], "pred": [12, 17], "result_limit": [12, 17], "1000": [12, 17, 70], "window": [12, 17, 27, 50, 58], "predic": [12, 17], "timestamp": [12, 17], "milli": [12, 17], "result_array_on": [12, 17], "true_dt": [12, 17], "abs_dt": [12, 17], "pos_dt": [12, 17], "gen_rang": [12, 17], "actual": [12, 17, 35, 44], "compute_join_s": [12, 17], "loglevel": [12, 18], "debug": [12, 18, 35, 37, 41], "critic": [12, 18], "enableverbos": [12, 18], "disableverbos": [12, 18], "disabl": [12, 18, 37], "defaultt": [12, 18], "write_log": [12, 18], "log_msg": [12, 18], "clientgeneratedlog": [12, 18], "log_lvl": [12, 18], "identif": [12, 18], "akab": 12, "_base_unit": [12, 32], "_abstractbasetim": [12, 32], "datetimeindex": [12, 32], "timeseri": [12, 32], "carri": [12, 32], "sensit": [12, 32], "sec": [12, 32, 36], "accept": [12, 29, 32, 36, 74], "week": [12, 32, 69], "w": [12, 19, 32, 77], "hour": [12, 32], "minut": [12, 32], "millisecond": [12, 32], "l": [12, 15, 32, 37, 39, 43, 44, 52, 61], "microsecond": [12, 32], "month": [12, 32, 39], "year": [12, 32], "day_of_year": [12, 32], "dayofyear": [12, 32], "day_of_week": [12, 32], "dayofweek": [12, 32, 69], "weekdai": [12, 32], "weekofyear": [12, 32], "is_leap_year": [12, 32], "supported_with_datetim": [12, 32], "supported_with_r_datetim": [12, 32], "supported_with_timedelta": [12, 32], "supported_with_r_timedelta": [12, 32], "supported_opeq": [12, 32], "supported_with_pdarrai": [12, 32], "supported_with_r_pdarrai": [12, 32], "isocalendar": [12, 32], "durat": [12, 32], "timedeltaindex": [12, 32], "timedelta64": [12, 32], "total_second": [12, 32], "date_rang": [12, 32], "period": [12, 32], "freq": [12, 32], "tz": [12, 32], "impos": [12, 32], "dateoffset": [12, 32], "5h": [12, 32], "offset_alias": [12, 32], "alias": [12, 32], "tzinfo": [12, 32], "zone": [12, 32], "asia": [12, 32], "hong_kong": [12, 32], "timezon": [12, 32], "naiv": [12, 32], "midnight": [12, 32], "boundari": [12, 32], "effect": [12, 32, 41, 75], "rng": [12, 32], "Of": [12, 32], "exactli": [12, 32], "learn": [12, 32, 35, 50], "timedelta_rang": [12, 32], "allsymbol": [12, 14], "__allsymbols__": [12, 14], "registeredsymbol": [12, 14], "__registeredsymbols__": [12, 14], "list_symbol_t": [12, 14], "pretty_print_inform": [12, 14], "akbool": 12, "getarkoudalogg": 12, "handler": 12, "logformat": 12, "default_log_format": 12, "conveni": [12, 53, 54, 61], "instanti": 12, "streamhandl": 12, "consol": 12, "lineno": 12, "levelnam": 12, "dynam": 12, "seg_suffix": [12, 28], "_segment": [12, 28, 45], "val_suffix": [12, 28], "_valu": [12, 28, 45], "len_suffix": [12, 28], "_length": [12, 28], "non_empti": [12, 28], "face": [12, 28, 39, 72], "from_multi_arrai": [12, 28], "transpos": [12, 28, 61], "vertic": [12, 28, 29, 73], "horizont": [12, 28, 29, 73, 74], "unord": [12, 28], "yet": [12, 28, 52, 61, 65], "get_ngram": [12, 28, 60, 73], "gram": [12, 28, 73], "came": [12, 28, 73], "ngram": [12, 28, 60], "get_jth": [12, 28, 60, 73], "j": [12, 28, 37, 38, 53, 54, 73], "backward": [12, 28, 33, 73], "set_jth": [12, 28, 60, 73], "get_length_n": [12, 28, 60, 73], "increas": [12, 28, 73], "append_singl": [12, 28, 60, 73], "prepend_singl": [12, 28, 60, 73], "remove_repeat": [12, 28, 60, 73], "return_multipl": [12, 28, 73], "condens": [12, 28, 73], "norepeat": [12, 28, 73], "segarr": [12, 28, 73], "kept": [12, 28], "maintain": [12, 13, 15, 28, 46, 61], "read_hdf": [12, 15, 28, 48, 61], "segment_nam": [12, 28], "value_nam": [12, 28], "seg_a": [12, 28, 73], "seg_b": [12, 28, 73], "setdiff": [12, 28, 60, 73], "setxor": [12, 28, 60, 73], "discard_empti": [12, 28], "unregister_segarray_by_nam": [12, 28], "individu": [12, 26, 37, 77], "akfloat64": 12, "convert_if_categor": [12, 33], "generic_concat": [12, 33], "get_callback": [12, 33], "is_uniqu": [12, 13], "rtype": [12, 13, 29], "set_dtyp": [12, 13, 62], "to_dict": [12, 13], "multiindex": [12, 13, 29, 62, 74], "enter": [12, 29, 61, 74], "str_acc": [12, 29], "lst": [12, 29], "scaler": [12, 29, 74], "topn": [12, 29, 74], "top": [12, 29, 35, 40, 45, 52, 53, 54, 58, 74], "sort_index": [12, 29, 74], "frequent": [12, 29, 55, 74], "diff": [12, 29], "to_datafram": [12, 29], "index_label": [12, 29], "value_label": [12, 29], "registerd": [12, 29], "verticl": [12, 29, 74], "pdconcat": [12, 29, 74], "skew": 12, "bia": 12, "weight": 12, "stat": [12, 36], "9442193396379163": 12, "plot_dist": [12, 25], "xlabel": [12, 25], "newfig": [12, 25], "graph": [12, 25, 69], "figur": [12, 25, 41], "below": [12, 25, 36, 37, 43, 52, 53, 54, 56, 61, 68], "hist_al": [12, 25], "ak_df": [12, 25], "col": [12, 25], "grid": [12, 25], "visual": [12, 25], "randn": [12, 25], "get_filetyp": [12, 15], "read_parquet": [12, 15, 48, 61], "read_nest": [12, 15, 61], "h5l": [12, 15], "imit": [12, 15], "nest": [12, 15, 45, 61], "technic": [12, 15], "ls_csv": [12, 15, 44, 48], "get_null_indic": [12, 15], "datasetnam": [12, 15, 61], "get_dataset": [12, 15, 44, 48, 61], "column_delim": [12, 15, 61], "get_column": [12, 15, 44, 48], "strict_typ": [12, 15], "calc_string_offset": [12, 15, 61], "tag_data": [12, 15], "uint32": [12, 15, 61, 64, 67, 70, 72, 77], "tell": [12, 15, 36, 61], "versu": [12, 15, 61], "tagdata": [12, 15], "glob": [12, 15, 61], "independ": [12, 15, 27, 61], "sequenti": [12, 15, 61], "read_tagged_data": [12, 15], "dset_nam": [12, 15], "stricttyp": [12, 15, 61], "invalid": [12, 15, 61], "filetyp": [12, 15, 61], "detect": [12, 15, 45, 61], "record": [12, 15], "filename_cod": [12, 15], "filname_cod": [12, 15], "import_data": [12, 15, 46, 61], "read_path": [12, 15, 61], "write_fil": [12, 15, 61], "return_obj": [12, 15, 61], "runtimewarn": [12, 15, 61], "dataset_nam": [12, 15, 61], "ak_data": [12, 15, 61], "path_prefix": [12, 15], "wrong": [12, 15, 76], "termin": [12, 15, 45, 50, 57, 76], "filenotfound": [12, 15], "datsetnam": [12, 15], "read_": [12, 15], "snapshot": [12, 15], "restor": [12, 15], "alongsid": [12, 15], "sent": [12, 15, 46], "receive_datafram": [12, 15], "send_arrai": [12, 15], "attach_al": [12, 33], "unregister_al": [12, 33], "register_al": [12, 33], "myarrai": [12, 33], "as_compon": [12, 33], "get_directori": 16, "pathlib": [16, 27], "write_line_to_fil": 16, "unsupportedopt": 16, "delimited_file_to_dict": 16, "unsupportedoper": 16, "dict_to_delimited_fil": 16, "oerror": 16, "parent_entry_nam": [19, 20], "match_typ": [19, 20, 60, 77], "matchtyp": [19, 20, 77], "indici": [19, 77], "find_match": [19, 60, 77], "group_num": [19, 77], "return_group_origin": [19, 77], "isaac": [19, 77], "newton": [19, 77], "calculu": [19, 77], "gottfri": [19, 77], "leibniz": [19, 77], "math": [19, 77], "locationsinfo": 20, "get_match": 20, "return_num_sub": 20, "username_token": 27, "generate_token": 27, "secret": 27, "token_hex": 27, "hexidecim": 27, "get_home_directori": 27, "platform": 27, "home": [27, 52, 55], "expandus": 27, "get_arkouda_client_directori": 27, "artifact": 27, "environ": [27, 36, 50, 55, 56], "get_usernam": 27, "environmenterror": 27, "linux": [27, 36, 52, 57, 58], "maco": [27, 50, 53, 58], "aka": 27, "darwin": [27, 54], "generate_username_token_json": 27, "sortingalgorithm": [30, 63], "radixsortlsd": [30, 63], "digit": [30, 63], "radix": [30, 63], "stabl": [30, 63, 65], "resili": [30, 63], "intens": [30, 43, 63, 67], "move": [30, 41, 43, 63, 67, 73], "forward": [30, 57, 63, 73], "lexicograph": [30, 39, 63], "report_mem": 33, "enrich_inplac": 33, "keynam": 33, "seg": 33, "earlier": [33, 43], "page": [34, 39, 52], "auto": [34, 39], "arkouda": [34, 36, 39, 41, 42, 46, 48, 56, 57, 58, 59, 60, 61, 63, 64, 66, 67, 69, 70, 71, 72, 75], "sphinx": [34, 52, 56], "autoapi": [34, 56], "guid": [35, 50, 52, 53, 54], "describ": [35, 39], "walk": [35, 37, 50], "times2": 35, "somewher": 35, "subdirectori": 35, "docstr": 35, "numpydoc": 35, "readthedoc": 35, "en": 35, "latest": [35, 53, 54, 57], "html": [35, 52, 65], "generic_msg": [35, 55], "repli": 35, "possibli": 35, "typecheck": 35, "def": [35, 44, 55], "doubl": 35, "isinst": 35, "cmd": [35, 55], "arg1": 35, "org": [35, 65], "__all__": 35, "contribut": 35, "machineri": 35, "broken": 35, "dispatch": 35, "arraysetop": [35, 75], "arraysetopsmsg": 35, "modul": [35, 40, 41, 50, 61, 77], "sake": 35, "simplic": 35, "happen": [35, 39], "serverdaemon": 35, "times2msg": 35, "gensymentri": 35, "getgenerictypearrayentri": 35, "tosymentri": 35, "symentri": 35, "st": 35, "addentri": 35, "servererrorstr": 35, "src": [35, 55], "manner": 35, "respond": 35, "reqmsg": 35, "msgarg": 35, "borrow": 35, "messagearg": 35, "symtab": 35, "msgtupl": 35, "throw": 35, "vname": 35, "nextnam": 35, "gent": 35, "getgenerictypedarrayentri": 35, "getvalueof": 35, "av": 35, "createsymentri": 35, "attrib": 35, "aslogg": 35, "getmodulenam": [35, 55], "getroutinenam": 35, "getlinenumb": 35, "msgtype": 35, "errormsg": 35, "ret": 35, "promot": 35, "final": [35, 36, 39, 52], "resisterfunct": 35, "abl": [35, 39, 45, 46, 52, 61], "launch": [35, 57, 60], "script": [35, 40, 54, 55, 59], "undoubl": 35, "overview": 36, "simplest": 36, "navig": [36, 39, 52, 53, 54, 56], "python3": [36, 40, 52, 53], "autosav": 36, "storag": 36, "benchmark_v2": 36, "commandlin": 36, "0001_0d4865d7c9453adc6af6409568da326845c358b9_20230406_165330": 36, "Will": 36, "counter_nam": 36, "trial": [36, 59], "comma": [36, 44, 52], "NO": 36, "comparison": [36, 44, 66, 72, 73, 77], "maxbit": 36, "wraparound": 36, "unaffect": 36, "alpha": [36, 59], "index_s": [36, 59], "gather": [36, 60], "scatter": [36, 60], "value_s": [36, 59], "idna": 36, "ascii": 36, "io_only_writ": 36, "io_only_read": 36, "io_only_delet": 36, "io_files_per_loc": 36, "io_compress": 36, "io_path": 36, "ak_io_benchmark": 36, "measur": [36, 59], "rate": 36, "encoding_benchmark": 36, "arkouda_root": 36, "cpython": 36, "64bit": 36, "0014_31de39be8b19c76d073a8999def6673a305c250d_20230405_145759_uncommit": 36, "strings_encodedecod": 36, "stddev": 36, "iqr": 36, "outlier": 36, "round": 36, "bench_encod": 36, "3304": 36, "2561": 36, "7544": 36, "5306": 36, "8075": 36, "9012": 36, "210": 36, "3306": 36, "79": 36, "3805": 36, "02": 36, "8800": 36, "7336": 36, "6465": 36, "58": 36, "4231": 36, "5246": 36, "267": 36, "8380": 36, "bench_decod": 36, "4444": 36, "03": 36, "4177": 36, "7852": 36, "4097": 36, "5622": 36, "04": [36, 57], "5837": 36, "264": 36, "1882": 36, "4621": 36, "9177": 36, "2250": 36, "6125": 36, "50": [36, 43], "0197": 36, "17": [36, 43, 65, 71], "9991": 36, "90": 36, "236": 36, "6864": 36, "88": 36, "0015_31de39be8b19c76d073a8999def6673a305c250d_20230405_145947_uncommit": 36, "4298": 36, "6450": 36, "5541": 36, "0889": 36, "5801": 36, "00": 36, "1436": 36, "281": 36, "3620": 36, "4875": 36, "5255": 36, "7912": 36, "07": 36, "4328": 36, "87": 36, "5652": 36, "4869": 36, "39": 36, "263": 36, "7659": 36, "94": 36, "lot": 36, "benefici": [36, 47], "purpos": [36, 39, 62, 68, 74], "area": 36, "care": 36, "lesser": 36, "extent": 36, "cpu": 36, "architectur": 36, "ran": [36, 40], "350": 36, "relat": [36, 39, 43], "abov": [36, 41, 43, 50, 52, 53, 68, 77], "machine_info": 36, "msi": 36, "x86_64": [36, 53, 57], "python_compil": 36, "gcc": [36, 53], "python_implement": 36, "python_implementation_vers": 36, "python_vers": 36, "python_build": 36, "nov": 36, "26": [36, 65], "2020": 36, "57": 36, "16": [36, 37, 38, 53, 54, 64, 65, 71], "microsoft": [36, 57], "wsl2": [36, 58], "cpuinfo_vers": 36, "cpuinfo_version_str": 36, "arch": 36, "arch_string_raw": 36, "vendor_id_raw": 36, "genuineintel": 36, "brand_raw": 36, "intel": 36, "tm": 36, "i7": 36, "8750h": 36, "20ghz": 36, "hz_advertised_friendli": 36, "2000": 36, "ghz": 36, "hz_actual_friendli": 36, "2080": 36, "hz_advertis": 36, "2200000000": 36, "hz_actual": 36, "2207999000": 36, "model": 36, "158": 36, "famili": 36, "3dnowprefetch": 36, "abm": 36, "adx": 36, "ae": 36, "apic": 36, "arch_cap": 36, "avx": 36, "avx2": 36, "bmi1": 36, "bmi2": 36, "clflush": 36, "clflushopt": 36, "cmov": 36, "constant_tsc": 36, "cpuid": 36, "cx16": 36, "cx8": 36, "de": 36, "erm": 36, "f16c": 36, "flush_l1d": 36, "fma": 36, "fpu": 36, "fsgsbase": 36, "fxsr": 36, "ht": 36, "hypervisor": 36, "ibpb": 36, "ibr": 36, "invpcid": 36, "invpcid_singl": 36, "lahf_lm": 36, "lm": 36, "mca": 36, "mce": 36, "mmx": 36, "movb": 36, "msr": 36, "mtrr": 36, "nopl": 36, "osxsav": 36, "pae": 36, "pat": 36, "pcid": 36, "pclmulqdq": 36, "pdpe1gb": 36, "pge": 36, "pni": 36, "popcnt": 36, "pse": 36, "pse36": 36, "pti": 36, "rdrand": 36, "rdrnd": 36, "rdseed": 36, "rdtscp": 36, "rep_good": 36, "sep": 36, "smap": 36, "smep": 36, "ss": 36, "ssbd": 36, "sse": 36, "sse2": 36, "sse4_1": 36, "sse4_2": 36, "ssse3": 36, "stibp": 36, "syscal": 36, "tsc": 36, "vme": 36, "xgetbv1": 36, "xsave": 36, "xsavec": 36, "xsaveopt": 36, "xtopologi": 36, "l3_cache_s": 36, "9437184": 36, "l2_cache_s": 36, "mib": 36, "l1_data_cache_s": 36, "196608": 36, "l1_instruction_cache_s": 36, "l2_cache_line_s": 36, "l2_cache_associ": 36, "commit_info": 36, "31de39be8b19c76d073a8999def6673a305c250d": 36, "2023": [36, 50, 53], "04t16": 36, "author_tim": 36, "04t12": 36, "dirti": 36, "2324_pytest_benchmark_doc": 36, "fullnam": 36, "extra_info": 36, "descript": [36, 39, 43, 60], "problem_s": 36, "transfer_r": 36, "0002": 36, "gib": 36, "disable_gc": 36, "timer": 36, "perf_count": 36, "min_round": 36, "max_tim": 36, "min_tim": 36, "5e": 36, "06": 36, "warmup": 36, "004066600000442122": 36, "007168699999965611": 36, "0048064200000226265": 36, "001326192548940973": 36, "004246700000294368": 36, "0009575499998391024": 36, "q1": 36, "004131924999910552": 36, "q3": 36, "005089474999749655": 36, "iqr_outli": 36, "stddev_outli": 36, "ld15iqr": 36, "hd15iqr": 36, "208": 36, "0550596900172": 36, "024032100000113132": 36, "00383609999971668": 36, "0043372999998609885": 36, "004057779999857303": 36, "00018361238254747651": 36, "0040258999997604406": 36, "0002090000002681336": 36, "0039507749997937935": 36, "004159775000061927": 36, "246": 36, "44017172817806": 36, "020288899999286514": 36, "05t15": 36, "09": [36, 53], "097392": 36, "pai": 36, "attent": 36, "featur": [37, 38, 39, 40, 42, 52, 55, 61, 69], "chpl_comm": [37, 53, 54], "gasnet_spawnfn": 37, "gasnet_route_output": 37, "chpl_gasnet_cfg_opt": 37, "ibv": 37, "gasnet_quiet": 37, "gasnet_masterip": 37, "127": 37, "gasnet_workerip": 37, "chpl_test_timeout": 37, "chpl_rt_oversubscrib": 37, "ye": 37, "gasnetsetup": 37, "cd": [37, 50, 53, 54, 56], "chpl_home": [37, 53, 54], "nl": [37, 50, 76], "would": [37, 41, 46, 61, 64, 69], "too": [38, 61], "backend": [38, 52], "parallel": [38, 61, 72, 75], "leverag": [38, 53], "increment": [38, 39], "everyth": [38, 39], "cut": [38, 39, 41], "somewhat": 38, "heroic": 38, "acceler": 38, "makebinari": 38, "bottleneck": 38, "tend": 38, "chpl_target_compil": 38, "clang": [38, 53], "gnu": [38, 57], "j16": 38, "outlin": [39, 45], "taken": [39, 55], "evolv": 39, "gain": 39, "team": 39, "action": 39, "click": [39, 52, 58], "draft": 39, "button": 39, "bring": 39, "text": [39, 44, 61], "box": 39, "publish": 39, "scheme": 39, "yyyi": 39, "mm": 39, "dd": 39, "v2022": 39, "31": [39, 57], "dot": 39, "hei": 39, "mistak": 39, "ok": 39, "dash": 39, "etc": [39, 53, 57], "underneath": 39, "excel": 39, "next": [39, 41, 52, 55, 76], "major": [39, 44, 62, 68, 74], "minor": 39, "review": 39, "Or": 39, "straight": 39, "green": 39, "believ": 39, "loos": 39, "remot": [39, 53, 54, 76], "upstream": [39, 53, 54], "someth": [39, 40, 76], "fetch": [39, 41], "previou": [39, 41, 54], "recent": 39, "ellips": 39, "prev": 39, "onlin": [39, 57], "concis": 39, "onelin": 39, "graphic": 39, "gitk": 39, "push": [39, 52], "strive": 39, "hyperlink": 39, "reason": [39, 41, 54], "guidelin": [39, 77], "substanti": 39, "bug": [39, 42], "smaller": [39, 44, 61], "coupl": 40, "unset": [40, 54], "optim": 40, "wors": 40, "matter": 40, "hit": 40, "chpl_develop": [40, 54], "rebuilt": 40, "homebrew": [40, 52], "shouldn": [40, 41], "worri": 40, "biggest": 40, "involv": [40, 58], "focus": 40, "just": [40, 41, 72], "crucial": 40, "saveusedmodul": [40, 41, 55], "piec": 40, "modifi": 40, "stream": 40, "benchmark": [40, 42, 55, 59], "interact": [40, 44, 48, 49, 50, 54, 56], "session": [40, 50], "usedmodul": [40, 41, 55], "ctrl": 40, "easiest": 40, "mv": [40, 41], "arkouda_config_fil": [40, 55], "know": 40, "ll": [40, 41, 52], "suggest": [41, 57], "gasnet": [41, 42, 53, 54], "report": 41, "pretti": 41, "frustrat": 41, "past": 41, "recompil": 41, "checkout": 41, "v2023": [41, 50], "isn": 41, "mine": 41, "wherev": 41, "rememb": [41, 43], "won": 41, "overnight": 41, "hog": 41, "ve": [41, 53, 54], "got": 41, "forget": [41, 57], "techniqu": 41, "unnecessari": 41, "tip": [42, 52], "usag": [42, 50, 59, 73, 76], "aim": 43, "introduct": 43, "commonli": 43, "exhaust": [43, 45], "ak_arr": 43, "easili": 43, "np_arr": 43, "52": 43, "84": 43, "80": 43, "71": 43, "aid": [43, 45], "transit": 43, "toolset": 43, "IN": 43, "ak_in1d": 43, "ak_int": 43, "m1": 43, "m2": 43, "ak_in1dmult": 43, "ak_in1dmulti": 43, "ak_intmult": 43, "though": 43, "extrem": [43, 45, 47], "let": 43, "sever": [43, 45, 61, 64, 67], "column_nam": 43, "column_data": 43, "fname": 43, "john": 43, "jane": 43, "jake": 43, "lname": 43, "smith": 43, "brown": 43, "ag": 43, "37": 43, "35": 43, "salari": 43, "75000": 43, "77000": 43, "100000": 43, "35000": 43, "f_name": 43, "l_name": 43, "notic": 43, "demo": 43, "computation": 43, "interest": 43, "cola": 44, "colb": 44, "colc": 44, "abc": 44, "ghi": 44, "arkodua": [44, 45], "flexibl": 45, "adher": 45, "portion": 45, "isbool": 45, "file_vers": 45, "arkouda_vers": 45, "c_string": 45, "mark": 45, "therefor": 45, "unflatten": 45, "reconstruct": 45, "number_of_dimens": 45, "array_of_size_rank": 45, "current_arkouda_vers": 45, "na_cod": 45, "unique_key_idx": 45, "key_": 45, "notifi": 45, "elect": [45, 46], "ONE": 45, "explicit": [45, 72], "still": [45, 77], "orient": [47, 66, 68, 72, 77], "writ": 47, "paruqet": 47, "ineffiec": 47, "fact": 47, "analyt": 49, "supercomput": 49, "visit": [50, 53, 54], "conda": [50, 52, 53, 54, 56], "yml": [50, 53, 54, 56], "download": [50, 53, 54, 58], "05": 50, "tar": [50, 52, 53, 54], "xzf": [50, 54], "gz": [50, 52, 53, 54], "listen": [50, 76], "your_machin": 50, "chapel_vers": 50, "15461882265": 50, "token_str": 50, "node01": [50, 76], "hang": 50, "exit": [50, 57], "prerequisit": [52, 53, 54], "proceed": 52, "manag": [52, 53, 54, 56, 58], "mac": [52, 54], "makefil": 52, "might": [52, 54, 55], "zeromq": [52, 56], "eval": 52, "anaconda3": [52, 53, 54], "pip": [52, 53, 54], "grep": [52, 57], "opt": [52, 53, 54], "caskroom": [52, 54], "miniforg": 52, "site": 52, "rpath": 52, "boost": 52, "cpp": 52, "thrift": 52, "utf8proc": 52, "virtual": 52, "venv": [52, 53], "activ": [52, 53, 54, 69], "upgrad": [52, 56], "wheel": 52, "clean": 52, "deactiv": 52, "rm": 52, "rf": 52, "dist": 52, "whl": 52, "chpldoc": [52, 53], "frontend": 52, "browser": 52, "ghpage": 52, "scroll": 52, "folder": 52, "homepag": 52, "md": [52, 53, 54], "sudo": [53, 57], "apt": 53, "m4": 53, "perl": 53, "bash": [53, 54], "mawk": 53, "pkg": 53, "config": [53, 55], "cmake": [53, 56], "llvm": [53, 54, 57], "libclang": 53, "cpp14": 53, "libedit": 53, "repo": [53, 54, 58], "encourag": [53, 54], "your_fork": [53, 54], "aren": [53, 54], "further": [53, 54, 58], "highli": 53, "archiv": 53, "x86": 53, "wget": 53, "sh": [53, 54], "bashrc": [53, 54, 57], "packag": [53, 54, 56, 58], "pythonpath": [53, 54], "live": [53, 54], "pwd": [53, 54], "quickstart": [53, 54, 58], "particularli": [53, 55], "regard": 53, "distro": 53, "cento": 53, "consequ": 53, "newer": 53, "devtoolset": 53, "softwar": 53, "explod": 53, "lang": 53, "xvf": 53, "setchplenv": [53, 54], "chplconfig": 53, "chpl_re2": [53, 54], "bundl": [53, 54], "chpl_llvm": [53, 54], "chpl_gmp": [53, 54], "linux64": 53, "yum": 53, "devel": 53, "gawk": 53, "curl": 53, "incompat": 53, "el7": 53, "scl": 53, "rh": 53, "cm_version": 53, "kitwar": 53, "licens": 53, "subdir": 53, "simul": [53, 54], "manual": 54, "brew": 54, "cask": 54, "exact": 54, "chipset": 54, "2022": 54, "macosx": 54, "arm64": 54, "progress": 54, "life": [54, 56], "cycl": [54, 56], "sync": 54, "zsh": 54, "gmp": 54, "rc": 54, "path_to_chpl": 54, "chpl_target_cpu": 54, "path_to_ark": 54, "reactiv": 54, "zshrc": 54, "successfulli": 54, "hello3": 54, "datapar": 54, "defautl": 54, "funcion": 55, "prior": 55, "exclud": 55, "valuabl": 55, "switch": [55, 65], "totestmsg": 55, "testmsg": 55, "addition": [55, 62], "kextrememsg": 55, "registerfunct": 55, "minkmsg": 55, "maxkmsg": 55, "accomplish": [55, 61], "approach": [55, 73], "test_command": 55, "__dict__": 55, "sometim": [55, 65, 72], "difficult": 55, "discov": 55, "particular": 55, "inspect": [55, 61], "wish": 55, "pyzmq": 56, "typeguard": 56, "tabul": 56, "pyfiglet": 56, "h5py": [56, 61], "pyarrow": [56, 61], "pexpect": 56, "argpars": 56, "furo": 56, "myst": 56, "parser": 56, "linkifi": 56, "ast": 56, "931": 56, "990": 56, "yaml": 56, "env_nam": 56, "yaml_fil": 56, "prune": 56, "path_to_arkouda": 56, "strategi": [56, 57, 61], "eager": 56, "subsystem": 57, "wsl": 57, "rout": 57, "ubuntu": 57, "tutori": 57, "app": 57, "account": 57, "symlink": 57, "lt": 57, "tblgen": 57, "libtinfow": 57, "ln": 57, "libtic": 57, "plan": [57, 58, 70, 72], "powershel": 57, "vcxsrv": 57, "x410": 57, "whichev": 57, "firewal": 57, "xserver": 57, "hous": 57, "conf": 57, "nameserv": 57, "awk": 57, "serv": 58, "clone": 58, "100000000": 59, "arithmet": [60, 72], "scan": 60, "summar": [60, 61], "dedupl": 60, "setop": 60, "primarili": 61, "columnar": 61, "spread": 61, "mpi": 61, "layer": 61, "pipelin": [61, 77], "aggress": 61, "hundr": 61, "thousand": 61, "ingest": [61, 77], "customiz": 61, "schema": 61, "taht": 61, "autoclass": 62, "offer": [62, 68, 74, 77], "mathemat": 64, "int8": [64, 67, 70, 72, 77], "int16": [64, 67, 70, 72, 77], "int32": [64, 67, 70, 72, 77], "uint16": [64, 67, 70, 72, 77], "multiplex": 64, "19": [65, 71], "28": 65, "29": 65, "advanc": 65, "talk": 65, "cartesian": 65, "wherea": [65, 77], "discourag": [65, 66, 68, 72, 73, 77], "forc": [65, 66, 68, 72, 77], "concept": 66, "almost": [66, 68, 72, 77], "liter": [66, 77], "alon": [66, 77], "unrel": 67, "movement": 67, "unsign": 68, "ieee": [68, 72], "1073741824": 68, "workhors": 69, "scienc": 69, "extract": 69, "imagin": 69, "bydayofweek": 69, "numid": 69, "013": 70, "36": 70, "934176000000015": 70, "07734942223993": 70, "syntax": 71, "assig": 71, "42": 71, "ind": 71, "matlab": 71, "outer": 71, "touch": 71, "expans": 71, "lim": 71, "backbon": 72, "And": 72, "expos": 72, "incorpor": 72, "implicit": 72, "loss": 73, "functioanl": 73, "strucutur": 73, "abil": 73, "shown": 76, "sai": 76, "went": 76, "reachabl": 76, "wide": 77, "compris": 77, "whenev": 77, "threshold": 77, "pipe": 77, "googl": 77, "sacrific": 77, "notabl": 77, "exchang": 77, "stack": 77}, "objects": {"": [[12, 0, 0, "-", "arkouda"]], "arkouda": [[12, 1, 1, "", "ARKOUDA_SUPPORTED_DTYPES"], [12, 1, 1, "", "AllSymbols"], [65, 2, 1, "", "ArrayView"], [12, 2, 1, "", "BitVector"], [12, 5, 1, "", "BitVectorizer"], [12, 2, 1, "", "CachedAccessor"], [66, 2, 1, "", "Categorical"], [12, 1, 1, "", "DTypeObjects"], [12, 1, 1, "", "DTypes"], [68, 2, 1, "", "DataFrame"], [12, 2, 1, "id1036", "Datetime"], [12, 2, 1, "", "DatetimeAccessor"], [12, 2, 1, "", "ErrorMode"], [12, 2, 1, "", "Fields"], [12, 1, 1, "", "GROUPBY_REDUCTION_TYPES"], [69, 2, 1, "", "GroupBy"], [12, 2, 1, "", "IPv4"], [62, 2, 1, "", "Index"], [12, 1, 1, "", "LEN_SUFFIX"], [12, 2, 1, "", "LogLevel"], [12, 2, 1, "", "MultiIndex"], [12, 7, 1, "", "NonUniqueError"], [12, 2, 1, "", "Properties"], [12, 1, 1, "", "RegisteredSymbols"], [12, 7, 1, "id477", "RegistrationError"], [12, 2, 1, "", "Row"], [12, 1, 1, "", "SEG_SUFFIX"], [12, 2, 1, "", "SegArray"], [74, 2, 1, "", "Series"], [12, 2, 1, "", "StringAccessor"], [12, 2, 1, "id974", "Strings"], [12, 2, 1, "id857", "Timedelta"], [12, 1, 1, "", "VAL_SUFFIX"], [64, 5, 1, "", "abs"], [2, 0, 0, "-", "accessor"], [12, 5, 1, "", "akabs"], [12, 1, 1, "id430", "akbool"], [12, 5, 1, "id476", "akcast"], [12, 1, 1, "id594", "akfloat64"], [12, 1, 1, "id595", "akint64"], [12, 1, 1, "id596", "akuint64"], [12, 5, 1, "", "align"], [3, 0, 0, "-", "alignment"], [64, 5, 1, "", "all"], [12, 1, 1, "", "all_scalars"], [64, 5, 1, "", "any"], [67, 5, 1, "", "arange"], [12, 5, 1, "", "arccos"], [12, 5, 1, "", "arccosh"], [12, 5, 1, "", "arcsin"], [12, 5, 1, "", "arcsinh"], [12, 5, 1, "", "arctan"], [12, 5, 1, "", "arctan2"], [12, 5, 1, "", "arctanh"], [64, 5, 1, "", "argmax"], [64, 5, 1, "", "argmaxk"], [64, 5, 1, "", "argmin"], [64, 5, 1, "", "argmink"], [63, 5, 1, "", "argsort"], [61, 5, 1, "", "array"], [4, 0, 0, "-", "array_view"], [12, 5, 1, "", "attach"], [12, 5, 1, "", "attach_all"], [12, 5, 1, "", "attach_pdarray"], [12, 1, 1, "id593", "bigint"], [12, 5, 1, "", "bigint_from_uint_arrays"], [12, 1, 1, "id4", "bitType"], [12, 1, 1, "", "bool"], [12, 1, 1, "", "bool_scalars"], [12, 5, 1, "id640", "broadcast"], [72, 5, 1, "", "cast"], [5, 0, 0, "-", "categorical"], [12, 5, 1, "", "check_np_dtype"], [12, 5, 1, "", "clear"], [6, 0, 0, "-", "client"], [7, 0, 0, "-", "client_dtypes"], [12, 5, 1, "", "clz"], [63, 5, 1, "", "coargsort"], [12, 5, 1, "", "compute_join_size"], [67, 5, 1, "", "concatenate"], [76, 5, 1, "", "connect"], [12, 5, 1, "", "convert_if_categorical"], [12, 5, 1, "", "corr"], [64, 5, 1, "", "cos"], [12, 5, 1, "", "cosh"], [12, 5, 1, "", "cov"], [12, 5, 1, "id540", "create_pdarray"], [12, 5, 1, "", "ctz"], [64, 5, 1, "", "cumprod"], [64, 5, 1, "", "cumsum"], [8, 0, 0, "-", "dataframe"], [12, 5, 1, "", "date_operators"], [12, 5, 1, "id879", "date_range"], [12, 5, 1, "", "deg2rad"], [12, 5, 1, "", "disableVerbose"], [12, 5, 1, "", "divmod"], [12, 5, 1, "", "dtype"], [9, 0, 0, "-", "dtypes"], [12, 5, 1, "", "enableVerbose"], [64, 5, 1, "", "exp"], [61, 5, 1, "", "export"], [12, 5, 1, "", "find"], [12, 1, 1, "", "float64"], [12, 1, 1, "", "float_scalars"], [12, 5, 1, "", "fmod"], [12, 5, 1, "id245", "from_series"], [12, 5, 1, "id704", "full"], [12, 5, 1, "", "full_like"], [12, 5, 1, "id294", "gen_ranges"], [12, 5, 1, "", "generic_concat"], [12, 5, 1, "", "getArkoudaLogger"], [12, 5, 1, "", "get_byteorder"], [12, 5, 1, "", "get_callback"], [12, 5, 1, "", "get_columns"], [61, 5, 1, "", "get_datasets"], [12, 5, 1, "", "get_filetype"], [12, 5, 1, "", "get_null_indices"], [12, 5, 1, "", "get_server_byteorder"], [10, 0, 0, "-", "groupbyclass"], [12, 5, 1, "", "hash"], [12, 5, 1, "", "hist_all"], [70, 5, 1, "", "histogram"], [12, 5, 1, "", "histogram2d"], [12, 5, 1, "", "histogramdd"], [11, 0, 0, "-", "history"], [61, 5, 1, "", "import_data"], [75, 5, 1, "", "in1d"], [12, 5, 1, "", "in1d_intervals"], [13, 0, 0, "-", "index"], [14, 0, 0, "-", "infoclass"], [12, 5, 1, "", "information"], [12, 1, 1, "id178", "int64"], [12, 1, 1, "id180", "intTypes"], [12, 1, 1, "id246", "int_scalars"], [12, 5, 1, "", "intersect"], [75, 5, 1, "", "intersect1d"], [12, 5, 1, "", "interval_lookup"], [12, 5, 1, "", "intx"], [12, 5, 1, "", "invert_permutation"], [15, 0, 0, "-", "io"], [16, 0, 0, "-", "io_util"], [12, 5, 1, "", "ip_address"], [12, 5, 1, "id247", "isSupportedInt"], [12, 5, 1, "", "isSupportedNumber"], [12, 5, 1, "", "is_cosorted"], [12, 5, 1, "", "is_ipv4"], [12, 5, 1, "", "is_ipv6"], [12, 5, 1, "", "is_registered"], [64, 5, 1, "", "is_sorted"], [12, 5, 1, "id883", "isnan"], [17, 0, 0, "-", "join"], [12, 5, 1, "", "join_on_eq_with_dt"], [12, 5, 1, "", "left_align"], [67, 5, 1, "", "linspace"], [12, 5, 1, "", "list_registry"], [12, 5, 1, "", "list_symbol_table"], [12, 5, 1, "", "load"], [12, 5, 1, "", "load_all"], [64, 5, 1, "", "log"], [18, 0, 0, "-", "logger"], [12, 5, 1, "", "lookup"], [12, 5, 1, "", "ls"], [12, 5, 1, "", "ls_csv"], [19, 0, 0, "-", "match"], [20, 0, 0, "-", "matcher"], [64, 5, 1, "", "max"], [64, 5, 1, "", "maxk"], [64, 5, 1, "", "mean"], [12, 5, 1, "", "merge"], [64, 5, 1, "", "min"], [64, 5, 1, "", "mink"], [12, 5, 1, "", "mod"], [21, 0, 0, "-", "numeric"], [12, 1, 1, "", "numeric_scalars"], [12, 1, 1, "", "numpy_scalars"], [67, 5, 1, "", "ones"], [67, 5, 1, "", "ones_like"], [12, 5, 1, "", "parity"], [72, 2, 1, "", "pdarray"], [22, 0, 0, "-", "pdarrayclass"], [23, 0, 0, "-", "pdarraycreation"], [24, 0, 0, "-", "pdarraysetops"], [12, 5, 1, "", "plot_dist"], [25, 0, 0, "-", "plotting"], [12, 5, 1, "", "popcount"], [12, 5, 1, "", "power"], [12, 5, 1, "", "pretty_print_information"], [64, 5, 1, "", "prod"], [12, 5, 1, "", "rad2deg"], [67, 5, 1, "", "randint"], [12, 5, 1, "", "random_strings_lognormal"], [12, 5, 1, "", "random_strings_uniform"], [61, 5, 1, "", "read"], [12, 5, 1, "", "read_csv"], [12, 5, 1, "", "read_hdf"], [12, 5, 1, "", "read_parquet"], [12, 5, 1, "", "read_tagged_data"], [12, 5, 1, "", "receive"], [12, 5, 1, "", "receive_dataframe"], [12, 5, 1, "", "register_all"], [12, 5, 1, "", "resolve_scalar_dtype"], [12, 5, 1, "", "restore"], [12, 5, 1, "", "right_align"], [12, 5, 1, "", "rotl"], [12, 5, 1, "", "rotr"], [26, 0, 0, "-", "row"], [12, 5, 1, "", "save_all"], [12, 5, 1, "", "search_intervals"], [27, 0, 0, "-", "security"], [28, 0, 0, "-", "segarray"], [29, 0, 0, "-", "series"], [75, 5, 1, "", "setdiff1d"], [75, 5, 1, "", "setxor1d"], [64, 5, 1, "", "sin"], [12, 5, 1, "", "sinh"], [12, 5, 1, "", "skew"], [12, 5, 1, "", "snapshot"], [12, 5, 1, "", "sorted"], [30, 0, 0, "-", "sorting"], [12, 5, 1, "", "sqrt"], [12, 5, 1, "", "standard_normal"], [64, 5, 1, "", "std"], [12, 1, 1, "id248", "str_"], [12, 1, 1, "", "str_scalars"], [12, 5, 1, "", "string_operators"], [31, 0, 0, "-", "strings"], [64, 5, 1, "", "sum"], [12, 5, 1, "", "tan"], [12, 5, 1, "", "tanh"], [32, 0, 0, "-", "timeclass"], [12, 5, 1, "id880", "timedelta_range"], [12, 5, 1, "", "to_csv"], [12, 5, 1, "", "to_hdf"], [12, 5, 1, "", "to_parquet"], [12, 5, 1, "", "translate_np_dtype"], [12, 1, 1, "", "uint64"], [12, 1, 1, "", "uint8"], [12, 5, 1, "", "uniform"], [75, 5, 1, "", "union1d"], [75, 5, 1, "", "unique"], [12, 5, 1, "", "unregister"], [12, 5, 1, "", "unregister_all"], [12, 5, 1, "", "unregister_pdarray_by_name"], [12, 5, 1, "", "unsqueeze"], [12, 5, 1, "", "update_hdf"], [33, 0, 0, "-", "util"], [70, 5, 1, "", "value_counts"], [64, 5, 1, "", "var"], [64, 5, 1, "", "where"], [12, 5, 1, "", "write_log"], [12, 5, 1, "", "zero_up"], [67, 5, 1, "", "zeros"], [67, 5, 1, "", "zeros_like"]], "arkouda.ArrayView": [[65, 3, 1, "", "base"], [65, 3, 1, "", "dtype"], [65, 3, 1, "", "itemsize"], [65, 3, 1, "", "ndim"], [12, 3, 1, "", "objType"], [65, 3, 1, "", "order"], [65, 3, 1, "", "shape"], [65, 3, 1, "", "size"], [12, 4, 1, "", "to_hdf"], [12, 4, 1, "", "to_list"], [65, 5, 1, "", "to_ndarray"], [12, 4, 1, "", "update_hdf"]], "arkouda.BitVector": [[12, 3, 1, "", "conserves"], [12, 4, 1, "", "format"], [12, 4, 1, "", "from_return_msg"], [12, 4, 1, "", "opeq"], [12, 4, 1, "", "register"], [12, 3, 1, "", "special_objType"], [12, 4, 1, "", "to_list"], [12, 4, 1, "", "to_ndarray"]], "arkouda.Categorical": [[12, 3, 1, "id936", "BinOps"], [12, 3, 1, "id937", "RegisterablePieces"], [12, 3, 1, "id938", "RequiredPieces"], [12, 4, 1, "id958", "argsort"], [12, 4, 1, "id970", "attach"], [66, 3, 1, "", "categories"], [66, 3, 1, "", "codes"], [12, 4, 1, "id960", "concatenate"], [66, 4, 1, "", "contains"], [12, 3, 1, "id942", "dtype"], [66, 4, 1, "", "endswith"], [66, 4, 1, "", "from_codes"], [12, 4, 1, "id944", "from_return_msg"], [12, 4, 1, "id957", "group"], [12, 4, 1, "id956", "hash"], [12, 4, 1, "id954", "in1d"], [12, 4, 1, "id968", "info"], [12, 4, 1, "id967", "is_registered"], [12, 4, 1, "id949", "isna"], [66, 3, 1, "", "ndim"], [66, 3, 1, "", "nlevels"], [12, 3, 1, "id941", "objType"], [12, 4, 1, "id972", "parse_hdf_categoricals"], [66, 3, 1, "", "permutation"], [12, 4, 1, "id969", "pretty_print_info"], [12, 4, 1, "id965", "register"], [12, 4, 1, "id950", "reset_categories"], [12, 4, 1, "id964", "save"], [66, 3, 1, "", "segments"], [12, 4, 1, "id946", "set_categories"], [66, 3, 1, "", "shape"], [66, 3, 1, "", "size"], [12, 4, 1, "id959", "sort"], [12, 4, 1, "id945", "standardize_categories"], [66, 4, 1, "", "startswith"], [12, 4, 1, "id961", "to_hdf"], [12, 4, 1, "id948", "to_list"], [66, 5, 1, "", "to_ndarray"], [12, 4, 1, "id963", "to_parquet"], [12, 4, 1, "id973", "transfer"], [12, 4, 1, "id955", "unique"], [12, 4, 1, "id966", "unregister"], [12, 4, 1, "id971", "unregister_categorical_by_name"], [12, 4, 1, "id962", "update_hdf"]], "arkouda.DataFrame": [[12, 3, 1, "id780", "COLUMN_CLASSES"], [12, 4, 1, "id794", "GroupBy"], [12, 4, 1, "id789", "append"], [68, 5, 1, "", "apply_permutation"], [68, 5, 1, "", "argsort"], [12, 4, 1, "id821", "attach"], [68, 5, 1, "", "coargsort"], [12, 6, 1, "id777", "columns"], [68, 5, 1, "", "concat"], [68, 5, 1, "", "copy"], [12, 4, 1, "id816", "corr"], [68, 5, 1, "", "drop"], [68, 5, 1, "", "drop_duplicates"], [12, 6, 1, "id774", "dtypes"], [12, 6, 1, "id775", "empty"], [12, 4, 1, "id812", "filter_by_range"], [12, 4, 1, "id783", "from_pandas"], [12, 4, 1, "id823", "from_return_msg"], [68, 5, 1, "", "groupby"], [68, 5, 1, "", "head"], [12, 6, 1, "id778", "index"], [12, 6, 1, "id779", "info"], [12, 4, 1, "id820", "is_registered"], [12, 4, 1, "id815", "isin"], [12, 4, 1, "id807", "load"], [12, 4, 1, "id795", "memory_usage"], [12, 4, 1, "id817", "merge"], [12, 3, 1, "id781", "objType"], [12, 4, 1, "id803", "read_csv"], [12, 4, 1, "id818", "register"], [68, 5, 1, "", "rename"], [68, 5, 1, "", "reset_index"], [12, 4, 1, "id793", "sample"], [12, 4, 1, "id806", "save"], [12, 6, 1, "id776", "shape"], [12, 6, 1, "id773", "size"], [68, 5, 1, "", "sort_values"], [68, 5, 1, "", "tail"], [12, 4, 1, "id800", "to_csv"], [12, 4, 1, "id797", "to_hdf"], [68, 5, 1, "", "to_pandas"], [12, 4, 1, "id799", "to_parquet"], [12, 4, 1, "id782", "transfer"], [12, 4, 1, "id819", "unregister"], [12, 4, 1, "id822", "unregister_dataframe_by_name"], [12, 4, 1, "id798", "update_hdf"], [12, 4, 1, "id787", "update_size"]], "arkouda.Datetime": [[12, 6, 1, "id1053", "date"], [12, 6, 1, "id1043", "day"], [12, 6, 1, "id1048", "day_of_week"], [12, 6, 1, "id1046", "day_of_year"], [12, 6, 1, "id1049", "dayofweek"], [12, 6, 1, "id1047", "dayofyear"], [12, 6, 1, "id1042", "hour"], [12, 6, 1, "id1054", "is_leap_year"], [12, 4, 1, "id1068", "is_registered"], [12, 4, 1, "id1063", "isocalendar"], [12, 6, 1, "id1038", "microsecond"], [12, 6, 1, "id1039", "millisecond"], [12, 6, 1, "id1041", "minute"], [12, 6, 1, "id1044", "month"], [12, 6, 1, "id1037", "nanosecond"], [12, 4, 1, "id1066", "register"], [12, 6, 1, "id1040", "second"], [12, 3, 1, "id1062", "special_objType"], [12, 4, 1, "id1065", "sum"], [12, 3, 1, "id1059", "supported_opeq"], [12, 3, 1, "id1055", "supported_with_datetime"], [12, 3, 1, "id1060", "supported_with_pdarray"], [12, 3, 1, "id1056", "supported_with_r_datetime"], [12, 3, 1, "id1061", "supported_with_r_pdarray"], [12, 3, 1, "id1058", "supported_with_r_timedelta"], [12, 3, 1, "id1057", "supported_with_timedelta"], [12, 4, 1, "id1064", "to_pandas"], [12, 4, 1, "id1067", "unregister"], [12, 6, 1, "id1051", "week"], [12, 6, 1, "id1050", "weekday"], [12, 6, 1, "id1052", "weekofyear"], [12, 6, 1, "id1045", "year"]], "arkouda.ErrorMode": [[12, 3, 1, "", "ignore"], [12, 3, 1, "", "return_validity"], [12, 3, 1, "", "strict"]], "arkouda.Fields": [[12, 4, 1, "", "format"], [12, 4, 1, "", "opeq"]], "arkouda.GroupBy": [[69, 4, 1, "", "AND"], [69, 4, 1, "", "OR"], [12, 3, 1, "id892", "Reductions"], [69, 4, 1, "", "XOR"], [69, 4, 1, "", "aggregate"], [69, 4, 1, "", "all"], [69, 4, 1, "", "any"], [69, 4, 1, "", "argmax"], [69, 4, 1, "", "argmin"], [69, 4, 1, "", "attach"], [69, 4, 1, "", "broadcast"], [69, 4, 1, "", "build_from_components"], [69, 4, 1, "", "count"], [69, 4, 1, "", "first"], [12, 4, 1, "id894", "from_return_msg"], [69, 4, 1, "", "is_registered"], [69, 3, 1, "", "logger"], [69, 4, 1, "", "max"], [69, 4, 1, "", "mean"], [69, 4, 1, "", "median"], [69, 4, 1, "", "min"], [69, 4, 1, "", "mode"], [69, 4, 1, "", "most_common"], [69, 3, 1, "", "ngroups"], [69, 3, 1, "", "nkeys"], [69, 4, 1, "", "nunique"], [12, 3, 1, "id893", "objType"], [69, 3, 1, "", "permutation"], [69, 4, 1, "", "prod"], [69, 4, 1, "", "register"], [69, 3, 1, "", "segments"], [69, 4, 1, "id0", "size"], [69, 4, 1, "", "std"], [69, 4, 1, "", "sum"], [69, 4, 1, "", "to_hdf"], [69, 4, 1, "", "unique"], [69, 3, 1, "", "unique_keys"], [69, 4, 1, "", "unregister"], [69, 4, 1, "", "unregister_groupby_by_name"], [12, 4, 1, "id896", "update_hdf"], [69, 4, 1, "", "var"]], "arkouda.IPv4": [[12, 4, 1, "", "export_uint"], [12, 4, 1, "", "format"], [12, 4, 1, "", "normalize"], [12, 4, 1, "", "opeq"], [12, 4, 1, "", "register"], [12, 3, 1, "", "special_objType"], [12, 4, 1, "", "to_hdf"], [12, 4, 1, "", "to_list"], [12, 4, 1, "", "to_ndarray"], [12, 4, 1, "", "update_hdf"]], "arkouda.Index": [[62, 5, 1, "", "argsort"], [62, 5, 1, "", "concat"], [12, 4, 1, "", "factory"], [12, 4, 1, "", "from_return_msg"], [12, 6, 1, "", "index"], [12, 4, 1, "", "is_registered"], [12, 6, 1, "", "is_unique"], [62, 5, 1, "", "lookup"], [12, 3, 1, "", "objType"], [12, 4, 1, "", "register"], [12, 4, 1, "", "save"], [62, 5, 1, "", "set_dtype"], [12, 6, 1, "", "shape"], [12, 4, 1, "", "to_csv"], [12, 4, 1, "", "to_dict"], [12, 4, 1, "", "to_hdf"], [12, 4, 1, "", "to_list"], [12, 4, 1, "", "to_ndarray"], [12, 4, 1, "", "to_pandas"], [12, 4, 1, "", "to_parquet"], [12, 4, 1, "", "unregister"], [12, 4, 1, "", "update_hdf"]], "arkouda.LogLevel": [[12, 3, 1, "", "CRITICAL"], [12, 3, 1, "", "DEBUG"], [12, 3, 1, "", "ERROR"], [12, 3, 1, "", "INFO"], [12, 3, 1, "", "WARN"]], "arkouda.MultiIndex": [[62, 5, 1, "", "argsort"], [62, 5, 1, "", "concat"], [12, 6, 1, "", "index"], [12, 4, 1, "", "is_registered"], [62, 5, 1, "", "lookup"], [12, 3, 1, "", "objType"], [12, 4, 1, "", "register"], [62, 5, 1, "", "set_dtype"], [12, 4, 1, "", "to_dict"], [12, 4, 1, "", "to_hdf"], [12, 4, 1, "", "to_list"], [12, 4, 1, "", "to_ndarray"], [12, 4, 1, "", "to_pandas"], [12, 4, 1, "", "unregister"], [12, 4, 1, "", "update_hdf"]], "arkouda.SegArray": [[12, 4, 1, "", "AND"], [12, 4, 1, "", "OR"], [12, 4, 1, "", "XOR"], [12, 4, 1, "", "aggregate"], [12, 4, 1, "", "all"], [12, 4, 1, "", "any"], [73, 5, 1, "", "append"], [73, 5, 1, "", "append_single"], [12, 4, 1, "", "argmax"], [12, 4, 1, "", "argmin"], [12, 4, 1, "", "attach"], [12, 4, 1, "", "concat"], [12, 4, 1, "", "copy"], [12, 4, 1, "", "filter"], [12, 4, 1, "", "from_multi_array"], [12, 4, 1, "", "from_parts"], [12, 4, 1, "", "from_return_msg"], [73, 5, 1, "", "get_jth"], [73, 5, 1, "", "get_length_n"], [73, 5, 1, "", "get_ngrams"], [73, 5, 1, "", "get_prefixes"], [73, 5, 1, "", "get_suffixes"], [12, 6, 1, "", "grouping"], [12, 4, 1, "", "hash"], [73, 5, 1, "", "intersect"], [12, 4, 1, "", "is_registered"], [12, 4, 1, "", "load"], [12, 4, 1, "", "max"], [12, 4, 1, "", "mean"], [12, 4, 1, "", "min"], [12, 6, 1, "", "non_empty"], [12, 4, 1, "", "nunique"], [12, 3, 1, "", "objType"], [73, 5, 1, "", "prepend_single"], [12, 4, 1, "", "prod"], [12, 4, 1, "", "read_hdf"], [12, 4, 1, "", "register"], [73, 5, 1, "", "remove_repeats"], [12, 4, 1, "", "save"], [73, 5, 1, "", "set_jth"], [73, 5, 1, "", "setdiff"], [73, 5, 1, "", "setxor"], [12, 4, 1, "", "sum"], [12, 4, 1, "", "to_hdf"], [12, 4, 1, "", "to_list"], [73, 5, 1, "", "to_ndarray"], [12, 4, 1, "", "to_parquet"], [12, 4, 1, "", "transfer"], [73, 5, 1, "", "union"], [12, 4, 1, "", "unique"], [12, 4, 1, "", "unregister"], [12, 4, 1, "", "unregister_segarray_by_name"], [12, 4, 1, "", "update_hdf"]], "arkouda.Series": [[12, 4, 1, "", "add"], [12, 4, 1, "", "attach"], [12, 4, 1, "", "concat"], [12, 4, 1, "", "diff"], [12, 3, 1, "", "dt"], [12, 4, 1, "", "from_return_msg"], [74, 5, 1, "", "head"], [12, 4, 1, "", "is_registered"], [12, 4, 1, "", "isin"], [74, 5, 1, "id0", "locate"], [12, 3, 1, "", "objType"], [74, 5, 1, "", "pdconcat"], [12, 4, 1, "", "register"], [12, 6, 1, "", "shape"], [74, 5, 1, "", "sort_index"], [74, 5, 1, "", "sort_values"], [12, 3, 1, "", "str_acc"], [74, 5, 1, "", "tail"], [12, 4, 1, "", "to_dataframe"], [12, 4, 1, "", "to_list"], [74, 5, 1, "", "to_pandas"], [74, 5, 1, "", "topn"], [12, 4, 1, "", "unregister"], [74, 5, 1, "", "value_counts"]], "arkouda.Strings": [[12, 3, 1, "id982", "BinOps"], [12, 4, 1, "id1022", "astype"], [12, 4, 1, "id1033", "attach"], [12, 4, 1, "id998", "cached_regex_patterns"], [77, 4, 1, "", "contains"], [12, 4, 1, "id990", "decode"], [12, 3, 1, "id980", "dtype"], [12, 4, 1, "id989", "encode"], [77, 4, 1, "", "endswith"], [12, 3, 1, "id975", "entry"], [77, 4, 1, "", "find_locations"], [77, 4, 1, "", "findall"], [77, 4, 1, "", "flatten"], [12, 4, 1, "id985", "from_parts"], [12, 4, 1, "id984", "from_return_msg"], [77, 4, 1, "", "fullmatch"], [12, 4, 1, "id987", "get_bytes"], [12, 4, 1, "id986", "get_lengths"], [12, 4, 1, "id988", "get_offsets"], [12, 4, 1, "id1016", "get_prefixes"], [12, 4, 1, "id1017", "get_suffixes"], [12, 4, 1, "id1019", "group"], [12, 4, 1, "id1018", "hash"], [12, 4, 1, "id1028", "info"], [12, 4, 1, "id994", "is_lower"], [12, 4, 1, "id1032", "is_registered"], [12, 4, 1, "id996", "is_title"], [12, 4, 1, "id995", "is_upper"], [12, 3, 1, "id981", "logger"], [77, 4, 1, "", "lstick"], [77, 4, 1, "", "match"], [12, 3, 1, "id977", "nbytes"], [12, 3, 1, "id978", "ndim"], [12, 3, 1, "id983", "objType"], [77, 4, 1, "", "peel"], [12, 4, 1, "id1029", "pretty_print_info"], [12, 4, 1, "id999", "purge_cached_regex_patterns"], [12, 4, 1, "id1030", "register"], [77, 4, 1, "", "rpeel"], [12, 4, 1, "id1027", "save"], [77, 4, 1, "", "search"], [12, 3, 1, "id979", "shape"], [12, 3, 1, "id976", "size"], [77, 4, 1, "", "split"], [77, 4, 1, "", "startswith"], [77, 4, 1, "", "stick"], [12, 4, 1, "id997", "strip"], [77, 4, 1, "", "sub"], [77, 4, 1, "", "subn"], [12, 4, 1, "id1026", "to_csv"], [12, 4, 1, "id1024", "to_hdf"], [12, 4, 1, "id1021", "to_list"], [12, 4, 1, "id991", "to_lower"], [77, 5, 1, "", "to_ndarray"], [12, 4, 1, "id1023", "to_parquet"], [12, 4, 1, "id993", "to_title"], [12, 4, 1, "id992", "to_upper"], [12, 4, 1, "id1035", "transfer"], [12, 4, 1, "id1031", "unregister"], [12, 4, 1, "id1034", "unregister_strings_by_name"], [12, 4, 1, "id1025", "update_hdf"]], "arkouda.Timedelta": [[12, 4, 1, "id875", "abs"], [12, 6, 1, "id862", "components"], [12, 6, 1, "id861", "days"], [12, 4, 1, "id878", "is_registered"], [12, 6, 1, "id859", "microseconds"], [12, 6, 1, "id858", "nanoseconds"], [12, 4, 1, "id876", "register"], [12, 6, 1, "id860", "seconds"], [12, 3, 1, "id870", "special_objType"], [12, 4, 1, "id873", "std"], [12, 4, 1, "id874", "sum"], [12, 3, 1, "id867", "supported_opeq"], [12, 3, 1, "id863", "supported_with_datetime"], [12, 3, 1, "id868", "supported_with_pdarray"], [12, 3, 1, "id864", "supported_with_r_datetime"], [12, 3, 1, "id869", "supported_with_r_pdarray"], [12, 3, 1, "id866", "supported_with_r_timedelta"], [12, 3, 1, "id865", "supported_with_timedelta"], [12, 4, 1, "id872", "to_pandas"], [12, 4, 1, "id871", "total_seconds"], [12, 4, 1, "id877", "unregister"]], "arkouda.accessor": [[2, 2, 1, "", "CachedAccessor"], [2, 2, 1, "", "DatetimeAccessor"], [2, 2, 1, "", "Properties"], [2, 2, 1, "", "StringAccessor"], [2, 5, 1, "", "date_operators"], [2, 5, 1, "", "string_operators"]], "arkouda.alignment": [[3, 7, 1, "", "NonUniqueError"], [3, 5, 1, "", "align"], [3, 5, 1, "", "find"], [3, 5, 1, "", "in1d_intervals"], [3, 5, 1, "", "interval_lookup"], [3, 5, 1, "", "is_cosorted"], [3, 5, 1, "", "left_align"], [3, 5, 1, "", "lookup"], [3, 5, 1, "", "right_align"], [3, 5, 1, "", "search_intervals"], [3, 5, 1, "", "unsqueeze"], [3, 5, 1, "", "zero_up"]], "arkouda.array_view": [[4, 2, 1, "", "ArrayView"]], "arkouda.array_view.ArrayView": [[4, 3, 1, "", "base"], [4, 3, 1, "", "dtype"], [4, 3, 1, "", "itemsize"], [4, 3, 1, "", "ndim"], [4, 3, 1, "", "objType"], [4, 3, 1, "", "order"], [4, 3, 1, "", "shape"], [4, 3, 1, "", "size"], [4, 4, 1, "", "to_hdf"], [4, 4, 1, "", "to_list"], [4, 4, 1, "", "to_ndarray"], [4, 4, 1, "", "update_hdf"]], "arkouda.categorical": [[5, 2, 1, "", "Categorical"]], "arkouda.categorical.Categorical": [[5, 3, 1, "", "BinOps"], [5, 3, 1, "", "RegisterablePieces"], [5, 3, 1, "", "RequiredPieces"], [5, 4, 1, "", "argsort"], [5, 4, 1, "", "attach"], [5, 3, 1, "", "categories"], [5, 3, 1, "", "codes"], [5, 4, 1, "", "concatenate"], [5, 4, 1, "", "contains"], [5, 3, 1, "", "dtype"], [5, 4, 1, "", "endswith"], [5, 4, 1, "", "from_codes"], [5, 4, 1, "", "from_return_msg"], [5, 4, 1, "", "group"], [5, 4, 1, "", "hash"], [5, 4, 1, "", "in1d"], [5, 4, 1, "", "info"], [5, 4, 1, "", "is_registered"], [5, 4, 1, "", "isna"], [5, 3, 1, "", "ndim"], [5, 3, 1, "", "nlevels"], [5, 3, 1, "", "objType"], [5, 4, 1, "", "parse_hdf_categoricals"], [5, 3, 1, "id0", "permutation"], [5, 4, 1, "", "pretty_print_info"], [5, 4, 1, "", "register"], [5, 4, 1, "", "reset_categories"], [5, 4, 1, "", "save"], [5, 3, 1, "id1", "segments"], [5, 4, 1, "", "set_categories"], [5, 3, 1, "", "shape"], [5, 3, 1, "", "size"], [5, 4, 1, "", "sort"], [5, 4, 1, "", "standardize_categories"], [5, 4, 1, "", "startswith"], [5, 4, 1, "", "to_hdf"], [5, 4, 1, "", "to_list"], [5, 4, 1, "", "to_ndarray"], [5, 4, 1, "", "to_parquet"], [5, 4, 1, "", "transfer"], [5, 4, 1, "", "unique"], [5, 4, 1, "", "unregister"], [5, 4, 1, "", "unregister_categorical_by_name"], [5, 4, 1, "", "update_hdf"]], "arkouda.client": [[6, 5, 1, "", "connect"], [6, 5, 1, "", "disconnect"], [6, 5, 1, "", "generate_history"], [6, 5, 1, "", "get_config"], [6, 5, 1, "", "get_mem_avail"], [6, 5, 1, "", "get_mem_status"], [6, 5, 1, "", "get_mem_used"], [6, 5, 1, "", "get_server_commands"], [6, 5, 1, "", "print_server_commands"], [6, 5, 1, "", "ruok"], [6, 5, 1, "", "shutdown"]], "arkouda.client_dtypes": [[7, 2, 1, "", "BitVector"], [7, 5, 1, "", "BitVectorizer"], [7, 2, 1, "", "Fields"], [7, 2, 1, "", "IPv4"], [7, 5, 1, "", "ip_address"], [7, 5, 1, "", "is_ipv4"], [7, 5, 1, "", "is_ipv6"]], "arkouda.client_dtypes.BitVector": [[7, 3, 1, "", "conserves"], [7, 4, 1, "", "format"], [7, 4, 1, "", "from_return_msg"], [7, 4, 1, "", "opeq"], [7, 4, 1, "", "register"], [7, 3, 1, "", "special_objType"], [7, 4, 1, "", "to_list"], [7, 4, 1, "", "to_ndarray"]], "arkouda.client_dtypes.Fields": [[7, 4, 1, "", "format"], [7, 4, 1, "", "opeq"]], "arkouda.client_dtypes.IPv4": [[7, 4, 1, "", "export_uint"], [7, 4, 1, "", "format"], [7, 4, 1, "", "normalize"], [7, 4, 1, "", "opeq"], [7, 4, 1, "", "register"], [7, 3, 1, "", "special_objType"], [7, 4, 1, "", "to_hdf"], [7, 4, 1, "", "to_list"], [7, 4, 1, "", "to_ndarray"], [7, 4, 1, "", "update_hdf"]], "arkouda.dataframe": [[8, 2, 1, "", "DataFrame"], [8, 5, 1, "", "intersect"], [8, 5, 1, "", "intx"], [8, 5, 1, "", "invert_permutation"], [8, 5, 1, "", "merge"], [8, 5, 1, "", "sorted"]], "arkouda.dataframe.DataFrame": [[8, 3, 1, "", "COLUMN_CLASSES"], [8, 4, 1, "", "GroupBy"], [8, 4, 1, "", "append"], [8, 4, 1, "", "apply_permutation"], [8, 4, 1, "", "argsort"], [8, 4, 1, "", "attach"], [8, 4, 1, "", "coargsort"], [8, 6, 1, "", "columns"], [8, 4, 1, "", "concat"], [8, 4, 1, "", "copy"], [8, 4, 1, "", "corr"], [8, 4, 1, "", "drop"], [8, 4, 1, "", "drop_duplicates"], [8, 6, 1, "", "dtypes"], [8, 6, 1, "", "empty"], [8, 4, 1, "", "filter_by_range"], [8, 4, 1, "", "from_pandas"], [8, 4, 1, "", "from_return_msg"], [8, 4, 1, "", "groupby"], [8, 4, 1, "", "head"], [8, 6, 1, "", "index"], [8, 6, 1, "", "info"], [8, 4, 1, "", "is_registered"], [8, 4, 1, "", "isin"], [8, 4, 1, "", "load"], [8, 4, 1, "", "memory_usage"], [8, 4, 1, "", "merge"], [8, 3, 1, "", "objType"], [8, 4, 1, "", "read_csv"], [8, 4, 1, "", "register"], [8, 4, 1, "", "rename"], [8, 4, 1, "", "reset_index"], [8, 4, 1, "", "sample"], [8, 4, 1, "", "save"], [8, 6, 1, "", "shape"], [8, 6, 1, "", "size"], [8, 4, 1, "", "sort_values"], [8, 4, 1, "", "tail"], [8, 4, 1, "", "to_csv"], [8, 4, 1, "", "to_hdf"], [8, 4, 1, "", "to_pandas"], [8, 4, 1, "", "to_parquet"], [8, 4, 1, "", "transfer"], [8, 4, 1, "", "unregister"], [8, 4, 1, "", "unregister_dataframe_by_name"], [8, 4, 1, "", "update_hdf"], [8, 4, 1, "", "update_size"]], "arkouda.dtypes": [[9, 1, 1, "", "ARKOUDA_SUPPORTED_DTYPES"], [9, 1, 1, "", "DTypeObjects"], [9, 1, 1, "", "DTypes"], [9, 1, 1, "", "all_scalars"], [9, 1, 1, "", "bigint"], [9, 1, 1, "", "bitType"], [9, 1, 1, "", "bool"], [9, 1, 1, "", "bool_scalars"], [9, 5, 1, "", "check_np_dtype"], [9, 5, 1, "", "dtype"], [9, 1, 1, "", "float64"], [9, 1, 1, "", "float_scalars"], [9, 5, 1, "", "get_byteorder"], [9, 5, 1, "", "get_server_byteorder"], [9, 1, 1, "", "int64"], [9, 1, 1, "", "intTypes"], [9, 1, 1, "", "int_scalars"], [9, 5, 1, "", "isSupportedNumber"], [9, 1, 1, "", "numeric_scalars"], [9, 1, 1, "", "numpy_scalars"], [9, 5, 1, "", "resolve_scalar_dtype"], [9, 1, 1, "", "str_"], [9, 1, 1, "", "str_scalars"], [9, 5, 1, "", "translate_np_dtype"], [9, 1, 1, "", "uint64"], [9, 1, 1, "", "uint8"]], "arkouda.groupbyclass": [[10, 1, 1, "", "GROUPBY_REDUCTION_TYPES"], [10, 2, 1, "", "GroupBy"], [10, 5, 1, "", "broadcast"], [10, 5, 1, "", "unique"]], "arkouda.groupbyclass.GroupBy": [[10, 4, 1, "", "AND"], [10, 4, 1, "", "OR"], [10, 3, 1, "", "Reductions"], [10, 4, 1, "", "XOR"], [10, 4, 1, "", "aggregate"], [10, 4, 1, "", "all"], [10, 4, 1, "", "any"], [10, 4, 1, "", "argmax"], [10, 4, 1, "", "argmin"], [10, 4, 1, "", "attach"], [10, 4, 1, "", "broadcast"], [10, 4, 1, "", "build_from_components"], [10, 4, 1, "", "count"], [10, 4, 1, "", "first"], [10, 4, 1, "", "from_return_msg"], [10, 4, 1, "", "is_registered"], [10, 3, 1, "", "logger"], [10, 4, 1, "", "max"], [10, 4, 1, "", "mean"], [10, 4, 1, "", "median"], [10, 4, 1, "", "min"], [10, 4, 1, "", "mode"], [10, 4, 1, "", "most_common"], [10, 3, 1, "", "ngroups"], [10, 3, 1, "", "nkeys"], [10, 4, 1, "", "nunique"], [10, 3, 1, "", "objType"], [10, 3, 1, "", "permutation"], [10, 4, 1, "", "prod"], [10, 4, 1, "", "register"], [10, 3, 1, "", "segments"], [10, 4, 1, "id0", "size"], [10, 4, 1, "", "std"], [10, 4, 1, "", "sum"], [10, 4, 1, "", "to_hdf"], [10, 4, 1, "", "unique"], [10, 3, 1, "", "unique_keys"], [10, 4, 1, "", "unregister"], [10, 4, 1, "", "unregister_groupby_by_name"], [10, 4, 1, "", "update_hdf"], [10, 4, 1, "", "var"]], "arkouda.history": [[11, 2, 1, "", "HistoryRetriever"], [11, 2, 1, "", "NotebookHistoryRetriever"], [11, 2, 1, "", "ShellHistoryRetriever"]], "arkouda.history.HistoryRetriever": [[11, 4, 1, "", "retrieve"]], "arkouda.history.NotebookHistoryRetriever": [[11, 4, 1, "", "retrieve"]], "arkouda.history.ShellHistoryRetriever": [[11, 4, 1, "", "retrieve"]], "arkouda.index": [[13, 2, 1, "", "Index"], [13, 2, 1, "", "MultiIndex"]], "arkouda.index.Index": [[13, 4, 1, "", "argsort"], [13, 4, 1, "", "concat"], [13, 4, 1, "", "factory"], [13, 4, 1, "", "from_return_msg"], [13, 6, 1, "", "index"], [13, 4, 1, "", "is_registered"], [13, 6, 1, "", "is_unique"], [13, 4, 1, "", "lookup"], [13, 3, 1, "", "objType"], [13, 4, 1, "", "register"], [13, 4, 1, "", "save"], [13, 4, 1, "", "set_dtype"], [13, 6, 1, "", "shape"], [13, 4, 1, "", "to_csv"], [13, 4, 1, "", "to_dict"], [13, 4, 1, "", "to_hdf"], [13, 4, 1, "", "to_list"], [13, 4, 1, "", "to_ndarray"], [13, 4, 1, "", "to_pandas"], [13, 4, 1, "", "to_parquet"], [13, 4, 1, "", "unregister"], [13, 4, 1, "", "update_hdf"]], "arkouda.index.MultiIndex": [[13, 4, 1, "", "argsort"], [13, 4, 1, "", "concat"], [13, 6, 1, "", "index"], [13, 4, 1, "", "is_registered"], [13, 4, 1, "", "lookup"], [13, 3, 1, "", "objType"], [13, 4, 1, "", "register"], [13, 4, 1, "", "set_dtype"], [13, 4, 1, "", "to_dict"], [13, 4, 1, "", "to_hdf"], [13, 4, 1, "", "to_list"], [13, 4, 1, "", "to_ndarray"], [13, 4, 1, "", "to_pandas"], [13, 4, 1, "", "unregister"], [13, 4, 1, "", "update_hdf"]], "arkouda.infoclass": [[14, 1, 1, "", "AllSymbols"], [14, 1, 1, "", "RegisteredSymbols"], [14, 5, 1, "", "information"], [14, 5, 1, "", "list_registry"], [14, 5, 1, "", "list_symbol_table"], [14, 5, 1, "", "pretty_print_information"]], "arkouda.io": [[15, 5, 1, "", "export"], [15, 5, 1, "", "get_columns"], [15, 5, 1, "", "get_datasets"], [15, 5, 1, "", "get_filetype"], [15, 5, 1, "", "get_null_indices"], [15, 5, 1, "", "import_data"], [15, 5, 1, "", "load"], [15, 5, 1, "", "load_all"], [15, 5, 1, "", "ls"], [15, 5, 1, "", "ls_csv"], [15, 5, 1, "", "read"], [15, 5, 1, "", "read_csv"], [15, 5, 1, "", "read_hdf"], [15, 5, 1, "", "read_parquet"], [15, 5, 1, "", "read_tagged_data"], [15, 5, 1, "", "receive"], [15, 5, 1, "", "receive_dataframe"], [15, 5, 1, "", "restore"], [15, 5, 1, "", "save_all"], [15, 5, 1, "", "snapshot"], [15, 5, 1, "", "to_csv"], [15, 5, 1, "", "to_hdf"], [15, 5, 1, "", "to_parquet"], [15, 5, 1, "", "update_hdf"]], "arkouda.io_util": [[16, 5, 1, "", "delimited_file_to_dict"], [16, 5, 1, "", "dict_to_delimited_file"], [16, 5, 1, "", "get_directory"], [16, 5, 1, "", "write_line_to_file"]], "arkouda.join": [[17, 5, 1, "", "compute_join_size"], [17, 5, 1, "", "gen_ranges"], [17, 5, 1, "", "join_on_eq_with_dt"]], "arkouda.logger": [[18, 2, 1, "", "LogLevel"], [18, 5, 1, "", "disableVerbose"], [18, 5, 1, "", "enableVerbose"], [18, 5, 1, "", "write_log"]], "arkouda.logger.LogLevel": [[18, 3, 1, "", "CRITICAL"], [18, 3, 1, "", "DEBUG"], [18, 3, 1, "", "ERROR"], [18, 3, 1, "", "INFO"], [18, 3, 1, "", "WARN"]], "arkouda.match": [[19, 2, 1, "", "Match"]], "arkouda.match.Match": [[77, 4, 1, "", "end"], [77, 4, 1, "", "find_matches"], [77, 4, 1, "", "group"], [77, 4, 1, "", "match_type"], [77, 4, 1, "", "matched"], [77, 4, 1, "", "start"]], "arkouda.matcher": [[20, 2, 1, "", "Matcher"]], "arkouda.matcher.Matcher": [[20, 3, 1, "", "LocationsInfo"], [20, 4, 1, "", "find_locations"], [20, 4, 1, "", "findall"], [20, 4, 1, "", "get_match"], [20, 4, 1, "", "split"], [20, 4, 1, "", "sub"]], "arkouda.numeric": [[21, 2, 1, "", "ErrorMode"], [21, 5, 1, "", "abs"], [21, 5, 1, "", "arccos"], [21, 5, 1, "", "arccosh"], [21, 5, 1, "", "arcsin"], [21, 5, 1, "", "arcsinh"], [21, 5, 1, "", "arctan"], [21, 5, 1, "", "arctan2"], [21, 5, 1, "", "arctanh"], [21, 5, 1, "", "cast"], [21, 5, 1, "", "cos"], [21, 5, 1, "", "cosh"], [21, 5, 1, "", "cumprod"], [21, 5, 1, "", "cumsum"], [21, 5, 1, "", "deg2rad"], [21, 5, 1, "", "exp"], [21, 5, 1, "", "hash"], [21, 5, 1, "", "histogram"], [21, 5, 1, "", "histogram2d"], [21, 5, 1, "", "histogramdd"], [21, 5, 1, "", "isnan"], [21, 5, 1, "", "log"], [21, 5, 1, "", "rad2deg"], [21, 5, 1, "", "sin"], [21, 5, 1, "", "sinh"], [21, 5, 1, "", "tan"], [21, 5, 1, "", "tanh"], [21, 5, 1, "", "value_counts"], [21, 5, 1, "", "where"]], "arkouda.numeric.ErrorMode": [[21, 3, 1, "", "ignore"], [21, 3, 1, "", "return_validity"], [21, 3, 1, "", "strict"]], "arkouda.pdarray": [[12, 3, 1, "id651", "BinOps"], [12, 3, 1, "id652", "OpEqOps"], [70, 4, 1, "", "all"], [70, 4, 1, "", "any"], [70, 4, 1, "", "argmax"], [70, 4, 1, "", "argmaxk"], [70, 4, 1, "", "argmin"], [70, 4, 1, "", "argmink"], [12, 4, 1, "id686", "astype"], [12, 4, 1, "id702", "attach"], [12, 4, 1, "id688", "bigint_to_uint_arrays"], [12, 4, 1, "id681", "clz"], [12, 4, 1, "id674", "corr"], [12, 4, 1, "id673", "cov"], [12, 4, 1, "id682", "ctz"], [72, 3, 1, "", "dtype"], [12, 4, 1, "id657", "fill"], [12, 4, 1, "id654", "format_other"], [12, 4, 1, "id661", "info"], [12, 4, 1, "id660", "is_registered"], [70, 4, 1, "", "is_sorted"], [72, 3, 1, "", "itemsize"], [70, 4, 1, "", "max"], [12, 6, 1, "id650", "max_bits"], [70, 4, 1, "", "maxk"], [70, 4, 1, "", "mean"], [70, 4, 1, "", "min"], [70, 4, 1, "", "mink"], [72, 3, 1, "", "name"], [72, 3, 1, "", "ndim"], [12, 3, 1, "id653", "objType"], [12, 4, 1, "id656", "opeq"], [12, 4, 1, "id680", "parity"], [12, 4, 1, "id679", "popcount"], [12, 4, 1, "id662", "pretty_print_info"], [70, 4, 1, "", "prod"], [12, 4, 1, "id700", "register"], [12, 4, 1, "id689", "reshape"], [12, 4, 1, "id683", "rotl"], [12, 4, 1, "id684", "rotr"], [12, 4, 1, "id699", "save"], [72, 3, 1, "", "shape"], [72, 3, 1, "", "size"], [12, 4, 1, "id687", "slice_bits"], [70, 4, 1, "", "std"], [70, 4, 1, "", "sum"], [12, 4, 1, "id696", "to_csv"], [12, 4, 1, "id692", "to_cuda"], [12, 4, 1, "id694", "to_hdf"], [12, 4, 1, "id691", "to_list"], [72, 5, 1, "", "to_ndarray"], [12, 4, 1, "id693", "to_parquet"], [12, 4, 1, "id655", "transfer"], [12, 4, 1, "id701", "unregister"], [12, 4, 1, "id695", "update_hdf"], [12, 4, 1, "id685", "value_counts"], [70, 4, 1, "", "var"]], "arkouda.pdarrayclass": [[22, 7, 1, "", "RegistrationError"], [22, 5, 1, "", "all"], [22, 5, 1, "", "any"], [22, 5, 1, "", "argmax"], [22, 5, 1, "", "argmaxk"], [22, 5, 1, "", "argmin"], [22, 5, 1, "", "argmink"], [22, 5, 1, "", "attach_pdarray"], [22, 5, 1, "", "clear"], [22, 5, 1, "", "clz"], [22, 5, 1, "", "corr"], [22, 5, 1, "", "cov"], [22, 5, 1, "", "ctz"], [22, 5, 1, "", "divmod"], [22, 5, 1, "", "fmod"], [22, 5, 1, "", "is_sorted"], [22, 5, 1, "", "max"], [22, 5, 1, "", "maxk"], [22, 5, 1, "", "mean"], [22, 5, 1, "", "min"], [22, 5, 1, "", "mink"], [22, 5, 1, "", "mod"], [22, 5, 1, "", "parity"], [22, 2, 1, "", "pdarray"], [22, 5, 1, "", "popcount"], [22, 5, 1, "", "power"], [22, 5, 1, "", "prod"], [22, 5, 1, "", "rotl"], [22, 5, 1, "", "rotr"], [22, 5, 1, "", "sqrt"], [22, 5, 1, "", "std"], [22, 5, 1, "", "sum"], [22, 5, 1, "", "unregister_pdarray_by_name"], [22, 5, 1, "", "var"]], "arkouda.pdarrayclass.pdarray": [[22, 3, 1, "", "BinOps"], [22, 3, 1, "", "OpEqOps"], [22, 4, 1, "", "all"], [22, 4, 1, "", "any"], [22, 4, 1, "", "argmax"], [22, 4, 1, "", "argmaxk"], [22, 4, 1, "", "argmin"], [22, 4, 1, "", "argmink"], [22, 4, 1, "", "astype"], [22, 4, 1, "", "attach"], [22, 4, 1, "", "bigint_to_uint_arrays"], [22, 4, 1, "", "clz"], [22, 4, 1, "", "corr"], [22, 4, 1, "", "cov"], [22, 4, 1, "", "ctz"], [22, 3, 1, "", "dtype"], [22, 4, 1, "", "fill"], [22, 4, 1, "", "format_other"], [22, 4, 1, "", "info"], [22, 4, 1, "", "is_registered"], [22, 4, 1, "", "is_sorted"], [22, 3, 1, "", "itemsize"], [22, 4, 1, "", "max"], [22, 6, 1, "", "max_bits"], [22, 4, 1, "", "maxk"], [22, 4, 1, "", "mean"], [22, 4, 1, "", "min"], [22, 4, 1, "", "mink"], [22, 3, 1, "", "name"], [22, 3, 1, "", "ndim"], [22, 3, 1, "", "objType"], [22, 4, 1, "", "opeq"], [22, 4, 1, "", "parity"], [22, 4, 1, "", "popcount"], [22, 4, 1, "", "pretty_print_info"], [22, 4, 1, "", "prod"], [22, 4, 1, "", "register"], [22, 4, 1, "", "reshape"], [22, 4, 1, "", "rotl"], [22, 4, 1, "", "rotr"], [22, 4, 1, "", "save"], [22, 3, 1, "", "shape"], [22, 3, 1, "", "size"], [22, 4, 1, "", "slice_bits"], [22, 4, 1, "", "std"], [22, 4, 1, "", "sum"], [22, 4, 1, "", "to_csv"], [22, 4, 1, "", "to_cuda"], [22, 4, 1, "", "to_hdf"], [22, 4, 1, "", "to_list"], [22, 4, 1, "", "to_ndarray"], [22, 4, 1, "", "to_parquet"], [22, 4, 1, "", "transfer"], [22, 4, 1, "", "unregister"], [22, 4, 1, "", "update_hdf"], [22, 4, 1, "", "value_counts"], [22, 4, 1, "", "var"]], "arkouda.pdarraycreation": [[23, 5, 1, "", "arange"], [23, 5, 1, "", "array"], [23, 5, 1, "", "bigint_from_uint_arrays"], [23, 5, 1, "", "from_series"], [23, 5, 1, "", "full"], [23, 5, 1, "", "full_like"], [23, 5, 1, "", "linspace"], [23, 5, 1, "", "ones"], [23, 5, 1, "", "ones_like"], [23, 5, 1, "", "randint"], [23, 5, 1, "", "random_strings_lognormal"], [23, 5, 1, "", "random_strings_uniform"], [23, 5, 1, "", "standard_normal"], [23, 5, 1, "", "uniform"], [23, 5, 1, "", "zeros"], [23, 5, 1, "", "zeros_like"]], "arkouda.pdarraysetops": [[24, 5, 1, "", "concatenate"], [24, 5, 1, "", "in1d"], [24, 5, 1, "", "intersect1d"], [24, 5, 1, "", "setdiff1d"], [24, 5, 1, "", "setxor1d"], [24, 5, 1, "", "union1d"]], "arkouda.plotting": [[25, 5, 1, "", "hist_all"], [25, 5, 1, "", "plot_dist"]], "arkouda.row": [[26, 2, 1, "", "Row"]], "arkouda.security": [[27, 5, 1, "", "generate_token"], [27, 5, 1, "", "generate_username_token_json"], [27, 5, 1, "", "get_arkouda_client_directory"], [27, 5, 1, "", "get_home_directory"], [27, 5, 1, "", "get_username"], [27, 1, 1, "", "username_tokenizer"]], "arkouda.segarray": [[28, 1, 1, "", "LEN_SUFFIX"], [28, 1, 1, "", "SEG_SUFFIX"], [28, 2, 1, "", "SegArray"], [28, 1, 1, "", "VAL_SUFFIX"], [28, 5, 1, "", "segarray"]], "arkouda.segarray.SegArray": [[28, 4, 1, "", "AND"], [28, 4, 1, "", "OR"], [28, 4, 1, "", "XOR"], [28, 4, 1, "", "aggregate"], [28, 4, 1, "", "all"], [28, 4, 1, "", "any"], [28, 4, 1, "", "append"], [28, 4, 1, "", "append_single"], [28, 4, 1, "", "argmax"], [28, 4, 1, "", "argmin"], [28, 4, 1, "", "attach"], [28, 4, 1, "", "concat"], [28, 4, 1, "", "copy"], [28, 4, 1, "", "filter"], [28, 4, 1, "", "from_multi_array"], [28, 4, 1, "", "from_parts"], [28, 4, 1, "", "from_return_msg"], [28, 4, 1, "", "get_jth"], [28, 4, 1, "", "get_length_n"], [28, 4, 1, "", "get_ngrams"], [28, 4, 1, "", "get_prefixes"], [28, 4, 1, "", "get_suffixes"], [28, 6, 1, "", "grouping"], [28, 4, 1, "", "hash"], [28, 4, 1, "", "intersect"], [28, 4, 1, "", "is_registered"], [28, 4, 1, "", "load"], [28, 4, 1, "", "max"], [28, 4, 1, "", "mean"], [28, 4, 1, "", "min"], [28, 6, 1, "", "non_empty"], [28, 4, 1, "", "nunique"], [28, 3, 1, "", "objType"], [28, 4, 1, "", "prepend_single"], [28, 4, 1, "", "prod"], [28, 4, 1, "", "read_hdf"], [28, 4, 1, "", "register"], [28, 4, 1, "", "remove_repeats"], [28, 4, 1, "", "save"], [28, 4, 1, "", "set_jth"], [28, 4, 1, "", "setdiff"], [28, 4, 1, "", "setxor"], [28, 4, 1, "", "sum"], [28, 4, 1, "", "to_hdf"], [28, 4, 1, "", "to_list"], [28, 4, 1, "", "to_ndarray"], [28, 4, 1, "", "to_parquet"], [28, 4, 1, "", "transfer"], [28, 4, 1, "", "union"], [28, 4, 1, "", "unique"], [28, 4, 1, "", "unregister"], [28, 4, 1, "", "unregister_segarray_by_name"], [28, 4, 1, "", "update_hdf"]], "arkouda.series": [[29, 2, 1, "", "Series"]], "arkouda.series.Series": [[29, 4, 1, "", "add"], [29, 4, 1, "", "attach"], [29, 4, 1, "", "concat"], [29, 4, 1, "", "diff"], [29, 3, 1, "", "dt"], [29, 4, 1, "", "from_return_msg"], [29, 4, 1, "", "head"], [29, 4, 1, "", "is_registered"], [29, 4, 1, "", "isin"], [29, 4, 1, "", "locate"], [29, 3, 1, "", "objType"], [29, 4, 1, "", "pdconcat"], [29, 4, 1, "", "register"], [29, 6, 1, "", "shape"], [29, 4, 1, "", "sort_index"], [29, 4, 1, "", "sort_values"], [29, 3, 1, "", "str_acc"], [29, 4, 1, "", "tail"], [29, 4, 1, "", "to_dataframe"], [29, 4, 1, "", "to_list"], [29, 4, 1, "", "to_pandas"], [29, 4, 1, "", "topn"], [29, 4, 1, "", "unregister"], [29, 4, 1, "", "value_counts"]], "arkouda.sorting": [[30, 5, 1, "", "argsort"], [30, 5, 1, "", "coargsort"], [30, 5, 1, "", "sort"]], "arkouda.strings": [[31, 2, 1, "", "Strings"]], "arkouda.strings.Strings": [[31, 3, 1, "", "BinOps"], [31, 4, 1, "", "astype"], [31, 4, 1, "", "attach"], [31, 4, 1, "", "cached_regex_patterns"], [31, 4, 1, "", "contains"], [31, 4, 1, "", "decode"], [31, 3, 1, "", "dtype"], [31, 4, 1, "", "encode"], [31, 4, 1, "", "endswith"], [31, 3, 1, "", "entry"], [31, 4, 1, "", "find_locations"], [31, 4, 1, "", "findall"], [31, 4, 1, "", "flatten"], [31, 4, 1, "", "from_parts"], [31, 4, 1, "", "from_return_msg"], [31, 4, 1, "", "fullmatch"], [31, 4, 1, "", "get_bytes"], [31, 4, 1, "", "get_lengths"], [31, 4, 1, "", "get_offsets"], [31, 4, 1, "", "get_prefixes"], [31, 4, 1, "", "get_suffixes"], [31, 4, 1, "", "group"], [31, 4, 1, "", "hash"], [31, 4, 1, "", "info"], [31, 4, 1, "", "is_lower"], [31, 4, 1, "", "is_registered"], [31, 4, 1, "", "is_title"], [31, 4, 1, "", "is_upper"], [31, 3, 1, "", "logger"], [31, 4, 1, "", "lstick"], [31, 4, 1, "", "match"], [31, 3, 1, "", "nbytes"], [31, 3, 1, "", "ndim"], [31, 3, 1, "", "objType"], [31, 4, 1, "", "peel"], [31, 4, 1, "", "pretty_print_info"], [31, 4, 1, "", "purge_cached_regex_patterns"], [31, 4, 1, "", "register"], [31, 4, 1, "", "rpeel"], [31, 4, 1, "", "save"], [31, 4, 1, "", "search"], [31, 3, 1, "", "shape"], [31, 3, 1, "", "size"], [31, 4, 1, "", "split"], [31, 4, 1, "", "startswith"], [31, 4, 1, "", "stick"], [31, 4, 1, "", "strip"], [31, 4, 1, "", "sub"], [31, 4, 1, "", "subn"], [31, 4, 1, "", "to_csv"], [31, 4, 1, "", "to_hdf"], [31, 4, 1, "", "to_list"], [31, 4, 1, "", "to_lower"], [31, 4, 1, "", "to_ndarray"], [31, 4, 1, "", "to_parquet"], [31, 4, 1, "", "to_title"], [31, 4, 1, "", "to_upper"], [31, 4, 1, "", "transfer"], [31, 4, 1, "", "unregister"], [31, 4, 1, "", "unregister_strings_by_name"], [31, 4, 1, "", "update_hdf"]], "arkouda.timeclass": [[32, 2, 1, "", "Datetime"], [32, 2, 1, "", "Timedelta"], [32, 5, 1, "", "date_range"], [32, 5, 1, "", "timedelta_range"]], "arkouda.timeclass.Datetime": [[32, 6, 1, "", "date"], [32, 6, 1, "", "day"], [32, 6, 1, "", "day_of_week"], [32, 6, 1, "", "day_of_year"], [32, 6, 1, "", "dayofweek"], [32, 6, 1, "", "dayofyear"], [32, 6, 1, "", "hour"], [32, 6, 1, "", "is_leap_year"], [32, 4, 1, "", "is_registered"], [32, 4, 1, "", "isocalendar"], [32, 6, 1, "", "microsecond"], [32, 6, 1, "", "millisecond"], [32, 6, 1, "", "minute"], [32, 6, 1, "", "month"], [32, 6, 1, "", "nanosecond"], [32, 4, 1, "", "register"], [32, 6, 1, "", "second"], [32, 3, 1, "", "special_objType"], [32, 4, 1, "", "sum"], [32, 3, 1, "", "supported_opeq"], [32, 3, 1, "", "supported_with_datetime"], [32, 3, 1, "", "supported_with_pdarray"], [32, 3, 1, "", "supported_with_r_datetime"], [32, 3, 1, "", "supported_with_r_pdarray"], [32, 3, 1, "", "supported_with_r_timedelta"], [32, 3, 1, "", "supported_with_timedelta"], [32, 4, 1, "", "to_pandas"], [32, 4, 1, "", "unregister"], [32, 6, 1, "", "week"], [32, 6, 1, "", "weekday"], [32, 6, 1, "", "weekofyear"], [32, 6, 1, "", "year"]], "arkouda.timeclass.Timedelta": [[32, 4, 1, "", "abs"], [32, 6, 1, "", "components"], [32, 6, 1, "", "days"], [32, 4, 1, "", "is_registered"], [32, 6, 1, "", "microseconds"], [32, 6, 1, "", "nanoseconds"], [32, 4, 1, "", "register"], [32, 6, 1, "", "seconds"], [32, 3, 1, "", "special_objType"], [32, 4, 1, "", "std"], [32, 4, 1, "", "sum"], [32, 3, 1, "", "supported_opeq"], [32, 3, 1, "", "supported_with_datetime"], [32, 3, 1, "", "supported_with_pdarray"], [32, 3, 1, "", "supported_with_r_datetime"], [32, 3, 1, "", "supported_with_r_pdarray"], [32, 3, 1, "", "supported_with_r_timedelta"], [32, 3, 1, "", "supported_with_timedelta"], [32, 4, 1, "", "to_pandas"], [32, 4, 1, "", "total_seconds"], [32, 4, 1, "", "unregister"]], "arkouda.util": [[33, 5, 1, "", "attach"], [33, 5, 1, "", "attach_all"], [33, 5, 1, "", "concatenate"], [33, 5, 1, "", "convert_if_categorical"], [33, 5, 1, "", "enrich_inplace"], [33, 5, 1, "", "expand"], [33, 5, 1, "", "generic_concat"], [33, 5, 1, "", "get_callback"], [33, 5, 1, "", "identity"], [33, 5, 1, "", "invert_permutation"], [33, 5, 1, "", "is_registered"], [33, 5, 1, "", "most_common"], [33, 5, 1, "", "register"], [33, 5, 1, "", "register_all"], [33, 5, 1, "", "report_mem"], [33, 5, 1, "", "unregister"], [33, 5, 1, "", "unregister_all"]]}, "objtypes": {"0": "py:module", "1": "py:data", "2": "py:class", "3": "py:attribute", "4": "py:method", "5": "py:function", "6": "py:property", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "data", "Python data"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "method", "Python method"], "5": ["py", "function", "Python function"], "6": ["py", "property", "Python property"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"contribut": 0, "ad": [0, 1, 35, 55], "issu": 0, "bug": [0, 41], "report": 0, "featur": [0, 35, 62, 68, 74], "request": 0, "develop": [0, 37, 42, 56], "arkouda": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 40, 43, 44, 45, 47, 49, 50, 52, 53, 54, 55, 62, 65, 68, 73, 74, 76, 77], "code": 0, "convent": 0, "lint": 0, "python3": 0, "chapel": [0, 1, 37, 51, 53, 54], "test": [0, 1, 36, 59], "run": [0, 1, 36, 37, 55], "python": [0, 1, 35, 43, 50, 53, 54, 56, 76], "write": [0, 45, 47, 48], "pull": 0, "review": 0, "core": 0, "team": 0, "onli": 0, "merg": 0, "releas": [0, 39], "process": [0, 39, 55], "environ": [1, 37, 40, 52, 53, 54], "variabl": [1, 40, 52], "compil": [1, 40], "makefil": 1, "flag": 1, "depend": [1, 50, 52, 56], "path": 1, "modul": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 55], "from": [1, 54, 61], "outsid": 1, "src": 1, "directori": 1, "client": [1, 6, 35, 50, 61, 76], "accessor": 2, "content": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], "class": [2, 4, 5, 7, 8, 10, 11, 12, 13, 18, 19, 20, 21, 22, 26, 28, 29, 31, 32, 72], "function": [2, 3, 6, 7, 8, 9, 10, 12, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 27, 28, 30, 32, 33, 35, 48, 64], "align": 3, "array_view": 4, "categor": [5, 45, 47, 66], "client_dtyp": 7, "datafram": [8, 43, 44, 45, 47, 68], "dtype": [9, 62], "attribut": [9, 10, 12, 14, 27, 28, 45], "groupbyclass": 10, "histori": 11, "submodul": 12, "packag": [12, 52], "return": [12, 24, 75], "type": [12, 24, 44, 45, 47, 68, 72, 75], "input": [12, 29], "index": [13, 44, 45, 47, 62, 65, 68, 71], "infoclass": 14, "io": 15, "io_util": 16, "join": [17, 77], "logger": 18, "match": [19, 77], "matcher": 20, "numer": [21, 64], "pdarrayclass": 22, "pdarraycr": 23, "pdarraysetop": 24, "plot": 25, "row": 26, "secur": 27, "segarrai": [28, 45, 47, 73], "seri": [29, 74], "sort": [30, 63, 68, 74], "string": [31, 44, 45, 47, 77], "timeclass": 32, "util": 33, "api": [34, 44, 45, 46, 47, 48, 51], "refer": [34, 44, 45, 46, 47, 51], "your": 35, "first": 35, "interfac": 35, "exampl": [35, 43, 44], "server": [35, 50, 52, 55, 61, 76], "pytest": 36, "benchmark": 36, "The": [36, 72], "full": [36, 41], "suit": 36, "argument": [36, 59], "singl": 36, "file": [36, 44, 45, 48, 55, 61], "read": [36, 48, 61], "json": 36, "output": 36, "gasnet": 37, "configur": [37, 45, 52, 55], "build": [37, 38, 40, 41, 52, 54, 55], "reduc": [38, 59], "memori": 38, "usag": [38, 60], "step": [39, 53, 54], "instruct": 39, "gener": [39, 48], "note": 39, "diff": 39, "git": 39, "log": 39, "speed": 40, "up": 40, "alwai": 40, "set": [40, 43, 73, 75], "us": [40, 43, 50, 52, 55, 56], "modular": [40, 52, 55], "system": 40, "tip": 41, "reproduc": 41, "user": 41, "save": [41, 55], "effici": 41, "document": [42, 49, 52], "arrai": [43, 67, 73, 75], "pdarrai": [43, 44, 45, 47, 71, 72], "creation": [43, 65], "export": [43, 46, 48, 61], "object": [43, 77], "oper": [43, 64, 66, 72, 73, 75, 77], "creat": [43, 67], "import": [43, 46, 48, 61], "panda": [43, 74], "map": 43, "basic": 43, "interact": 43, "groupbi": [43, 45, 68, 69], "csv": 44, "support": [44, 45, 47, 48, 61], "data": [44, 45, 47, 61, 68, 70, 72], "format": [44, 48, 61], "without": 44, "header": 44, "hdf5": 45, "metadata": 45, "schema": 45, "arrayview": [45, 65], "mode": [45, 47], "distribut": [45, 52], "legaci": 45, "parquet": 47, "compress": 47, "i": [48, 61, 77], "o": [48, 61, 77], "l": 48, "quickstart": 50, "instal": [50, 52, 53, 54, 56, 58], "launch": [50, 76], "connect": [50, 76], "3": [50, 76], "shutdown": 50, "disconnect": 50, "get": 52, "start": 52, "recommend": [52, 54], "manual": 52, "all": 52, "individu": 52, "arrow": 52, "troubleshoot": 52, "linux": 53, "updat": [53, 54, 56], "kernel": 53, "clone": [53, 54], "repositori": [53, 54], "anaconda": [53, 54, 56], "ubuntu": 53, "rhel": 53, "next": [53, 54], "maco": 54, "sourc": 54, "homebrew": 54, "specifi": 55, "custom": 55, "new": 55, "an": 55, "requir": [56, 58], "list": 56, "specif": [56, 73, 77], "pip": 56, "window": 57, "wsl2": 57, "overview": 58, "guid": [58, 60], "perform": [59, 73, 77], "argsort": [59, 62], "posit": 59, "name": [59, 72], "gather": [59, 71], "scan": [59, 64], "scatter": [59, 71], "stream": 59, "between": 61, "larg": 61, "dataset": 61, "preprocess": 61, "disk": 61, "chang": 62, "lookup": [62, 74], "concat": 62, "arithmet": 64, "vector": 64, "scalar": 64, "element": [64, 73], "wise": 64, "reduct": 64, "where": 64, "iter": [65, 66, 68, 72, 73, 77], "construct": 66, "constant": 67, "regular": [67, 77], "random": 67, "concaten": [67, 68], "drop": 68, "copi": 68, "filter": 68, "permut": 68, "tail": [68, 74], "head": [68, 74], "renam": 68, "column": 68, "append": [68, 73], "reset": 68, "dedupl": [68, 73], "summar": 70, "descript": 70, "statist": 70, "histogram": 70, "valu": [70, 74], "count": [70, 74], "assign": 71, "integ": 71, "slice": 71, "logic": 71, "rank": 72, "cast": 72, "reshap": 72, "method": [73, 77], "prefix": 73, "suffix": 73, "ngram": 73, "sub": 73, "size": 73, "access": 73, "prepend": 73, "setop": 73, "union": 73, "intersect": 73, "differ": 73, "symmetr": 73, "integr": 74, "startup": 76, "substr": 77, "search": 77, "split": 77, "flatten": 77, "express": 77}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 60}, "alltitles": {"Contributing": [[0, "contributing"]], "Adding Issues": [[0, "adding-issues"]], "Bug Reports": [[0, "bug-reports"]], "Feature Requests": [[0, "feature-requests"]], "Developing Arkouda": [[0, "developing-arkouda"]], "Coding Conventions and Linting": [[0, "coding-conventions-and-linting"]], "Python3": [[0, "python3"]], "Chapel": [[0, "chapel"]], "Testing": [[0, "testing"], [1, "testing"]], "Running python tests": [[0, "running-python-tests"]], "Running chapel tests": [[0, "running-chapel-tests"]], "Writing Pull Requests": [[0, "writing-pull-requests"]], "Reviewing Pull Requests": [[0, "reviewing-pull-requests"]], "Core Development Team Only": [[0, "core-development-team-only"]], "Merging Pull Requests": [[0, "merging-pull-requests"]], "Release Process": [[0, "release-process"], [39, "release-process"]], "Environment Variables": [[1, "environment-variables"], [52, "environment-variables"]], "Running": [[1, "running"]], "Compilation / Makefile": [[1, "compilation-makefile"]], "Chapel Compiler Flags": [[1, "chapel-compiler-flags"]], "Dependency Paths": [[1, "dependency-paths"]], "Adding a Module from Outside the Arkouda src Directory": [[1, "adding-a-module-from-outside-the-arkouda-src-directory"]], "Python Client": [[1, "python-client"]], "arkouda.accessor": [[2, "module-arkouda.accessor"]], "Module Contents": [[2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"]], "Classes": [[2, "classes"], [4, "classes"], [5, "classes"], [7, "classes"], [8, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [26, "classes"], [28, "classes"], [29, "classes"], [31, "classes"], [32, "classes"]], "Functions": [[2, "functions"], [3, "functions"], [6, "functions"], [7, "functions"], [8, "functions"], [9, "functions"], [10, "functions"], [12, "functions"], [14, "functions"], [15, "functions"], [16, "functions"], [17, "functions"], [18, "functions"], [21, "functions"], [22, "functions"], [23, "functions"], [24, "functions"], [25, "functions"], [27, "functions"], [28, "functions"], [30, "functions"], [32, "functions"], [33, "functions"]], "arkouda.alignment": [[3, "module-arkouda.alignment"]], "arkouda.array_view": [[4, "module-arkouda.array_view"]], "arkouda.categorical": [[5, "module-arkouda.categorical"]], "arkouda.client": [[6, "module-arkouda.client"]], "arkouda.client_dtypes": [[7, "module-arkouda.client_dtypes"]], "arkouda.dataframe": [[8, "module-arkouda.dataframe"]], "arkouda.dtypes": [[9, "module-arkouda.dtypes"]], "Attributes": [[9, "attributes"], [10, "attributes"], [12, "attributes"], [14, "attributes"], [27, "attributes"], [28, "attributes"]], "arkouda.groupbyclass": [[10, "module-arkouda.groupbyclass"]], "arkouda.history": [[11, "module-arkouda.history"]], "arkouda": [[12, "module-arkouda"]], "Submodules": [[12, "submodules"]], "Package Contents": [[12, "package-contents"]], "Return Type": [[12, "return-type"], [12, "id543"], [12, "id709"], [24, "return-type"], [75, "return-type"]], "Input": [[12, "input"], [29, "input"]], "arkouda.index": [[13, "module-arkouda.index"]], "arkouda.infoclass": [[14, "module-arkouda.infoclass"]], "arkouda.io": [[15, "module-arkouda.io"]], "arkouda.io_util": [[16, "module-arkouda.io_util"]], "arkouda.join": [[17, "module-arkouda.join"]], "arkouda.logger": [[18, "module-arkouda.logger"]], "arkouda.match": [[19, "module-arkouda.match"]], "arkouda.matcher": [[20, "module-arkouda.matcher"]], "arkouda.numeric": [[21, "module-arkouda.numeric"]], "arkouda.pdarrayclass": [[22, "module-arkouda.pdarrayclass"]], "arkouda.pdarraycreation": [[23, "module-arkouda.pdarraycreation"]], "arkouda.pdarraysetops": [[24, "module-arkouda.pdarraysetops"]], "arkouda.plotting": [[25, "module-arkouda.plotting"]], "arkouda.row": [[26, "module-arkouda.row"]], "arkouda.security": [[27, "module-arkouda.security"]], "arkouda.segarray": [[28, "module-arkouda.segarray"]], "arkouda.series": [[29, "module-arkouda.series"]], "arkouda.sorting": [[30, "module-arkouda.sorting"]], "arkouda.strings": [[31, "module-arkouda.strings"]], "arkouda.timeclass": [[32, "module-arkouda.timeclass"]], "arkouda.util": [[33, "module-arkouda.util"]], "API Reference": [[34, "api-reference"], [44, "api-reference"], [45, "api-reference"], [46, "api-reference"], [47, "api-reference"]], "Adding Your First Feature": [[35, "adding-your-first-feature"]], "Adding Python Functionality (Client Interface)": [[35, "adding-python-functionality-client-interface"]], "Example": [[35, "example"], [35, "id1"]], "Adding Functionality to the Arkouda Server": [[35, "adding-functionality-to-the-arkouda-server"]], "PyTest Benchmarks": [[36, "pytest-benchmarks"]], "Running The Full Suite": [[36, "running-the-full-suite"]], "Benchmark Arguments": [[36, "benchmark-arguments"]], "Running Single Files or Tests": [[36, "running-single-files-or-tests"]], "Reading the JSON Output": [[36, "reading-the-json-output"]], "GASNet Development": [[37, "gasnet-development"]], "Environment Configuration": [[37, "environment-configuration"]], "Build Chapel with GASNet": [[37, "build-chapel-with-gasnet"]], "Build Arkouda": [[37, "build-arkouda"]], "Run Arkouda": [[37, "run-arkouda"]], "Reducing Memory Usage of Arkouda Builds": [[38, "reducing-memory-usage-of-arkouda-builds"]], "Step-by-step instructions": [[39, "step-by-step-instructions"]], "Generating release notes": [[39, "generating-release-notes"]], "Diff the git logs": [[39, "diff-the-git-logs"]], "Speeding up Arkouda Compilation": [[40, "speeding-up-arkouda-compilation"]], "Environment Variables to Always Set": [[40, "environment-variables-to-always-set"]], "Using the Modular Build System": [[40, "using-the-modular-build-system"]], "Tips for Reproducing User Bugs": [[41, "tips-for-reproducing-user-bugs"]], "Saving Full Builds": [[41, "saving-full-builds"]], "Reproducing User Bugs Efficiently": [[41, "reproducing-user-bugs-efficiently"]], "Developer Documentation": [[42, "developer-documentation"]], "Examples": [[43, "examples"]], "Arkouda Arrays": [[43, "arkouda-arrays"]], "pdarray Creation": [[43, "pdarray-creation"]], "Exporting pdarray Objects": [[43, "exporting-pdarray-objects"]], "pdarray Set operations": [[43, "pdarray-set-operations"]], "Arkouda DataFrames": [[43, "arkouda-dataframes"]], "Creating & Using a DataFrame": [[43, "creating-using-a-dataframe"]], "Importing Pandas DataFrame": [[43, "importing-pandas-dataframe"]], "Python Mapping": [[43, "python-mapping"]], "Basic Interaction": [[43, "basic-interaction"]], "Exporting to Pandas": [[43, "exporting-to-pandas"]], "GroupBy": [[43, "groupby"], [45, "groupby"], [45, "id5"], [68, "groupby"], [69, "groupby"]], "pdarrays": [[43, "pdarrays"]], "DataFrames": [[43, "dataframes"]], "CSV": [[44, "csv"]], "Support Arkouda Data Types": [[44, "support-arkouda-data-types"]], "File Formatting": [[44, "file-formatting"]], "Example Files": [[44, "example-files"]], "Arkouda Formatted File": [[44, "arkouda-formatted-file"]], "File Without Header": [[44, "file-without-header"]], "Data Formatting": [[44, "data-formatting"]], "pdarray": [[44, "pdarray"], [45, "pdarray"], [45, "id1"], [47, "pdarray"]], "Strings": [[44, "strings"], [45, "strings"], [45, "id2"], [47, "strings"]], "Index": [[44, "index"], [45, "index"], [47, "index"]], "DataFrame": [[44, "dataframe"], [45, "dataframe"], [47, "dataframe"]], "HDF5": [[45, "hdf5"]], "File Configuration": [[45, "file-configuration"]], "Supported Arkouda Data Types": [[45, "supported-arkouda-data-types"], [47, "supported-arkouda-data-types"]], "MetaData Attributes": [[45, "metadata-attributes"]], "Data Schema": [[45, "data-schema"]], "ArrayView": [[45, "arrayview"]], "SegArray": [[45, "segarray"], [45, "id4"], [47, "segarray"]], "Categorical": [[45, "categorical"], [45, "id3"], [47, "categorical"]], "Supported Write Modes": [[45, "supported-write-modes"], [47, "supported-write-modes"]], "Data Distribution": [[45, "data-distribution"]], "Legacy File Support": [[45, "legacy-file-support"]], "Import/Export": [[46, "import-export"], [61, "import-export"]], "Export": [[46, "export"]], "Import": [[46, "import"]], "Parquet": [[47, "parquet"]], "Compression": [[47, "compression"]], "File I/O": [[48, "file-i-o"]], "Supported File Formats:": [[48, null]], "Import/Export Support": [[48, "import-export-support"]], "General I/O API": [[48, "general-i-o-api"]], "Write": [[48, "write"]], "Read": [[48, "read"]], "ls Functionality": [[48, "ls-functionality"]], "Arkouda Documentation": [[49, "arkouda-documentation"]], "Quickstart": [[50, "quickstart"]], "Install Dependencies": [[50, "install-dependencies"]], "Install Arkouda": [[50, "install-arkouda"]], "Launching the Server": [[50, "launching-the-server"]], "Connect the Python 3 Client": [[50, "connect-the-python-3-client"]], "Shutdown/Disconnect": [[50, "shutdown-disconnect"]], "Using Arkouda": [[50, "using-arkouda"]], "Chapel API Reference": [[51, "chapel-api-reference"]], "Building the Server": [[52, "building-the-server"]], "Getting Started": [[52, "getting-started"]], "Dependency Configuration": [[52, "dependency-configuration"]], "Using Environment Installed Dependencies (Recommended)": [[52, "using-environment-installed-dependencies-recommended"]], "Installing Dependencies Manually": [[52, "installing-dependencies-manually"]], "Dependencies": [[52, "dependencies"]], "All Dependencies": [[52, "all-dependencies"]], "Individual Installs": [[52, "individual-installs"]], "Arrow Install Troubleshooting": [[52, "arrow-install-troubleshooting"]], "Distributable Package": [[52, "distributable-package"]], "Build the Server": [[52, "build-the-server"]], "Building the Arkouda Documentation": [[52, "building-the-arkouda-documentation"]], "Modular Building": [[52, "modular-building"]], "Linux": [[53, "linux"]], "Update Kernel": [[53, "update-kernel"]], "Clone Arkouda Repository": [[53, "clone-arkouda-repository"], [54, "clone-arkouda-repository"]], "Python Environment - Anaconda (Linux)": [[53, "python-environment-anaconda-linux"]], "Chapel Installation": [[53, "chapel-installation"]], "Install Chapel (Ubuntu)": [[53, "install-chapel-ubuntu"]], "Install Chapel (RHEL)": [[53, "install-chapel-rhel"]], "Next Steps": [[53, "next-steps"], [54, "next-steps"]], "MacOS": [[54, "macos"]], "Python Environment - Anaconda": [[54, "python-environment-anaconda"]], "Updating Environment": [[54, "updating-environment"]], "Anaconda": [[54, "anaconda"]], "Install Chapel": [[54, "install-chapel"]], "Build from Source (Recommended)": [[54, "build-from-source-recommended"]], "Homebrew": [[54, "homebrew"]], "Modular Server Builds": [[55, "modular-server-builds"]], "Specifying a custom configuration file": [[55, "specifying-a-custom-configuration-file"]], "Adding new modules into the build process": [[55, "adding-new-modules-into-the-build-process"]], "Saving modules used in an Arkouda server run": [[55, "saving-modules-used-in-an-arkouda-server-run"]], "Requirements": [[56, "requirements"], [58, "requirements"]], "Dependency List": [[56, "dependency-list"]], "Python Dependencies": [[56, "python-dependencies"]], "Developer Specific": [[56, "developer-specific"]], "Installing/Updating Python Dependencies": [[56, "installing-updating-python-dependencies"]], "Using Anaconda": [[56, "using-anaconda"]], "Using Pip": [[56, "using-pip"]], "Windows (WSL2)": [[57, "windows-wsl2"]], "Installation": [[58, "installation"]], "Overview": [[58, "overview"]], "Install Guides": [[58, "install-guides"]], "Performance Testing": [[59, "performance-testing"]], "Argsort": [[59, "argsort"]], "Positional Arguments": [[59, "positional-arguments"], [59, "positional-arguments"], [59, "positional-arguments"], [59, "positional-arguments"], [59, "positional-arguments"], [59, "positional-arguments"]], "Named Arguments": [[59, "named-arguments"], [59, "named-arguments"], [59, "named-arguments"], [59, "named-arguments"], [59, "named-arguments"], [59, "named-arguments"]], "Gather": [[59, "gather"]], "Reduce": [[59, "reduce"]], "Scan": [[59, "scan"]], "Scatter": [[59, "scatter"]], "Stream": [[59, "stream"]], "Usage Guide": [[60, "usage-guide"]], "Data I/O": [[61, "data-i-o"]], "Between client and server": [[61, "between-client-and-server"]], "Large Datasets": [[61, "large-datasets"]], "Supported File Formats": [[61, "supported-file-formats"]], "Data Preprocessing": [[61, "data-preprocessing"]], "Reading data from disk": [[61, "reading-data-from-disk"]], "Indexs in Arkouda": [[62, "indexs-in-arkouda"]], "Features": [[62, "features"], [68, "features"], [74, "features"]], "Change Dtype": [[62, "change-dtype"]], "ArgSort": [[62, "argsort"]], "Lookup": [[62, "lookup"], [74, "lookup"], [74, "id1"]], "Concat": [[62, "concat"]], "Sorting": [[63, "sorting"], [68, "sorting"], [74, "sorting"]], "Arithmetic and Numeric Operations": [[64, "arithmetic-and-numeric-operations"]], "Vector and Scalar Arithmetic": [[64, "vector-and-scalar-arithmetic"]], "Element-wise Functions": [[64, "element-wise-functions"]], "Scans": [[64, "scans"]], "Reductions": [[64, "reductions"]], "Where": [[64, "where"]], "ArrayView in Arkouda": [[65, "arrayview-in-arkouda"]], "Creation": [[65, "creation"]], "Indexing": [[65, "indexing"]], "Iteration": [[65, "iteration"], [66, "iteration"], [68, "iteration"], [72, "iteration"], [73, "iteration"], [77, "iteration"]], "Categoricals": [[66, "categoricals"]], "Construction": [[66, "construction"]], "Operations": [[66, "operations"], [77, "operations"]], "Creating Arrays": [[67, "creating-arrays"]], "Constant": [[67, "constant"]], "Regular": [[67, "regular"]], "Random": [[67, "random"]], "Concatenation": [[67, "concatenation"]], "DataFrames in Arkouda": [[68, "dataframes-in-arkouda"]], "Data Types": [[68, "data-types"]], "Drop": [[68, "drop"]], "Copy": [[68, "copy"]], "Filter": [[68, "filter"]], "Permutations": [[68, "permutations"]], "Tail/Head of Data": [[68, "tail-head-of-data"]], "Rename Columns": [[68, "rename-columns"]], "Append": [[68, "append"]], "Concatenate": [[68, "concatenate"]], "Reset Indexes": [[68, "reset-indexes"]], "Deduplication": [[68, "deduplication"], [73, "deduplication"]], "Summarizing Data": [[70, "summarizing-data"]], "Descriptive Statistics": [[70, "descriptive-statistics"]], "Histogram": [[70, "histogram"]], "Value Counts": [[70, "value-counts"], [74, "value-counts"]], "Indexing and Assignment": [[71, "indexing-and-assignment"]], "Integer": [[71, "integer"]], "Slice": [[71, "slice"]], "Gather/Scatter (pdarray)": [[71, "gather-scatter-pdarray"]], "Integer pdarray index": [[71, "integer-pdarray-index"]], "Logical indexing": [[71, "logical-indexing"]], "The pdarray class": [[72, "the-pdarray-class"]], "Data Type": [[72, "data-type"]], "Rank": [[72, "rank"]], "Name": [[72, "name"]], "Operators": [[72, "operators"]], "Type Casting": [[72, "type-casting"]], "Reshape": [[72, "reshape"]], "SegArrays in Arkouda": [[73, "segarrays-in-arkouda"]], "Performance": [[73, "performance"], [77, "performance"]], "Operation": [[73, "operation"]], "SegArray Specific Methods": [[73, "segarray-specific-methods"]], "Prefix & Suffix": [[73, "prefix-suffix"]], "NGrams": [[73, "ngrams"]], "Sub-array of Size": [[73, "sub-array-of-size"]], "Access/Set Specific Elements in Sub-Array": [[73, "access-set-specific-elements-in-sub-array"]], "Append & Prepend": [[73, "append-prepend"]], "SegArray SetOps": [[73, "segarray-setops"]], "Union": [[73, "union"]], "Intersect": [[73, "intersect"]], "Set Difference": [[73, "set-difference"]], "Symmetric Difference": [[73, "symmetric-difference"]], "Series in Arkouda": [[74, "series-in-arkouda"]], "Head/Tail": [[74, "head-tail"]], "Pandas Integration": [[74, "pandas-integration"]], "Array Set Operations": [[75, "array-set-operations"]], "Startup": [[76, "startup"]], "Launch arkouda server": [[76, "launch-arkouda-server"]], "Connect a Python 3 client": [[76, "connect-a-python-3-client"]], "Strings in Arkouda": [[77, "strings-in-arkouda"]], "I/O": [[77, "i-o"]], "String-Specific Methods": [[77, "string-specific-methods"]], "Substring search": [[77, "substring-search"]], "Splitting and joining": [[77, "splitting-and-joining"]], "Flattening": [[77, "flattening"]], "Regular Expressions": [[77, "regular-expressions"]], "Match Object": [[77, "match-object"]]}, "indexentries": {"cachedaccessor (class in arkouda.accessor)": [[2, "arkouda.accessor.CachedAccessor"]], "datetimeaccessor (class in arkouda.accessor)": [[2, "arkouda.accessor.DatetimeAccessor"]], "properties (class in arkouda.accessor)": [[2, "arkouda.accessor.Properties"]], "stringaccessor (class in arkouda.accessor)": [[2, "arkouda.accessor.StringAccessor"]], "arkouda.accessor": [[2, "module-arkouda.accessor"]], "date_operators() (in module arkouda.accessor)": [[2, "arkouda.accessor.date_operators"]], "module": [[2, "module-arkouda.accessor"], [3, "module-arkouda.alignment"], [4, "module-arkouda.array_view"], [5, "module-arkouda.categorical"], [6, "module-arkouda.client"], [7, "module-arkouda.client_dtypes"], [8, "module-arkouda.dataframe"], [9, "module-arkouda.dtypes"], [10, "module-arkouda.groupbyclass"], [11, "module-arkouda.history"], [12, "module-arkouda"], [13, "module-arkouda.index"], [14, "module-arkouda.infoclass"], [15, "module-arkouda.io"], [16, "module-arkouda.io_util"], [17, "module-arkouda.join"], [18, "module-arkouda.logger"], [19, "module-arkouda.match"], [20, "module-arkouda.matcher"], [21, "module-arkouda.numeric"], [22, "module-arkouda.pdarrayclass"], [23, "module-arkouda.pdarraycreation"], [24, "module-arkouda.pdarraysetops"], [25, "module-arkouda.plotting"], [26, "module-arkouda.row"], [27, "module-arkouda.security"], [28, "module-arkouda.segarray"], [29, "module-arkouda.series"], [30, "module-arkouda.sorting"], [31, "module-arkouda.strings"], [32, "module-arkouda.timeclass"], [33, "module-arkouda.util"]], "string_operators() (in module arkouda.accessor)": [[2, "arkouda.accessor.string_operators"]], "nonuniqueerror": [[3, "arkouda.alignment.NonUniqueError"], [12, "arkouda.NonUniqueError"]], "align() (in module arkouda.alignment)": [[3, "arkouda.alignment.align"]], "arkouda.alignment": [[3, "module-arkouda.alignment"]], "find() (in module arkouda.alignment)": [[3, "arkouda.alignment.find"]], "in1d_intervals() (in module arkouda.alignment)": [[3, "arkouda.alignment.in1d_intervals"]], "interval_lookup() (in module arkouda.alignment)": [[3, "arkouda.alignment.interval_lookup"]], "is_cosorted() (in module arkouda.alignment)": [[3, "arkouda.alignment.is_cosorted"]], "left_align() (in module arkouda.alignment)": [[3, "arkouda.alignment.left_align"]], "lookup() (in module arkouda.alignment)": [[3, "arkouda.alignment.lookup"]], "right_align() (in module arkouda.alignment)": [[3, "arkouda.alignment.right_align"]], "search_intervals() (in module arkouda.alignment)": [[3, "arkouda.alignment.search_intervals"]], "unsqueeze() (in module arkouda.alignment)": [[3, "arkouda.alignment.unsqueeze"]], "zero_up() (in module arkouda.alignment)": [[3, "arkouda.alignment.zero_up"]], "arrayview (class in arkouda.array_view)": [[4, "arkouda.array_view.ArrayView"]], "arkouda.array_view": [[4, "module-arkouda.array_view"]], "base (arkouda.array_view.arrayview attribute)": [[4, "arkouda.array_view.ArrayView.base"]], "dtype (arkouda.array_view.arrayview attribute)": [[4, "arkouda.array_view.ArrayView.dtype"]], "itemsize (arkouda.array_view.arrayview attribute)": [[4, "arkouda.array_view.ArrayView.itemsize"]], "ndim (arkouda.array_view.arrayview attribute)": [[4, "arkouda.array_view.ArrayView.ndim"]], "objtype (arkouda.array_view.arrayview attribute)": [[4, "arkouda.array_view.ArrayView.objType"]], "order (arkouda.array_view.arrayview attribute)": [[4, "arkouda.array_view.ArrayView.order"]], "shape (arkouda.array_view.arrayview attribute)": [[4, "arkouda.array_view.ArrayView.shape"]], "size (arkouda.array_view.arrayview attribute)": [[4, "arkouda.array_view.ArrayView.size"]], "to_hdf() (arkouda.array_view.arrayview method)": [[4, "arkouda.array_view.ArrayView.to_hdf"]], "to_list() (arkouda.array_view.arrayview method)": [[4, "arkouda.array_view.ArrayView.to_list"]], "to_ndarray() (arkouda.array_view.arrayview method)": [[4, "arkouda.array_view.ArrayView.to_ndarray"]], "update_hdf() (arkouda.array_view.arrayview method)": [[4, "arkouda.array_view.ArrayView.update_hdf"]], "binops (arkouda.categorical.categorical attribute)": [[5, "arkouda.categorical.Categorical.BinOps"]], "categorical (class in arkouda.categorical)": [[5, "arkouda.categorical.Categorical"]], "registerablepieces (arkouda.categorical.categorical attribute)": [[5, "arkouda.categorical.Categorical.RegisterablePieces"]], "requiredpieces (arkouda.categorical.categorical attribute)": [[5, "arkouda.categorical.Categorical.RequiredPieces"]], "argsort() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.argsort"]], "arkouda.categorical": [[5, "module-arkouda.categorical"]], "attach() (arkouda.categorical.categorical static method)": [[5, "arkouda.categorical.Categorical.attach"]], "categories (arkouda.categorical.categorical attribute)": [[5, "arkouda.categorical.Categorical.categories"]], "codes (arkouda.categorical.categorical attribute)": [[5, "arkouda.categorical.Categorical.codes"]], "concatenate() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.concatenate"]], "contains() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.contains"]], "dtype (arkouda.categorical.categorical attribute)": [[5, "arkouda.categorical.Categorical.dtype"]], "endswith() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.endswith"]], "from_codes() (arkouda.categorical.categorical class method)": [[5, "arkouda.categorical.Categorical.from_codes"]], "from_return_msg() (arkouda.categorical.categorical class method)": [[5, "arkouda.categorical.Categorical.from_return_msg"]], "group() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.group"]], "hash() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.hash"]], "in1d() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.in1d"]], "info() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.info"]], "is_registered() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.is_registered"]], "isna() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.isna"]], "ndim (arkouda.categorical.categorical attribute)": [[5, "arkouda.categorical.Categorical.ndim"]], "nlevels (arkouda.categorical.categorical attribute)": [[5, "arkouda.categorical.Categorical.nlevels"]], "objtype (arkouda.categorical.categorical attribute)": [[5, "arkouda.categorical.Categorical.objType"]], "parse_hdf_categoricals() (arkouda.categorical.categorical static method)": [[5, "arkouda.categorical.Categorical.parse_hdf_categoricals"]], "permutation (arkouda.categorical.categorical attribute)": [[5, "arkouda.categorical.Categorical.permutation"], [5, "id0"]], "pretty_print_info() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.pretty_print_info"]], "register() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.register"]], "reset_categories() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.reset_categories"]], "save() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.save"]], "segments (arkouda.categorical.categorical attribute)": [[5, "arkouda.categorical.Categorical.segments"], [5, "id1"]], "set_categories() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.set_categories"]], "shape (arkouda.categorical.categorical attribute)": [[5, "arkouda.categorical.Categorical.shape"]], "size (arkouda.categorical.categorical attribute)": [[5, "arkouda.categorical.Categorical.size"]], "sort() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.sort"]], "standardize_categories() (arkouda.categorical.categorical class method)": [[5, "arkouda.categorical.Categorical.standardize_categories"]], "startswith() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.startswith"]], "to_hdf() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.to_hdf"]], "to_list() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.to_list"]], "to_ndarray() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.to_ndarray"]], "to_parquet() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.to_parquet"]], "transfer() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.transfer"]], "unique() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.unique"]], "unregister() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.unregister"]], "unregister_categorical_by_name() (arkouda.categorical.categorical static method)": [[5, "arkouda.categorical.Categorical.unregister_categorical_by_name"]], "update_hdf() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.update_hdf"]], "arkouda.client": [[6, "module-arkouda.client"]], "connect() (in module arkouda.client)": [[6, "arkouda.client.connect"]], "disconnect() (in module arkouda.client)": [[6, "arkouda.client.disconnect"]], "generate_history() (in module arkouda.client)": [[6, "arkouda.client.generate_history"]], "get_config() (in module arkouda.client)": [[6, "arkouda.client.get_config"]], "get_mem_avail() (in module arkouda.client)": [[6, "arkouda.client.get_mem_avail"]], "get_mem_status() (in module arkouda.client)": [[6, "arkouda.client.get_mem_status"]], "get_mem_used() (in module arkouda.client)": [[6, "arkouda.client.get_mem_used"]], "get_server_commands() (in module arkouda.client)": [[6, "arkouda.client.get_server_commands"]], "print_server_commands() (in module arkouda.client)": [[6, "arkouda.client.print_server_commands"]], "ruok() (in module arkouda.client)": [[6, "arkouda.client.ruok"]], "shutdown() (in module arkouda.client)": [[6, "arkouda.client.shutdown"]], "bitvector (class in arkouda.client_dtypes)": [[7, "arkouda.client_dtypes.BitVector"]], "bitvectorizer() (in module arkouda.client_dtypes)": [[7, "arkouda.client_dtypes.BitVectorizer"]], "fields (class in arkouda.client_dtypes)": [[7, "arkouda.client_dtypes.Fields"]], "ipv4 (class in arkouda.client_dtypes)": [[7, "arkouda.client_dtypes.IPv4"]], "arkouda.client_dtypes": [[7, "module-arkouda.client_dtypes"]], "conserves (arkouda.client_dtypes.bitvector attribute)": [[7, "arkouda.client_dtypes.BitVector.conserves"]], "export_uint() (arkouda.client_dtypes.ipv4 method)": [[7, "arkouda.client_dtypes.IPv4.export_uint"]], "format() (arkouda.client_dtypes.bitvector method)": [[7, "arkouda.client_dtypes.BitVector.format"]], "format() (arkouda.client_dtypes.fields method)": [[7, "arkouda.client_dtypes.Fields.format"]], "format() (arkouda.client_dtypes.ipv4 method)": [[7, "arkouda.client_dtypes.IPv4.format"]], "from_return_msg() (arkouda.client_dtypes.bitvector class method)": [[7, "arkouda.client_dtypes.BitVector.from_return_msg"]], "ip_address() (in module arkouda.client_dtypes)": [[7, "arkouda.client_dtypes.ip_address"]], "is_ipv4() (in module arkouda.client_dtypes)": [[7, "arkouda.client_dtypes.is_ipv4"]], "is_ipv6() (in module arkouda.client_dtypes)": [[7, "arkouda.client_dtypes.is_ipv6"]], "normalize() (arkouda.client_dtypes.ipv4 method)": [[7, "arkouda.client_dtypes.IPv4.normalize"]], "opeq() (arkouda.client_dtypes.bitvector method)": [[7, "arkouda.client_dtypes.BitVector.opeq"]], "opeq() (arkouda.client_dtypes.fields method)": [[7, "arkouda.client_dtypes.Fields.opeq"]], "opeq() (arkouda.client_dtypes.ipv4 method)": [[7, "arkouda.client_dtypes.IPv4.opeq"]], "register() (arkouda.client_dtypes.bitvector method)": [[7, "arkouda.client_dtypes.BitVector.register"]], "register() (arkouda.client_dtypes.ipv4 method)": [[7, "arkouda.client_dtypes.IPv4.register"]], "special_objtype (arkouda.client_dtypes.bitvector attribute)": [[7, "arkouda.client_dtypes.BitVector.special_objType"]], "special_objtype (arkouda.client_dtypes.ipv4 attribute)": [[7, "arkouda.client_dtypes.IPv4.special_objType"]], "to_hdf() (arkouda.client_dtypes.ipv4 method)": [[7, "arkouda.client_dtypes.IPv4.to_hdf"]], "to_list() (arkouda.client_dtypes.bitvector method)": [[7, "arkouda.client_dtypes.BitVector.to_list"]], "to_list() (arkouda.client_dtypes.ipv4 method)": [[7, "arkouda.client_dtypes.IPv4.to_list"]], "to_ndarray() (arkouda.client_dtypes.bitvector method)": [[7, "arkouda.client_dtypes.BitVector.to_ndarray"]], "to_ndarray() (arkouda.client_dtypes.ipv4 method)": [[7, "arkouda.client_dtypes.IPv4.to_ndarray"]], "update_hdf() (arkouda.client_dtypes.ipv4 method)": [[7, "arkouda.client_dtypes.IPv4.update_hdf"]], "column_classes (arkouda.dataframe.dataframe attribute)": [[8, "arkouda.dataframe.DataFrame.COLUMN_CLASSES"]], "dataframe (class in arkouda.dataframe)": [[8, "arkouda.dataframe.DataFrame"]], "groupby() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.GroupBy"], [8, "arkouda.dataframe.DataFrame.groupby"]], "append() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.append"]], "apply_permutation() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.apply_permutation"]], "argsort() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.argsort"]], "arkouda.dataframe": [[8, "module-arkouda.dataframe"]], "attach() (arkouda.dataframe.dataframe static method)": [[8, "arkouda.dataframe.DataFrame.attach"]], "coargsort() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.coargsort"]], "columns (arkouda.dataframe.dataframe property)": [[8, "arkouda.dataframe.DataFrame.columns"]], "concat() (arkouda.dataframe.dataframe class method)": [[8, "arkouda.dataframe.DataFrame.concat"]], "copy() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.copy"]], "corr() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.corr"]], "drop() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.drop"]], "drop_duplicates() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.drop_duplicates"]], "dtypes (arkouda.dataframe.dataframe property)": [[8, "arkouda.dataframe.DataFrame.dtypes"]], "empty (arkouda.dataframe.dataframe property)": [[8, "arkouda.dataframe.DataFrame.empty"]], "filter_by_range() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.filter_by_range"]], "from_pandas() (arkouda.dataframe.dataframe class method)": [[8, "arkouda.dataframe.DataFrame.from_pandas"]], "from_return_msg() (arkouda.dataframe.dataframe class method)": [[8, "arkouda.dataframe.DataFrame.from_return_msg"]], "head() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.head"]], "index (arkouda.dataframe.dataframe property)": [[8, "arkouda.dataframe.DataFrame.index"]], "info (arkouda.dataframe.dataframe property)": [[8, "arkouda.dataframe.DataFrame.info"]], "intersect() (in module arkouda.dataframe)": [[8, "arkouda.dataframe.intersect"]], "intx() (in module arkouda.dataframe)": [[8, "arkouda.dataframe.intx"]], "invert_permutation() (in module arkouda.dataframe)": [[8, "arkouda.dataframe.invert_permutation"]], "is_registered() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.is_registered"]], "isin() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.isin"]], "load() (arkouda.dataframe.dataframe class method)": [[8, "arkouda.dataframe.DataFrame.load"]], "memory_usage() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.memory_usage"]], "merge() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.merge"]], "merge() (in module arkouda.dataframe)": [[8, "arkouda.dataframe.merge"]], "objtype (arkouda.dataframe.dataframe attribute)": [[8, "arkouda.dataframe.DataFrame.objType"]], "read_csv() (arkouda.dataframe.dataframe class method)": [[8, "arkouda.dataframe.DataFrame.read_csv"]], "register() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.register"]], "rename() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.rename"]], "reset_index() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.reset_index"]], "sample() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.sample"]], "save() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.save"]], "shape (arkouda.dataframe.dataframe property)": [[8, "arkouda.dataframe.DataFrame.shape"]], "size (arkouda.dataframe.dataframe property)": [[8, "arkouda.dataframe.DataFrame.size"]], "sort_values() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.sort_values"]], "sorted() (in module arkouda.dataframe)": [[8, "arkouda.dataframe.sorted"]], "tail() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.tail"]], "to_csv() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.to_csv"]], "to_hdf() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.to_hdf"]], "to_pandas() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.to_pandas"]], "to_parquet() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.to_parquet"]], "transfer() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.transfer"]], "unregister() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.unregister"]], "unregister_dataframe_by_name() (arkouda.dataframe.dataframe static method)": [[8, "arkouda.dataframe.DataFrame.unregister_dataframe_by_name"]], "update_hdf() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.update_hdf"]], "update_size() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.update_size"]], "arkouda_supported_dtypes (in module arkouda.dtypes)": [[9, "arkouda.dtypes.ARKOUDA_SUPPORTED_DTYPES"]], "dtypeobjects (in module arkouda.dtypes)": [[9, "arkouda.dtypes.DTypeObjects"]], "dtypes (in module arkouda.dtypes)": [[9, "arkouda.dtypes.DTypes"]], "all_scalars (in module arkouda.dtypes)": [[9, "arkouda.dtypes.all_scalars"]], "arkouda.dtypes": [[9, "module-arkouda.dtypes"]], "bigint (in module arkouda.dtypes)": [[9, "arkouda.dtypes.bigint"]], "bittype (in module arkouda.dtypes)": [[9, "arkouda.dtypes.bitType"]], "bool (in module arkouda.dtypes)": [[9, "arkouda.dtypes.bool"]], "bool_scalars (in module arkouda.dtypes)": [[9, "arkouda.dtypes.bool_scalars"]], "check_np_dtype() (in module arkouda.dtypes)": [[9, "arkouda.dtypes.check_np_dtype"]], "dtype() (in module arkouda.dtypes)": [[9, "arkouda.dtypes.dtype"]], "float64 (in module arkouda.dtypes)": [[9, "arkouda.dtypes.float64"]], "float_scalars (in module arkouda.dtypes)": [[9, "arkouda.dtypes.float_scalars"]], "get_byteorder() (in module arkouda.dtypes)": [[9, "arkouda.dtypes.get_byteorder"]], "get_server_byteorder() (in module arkouda.dtypes)": [[9, "arkouda.dtypes.get_server_byteorder"]], "int64 (in module arkouda.dtypes)": [[9, "arkouda.dtypes.int64"]], "inttypes (in module arkouda.dtypes)": [[9, "arkouda.dtypes.intTypes"]], "int_scalars (in module arkouda.dtypes)": [[9, "arkouda.dtypes.int_scalars"]], "issupportednumber() (in module arkouda.dtypes)": [[9, "arkouda.dtypes.isSupportedNumber"]], "numeric_scalars (in module arkouda.dtypes)": [[9, "arkouda.dtypes.numeric_scalars"]], "numpy_scalars (in module arkouda.dtypes)": [[9, "arkouda.dtypes.numpy_scalars"]], "resolve_scalar_dtype() (in module arkouda.dtypes)": [[9, "arkouda.dtypes.resolve_scalar_dtype"]], "str_ (in module arkouda.dtypes)": [[9, "arkouda.dtypes.str_"]], "str_scalars (in module arkouda.dtypes)": [[9, "arkouda.dtypes.str_scalars"]], "translate_np_dtype() (in module arkouda.dtypes)": [[9, "arkouda.dtypes.translate_np_dtype"]], "uint64 (in module arkouda.dtypes)": [[9, "arkouda.dtypes.uint64"]], "uint8 (in module arkouda.dtypes)": [[9, "arkouda.dtypes.uint8"]], "and() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.AND"]], "groupby_reduction_types (in module arkouda.groupbyclass)": [[10, "arkouda.groupbyclass.GROUPBY_REDUCTION_TYPES"]], "groupby (class in arkouda.groupbyclass)": [[10, "arkouda.groupbyclass.GroupBy"]], "or() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.OR"]], "reductions (arkouda.groupbyclass.groupby attribute)": [[10, "arkouda.groupbyclass.GroupBy.Reductions"]], "xor() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.XOR"]], "aggregate() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.aggregate"]], "all() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.all"]], "any() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.any"]], "argmax() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.argmax"]], "argmin() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.argmin"]], "arkouda.groupbyclass": [[10, "module-arkouda.groupbyclass"]], "attach() (arkouda.groupbyclass.groupby static method)": [[10, "arkouda.groupbyclass.GroupBy.attach"]], "broadcast() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.broadcast"]], "broadcast() (in module arkouda.groupbyclass)": [[10, "arkouda.groupbyclass.broadcast"]], "build_from_components() (arkouda.groupbyclass.groupby static method)": [[10, "arkouda.groupbyclass.GroupBy.build_from_components"]], "count() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.count"]], "first() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.first"]], "from_return_msg() (arkouda.groupbyclass.groupby static method)": [[10, "arkouda.groupbyclass.GroupBy.from_return_msg"]], "is_registered() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.is_registered"]], "logger (arkouda.groupbyclass.groupby attribute)": [[10, "arkouda.groupbyclass.GroupBy.logger"]], "max() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.max"]], "mean() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.mean"]], "median() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.median"]], "min() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.min"]], "mode() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.mode"]], "most_common() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.most_common"]], "ngroups (arkouda.groupbyclass.groupby attribute)": [[10, "arkouda.groupbyclass.GroupBy.ngroups"]], "nkeys (arkouda.groupbyclass.groupby attribute)": [[10, "arkouda.groupbyclass.GroupBy.nkeys"]], "nunique() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.nunique"]], "objtype (arkouda.groupbyclass.groupby attribute)": [[10, "arkouda.groupbyclass.GroupBy.objType"]], "permutation (arkouda.groupbyclass.groupby attribute)": [[10, "arkouda.groupbyclass.GroupBy.permutation"]], "prod() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.prod"]], "register() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.register"]], "segments (arkouda.groupbyclass.groupby attribute)": [[10, "arkouda.groupbyclass.GroupBy.segments"]], "size (arkouda.groupbyclass.groupby attribute)": [[10, "arkouda.groupbyclass.GroupBy.size"]], "size() (arkouda.groupbyclass.groupby method)": [[10, "id0"]], "std() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.std"]], "sum() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.sum"]], "to_hdf() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.to_hdf"]], "unique() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.unique"]], "unique() (in module arkouda.groupbyclass)": [[10, "arkouda.groupbyclass.unique"]], "unique_keys (arkouda.groupbyclass.groupby attribute)": [[10, "arkouda.groupbyclass.GroupBy.unique_keys"]], "unregister() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.unregister"]], "unregister_groupby_by_name() (arkouda.groupbyclass.groupby static method)": [[10, "arkouda.groupbyclass.GroupBy.unregister_groupby_by_name"]], "update_hdf() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.update_hdf"]], "var() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.var"]], "historyretriever (class in arkouda.history)": [[11, "arkouda.history.HistoryRetriever"]], "notebookhistoryretriever (class in arkouda.history)": [[11, "arkouda.history.NotebookHistoryRetriever"]], "shellhistoryretriever (class in arkouda.history)": [[11, "arkouda.history.ShellHistoryRetriever"]], "arkouda.history": [[11, "module-arkouda.history"]], "retrieve() (arkouda.history.historyretriever method)": [[11, "arkouda.history.HistoryRetriever.retrieve"]], "retrieve() (arkouda.history.notebookhistoryretriever method)": [[11, "arkouda.history.NotebookHistoryRetriever.retrieve"]], "retrieve() (arkouda.history.shellhistoryretriever method)": [[11, "arkouda.history.ShellHistoryRetriever.retrieve"]], "and() (arkouda.groupby method)": [[12, "arkouda.GroupBy.AND"], [12, "id100"], [12, "id280"], [12, "id462"], [12, "id627"], [12, "id914"], [69, "arkouda.GroupBy.AND"]], "and() (arkouda.segarray method)": [[12, "arkouda.SegArray.AND"]], "arkouda_supported_dtypes (in module arkouda)": [[12, "arkouda.ARKOUDA_SUPPORTED_DTYPES"]], "allsymbols (in module arkouda)": [[12, "arkouda.AllSymbols"]], "arrayview (class in arkouda)": [[12, "arkouda.ArrayView"], [65, "arkouda.ArrayView"]], "binops (arkouda.categorical attribute)": [[12, "arkouda.Categorical.BinOps"], [12, "id555"], [12, "id936"]], "binops (arkouda.strings attribute)": [[12, "arkouda.Strings.BinOps"], [12, "id122"], [12, "id372"], [12, "id718"], [12, "id982"]], "binops (arkouda.pdarray attribute)": [[12, "arkouda.pdarray.BinOps"], [12, "id13"], [12, "id193"], [12, "id307"], [12, "id486"], [12, "id651"]], "bitvector (class in arkouda)": [[12, "arkouda.BitVector"]], "bitvectorizer() (in module arkouda)": [[12, "arkouda.BitVectorizer"]], "column_classes (arkouda.dataframe attribute)": [[12, "arkouda.DataFrame.COLUMN_CLASSES"], [12, "id780"]], "critical (arkouda.loglevel attribute)": [[12, "arkouda.LogLevel.CRITICAL"]], "cachedaccessor (class in arkouda)": [[12, "arkouda.CachedAccessor"]], "categorical (class in arkouda)": [[12, "arkouda.Categorical"], [12, "id546"], [12, "id927"], [66, "arkouda.Categorical"]], "debug (arkouda.loglevel attribute)": [[12, "arkouda.LogLevel.DEBUG"]], "dtypeobjects (in module arkouda)": [[12, "arkouda.DTypeObjects"]], "dtypes (in module arkouda)": [[12, "arkouda.DTypes"]], "dataframe (class in arkouda)": [[12, "arkouda.DataFrame"], [12, "id772"], [68, "arkouda.DataFrame"]], "datetime (class in arkouda)": [[12, "arkouda.Datetime"], [12, "id1036"], [12, "id824"]], "datetimeaccessor (class in arkouda)": [[12, "arkouda.DatetimeAccessor"]], "error (arkouda.loglevel attribute)": [[12, "arkouda.LogLevel.ERROR"]], "errormode (class in arkouda)": [[12, "arkouda.ErrorMode"]], "fields (class in arkouda)": [[12, "arkouda.Fields"]], "groupby_reduction_types (in module arkouda)": [[12, "arkouda.GROUPBY_REDUCTION_TYPES"]], "groupby (class in arkouda)": [[12, "arkouda.GroupBy"], [12, "id250"], [12, "id432"], [12, "id597"], [12, "id70"], [12, "id884"], [69, "arkouda.GroupBy"]], "groupby() (arkouda.dataframe method)": [[12, "arkouda.DataFrame.GroupBy"], [12, "id794"], [12, "arkouda.DataFrame.groupby"], [12, "id814"]], "info (arkouda.loglevel attribute)": [[12, "arkouda.LogLevel.INFO"]], "ipv4 (class in arkouda)": [[12, "arkouda.IPv4"]], "index (class in arkouda)": [[12, "arkouda.Index"], [62, "arkouda.Index"]], "len_suffix (in module arkouda)": [[12, "arkouda.LEN_SUFFIX"]], "loglevel (class in arkouda)": [[12, "arkouda.LogLevel"]], "multiindex (class in arkouda)": [[12, "arkouda.MultiIndex"]], "or() (arkouda.groupby method)": [[12, "arkouda.GroupBy.OR"], [12, "id279"], [12, "id461"], [12, "id626"], [12, "id913"], [12, "id99"], [69, "arkouda.GroupBy.OR"]], "or() (arkouda.segarray method)": [[12, "arkouda.SegArray.OR"]], "opeqops (arkouda.pdarray attribute)": [[12, "arkouda.pdarray.OpEqOps"], [12, "id14"], [12, "id194"], [12, "id308"], [12, "id487"], [12, "id652"]], "properties (class in arkouda)": [[12, "arkouda.Properties"]], "reductions (arkouda.groupby attribute)": [[12, "arkouda.GroupBy.Reductions"], [12, "id258"], [12, "id440"], [12, "id605"], [12, "id78"], [12, "id892"]], "registerablepieces (arkouda.categorical attribute)": [[12, "arkouda.Categorical.RegisterablePieces"], [12, "id556"], [12, "id937"]], "registeredsymbols (in module arkouda)": [[12, "arkouda.RegisteredSymbols"]], "registrationerror": [[12, "arkouda.RegistrationError"], [12, "id183"], [12, "id296"], [12, "id477"], [12, "id65"], [22, "arkouda.pdarrayclass.RegistrationError"]], "requiredpieces (arkouda.categorical attribute)": [[12, "arkouda.Categorical.RequiredPieces"], [12, "id557"], [12, "id938"]], "row (class in arkouda)": [[12, "arkouda.Row"]], "seg_suffix (in module arkouda)": [[12, "arkouda.SEG_SUFFIX"]], "segarray (class in arkouda)": [[12, "arkouda.SegArray"]], "series (class in arkouda)": [[12, "arkouda.Series"], [74, "arkouda.Series"]], "stringaccessor (class in arkouda)": [[12, "arkouda.StringAccessor"]], "strings (class in arkouda)": [[12, "arkouda.Strings"], [12, "id114"], [12, "id364"], [12, "id710"], [12, "id974"]], "timedelta (class in arkouda)": [[12, "arkouda.Timedelta"], [12, "id857"]], "val_suffix (in module arkouda)": [[12, "arkouda.VAL_SUFFIX"]], "warn (arkouda.loglevel attribute)": [[12, "arkouda.LogLevel.WARN"]], "xor() (arkouda.groupby method)": [[12, "arkouda.GroupBy.XOR"], [12, "id101"], [12, "id281"], [12, "id463"], [12, "id628"], [12, "id915"], [69, "arkouda.GroupBy.XOR"]], "xor() (arkouda.segarray method)": [[12, "arkouda.SegArray.XOR"]], "abs() (arkouda.timedelta method)": [[12, "arkouda.Timedelta.abs"], [12, "id875"]], "abs() (in module arkouda)": [[12, "arkouda.abs"], [64, "arkouda.abs"]], "add() (arkouda.series method)": [[12, "arkouda.Series.add"]], "aggregate() (arkouda.groupby method)": [[12, "arkouda.GroupBy.aggregate"], [12, "id265"], [12, "id447"], [12, "id612"], [12, "id85"], [12, "id899"], [69, "arkouda.GroupBy.aggregate"]], "aggregate() (arkouda.segarray method)": [[12, "arkouda.SegArray.aggregate"]], "akabs() (in module arkouda)": [[12, "arkouda.akabs"]], "akbool (in module arkouda)": [[12, "arkouda.akbool"], [12, "id430"]], "akcast() (in module arkouda)": [[12, "arkouda.akcast"], [12, "id476"]], "akfloat64 (in module arkouda)": [[12, "arkouda.akfloat64"], [12, "id594"]], "akint64 (in module arkouda)": [[12, "arkouda.akint64"], [12, "id431"], [12, "id595"]], "akuint64 (in module arkouda)": [[12, "arkouda.akuint64"], [12, "id249"], [12, "id596"]], "align() (in module arkouda)": [[12, "arkouda.align"]], "all() (arkouda.groupby method)": [[12, "arkouda.GroupBy.all"], [12, "id278"], [12, "id460"], [12, "id625"], [12, "id912"], [12, "id98"], [69, "arkouda.GroupBy.all"]], "all() (arkouda.segarray method)": [[12, "arkouda.SegArray.all"]], "all() (arkouda.pdarray method)": [[12, "arkouda.pdarray.all"], [12, "id201"], [12, "id21"], [12, "id315"], [12, "id494"], [12, "id659"], [70, "arkouda.pdarray.all"]], "all() (in module arkouda)": [[12, "arkouda.all"], [64, "arkouda.all"]], "all_scalars (in module arkouda)": [[12, "arkouda.all_scalars"]], "any() (arkouda.groupby method)": [[12, "arkouda.GroupBy.any"], [12, "id277"], [12, "id459"], [12, "id624"], [12, "id911"], [12, "id97"], [69, "arkouda.GroupBy.any"]], "any() (arkouda.segarray method)": [[12, "arkouda.SegArray.any"]], "any() (arkouda.pdarray method)": [[12, "arkouda.pdarray.any"], [12, "id20"], [12, "id200"], [12, "id314"], [12, "id493"], [12, "id658"], [70, "arkouda.pdarray.any"]], "any() (in module arkouda)": [[12, "arkouda.any"], [64, "arkouda.any"]], "append() (arkouda.dataframe method)": [[12, "arkouda.DataFrame.append"], [12, "id789"]], "append() (arkouda.segarray method)": [[12, "arkouda.SegArray.append"]], "append_single() (arkouda.segarray method)": [[12, "arkouda.SegArray.append_single"]], "apply_permutation() (arkouda.dataframe method)": [[12, "arkouda.DataFrame.apply_permutation"], [12, "id811"]], "arange() (in module arkouda)": [[12, "arkouda.arange"], [12, "id359"], [12, "id538"], [12, "id68"], [12, "id703"], [12, "id881"], [67, "arkouda.arange"]], "arccos() (in module arkouda)": [[12, "arkouda.arccos"]], "arccosh() (in module arkouda)": [[12, "arkouda.arccosh"]], "arcsin() (in module arkouda)": [[12, "arkouda.arcsin"]], "arcsinh() (in module arkouda)": [[12, "arkouda.arcsinh"]], "arctan() (in module arkouda)": [[12, "arkouda.arctan"]], "arctan2() (in module arkouda)": [[12, "arkouda.arctan2"]], "arctanh() (in module arkouda)": [[12, "arkouda.arctanh"]], "argmax() (arkouda.groupby method)": [[12, "arkouda.GroupBy.argmax"], [12, "id275"], [12, "id457"], [12, "id622"], [12, "id909"], [12, "id95"], [69, "arkouda.GroupBy.argmax"]], "argmax() (arkouda.segarray method)": [[12, "arkouda.SegArray.argmax"]], "argmax() (arkouda.pdarray method)": [[12, "arkouda.pdarray.argmax"], [12, "id211"], [12, "id31"], [12, "id325"], [12, "id504"], [12, "id669"], [70, "arkouda.pdarray.argmax"]], "argmax() (in module arkouda)": [[12, "arkouda.argmax"], [64, "arkouda.argmax"]], "argmaxk() (arkouda.pdarray method)": [[12, "arkouda.pdarray.argmaxk"], [12, "id220"], [12, "id334"], [12, "id40"], [12, "id513"], [12, "id678"], [70, "arkouda.pdarray.argmaxk"]], "argmaxk() (in module arkouda)": [[12, "arkouda.argmaxk"], [64, "arkouda.argmaxk"]], "argmin() (arkouda.groupby method)": [[12, "arkouda.GroupBy.argmin"], [12, "id274"], [12, "id456"], [12, "id621"], [12, "id908"], [12, "id94"], [69, "arkouda.GroupBy.argmin"]], "argmin() (arkouda.segarray method)": [[12, "arkouda.SegArray.argmin"]], "argmin() (arkouda.pdarray method)": [[12, "arkouda.pdarray.argmin"], [12, "id210"], [12, "id30"], [12, "id324"], [12, "id503"], [12, "id668"], [70, "arkouda.pdarray.argmin"]], "argmin() (in module arkouda)": [[12, "arkouda.argmin"], [64, "arkouda.argmin"]], "argmink() (arkouda.pdarray method)": [[12, "arkouda.pdarray.argmink"], [12, "id219"], [12, "id333"], [12, "id39"], [12, "id512"], [12, "id677"], [70, "arkouda.pdarray.argmink"]], "argmink() (in module arkouda)": [[12, "arkouda.argmink"], [64, "arkouda.argmink"]], "argsort() (arkouda.categorical method)": [[12, "arkouda.Categorical.argsort"], [12, "id577"], [12, "id958"]], "argsort() (arkouda.dataframe method)": [[12, "arkouda.DataFrame.argsort"], [12, "id808"]], "argsort() (arkouda.index method)": [[12, "arkouda.Index.argsort"]], "argsort() (arkouda.multiindex method)": [[12, "arkouda.MultiIndex.argsort"]], "arkouda": [[12, "module-arkouda"]], "array() (in module arkouda)": [[12, "arkouda.array"], [12, "id360"], [12, "id539"], [12, "id66"], [61, "arkouda.array"]], "astype() (arkouda.strings method)": [[12, "arkouda.Strings.astype"], [12, "id1022"], [12, "id162"], [12, "id412"], [12, "id758"]], "astype() (arkouda.pdarray method)": [[12, "arkouda.pdarray.astype"], [12, "id228"], [12, "id342"], [12, "id48"], [12, "id521"], [12, "id686"]], "attach() (arkouda.categorical static method)": [[12, "arkouda.Categorical.attach"], [12, "id589"], [12, "id970"]], "attach() (arkouda.dataframe static method)": [[12, "arkouda.DataFrame.attach"], [12, "id821"]], "attach() (arkouda.groupby static method)": [[12, "arkouda.GroupBy.attach"], [12, "id110"], [12, "id290"], [12, "id472"], [12, "id637"], [12, "id924"], [69, "arkouda.GroupBy.attach"]], "attach() (arkouda.segarray class method)": [[12, "arkouda.SegArray.attach"]], "attach() (arkouda.series static method)": [[12, "arkouda.Series.attach"]], "attach() (arkouda.strings static method)": [[12, "arkouda.Strings.attach"], [12, "id1033"], [12, "id173"], [12, "id423"], [12, "id769"]], "attach() (arkouda.pdarray static method)": [[12, "arkouda.pdarray.attach"], [12, "id244"], [12, "id358"], [12, "id537"], [12, "id64"], [12, "id702"]], "attach() (in module arkouda)": [[12, "arkouda.attach"]], "attach_all() (in module arkouda)": [[12, "arkouda.attach_all"]], "attach_pdarray() (in module arkouda)": [[12, "arkouda.attach_pdarray"]], "base (arkouda.arrayview attribute)": [[12, "arkouda.ArrayView.base"], [65, "arkouda.ArrayView.base"]], "bigint (in module arkouda)": [[12, "arkouda.bigint"], [12, "id593"]], "bigint_from_uint_arrays() (in module arkouda)": [[12, "arkouda.bigint_from_uint_arrays"]], "bigint_to_uint_arrays() (arkouda.pdarray method)": [[12, "arkouda.pdarray.bigint_to_uint_arrays"], [12, "id230"], [12, "id344"], [12, "id50"], [12, "id523"], [12, "id688"]], "bittype (in module arkouda)": [[12, "arkouda.bitType"], [12, "id4"]], "bool (in module arkouda)": [[12, "arkouda.bool"]], "bool_scalars (in module arkouda)": [[12, "arkouda.bool_scalars"]], "broadcast() (arkouda.groupby method)": [[12, "arkouda.GroupBy.broadcast"], [12, "id105"], [12, "id285"], [12, "id467"], [12, "id632"], [12, "id919"], [69, "arkouda.GroupBy.broadcast"]], "broadcast() (in module arkouda)": [[12, "arkouda.broadcast"], [12, "id113"], [12, "id293"], [12, "id640"]], "build_from_components() (arkouda.groupby static method)": [[12, "arkouda.GroupBy.build_from_components"], [12, "id106"], [12, "id286"], [12, "id468"], [12, "id633"], [12, "id920"], [69, "arkouda.GroupBy.build_from_components"]], "cached_regex_patterns() (arkouda.strings method)": [[12, "arkouda.Strings.cached_regex_patterns"], [12, "id138"], [12, "id388"], [12, "id734"], [12, "id998"]], "cast() (in module arkouda)": [[12, "arkouda.cast"], [12, "id182"], [72, "arkouda.cast"]], "categories (arkouda.categorical attribute)": [[12, "arkouda.Categorical.categories"], [12, "id547"], [12, "id928"], [66, "arkouda.Categorical.categories"]], "check_np_dtype() (in module arkouda)": [[12, "arkouda.check_np_dtype"]], "clear() (in module arkouda)": [[12, "arkouda.clear"]], "clz() (arkouda.pdarray method)": [[12, "arkouda.pdarray.clz"], [12, "id223"], [12, "id337"], [12, "id43"], [12, "id516"], [12, "id681"]], "clz() (in module arkouda)": [[12, "arkouda.clz"]], "coargsort() (arkouda.dataframe method)": [[12, "arkouda.DataFrame.coargsort"], [12, "id809"]], "codes (arkouda.categorical attribute)": [[12, "arkouda.Categorical.codes"], [12, "id548"], [12, "id929"], [66, "arkouda.Categorical.codes"]], "columns (arkouda.dataframe property)": [[12, "arkouda.DataFrame.columns"], [12, "id777"]], "components (arkouda.timedelta property)": [[12, "arkouda.Timedelta.components"], [12, "id862"]], "compute_join_size() (in module arkouda)": [[12, "arkouda.compute_join_size"]], "concat() (arkouda.dataframe class method)": [[12, "arkouda.DataFrame.concat"], [12, "id790"]], "concat() (arkouda.index method)": [[12, "arkouda.Index.concat"]], "concat() (arkouda.multiindex method)": [[12, "arkouda.MultiIndex.concat"]], "concat() (arkouda.segarray class method)": [[12, "arkouda.SegArray.concat"]], "concat() (arkouda.series static method)": [[12, "arkouda.Series.concat"]], "concatenate() (arkouda.categorical method)": [[12, "arkouda.Categorical.concatenate"], [12, "id579"], [12, "id960"]], "concatenate() (in module arkouda)": [[12, "arkouda.concatenate"], [12, "id363"], [12, "id707"], [67, "arkouda.concatenate"]], "conserves (arkouda.bitvector attribute)": [[12, "arkouda.BitVector.conserves"]], "contains() (arkouda.categorical method)": [[12, "arkouda.Categorical.contains"], [12, "id570"], [12, "id951"], [66, "arkouda.Categorical.contains"]], "contains() (arkouda.strings method)": [[12, "arkouda.Strings.contains"], [12, "id1008"], [12, "id148"], [12, "id398"], [12, "id744"], [77, "arkouda.Strings.contains"]], "convert_if_categorical() (in module arkouda)": [[12, "arkouda.convert_if_categorical"]], "copy() (arkouda.dataframe method)": [[12, "arkouda.DataFrame.copy"], [12, "id813"]], "copy() (arkouda.segarray method)": [[12, "arkouda.SegArray.copy"]], "corr() (arkouda.dataframe method)": [[12, "arkouda.DataFrame.corr"], [12, "id816"]], "corr() (arkouda.pdarray method)": [[12, "arkouda.pdarray.corr"], [12, "id216"], [12, "id330"], [12, "id36"], [12, "id509"], [12, "id674"]], "corr() (in module arkouda)": [[12, "arkouda.corr"]], "cos() (in module arkouda)": [[12, "arkouda.cos"], [64, "arkouda.cos"]], "cosh() (in module arkouda)": [[12, "arkouda.cosh"]], "count() (arkouda.groupby method)": [[12, "arkouda.GroupBy.count"], [12, "id264"], [12, "id446"], [12, "id611"], [12, "id84"], [12, "id898"], [69, "arkouda.GroupBy.count"]], "cov() (arkouda.pdarray method)": [[12, "arkouda.pdarray.cov"], [12, "id215"], [12, "id329"], [12, "id35"], [12, "id508"], [12, "id673"]], "cov() (in module arkouda)": [[12, "arkouda.cov"]], "create_pdarray() (in module arkouda)": [[12, "arkouda.create_pdarray"], [12, "id184"], [12, "id297"], [12, "id540"]], "ctz() (arkouda.pdarray method)": [[12, "arkouda.pdarray.ctz"], [12, "id224"], [12, "id338"], [12, "id44"], [12, "id517"], [12, "id682"]], "ctz() (in module arkouda)": [[12, "arkouda.ctz"]], "cumprod() (in module arkouda)": [[12, "arkouda.cumprod"], [64, "arkouda.cumprod"]], "cumsum() (in module arkouda)": [[12, "arkouda.cumsum"], [12, "id295"], [64, "arkouda.cumsum"]], "date (arkouda.datetime property)": [[12, "arkouda.Datetime.date"], [12, "id1053"], [12, "id841"]], "date_operators() (in module arkouda)": [[12, "arkouda.date_operators"]], "date_range() (in module arkouda)": [[12, "arkouda.date_range"], [12, "id879"]], "day (arkouda.datetime property)": [[12, "arkouda.Datetime.day"], [12, "id1043"], [12, "id831"]], "day_of_week (arkouda.datetime property)": [[12, "arkouda.Datetime.day_of_week"], [12, "id1048"], [12, "id836"]], "day_of_year (arkouda.datetime property)": [[12, "arkouda.Datetime.day_of_year"], [12, "id1046"], [12, "id834"]], "dayofweek (arkouda.datetime property)": [[12, "arkouda.Datetime.dayofweek"], [12, "id1049"], [12, "id837"]], "dayofyear (arkouda.datetime property)": [[12, "arkouda.Datetime.dayofyear"], [12, "id1047"], [12, "id835"]], "days (arkouda.timedelta property)": [[12, "arkouda.Timedelta.days"], [12, "id861"]], "decode() (arkouda.strings method)": [[12, "arkouda.Strings.decode"], [12, "id130"], [12, "id380"], [12, "id726"], [12, "id990"]], "deg2rad() (in module arkouda)": [[12, "arkouda.deg2rad"]], "diff() (arkouda.series method)": [[12, "arkouda.Series.diff"]], "disableverbose() (in module arkouda)": [[12, "arkouda.disableVerbose"]], "divmod() (in module arkouda)": [[12, "arkouda.divmod"]], "drop() (arkouda.dataframe method)": [[12, "arkouda.DataFrame.drop"], [12, "id784"]], "drop_duplicates() (arkouda.dataframe method)": [[12, "arkouda.DataFrame.drop_duplicates"], [12, "id785"]], "dt (arkouda.series attribute)": [[12, "arkouda.Series.dt"]], "dtype (arkouda.arrayview attribute)": [[12, "arkouda.ArrayView.dtype"], [65, "arkouda.ArrayView.dtype"]], "dtype (arkouda.categorical attribute)": [[12, "arkouda.Categorical.dtype"], [12, "id561"], [12, "id942"]], "dtype (arkouda.strings attribute)": [[12, "arkouda.Strings.dtype"], [12, "id120"], [12, "id370"], [12, "id716"], [12, "id980"]], "dtype (arkouda.pdarray attribute)": [[12, "arkouda.pdarray.dtype"], [12, "id187"], [12, "id301"], [12, "id480"], [12, "id645"], [12, "id7"], [72, "arkouda.pdarray.dtype"]], "dtype() (in module arkouda)": [[12, "arkouda.dtype"]], "dtypes (arkouda.dataframe property)": [[12, "arkouda.DataFrame.dtypes"], [12, "id774"]], "empty (arkouda.dataframe property)": [[12, "arkouda.DataFrame.empty"], [12, "id775"]], "enableverbose() (in module arkouda)": [[12, "arkouda.enableVerbose"]], "encode() (arkouda.strings method)": [[12, "arkouda.Strings.encode"], [12, "id129"], [12, "id379"], [12, "id725"], [12, "id989"]], "endswith() (arkouda.categorical method)": [[12, "arkouda.Categorical.endswith"], [12, "id572"], [12, "id953"], [66, "arkouda.Categorical.endswith"]], "endswith() (arkouda.strings method)": [[12, "arkouda.Strings.endswith"], [12, "id1010"], [12, "id150"], [12, "id400"], [12, "id746"], [77, "arkouda.Strings.endswith"]], "entry (arkouda.strings attribute)": [[12, "arkouda.Strings.entry"], [12, "id115"], [12, "id365"], [12, "id711"], [12, "id975"]], "exp() (in module arkouda)": [[12, "arkouda.exp"], [64, "arkouda.exp"]], "export() (in module arkouda)": [[12, "arkouda.export"], [61, "arkouda.export"]], "export_uint() (arkouda.ipv4 method)": [[12, "arkouda.IPv4.export_uint"]], "factory() (arkouda.index static method)": [[12, "arkouda.Index.factory"]], "fill() (arkouda.pdarray method)": [[12, "arkouda.pdarray.fill"], [12, "id19"], [12, "id199"], [12, "id313"], [12, "id492"], [12, "id657"]], "filter() (arkouda.segarray method)": [[12, "arkouda.SegArray.filter"]], "filter_by_range() (arkouda.dataframe method)": [[12, "arkouda.DataFrame.filter_by_range"], [12, "id812"]], "find() (in module arkouda)": [[12, "arkouda.find"]], "find_locations() (arkouda.strings method)": [[12, "arkouda.Strings.find_locations"], [12, "id1000"], [12, "id140"], [12, "id390"], [12, "id736"], [77, "arkouda.Strings.find_locations"]], "findall() (arkouda.strings method)": [[12, "arkouda.Strings.findall"], [12, "id1005"], [12, "id145"], [12, "id395"], [12, "id741"], [77, "arkouda.Strings.findall"]], "first() (arkouda.groupby method)": [[12, "arkouda.GroupBy.first"], [12, "id102"], [12, "id282"], [12, "id464"], [12, "id629"], [12, "id916"], [69, "arkouda.GroupBy.first"]], "flatten() (arkouda.strings method)": [[12, "arkouda.Strings.flatten"], [12, "id1011"], [12, "id151"], [12, "id401"], [12, "id747"], [77, "arkouda.Strings.flatten"]], "float64 (in module arkouda)": [[12, "arkouda.float64"]], "float_scalars (in module arkouda)": [[12, "arkouda.float_scalars"]], "fmod() (in module arkouda)": [[12, "arkouda.fmod"]], "format() (arkouda.bitvector method)": [[12, "arkouda.BitVector.format"]], "format() (arkouda.fields method)": [[12, "arkouda.Fields.format"]], "format() (arkouda.ipv4 method)": [[12, "arkouda.IPv4.format"]], "format_other() (arkouda.pdarray method)": [[12, "arkouda.pdarray.format_other"], [12, "id16"], [12, "id196"], [12, "id310"], [12, "id489"], [12, "id654"]], "from_codes() (arkouda.categorical class method)": [[12, "arkouda.Categorical.from_codes"], [12, "id562"], [12, "id943"], [66, "arkouda.Categorical.from_codes"]], "from_multi_array() (arkouda.segarray class method)": [[12, "arkouda.SegArray.from_multi_array"]], "from_pandas() (arkouda.dataframe class method)": [[12, "arkouda.DataFrame.from_pandas"], [12, "id783"]], "from_parts() (arkouda.segarray class method)": [[12, "arkouda.SegArray.from_parts"]], "from_parts() (arkouda.strings static method)": [[12, "arkouda.Strings.from_parts"], [12, "id125"], [12, "id375"], [12, "id721"], [12, "id985"]], "from_return_msg() (arkouda.bitvector class method)": [[12, "arkouda.BitVector.from_return_msg"]], "from_return_msg() (arkouda.categorical class method)": [[12, "arkouda.Categorical.from_return_msg"], [12, "id563"], [12, "id944"]], "from_return_msg() (arkouda.dataframe class method)": [[12, "arkouda.DataFrame.from_return_msg"], [12, "id823"]], "from_return_msg() (arkouda.groupby static method)": [[12, "arkouda.GroupBy.from_return_msg"], [12, "id260"], [12, "id442"], [12, "id607"], [12, "id80"], [12, "id894"]], "from_return_msg() (arkouda.index class method)": [[12, "arkouda.Index.from_return_msg"]], "from_return_msg() (arkouda.segarray class method)": [[12, "arkouda.SegArray.from_return_msg"]], "from_return_msg() (arkouda.series class method)": [[12, "arkouda.Series.from_return_msg"]], "from_return_msg() (arkouda.strings static method)": [[12, "arkouda.Strings.from_return_msg"], [12, "id124"], [12, "id374"], [12, "id720"], [12, "id984"]], "from_series() (in module arkouda)": [[12, "arkouda.from_series"], [12, "id245"]], "full() (in module arkouda)": [[12, "arkouda.full"], [12, "id704"]], "full_like() (in module arkouda)": [[12, "arkouda.full_like"]], "fullmatch() (arkouda.strings method)": [[12, "arkouda.Strings.fullmatch"], [12, "id1003"], [12, "id143"], [12, "id393"], [12, "id739"], [77, "arkouda.Strings.fullmatch"]], "gen_ranges() (in module arkouda)": [[12, "arkouda.gen_ranges"], [12, "id294"]], "generic_concat() (in module arkouda)": [[12, "arkouda.generic_concat"]], "getarkoudalogger() (in module arkouda)": [[12, "arkouda.getArkoudaLogger"]], "get_byteorder() (in module arkouda)": [[12, "arkouda.get_byteorder"]], "get_bytes() (arkouda.strings method)": [[12, "arkouda.Strings.get_bytes"], [12, "id127"], [12, "id377"], [12, "id723"], [12, "id987"]], "get_callback() (in module arkouda)": [[12, "arkouda.get_callback"]], "get_columns() (in module arkouda)": [[12, "arkouda.get_columns"]], "get_datasets() (in module arkouda)": [[12, "arkouda.get_datasets"], [61, "arkouda.get_datasets"]], "get_filetype() (in module arkouda)": [[12, "arkouda.get_filetype"]], "get_jth() (arkouda.segarray method)": [[12, "arkouda.SegArray.get_jth"]], "get_length_n() (arkouda.segarray method)": [[12, "arkouda.SegArray.get_length_n"]], "get_lengths() (arkouda.strings method)": [[12, "arkouda.Strings.get_lengths"], [12, "id126"], [12, "id376"], [12, "id722"], [12, "id986"]], "get_ngrams() (arkouda.segarray method)": [[12, "arkouda.SegArray.get_ngrams"]], "get_null_indices() (in module arkouda)": [[12, "arkouda.get_null_indices"]], "get_offsets() (arkouda.strings method)": [[12, "arkouda.Strings.get_offsets"], [12, "id128"], [12, "id378"], [12, "id724"], [12, "id988"]], "get_prefixes() (arkouda.segarray method)": [[12, "arkouda.SegArray.get_prefixes"]], "get_prefixes() (arkouda.strings method)": [[12, "arkouda.Strings.get_prefixes"], [12, "id1016"], [12, "id156"], [12, "id406"], [12, "id752"]], "get_server_byteorder() (in module arkouda)": [[12, "arkouda.get_server_byteorder"]], "get_suffixes() (arkouda.segarray method)": [[12, "arkouda.SegArray.get_suffixes"]], "get_suffixes() (arkouda.strings method)": [[12, "arkouda.Strings.get_suffixes"], [12, "id1017"], [12, "id157"], [12, "id407"], [12, "id753"]], "group() (arkouda.categorical method)": [[12, "arkouda.Categorical.group"], [12, "id576"], [12, "id957"]], "group() (arkouda.strings method)": [[12, "arkouda.Strings.group"], [12, "id1019"], [12, "id159"], [12, "id409"], [12, "id755"]], "grouping (arkouda.segarray property)": [[12, "arkouda.SegArray.grouping"]], "hash() (arkouda.categorical method)": [[12, "arkouda.Categorical.hash"], [12, "id575"], [12, "id956"]], "hash() (arkouda.segarray method)": [[12, "arkouda.SegArray.hash"]], "hash() (arkouda.strings method)": [[12, "arkouda.Strings.hash"], [12, "id1018"], [12, "id158"], [12, "id408"], [12, "id754"]], "hash() (in module arkouda)": [[12, "arkouda.hash"]], "head() (arkouda.dataframe method)": [[12, "arkouda.DataFrame.head"], [12, "id791"]], "head() (arkouda.series method)": [[12, "arkouda.Series.head"]], "hist_all() (in module arkouda)": [[12, "arkouda.hist_all"]], "histogram() (in module arkouda)": [[12, "arkouda.histogram"], [12, "id882"], [70, "arkouda.histogram"]], "histogram2d() (in module arkouda)": [[12, "arkouda.histogram2d"]], "histogramdd() (in module arkouda)": [[12, "arkouda.histogramdd"]], "hour (arkouda.datetime property)": [[12, "arkouda.Datetime.hour"], [12, "id1042"], [12, "id830"]], "ignore (arkouda.errormode attribute)": [[12, "arkouda.ErrorMode.ignore"]], "import_data() (in module arkouda)": [[12, "arkouda.import_data"], [61, "arkouda.import_data"]], "in1d() (arkouda.categorical method)": [[12, "arkouda.Categorical.in1d"], [12, "id573"], [12, "id954"]], "in1d() (in module arkouda)": [[12, "arkouda.in1d"], [12, "id542"], [12, "id708"], [75, "arkouda.in1d"]], "in1d_intervals() (in module arkouda)": [[12, "arkouda.in1d_intervals"]], "index (arkouda.dataframe property)": [[12, "arkouda.DataFrame.index"], [12, "id778"]], "index (arkouda.index property)": [[12, "arkouda.Index.index"]], "index (arkouda.multiindex property)": [[12, "arkouda.MultiIndex.index"]], "info (arkouda.dataframe property)": [[12, "arkouda.DataFrame.info"], [12, "id779"]], "info() (arkouda.categorical method)": [[12, "arkouda.Categorical.info"], [12, "id587"], [12, "id968"]], "info() (arkouda.strings method)": [[12, "arkouda.Strings.info"], [12, "id1028"], [12, "id168"], [12, "id418"], [12, "id764"]], "info() (arkouda.pdarray method)": [[12, "arkouda.pdarray.info"], [12, "id203"], [12, "id23"], [12, "id317"], [12, "id496"], [12, "id661"]], "information() (in module arkouda)": [[12, "arkouda.information"]], "int64 (in module arkouda)": [[12, "arkouda.int64"], [12, "id178"]], "inttypes (in module arkouda)": [[12, "arkouda.intTypes"], [12, "id180"], [12, "id3"]], "int_scalars (in module arkouda)": [[12, "arkouda.int_scalars"], [12, "id179"], [12, "id246"]], "intersect() (arkouda.segarray method)": [[12, "arkouda.SegArray.intersect"]], "intersect() (in module arkouda)": [[12, "arkouda.intersect"]], "intersect1d() (in module arkouda)": [[12, "arkouda.intersect1d"], [75, "arkouda.intersect1d"]], "interval_lookup() (in module arkouda)": [[12, "arkouda.interval_lookup"]], "intx() (in module arkouda)": [[12, "arkouda.intx"]], "invert_permutation() (in module arkouda)": [[12, "arkouda.invert_permutation"]], "ip_address() (in module arkouda)": [[12, "arkouda.ip_address"]], "issupportedint() (in module arkouda)": [[12, "arkouda.isSupportedInt"], [12, "id181"], [12, "id247"]], "issupportednumber() (in module arkouda)": [[12, "arkouda.isSupportedNumber"]], "is_cosorted() (in module arkouda)": [[12, "arkouda.is_cosorted"]], "is_ipv4() (in module arkouda)": [[12, "arkouda.is_ipv4"]], "is_ipv6() (in module arkouda)": [[12, "arkouda.is_ipv6"]], "is_leap_year (arkouda.datetime property)": [[12, "arkouda.Datetime.is_leap_year"], [12, "id1054"], [12, "id842"]], "is_lower() (arkouda.strings method)": [[12, "arkouda.Strings.is_lower"], [12, "id134"], [12, "id384"], [12, "id730"], [12, "id994"]], "is_registered() (arkouda.categorical method)": [[12, "arkouda.Categorical.is_registered"], [12, "id586"], [12, "id967"]], "is_registered() (arkouda.dataframe method)": [[12, "arkouda.DataFrame.is_registered"], [12, "id820"]], "is_registered() (arkouda.datetime method)": [[12, "arkouda.Datetime.is_registered"], [12, "id1068"], [12, "id856"]], "is_registered() (arkouda.groupby method)": [[12, "arkouda.GroupBy.is_registered"], [12, "id109"], [12, "id289"], [12, "id471"], [12, "id636"], [12, "id923"], [69, "arkouda.GroupBy.is_registered"]], "is_registered() (arkouda.index method)": [[12, "arkouda.Index.is_registered"]], "is_registered() (arkouda.multiindex method)": [[12, "arkouda.MultiIndex.is_registered"]], "is_registered() (arkouda.segarray method)": [[12, "arkouda.SegArray.is_registered"]], "is_registered() (arkouda.series method)": [[12, "arkouda.Series.is_registered"]], "is_registered() (arkouda.strings method)": [[12, "arkouda.Strings.is_registered"], [12, "id1032"], [12, "id172"], [12, "id422"], [12, "id768"]], "is_registered() (arkouda.timedelta method)": [[12, "arkouda.Timedelta.is_registered"], [12, "id878"]], "is_registered() (arkouda.pdarray method)": [[12, "arkouda.pdarray.is_registered"], [12, "id202"], [12, "id22"], [12, "id316"], [12, "id495"], [12, "id660"]], "is_registered() (in module arkouda)": [[12, "arkouda.is_registered"]], "is_sorted() (arkouda.pdarray method)": [[12, "arkouda.pdarray.is_sorted"], [12, "id205"], [12, "id25"], [12, "id319"], [12, "id498"], [12, "id663"], [70, "arkouda.pdarray.is_sorted"]], "is_sorted() (in module arkouda)": [[12, "arkouda.is_sorted"], [12, "id298"], [64, "arkouda.is_sorted"]], "is_title() (arkouda.strings method)": [[12, "arkouda.Strings.is_title"], [12, "id136"], [12, "id386"], [12, "id732"], [12, "id996"]], "is_unique (arkouda.index property)": [[12, "arkouda.Index.is_unique"]], "is_upper() (arkouda.strings method)": [[12, "arkouda.Strings.is_upper"], [12, "id135"], [12, "id385"], [12, "id731"], [12, "id995"]], "isin() (arkouda.dataframe method)": [[12, "arkouda.DataFrame.isin"], [12, "id815"]], "isin() (arkouda.series method)": [[12, "arkouda.Series.isin"]], "isna() (arkouda.categorical method)": [[12, "arkouda.Categorical.isna"], [12, "id568"], [12, "id949"]], "isnan() (in module arkouda)": [[12, "arkouda.isnan"], [12, "id883"]], "isocalendar() (arkouda.datetime method)": [[12, "arkouda.Datetime.isocalendar"], [12, "id1063"], [12, "id851"]], "itemsize (arkouda.arrayview attribute)": [[12, "arkouda.ArrayView.itemsize"], [65, "arkouda.ArrayView.itemsize"]], "itemsize (arkouda.pdarray attribute)": [[12, "arkouda.pdarray.itemsize"], [12, "id11"], [12, "id191"], [12, "id305"], [12, "id484"], [12, "id649"], [72, "arkouda.pdarray.itemsize"]], "join_on_eq_with_dt() (in module arkouda)": [[12, "arkouda.join_on_eq_with_dt"]], "left_align() (in module arkouda)": [[12, "arkouda.left_align"]], "linspace() (in module arkouda)": [[12, "arkouda.linspace"], [67, "arkouda.linspace"]], "list_registry() (in module arkouda)": [[12, "arkouda.list_registry"]], "list_symbol_table() (in module arkouda)": [[12, "arkouda.list_symbol_table"]], "load() (arkouda.dataframe class method)": [[12, "arkouda.DataFrame.load"], [12, "id807"]], "load() (arkouda.segarray class method)": [[12, "arkouda.SegArray.load"]], "load() (in module arkouda)": [[12, "arkouda.load"]], "load_all() (in module arkouda)": [[12, "arkouda.load_all"]], "locate() (arkouda.series method)": [[12, "arkouda.Series.locate"]], "log() (in module arkouda)": [[12, "arkouda.log"], [64, "arkouda.log"]], "logger (arkouda.groupby attribute)": [[12, "arkouda.GroupBy.logger"], [12, "id257"], [12, "id439"], [12, "id604"], [12, "id77"], [12, "id891"], [69, "arkouda.GroupBy.logger"]], "logger (arkouda.strings attribute)": [[12, "arkouda.Strings.logger"], [12, "id121"], [12, "id371"], [12, "id717"], [12, "id981"]], "lookup() (arkouda.index method)": [[12, "arkouda.Index.lookup"]], "lookup() (arkouda.multiindex method)": [[12, "arkouda.MultiIndex.lookup"]], "lookup() (in module arkouda)": [[12, "arkouda.lookup"]], "ls() (in module arkouda)": [[12, "arkouda.ls"]], "ls_csv() (in module arkouda)": [[12, "arkouda.ls_csv"]], "lstick() (arkouda.strings method)": [[12, "arkouda.Strings.lstick"], [12, "id1015"], [12, "id155"], [12, "id405"], [12, "id751"], [77, "arkouda.Strings.lstick"]], "match() (arkouda.strings method)": [[12, "arkouda.Strings.match"], [12, "id1002"], [12, "id142"], [12, "id392"], [12, "id738"], [77, "arkouda.Strings.match"]], "max() (arkouda.groupby method)": [[12, "arkouda.GroupBy.max"], [12, "id273"], [12, "id455"], [12, "id620"], [12, "id907"], [12, "id93"], [69, "arkouda.GroupBy.max"]], "max() (arkouda.segarray method)": [[12, "arkouda.SegArray.max"]], "max() (arkouda.pdarray method)": [[12, "arkouda.pdarray.max"], [12, "id209"], [12, "id29"], [12, "id323"], [12, "id502"], [12, "id667"], [70, "arkouda.pdarray.max"]], "max() (in module arkouda)": [[12, "arkouda.max"], [64, "arkouda.max"]], "max_bits (arkouda.pdarray property)": [[12, "arkouda.pdarray.max_bits"], [12, "id12"], [12, "id192"], [12, "id306"], [12, "id485"], [12, "id650"]], "maxk() (arkouda.pdarray method)": [[12, "arkouda.pdarray.maxk"], [12, "id218"], [12, "id332"], [12, "id38"], [12, "id511"], [12, "id676"], [70, "arkouda.pdarray.maxk"]], "maxk() (in module arkouda)": [[12, "arkouda.maxk"], [64, "arkouda.maxk"]], "mean() (arkouda.groupby method)": [[12, "arkouda.GroupBy.mean"], [12, "id270"], [12, "id452"], [12, "id617"], [12, "id90"], [12, "id904"], [69, "arkouda.GroupBy.mean"]], "mean() (arkouda.segarray method)": [[12, "arkouda.SegArray.mean"]], "mean() (arkouda.pdarray method)": [[12, "arkouda.pdarray.mean"], [12, "id212"], [12, "id32"], [12, "id326"], [12, "id505"], [12, "id670"], [70, "arkouda.pdarray.mean"]], "mean() (in module arkouda)": [[12, "arkouda.mean"], [64, "arkouda.mean"]], "median() (arkouda.groupby method)": [[12, "arkouda.GroupBy.median"], [12, "id271"], [12, "id453"], [12, "id618"], [12, "id905"], [12, "id91"], [69, "arkouda.GroupBy.median"]], "memory_usage() (arkouda.dataframe method)": [[12, "arkouda.DataFrame.memory_usage"], [12, "id795"]], "merge() (arkouda.dataframe method)": [[12, "arkouda.DataFrame.merge"], [12, "id817"]], "merge() (in module arkouda)": [[12, "arkouda.merge"]], "microsecond (arkouda.datetime property)": [[12, "arkouda.Datetime.microsecond"], [12, "id1038"], [12, "id826"]], "microseconds (arkouda.timedelta property)": [[12, "arkouda.Timedelta.microseconds"], [12, "id859"]], "millisecond (arkouda.datetime property)": [[12, "arkouda.Datetime.millisecond"], [12, "id1039"], [12, "id827"]], "min() (arkouda.groupby method)": [[12, "arkouda.GroupBy.min"], [12, "id272"], [12, "id454"], [12, "id619"], [12, "id906"], [12, "id92"], [69, "arkouda.GroupBy.min"]], "min() (arkouda.segarray method)": [[12, "arkouda.SegArray.min"]], "min() (arkouda.pdarray method)": [[12, "arkouda.pdarray.min"], [12, "id208"], [12, "id28"], [12, "id322"], [12, "id501"], [12, "id666"], [70, "arkouda.pdarray.min"]], "min() (in module arkouda)": [[12, "arkouda.min"], [64, "arkouda.min"]], "mink() (arkouda.pdarray method)": [[12, "arkouda.pdarray.mink"], [12, "id217"], [12, "id331"], [12, "id37"], [12, "id510"], [12, "id675"], [70, "arkouda.pdarray.mink"]], "mink() (in module arkouda)": [[12, "arkouda.mink"], [64, "arkouda.mink"]], "minute (arkouda.datetime property)": [[12, "arkouda.Datetime.minute"], [12, "id1041"], [12, "id829"]], "mod() (in module arkouda)": [[12, "arkouda.mod"]], "mode() (arkouda.groupby method)": [[12, "arkouda.GroupBy.mode"], [12, "id103"], [12, "id283"], [12, "id465"], [12, "id630"], [12, "id917"], [69, "arkouda.GroupBy.mode"]], "month (arkouda.datetime property)": [[12, "arkouda.Datetime.month"], [12, "id1044"], [12, "id832"]], "most_common() (arkouda.groupby method)": [[12, "arkouda.GroupBy.most_common"], [12, "id112"], [12, "id292"], [12, "id474"], [12, "id639"], [12, "id926"], [69, "arkouda.GroupBy.most_common"]], "name (arkouda.pdarray attribute)": [[12, "arkouda.pdarray.name"], [12, "id186"], [12, "id300"], [12, "id479"], [12, "id6"], [12, "id644"], [72, "arkouda.pdarray.name"]], "nanosecond (arkouda.datetime property)": [[12, "arkouda.Datetime.nanosecond"], [12, "id1037"], [12, "id825"]], "nanoseconds (arkouda.timedelta property)": [[12, "arkouda.Timedelta.nanoseconds"], [12, "id858"]], "nbytes (arkouda.strings attribute)": [[12, "arkouda.Strings.nbytes"], [12, "id117"], [12, "id367"], [12, "id713"], [12, "id977"]], "ndim (arkouda.arrayview attribute)": [[12, "arkouda.ArrayView.ndim"], [65, "arkouda.ArrayView.ndim"]], "ndim (arkouda.categorical attribute)": [[12, "arkouda.Categorical.ndim"], [12, "id553"], [12, "id934"], [66, "arkouda.Categorical.ndim"]], "ndim (arkouda.strings attribute)": [[12, "arkouda.Strings.ndim"], [12, "id118"], [12, "id368"], [12, "id714"], [12, "id978"]], "ndim (arkouda.pdarray attribute)": [[12, "arkouda.pdarray.ndim"], [12, "id189"], [12, "id303"], [12, "id482"], [12, "id647"], [12, "id9"], [72, "arkouda.pdarray.ndim"]], "ngroups (arkouda.groupby attribute)": [[12, "arkouda.GroupBy.ngroups"], [12, "id255"], [12, "id437"], [12, "id602"], [12, "id75"], [12, "id889"], [69, "arkouda.GroupBy.ngroups"]], "nkeys (arkouda.groupby attribute)": [[12, "arkouda.GroupBy.nkeys"], [12, "id251"], [12, "id433"], [12, "id598"], [12, "id71"], [12, "id885"], [69, "arkouda.GroupBy.nkeys"]], "nlevels (arkouda.categorical attribute)": [[12, "arkouda.Categorical.nlevels"], [12, "id552"], [12, "id933"], [66, "arkouda.Categorical.nlevels"]], "non_empty (arkouda.segarray property)": [[12, "arkouda.SegArray.non_empty"]], "normalize() (arkouda.ipv4 method)": [[12, "arkouda.IPv4.normalize"]], "numeric_scalars (in module arkouda)": [[12, "arkouda.numeric_scalars"]], "numpy_scalars (in module arkouda)": [[12, "arkouda.numpy_scalars"]], "nunique() (arkouda.groupby method)": [[12, "arkouda.GroupBy.nunique"], [12, "id276"], [12, "id458"], [12, "id623"], [12, "id910"], [12, "id96"], [69, "arkouda.GroupBy.nunique"]], "nunique() (arkouda.segarray method)": [[12, "arkouda.SegArray.nunique"]], "objtype (arkouda.arrayview attribute)": [[12, "arkouda.ArrayView.objType"]], "objtype (arkouda.categorical attribute)": [[12, "arkouda.Categorical.objType"], [12, "id560"], [12, "id941"]], "objtype (arkouda.dataframe attribute)": [[12, "arkouda.DataFrame.objType"], [12, "id781"]], "objtype (arkouda.groupby attribute)": [[12, "arkouda.GroupBy.objType"], [12, "id259"], [12, "id441"], [12, "id606"], [12, "id79"], [12, "id893"]], "objtype (arkouda.index attribute)": [[12, "arkouda.Index.objType"]], "objtype (arkouda.multiindex attribute)": [[12, "arkouda.MultiIndex.objType"]], "objtype (arkouda.segarray attribute)": [[12, "arkouda.SegArray.objType"]], "objtype (arkouda.series attribute)": [[12, "arkouda.Series.objType"]], "objtype (arkouda.strings attribute)": [[12, "arkouda.Strings.objType"], [12, "id123"], [12, "id373"], [12, "id719"], [12, "id983"]], "objtype (arkouda.pdarray attribute)": [[12, "arkouda.pdarray.objType"], [12, "id15"], [12, "id195"], [12, "id309"], [12, "id488"], [12, "id653"]], "ones() (in module arkouda)": [[12, "arkouda.ones"], [12, "id361"], [12, "id541"], [12, "id705"], [67, "arkouda.ones"]], "ones_like() (in module arkouda)": [[12, "arkouda.ones_like"], [67, "arkouda.ones_like"]], "opeq() (arkouda.bitvector method)": [[12, "arkouda.BitVector.opeq"]], "opeq() (arkouda.fields method)": [[12, "arkouda.Fields.opeq"]], "opeq() (arkouda.ipv4 method)": [[12, "arkouda.IPv4.opeq"]], "opeq() (arkouda.pdarray method)": [[12, "arkouda.pdarray.opeq"], [12, "id18"], [12, "id198"], [12, "id312"], [12, "id491"], [12, "id656"]], "order (arkouda.arrayview attribute)": [[12, "arkouda.ArrayView.order"], [65, "arkouda.ArrayView.order"]], "parity() (arkouda.pdarray method)": [[12, "arkouda.pdarray.parity"], [12, "id222"], [12, "id336"], [12, "id42"], [12, "id515"], [12, "id680"]], "parity() (in module arkouda)": [[12, "arkouda.parity"]], "parse_hdf_categoricals() (arkouda.categorical static method)": [[12, "arkouda.Categorical.parse_hdf_categoricals"], [12, "id591"], [12, "id972"]], "pdarray (class in arkouda)": [[12, "arkouda.pdarray"], [12, "id185"], [12, "id299"], [12, "id478"], [12, "id5"], [12, "id643"], [72, "arkouda.pdarray"]], "pdconcat() (arkouda.series static method)": [[12, "arkouda.Series.pdconcat"]], "peel() (arkouda.strings method)": [[12, "arkouda.Strings.peel"], [12, "id1012"], [12, "id152"], [12, "id402"], [12, "id748"], [77, "arkouda.Strings.peel"]], "permutation (arkouda.categorical attribute)": [[12, "arkouda.Categorical.permutation"], [12, "id176"], [12, "id549"], [12, "id558"], [12, "id930"], [12, "id939"], [66, "arkouda.Categorical.permutation"]], "permutation (arkouda.groupby attribute)": [[12, "arkouda.GroupBy.permutation"], [12, "id253"], [12, "id435"], [12, "id600"], [12, "id73"], [12, "id887"], [69, "arkouda.GroupBy.permutation"]], "plot_dist() (in module arkouda)": [[12, "arkouda.plot_dist"]], "popcount() (arkouda.pdarray method)": [[12, "arkouda.pdarray.popcount"], [12, "id221"], [12, "id335"], [12, "id41"], [12, "id514"], [12, "id679"]], "popcount() (in module arkouda)": [[12, "arkouda.popcount"]], "power() (in module arkouda)": [[12, "arkouda.power"]], "prepend_single() (arkouda.segarray method)": [[12, "arkouda.SegArray.prepend_single"]], "pretty_print_info() (arkouda.categorical method)": [[12, "arkouda.Categorical.pretty_print_info"], [12, "id588"], [12, "id969"]], "pretty_print_info() (arkouda.strings method)": [[12, "arkouda.Strings.pretty_print_info"], [12, "id1029"], [12, "id169"], [12, "id419"], [12, "id765"]], "pretty_print_info() (arkouda.pdarray method)": [[12, "arkouda.pdarray.pretty_print_info"], [12, "id204"], [12, "id24"], [12, "id318"], [12, "id497"], [12, "id662"]], "pretty_print_information() (in module arkouda)": [[12, "arkouda.pretty_print_information"]], "prod() (arkouda.groupby method)": [[12, "arkouda.GroupBy.prod"], [12, "id267"], [12, "id449"], [12, "id614"], [12, "id87"], [12, "id901"], [69, "arkouda.GroupBy.prod"]], "prod() (arkouda.segarray method)": [[12, "arkouda.SegArray.prod"]], "prod() (arkouda.pdarray method)": [[12, "arkouda.pdarray.prod"], [12, "id207"], [12, "id27"], [12, "id321"], [12, "id500"], [12, "id665"], [70, "arkouda.pdarray.prod"]], "prod() (in module arkouda)": [[12, "arkouda.prod"], [64, "arkouda.prod"]], "purge_cached_regex_patterns() (arkouda.strings method)": [[12, "arkouda.Strings.purge_cached_regex_patterns"], [12, "id139"], [12, "id389"], [12, "id735"], [12, "id999"]], "rad2deg() (in module arkouda)": [[12, "arkouda.rad2deg"]], "randint() (in module arkouda)": [[12, "arkouda.randint"], [67, "arkouda.randint"]], "random_strings_lognormal() (in module arkouda)": [[12, "arkouda.random_strings_lognormal"]], "random_strings_uniform() (in module arkouda)": [[12, "arkouda.random_strings_uniform"]], "read() (in module arkouda)": [[12, "arkouda.read"], [61, "arkouda.read"]], "read_csv() (arkouda.dataframe class method)": [[12, "arkouda.DataFrame.read_csv"], [12, "id803"]], "read_csv() (in module arkouda)": [[12, "arkouda.read_csv"]], "read_hdf() (arkouda.segarray class method)": [[12, "arkouda.SegArray.read_hdf"]], "read_hdf() (in module arkouda)": [[12, "arkouda.read_hdf"]], "read_parquet() (in module arkouda)": [[12, "arkouda.read_parquet"]], "read_tagged_data() (in module arkouda)": [[12, "arkouda.read_tagged_data"]], "receive() (in module arkouda)": [[12, "arkouda.receive"]], "receive_dataframe() (in module arkouda)": [[12, "arkouda.receive_dataframe"]], "register() (arkouda.bitvector method)": [[12, "arkouda.BitVector.register"]], "register() (arkouda.categorical method)": [[12, "arkouda.Categorical.register"], [12, "id584"], [12, "id965"]], "register() (arkouda.dataframe method)": [[12, "arkouda.DataFrame.register"], [12, "id818"]], "register() (arkouda.datetime method)": [[12, "arkouda.Datetime.register"], [12, "id1066"], [12, "id854"]], "register() (arkouda.groupby method)": [[12, "arkouda.GroupBy.register"], [12, "id107"], [12, "id287"], [12, "id469"], [12, "id634"], [12, "id921"], [69, "arkouda.GroupBy.register"]], "register() (arkouda.ipv4 method)": [[12, "arkouda.IPv4.register"]], "register() (arkouda.index method)": [[12, "arkouda.Index.register"]], "register() (arkouda.multiindex method)": [[12, "arkouda.MultiIndex.register"]], "register() (arkouda.segarray method)": [[12, "arkouda.SegArray.register"]], "register() (arkouda.series method)": [[12, "arkouda.Series.register"]], "register() (arkouda.strings method)": [[12, "arkouda.Strings.register"], [12, "id1030"], [12, "id170"], [12, "id420"], [12, "id766"]], "register() (arkouda.timedelta method)": [[12, "arkouda.Timedelta.register"], [12, "id876"]], "register() (arkouda.pdarray method)": [[12, "arkouda.pdarray.register"], [12, "id242"], [12, "id356"], [12, "id535"], [12, "id62"], [12, "id700"]], "register_all() (in module arkouda)": [[12, "arkouda.register_all"]], "remove_repeats() (arkouda.segarray method)": [[12, "arkouda.SegArray.remove_repeats"]], "rename() (arkouda.dataframe method)": [[12, "arkouda.DataFrame.rename"], [12, "id788"]], "reset_categories() (arkouda.categorical method)": [[12, "arkouda.Categorical.reset_categories"], [12, "id569"], [12, "id950"]], "reset_index() (arkouda.dataframe method)": [[12, "arkouda.DataFrame.reset_index"], [12, "id786"]], "reshape() (arkouda.pdarray method)": [[12, "arkouda.pdarray.reshape"], [12, "id231"], [12, "id345"], [12, "id51"], [12, "id524"], [12, "id689"]], "resolve_scalar_dtype() (in module arkouda)": [[12, "arkouda.resolve_scalar_dtype"]], "restore() (in module arkouda)": [[12, "arkouda.restore"]], "return_validity (arkouda.errormode attribute)": [[12, "arkouda.ErrorMode.return_validity"]], "right_align() (in module arkouda)": [[12, "arkouda.right_align"]], "rotl() (arkouda.pdarray method)": [[12, "arkouda.pdarray.rotl"], [12, "id225"], [12, "id339"], [12, "id45"], [12, "id518"], [12, "id683"]], "rotl() (in module arkouda)": [[12, "arkouda.rotl"]], "rotr() (arkouda.pdarray method)": [[12, "arkouda.pdarray.rotr"], [12, "id226"], [12, "id340"], [12, "id46"], [12, "id519"], [12, "id684"]], "rotr() (in module arkouda)": [[12, "arkouda.rotr"]], "rpeel() (arkouda.strings method)": [[12, "arkouda.Strings.rpeel"], [12, "id1013"], [12, "id153"], [12, "id403"], [12, "id749"], [77, "arkouda.Strings.rpeel"]], "sample() (arkouda.dataframe method)": [[12, "arkouda.DataFrame.sample"], [12, "id793"]], "save() (arkouda.categorical method)": [[12, "arkouda.Categorical.save"], [12, "id583"], [12, "id964"]], "save() (arkouda.dataframe method)": [[12, "arkouda.DataFrame.save"], [12, "id806"]], "save() (arkouda.index method)": [[12, "arkouda.Index.save"]], "save() (arkouda.segarray method)": [[12, "arkouda.SegArray.save"]], "save() (arkouda.strings method)": [[12, "arkouda.Strings.save"], [12, "id1027"], [12, "id167"], [12, "id417"], [12, "id763"]], "save() (arkouda.pdarray method)": [[12, "arkouda.pdarray.save"], [12, "id241"], [12, "id355"], [12, "id534"], [12, "id61"], [12, "id699"]], "save_all() (in module arkouda)": [[12, "arkouda.save_all"]], "search() (arkouda.strings method)": [[12, "arkouda.Strings.search"], [12, "id1001"], [12, "id141"], [12, "id391"], [12, "id737"], [77, "arkouda.Strings.search"]], "search_intervals() (in module arkouda)": [[12, "arkouda.search_intervals"]], "second (arkouda.datetime property)": [[12, "arkouda.Datetime.second"], [12, "id1040"], [12, "id828"]], "seconds (arkouda.timedelta property)": [[12, "arkouda.Timedelta.seconds"], [12, "id860"]], "segarray() (in module arkouda)": [[12, "arkouda.segarray"]], "segments (arkouda.categorical attribute)": [[12, "arkouda.Categorical.segments"], [12, "id177"], [12, "id550"], [12, "id559"], [12, "id931"], [12, "id940"], [66, "arkouda.Categorical.segments"]], "segments (arkouda.groupby attribute)": [[12, "arkouda.GroupBy.segments"], [12, "id256"], [12, "id438"], [12, "id603"], [12, "id76"], [12, "id890"], [69, "arkouda.GroupBy.segments"]], "set_categories() (arkouda.categorical method)": [[12, "arkouda.Categorical.set_categories"], [12, "id565"], [12, "id946"]], "set_dtype() (arkouda.index method)": [[12, "arkouda.Index.set_dtype"]], "set_dtype() (arkouda.multiindex method)": [[12, "arkouda.MultiIndex.set_dtype"]], "set_jth() (arkouda.segarray method)": [[12, "arkouda.SegArray.set_jth"]], "setdiff() (arkouda.segarray method)": [[12, "arkouda.SegArray.setdiff"]], "setdiff1d() (in module arkouda)": [[12, "arkouda.setdiff1d"], [75, "arkouda.setdiff1d"]], "setxor() (arkouda.segarray method)": [[12, "arkouda.SegArray.setxor"]], "setxor1d() (in module arkouda)": [[12, "arkouda.setxor1d"], [75, "arkouda.setxor1d"]], "shape (arkouda.arrayview attribute)": [[12, "arkouda.ArrayView.shape"], [65, "arkouda.ArrayView.shape"]], "shape (arkouda.categorical attribute)": [[12, "arkouda.Categorical.shape"], [12, "id554"], [12, "id935"], [66, "arkouda.Categorical.shape"]], "shape (arkouda.dataframe property)": [[12, "arkouda.DataFrame.shape"], [12, "id776"]], "shape (arkouda.index property)": [[12, "arkouda.Index.shape"]], "shape (arkouda.series property)": [[12, "arkouda.Series.shape"]], "shape (arkouda.strings attribute)": [[12, "arkouda.Strings.shape"], [12, "id119"], [12, "id369"], [12, "id715"], [12, "id979"]], "shape (arkouda.pdarray attribute)": [[12, "arkouda.pdarray.shape"], [12, "id10"], [12, "id190"], [12, "id304"], [12, "id483"], [12, "id648"], [72, "arkouda.pdarray.shape"]], "sin() (in module arkouda)": [[12, "arkouda.sin"], [64, "arkouda.sin"]], "sinh() (in module arkouda)": [[12, "arkouda.sinh"]], "size (arkouda.arrayview attribute)": [[12, "arkouda.ArrayView.size"], [65, "arkouda.ArrayView.size"]], "size (arkouda.categorical attribute)": [[12, "arkouda.Categorical.size"], [12, "id551"], [12, "id932"], [66, "arkouda.Categorical.size"]], "size (arkouda.dataframe property)": [[12, "arkouda.DataFrame.size"], [12, "id773"]], "size (arkouda.groupby attribute)": [[12, "arkouda.GroupBy.size"], [12, "id252"], [12, "id434"], [12, "id599"], [12, "id72"], [12, "id886"], [69, "arkouda.GroupBy.size"]], "size (arkouda.strings attribute)": [[12, "arkouda.Strings.size"], [12, "id116"], [12, "id366"], [12, "id712"], [12, "id976"]], "size (arkouda.pdarray attribute)": [[12, "arkouda.pdarray.size"], [12, "id188"], [12, "id302"], [12, "id481"], [12, "id646"], [12, "id8"], [72, "arkouda.pdarray.size"]], "size() (arkouda.groupby method)": [[12, "id0"], [12, "id263"], [12, "id445"], [12, "id610"], [12, "id83"], [12, "id897"], [69, "id0"]], "skew() (in module arkouda)": [[12, "arkouda.skew"]], "slice_bits() (arkouda.pdarray method)": [[12, "arkouda.pdarray.slice_bits"], [12, "id229"], [12, "id343"], [12, "id49"], [12, "id522"], [12, "id687"]], "snapshot() (in module arkouda)": [[12, "arkouda.snapshot"]], "sort() (arkouda.categorical method)": [[12, "arkouda.Categorical.sort"], [12, "id578"], [12, "id959"]], "sort_index() (arkouda.series method)": [[12, "arkouda.Series.sort_index"]], "sort_values() (arkouda.dataframe method)": [[12, "arkouda.DataFrame.sort_values"], [12, "id810"]], "sort_values() (arkouda.series method)": [[12, "arkouda.Series.sort_values"]], "sorted() (in module arkouda)": [[12, "arkouda.sorted"]], "special_objtype (arkouda.bitvector attribute)": [[12, "arkouda.BitVector.special_objType"]], "special_objtype (arkouda.datetime attribute)": [[12, "arkouda.Datetime.special_objType"], [12, "id1062"], [12, "id850"]], "special_objtype (arkouda.ipv4 attribute)": [[12, "arkouda.IPv4.special_objType"]], "special_objtype (arkouda.timedelta attribute)": [[12, "arkouda.Timedelta.special_objType"], [12, "id870"]], "split() (arkouda.strings method)": [[12, "arkouda.Strings.split"], [12, "id1004"], [12, "id144"], [12, "id394"], [12, "id740"], [77, "arkouda.Strings.split"]], "sqrt() (in module arkouda)": [[12, "arkouda.sqrt"]], "standard_normal() (in module arkouda)": [[12, "arkouda.standard_normal"]], "standardize_categories() (arkouda.categorical class method)": [[12, "arkouda.Categorical.standardize_categories"], [12, "id564"], [12, "id945"]], "startswith() (arkouda.categorical method)": [[12, "arkouda.Categorical.startswith"], [12, "id571"], [12, "id952"], [66, "arkouda.Categorical.startswith"]], "startswith() (arkouda.strings method)": [[12, "arkouda.Strings.startswith"], [12, "id1009"], [12, "id149"], [12, "id399"], [12, "id745"], [77, "arkouda.Strings.startswith"]], "std() (arkouda.groupby method)": [[12, "arkouda.GroupBy.std"], [12, "id269"], [12, "id451"], [12, "id616"], [12, "id89"], [12, "id903"], [69, "arkouda.GroupBy.std"]], "std() (arkouda.timedelta method)": [[12, "arkouda.Timedelta.std"], [12, "id873"]], "std() (arkouda.pdarray method)": [[12, "arkouda.pdarray.std"], [12, "id214"], [12, "id328"], [12, "id34"], [12, "id507"], [12, "id672"], [70, "arkouda.pdarray.std"]], "std() (in module arkouda)": [[12, "arkouda.std"], [64, "arkouda.std"]], "stick() (arkouda.strings method)": [[12, "arkouda.Strings.stick"], [12, "id1014"], [12, "id154"], [12, "id404"], [12, "id750"], [77, "arkouda.Strings.stick"]], "str_ (in module arkouda)": [[12, "arkouda.str_"], [12, "id248"]], "str_acc (arkouda.series attribute)": [[12, "arkouda.Series.str_acc"]], "str_scalars (in module arkouda)": [[12, "arkouda.str_scalars"]], "strict (arkouda.errormode attribute)": [[12, "arkouda.ErrorMode.strict"]], "string_operators() (in module arkouda)": [[12, "arkouda.string_operators"]], "strip() (arkouda.strings method)": [[12, "arkouda.Strings.strip"], [12, "id137"], [12, "id387"], [12, "id733"], [12, "id997"]], "sub() (arkouda.strings method)": [[12, "arkouda.Strings.sub"], [12, "id1006"], [12, "id146"], [12, "id396"], [12, "id742"], [77, "arkouda.Strings.sub"]], "subn() (arkouda.strings method)": [[12, "arkouda.Strings.subn"], [12, "id1007"], [12, "id147"], [12, "id397"], [12, "id743"], [77, "arkouda.Strings.subn"]], "sum() (arkouda.datetime method)": [[12, "arkouda.Datetime.sum"], [12, "id1065"], [12, "id853"]], "sum() (arkouda.groupby method)": [[12, "arkouda.GroupBy.sum"], [12, "id266"], [12, "id448"], [12, "id613"], [12, "id86"], [12, "id900"], [69, "arkouda.GroupBy.sum"]], "sum() (arkouda.segarray method)": [[12, "arkouda.SegArray.sum"]], "sum() (arkouda.timedelta method)": [[12, "arkouda.Timedelta.sum"], [12, "id874"]], "sum() (arkouda.pdarray method)": [[12, "arkouda.pdarray.sum"], [12, "id206"], [12, "id26"], [12, "id320"], [12, "id499"], [12, "id664"], [70, "arkouda.pdarray.sum"]], "sum() (in module arkouda)": [[12, "arkouda.sum"], [64, "arkouda.sum"]], "supported_opeq (arkouda.datetime attribute)": [[12, "arkouda.Datetime.supported_opeq"], [12, "id1059"], [12, "id847"]], "supported_opeq (arkouda.timedelta attribute)": [[12, "arkouda.Timedelta.supported_opeq"], [12, "id867"]], "supported_with_datetime (arkouda.datetime attribute)": [[12, "arkouda.Datetime.supported_with_datetime"], [12, "id1055"], [12, "id843"]], "supported_with_datetime (arkouda.timedelta attribute)": [[12, "arkouda.Timedelta.supported_with_datetime"], [12, "id863"]], "supported_with_pdarray (arkouda.datetime attribute)": [[12, "arkouda.Datetime.supported_with_pdarray"], [12, "id1060"], [12, "id848"]], "supported_with_pdarray (arkouda.timedelta attribute)": [[12, "arkouda.Timedelta.supported_with_pdarray"], [12, "id868"]], "supported_with_r_datetime (arkouda.datetime attribute)": [[12, "arkouda.Datetime.supported_with_r_datetime"], [12, "id1056"], [12, "id844"]], "supported_with_r_datetime (arkouda.timedelta attribute)": [[12, "arkouda.Timedelta.supported_with_r_datetime"], [12, "id864"]], "supported_with_r_pdarray (arkouda.datetime attribute)": [[12, "arkouda.Datetime.supported_with_r_pdarray"], [12, "id1061"], [12, "id849"]], "supported_with_r_pdarray (arkouda.timedelta attribute)": [[12, "arkouda.Timedelta.supported_with_r_pdarray"], [12, "id869"]], "supported_with_r_timedelta (arkouda.datetime attribute)": [[12, "arkouda.Datetime.supported_with_r_timedelta"], [12, "id1058"], [12, "id846"]], "supported_with_r_timedelta (arkouda.timedelta attribute)": [[12, "arkouda.Timedelta.supported_with_r_timedelta"], [12, "id866"]], "supported_with_timedelta (arkouda.datetime attribute)": [[12, "arkouda.Datetime.supported_with_timedelta"], [12, "id1057"], [12, "id845"]], "supported_with_timedelta (arkouda.timedelta attribute)": [[12, "arkouda.Timedelta.supported_with_timedelta"], [12, "id865"]], "tail() (arkouda.dataframe method)": [[12, "arkouda.DataFrame.tail"], [12, "id792"]], "tail() (arkouda.series method)": [[12, "arkouda.Series.tail"]], "tan() (in module arkouda)": [[12, "arkouda.tan"]], "tanh() (in module arkouda)": [[12, "arkouda.tanh"]], "timedelta_range() (in module arkouda)": [[12, "arkouda.timedelta_range"], [12, "id880"]], "to_csv() (arkouda.dataframe method)": [[12, "arkouda.DataFrame.to_csv"], [12, "id800"]], "to_csv() (arkouda.index method)": [[12, "arkouda.Index.to_csv"]], "to_csv() (arkouda.strings method)": [[12, "arkouda.Strings.to_csv"], [12, "id1026"], [12, "id166"], [12, "id416"], [12, "id762"]], "to_csv() (arkouda.pdarray method)": [[12, "arkouda.pdarray.to_csv"], [12, "id238"], [12, "id352"], [12, "id531"], [12, "id58"], [12, "id696"]], "to_csv() (in module arkouda)": [[12, "arkouda.to_csv"]], "to_cuda() (arkouda.pdarray method)": [[12, "arkouda.pdarray.to_cuda"], [12, "id234"], [12, "id348"], [12, "id527"], [12, "id54"], [12, "id692"]], "to_dataframe() (arkouda.series method)": [[12, "arkouda.Series.to_dataframe"]], "to_dict() (arkouda.index method)": [[12, "arkouda.Index.to_dict"]], "to_dict() (arkouda.multiindex method)": [[12, "arkouda.MultiIndex.to_dict"]], "to_hdf() (arkouda.arrayview method)": [[12, "arkouda.ArrayView.to_hdf"]], "to_hdf() (arkouda.categorical method)": [[12, "arkouda.Categorical.to_hdf"], [12, "id580"], [12, "id961"]], "to_hdf() (arkouda.dataframe method)": [[12, "arkouda.DataFrame.to_hdf"], [12, "id797"]], "to_hdf() (arkouda.groupby method)": [[12, "arkouda.GroupBy.to_hdf"], [12, "id261"], [12, "id443"], [12, "id608"], [12, "id81"], [12, "id895"], [69, "arkouda.GroupBy.to_hdf"]], "to_hdf() (arkouda.ipv4 method)": [[12, "arkouda.IPv4.to_hdf"]], "to_hdf() (arkouda.index method)": [[12, "arkouda.Index.to_hdf"]], "to_hdf() (arkouda.multiindex method)": [[12, "arkouda.MultiIndex.to_hdf"]], "to_hdf() (arkouda.segarray method)": [[12, "arkouda.SegArray.to_hdf"]], "to_hdf() (arkouda.strings method)": [[12, "arkouda.Strings.to_hdf"], [12, "id1024"], [12, "id164"], [12, "id414"], [12, "id760"]], "to_hdf() (arkouda.pdarray method)": [[12, "arkouda.pdarray.to_hdf"], [12, "id236"], [12, "id350"], [12, "id529"], [12, "id56"], [12, "id694"]], "to_hdf() (in module arkouda)": [[12, "arkouda.to_hdf"]], "to_list() (arkouda.arrayview method)": [[12, "arkouda.ArrayView.to_list"]], "to_list() (arkouda.bitvector method)": [[12, "arkouda.BitVector.to_list"]], "to_list() (arkouda.categorical method)": [[12, "arkouda.Categorical.to_list"], [12, "id567"], [12, "id948"]], "to_list() (arkouda.ipv4 method)": [[12, "arkouda.IPv4.to_list"]], "to_list() (arkouda.index method)": [[12, "arkouda.Index.to_list"]], "to_list() (arkouda.multiindex method)": [[12, "arkouda.MultiIndex.to_list"]], "to_list() (arkouda.segarray method)": [[12, "arkouda.SegArray.to_list"]], "to_list() (arkouda.series method)": [[12, "arkouda.Series.to_list"]], "to_list() (arkouda.strings method)": [[12, "arkouda.Strings.to_list"], [12, "id1021"], [12, "id161"], [12, "id411"], [12, "id757"]], "to_list() (arkouda.pdarray method)": [[12, "arkouda.pdarray.to_list"], [12, "id233"], [12, "id347"], [12, "id526"], [12, "id53"], [12, "id691"]], "to_lower() (arkouda.strings method)": [[12, "arkouda.Strings.to_lower"], [12, "id131"], [12, "id381"], [12, "id727"], [12, "id991"]], "to_ndarray() (arkouda.arrayview method)": [[12, "arkouda.ArrayView.to_ndarray"]], "to_ndarray() (arkouda.bitvector method)": [[12, "arkouda.BitVector.to_ndarray"]], "to_ndarray() (arkouda.categorical method)": [[12, "arkouda.Categorical.to_ndarray"], [12, "id566"], [12, "id947"]], "to_ndarray() (arkouda.ipv4 method)": [[12, "arkouda.IPv4.to_ndarray"]], "to_ndarray() (arkouda.index method)": [[12, "arkouda.Index.to_ndarray"]], "to_ndarray() (arkouda.multiindex method)": [[12, "arkouda.MultiIndex.to_ndarray"]], "to_ndarray() (arkouda.segarray method)": [[12, "arkouda.SegArray.to_ndarray"]], "to_ndarray() (arkouda.strings method)": [[12, "arkouda.Strings.to_ndarray"], [12, "id1020"], [12, "id160"], [12, "id410"], [12, "id756"]], "to_ndarray() (arkouda.pdarray method)": [[12, "arkouda.pdarray.to_ndarray"], [12, "id232"], [12, "id346"], [12, "id52"], [12, "id525"], [12, "id690"]], "to_pandas() (arkouda.dataframe method)": [[12, "arkouda.DataFrame.to_pandas"], [12, "id796"]], "to_pandas() (arkouda.datetime method)": [[12, "arkouda.Datetime.to_pandas"], [12, "id1064"], [12, "id852"]], "to_pandas() (arkouda.index method)": [[12, "arkouda.Index.to_pandas"]], "to_pandas() (arkouda.multiindex method)": [[12, "arkouda.MultiIndex.to_pandas"]], "to_pandas() (arkouda.series method)": [[12, "arkouda.Series.to_pandas"]], "to_pandas() (arkouda.timedelta method)": [[12, "arkouda.Timedelta.to_pandas"], [12, "id872"]], "to_parquet() (arkouda.categorical method)": [[12, "arkouda.Categorical.to_parquet"], [12, "id582"], [12, "id963"]], "to_parquet() (arkouda.dataframe method)": [[12, "arkouda.DataFrame.to_parquet"], [12, "id799"]], "to_parquet() (arkouda.index method)": [[12, "arkouda.Index.to_parquet"]], "to_parquet() (arkouda.segarray method)": [[12, "arkouda.SegArray.to_parquet"]], "to_parquet() (arkouda.strings method)": [[12, "arkouda.Strings.to_parquet"], [12, "id1023"], [12, "id163"], [12, "id413"], [12, "id759"]], "to_parquet() (arkouda.pdarray method)": [[12, "arkouda.pdarray.to_parquet"], [12, "id235"], [12, "id349"], [12, "id528"], [12, "id55"], [12, "id693"]], "to_parquet() (in module arkouda)": [[12, "arkouda.to_parquet"]], "to_title() (arkouda.strings method)": [[12, "arkouda.Strings.to_title"], [12, "id133"], [12, "id383"], [12, "id729"], [12, "id993"]], "to_upper() (arkouda.strings method)": [[12, "arkouda.Strings.to_upper"], [12, "id132"], [12, "id382"], [12, "id728"], [12, "id992"]], "topn() (arkouda.series method)": [[12, "arkouda.Series.topn"]], "total_seconds() (arkouda.timedelta method)": [[12, "arkouda.Timedelta.total_seconds"], [12, "id871"]], "transfer() (arkouda.categorical method)": [[12, "arkouda.Categorical.transfer"], [12, "id592"], [12, "id973"]], "transfer() (arkouda.dataframe method)": [[12, "arkouda.DataFrame.transfer"], [12, "id782"]], "transfer() (arkouda.segarray method)": [[12, "arkouda.SegArray.transfer"]], "transfer() (arkouda.strings method)": [[12, "arkouda.Strings.transfer"], [12, "id1035"], [12, "id175"], [12, "id425"], [12, "id771"]], "transfer() (arkouda.pdarray method)": [[12, "arkouda.pdarray.transfer"], [12, "id17"], [12, "id197"], [12, "id311"], [12, "id490"], [12, "id655"]], "translate_np_dtype() (in module arkouda)": [[12, "arkouda.translate_np_dtype"]], "uint64 (in module arkouda)": [[12, "arkouda.uint64"]], "uint8 (in module arkouda)": [[12, "arkouda.uint8"]], "uniform() (in module arkouda)": [[12, "arkouda.uniform"]], "union() (arkouda.segarray method)": [[12, "arkouda.SegArray.union"]], "union1d() (in module arkouda)": [[12, "arkouda.union1d"], [75, "arkouda.union1d"]], "unique() (arkouda.categorical method)": [[12, "arkouda.Categorical.unique"], [12, "id574"], [12, "id955"]], "unique() (arkouda.groupby method)": [[12, "arkouda.GroupBy.unique"], [12, "id104"], [12, "id284"], [12, "id466"], [12, "id631"], [12, "id918"], [69, "arkouda.GroupBy.unique"]], "unique() (arkouda.segarray method)": [[12, "arkouda.SegArray.unique"]], "unique() (in module arkouda)": [[12, "arkouda.unique"], [12, "id475"], [12, "id641"], [75, "arkouda.unique"]], "unique_keys (arkouda.groupby attribute)": [[12, "arkouda.GroupBy.unique_keys"], [12, "id254"], [12, "id436"], [12, "id601"], [12, "id74"], [12, "id888"], [69, "arkouda.GroupBy.unique_keys"]], "unregister() (arkouda.categorical method)": [[12, "arkouda.Categorical.unregister"], [12, "id585"], [12, "id966"]], "unregister() (arkouda.dataframe method)": [[12, "arkouda.DataFrame.unregister"], [12, "id819"]], "unregister() (arkouda.datetime method)": [[12, "arkouda.Datetime.unregister"], [12, "id1067"], [12, "id855"]], "unregister() (arkouda.groupby method)": [[12, "arkouda.GroupBy.unregister"], [12, "id108"], [12, "id288"], [12, "id470"], [12, "id635"], [12, "id922"], [69, "arkouda.GroupBy.unregister"]], "unregister() (arkouda.index method)": [[12, "arkouda.Index.unregister"]], "unregister() (arkouda.multiindex method)": [[12, "arkouda.MultiIndex.unregister"]], "unregister() (arkouda.segarray method)": [[12, "arkouda.SegArray.unregister"]], "unregister() (arkouda.series method)": [[12, "arkouda.Series.unregister"]], "unregister() (arkouda.strings method)": [[12, "arkouda.Strings.unregister"], [12, "id1031"], [12, "id171"], [12, "id421"], [12, "id767"]], "unregister() (arkouda.timedelta method)": [[12, "arkouda.Timedelta.unregister"], [12, "id877"]], "unregister() (arkouda.pdarray method)": [[12, "arkouda.pdarray.unregister"], [12, "id243"], [12, "id357"], [12, "id536"], [12, "id63"], [12, "id701"]], "unregister() (in module arkouda)": [[12, "arkouda.unregister"]], "unregister_all() (in module arkouda)": [[12, "arkouda.unregister_all"]], "unregister_categorical_by_name() (arkouda.categorical static method)": [[12, "arkouda.Categorical.unregister_categorical_by_name"], [12, "id590"], [12, "id971"]], "unregister_dataframe_by_name() (arkouda.dataframe static method)": [[12, "arkouda.DataFrame.unregister_dataframe_by_name"], [12, "id822"]], "unregister_groupby_by_name() (arkouda.groupby static method)": [[12, "arkouda.GroupBy.unregister_groupby_by_name"], [12, "id111"], [12, "id291"], [12, "id473"], [12, "id638"], [12, "id925"], [69, "arkouda.GroupBy.unregister_groupby_by_name"]], "unregister_pdarray_by_name() (in module arkouda)": [[12, "arkouda.unregister_pdarray_by_name"]], "unregister_segarray_by_name() (arkouda.segarray static method)": [[12, "arkouda.SegArray.unregister_segarray_by_name"]], "unregister_strings_by_name() (arkouda.strings static method)": [[12, "arkouda.Strings.unregister_strings_by_name"], [12, "id1034"], [12, "id174"], [12, "id424"], [12, "id770"]], "unsqueeze() (in module arkouda)": [[12, "arkouda.unsqueeze"]], "update_hdf() (arkouda.arrayview method)": [[12, "arkouda.ArrayView.update_hdf"]], "update_hdf() (arkouda.categorical method)": [[12, "arkouda.Categorical.update_hdf"], [12, "id581"], [12, "id962"]], "update_hdf() (arkouda.dataframe method)": [[12, "arkouda.DataFrame.update_hdf"], [12, "id798"]], "update_hdf() (arkouda.groupby method)": [[12, "arkouda.GroupBy.update_hdf"], [12, "id262"], [12, "id444"], [12, "id609"], [12, "id82"], [12, "id896"]], "update_hdf() (arkouda.ipv4 method)": [[12, "arkouda.IPv4.update_hdf"]], "update_hdf() (arkouda.index method)": [[12, "arkouda.Index.update_hdf"]], "update_hdf() (arkouda.multiindex method)": [[12, "arkouda.MultiIndex.update_hdf"]], "update_hdf() (arkouda.segarray method)": [[12, "arkouda.SegArray.update_hdf"]], "update_hdf() (arkouda.strings method)": [[12, "arkouda.Strings.update_hdf"], [12, "id1025"], [12, "id165"], [12, "id415"], [12, "id761"]], "update_hdf() (arkouda.pdarray method)": [[12, "arkouda.pdarray.update_hdf"], [12, "id237"], [12, "id351"], [12, "id530"], [12, "id57"], [12, "id695"]], "update_hdf() (in module arkouda)": [[12, "arkouda.update_hdf"]], "update_size() (arkouda.dataframe method)": [[12, "arkouda.DataFrame.update_size"], [12, "id787"]], "value_counts() (arkouda.series method)": [[12, "arkouda.Series.value_counts"]], "value_counts() (arkouda.pdarray method)": [[12, "arkouda.pdarray.value_counts"], [12, "id227"], [12, "id341"], [12, "id47"], [12, "id520"], [12, "id685"]], "value_counts() (in module arkouda)": [[12, "arkouda.value_counts"], [70, "arkouda.value_counts"]], "var() (arkouda.groupby method)": [[12, "arkouda.GroupBy.var"], [12, "id268"], [12, "id450"], [12, "id615"], [12, "id88"], [12, "id902"], [69, "arkouda.GroupBy.var"]], "var() (arkouda.pdarray method)": [[12, "arkouda.pdarray.var"], [12, "id213"], [12, "id327"], [12, "id33"], [12, "id506"], [12, "id671"], [70, "arkouda.pdarray.var"]], "var() (in module arkouda)": [[12, "arkouda.var"], [64, "arkouda.var"]], "week (arkouda.datetime property)": [[12, "arkouda.Datetime.week"], [12, "id1051"], [12, "id839"]], "weekday (arkouda.datetime property)": [[12, "arkouda.Datetime.weekday"], [12, "id1050"], [12, "id838"]], "weekofyear (arkouda.datetime property)": [[12, "arkouda.Datetime.weekofyear"], [12, "id1052"], [12, "id840"]], "where() (in module arkouda)": [[12, "arkouda.where"], [12, "id642"], [12, "id69"], [64, "arkouda.where"]], "write_log() (in module arkouda)": [[12, "arkouda.write_log"]], "year (arkouda.datetime property)": [[12, "arkouda.Datetime.year"], [12, "id1045"], [12, "id833"]], "zero_up() (in module arkouda)": [[12, "arkouda.zero_up"]], "zeros() (in module arkouda)": [[12, "arkouda.zeros"], [12, "id362"], [12, "id67"], [12, "id706"], [67, "arkouda.zeros"]], "zeros_like() (in module arkouda)": [[12, "arkouda.zeros_like"], [67, "arkouda.zeros_like"]], "index (class in arkouda.index)": [[13, "arkouda.index.Index"]], "multiindex (class in arkouda.index)": [[13, "arkouda.index.MultiIndex"]], "argsort() (arkouda.index.index method)": [[13, "arkouda.index.Index.argsort"]], "argsort() (arkouda.index.multiindex method)": [[13, "arkouda.index.MultiIndex.argsort"]], "arkouda.index": [[13, "module-arkouda.index"]], "concat() (arkouda.index.index method)": [[13, "arkouda.index.Index.concat"]], "concat() (arkouda.index.multiindex method)": [[13, "arkouda.index.MultiIndex.concat"]], "factory() (arkouda.index.index static method)": [[13, "arkouda.index.Index.factory"]], "from_return_msg() (arkouda.index.index class method)": [[13, "arkouda.index.Index.from_return_msg"]], "index (arkouda.index.index property)": [[13, "arkouda.index.Index.index"]], "index (arkouda.index.multiindex property)": [[13, "arkouda.index.MultiIndex.index"]], "is_registered() (arkouda.index.index method)": [[13, "arkouda.index.Index.is_registered"]], "is_registered() (arkouda.index.multiindex method)": [[13, "arkouda.index.MultiIndex.is_registered"]], "is_unique (arkouda.index.index property)": [[13, "arkouda.index.Index.is_unique"]], "lookup() (arkouda.index.index method)": [[13, "arkouda.index.Index.lookup"]], "lookup() (arkouda.index.multiindex method)": [[13, "arkouda.index.MultiIndex.lookup"]], "objtype (arkouda.index.index attribute)": [[13, "arkouda.index.Index.objType"]], "objtype (arkouda.index.multiindex attribute)": [[13, "arkouda.index.MultiIndex.objType"]], "register() (arkouda.index.index method)": [[13, "arkouda.index.Index.register"]], "register() (arkouda.index.multiindex method)": [[13, "arkouda.index.MultiIndex.register"]], "save() (arkouda.index.index method)": [[13, "arkouda.index.Index.save"]], "set_dtype() (arkouda.index.index method)": [[13, "arkouda.index.Index.set_dtype"]], "set_dtype() (arkouda.index.multiindex method)": [[13, "arkouda.index.MultiIndex.set_dtype"]], "shape (arkouda.index.index property)": [[13, "arkouda.index.Index.shape"]], "to_csv() (arkouda.index.index method)": [[13, "arkouda.index.Index.to_csv"]], "to_dict() (arkouda.index.index method)": [[13, "arkouda.index.Index.to_dict"]], "to_dict() (arkouda.index.multiindex method)": [[13, "arkouda.index.MultiIndex.to_dict"]], "to_hdf() (arkouda.index.index method)": [[13, "arkouda.index.Index.to_hdf"]], "to_hdf() (arkouda.index.multiindex method)": [[13, "arkouda.index.MultiIndex.to_hdf"]], "to_list() (arkouda.index.index method)": [[13, "arkouda.index.Index.to_list"]], "to_list() (arkouda.index.multiindex method)": [[13, "arkouda.index.MultiIndex.to_list"]], "to_ndarray() (arkouda.index.index method)": [[13, "arkouda.index.Index.to_ndarray"]], "to_ndarray() (arkouda.index.multiindex method)": [[13, "arkouda.index.MultiIndex.to_ndarray"]], "to_pandas() (arkouda.index.index method)": [[13, "arkouda.index.Index.to_pandas"]], "to_pandas() (arkouda.index.multiindex method)": [[13, "arkouda.index.MultiIndex.to_pandas"]], "to_parquet() (arkouda.index.index method)": [[13, "arkouda.index.Index.to_parquet"]], "unregister() (arkouda.index.index method)": [[13, "arkouda.index.Index.unregister"]], "unregister() (arkouda.index.multiindex method)": [[13, "arkouda.index.MultiIndex.unregister"]], "update_hdf() (arkouda.index.index method)": [[13, "arkouda.index.Index.update_hdf"]], "update_hdf() (arkouda.index.multiindex method)": [[13, "arkouda.index.MultiIndex.update_hdf"]], "allsymbols (in module arkouda.infoclass)": [[14, "arkouda.infoclass.AllSymbols"]], "registeredsymbols (in module arkouda.infoclass)": [[14, "arkouda.infoclass.RegisteredSymbols"]], "arkouda.infoclass": [[14, "module-arkouda.infoclass"]], "information() (in module arkouda.infoclass)": [[14, "arkouda.infoclass.information"]], "list_registry() (in module arkouda.infoclass)": [[14, "arkouda.infoclass.list_registry"]], "list_symbol_table() (in module arkouda.infoclass)": [[14, "arkouda.infoclass.list_symbol_table"]], "pretty_print_information() (in module arkouda.infoclass)": [[14, "arkouda.infoclass.pretty_print_information"]], "arkouda.io": [[15, "module-arkouda.io"]], "export() (in module arkouda.io)": [[15, "arkouda.io.export"]], "get_columns() (in module arkouda.io)": [[15, "arkouda.io.get_columns"]], "get_datasets() (in module arkouda.io)": [[15, "arkouda.io.get_datasets"]], "get_filetype() (in module arkouda.io)": [[15, "arkouda.io.get_filetype"]], "get_null_indices() (in module arkouda.io)": [[15, "arkouda.io.get_null_indices"]], "import_data() (in module arkouda.io)": [[15, "arkouda.io.import_data"]], "load() (in module arkouda.io)": [[15, "arkouda.io.load"]], "load_all() (in module arkouda.io)": [[15, "arkouda.io.load_all"]], "ls() (in module arkouda.io)": [[15, "arkouda.io.ls"]], "ls_csv() (in module arkouda.io)": [[15, "arkouda.io.ls_csv"]], "read() (in module arkouda.io)": [[15, "arkouda.io.read"]], "read_csv() (in module arkouda.io)": [[15, "arkouda.io.read_csv"]], "read_hdf() (in module arkouda.io)": [[15, "arkouda.io.read_hdf"]], "read_parquet() (in module arkouda.io)": [[15, "arkouda.io.read_parquet"]], "read_tagged_data() (in module arkouda.io)": [[15, "arkouda.io.read_tagged_data"]], "receive() (in module arkouda.io)": [[15, "arkouda.io.receive"]], "receive_dataframe() (in module arkouda.io)": [[15, "arkouda.io.receive_dataframe"]], "restore() (in module arkouda.io)": [[15, "arkouda.io.restore"]], "save_all() (in module arkouda.io)": [[15, "arkouda.io.save_all"]], "snapshot() (in module arkouda.io)": [[15, "arkouda.io.snapshot"]], "to_csv() (in module arkouda.io)": [[15, "arkouda.io.to_csv"]], "to_hdf() (in module arkouda.io)": [[15, "arkouda.io.to_hdf"]], "to_parquet() (in module arkouda.io)": [[15, "arkouda.io.to_parquet"]], "update_hdf() (in module arkouda.io)": [[15, "arkouda.io.update_hdf"]], "arkouda.io_util": [[16, "module-arkouda.io_util"]], "delimited_file_to_dict() (in module arkouda.io_util)": [[16, "arkouda.io_util.delimited_file_to_dict"]], "dict_to_delimited_file() (in module arkouda.io_util)": [[16, "arkouda.io_util.dict_to_delimited_file"]], "get_directory() (in module arkouda.io_util)": [[16, "arkouda.io_util.get_directory"]], "write_line_to_file() (in module arkouda.io_util)": [[16, "arkouda.io_util.write_line_to_file"]], "arkouda.join": [[17, "module-arkouda.join"]], "compute_join_size() (in module arkouda.join)": [[17, "arkouda.join.compute_join_size"]], "gen_ranges() (in module arkouda.join)": [[17, "arkouda.join.gen_ranges"]], "join_on_eq_with_dt() (in module arkouda.join)": [[17, "arkouda.join.join_on_eq_with_dt"]], "critical (arkouda.logger.loglevel attribute)": [[18, "arkouda.logger.LogLevel.CRITICAL"]], "debug (arkouda.logger.loglevel attribute)": [[18, "arkouda.logger.LogLevel.DEBUG"]], "error (arkouda.logger.loglevel attribute)": [[18, "arkouda.logger.LogLevel.ERROR"]], "info (arkouda.logger.loglevel attribute)": [[18, "arkouda.logger.LogLevel.INFO"]], "loglevel (class in arkouda.logger)": [[18, "arkouda.logger.LogLevel"]], "warn (arkouda.logger.loglevel attribute)": [[18, "arkouda.logger.LogLevel.WARN"]], "arkouda.logger": [[18, "module-arkouda.logger"]], "disableverbose() (in module arkouda.logger)": [[18, "arkouda.logger.disableVerbose"]], "enableverbose() (in module arkouda.logger)": [[18, "arkouda.logger.enableVerbose"]], "write_log() (in module arkouda.logger)": [[18, "arkouda.logger.write_log"]], "match (class in arkouda.match)": [[19, "arkouda.match.Match"]], "arkouda.match": [[19, "module-arkouda.match"]], "end() (arkouda.match.match method)": [[19, "arkouda.match.Match.end"], [77, "arkouda.match.Match.end"]], "find_matches() (arkouda.match.match method)": [[19, "arkouda.match.Match.find_matches"], [77, "arkouda.match.Match.find_matches"]], "group() (arkouda.match.match method)": [[19, "arkouda.match.Match.group"], [77, "arkouda.match.Match.group"]], "match_type() (arkouda.match.match method)": [[19, "arkouda.match.Match.match_type"], [77, "arkouda.match.Match.match_type"]], "matched() (arkouda.match.match method)": [[19, "arkouda.match.Match.matched"], [77, "arkouda.match.Match.matched"]], "start() (arkouda.match.match method)": [[19, "arkouda.match.Match.start"], [77, "arkouda.match.Match.start"]], "locationsinfo (arkouda.matcher.matcher attribute)": [[20, "arkouda.matcher.Matcher.LocationsInfo"]], "matcher (class in arkouda.matcher)": [[20, "arkouda.matcher.Matcher"]], "arkouda.matcher": [[20, "module-arkouda.matcher"]], "find_locations() (arkouda.matcher.matcher method)": [[20, "arkouda.matcher.Matcher.find_locations"]], "findall() (arkouda.matcher.matcher method)": [[20, "arkouda.matcher.Matcher.findall"]], "get_match() (arkouda.matcher.matcher method)": [[20, "arkouda.matcher.Matcher.get_match"]], "split() (arkouda.matcher.matcher method)": [[20, "arkouda.matcher.Matcher.split"]], "sub() (arkouda.matcher.matcher method)": [[20, "arkouda.matcher.Matcher.sub"]], "errormode (class in arkouda.numeric)": [[21, "arkouda.numeric.ErrorMode"]], "abs() (in module arkouda.numeric)": [[21, "arkouda.numeric.abs"]], "arccos() (in module arkouda.numeric)": [[21, "arkouda.numeric.arccos"]], "arccosh() (in module arkouda.numeric)": [[21, "arkouda.numeric.arccosh"]], "arcsin() (in module arkouda.numeric)": [[21, "arkouda.numeric.arcsin"]], "arcsinh() (in module arkouda.numeric)": [[21, "arkouda.numeric.arcsinh"]], "arctan() (in module arkouda.numeric)": [[21, "arkouda.numeric.arctan"]], "arctan2() (in module arkouda.numeric)": [[21, "arkouda.numeric.arctan2"]], "arctanh() (in module arkouda.numeric)": [[21, "arkouda.numeric.arctanh"]], "arkouda.numeric": [[21, "module-arkouda.numeric"]], "cast() (in module arkouda.numeric)": [[21, "arkouda.numeric.cast"]], "cos() (in module arkouda.numeric)": [[21, "arkouda.numeric.cos"]], "cosh() (in module arkouda.numeric)": [[21, "arkouda.numeric.cosh"]], "cumprod() (in module arkouda.numeric)": [[21, "arkouda.numeric.cumprod"]], "cumsum() (in module arkouda.numeric)": [[21, "arkouda.numeric.cumsum"]], "deg2rad() (in module arkouda.numeric)": [[21, "arkouda.numeric.deg2rad"]], "exp() (in module arkouda.numeric)": [[21, "arkouda.numeric.exp"]], "hash() (in module arkouda.numeric)": [[21, "arkouda.numeric.hash"]], "histogram() (in module arkouda.numeric)": [[21, "arkouda.numeric.histogram"]], "histogram2d() (in module arkouda.numeric)": [[21, "arkouda.numeric.histogram2d"]], "histogramdd() (in module arkouda.numeric)": [[21, "arkouda.numeric.histogramdd"]], "ignore (arkouda.numeric.errormode attribute)": [[21, "arkouda.numeric.ErrorMode.ignore"]], "isnan() (in module arkouda.numeric)": [[21, "arkouda.numeric.isnan"]], "log() (in module arkouda.numeric)": [[21, "arkouda.numeric.log"]], "rad2deg() (in module arkouda.numeric)": [[21, "arkouda.numeric.rad2deg"]], "return_validity (arkouda.numeric.errormode attribute)": [[21, "arkouda.numeric.ErrorMode.return_validity"]], "sin() (in module arkouda.numeric)": [[21, "arkouda.numeric.sin"]], "sinh() (in module arkouda.numeric)": [[21, "arkouda.numeric.sinh"]], "strict (arkouda.numeric.errormode attribute)": [[21, "arkouda.numeric.ErrorMode.strict"]], "tan() (in module arkouda.numeric)": [[21, "arkouda.numeric.tan"]], "tanh() (in module arkouda.numeric)": [[21, "arkouda.numeric.tanh"]], "value_counts() (in module arkouda.numeric)": [[21, "arkouda.numeric.value_counts"]], "where() (in module arkouda.numeric)": [[21, "arkouda.numeric.where"]], "binops (arkouda.pdarrayclass.pdarray attribute)": [[22, "arkouda.pdarrayclass.pdarray.BinOps"]], "opeqops (arkouda.pdarrayclass.pdarray attribute)": [[22, "arkouda.pdarrayclass.pdarray.OpEqOps"]], "all() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.all"]], "all() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.all"]], "any() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.any"]], "any() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.any"]], "argmax() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.argmax"]], "argmax() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.argmax"]], "argmaxk() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.argmaxk"]], "argmaxk() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.argmaxk"]], "argmin() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.argmin"]], "argmin() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.argmin"]], "argmink() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.argmink"]], "argmink() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.argmink"]], "arkouda.pdarrayclass": [[22, "module-arkouda.pdarrayclass"]], "astype() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.astype"]], "attach() (arkouda.pdarrayclass.pdarray static method)": [[22, "arkouda.pdarrayclass.pdarray.attach"]], "attach_pdarray() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.attach_pdarray"]], "bigint_to_uint_arrays() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.bigint_to_uint_arrays"]], "clear() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.clear"]], "clz() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.clz"]], "clz() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.clz"]], "corr() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.corr"]], "corr() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.corr"]], "cov() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.cov"]], "cov() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.cov"]], "ctz() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.ctz"]], "ctz() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.ctz"]], "divmod() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.divmod"]], "dtype (arkouda.pdarrayclass.pdarray attribute)": [[22, "arkouda.pdarrayclass.pdarray.dtype"]], "fill() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.fill"]], "fmod() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.fmod"]], "format_other() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.format_other"]], "info() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.info"]], "is_registered() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.is_registered"]], "is_sorted() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.is_sorted"]], "is_sorted() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.is_sorted"]], "itemsize (arkouda.pdarrayclass.pdarray attribute)": [[22, "arkouda.pdarrayclass.pdarray.itemsize"]], "max() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.max"]], "max() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.max"]], "max_bits (arkouda.pdarrayclass.pdarray property)": [[22, "arkouda.pdarrayclass.pdarray.max_bits"]], "maxk() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.maxk"]], "maxk() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.maxk"]], "mean() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.mean"]], "mean() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.mean"]], "min() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.min"]], "min() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.min"]], "mink() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.mink"]], "mink() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.mink"]], "mod() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.mod"]], "name (arkouda.pdarrayclass.pdarray attribute)": [[22, "arkouda.pdarrayclass.pdarray.name"]], "ndim (arkouda.pdarrayclass.pdarray attribute)": [[22, "arkouda.pdarrayclass.pdarray.ndim"]], "objtype (arkouda.pdarrayclass.pdarray attribute)": [[22, "arkouda.pdarrayclass.pdarray.objType"]], "opeq() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.opeq"]], "parity() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.parity"]], "parity() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.parity"]], "pdarray (class in arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.pdarray"]], "popcount() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.popcount"]], "popcount() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.popcount"]], "power() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.power"]], "pretty_print_info() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.pretty_print_info"]], "prod() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.prod"]], "prod() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.prod"]], "register() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.register"]], "reshape() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.reshape"]], "rotl() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.rotl"]], "rotl() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.rotl"]], "rotr() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.rotr"]], "rotr() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.rotr"]], "save() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.save"]], "shape (arkouda.pdarrayclass.pdarray attribute)": [[22, "arkouda.pdarrayclass.pdarray.shape"]], "size (arkouda.pdarrayclass.pdarray attribute)": [[22, "arkouda.pdarrayclass.pdarray.size"]], "slice_bits() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.slice_bits"]], "sqrt() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.sqrt"]], "std() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.std"]], "std() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.std"]], "sum() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.sum"]], "sum() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.sum"]], "to_csv() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.to_csv"]], "to_cuda() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.to_cuda"]], "to_hdf() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.to_hdf"]], "to_list() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.to_list"]], "to_ndarray() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.to_ndarray"]], "to_parquet() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.to_parquet"]], "transfer() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.transfer"]], "unregister() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.unregister"]], "unregister_pdarray_by_name() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.unregister_pdarray_by_name"]], "update_hdf() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.update_hdf"]], "value_counts() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.value_counts"]], "var() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.var"]], "var() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.var"]], "arange() (in module arkouda.pdarraycreation)": [[23, "arkouda.pdarraycreation.arange"]], "arkouda.pdarraycreation": [[23, "module-arkouda.pdarraycreation"]], "array() (in module arkouda.pdarraycreation)": [[23, "arkouda.pdarraycreation.array"]], "bigint_from_uint_arrays() (in module arkouda.pdarraycreation)": [[23, "arkouda.pdarraycreation.bigint_from_uint_arrays"]], "from_series() (in module arkouda.pdarraycreation)": [[23, "arkouda.pdarraycreation.from_series"]], "full() (in module arkouda.pdarraycreation)": [[23, "arkouda.pdarraycreation.full"]], "full_like() (in module arkouda.pdarraycreation)": [[23, "arkouda.pdarraycreation.full_like"]], "linspace() (in module arkouda.pdarraycreation)": [[23, "arkouda.pdarraycreation.linspace"]], "ones() (in module arkouda.pdarraycreation)": [[23, "arkouda.pdarraycreation.ones"]], "ones_like() (in module arkouda.pdarraycreation)": [[23, "arkouda.pdarraycreation.ones_like"]], "randint() (in module arkouda.pdarraycreation)": [[23, "arkouda.pdarraycreation.randint"]], "random_strings_lognormal() (in module arkouda.pdarraycreation)": [[23, "arkouda.pdarraycreation.random_strings_lognormal"]], "random_strings_uniform() (in module arkouda.pdarraycreation)": [[23, "arkouda.pdarraycreation.random_strings_uniform"]], "standard_normal() (in module arkouda.pdarraycreation)": [[23, "arkouda.pdarraycreation.standard_normal"]], "uniform() (in module arkouda.pdarraycreation)": [[23, "arkouda.pdarraycreation.uniform"]], "zeros() (in module arkouda.pdarraycreation)": [[23, "arkouda.pdarraycreation.zeros"]], "zeros_like() (in module arkouda.pdarraycreation)": [[23, "arkouda.pdarraycreation.zeros_like"]], "arkouda.pdarraysetops": [[24, "module-arkouda.pdarraysetops"]], "concatenate() (in module arkouda.pdarraysetops)": [[24, "arkouda.pdarraysetops.concatenate"]], "in1d() (in module arkouda.pdarraysetops)": [[24, "arkouda.pdarraysetops.in1d"]], "intersect1d() (in module arkouda.pdarraysetops)": [[24, "arkouda.pdarraysetops.intersect1d"]], "setdiff1d() (in module arkouda.pdarraysetops)": [[24, "arkouda.pdarraysetops.setdiff1d"]], "setxor1d() (in module arkouda.pdarraysetops)": [[24, "arkouda.pdarraysetops.setxor1d"]], "union1d() (in module arkouda.pdarraysetops)": [[24, "arkouda.pdarraysetops.union1d"]], "arkouda.plotting": [[25, "module-arkouda.plotting"]], "hist_all() (in module arkouda.plotting)": [[25, "arkouda.plotting.hist_all"]], "plot_dist() (in module arkouda.plotting)": [[25, "arkouda.plotting.plot_dist"]], "row (class in arkouda.row)": [[26, "arkouda.row.Row"]], "arkouda.row": [[26, "module-arkouda.row"]], "arkouda.security": [[27, "module-arkouda.security"]], "generate_token() (in module arkouda.security)": [[27, "arkouda.security.generate_token"]], "generate_username_token_json() (in module arkouda.security)": [[27, "arkouda.security.generate_username_token_json"]], "get_arkouda_client_directory() (in module arkouda.security)": [[27, "arkouda.security.get_arkouda_client_directory"]], "get_home_directory() (in module arkouda.security)": [[27, "arkouda.security.get_home_directory"]], "get_username() (in module arkouda.security)": [[27, "arkouda.security.get_username"]], "username_tokenizer (in module arkouda.security)": [[27, "arkouda.security.username_tokenizer"]], "and() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.AND"]], "len_suffix (in module arkouda.segarray)": [[28, "arkouda.segarray.LEN_SUFFIX"]], "or() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.OR"]], "seg_suffix (in module arkouda.segarray)": [[28, "arkouda.segarray.SEG_SUFFIX"]], "segarray (class in arkouda.segarray)": [[28, "arkouda.segarray.SegArray"]], "val_suffix (in module arkouda.segarray)": [[28, "arkouda.segarray.VAL_SUFFIX"]], "xor() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.XOR"]], "aggregate() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.aggregate"]], "all() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.all"]], "any() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.any"]], "append() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.append"]], "append_single() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.append_single"]], "argmax() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.argmax"]], "argmin() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.argmin"]], "arkouda.segarray": [[28, "module-arkouda.segarray"]], "attach() (arkouda.segarray.segarray class method)": [[28, "arkouda.segarray.SegArray.attach"]], "concat() (arkouda.segarray.segarray class method)": [[28, "arkouda.segarray.SegArray.concat"]], "copy() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.copy"]], "filter() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.filter"]], "from_multi_array() (arkouda.segarray.segarray class method)": [[28, "arkouda.segarray.SegArray.from_multi_array"]], "from_parts() (arkouda.segarray.segarray class method)": [[28, "arkouda.segarray.SegArray.from_parts"]], "from_return_msg() (arkouda.segarray.segarray class method)": [[28, "arkouda.segarray.SegArray.from_return_msg"]], "get_jth() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.get_jth"]], "get_length_n() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.get_length_n"]], "get_ngrams() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.get_ngrams"]], "get_prefixes() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.get_prefixes"]], "get_suffixes() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.get_suffixes"]], "grouping (arkouda.segarray.segarray property)": [[28, "arkouda.segarray.SegArray.grouping"]], "hash() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.hash"]], "intersect() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.intersect"]], "is_registered() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.is_registered"]], "load() (arkouda.segarray.segarray class method)": [[28, "arkouda.segarray.SegArray.load"]], "max() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.max"]], "mean() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.mean"]], "min() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.min"]], "non_empty (arkouda.segarray.segarray property)": [[28, "arkouda.segarray.SegArray.non_empty"]], "nunique() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.nunique"]], "objtype (arkouda.segarray.segarray attribute)": [[28, "arkouda.segarray.SegArray.objType"]], "prepend_single() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.prepend_single"]], "prod() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.prod"]], "read_hdf() (arkouda.segarray.segarray class method)": [[28, "arkouda.segarray.SegArray.read_hdf"]], "register() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.register"]], "remove_repeats() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.remove_repeats"]], "save() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.save"]], "segarray() (in module arkouda.segarray)": [[28, "arkouda.segarray.segarray"]], "set_jth() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.set_jth"]], "setdiff() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.setdiff"]], "setxor() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.setxor"]], "sum() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.sum"]], "to_hdf() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.to_hdf"]], "to_list() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.to_list"]], "to_ndarray() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.to_ndarray"]], "to_parquet() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.to_parquet"]], "transfer() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.transfer"]], "union() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.union"]], "unique() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.unique"]], "unregister() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.unregister"]], "unregister_segarray_by_name() (arkouda.segarray.segarray static method)": [[28, "arkouda.segarray.SegArray.unregister_segarray_by_name"]], "update_hdf() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.update_hdf"]], "series (class in arkouda.series)": [[29, "arkouda.series.Series"]], "add() (arkouda.series.series method)": [[29, "arkouda.series.Series.add"]], "arkouda.series": [[29, "module-arkouda.series"]], "attach() (arkouda.series.series static method)": [[29, "arkouda.series.Series.attach"]], "concat() (arkouda.series.series static method)": [[29, "arkouda.series.Series.concat"]], "diff() (arkouda.series.series method)": [[29, "arkouda.series.Series.diff"]], "dt (arkouda.series.series attribute)": [[29, "arkouda.series.Series.dt"]], "from_return_msg() (arkouda.series.series class method)": [[29, "arkouda.series.Series.from_return_msg"]], "head() (arkouda.series.series method)": [[29, "arkouda.series.Series.head"]], "is_registered() (arkouda.series.series method)": [[29, "arkouda.series.Series.is_registered"]], "isin() (arkouda.series.series method)": [[29, "arkouda.series.Series.isin"]], "locate() (arkouda.series.series method)": [[29, "arkouda.series.Series.locate"]], "objtype (arkouda.series.series attribute)": [[29, "arkouda.series.Series.objType"]], "pdconcat() (arkouda.series.series static method)": [[29, "arkouda.series.Series.pdconcat"]], "register() (arkouda.series.series method)": [[29, "arkouda.series.Series.register"]], "shape (arkouda.series.series property)": [[29, "arkouda.series.Series.shape"]], "sort_index() (arkouda.series.series method)": [[29, "arkouda.series.Series.sort_index"]], "sort_values() (arkouda.series.series method)": [[29, "arkouda.series.Series.sort_values"]], "str_acc (arkouda.series.series attribute)": [[29, "arkouda.series.Series.str_acc"]], "tail() (arkouda.series.series method)": [[29, "arkouda.series.Series.tail"]], "to_dataframe() (arkouda.series.series method)": [[29, "arkouda.series.Series.to_dataframe"]], "to_list() (arkouda.series.series method)": [[29, "arkouda.series.Series.to_list"]], "to_pandas() (arkouda.series.series method)": [[29, "arkouda.series.Series.to_pandas"]], "topn() (arkouda.series.series method)": [[29, "arkouda.series.Series.topn"]], "unregister() (arkouda.series.series method)": [[29, "arkouda.series.Series.unregister"]], "value_counts() (arkouda.series.series method)": [[29, "arkouda.series.Series.value_counts"]], "argsort() (in module arkouda.sorting)": [[30, "arkouda.sorting.argsort"]], "arkouda.sorting": [[30, "module-arkouda.sorting"]], "coargsort() (in module arkouda.sorting)": [[30, "arkouda.sorting.coargsort"]], "sort() (in module arkouda.sorting)": [[30, "arkouda.sorting.sort"]], "binops (arkouda.strings.strings attribute)": [[31, "arkouda.strings.Strings.BinOps"]], "strings (class in arkouda.strings)": [[31, "arkouda.strings.Strings"]], "arkouda.strings": [[31, "module-arkouda.strings"]], "astype() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.astype"]], "attach() (arkouda.strings.strings static method)": [[31, "arkouda.strings.Strings.attach"]], "cached_regex_patterns() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.cached_regex_patterns"]], "contains() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.contains"]], "decode() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.decode"]], "dtype (arkouda.strings.strings attribute)": [[31, "arkouda.strings.Strings.dtype"]], "encode() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.encode"]], "endswith() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.endswith"]], "entry (arkouda.strings.strings attribute)": [[31, "arkouda.strings.Strings.entry"]], "find_locations() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.find_locations"]], "findall() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.findall"]], "flatten() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.flatten"]], "from_parts() (arkouda.strings.strings static method)": [[31, "arkouda.strings.Strings.from_parts"]], "from_return_msg() (arkouda.strings.strings static method)": [[31, "arkouda.strings.Strings.from_return_msg"]], "fullmatch() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.fullmatch"]], "get_bytes() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.get_bytes"]], "get_lengths() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.get_lengths"]], "get_offsets() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.get_offsets"]], "get_prefixes() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.get_prefixes"]], "get_suffixes() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.get_suffixes"]], "group() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.group"]], "hash() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.hash"]], "info() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.info"]], "is_lower() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.is_lower"]], "is_registered() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.is_registered"]], "is_title() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.is_title"]], "is_upper() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.is_upper"]], "logger (arkouda.strings.strings attribute)": [[31, "arkouda.strings.Strings.logger"]], "lstick() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.lstick"]], "match() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.match"]], "nbytes (arkouda.strings.strings attribute)": [[31, "arkouda.strings.Strings.nbytes"]], "ndim (arkouda.strings.strings attribute)": [[31, "arkouda.strings.Strings.ndim"]], "objtype (arkouda.strings.strings attribute)": [[31, "arkouda.strings.Strings.objType"]], "peel() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.peel"]], "pretty_print_info() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.pretty_print_info"]], "purge_cached_regex_patterns() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.purge_cached_regex_patterns"]], "register() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.register"]], "rpeel() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.rpeel"]], "save() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.save"]], "search() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.search"]], "shape (arkouda.strings.strings attribute)": [[31, "arkouda.strings.Strings.shape"]], "size (arkouda.strings.strings attribute)": [[31, "arkouda.strings.Strings.size"]], "split() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.split"]], "startswith() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.startswith"]], "stick() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.stick"]], "strip() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.strip"]], "sub() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.sub"]], "subn() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.subn"]], "to_csv() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.to_csv"]], "to_hdf() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.to_hdf"]], "to_list() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.to_list"]], "to_lower() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.to_lower"]], "to_ndarray() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.to_ndarray"]], "to_parquet() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.to_parquet"]], "to_title() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.to_title"]], "to_upper() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.to_upper"]], "transfer() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.transfer"]], "unregister() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.unregister"]], "unregister_strings_by_name() (arkouda.strings.strings static method)": [[31, "arkouda.strings.Strings.unregister_strings_by_name"]], "update_hdf() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.update_hdf"]], "datetime (class in arkouda.timeclass)": [[32, "arkouda.timeclass.Datetime"]], "timedelta (class in arkouda.timeclass)": [[32, "arkouda.timeclass.Timedelta"]], "abs() (arkouda.timeclass.timedelta method)": [[32, "arkouda.timeclass.Timedelta.abs"]], "arkouda.timeclass": [[32, "module-arkouda.timeclass"]], "components (arkouda.timeclass.timedelta property)": [[32, "arkouda.timeclass.Timedelta.components"]], "date (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.date"]], "date_range() (in module arkouda.timeclass)": [[32, "arkouda.timeclass.date_range"]], "day (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.day"]], "day_of_week (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.day_of_week"]], "day_of_year (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.day_of_year"]], "dayofweek (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.dayofweek"]], "dayofyear (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.dayofyear"]], "days (arkouda.timeclass.timedelta property)": [[32, "arkouda.timeclass.Timedelta.days"]], "hour (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.hour"]], "is_leap_year (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.is_leap_year"]], "is_registered() (arkouda.timeclass.datetime method)": [[32, "arkouda.timeclass.Datetime.is_registered"]], "is_registered() (arkouda.timeclass.timedelta method)": [[32, "arkouda.timeclass.Timedelta.is_registered"]], "isocalendar() (arkouda.timeclass.datetime method)": [[32, "arkouda.timeclass.Datetime.isocalendar"]], "microsecond (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.microsecond"]], "microseconds (arkouda.timeclass.timedelta property)": [[32, "arkouda.timeclass.Timedelta.microseconds"]], "millisecond (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.millisecond"]], "minute (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.minute"]], "month (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.month"]], "nanosecond (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.nanosecond"]], "nanoseconds (arkouda.timeclass.timedelta property)": [[32, "arkouda.timeclass.Timedelta.nanoseconds"]], "register() (arkouda.timeclass.datetime method)": [[32, "arkouda.timeclass.Datetime.register"]], "register() (arkouda.timeclass.timedelta method)": [[32, "arkouda.timeclass.Timedelta.register"]], "second (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.second"]], "seconds (arkouda.timeclass.timedelta property)": [[32, "arkouda.timeclass.Timedelta.seconds"]], "special_objtype (arkouda.timeclass.datetime attribute)": [[32, "arkouda.timeclass.Datetime.special_objType"]], "special_objtype (arkouda.timeclass.timedelta attribute)": [[32, "arkouda.timeclass.Timedelta.special_objType"]], "std() (arkouda.timeclass.timedelta method)": [[32, "arkouda.timeclass.Timedelta.std"]], "sum() (arkouda.timeclass.datetime method)": [[32, "arkouda.timeclass.Datetime.sum"]], "sum() (arkouda.timeclass.timedelta method)": [[32, "arkouda.timeclass.Timedelta.sum"]], "supported_opeq (arkouda.timeclass.datetime attribute)": [[32, "arkouda.timeclass.Datetime.supported_opeq"]], "supported_opeq (arkouda.timeclass.timedelta attribute)": [[32, "arkouda.timeclass.Timedelta.supported_opeq"]], "supported_with_datetime (arkouda.timeclass.datetime attribute)": [[32, "arkouda.timeclass.Datetime.supported_with_datetime"]], "supported_with_datetime (arkouda.timeclass.timedelta attribute)": [[32, "arkouda.timeclass.Timedelta.supported_with_datetime"]], "supported_with_pdarray (arkouda.timeclass.datetime attribute)": [[32, "arkouda.timeclass.Datetime.supported_with_pdarray"]], "supported_with_pdarray (arkouda.timeclass.timedelta attribute)": [[32, "arkouda.timeclass.Timedelta.supported_with_pdarray"]], "supported_with_r_datetime (arkouda.timeclass.datetime attribute)": [[32, "arkouda.timeclass.Datetime.supported_with_r_datetime"]], "supported_with_r_datetime (arkouda.timeclass.timedelta attribute)": [[32, "arkouda.timeclass.Timedelta.supported_with_r_datetime"]], "supported_with_r_pdarray (arkouda.timeclass.datetime attribute)": [[32, "arkouda.timeclass.Datetime.supported_with_r_pdarray"]], "supported_with_r_pdarray (arkouda.timeclass.timedelta attribute)": [[32, "arkouda.timeclass.Timedelta.supported_with_r_pdarray"]], "supported_with_r_timedelta (arkouda.timeclass.datetime attribute)": [[32, "arkouda.timeclass.Datetime.supported_with_r_timedelta"]], "supported_with_r_timedelta (arkouda.timeclass.timedelta attribute)": [[32, "arkouda.timeclass.Timedelta.supported_with_r_timedelta"]], "supported_with_timedelta (arkouda.timeclass.datetime attribute)": [[32, "arkouda.timeclass.Datetime.supported_with_timedelta"]], "supported_with_timedelta (arkouda.timeclass.timedelta attribute)": [[32, "arkouda.timeclass.Timedelta.supported_with_timedelta"]], "timedelta_range() (in module arkouda.timeclass)": [[32, "arkouda.timeclass.timedelta_range"]], "to_pandas() (arkouda.timeclass.datetime method)": [[32, "arkouda.timeclass.Datetime.to_pandas"]], "to_pandas() (arkouda.timeclass.timedelta method)": [[32, "arkouda.timeclass.Timedelta.to_pandas"]], "total_seconds() (arkouda.timeclass.timedelta method)": [[32, "arkouda.timeclass.Timedelta.total_seconds"]], "unregister() (arkouda.timeclass.datetime method)": [[32, "arkouda.timeclass.Datetime.unregister"]], "unregister() (arkouda.timeclass.timedelta method)": [[32, "arkouda.timeclass.Timedelta.unregister"]], "week (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.week"]], "weekday (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.weekday"]], "weekofyear (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.weekofyear"]], "year (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.year"]], "arkouda.util": [[33, "module-arkouda.util"]], "attach() (in module arkouda.util)": [[33, "arkouda.util.attach"]], "attach_all() (in module arkouda.util)": [[33, "arkouda.util.attach_all"]], "concatenate() (in module arkouda.util)": [[33, "arkouda.util.concatenate"]], "convert_if_categorical() (in module arkouda.util)": [[33, "arkouda.util.convert_if_categorical"]], "enrich_inplace() (in module arkouda.util)": [[33, "arkouda.util.enrich_inplace"]], "expand() (in module arkouda.util)": [[33, "arkouda.util.expand"]], "generic_concat() (in module arkouda.util)": [[33, "arkouda.util.generic_concat"]], "get_callback() (in module arkouda.util)": [[33, "arkouda.util.get_callback"]], "identity() (in module arkouda.util)": [[33, "arkouda.util.identity"]], "invert_permutation() (in module arkouda.util)": [[33, "arkouda.util.invert_permutation"]], "is_registered() (in module arkouda.util)": [[33, "arkouda.util.is_registered"]], "most_common() (in module arkouda.util)": [[33, "arkouda.util.most_common"]], "register() (in module arkouda.util)": [[33, "arkouda.util.register"]], "register_all() (in module arkouda.util)": [[33, "arkouda.util.register_all"]], "report_mem() (in module arkouda.util)": [[33, "arkouda.util.report_mem"]], "unregister() (in module arkouda.util)": [[33, "arkouda.util.unregister"]], "unregister_all() (in module arkouda.util)": [[33, "arkouda.util.unregister_all"]], "to_ndarray() (in module arkouda.strings)": [[61, "arkouda.Strings.to_ndarray"], [77, "arkouda.Strings.to_ndarray"]], "to_ndarray() (in module arkouda.pdarray)": [[61, "arkouda.pdarray.to_ndarray"], [72, "arkouda.pdarray.to_ndarray"]], "argsort() (in module arkouda.index)": [[62, "arkouda.Index.argsort"]], "argsort() (in module arkouda.multiindex)": [[62, "arkouda.MultiIndex.argsort"]], "concat() (in module arkouda.index)": [[62, "arkouda.Index.concat"]], "concat() (in module arkouda.multiindex)": [[62, "arkouda.MultiIndex.concat"]], "lookup() (in module arkouda.index)": [[62, "arkouda.Index.lookup"]], "lookup() (in module arkouda.multiindex)": [[62, "arkouda.MultiIndex.lookup"]], "set_dtype() (in module arkouda.index)": [[62, "arkouda.Index.set_dtype"]], "set_dtype() (in module arkouda.multiindex)": [[62, "arkouda.MultiIndex.set_dtype"]], "argsort() (in module arkouda)": [[63, "arkouda.argsort"]], "coargsort() (in module arkouda)": [[63, "arkouda.coargsort"]], "to_ndarray() (in module arkouda.arrayview)": [[65, "arkouda.ArrayView.to_ndarray"]], "to_ndarray() (in module arkouda.categorical)": [[66, "arkouda.Categorical.to_ndarray"]], "apply_permutation() (in module arkouda.dataframe)": [[68, "arkouda.DataFrame.apply_permutation"]], "argsort() (in module arkouda.dataframe)": [[68, "arkouda.DataFrame.argsort"]], "coargsort() (in module arkouda.dataframe)": [[68, "arkouda.DataFrame.coargsort"]], "concat() (in module arkouda.dataframe)": [[68, "arkouda.DataFrame.concat"]], "copy() (in module arkouda.dataframe)": [[68, "arkouda.DataFrame.copy"]], "drop() (in module arkouda.dataframe)": [[68, "arkouda.DataFrame.drop"]], "drop_duplicates() (in module arkouda.dataframe)": [[68, "arkouda.DataFrame.drop_duplicates"]], "groupby() (in module arkouda.dataframe)": [[68, "arkouda.DataFrame.groupby"]], "head() (in module arkouda.dataframe)": [[68, "arkouda.DataFrame.head"]], "rename() (in module arkouda.dataframe)": [[68, "arkouda.DataFrame.rename"]], "reset_index() (in module arkouda.dataframe)": [[68, "arkouda.DataFrame.reset_index"]], "sort_values() (in module arkouda.dataframe)": [[68, "arkouda.DataFrame.sort_values"]], "tail() (in module arkouda.dataframe)": [[68, "arkouda.DataFrame.tail"]], "to_pandas() (in module arkouda.dataframe)": [[68, "arkouda.DataFrame.to_pandas"]], "append() (in module arkouda.segarray)": [[73, "arkouda.SegArray.append"]], "append_single() (in module arkouda.segarray)": [[73, "arkouda.SegArray.append_single"]], "get_jth() (in module arkouda.segarray)": [[73, "arkouda.SegArray.get_jth"]], "get_length_n() (in module arkouda.segarray)": [[73, "arkouda.SegArray.get_length_n"]], "get_ngrams() (in module arkouda.segarray)": [[73, "arkouda.SegArray.get_ngrams"]], "get_prefixes() (in module arkouda.segarray)": [[73, "arkouda.SegArray.get_prefixes"]], "get_suffixes() (in module arkouda.segarray)": [[73, "arkouda.SegArray.get_suffixes"]], "intersect() (in module arkouda.segarray)": [[73, "arkouda.SegArray.intersect"]], "prepend_single() (in module arkouda.segarray)": [[73, "arkouda.SegArray.prepend_single"]], "remove_repeats() (in module arkouda.segarray)": [[73, "arkouda.SegArray.remove_repeats"]], "set_jth() (in module arkouda.segarray)": [[73, "arkouda.SegArray.set_jth"]], "setdiff() (in module arkouda.segarray)": [[73, "arkouda.SegArray.setdiff"]], "setxor() (in module arkouda.segarray)": [[73, "arkouda.SegArray.setxor"]], "to_ndarray() (in module arkouda.segarray)": [[73, "arkouda.SegArray.to_ndarray"]], "union() (in module arkouda.segarray)": [[73, "arkouda.SegArray.union"]], "head() (in module arkouda.series)": [[74, "arkouda.Series.head"]], "locate() (in module arkouda.series)": [[74, "arkouda.Series.locate"], [74, "id0"]], "pdconcat() (in module arkouda.series)": [[74, "arkouda.Series.pdconcat"]], "sort_index() (in module arkouda.series)": [[74, "arkouda.Series.sort_index"]], "sort_values() (in module arkouda.series)": [[74, "arkouda.Series.sort_values"]], "tail() (in module arkouda.series)": [[74, "arkouda.Series.tail"]], "to_pandas() (in module arkouda.series)": [[74, "arkouda.Series.to_pandas"]], "topn() (in module arkouda.series)": [[74, "arkouda.Series.topn"]], "value_counts() (in module arkouda.series)": [[74, "arkouda.Series.value_counts"]], "connect() (in module arkouda)": [[76, "arkouda.connect"]]}})