Search.setIndex({"docnames": ["CONTRIBUTING_LINK", "ENVIRONMENT", "FILEIO", "autoapi/arkouda/_version/index", "autoapi/arkouda/accessor/index", "autoapi/arkouda/alignment/index", "autoapi/arkouda/array_view/index", "autoapi/arkouda/categorical/index", "autoapi/arkouda/client/index", "autoapi/arkouda/client_dtypes/index", "autoapi/arkouda/dataframe/index", "autoapi/arkouda/decorators/index", "autoapi/arkouda/dtypes/index", "autoapi/arkouda/groupbyclass/index", "autoapi/arkouda/index", "autoapi/arkouda/index/index", "autoapi/arkouda/infoclass/index", "autoapi/arkouda/io/index", "autoapi/arkouda/io_util/index", "autoapi/arkouda/join/index", "autoapi/arkouda/logger/index", "autoapi/arkouda/match/index", "autoapi/arkouda/matcher/index", "autoapi/arkouda/message/index", "autoapi/arkouda/numeric/index", "autoapi/arkouda/pdarrayclass/index", "autoapi/arkouda/pdarraycreation/index", "autoapi/arkouda/pdarraysetops/index", "autoapi/arkouda/plotting/index", "autoapi/arkouda/row/index", "autoapi/arkouda/security/index", "autoapi/arkouda/segarray/index", "autoapi/arkouda/series/index", "autoapi/arkouda/sorting/index", "autoapi/arkouda/strings/index", "autoapi/arkouda/timeclass/index", "autoapi/arkouda/util/index", "autoapi/index", "examples", "index", "quickstart", "server/index", "setup/BUILD", "setup/LINUX_INSTALL", "setup/MAC_INSTALL", "setup/MODULAR", "setup/REQUIREMENTS", "setup/WINDOWS_INSTALL", "setup/install_menu", "setup/testing", "usage", "usage/IO", "usage/Index", "usage/argsort", "usage/arithmetic", "usage/arrayview", "usage/categorical", "usage/creation", "usage/dataframe", "usage/groupby", "usage/histogram", "usage/indexing", "usage/pdarray", "usage/segarray", "usage/series", "usage/setops", "usage/startup", "usage/strings"], "filenames": ["CONTRIBUTING_LINK.md", "ENVIRONMENT.md", "FILEIO.md", "autoapi/arkouda/_version/index.rst", "autoapi/arkouda/accessor/index.rst", "autoapi/arkouda/alignment/index.rst", "autoapi/arkouda/array_view/index.rst", "autoapi/arkouda/categorical/index.rst", "autoapi/arkouda/client/index.rst", "autoapi/arkouda/client_dtypes/index.rst", "autoapi/arkouda/dataframe/index.rst", "autoapi/arkouda/decorators/index.rst", "autoapi/arkouda/dtypes/index.rst", "autoapi/arkouda/groupbyclass/index.rst", "autoapi/arkouda/index.rst", "autoapi/arkouda/index/index.rst", "autoapi/arkouda/infoclass/index.rst", "autoapi/arkouda/io/index.rst", "autoapi/arkouda/io_util/index.rst", "autoapi/arkouda/join/index.rst", "autoapi/arkouda/logger/index.rst", "autoapi/arkouda/match/index.rst", "autoapi/arkouda/matcher/index.rst", "autoapi/arkouda/message/index.rst", "autoapi/arkouda/numeric/index.rst", "autoapi/arkouda/pdarrayclass/index.rst", "autoapi/arkouda/pdarraycreation/index.rst", "autoapi/arkouda/pdarraysetops/index.rst", "autoapi/arkouda/plotting/index.rst", "autoapi/arkouda/row/index.rst", "autoapi/arkouda/security/index.rst", "autoapi/arkouda/segarray/index.rst", "autoapi/arkouda/series/index.rst", "autoapi/arkouda/sorting/index.rst", "autoapi/arkouda/strings/index.rst", "autoapi/arkouda/timeclass/index.rst", "autoapi/arkouda/util/index.rst", "autoapi/index.rst", "examples.rst", "index.rst", "quickstart.rst", "server/index.rst", "setup/BUILD.md", "setup/LINUX_INSTALL.md", "setup/MAC_INSTALL.md", "setup/MODULAR.md", "setup/REQUIREMENTS.md", "setup/WINDOWS_INSTALL.md", "setup/install_menu.rst", "setup/testing.rst", "usage.rst", "usage/IO.rst", "usage/Index.rst", "usage/argsort.rst", "usage/arithmetic.rst", "usage/arrayview.rst", "usage/categorical.rst", "usage/creation.rst", "usage/dataframe.rst", "usage/groupby.rst", "usage/histogram.rst", "usage/indexing.rst", "usage/pdarray.rst", "usage/segarray.rst", "usage/series.rst", "usage/setops.rst", "usage/startup.rst", "usage/strings.rst"], "titles": ["Contributing", "Environment Variables", "File I/O", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda._version</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.accessor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.alignment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_view</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.categorical</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.client</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.client_dtypes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.dataframe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.decorators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.dtypes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.groupbyclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.index</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.infoclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.io</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.io_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.join</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.match</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.message</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.numeric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.pdarrayclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.pdarraycreation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.pdarraysetops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.plotting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.row</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.security</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.segarray</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.series</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.sorting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.strings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.timeclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.util</span></code>", "API Reference", "Examples", "Arkouda Documentation", "Quickstart", "Chapel API Reference", "Building the Server", "Linux", "MacOS", "Modular Server Builds", "Requirements", "Windows (WSL2)", "Installation", "Performance Testing", "Usage", "Data I/O", "Indexs in Arkouda", "Sorting", "Arithmetic and Numeric Operations", "ArrayView in Arkouda", "Categoricals", "Creating Arrays", "DataFrames in Arkouda", "GroupBy", "Summarizing Data", "Indexing and Assignment", "The <code class=\"docutils literal notranslate\"><span class=\"pre\">pdarray</span></code> class", "SegArrays in Arkouda", "Series in Arkouda", "Array Set Operations", "Startup", "Strings in Arkouda"], "terms": {"i": [0, 1, 3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 42, 43, 44, 45, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], "an": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 13, 14, 16, 17, 18, 19, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 36, 38, 42, 47, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], "open": [0, 5, 14, 17, 18, 35, 47, 51], "sourc": [0, 1, 3, 42, 43], "project": [0, 3, 42], "we": [0, 1, 3, 10, 14, 17, 25, 31, 34, 36, 38, 40, 42, 46, 47, 60, 62], "love": 0, "see": [0, 1, 5, 13, 14, 24, 25, 28, 32, 34, 35, 40, 42, 51, 54, 56, 59, 60, 62, 63, 64, 65, 67], "new": [0, 7, 10, 13, 14, 17, 18, 20, 21, 22, 23, 24, 25, 28, 31, 32, 34, 40, 46, 58, 59, 62, 63, 64, 67], "contributor": 0, "welcom": 0, "via": [0, 1, 7, 10, 13, 14, 25, 26, 34, 40, 42, 43, 44, 51, 56, 59, 61, 62, 67], "most": [0, 1, 2, 9, 13, 14, 22, 32, 34, 38, 40, 42, 47, 51, 57, 59, 62, 64, 67], "fall": 0, "under": [0, 4, 6, 7, 10, 13, 14, 17, 25, 26, 31, 34, 35, 51, 55, 56, 59, 62, 67], "broad": 0, "categori": [0, 7, 14, 33, 50, 53, 56], "If": [0, 1, 2, 5, 6, 7, 8, 9, 10, 13, 14, 17, 18, 21, 22, 24, 25, 26, 27, 31, 32, 34, 35, 36, 40, 42, 43, 44, 45, 47, 48, 51, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67], "your": [0, 1, 2, 10, 14, 40, 42, 44, 45, 46, 47, 48, 58, 66, 67], "doesn": 0, "t": [0, 3, 7, 9, 14, 25, 34, 35, 47, 49, 67], "fit": [0, 51], "either": [0, 7, 10, 13, 14, 16, 17, 24, 25, 26, 27, 31, 32, 45, 47, 51, 63, 64, 65], "pleas": [0, 2, 7, 10, 13, 14, 17, 25, 34, 35, 38, 42, 44, 46, 56, 58, 59], "add": [0, 1, 2, 6, 10, 14, 17, 31, 32, 42, 43, 44, 45, 47, 58], "anywai": [0, 3, 57], "provid": [0, 10, 13, 14, 17, 23, 25, 31, 34, 38, 40, 42, 43, 44, 46, 51, 54, 58, 59, 63], "much": [0, 5, 6, 7, 14, 25, 34, 35, 38, 51, 55, 56, 62, 67], "detail": [0, 2, 7, 14, 25, 31, 42, 43, 44, 46, 60, 66, 67], "possibl": [0, 10, 14, 17, 24, 31, 34, 35, 38, 42, 47, 51, 63, 67], "It": [0, 9, 10, 14, 30, 36, 38, 42, 43, 44, 47, 58, 59, 63], "alwai": [0, 3, 7, 13, 14, 17, 25, 35, 42, 51, 54, 56, 58, 59, 60, 62, 67], "good": 0, "idea": [0, 51], "current": [0, 2, 3, 6, 7, 8, 10, 14, 15, 17, 24, 25, 26, 30, 31, 34, 40, 42, 44, 48, 51, 52, 54, 56, 57, 58, 60, 62, 63, 66, 67], "list": [0, 2, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 23, 25, 26, 27, 31, 32, 34, 35, 38, 40, 42, 44, 45, 48, 51, 52, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "make": [0, 1, 7, 9, 10, 14, 24, 35, 42, 43, 44, 45, 47, 56, 58], "sure": [0, 44, 47], "alreadi": [0, 1, 3, 7, 10, 13, 14, 17, 56, 59, 65], "present": [0, 5, 7, 9, 10, 14, 17, 24, 27, 31, 38, 51, 60, 65], "us": [0, 1, 2, 5, 7, 8, 9, 10, 13, 14, 17, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 36, 40, 43, 44, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], "github": [0, 42, 43, 48], "markdown": 0, "especi": [0, 7, 10, 14, 56], "block": [0, 7, 14, 27, 34, 38, 57], "veri": [0, 10, 14, 38, 57, 58], "appreci": 0, "when": [0, 1, 2, 5, 7, 9, 10, 13, 14, 17, 24, 25, 27, 31, 34, 38, 42, 44, 45, 46, 47, 51, 54, 56, 58, 59, 62, 63, 65], "includ": [0, 1, 3, 5, 7, 10, 14, 17, 24, 35, 40, 42, 43, 44, 45, 51, 54, 62, 63], "follow": [0, 1, 2, 5, 8, 14, 24, 40, 42, 43, 44, 45, 46, 47, 48, 54, 56, 59, 62, 63, 65, 66, 67], "inform": [0, 1, 2, 3, 7, 8, 13, 14, 16, 25, 34, 38, 42, 44, 56, 63, 65, 67], "summari": [0, 10, 14], "problem": [0, 49], "what": [0, 12, 14, 31, 43, 45, 66], "behavior": [0, 10, 14, 25, 26, 54, 55, 57, 58, 67], "did": [0, 8], "you": [0, 1, 3, 7, 10, 13, 14, 17, 25, 34, 38, 40, 42, 43, 44, 45, 46, 47, 48, 51, 58, 59, 61], "observ": [0, 14, 25, 54], "encount": [0, 17, 51], "expect": [0, 2, 6, 13, 14, 25, 34, 35, 51, 55, 59, 62], "thi": [0, 1, 2, 3, 6, 7, 8, 9, 10, 13, 14, 15, 17, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 44, 45, 47, 48, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67], "known": [0, 14, 24, 36], "work": [0, 7, 10, 14, 17, 25, 27, 29, 34, 38, 42, 44, 45, 51, 56, 58, 61, 65, 67], "around": [0, 9, 14], "step": [0, 13, 42, 43, 45, 48, 65, 66], "reproduc": 0, "simplifi": 0, "program": [0, 7, 10, 13, 14, 25, 34, 40, 59, 66], "demonstr": 0, "configur": [0, 1, 2, 3, 14, 31, 38, 44, 47, 52, 58, 64], "": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 24, 25, 30, 31, 32, 34, 35, 36, 38, 40, 42, 47, 48, 49, 51, 54, 55, 56, 58, 59, 60, 62, 63, 64, 66, 67], "output": [0, 1, 7, 9, 13, 14, 17, 23, 24, 25, 31, 34, 35, 38, 51, 54, 60, 62, 65, 66], "ak": [0, 1, 2, 5, 6, 7, 9, 10, 13, 14, 15, 16, 17, 21, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 38, 40, 42, 45, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67], "get_config": [0, 3, 8], "like": [0, 3, 4, 5, 9, 10, 13, 14, 25, 35, 38, 40, 45, 51, 52, 58, 59, 61, 64, 66, 67], "arkoudavers": 0, "version": [0, 2, 3, 7, 10, 14, 29, 32, 36, 40, 42, 43, 44, 46, 47], "server": [0, 1, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 21, 23, 25, 26, 30, 31, 32, 34, 35, 36, 44, 47, 49, 50, 54, 55, 56, 57, 58, 59, 60, 62, 63, 67], "wa": [0, 2, 3, 7, 10, 13, 14, 17, 24, 25, 31, 32, 34, 42, 44, 51, 59, 62, 63], "built": [0, 6, 7, 14, 25, 34, 35, 42, 44, 45, 51, 55, 56, 62, 67], "Be": 0, "specif": [0, 10, 14, 17, 43, 45, 50, 51, 58], "exampl": [0, 5, 6, 7, 10, 13, 14, 17, 21, 24, 25, 26, 27, 28, 31, 33, 34, 35, 40, 42, 44, 45, 47, 51, 53, 54, 55, 57, 58, 59, 60, 62, 63, 65, 66, 67], "appropri": [0, 3, 40, 42, 44, 46, 51], "base": [0, 1, 3, 4, 5, 6, 7, 9, 10, 14, 15, 17, 23, 24, 25, 29, 33, 35, 36, 42, 44, 48, 50, 51, 52, 53, 54, 55, 56, 58, 62, 64, 67], "anoth": [0, 10, 13, 14, 17, 24, 34, 40, 44, 47, 51, 58, 59, 61, 62, 63, 67], "librari": [0, 1, 47, 67], "e": [0, 1, 4, 5, 9, 13, 14, 24, 25, 26, 31, 34, 35, 43, 44, 46, 51, 54, 56, 57, 59, 63, 66, 67], "numpi": [0, 6, 7, 9, 10, 12, 13, 14, 19, 24, 25, 26, 31, 34, 35, 38, 40, 46, 49, 51, 54, 55, 56, 57, 58, 60, 61, 62, 63, 65, 67], "panda": [0, 10, 13, 14, 15, 17, 26, 32, 35, 46, 51, 52, 56, 58, 59], "scipi": 0, "link": [0, 1, 2, 14, 35, 42], "support": [0, 3, 7, 9, 10, 12, 13, 14, 15, 17, 18, 24, 25, 26, 27, 30, 31, 34, 35, 36, 38, 40, 42, 43, 44, 50, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "document": [0, 1, 37, 38, 44], "refer": [0, 13, 38, 42, 44, 59], "don": [0, 3, 7, 9, 14, 25, 34, 35, 47], "have": [0, 1, 3, 5, 7, 10, 13, 14, 17, 24, 25, 26, 27, 28, 31, 32, 34, 35, 38, 40, 42, 43, 44, 45, 46, 51, 54, 56, 57, 58, 59, 62, 63, 64], "anyth": [0, 14, 25], "mind": [0, 38, 47], "check": [0, 1, 3, 5, 7, 10, 13, 14, 31, 32, 34, 40, 49, 56, 65, 66, 67], "out": [0, 3, 8, 10, 14, 24, 31, 42, 45, 60, 61, 63], "our": [0, 2, 3, 14, 25, 38, 42, 47, 48, 51], "outstand": 0, "filter": [0, 10, 14, 51], "label": [0, 7, 10, 13, 14, 15, 28, 32, 56, 58, 59, 64], "first": [0, 5, 10, 13, 14, 17, 18, 24, 25, 26, 32, 34, 38, 40, 42, 43, 44, 45, 50, 51, 54, 57, 58, 59, 60, 64, 67], "identifi": [0, 3, 5, 7, 14, 25, 36, 62], "befor": [0, 14, 35, 42, 51], "start": [0, 5, 7, 13, 14, 21, 26, 31, 33, 34, 35, 50, 53, 56, 57, 59, 61, 63, 67], "onc": [0, 10, 14, 17, 25, 31, 34, 38, 42, 44, 47], "find": [0, 5, 7, 10, 13, 14, 22, 25, 27, 30, 32, 34, 36, 54, 59, 60, 65, 67], "creat": [0, 3, 7, 9, 10, 13, 14, 17, 18, 22, 23, 25, 26, 31, 32, 34, 35, 37, 43, 44, 45, 46, 47, 50, 51, 55, 56, 58, 59, 60, 62], "intend": [0, 9, 14, 24, 52, 58, 64], "leav": [0, 14, 24, 60], "comment": [0, 45], "indic": [0, 2, 5, 6, 7, 8, 9, 10, 13, 14, 15, 17, 19, 21, 24, 25, 31, 32, 33, 34, 36, 38, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 67], "mention": 0, "bear": 0, "r": [0, 10, 14, 38, 49], "u": [0, 9, 14, 26, 35, 51], "dev": [0, 43, 44, 46], "awar": 0, "assign": [0, 7, 13, 23, 40, 50, 56, 59, 63, 67], "avoid": [0, 2], "anyon": 0, "duplic": [0, 10, 14, 58], "need": [0, 2, 3, 10, 14, 17, 31, 32, 34, 42, 43, 44, 45, 47, 51, 58, 64], "assist": [0, 45], "want": [0, 1, 10, 14, 46, 58], "discuss": 0, "design": [0, 51], "someon": 0, "tag": [0, 3], "reach": 0, "git": [0, 3, 43], "fork": [0, 42, 48], "workflow": [0, 17, 45, 51], "recommend": [0, 14, 24, 43, 46, 47, 48, 58, 63], "simpl": [0, 38, 45, 60], "branch": [0, 42], "own": [0, 1, 14, 35, 63, 67], "standard": [0, 7, 13, 14, 25, 26, 35, 54, 59, 60], "laid": 0, "pep8": 0, "continu": 0, "integr": [0, 13, 14, 25, 26, 51, 57, 59], "ha": [0, 7, 10, 13, 14, 17, 24, 25, 26, 27, 31, 32, 34, 35, 45, 47, 51, 54, 56, 57, 58, 59, 61, 62, 63, 64], "linter": 0, "flake8": [0, 46], "verifi": [0, 1, 10, 14, 51, 58], "all": [0, 2, 5, 7, 8, 10, 13, 14, 15, 16, 17, 20, 21, 22, 24, 25, 26, 27, 31, 32, 34, 35, 36, 40, 43, 44, 45, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67], "meet": 0, "requir": [0, 2, 5, 7, 8, 13, 14, 17, 23, 26, 40, 43, 44, 45, 51, 57, 58, 59], "isort": 0, "black": 0, "typic": [0, 9, 14, 56], "order": [0, 6, 7, 9, 10, 13, 14, 24, 25, 26, 27, 31, 32, 33, 34, 36, 40, 42, 50, 53, 55, 56, 57, 58, 59, 60, 61, 63, 64, 67], "ensur": [0, 2, 10, 14, 24, 42, 44, 58, 62], "consist": [0, 10, 14, 24, 38, 54, 58], "util": [0, 1, 10, 14, 17, 37, 42, 43, 44], "line": [0, 14, 18, 40, 42, 44, 45, 55, 66], "length": [0, 2, 5, 7, 13, 14, 17, 21, 26, 27, 30, 31, 32, 34, 49, 54, 57, 59, 63, 64, 65, 67], "105": 0, "paramet": [0, 2, 3, 5, 6, 7, 8, 9, 10, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 44, 51, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], "example_featur": 0, "py": [0, 1, 3, 42, 45, 46, 49], "fix": [0, 14, 24, 35, 47, 67], "reformat": [0, 51], "done": [0, 10, 14, 31, 42, 45, 51, 58], "1": [0, 1, 2, 3, 5, 6, 7, 10, 13, 14, 17, 21, 23, 24, 25, 26, 27, 31, 32, 33, 34, 35, 37, 38, 40, 42, 43, 44, 45, 46, 47, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "file": [0, 1, 3, 6, 7, 10, 14, 17, 18, 30, 31, 34, 42, 43, 44, 46, 47, 50, 67], "For": [0, 4, 5, 13, 14, 17, 21, 26, 33, 34, 35, 38, 42, 43, 44, 45, 48, 51, 53, 57, 59, 60, 61, 62, 63, 65, 67], "user": [0, 1, 6, 7, 9, 10, 13, 14, 17, 23, 24, 25, 26, 28, 30, 31, 32, 34, 35, 36, 38, 40, 42, 43, 44, 45, 46, 47, 48, 51, 55, 56, 59, 62, 67], "pycharm": 0, "nice": [0, 43, 44], "interoper": 0, "tool": [0, 2, 43, 44], "style": [0, 3, 7, 10, 13, 14, 25, 34, 58, 59, 62], "doc": [0, 42, 43, 55], "string": [0, 1, 3, 5, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 45, 50, 51, 52, 53, 56, 57, 58, 59, 60, 62, 63, 64, 65], "look": [0, 1, 3, 38, 45, 51, 66], "similar": [0, 14, 17, 34, 35, 38, 51, 62, 63, 67], "surround": 0, "function": [0, 1, 2, 7, 23, 32, 34, 38, 40, 45, 50, 51, 52, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67], "space": [0, 1, 5, 14, 23, 24, 26, 35, 42, 45, 57, 60, 67], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 17, 18, 20, 21, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 38, 40, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67], "ci": 0, "fail": [0, 10, 14, 17, 24, 51, 58, 62], "tab": [0, 42], "ar": [0, 1, 2, 5, 7, 9, 10, 13, 14, 15, 17, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "lowercamelcas": 0, "variabl": [0, 13, 14, 17, 25, 30, 31, 34, 40, 43, 44, 45, 51, 54, 59, 63, 67], "name": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 13, 14, 15, 16, 17, 25, 26, 31, 32, 34, 35, 36, 38, 42, 44, 45, 46, 50, 51, 52, 56, 57, 58, 59, 64], "procedur": 0, "var": [0, 1, 13, 14, 25, 50, 54, 59, 60], "ax": 0, "0": [0, 2, 3, 5, 6, 7, 8, 10, 13, 14, 17, 19, 21, 22, 24, 25, 26, 27, 31, 32, 33, 34, 35, 38, 40, 42, 43, 44, 46, 47, 49, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], "real": [0, 2, 14, 26], "proc": 0, "printit": 0, "x": [0, 9, 10, 12, 13, 14, 17, 25, 28, 31, 34, 35, 36, 38, 47, 51, 54, 55, 56, 58, 59, 62, 63, 67], "writeln": 0, "uppercamelcas": 0, "class": [0, 26, 50, 51, 52, 55, 56, 58, 59, 63, 64, 67], "foo": [0, 4, 14], "foopar": 0, "re": [0, 3, 7, 8, 10, 13, 14, 43, 59, 66, 67], "confirm": 0, "again": [0, 38, 42, 43], "realli": [0, 14, 34], "behav": [0, 6, 14, 55], "properli": [0, 2], "wiki": 0, "more": [0, 1, 2, 5, 6, 7, 10, 14, 17, 24, 25, 34, 35, 38, 42, 44, 51, 55, 56, 58, 62, 63, 67], "info": [0, 1, 7, 10, 14, 16, 20, 25, 34], "how": [0, 9, 14, 24, 46, 55, 59, 62], "http": [0, 42, 43, 55], "com": [0, 42, 43], "unit": [0, 1, 8, 10, 14, 35], "parallel_start_test": 0, "d": [0, 7, 14, 26, 27, 31, 34, 35, 38, 40, 49, 63, 65, 67], "everi": [0, 1, 10, 14, 58, 67], "should": [0, 1, 2, 7, 10, 12, 13, 14, 24, 25, 26, 31, 32, 34, 36, 38, 40, 42, 46, 51, 58, 59, 62, 66], "least": [0, 9, 10, 14, 31, 33, 34, 53, 63], "one": [0, 1, 2, 3, 4, 5, 7, 10, 12, 13, 14, 17, 18, 24, 25, 26, 27, 31, 34, 38, 40, 44, 45, 46, 47, 51, 54, 56, 57, 58, 59, 63, 65, 67], "associ": [0, 1, 14, 32, 51, 63, 64], "number": [0, 1, 2, 5, 6, 7, 8, 9, 10, 13, 14, 17, 22, 24, 25, 26, 31, 32, 34, 35, 38, 42, 45, 47, 49, 51, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67], "titl": [0, 14, 34], "bodi": 0, "close": [0, 5, 14, 26, 35, 38, 57], "keyword": [0, 3, 7, 14, 31, 32, 57, 64], "doubt": 0, "take": [0, 9, 13, 14, 25, 38, 51, 59], "some": [0, 7, 10, 14, 38, 42, 44, 56, 58, 63, 67], "99999": 0, "pr": 0, "implement": [0, 3, 7, 10, 14, 23, 24, 25, 27, 30, 34, 40, 54, 57, 58, 67], "arg": [0, 3, 5, 14, 23, 26, 31, 35, 45, 57, 59], "super": 0, "cool": 0, "note": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 17, 18, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 38, 42, 44, 45, 47, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 64, 65, 66, 67], "help": [0, 9, 14, 45], "keep": [0, 5, 10, 14, 38, 44, 47, 51, 58], "part": [0, 14, 31, 34, 36, 47, 67], "those": [0, 14, 33, 38, 43, 45, 53, 61], "As": [0, 14, 24, 25, 32, 43, 44, 51, 54, 62, 64, 67], "person": 0, "who": 0, "left": [0, 5, 9, 14, 24, 25, 33, 34, 35, 53, 60, 67], "feedback": 0, "resolv": [0, 47], "convers": [0, 7, 51, 56, 62, 67], "decid": 0, "author": 0, "address": [0, 8, 9, 14, 66], "try": [0, 2, 3, 12, 14, 17, 36, 47, 51], "feel": 0, "readi": [0, 44], "necessari": [0, 47], "track": 0, "ani": [0, 2, 5, 6, 7, 10, 13, 14, 17, 18, 24, 25, 26, 31, 34, 42, 50, 54, 58, 59, 60, 62, 63, 67], "which": [0, 5, 6, 7, 9, 10, 13, 14, 17, 23, 24, 25, 26, 27, 31, 32, 33, 34, 35, 38, 40, 42, 44, 45, 49, 51, 53, 54, 55, 56, 57, 58, 59, 62, 63, 65, 66, 67], "outsid": [0, 45], "scope": [0, 45], "member": 0, "quit": [0, 40], "bit": [0, 7, 9, 14, 24, 25, 26, 34, 51, 55, 58, 62], "experi": [0, 51], "unsur": 0, "ask": 0, "2": [0, 2, 5, 6, 7, 10, 13, 14, 17, 21, 24, 25, 26, 27, 31, 32, 33, 34, 35, 38, 40, 42, 43, 44, 45, 46, 47, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "concurr": [0, 51], "approv": 0, "from": [0, 2, 3, 5, 6, 7, 8, 9, 10, 13, 14, 17, 18, 21, 23, 24, 25, 26, 28, 31, 34, 35, 38, 40, 42, 45, 47, 49, 50, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67], "limit": [0, 6, 7, 14, 19, 25, 26, 34, 35, 40, 51, 55, 56, 58, 62, 67], "except": [0, 3, 5, 10, 14, 25, 38, 43, 58, 67], "after": [0, 7, 10, 14, 34, 42, 58, 67], "pass": [0, 1, 5, 9, 10, 13, 14, 17, 32, 36, 51, 58, 59, 64], "conflict": 0, "ideal": 0, "rebas": 0, "master": [0, 42], "prefer": [0, 44, 46, 48], "wrote": 0, "best": [0, 5, 14], "practic": [0, 13, 14, 25, 45, 54, 59], "els": [0, 3], "To": [0, 1, 10, 13, 14, 24, 35, 40, 42, 45, 55, 56, 58, 60, 62, 67], "commit": 0, "histori": 0, "allow": [0, 9, 10, 14, 17, 26, 31, 34, 38, 45, 47, 51, 63], "easi": [0, 38, 42], "manipul": 0, "squash": 0, "web": 0, "interfac": 0, "pierce314159": 0, "ethan": 0, "debandi99": 0, "consensu": 0, "instruct": [0, 1, 14, 34, 42, 43, 44, 46, 47, 48, 66], "There": [1, 13, 17, 38, 42, 43, 47, 57, 65], "can": [1, 2, 5, 6, 7, 9, 10, 13, 14, 17, 24, 25, 26, 27, 30, 32, 34, 35, 38, 40, 42, 44, 45, 46, 47, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "role": 1, "develop": [1, 2, 43, 44, 45, 48, 51], "highlight": [1, 38], "variou": 1, "avail": [1, 8, 14, 17, 25, 47, 51, 60], "separ": [1, 2, 9, 14, 18, 34, 45, 51, 62, 67], "section": [1, 2, 14, 24, 38, 40, 42, 46, 54], "These": [1, 2, 38, 40, 43, 44, 51], "env": [1, 3, 14, 42, 43, 44, 46], "arkouda_serv": [1, 8, 12, 14, 40, 42, 45, 66], "arkouda_server_connection_info": 1, "set": [1, 2, 5, 6, 7, 9, 10, 13, 14, 17, 20, 23, 24, 25, 26, 27, 30, 31, 32, 34, 35, 42, 43, 44, 45, 47, 50, 51, 55, 56, 57, 58, 59, 60, 61, 62, 67], "write": [1, 6, 7, 10, 14, 17, 18, 51, 55], "port": [1, 8, 40, 49, 66], "startup": [1, 40, 50], "tune": 1, "buffer": 1, "messag": [1, 7, 8, 14, 25, 26, 34, 37, 40, 51], "aggreg": [1, 13, 14, 31, 36, 38, 50, 51, 59], "dure": [1, 17, 38, 45, 46, 51], "sort": [1, 3, 5, 7, 10, 13, 14, 24, 25, 27, 31, 32, 34, 37, 49, 50, 54, 56, 57, 59, 60, 65, 67], "non": [1, 5, 7, 13, 14, 22, 23, 25, 26, 27, 33, 34, 40, 51, 53, 54, 57, 59, 60, 61, 67], "crazi": 1, "system": [1, 2, 6, 7, 14, 25, 30, 34, 35, 44, 46, 47, 48, 51, 54, 55, 56, 62, 66, 67], "thei": [1, 2, 7, 8, 10, 13, 14, 17, 25, 31, 32, 34, 40, 51, 55, 56, 59, 64], "per": [1, 2, 6, 7, 8, 10, 13, 14, 17, 25, 31, 34, 45, 51, 54, 59], "task": [1, 8], "so": [1, 2, 3, 7, 10, 13, 14, 17, 25, 32, 34, 35, 43, 45, 46, 47, 51, 54, 55, 58, 59, 64, 65], "content": [1, 51], "between": [1, 14, 19, 25, 26, 31, 34, 35, 38, 45, 50, 57, 60, 62, 67], "compet": 1, "arkouda_server_aggregation_dst_buff_s": 1, "commun": [1, 14, 33, 53, 57], "arkouda_server_aggregation_src_buff_s": 1, "arkouda_server_aggregation_yield_frequ": 1, "frequenc": [1, 14, 35], "yield": [1, 10, 14, 58, 61], "default": [1, 2, 3, 5, 6, 7, 8, 9, 10, 13, 14, 17, 21, 24, 25, 26, 27, 30, 31, 32, 34, 35, 40, 44, 45, 49, 51, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67], "1024": [1, 14, 25], "build": [1, 3, 13, 23, 40, 43, 47, 59, 66], "chpl_flag": 1, "A": [1, 4, 6, 7, 8, 9, 10, 13, 14, 17, 23, 24, 25, 26, 28, 30, 31, 32, 34, 35, 38, 39, 40, 44, 49, 51, 54, 55, 56, 58, 60, 61, 62, 63, 64, 65, 67], "automat": [1, 7, 14, 17, 32, 40, 51, 56, 64], "chpl": [1, 42, 43, 44, 45], "addit": [1, 2, 13, 14, 24, 28, 43, 62, 65, 66], "ones": [1, 14, 24, 26, 49, 50, 54, 57], "here": [1, 10, 14, 36, 38, 40, 42, 44, 45, 46, 47, 48, 66], "smemtrack": 1, "true": [1, 5, 7, 8, 9, 10, 13, 14, 15, 17, 19, 21, 22, 24, 25, 26, 27, 28, 31, 32, 34, 36, 38, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "lhdf5": 1, "lhdf5_hl": 1, "lzmq": 1, "liconv": 1, "lidn2": 1, "fast": [1, 14, 34], "unless": [1, 14, 17, 24, 34, 40, 67], "arkouda_develop": 1, "o1": 1, "mutual": 1, "exclus": [1, 14, 26, 27, 38, 42, 57, 61, 65], "arkouda_quick_compil": 1, "loop": 1, "invari": 1, "code": [1, 7, 14, 15, 33, 38, 40, 45, 50, 53, 56], "motion": 1, "ccflag": 1, "o0": 1, "arkouda_print_passes_fil": 1, "print": [1, 7, 8, 10, 14, 16, 25, 29, 34, 40, 47, 66], "time": [1, 2, 7, 8, 13, 14, 17, 19, 24, 25, 31, 34, 35, 40, 43, 45, 49, 51, 56, 59, 60, 63, 65, 67], "specifi": [1, 5, 6, 9, 10, 13, 14, 17, 18, 25, 26, 31, 32, 34, 35, 36, 51, 54, 55, 57, 58, 59, 63], "mainli": 1, "nightli": 1, "infrastructur": 1, "chpl_debug_flag": 1, "regex_max_captur": 1, "integ": [1, 2, 7, 9, 10, 13, 14, 17, 19, 25, 26, 35, 40, 50, 54, 55, 56, 57, 58, 59, 62, 63, 65, 67], "chang": [1, 9, 10, 14, 15, 17, 25, 44, 46, 51, 54, 58], "maximum": [1, 8, 10, 13, 14, 25, 26, 35, 51, 54, 57, 58, 59, 60], "captur": [1, 21, 67], "group": [1, 2, 7, 10, 13, 14, 21, 25, 31, 32, 33, 34, 38, 50, 53, 56, 58, 59, 64, 65, 67], "access": [1, 4, 8, 14, 17, 30, 38, 44, 50, 51, 66], "match": [1, 6, 7, 9, 10, 13, 14, 17, 22, 24, 25, 26, 31, 32, 34, 35, 37, 50, 51, 54, 55, 57, 59, 62, 64, 66], "20": [1, 5, 14, 24, 38, 46, 47, 54, 55, 61], "folk": 1, "instal": [1, 14, 25, 40, 47, 66], "anaconda": [1, 40, 42, 47, 48], "through": [1, 44], "altern": [1, 42, 44, 47], "setup": [1, 42, 47], "them": [1, 14, 17, 27, 34, 40, 43, 51, 65], "explicitli": [1, 10, 14, 27, 40, 45, 65], "arkouda_zmq_path": 1, "zmq": [1, 42], "arkouda_hdf5_path": 1, "hdf5": [1, 6, 7, 10, 14, 17, 31, 34, 42, 46, 51, 67], "arkouda_arrow_path": 1, "arrow": [1, 46], "arkouda_iconv_path": 1, "iconv": [1, 42, 46], "arkouda_idn2_path": 1, "idn2": [1, 42, 46], "ld_library_path": 1, "lib": [1, 42, 47, 65], "arkouda_skip_check_dep": 1, "skip": [1, 13, 14, 17, 34, 42, 51, 59, 65, 67], "autom": 1, "do": [1, 3, 5, 8, 10, 13, 14, 17, 24, 32, 43, 45, 46, 48, 54, 55, 58, 59, 64], "repeat": [1, 7, 14, 31, 56, 63], "sinc": [1, 14, 31, 56, 58, 62, 67], "dep": [1, 42, 43, 44], "been": [1, 3, 7, 8, 10, 14, 17, 25, 27, 31, 34, 42, 45, 51, 54, 56, 57], "up": [1, 3, 5, 7, 8, 13, 14, 17, 24, 25, 27, 34, 35, 42, 47, 51, 54, 55, 56, 57, 65, 67], "arkouda_server_user_modul": [1, 45], "absolut": [1, 14, 24, 35, 45, 54], "must": [1, 5, 7, 8, 9, 10, 13, 14, 17, 24, 25, 26, 27, 28, 31, 32, 34, 35, 38, 40, 42, 43, 45, 51, 54, 57, 59, 61, 62, 63, 64, 66, 67], "also": [1, 3, 5, 7, 9, 13, 14, 19, 24, 26, 27, 31, 34, 38, 40, 42, 47, 51, 57, 61, 62, 63, 65, 67], "servermodul": [1, 45], "cfg": [1, 45], "regist": [1, 7, 10, 13, 14, 15, 16, 25, 31, 32, 34, 36, 50, 59], "readm": 1, "verbos": [1, 3, 14, 16, 20], "arkouda_verbos": 1, "arkouda_server_host": 1, "hostnam": [1, 8, 40, 49, 66], "arkouda_server_port": 1, "arkouda_client_timeout": 1, "control": [1, 9, 14, 24, 62], "timeout": [1, 8, 66], "arkouda_full_stack_test": 1, "option": [1, 5, 7, 8, 9, 10, 13, 14, 15, 17, 21, 24, 26, 27, 31, 32, 34, 35, 42, 43, 46, 49, 51, 52, 57, 58, 59, 60, 64, 65, 66, 67], "test_data_url": 1, "readalltest": 1, "read_all_test": 1, "arkouda_numlocal": 1, "local": [1, 2, 3, 6, 7, 8, 10, 14, 17, 31, 32, 34, 35, 40, 42, 43, 51, 57, 64, 66], "where": [1, 7, 8, 10, 13, 14, 17, 18, 19, 24, 25, 26, 27, 30, 31, 34, 36, 50, 51, 57, 59, 60, 61, 62, 63, 65, 66, 67], "found": [1, 5, 10, 14, 38, 44, 45, 47], "arkouda_hom": 1, "locat": [1, 13, 14, 25, 30, 32, 34, 42, 47, 59, 64, 67], "execut": [1, 7, 9, 14, 17, 25, 34, 35, 42, 43, 45, 56, 66], "warn": [1, 14, 17, 23, 34, 51, 67], "subject": [1, 14, 35], "futur": [1, 9, 14, 17, 31, 34, 51, 60], "intern": [1, 7, 13, 14, 25, 34], "arkouda_client_directori": [1, 30], "parent": [1, 3, 22], "token": [1, 8, 23, 30, 40, 66], "txt": 1, "arkouda_tunnel_serv": 1, "ssh": 1, "tunnel": 1, "url": [1, 8, 40, 42, 66], "arkouda_key_fil": 1, "keyfil": 1, "arkouda_password": 1, "password": [1, 47], "arkouda_log_level": [1, 14], "side": [1, 6, 7, 8, 10, 13, 14, 15, 16, 21, 25, 26, 31, 32, 34, 35, 40, 45, 47, 51, 54, 55, 59, 60, 61, 62, 63, 66, 67], "log": [1, 13, 14, 20, 24, 26, 28, 34, 50, 54, 59], "level": [1, 3, 14, 20, 27, 31, 32, 42, 45, 48, 51, 64, 65], "arkouda_client_mod": 1, "mode": [1, 2, 6, 7, 13, 14, 15, 17, 25, 31, 34, 50, 57, 59], "ui": 1, "api": [1, 7, 13, 14, 25, 34, 39, 59, 62], "displai": [1, 9, 14, 28, 36, 42, 47], "splash": 1, "being": [2, 6, 10, 14, 17, 32, 36, 38, 44, 45, 51, 55, 58, 61, 64], "conjunct": [2, 7, 51, 56, 67], "updat": [2, 7, 10, 13, 14, 17, 25, 28, 34, 43, 47, 51, 59], "omit": [2, 14, 34, 35], "until": [2, 7, 10, 13, 14, 25, 34, 59], "each": [2, 5, 6, 7, 10, 13, 14, 16, 17, 18, 20, 21, 24, 25, 27, 31, 32, 34, 35, 36, 38, 42, 45, 51, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67], "complet": [2, 8, 42, 44, 66, 67], "confus": 2, "below": [2, 14, 28, 38, 42, 46, 51, 58], "wai": [2, 8, 40, 45, 54, 56, 57, 58, 62, 67], "store": [2, 6, 13, 14, 17, 26, 30, 34, 40, 47, 51, 55, 56, 57, 59, 63, 67], "mai": [2, 6, 7, 10, 14, 17, 25, 26, 27, 34, 35, 38, 42, 44, 46, 47, 51, 55, 56, 57, 58, 62, 67], "vari": [2, 14, 25, 38, 42, 44, 46, 48, 63], "schema": [2, 51], "doe": [2, 6, 8, 10, 13, 14, 17, 18, 25, 26, 28, 32, 34, 35, 38, 40, 51, 55, 57, 58, 59, 62, 64, 66, 67], "import": [2, 7, 9, 10, 14, 17, 24, 28, 30, 40, 42, 45, 50, 58, 60, 66], "export": [2, 9, 14, 17, 24, 42, 43, 44, 47, 50, 60], "depend": [2, 14, 25, 43, 44, 47, 48, 54, 63], "size": [2, 5, 6, 7, 9, 10, 12, 13, 14, 19, 23, 24, 25, 26, 31, 32, 33, 34, 35, 36, 38, 40, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 67], "becaus": [2, 7, 10, 14, 17, 26, 31, 34, 38, 40, 51, 56, 57, 58, 63, 67], "onli": [2, 3, 7, 10, 13, 14, 15, 17, 21, 24, 25, 26, 27, 31, 32, 33, 34, 38, 40, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 67], "run": [2, 6, 7, 8, 14, 24, 25, 31, 34, 35, 38, 40, 42, 43, 44, 46, 47, 49, 51, 55, 56, 62, 63, 66, 67], "client": [2, 6, 7, 10, 14, 25, 26, 34, 35, 37, 42, 43, 44, 45, 46, 47, 50, 55, 56, 58, 62, 63, 67], "now": [2, 7, 10, 13, 14, 24, 25, 31, 34, 36, 40, 42, 44, 59, 60], "save": [2, 6, 7, 10, 13, 14, 17, 31, 34, 51, 56, 65], "differ": [2, 7, 10, 13, 14, 17, 24, 25, 26, 27, 30, 31, 34, 35, 36, 38, 43, 44, 50, 51, 55, 57, 58, 59, 60, 65], "singl": [2, 4, 5, 6, 7, 9, 10, 13, 14, 17, 23, 24, 27, 31, 34, 38, 42, 45, 49, 51, 57, 58, 59, 61, 63, 65], "distribut": [2, 6, 7, 10, 13, 14, 15, 17, 25, 26, 28, 31, 34, 35, 40, 51, 54, 55, 56, 57, 59, 62, 65, 67], "locale0": 2, "contain": [2, 3, 5, 7, 9, 10, 13, 14, 15, 16, 17, 18, 21, 23, 24, 25, 26, 27, 31, 32, 33, 34, 37, 38, 40, 45, 49, 50, 51, 53, 54, 56, 57, 59, 62, 63, 64, 65, 67], "portion": 2, "written": [2, 7, 14, 17, 18, 31, 34, 42, 51, 62], "multipl": [2, 5, 10, 14, 17, 24, 31, 35, 38, 45, 49, 51, 52, 54, 58, 63], "thu": [2, 14, 26, 33, 53, 63], "objtyp": [2, 7, 14, 23, 25, 31, 34], "int": [2, 5, 6, 7, 8, 9, 10, 12, 13, 14, 17, 19, 21, 22, 23, 24, 25, 26, 30, 31, 32, 34, 35, 51, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67], "repres": [2, 7, 9, 10, 13, 14, 17, 31, 32, 34, 35, 56, 59, 67], "correspond": [2, 3, 5, 7, 9, 10, 13, 14, 17, 18, 19, 21, 23, 24, 25, 26, 30, 31, 32, 34, 36, 51, 54, 56, 59, 60, 61, 63, 64, 67], "chapel": [2, 14, 23, 24, 39, 42, 45, 46, 47, 48, 62, 66, 67], "enum": [2, 12, 14, 20, 23, 24], "isbool": 2, "valu": [2, 5, 6, 7, 8, 9, 10, 13, 14, 15, 17, 18, 23, 24, 25, 26, 27, 31, 32, 34, 35, 36, 38, 40, 44, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 66, 67], "boolean": [2, 5, 7, 10, 13, 14, 21, 25, 27, 31, 32, 34, 38, 56, 58, 59, 61, 62, 63, 64, 65, 67], "file_vers": 2, "32": [2, 14, 25, 30, 38], "longer": [2, 10, 14, 26, 46, 58], "arkouda_vers": 2, "c_string": 2, "while": [2, 5, 7, 14, 17, 33, 34, 42, 47, 51, 53], "3": [2, 6, 10, 13, 14, 21, 24, 25, 26, 27, 28, 31, 33, 34, 35, 38, 42, 46, 49, 50, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 65, 67], "main": 2, "datatyp": [2, 14, 26], "within": [2, 7, 9, 10, 13, 14, 23, 25, 26, 31, 34, 35, 57, 58, 59, 63], "storag": 2, "ident": [2, 10, 14, 36, 54, 62], "structur": [2, 7, 10, 14, 31, 38, 51, 58, 59, 62, 63, 67], "equival": [2, 5, 6, 7, 13, 14, 25, 26, 27, 33, 34, 35, 38, 53, 54, 55, 57, 65], "rank": [2, 7, 14, 25, 26, 34, 50, 51, 56, 57, 61], "dimens": [2, 5, 6, 7, 14, 25, 34, 38, 55, 56, 62, 63], "unflatten": 2, "even": [2, 7, 10, 13, 14, 25, 35, 40, 54, 58, 59, 66], "flatten": [2, 14, 31, 34, 50, 63], "arrai": [2, 5, 6, 7, 9, 10, 13, 14, 15, 17, 19, 21, 24, 25, 26, 27, 31, 32, 33, 34, 35, 36, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 64, 67], "shape": [2, 5, 6, 7, 10, 14, 15, 24, 25, 31, 32, 34, 50, 54, 55, 56, 62], "equal": [2, 10, 14, 19, 24, 60, 63], "segment": [2, 7, 13, 14, 17, 31, 34, 36, 50, 51, 56, 59, 63, 65, 67], "individu": [2, 14, 29, 67], "never": [2, 14, 24, 62], "come": [2, 13, 51, 57, 65], "soon": 2, "load": [2, 10, 14, 17, 23, 31, 34, 47, 50], "load_al": [2, 7, 17, 50, 51], "v2": 2, "addition": [2, 45, 52], "definit": 2, "same": [2, 5, 6, 7, 9, 10, 13, 14, 17, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 38, 40, 43, 44, 45, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67], "def": [2, 45], "self": [2, 6, 7, 9, 10, 13, 14, 15, 21, 25, 29, 31, 34, 35, 51, 52, 55, 56, 58, 62, 63, 64, 67], "filepath": [2, 6, 14], "str": [2, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 34, 35, 36, 51, 52, 55, 56, 57, 58, 59, 62, 66, 67], "dset": [2, 6, 14], "truncat": [2, 6, 7, 14, 15, 17, 25, 31, 34], "file_typ": [2, 6, 7, 10, 14, 15, 17, 25, 31, 34], "path": [2, 6, 10, 14, 17, 18, 30, 40, 42, 43, 44, 45, 47, 51], "append": [2, 6, 7, 10, 14, 17, 27, 31, 34, 50, 51, 57, 67], "overwrit": [2, 6, 7, 14, 17, 31, 34, 36, 62], "exist": [2, 6, 7, 8, 10, 14, 17, 18, 26, 31, 34, 57, 58, 66], "efault": 2, "date": [2, 6, 14, 35], "get_keyword": 3, "get": [3, 8, 10, 12, 14, 17, 24, 31, 40, 43, 47, 51, 55, 62, 63], "versioneerconfig": 3, "popul": [3, 13, 14, 18, 22, 25, 54, 59], "return": [3, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 42, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67], "object": [3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 40, 47, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], "notthismethod": 3, "rais": [3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67], "method": [3, 4, 7, 8, 9, 10, 13, 14, 17, 23, 24, 25, 26, 30, 31, 34, 38, 44, 50, 51, 56, 57, 59, 60, 62], "valid": [3, 5, 14, 17, 24, 26, 34, 51, 62, 67], "scenario": 3, "long_version_pi": 3, "handler": [3, 14], "register_vcs_handl": 3, "vc": 3, "decor": [3, 14, 37], "mark": 3, "run_command": 3, "command": [3, 8, 14, 25, 40, 42, 44, 45, 46, 47, 66], "cwd": [3, 17, 51], "none": [3, 5, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 22, 23, 25, 26, 28, 29, 31, 32, 34, 35, 43, 51, 52, 56, 57, 58, 59, 60, 64, 66], "fals": [3, 5, 7, 8, 9, 10, 13, 14, 15, 17, 21, 22, 24, 25, 26, 27, 31, 32, 34, 35, 38, 49, 51, 54, 56, 57, 58, 59, 62, 63, 65, 67], "hide_stderr": 3, "call": [3, 7, 8, 9, 10, 13, 14, 17, 25, 26, 31, 32, 34, 38, 40, 42, 44, 45, 51, 54, 55, 57, 58, 59, 62, 66], "given": [3, 5, 7, 10, 13, 14, 17, 23, 25, 26, 27, 34, 35, 36, 46, 51, 56, 57, 58, 59, 67], "versions_from_parentdir": 3, "parentdir_prefix": 3, "root": [3, 7, 10, 13, 14, 25, 40, 43, 51, 54, 59], "determin": [3, 7, 10, 13, 14, 17, 45, 51, 56, 58, 59], "directori": [3, 7, 14, 17, 18, 30, 31, 34, 40, 42, 43, 44, 45, 46, 47, 48, 49], "tarbal": 3, "convention": 3, "unpack": [3, 14, 34, 44, 67], "both": [3, 8, 10, 14, 17, 27, 35, 38, 40, 42, 44, 51, 56, 65, 67], "search": [3, 5, 7, 14, 21, 34, 50, 56], "two": [3, 5, 7, 10, 13, 14, 19, 24, 25, 26, 27, 31, 34, 35, 38, 40, 43, 45, 51, 54, 57, 59, 65, 67], "git_get_keyword": 3, "versionfile_ab": 3, "extract": [3, 59], "git_versions_from_keyword": 3, "tag_prefix": 3, "git_pieces_from_vc": 3, "describ": 3, "tree": 3, "archiv": [3, 43], "subst": 3, "were": [3, 5, 6, 13, 14, 17, 31, 34, 45, 51, 55, 59, 63, 67], "expand": [3, 17, 36, 51], "hasn": 3, "rewritten": 3, "short": 3, "mean": [3, 8, 10, 13, 14, 17, 25, 26, 30, 31, 50, 51, 54, 59, 60], "insid": 3, "plus_or_dot": 3, "piec": 3, "render_pep440": 3, "post": 3, "releas": [3, 42, 43, 44], "goal": 3, "distanc": 3, "ghex": 3, "dirti": 3, "ll": [3, 42], "git_describ": 3, "just": [3, 62], "hex": 3, "untag": 3, "render_pep440_pr": 3, "post0": 3, "devdist": 3, "No": [3, 42, 47], "render_pep440_post": 3, "postdist": 3, "dev0": 3, "backward": [3, 14, 31, 36, 63], "appear": [3, 5, 7, 10, 13, 14, 59, 60], "older": [3, 14, 15, 42, 43], "than": [3, 5, 6, 7, 10, 13, 14, 24, 25, 26, 27, 33, 34, 35, 51, 53, 55, 56, 57, 58, 59, 62, 65, 67], "clean": [3, 42], "shouldn": 3, "softwar": [3, 43], "render_pep440_old": 3, "render_git_describ": 3, "g": [3, 4, 9, 13, 14, 24, 25, 34, 35, 36, 38, 43, 51, 54, 56, 57, 59, 63, 66, 67], "prefix": [3, 7, 10, 14, 17, 31, 34, 35, 36, 50, 51, 67], "render_git_describe_long": 3, "long": [3, 14, 31, 34, 63], "hash": [3, 7, 14, 24, 33, 34, 53], "uncondit": 3, "render": 3, "request": [3, 7, 10, 13, 14, 18, 25, 26, 34, 57, 58, 59], "get_vers": [3, 14], "unabl": [3, 7, 10, 13, 14, 25, 34, 59], "cachedaccessor": [4, 14], "custom": [4, 14, 42, 60], "properti": [4, 7, 10, 14, 15, 23, 31, 32, 35], "descriptor": [4, 14, 34], "cach": [4, 7, 14, 31, 34], "param": [4, 14], "namespac": [4, 14], "df": [4, 10, 14, 38, 58], "type": [4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 42, 46, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67], "extens": [4, 14, 17, 42, 51], "cl": [4, 14], "__init__": [4, 14], "assum": [4, 10, 13, 14, 17, 26, 27, 32, 40, 42, 44, 48, 51, 58, 59, 64, 65], "seri": [4, 10, 14, 26, 35, 36, 37], "datafram": [4, 14, 17, 29, 32, 37, 50, 64], "index": [4, 5, 6, 7, 9, 10, 13, 14, 17, 21, 25, 26, 31, 32, 34, 37, 38, 42, 49, 50, 51, 54, 56, 57, 59, 60, 63, 64, 67], "argument": [4, 5, 9, 10, 13, 14, 25, 31, 32, 34, 36, 45, 64], "data": [4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 23, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 38, 39, 50, 52, 53, 55, 56, 57, 59, 63, 64, 66, 67], "__get__": [4, 14], "obj": [4, 10, 14, 17, 51], "string_oper": [4, 14], "date_oper": [4, 14], "classmethod": [4, 7, 10, 14, 23, 31, 32, 35, 56], "_make_op": [4, 14], "datetimeaccessor": [4, 14], "stringaccessor": [4, 14], "unsqueez": [5, 14], "p": [5, 14, 26], "zero_up": [5, 14], "val": [5, 12, 13, 14, 23, 31, 36, 59, 63], "map": [5, 7, 8, 9, 10, 14, 17, 18, 23, 34, 51, 58, 67], "spars": [5, 13, 14, 59, 62], "pdarrai": [5, 6, 7, 9, 10, 13, 14, 15, 17, 19, 21, 23, 24, 25, 26, 27, 31, 32, 33, 34, 35, 36, 40, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 67], "dens": [5, 7, 13, 14, 59], "replac": [5, 10, 14, 17, 22, 31, 34, 44, 45, 46, 51, 63, 67], "common": [5, 13, 14, 27, 47, 51, 59, 65, 67], "right_align": [5, 14], "right": [5, 9, 10, 14, 25, 31, 33, 34, 35, 53, 58, 61, 66, 67], "impli": [5, 14, 61], "discard": [5, 7, 14, 56], "hand": [5, 14, 61], "defin": [5, 7, 9, 10, 12, 13, 14, 17, 23, 24, 25, 26, 31, 34, 55, 56, 57, 58, 59, 60, 62], "bool": [5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 21, 22, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 40, 49, 51, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "logic": [5, 6, 7, 14, 24, 26, 31, 34, 40, 50, 55, 57, 60, 63], "surviv": [5, 14], "left_align": [5, 14], "nonuniqueerror": [5, 14], "valueerror": [5, 7, 8, 9, 13, 14, 17, 18, 19, 23, 24, 25, 26, 27, 31, 32, 33, 34, 35, 51, 53, 54, 57, 59, 60, 63, 64, 66, 67], "inappropri": [5, 14], "correct": [5, 10, 14, 47, 49, 58], "queri": [5, 14, 51], "item": [5, 7, 10, 14, 21, 26, 27, 32, 36, 56, 58, 64, 65], "sequenc": [5, 7, 9, 14, 25, 26, 27, 31, 33, 53, 57, 62, 63, 65, 67], "row": [5, 10, 13, 14, 27, 31, 33, 37, 38, 51, 53, 58, 59, 63, 65], "dtype": [5, 6, 7, 9, 10, 13, 14, 15, 17, 19, 22, 23, 24, 25, 26, 27, 31, 33, 34, 35, 36, 37, 38, 49, 50, 51, 54, 55, 57, 59, 60, 61, 62, 65, 67], "its": [5, 7, 12, 14, 25, 31, 32, 34, 44, 62, 63, 64, 67], "int64": [5, 7, 9, 10, 12, 13, 14, 17, 19, 21, 24, 25, 26, 27, 31, 33, 34, 35, 38, 49, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 65, 67], "lookup": [5, 14, 15, 32], "kei": [5, 6, 7, 9, 10, 13, 14, 15, 17, 18, 23, 24, 25, 32, 34, 35, 38, 45, 47, 52, 58, 59, 64], "fillvalu": [5, 14], "appli": [5, 10, 13, 14, 24, 54, 58, 59, 67], "domain": [5, 14], "entri": [5, 14, 34], "uniqu": [5, 7, 10, 13, 14, 15, 24, 27, 31, 32, 34, 38, 50, 51, 56, 59, 60, 61, 63, 64, 65, 67], "treat": [5, 6, 9, 12, 14, 33, 38, 51, 53, 55], "tupl": [5, 7, 9, 10, 12, 13, 14, 19, 24, 25, 26, 27, 32, 34, 38, 51, 56, 57, 58, 59, 60, 62, 64, 65, 67], "rang": [5, 7, 10, 14, 24, 26, 31, 32, 34, 35, 49, 51, 57, 58, 60, 64, 67], "evalu": [5, 14, 25, 54, 60], "scalar": [5, 7, 14, 25, 31, 32, 35, 40, 49, 50, 56, 60, 61, 63, 64], "result": [5, 7, 9, 10, 13, 14, 17, 19, 24, 25, 26, 27, 28, 31, 32, 34, 35, 38, 40, 44, 51, 54, 57, 58, 59, 62, 63, 64, 67], "over": [5, 14, 24, 25, 34, 49, 54, 55, 56, 58, 60, 62, 63, 67], "cannot": [5, 6, 7, 10, 13, 14, 17, 24, 25, 26, 34, 35, 47, 51, 55, 56, 59, 62, 67], "other": [5, 7, 9, 10, 13, 14, 15, 24, 25, 26, 31, 33, 34, 35, 38, 40, 51, 52, 53, 54, 56, 59, 63, 67], "complex": [5, 14, 40], "achiev": [5, 14, 42], "arang": [5, 6, 10, 13, 14, 17, 24, 25, 26, 27, 28, 31, 35, 38, 40, 50, 51, 54, 55, 57, 59, 60, 61, 62, 63, 65], "desir": [5, 9, 14, 24, 25, 26, 30, 35, 40, 45, 54, 57, 60, 62, 67], "word": [5, 14], "keys1": [5, 14], "twenti": [5, 14], "_": [5, 14, 21, 34, 67], "5": [5, 6, 7, 10, 13, 14, 24, 25, 26, 27, 31, 33, 34, 35, 38, 46, 51, 53, 54, 55, 57, 58, 59, 61, 62, 63, 65, 67], "keys2": [5, 14], "three": [5, 14, 26, 27, 34, 35, 42, 57, 61, 62, 67], "four": [5, 14, 27, 34, 35, 57, 67], "five": [5, 14, 27, 34, 57, 67], "21": [5, 14, 55], "22": [5, 14, 46, 54, 55], "23": [5, 14, 55], "24": [5, 14, 24, 25, 54, 55], "25": [5, 13, 14, 17, 26, 55, 57, 59], "args1": [5, 14], "thirti": [5, 14], "args2": [5, 14], "aku": [5, 10, 14, 15, 29, 52, 58], "direct": [5, 14, 42], "intermedi": [5, 14], "revkei": [5, 14], "revindic": [5, 14], "revarg": [5, 14], "idx": [5, 14, 38], "in1d_interv": [5, 14], "interv": [5, 14, 24, 26, 35, 57, 60], "symmetr": [5, 14, 27, 31, 38, 50, 65], "test": [5, 7, 10, 14, 17, 24, 27, 38, 42, 45, 51, 58, 65], "membership": [5, 14, 27, 65], "half": [5, 14], "python": [5, 6, 7, 9, 10, 14, 25, 26, 27, 30, 32, 34, 35, 39, 42, 47, 48, 50, 51, 54, 55, 56, 57, 58, 61, 62, 67], "float": [5, 8, 10, 14, 23, 24, 25, 26, 54, 57, 58, 60, 62], "overlap": [5, 14, 22, 34, 67], "lower_bounds_inclus": [5, 14], "upper_bounds_exclus": [5, 14], "low": [5, 9, 10, 14, 24, 26, 38, 51, 57], "high": [5, 9, 10, 14, 24, 26, 38, 57], "inclus": [5, 10, 14, 24, 26, 35, 40, 54, 57, 61], "But": [5, 14], "faster": [5, 7, 14, 27, 56, 65], "mani": [5, 7, 14, 56, 59], "second": [5, 8, 14, 18, 24, 26, 27, 32, 34, 35, 38, 54, 57, 62, 64, 65, 66, 67], "trivial": [5, 14], "search_interv": [5, 14], "tiebreak": [5, 14], "hierarch": [5, 14], "uint": [5, 14, 26], "numer": [5, 10, 14, 26, 32, 33, 37, 50, 51, 53, 56, 62, 64, 67], "lowest": [5, 10, 14, 26], "chosen": [5, 14, 24, 25, 54, 62, 63], "compon": [5, 7, 10, 13, 14, 25, 31, 32, 34, 35, 36, 59], "multi": [5, 6, 9, 13, 14, 17, 27, 32, 38, 52, 55, 57, 59, 62, 64, 65], "dimension": [5, 6, 14, 26, 32, 40, 51, 55, 62, 64], "satisfi": [5, 14, 40], "condit": [5, 14, 24, 25, 54], "11": [5, 10, 14, 24, 31, 38, 42, 46, 54, 55, 58, 60, 61, 63], "end": [5, 7, 10, 14, 21, 26, 31, 34, 35, 50, 56, 57, 61, 63, 67], "9": [5, 7, 10, 13, 14, 24, 25, 26, 31, 33, 34, 38, 40, 43, 51, 53, 54, 55, 57, 59, 61, 63, 67], "10": [5, 13, 14, 17, 24, 25, 26, 28, 31, 32, 33, 34, 38, 40, 42, 46, 51, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64], "6": [5, 6, 10, 13, 14, 24, 25, 26, 27, 31, 34, 38, 40, 43, 46, 47, 49, 51, 54, 55, 57, 58, 59, 60, 61, 63, 65, 67], "15": [5, 14, 34, 55, 61], "12": [5, 13, 14, 24, 31, 34, 42, 43, 54, 55, 59, 61, 63], "30": [5, 14, 55], "is_cosort": [5, 14], "iff": [5, 7, 14, 25, 34, 54, 60], "cosort": [5, 14], "column": [5, 7, 10, 13, 14, 17, 31, 32, 33, 34, 38, 51, 53, 59, 63, 64], "tabl": [5, 8, 14, 16, 23, 25, 31, 34, 46, 62, 63], "cosorted": [5, 14], "typeerror": [5, 7, 9, 10, 12, 13, 14, 17, 19, 20, 24, 25, 26, 27, 32, 33, 34, 35, 51, 53, 54, 56, 57, 59, 60, 64, 65, 67], "interval_lookup": [5, 14], "express": [5, 14, 17, 34, 50, 51, 56, 58, 61, 62], "upper_bounds_inclus": [5, 14], "ordertyp": [6, 14], "arrayview": [6, 14, 17, 25, 50, 51, 62], "pdarrayclass": [6, 7, 9, 10, 13, 14, 15, 17, 19, 21, 24, 26, 27, 31, 32, 33, 34, 35, 37], "row_major": [6, 14, 25, 55], "view": [6, 14, 38, 42, 48, 55, 62], "arraryview": [6, 14, 55], "similarli": [6, 14, 38, 55], "ndarrai": [6, 7, 14, 24, 25, 26, 28, 31, 34, 35, 38, 40, 51, 54, 55, 56, 60, 62, 63, 67], "element": [6, 7, 10, 13, 14, 18, 21, 24, 25, 26, 27, 31, 32, 34, 35, 36, 38, 40, 45, 50, 55, 56, 57, 59, 60, 61, 62, 64, 65, 67], "int_scalar": [6, 12, 13, 14, 24, 25, 26, 34, 35, 54, 55, 57, 59, 60, 62], "ndim": [6, 7, 14, 25, 31, 34, 50, 55, 56, 62], "items": [6, 14, 25, 26, 31, 34, 50, 51, 55, 62], "byte": [6, 7, 10, 12, 14, 17, 25, 26, 34, 35, 40, 51, 55, 56, 58, 62, 67], "read": [6, 7, 14, 17, 18, 25, 34, 50, 55, 67], "By": [6, 7, 9, 10, 13, 14, 17, 24, 25, 27, 31, 34, 35, 55, 59, 65, 67], "c": [6, 10, 14, 25, 26, 27, 31, 34, 40, 43, 49, 55, 58, 62, 63, 65, 67], "f": [6, 7, 14, 25, 26, 34, 43, 44, 46, 51, 55, 67], "column_major": [6, 14, 25, 55], "__len__": [6, 7, 10, 14, 15, 25, 32, 34], "__repr__": [6, 7, 9, 10, 14, 15, 21, 23, 25, 29, 31, 32, 34, 35], "repr": [6, 7, 9, 14, 15, 21, 25, 29, 31, 34, 35], "__str__": [6, 7, 9, 10, 14, 21, 23, 25, 29, 31, 34, 35], "__getitem__": [6, 7, 9, 10, 14, 15, 21, 25, 31, 32, 34, 35], "__setitem__": [6, 9, 10, 14, 25, 35], "to_ndarrai": [6, 7, 9, 14, 15, 24, 25, 26, 28, 31, 34, 35, 38, 40, 50, 51, 55, 56, 60, 62, 63, 67], "convert": [6, 7, 9, 10, 14, 17, 24, 25, 26, 31, 32, 34, 35, 36, 51, 55, 56, 58, 62, 63, 64, 65, 67], "np": [6, 7, 10, 12, 13, 14, 19, 24, 25, 26, 28, 31, 34, 35, 38, 51, 54, 55, 56, 57, 58, 59, 60, 62, 63, 67], "transfer": [6, 7, 10, 14, 25, 34, 35, 40, 51, 55, 56, 58, 62, 63, 67], "exce": [6, 7, 10, 14, 25, 26, 34, 35, 51, 55, 56, 57, 58, 62, 67], "maxtransferbyt": [6, 7, 10, 14, 25, 26, 34, 35, 51, 55, 56, 58, 62, 67], "runtimeerror": [6, 7, 8, 10, 13, 14, 15, 16, 17, 21, 24, 25, 26, 27, 31, 32, 34, 35, 51, 54, 55, 56, 57, 59, 60, 62, 65, 66, 67], "error": [6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 21, 23, 24, 25, 26, 31, 32, 34, 35, 47, 51, 54, 55, 56, 58, 59, 60, 62, 66, 67], "thrown": [6, 7, 10, 14, 15, 16, 21, 25, 26, 31, 32, 34, 35, 51, 54, 55, 60, 62, 67], "receiv": [6, 8, 14, 17, 25, 34, 35, 51, 55, 62, 66], "otherwis": [6, 7, 10, 12, 13, 14, 15, 17, 21, 24, 25, 26, 27, 31, 32, 34, 35, 36, 48, 51, 55, 56, 58, 59, 62, 63, 65, 67], "protect": [6, 7, 14, 25, 26, 34, 35, 51, 55, 56, 62, 67], "overflow": [6, 7, 14, 24, 25, 34, 35, 51, 55, 56, 62, 67], "memori": [6, 7, 8, 14, 25, 34, 35, 40, 51, 55, 56, 62, 67], "assumpt": [6, 7, 14, 25, 26, 34, 35, 51, 55, 56, 62, 67], "overrid": [6, 7, 14, 25, 26, 34, 35, 51, 55, 56, 62, 67], "larger": [6, 7, 14, 25, 26, 34, 35, 38, 51, 55, 56, 62, 67], "proce": [6, 7, 14, 25, 26, 34, 35, 51, 55, 56, 62, 67], "caution": [6, 7, 14, 25, 26, 34, 35, 51, 55, 56, 62, 67], "to_list": [6, 7, 9, 14, 15, 25, 31, 34, 35, 38, 51, 55, 62, 63, 67], "reshap": [6, 14, 25, 50, 55], "4": [6, 10, 13, 14, 21, 24, 25, 26, 27, 31, 33, 34, 35, 38, 46, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 65, 67], "to_hdf": [6, 7, 10, 14, 15, 17, 25, 31, 34, 51], "dataset": [6, 7, 14, 15, 17, 25, 31, 34, 50, 59, 67], "format": [6, 7, 8, 9, 10, 14, 16, 17, 23, 25, 29, 30, 32, 34, 38, 45, 50, 58, 66, 67], "kwarg": [7, 13, 14, 26, 29, 35, 36, 56, 59], "belong": [7, 56], "often": [7, 40, 56, 60], "speed": [7, 14, 27, 56, 57, 65], "oper": [7, 8, 9, 10, 13, 14, 25, 30, 32, 33, 34, 35, 40, 46, 48, 49, 50, 53, 58, 59, 61, 66], "cost": [7, 56], "initi": [7, 8, 14, 25, 26, 35, 49, 56, 57, 62, 66], "navalu": [7, 56], "miss": [7, 23, 56], "null": [7, 14, 17, 34, 51, 56, 67], "n": [7, 10, 13, 14, 24, 25, 26, 27, 31, 32, 34, 35, 40, 44, 46, 49, 54, 55, 56, 57, 58, 59, 63, 64], "permut": [7, 10, 13, 14, 33, 34, 36, 40, 50, 53, 56, 59, 65], "offset": [7, 13, 14, 17, 26, 34, 51, 56, 65, 67], "union": [7, 8, 9, 10, 13, 14, 15, 16, 17, 19, 24, 25, 26, 27, 31, 32, 33, 34, 38, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 62, 64, 65, 67], "nlevel": [7, 50, 56], "distinct": [7, 10, 14, 56], "binop": [7, 9, 14, 25, 34, 35], "registerablepiec": 7, "requiredpiec": 7, "from_cod": [7, 50, 56], "pre": [7, 36, 56], "comput": [7, 8, 10, 13, 14, 24, 25, 31, 34, 35, 38, 51, 54, 56, 58, 59, 60, 62, 63, 65, 67], "constructor": [7, 38, 51, 56], "normal": [7, 8, 9, 10, 13, 14, 23, 25, 26, 35, 54, 56, 58, 59], "input": [7, 9, 10, 13, 24, 25, 26, 27, 31, 33, 35, 51, 53, 54, 56, 59, 62, 64, 65], "standardize_categori": 7, "share": [7, 14, 31, 34, 47], "origin": [7, 10, 13, 14, 17, 21, 24, 25, 27, 31, 34, 51, 54, 56, 57, 58, 59, 63, 67], "remap": 7, "set_categori": 7, "new_categori": 7, "old": 7, "unchang": 7, "na": 7, "static": [7, 10, 13, 14, 15, 23, 25, 31, 32, 34, 35, 59], "from_return_msg": [7, 10, 14, 31, 32, 34], "repmsg": [7, 10, 14, 31, 32], "instanc": [7, 9, 10, 13, 14, 23, 25, 26, 31, 32, 34, 42, 45, 51, 54, 58, 59, 60, 62, 67], "point": [7, 10, 14, 25, 26, 31, 32, 47, 57, 58, 62], "directli": [7, 14, 25, 31, 32, 33, 34, 38, 53, 55, 56, 58, 62, 67], "delimit": [7, 10, 14, 18, 31, 32, 34, 67], "process": [7, 10, 14, 16, 17, 23, 31, 32, 40, 44, 47, 51, 63, 67], "produc": [7, 14, 34, 40, 56, 67], "abstract": [7, 14, 25, 34], "__iter__": [7, 14, 25, 34], "_binop": [7, 9, 14, 25, 34, 35], "str_scalar": [7, 12, 14, 22, 34, 67], "op": [7, 9, 14, 25, 31, 34, 35], "binari": [7, 9, 14, 23, 25, 26, 34, 35, 42, 54], "perform": [7, 10, 13, 14, 17, 19, 24, 25, 27, 34, 38, 40, 42, 50, 51, 54, 57, 58, 59, 62], "encapsul": [7, 9, 14, 23, 25, 26, 30, 34, 35], "_r_binop": [7, 9, 14, 25, 35], "revers": [7, 9, 13, 14, 25, 35], "__eq__": [7, 14, 15, 25, 31, 34], "__ne__": [7, 14, 25, 34], "isna": 7, "reset_categori": 7, "recomput": [7, 14, 17, 31], "unus": 7, "slice": [7, 10, 14, 38, 40, 50, 55, 56, 58, 63, 67], "subset": [7, 10, 14, 31, 45, 54, 58, 63], "In": [7, 10, 13, 14, 17, 25, 34, 38, 40, 42, 43, 45, 47, 51, 54, 59, 60, 61, 63, 66, 67], "case": [7, 8, 13, 14, 17, 24, 32, 35, 38, 42, 43, 45, 47, 54, 64], "elimin": 7, "gener": [7, 10, 14, 23, 24, 25, 26, 28, 30, 31, 32, 34, 35, 37, 38, 40, 42, 43, 47, 49, 51, 54, 57, 64], "substr": [7, 9, 14, 34, 50, 56], "whether": [7, 10, 13, 14, 17, 21, 27, 31, 32, 34, 35, 38, 51, 56, 63, 64, 65, 67], "significantli": [7, 56], "instead": [7, 9, 13, 14, 17, 25, 34, 43, 49, 51, 54, 56, 59, 67], "full": [7, 10, 14, 21, 24, 26, 34, 35, 40, 42, 48, 56, 67], "startswith": [7, 14, 34, 50, 56, 67], "endswith": [7, 14, 34, 50, 56, 67], "in1d": [7, 14, 27, 38, 50, 56, 65, 67], "against": [7, 14, 31, 34, 38, 51, 63, 67], "intersect1d": [7, 14, 27, 31, 38, 50, 63, 65], "union1d": [7, 14, 27, 31, 38, 50, 63, 65], "consid": [7, 67], "wise": [7, 14, 24, 50, 55], "b": [7, 8, 10, 13, 14, 17, 24, 25, 26, 27, 28, 31, 32, 33, 34, 38, 40, 49, 53, 54, 58, 59, 60, 61, 62, 63, 65, 67], "scale": [7, 14, 28, 38, 39], "arbitrarili": 7, "larg": [7, 50, 54], "cat": [7, 47], "cattwo": 7, "place": [7, 10, 13, 14, 25, 30, 34, 36, 54, 59], "togeth": [7, 10, 13, 14, 34, 65], "guarante": [7, 14, 33, 34, 53, 67], "lie": [7, 14, 34], "contigu": [7, 14, 31, 34], "necessarili": [7, 14, 34], "groupbi": [7, 10, 13, 14, 25, 31, 34, 50, 56, 67], "simpli": [7, 8, 57], "rather": [7, 10, 14, 34], "128": [7, 14, 24, 34], "_get_grouping_kei": [7, 13, 14, 25, 34, 59], "privat": [7, 14, 25, 34], "groupabl": [7, 13, 14, 25, 27, 34, 59, 65], "co": [7, 13, 14, 24, 25, 26, 34, 50, 54, 59], "argsort": [7, 10, 13, 14, 15, 25, 33, 34, 40, 50, 53, 54, 56, 58, 59, 67], "concaten": [7, 10, 14, 27, 31, 32, 34, 36, 50, 63, 64, 67], "merg": 7, "synchron": 7, "interleav": [7, 10, 14, 27, 57], "greatli": [7, 14, 27, 57], "improv": [7, 14, 27, 43, 45, 57], "determinist": [7, 14, 27, 57], "expens": 7, "slower": [7, 67], "prefix_path": [7, 10, 14, 15, 17, 25, 31, 34, 51], "categorical_arrai": 7, "collect": [7, 10, 14, 17, 29, 31, 34, 43], "filenam": [7, 14, 17, 31, 34, 51], "chunk": [7, 14, 17, 34], "impact": [7, 14, 31], "parquet": [7, 10, 14, 17, 31, 34, 51], "neither": [7, 14, 26, 34, 35, 57, 67], "nor": [7, 14, 26, 34, 57, 67], "state": [7, 23], "charact": [7, 9, 14, 26, 34, 45, 67], "to_parquet": [7, 10, 14, 15, 17, 25, 34, 51], "compress": [7, 14, 15, 17, 25, 31, 34, 61, 63], "without": [7, 10, 14, 17, 25, 42, 51, 58], "snappi": [7, 14, 34, 42], "rle": [7, 14, 34], "encod": [7, 14, 34, 67], "user_defined_nam": [7, 10, 13, 14, 25, 31, 34, 59], "underli": [7, 10, 13, 14, 24, 59], "modif": [7, 10, 13, 14, 25, 34, 45, 58, 59], "fluid": [7, 10, 13, 14, 25, 34, 59], "registrationerror": [7, 10, 13, 14, 25, 31, 34, 59], "unregist": [7, 10, 13, 14, 25, 31, 32, 34, 36, 50, 59], "attach": [7, 10, 13, 14, 25, 31, 32, 34, 36, 50, 59], "unregister_categorical_by_nam": 7, "is_regist": [7, 10, 13, 14, 15, 25, 31, 32, 34, 50, 59], "immun": [7, 10, 13, 14, 25, 34, 59], "delet": [7, 8, 10, 13, 14, 25, 34, 40, 59], "previous": [7, 10, 13, 14, 17, 25, 34, 51, 59], "attempt": [7, 10, 13, 14, 17, 25, 33, 34, 36, 42, 51, 58, 59], "bool_": [7, 14, 25, 34, 54, 60], "registri": [7, 10, 13, 14, 15, 16, 25, 34, 59], "mi": 7, "_get_components_dict": 7, "dict": [7, 8, 10, 13, 14, 17, 18, 23, 29, 58, 59], "dictionari": [7, 8, 10, 13, 14, 17, 18, 23, 34, 45, 51, 58, 59], "components_dict": 7, "ve": 7, "_list_component_nam": [7, 14, 25, 34], "json": [7, 8, 14, 16, 23, 25, 30, 34], "about": [7, 8, 14, 16, 25, 34, 35, 54, 55, 67], "pretty_print_info": [7, 14, 25, 34], "human": [7, 14, 16, 25, 34], "readabl": [7, 14, 16, 17, 25, 34, 51], "issu": [7, 10, 13, 14, 42, 47, 59, 63], "parse_hdf_categor": 7, "reconstitut": 7, "convent": 7, "construct": [7, 14, 26, 31, 34, 35, 38, 50, 59, 61], "remov": [7, 10, 14, 25, 31, 34, 46, 58, 63, 67], "connect": [8, 14, 26, 30, 47, 50, 51], "localhost": [8, 40, 66], "5555": [8, 40, 66], "access_token": [8, 66], "connect_url": [8, 40, 66], "visibl": [8, 17, 66], "machin": [8, 44, 66], "send": [8, 10, 14, 25, 26, 31, 51, 58, 66], "whicn": [8, 66], "interpret": [8, 17, 51, 66], "socket": [8, 66], "enabl": [8, 14, 20, 25, 30, 42, 43, 45, 51, 66], "authent": [8, 30, 40, 66], "tcp": [8, 40, 66], "token_valu": [8, 66], "connectionerror": [8, 66], "pars": [8, 9, 10, 14, 23, 66], "On": [8, 66], "success": [8, 14, 24, 31, 62, 66], "seen": [8, 66], "disconnect": [8, 14, 25], "shutdown": [8, 45], "symtabl": 8, "shut": [8, 45], "down": [8, 14, 35, 42, 45], "stop": [8, 14, 26, 57, 61], "runtim": 8, "serverhostnam": 8, "serverport": 8, "numlocal": [8, 17, 51, 66], "numpu": 8, "processor": 8, "maxtaskpar": 8, "physicalmemori": 8, "get_mem_us": 8, "as_perc": 8, "amount": [8, 10, 14, 25, 45, 58, 67], "symbol": [8, 14, 16, 23, 25, 31, 34, 36, 62], "kb": [8, 10, 14], "mb": [8, 10, 14], "gb": [8, 10, 14], "tb": 8, "pb": 8, "percent": 8, "alloc": 8, "get_mem_avail": 8, "get_server_command": 8, "retriev": [8, 14, 16, 25, 30, 32], "commandmap": [8, 45], "print_server_command": 8, "ruok": 8, "imok": 8, "imnotok": 8, "occur": [8, 10, 13, 14, 17, 22, 24, 25, 32, 34, 42, 59, 60, 64, 67], "basic": [8, 14, 25, 30, 47, 55, 62], "quick": 8, "healthcheck": 8, "handl": [8, 10, 14, 24, 34, 35, 51, 58, 62, 67], "respons": [8, 14, 34], "latter": [8, 67], "bitvector": [9, 14], "width": [9, 14, 67], "64": [9, 14, 24, 25, 26, 57, 58, 62], "callback": [9, 14], "field": [9, 14, 23, 26, 34, 51, 67], "vector": [9, 13, 14, 40, 50, 59], "signific": [9, 14, 24, 25, 33, 45, 53, 54], "callabl": [9, 10, 14, 58], "flag": [9, 14, 17, 28, 45, 51, 66], "thin": [9, 14], "wrapper": [9, 14, 62], "mostli": [9, 14], "affect": [9, 14], "uint64": [9, 12, 13, 14, 24, 25, 26, 33, 49, 53, 54, 57, 58, 60, 62, 67], "conserv": [9, 14], "_cast": [9, 14], "upon": [9, 14, 24, 25, 34, 35, 44, 45, 46, 48, 54], "opeq": [9, 14, 25, 35], "msb_left": [9, 14], "pad": [9, 14], "show_int": [9, 14], "back": [9, 13, 14, 51, 59], "represent": [9, 14, 17, 25, 40], "accord": [9, 10, 14, 24, 40, 58, 62], "empti": [9, 10, 13, 14, 17, 23, 24, 25, 27, 32, 42, 54, 57, 58, 60, 64], "_convert_str": [9, 14], "_parse_scalar": [9, 14], "ip_address": [9, 14, 15, 52], "ip": [9, 14], "ipv4": [9, 14], "helper": [9, 10, 14, 34], "proof": [9, 14], "made": [9, 10, 14, 34, 67], "accomod": [9, 14], "ipv6": [9, 14], "prevent": [9, 14, 31, 43, 63], "inadvert": [9, 14], "cast": [9, 14, 24, 25, 26, 34, 50, 51, 57, 67], "ipaddress": [9, 14], "_is_supported_scalar": [9, 14, 35], "is_ipv4": [9, 14], "ip2": [9, 14], "well": [9, 14, 38, 46], "ad": [9, 13, 14, 17, 38, 42, 51, 59, 66], "deal": [9, 14], "is_ipv6": [9, 14], "initialdata": [10, 14, 58], "userdict": [10, 14, 29], "pd": [10, 14, 17, 26, 35, 38, 51, 58], "usernam": [10, 14, 30, 58], "alic": [10, 14, 58], "bob": [10, 14, 58], "carol": [10, 14, 58], "userid": [10, 14, 58, 59], "111": [10, 14, 58], "222": [10, 14, 58], "333": [10, 14, 58], "dai": [10, 14, 35, 58, 59], "224": [10, 14, 58], "slightli": [10, 14, 58], "7": [10, 13, 14, 24, 25, 26, 27, 31, 33, 38, 42, 43, 46, 51, 53, 54, 55, 57, 58, 59, 61, 63, 65], "stride": [10, 14, 26, 31, 57, 58, 61], "148": [10, 14, 58], "112": [10, 14, 58], "96": [10, 14, 25, 58], "column_class": [10, 14], "__getattr__": [10, 14], "__dir__": [10, 14], "dir": [10, 14], "__delitem__": [10, 14], "_ncol": [10, 14], "actual": [10, 14, 31], "move": [10, 14, 31, 33, 38, 40, 53, 57, 63], "_get_head_tail": [10, 14], "_get_head_tail_serv": [10, 14], "_shape_str": [10, 14], "ascii": [10, 14, 29, 32], "_repr_html_": [10, 14, 29], "html": [10, 14, 29, 42, 55], "_ipython_key_completions_": [10, 14], "from_panda": [10, 14], "pd_df": [10, 14, 38], "_drop_column": [10, 14], "drop": [10, 14, 25, 54], "axi": [10, 14, 28, 31, 32, 58, 63, 64], "_drop_row": [10, 14], "inplac": [10, 14, 58], "datefram": [10, 14, 58], "col_nam": [10, 14, 58], "drop_dupl": [10, 14, 58], "duplcat": [10, 14, 58], "iter": [10, 14, 17, 26, 33, 50, 51, 53], "dedup": [10, 14, 58], "last": [10, 14, 25, 26, 32, 33, 34, 40, 45, 53, 58, 64, 66, 67], "_set_index": [10, 14], "reset_index": [10, 14, 58], "caller": [10, 14, 58], "correctli": [10, 14, 47, 58], "update_s": [10, 14], "_rename_column": [10, 14], "mapper": [10, 14, 58], "renam": [10, 14], "nonexist": [10, 14, 58], "_rename_index": [10, 14], "exactli": [10, 14, 35], "ignor": [10, 13, 14, 17, 24, 35, 51, 58, 62], "99": [10, 14, 58], "lower": [10, 14, 34, 58], "onto": [10, 14, 34, 67], "sens": [10, 14], "whose": [10, 14, 31, 32, 34, 64], "better": [10, 14], "remain": [10, 14, 17, 40, 43, 51, 52, 58, 64], "compat": [10, 14, 25, 31, 35, 36, 58, 59], "concat": [10, 14, 15, 31, 32, 58, 64], "essenti": [10, 14, 25, 31, 34, 58, 63], "diffen": [10, 14, 58], "head": [10, 14, 32], "quickli": [10, 14, 58], "select": [10, 14, 31, 42, 48, 58, 63], "tail": [10, 14, 26, 32], "sampl": [10, 14, 26], "random": [10, 14, 26, 40, 49, 50], "use_seri": [10, 14, 58], "oject": [10, 14], "memory_usag": [10, 14], "One": [10, 13, 14, 25, 32, 38, 59, 64], "to_panda": [10, 14, 15, 32, 35, 38, 58, 64], "datalimit": [10, 14, 58], "retain_index": [10, 14, 58], "megabyt": [10, 14, 58], "estim": [10, 13, 14, 25, 54, 58, 59], "book": [10, 14, 58], "_prep_data": [10, 14], "disk": [10, 14, 50, 67], "preserv": [10, 14, 32, 64, 67], "across": [10, 14, 17, 51], "suffix": [10, 14, 31, 34, 50, 67], "file_format": [10, 14, 17, 51], "infer": [10, 12, 13, 14, 17, 26, 36, 51], "ascend": [10, 13, 14, 15, 24, 32, 52, 58, 60, 64], "coargsort": [10, 14, 33, 50, 53, 56, 58, 67], "sort_valu": [10, 14, 32, 58, 64], "descend": [10, 14, 26, 32, 57, 58, 64], "apply_permut": [10, 14, 58], "perm": [10, 14, 33, 36, 40, 53, 58], "entir": [10, 14, 31, 34, 58, 63], "unsort": [10, 14, 58], "arbitrari": [10, 14, 58], "invers": [10, 14, 36, 58], "minim": [10, 14, 57, 58], "filter_by_rang": [10, 14], "count": [10, 13, 14, 22, 24, 25, 31, 32, 34, 35, 38, 50, 54, 59, 63, 67], "highest": [10, 14, 26], "unlimit": [10, 14], "qualifi": [10, 14], "filter_by_count": [10, 14], "copi": [10, 14, 31, 33, 63], "deep": [10, 14, 31, 58], "reflect": [10, 14, 58, 63], "shallow": [10, 14, 58], "vice": [10, 14, 51, 58], "versa": [10, 14, 51, 58], "alia": [10, 13, 14, 31, 35, 58, 59], "isin": [10, 14, 32], "show": [10, 14, 17, 28, 40, 42, 51, 55, 59], "col_a": [10, 14], "col_b": [10, 14], "position": [10, 14], "other_df": [10, 14], "col_c": [10, 14], "corr": [10, 14, 25], "pairwis": [10, 14], "correl": [10, 14, 25], "matrix": [10, 13, 14, 59], "pearson": [10, 14, 25], "unregister_dataframe_by_nam": [10, 14], "mismatch": [10, 13, 14, 42, 59], "unregister_groupby_by_nam": [10, 13, 14, 50, 59], "_parse_col_nam": [10, 14], "entrynam": [10, 14], "dfname": [10, 14], "pull": [10, 14, 26, 36, 57], "columnnam": [10, 14], "columntyp": [10, 14], "analog": [10, 13, 14, 35, 59], "intx": [10, 14], "categor": [10, 13, 14, 17, 24, 27, 31, 32, 33, 36, 37, 50, 51, 53, 57, 58, 59, 60, 64, 65], "intersect": [10, 14, 27, 31, 38, 50, 65], "posit": [10, 14, 21, 22, 25, 32, 34, 61, 64, 67], "effici": [10, 14, 63, 67], "invert_permut": [10, 14, 36], "objtypedec": [11, 14], "orig_cl": [11, 14], "float64": [12, 13, 14, 24, 25, 26, 27, 33, 49, 53, 54, 57, 58, 59, 60, 62, 65], "uint8": [12, 14, 24, 54, 57, 60, 62, 67], "str_": [12, 14, 54, 60, 67], "bigint": [12, 14, 24, 26, 51, 57, 62], "inttyp": [12, 14], "bittyp": [12, 14], "bool_scalar": [12, 14], "float_scalar": [12, 14, 26], "numeric_scalar": [12, 14, 24, 25, 26, 54, 57], "numpy_scalar": [12, 14, 25, 54], "all_scalar": [12, 14, 26, 57], "form": [12, 14, 30, 31, 34, 45, 67], "arkouda_supported_dtyp": [12, 14], "dtypeobject": [12, 14], "check_np_dtyp": [12, 14], "dt": [12, 14, 19, 24, 32, 62], "assert": [12, 14, 40], "translate_np_dtyp": [12, 14], "split": [12, 14, 22, 34, 50], "kind": [12, 14], "unsupport": [12, 13, 14, 17, 30, 33, 51, 65], "resolve_scalar_dtyp": [12, 14], "get_byteord": [12, 14], "concret": [12, 14], "byteord": [12, 14], "turn": [12, 14, 32, 40, 64], "get_server_byteord": [12, 14], "pda": [13, 14, 24, 25, 26, 33, 35, 53, 54, 57, 60, 62, 65], "return_group": [13, 65], "assume_sort": [13, 59, 65], "consider": [13, 65, 67], "groupby_reduction_typ": 13, "usual": [13, 59], "prepar": [13, 42, 59], "nkei": [13, 14, 32, 50, 59], "unique_kei": [13, 50, 59], "ngroup": [13, 50, 59], "logger": [13, 14, 34, 37, 50, 59], "arkoudalogg": [13, 14, 20, 34, 59], "nativ": [13, 43, 51, 59, 63], "inherit": [13, 59, 62], "overload": [13, 59], "reduct": [13, 14, 25, 49, 50, 59, 60], "conform": [13, 59], "randint": [13, 14, 24, 26, 33, 38, 40, 50, 53, 54, 57, 59, 60], "skipna": [13, 59], "ddof": [13, 14, 25, 35, 54, 59, 60], "reduc": [13, 59], "nan": [13, 14, 24, 32, 59, 62], "delta": [13, 14, 19, 25, 54, 59, 60], "degre": [13, 14, 25, 54, 59, 60], "freedom": [13, 14, 25, 54, 59, 60], "calcul": [13, 14, 17, 25, 27, 51, 54, 59, 60, 65], "std": [13, 14, 25, 35, 50, 54, 59, 60], "linspac": [13, 14, 24, 26, 50, 54, 57, 59, 62], "sum": [13, 14, 24, 25, 31, 35, 50, 54, 59, 60], "8": [13, 14, 25, 26, 31, 33, 34, 38, 46, 51, 53, 54, 55, 57, 58, 59, 61, 62, 63], "77777777777777768": [13, 59], "55555555555555536": [13, 59], "33333333333333348": [13, 59], "11111111111111116": [13, 59], "min": [13, 14, 24, 25, 31, 35, 40, 50, 54, 59, 60], "77777777777777779": [13, 59], "55555555555555558": [13, 59], "33333333333333337": [13, 59], "33333333333333326": [13, 59], "group_sum": [13, 59], "14": [13, 38, 54, 55, 59, 61], "prod": [13, 14, 25, 31, 50, 54, 59, 60], "product": [13, 14, 24, 25, 26, 40, 51, 54, 55, 59, 60], "multipli": [13, 40, 59], "group_product": [13, 59], "108": [13, 59], "00000000000003": [13, 59], "9999999999999982": [13, 59], "varianc": [13, 14, 25, 44, 54, 59, 60], "group_var": [13, 59], "averag": [13, 14, 25, 26, 54, 59], "squar": [13, 14, 25, 54, 59], "deviat": [13, 14, 25, 26, 35, 54, 59, 60], "len": [13, 14, 25, 31, 34, 54, 59, 61, 63, 67], "howev": [13, 14, 24, 25, 42, 46, 47, 54, 56, 59], "divisor": [13, 14, 25, 54, 59], "statist": [13, 14, 25, 50, 54, 59], "unbias": [13, 14, 25, 54, 59], "hypothet": [13, 14, 25, 54, 59], "infinit": [13, 14, 25, 54, 59], "likelihood": [13, 14, 25, 54, 59], "333333333333333": [13, 59], "group_std": [13, 59], "sqrt": [13, 14, 25, 54, 59], "se": [13, 14, 25, 54, 59], "5275252316519465": [13, 59], "0954451150103321": [13, 59], "group_mean": [13, 59], "6666666666666665": [13, 59], "7999999999999998": [13, 59], "median": [13, 50, 59], "group_median": [13, 59], "75": [13, 14, 26, 57, 59], "minimum": [13, 14, 25, 26, 35, 42, 54, 59, 60], "minima": [13, 59], "group_minima": [13, 59], "max": [13, 14, 24, 25, 31, 34, 35, 40, 50, 54, 59, 60, 67], "maxima": [13, 59], "group_maxima": [13, 59], "argmin": [13, 14, 25, 31, 50, 54, 59, 60], "group_argminima": [13, 59], "argmax": [13, 14, 25, 31, 50, 54, 59, 60], "group_argmaxima": [13, 59], "_nested_grouping_help": 13, "nuniqu": [13, 14, 31, 50, 59], "group_nuniqu": [13, 59], "group_ani": [13, 59], "OR": [13, 14, 31, 50, 59], "bitwis": [13, 59, 62], "AND": [13, 14, 31, 50, 59], "xor": [13, 14, 25, 31, 50, 59], "groupable_element_typ": [13, 14, 27, 32, 59, 64], "modal": [13, 59], "segarrai": [13, 14, 36, 37, 50, 58, 59], "broadcast": [13, 14, 25, 36, 50, 59], "fill": [13, 14, 25, 26, 49, 57, 59], "constant": [13, 14, 25, 50, 59], "put": [13, 59], "tensor": [13, 59], "replic": [13, 59], "zero": [13, 14, 24, 25, 26, 50, 57, 59, 61, 62], "With": [13, 45, 55, 59, 61], "build_from_compon": [13, 50, 59], "init": [13, 59], "rebuild": [13, 59], "orig_kei": [13, 59], "_get_groupby_required_piec": 13, "most_common": [13, 36, 50, 59], "deprec": [13, 14, 17, 31, 35, 51, 59], "total": [13, 14, 17, 34, 51], "nonzero": [13, 14, 22, 34, 67], "go": [13, 43, 47, 57], "invert": [13, 14, 27, 65], "suppli": [13, 14, 17, 26, 31, 57, 58], "less": [13, 14, 35], "row_start": 13, "nnz": 13, "row_numb": 13, "_version": [14, 37], "accessor": [14, 37], "align": [14, 32, 37], "array_view": [14, 17, 37, 55], "client_dtyp": [14, 37], "groupbyclass": [14, 27, 32, 37], "infoclass": [14, 37], "io": [14, 37], "io_util": [14, 37], "join": [14, 31, 34, 37, 50], "matcher": [14, 34, 37], "pdarraycr": [14, 37], "pdarraysetop": [14, 31, 37, 63], "plot": [14, 24, 37, 51, 60], "secur": [14, 24, 37], "timeclass": [14, 37], "__version__": 14, "akcast": 14, "errormod": [14, 24, 62], "strict": [14, 24, 62], "target": [14, 18, 24, 26, 42, 51, 57, 61, 62], "return_valid": [14, 24, 62], "uninterpret": [14, 24, 62], "63": [14, 24, 25, 62], "succeed": [14, 24, 62], "rule": [14, 24, 62], "NOT": [14, 24, 40, 42, 51, 62], "safe": [14, 24, 62], "underflow": [14, 24, 62], "precis": [14, 17, 24, 51, 62], "capac": [14, 24, 62], "hold": [14, 24, 62], "cumprod": [14, 24, 50, 54], "cumul": [14, 24, 28, 49, 54], "th": [14, 24, 31, 54, 63], "uniform": [14, 24, 26, 33, 51, 53, 54, 57], "5728783400481925": [14, 24, 54], "0472855509390593": [14, 24, 54], "33": [14, 24, 54], "78523998586553": [14, 24, 54], "134": [14, 24, 54], "05309592737584": [14, 24, 54], "450": [14, 24, 54], "21589865655358": [14, 24, 54], "choos": [14, 24, 47, 54, 66], "claus": [14, 24, 54], "unequ": [14, 24, 54], "a1": [14, 19, 24, 54], "a2": [14, 19, 24, 54], "cond": [14, 24, 54], "create_pdarrai": 14, "gpu": [14, 25], "six": [14, 34, 67], "parse_single_valu": 14, "msg": [14, 23], "mydtyp": [14, 25, 62], "attributi": [14, 25, 62], "resid": [14, 25, 34, 40, 62], "opeqop": [14, 25], "__array_priority__": [14, 25], "1000": [14, 19, 25, 60], "__del__": [14, 25], "__bool__": [14, 25], "format_oth": [14, 25], "__add__": [14, 25, 34], "__radd__": [14, 25, 34], "__sub__": [14, 25], "__rsub__": [14, 25], "__mul__": [14, 25], "__rmul__": [14, 25], "__truediv__": [14, 25], "__rtruediv__": [14, 25], "__floordiv__": [14, 25], "__rfloordiv__": [14, 25], "__mod__": [14, 25], "__rmod__": [14, 25], "__lshift__": [14, 25], "__rlshift__": [14, 25], "__rshift__": [14, 25], "__rrshift__": [14, 25], "__and__": [14, 25], "__rand__": [14, 25], "__or__": [14, 25], "__ror__": [14, 25], "__xor__": [14, 25], "__rxor__": [14, 25], "__pow__": [14, 25], "__rpow__": [14, 25], "__lt__": [14, 25], "__gt__": [14, 25], "__le__": [14, 25], "__ge__": [14, 25], "__neg__": [14, 25], "__invert__": [14, 25], "__iadd__": [14, 25], "__isub__": [14, 25], "__imul__": [14, 25], "__itruediv__": [14, 25], "__imod__": [14, 25], "__ifloordiv__": [14, 25], "__ilshift__": [14, 25], "__irshift__": [14, 25], "__iand__": [14, 25], "__ior__": [14, 25], "__ixor__": [14, 25], "__ipow__": [14, 25], "is_sort": [14, 25, 50, 54, 60], "monoton": [14, 25, 40, 54, 60], "decreas": [14, 25, 26, 40, 54, 57, 60], "numeric_and_bool_scalar": [14, 25], "occurr": [14, 22, 24, 25, 34, 54, 60, 67], "cov": [14, 25], "y": [14, 25, 28, 43], "covari": [14, 25], "coeffici": [14, 25], "mink": [14, 25, 35, 45, 50, 54, 60], "k": [14, 25, 35, 54, 60], "maxk": [14, 25, 35, 45, 50, 54, 60], "argmink": [14, 25, 50, 54, 60], "argmaxk": [14, 25, 50, 54, 60], "popcount": [14, 25], "pariti": [14, 25], "clz": [14, 25], "lead": [14, 25, 34], "ctz": [14, 25], "trail": [14, 25, 34], "rotl": [14, 25], "rotat": [14, 25], "rotr": [14, 25], "astyp": [14, 25, 34], "shorthand": [14, 25, 34], "give": [14, 25, 32, 42, 46, 64, 66], "fastest": [14, 25], "fortran": [14, 25, 62], "to_cuda": [14, 25], "numba": [14, 25], "devicend": [14, 25], "builtin": [14, 25], "devicendarrai": [14, 25], "importerror": [14, 25], "cuda": [14, 25], "modulenotfounderror": [14, 25], "cours": [14, 25], "later": [14, 25, 34, 46], "former": [14, 25, 34, 67], "free": [14, 25, 34], "registr": [14, 25, 34], "list_registri": [14, 16, 25], "unregister_pdarray_by_nam": [14, 25], "100": [14, 24, 25, 38, 54], "my_zero": [14, 25], "potenti": [14, 25], "reconnect": [14, 25], "attahc": [14, 25], "could": [14, 23, 25, 28, 31, 34, 45, 67], "bound": [14, 25, 26, 31, 35, 57, 63], "consecut": [14, 26, 32, 57], "third": [14, 26, 57], "zerodivisionerror": [14, 26, 57], "neg": [14, 26, 31, 57, 61, 63], "max_bit": [14, 26, 51], "compos": [14, 23, 26, 34, 40, 51], "dequ": [14, 26, 51], "nbyte": [14, 26, 34, 51], "malform": [14, 23, 26, 51], "overwhelm": [14, 26, 51], "bandwidth": [14, 26, 51], "pdrrai": [14, 26, 51], "twice": [14, 26, 51], "recurs": [14, 26, 51], "respect": [14, 24, 25, 26, 27, 35, 51, 57], "Ones": [14, 26, 57], "parseabl": [14, 26, 57], "ones_lik": [14, 26, 50, 57], "zeros_lik": [14, 26, 50, 57], "issupportedint": 14, "num": 14, "strings_pdarrai": [14, 34], "bytes_s": [14, 34], "composit": [14, 34], "raw": [14, 34, 67], "rep_msg": [14, 31, 34, 45], "factori": [14, 15, 23, 34], "1234": [14, 34], "probabl": [14, 34], "from_part": [14, 31, 34], "offset_attrib": [14, 34], "bytes_attrib": [14, 34], "assembl": [14, 34], "entiti": [14, 34], "get_length": [14, 34], "toencod": [14, 34], "fromencod": [14, 34], "utf": [14, 34], "decod": [14, 34], "to_low": [14, 34], "uppercas": [14, 26, 34], "lowercas": [14, 26, 34], "to_upp": [14, 34], "to_titl": [14, 34], "titlecas": [14, 34], "is_low": [14, 34], "is_upp": [14, 34], "upper": [14, 34], "is_titl": [14, 34], "mix": [14, 34, 35, 55], "strip": [14, 34], "char": [14, 34], "whitespac": [14, 17, 34], "combin": [14, 34, 35], "1string": [14, 34], "cached_regex_pattern": [14, 34], "regex": [14, 34, 67], "pattern": [14, 21, 22, 34, 38, 59, 67], "purge_cached_regex_pattern": [14, 34], "purg": [14, 34], "_empty_pattern_verif": [14, 34], "_get_match": [14, 34], "fetch": [14, 34], "find_loc": [14, 22, 34, 50, 67], "postit": [14, 34, 67], "positon": [14, 34, 67], "findal": [14, 22, 34, 50, 67], "num_match": [14, 34, 67], "regular": [14, 34, 50], "1_2___": [14, 21, 34, 67], "____": [14, 21, 34, 67], "__4___5____6___7": [14, 21, 34, 67], "span": [14, 34, 67], "begin": [14, 34, 61, 67], "fullmatch": [14, 34, 50, 67], "whole": [14, 34, 67], "maxsplit": [14, 22, 34, 67], "return_seg": [14, 22, 34, 67], "5____6___7": [14, 34, 67], "return_match_origin": [14, 21, 22, 34, 67], "conta": [14, 34, 67], "___": [14, 34, 67], "__": [14, 21, 34, 67], "sub": [14, 22, 31, 34, 50, 67], "repl": [14, 22, 34, 67], "obtain": [14, 22, 34, 67], "substitut": [14, 22, 34, 40, 42, 67], "substitu": [14, 34, 67], "subn": [14, 34, 50, 67], "new_str": [14, 34, 67], "number_of_substit": [14, 34, 67], "re2": [14, 34, 42, 67], "lookahead": [14, 34, 67], "lookbehind": [14, 34, 67], "rasi": [14, 34, 67], "ior": [14, 34, 67], "strings_end": [14, 34, 67], "strings_start": [14, 34, 67], "ing": [14, 34, 67], "flat": [14, 34, 67], "peel": [14, 34, 50, 67], "rpeel": [14, 34, 50, 67], "orig": [14, 34, 67], "one_two": [14, 34, 67], "three_____four____f": [14, 34, 67], "under_flat": [14, 34, 67], "under_map": [14, 34, 67], "includedelimit": [14, 34, 67], "keepparti": [14, 34, 67], "fromright": [14, 34, 67], "off": [14, 34, 67], "partit": [14, 34, 67], "experiment": [14, 34, 67], "sought": [14, 34, 67], "prepend": [14, 31, 34, 50, 67], "remaind": [14, 34, 67], "stick": [14, 34, 50, 67], "lstick": [14, 34, 50, 67], "rpartit": [14, 34, 67], "compar": [14, 34, 40, 49, 51, 67], "toleft": [14, 34, 67], "insert": [14, 34, 67], "get_prefix": [14, 31, 34, 50, 63], "return_origin": [14, 31, 34, 63], "proper": [14, 31, 34, 36, 63], "enough": [14, 31, 34, 63], "mask": [14, 31, 34, 63], "origin_indic": [14, 31, 34, 63], "get_suffix": [14, 31, 34, 50, 63], "ith": [14, 34], "siphash128": [14, 34], "balanc": [14, 34], "realist": [14, 34], "collis": [14, 24, 34], "neglig": [14, 34], "compil": [14, 34, 42, 43, 44, 47], "ssegmentedstr": [14, 34], "usehash": [14, 34], "mere": [14, 34], "hello": [14, 34, 51, 67], "my": [14, 34, 51, 67], "world": [14, 34, 51, 67], "u5": [14, 34, 51, 67], "segstr": [14, 23, 34], "_comp_to_ndarrai": [14, 34], "comp": [14, 34], "strings_arrai": [14, 34], "pack": [14, 34], "save_offset": [14, 34], "deriv": [14, 17, 18, 23, 24, 34, 51, 62], "unregister_strings_by_nam": [14, 34], "clear": [14, 25], "smallest": [14, 25, 32, 54, 64], "outperform": [14, 25, 54], "grow": [14, 25, 54], "beyond": [14, 25, 38, 54], "certain": [14, 25, 45, 54], "million": [14, 24, 25, 54], "degred": [14, 25, 54], "largest": [14, 25, 32, 54, 64], "degrad": [14, 25, 54], "maxmum": [14, 25, 54], "odd": [14, 25], "lz": [14, 25], "62": [14, 25], "61": [14, 25], "60": [14, 25], "rot": [14, 25], "160": [14, 25], "384": [14, 25], "896": [14, 25], "2048": [14, 25], "4608": [14, 25], "512": [14, 25], "256": [14, 25], "56": [14, 25], "18": [14, 25, 54, 55, 61], "pdarri": [14, 25], "pdaarrai": [14, 25], "At": [14, 25], "elsewher": [14, 25], "retain": [14, 25, 36], "4142135623730951": [14, 25], "7320508075688772": [14, 25], "power": [14, 25, 39, 61], "pwr": [14, 25], "uniniti": [14, 25], "27": [14, 25, 38, 55], "attach_pdarrai": [14, 25], "algorithm": [14, 24, 33, 40, 53], "sortingalgorithm": [14, 33, 53], "radixsortlsd": [14, 33, 53], "digit": [14, 33, 53], "radix": [14, 33, 53], "stabl": [14, 33, 53, 55], "resili": [14, 33, 53], "intens": [14, 33, 38, 53, 57], "forward": [14, 33, 47, 53, 63], "lexicograph": [14, 33, 53], "pda1": [14, 27, 65], "pda2": [14, 27, 65], "assume_uniqu": [14, 27, 65], "1d": [14, 27, 31, 32, 63, 64, 65], "multia": [14, 27, 65], "multib": [14, 27, 65], "setdiff1d": [14, 27, 31, 38, 50, 63, 65], "setxor1d": [14, 27, 31, 38, 50, 63, 65], "fill_valu": [14, 26], "deleg": [14, 24, 26, 57, 60], "accordingli": [14, 26, 57], "full_lik": [14, 26], "linearli": [14, 26, 35, 57], "evenli": [14, 24, 26, 57, 60], "along": [14, 26, 57], "greater": [14, 26, 57], "seed": [14, 26, 49, 57], "drawn": [14, 26, 57], "uniformli": [14, 26, 57], "undefin": [14, 26, 57], "92176432277231968": [14, 26, 57], "083130710959903542": [14, 26, 57], "68894208386667544": [14, 26, 57], "9160772326374946": [14, 26, 57], "353429832157099": [14, 26, 57], "5392023718621486": [14, 26, 57], "invok": [14, 23, 26], "30013431967121934": [14, 26], "47383036230759112": [14, 26], "0441791878997098": [14, 26], "standard_norm": [14, 26], "draw": [14, 26], "mu": [14, 26], "sigma": [14, 26], "68586185091150265": [14, 26], "1723810583573375": [14, 26], "567584107142031": [14, 26], "random_strings_uniform": [14, 26], "minlen": [14, 26], "maxlen": [14, 26], "printabl": [14, 26], "random_strings_lognorm": [14, 26], "tvkj": [14, 26], "ewab": [14, 26], "hfmd": [14, 26], "4k": [14, 26], "hff": [14, 26], "logmean": [14, 26], "logstd": [14, 26], "lognorm": [14, 26], "exp": [14, 24, 26, 50, 54], "heavi": [14, 26], "toward": [14, 26], "tvkjte": [14, 26], "abocorhfm": [14, 26], "ludmmgtb": [14, 26], "kwoqnphz": [14, 26], "vsxrrl": [14, 26], "fp": [14, 26], "3q4kc": [14, 26], "hf": [14, 26], "ie": [14, 26], "djkba": [14, 26], "5oz1": [14, 26], "from_seri": [14, 26], "overridden": [14, 23, 26, 30], "unknown": [14, 17, 26], "situat": [14, 26], "datetim": [14, 23, 26, 35], "timedelta": [14, 23, 26, 35], "57600036956445599": [14, 26], "41619265571741659": [14, 26], "6615356693784662": [14, 26], "choic": [14, 26, 42], "to_datetim": [14, 26], "2018": [14, 26], "datetime64": [14, 26, 35], "01": [14, 26], "1514764800000000000": [14, 26], "nanosecond": [14, 26, 35], "bigint_from_uint_arrai": [14, 26], "bigint_to_uint_arrai": [14, 26], "18446744073709551616": [14, 26], "18446744073709551617": [14, 26], "18446744073709551618": [14, 26], "18446744073709551619": [14, 26], "18446744073709551620": [14, 26], "ab": [14, 24, 35, 50, 54], "natur": [14, 24, 54], "logarithm": [14, 24, 54], "3025850929940459": [14, 24, 54], "6051701859880918": [14, 24, 54], "3219280948873626": [14, 24, 54], "6438561897747253": [14, 24, 54], "exponenti": [14, 24, 54], "7182818284590451": [14, 24, 54], "3890560989306504": [14, 24, 54], "085536923187668": [14, 24, 54], "54": [14, 24, 54], "598150033144236": [14, 24, 54], "84010843172504": [14, 24, 54], "46": [14, 24, 54], "454368507659211": [14, 24, 54], "5571769623557188": [14, 24, 54], "494295836924771": [14, 24, 54], "13": [14, 24, 54, 55, 60, 61], "478894913238722": [14, 24, 54], "cumsum": [14, 24, 50, 54], "1598310770203937": [14, 24, 54], "4110385860243131": [14, 24, 54], "1622479306453748": [14, 24, 54], "710615785506533": [14, 24, 54], "945880905466208": [14, 24, 54], "sin": [14, 24, 50, 54], "sine": [14, 24, 54], "cosin": [14, 24, 54], "siphash": [14, 24], "risk": [14, 24], "few": [14, 24, 38], "small": [14, 24, 40, 51], "strongli": [14, 24], "cryptograph": [14, 24], "applic": [14, 24, 51, 57, 59], "Not": [14, 24, 35, 58], "emploi": [14, 24], "adversari": [14, 24], "engin": [14, 24], "histogram": [14, 24, 28, 50], "bin": [14, 24, 28, 42, 43, 44, 47, 60], "edg": [14, 24, 28, 60], "notimplementederror": [14, 24, 60], "value_count": [14, 24, 32, 50, 60, 64], "matplotlib": [14, 24, 28, 46, 60], "pyplot": [14, 24, 28, 60], "plt": [14, 24, 28, 60], "nbin": [14, 24, 60], "h": [14, 24, 28, 35, 49, 60, 66], "unique_valu": [14, 24, 60], "return_count": [14, 24, 60], "isnan": [14, 24], "enumer": [14, 23, 24], "join_on_eq_with_dt": [14, 19], "t1": [14, 19], "t2": [14, 19], "pred": [14, 19], "result_limit": [14, 19], "inner": [14, 19], "window": [14, 19, 30, 40, 48], "predic": [14, 19], "timestamp": [14, 19], "milli": [14, 19], "result_array_on": [14, 19], "true_dt": [14, 19], "abs_dt": [14, 19], "pos_dt": [14, 19], "enableverbos": [14, 20], "debug": [14, 20], "disableverbos": [14, 20], "loglevel": [14, 20], "disabl": [14, 20], "defaultt": [14, 20], "akab": 14, "_base_unit": [14, 35], "_unit2normunit": [14, 35], "_unit2factor": [14, 35], "_get_factor": [14, 35], "_ident": [14, 35], "_timescalar": [14, 35], "_abstractbasetim": [14, 35], "face": [14, 31, 35, 62], "albeit": [14, 35], "rel": [14, 35], "behind": [14, 35], "scene": [14, 35], "transpar": [14, 35], "_get_callback": [14, 35], "floor": [14, 35], "freq": [14, 35], "round": [14, 35], "nearest": [14, 35], "m": [14, 21, 31, 35, 42, 47, 67], "__class__": [14, 35], "ceil": [14, 35], "midpoint": [14, 35], "_is_datetime_scalar": [14, 35], "_is_timedelta_scalar": [14, 35], "_scalar_callback": [14, 35], "datetimeindex": [14, 35], "timeseri": [14, 35], "denot": [14, 35], "carri": [14, 35], "sensit": [14, 35], "sec": [14, 35], "accept": [14, 32, 35, 64], "week": [14, 35, 59], "w": [14, 21, 35, 67], "hour": [14, 35], "minut": [14, 35], "millisecond": [14, 35], "l": [14, 17, 35, 38, 42, 51], "microsecond": [14, 35], "unlik": [14, 31, 35], "month": [14, 35], "year": [14, 35], "day_of_year": [14, 35], "dayofyear": [14, 35], "day_of_week": [14, 35], "dayofweek": [14, 35, 59], "weekdai": [14, 35], "weekofyear": [14, 35], "is_leap_year": [14, 35], "supported_with_datetim": [14, 35], "supported_with_r_datetim": [14, 35], "supported_with_timedelta": [14, 35], "supported_with_r_timedelta": [14, 35], "supported_opeq": [14, 35], "supported_with_pdarrai": [14, 35], "supported_with_r_pdarrai": [14, 35], "_ensure_compon": [14, 35], "isocalendar": [14, 35], "otherclass": [14, 35], "durat": [14, 35], "timedeltaindex": [14, 35], "timedelta64": [14, 35], "total_second": [14, 35], "date_rang": [14, 35], "period": [14, 35], "tz": [14, 35], "impos": [14, 35], "dateoffset": [14, 35], "5h": [14, 35], "offset_alias": [14, 35], "alias": [14, 35], "tzinfo": [14, 35], "zone": [14, 35], "asia": [14, 35], "hong_kong": [14, 35], "timezon": [14, 35], "naiv": [14, 35], "midnight": [14, 35], "boundari": [14, 35], "effect": [14, 35, 65], "rng": [14, 35], "Of": [14, 35], "learn": [14, 35], "timedelta_rang": [14, 35], "allsymbol": [14, 16], "__allsymbols__": [14, 16], "registeredsymbol": [14, 16], "__registeredsymbols__": [14, 16], "list_symbol_t": [14, 16], "pretty_print_inform": [14, 16], "akbool": 14, "akint64": 14, "getarkoudalogg": 14, "logformat": 14, "default_log_format": 14, "conveni": [14, 44, 51], "instanti": [14, 23], "streamhandl": 14, "consol": 14, "lineno": 14, "levelnam": 14, "dynam": 14, "gen_rang": [14, 31], "pair": [14, 18, 23, 31, 63], "_aggreg": [14, 31], "func": [14, 31], "non_empti": [14, 31], "non_empty_count": [14, 31], "valsiz": [14, 31], "sent": [14, 23, 31], "_from_attach_return_msg": [14, 31], "from_multi_arrai": [14, 31], "transpos": [14, 31, 51], "_compute_non_empti": [14, 31], "vertic": [14, 31, 32, 63], "horizont": [14, 31, 32, 63, 64], "unord": [14, 31], "yet": [14, 31, 51, 55], "get_ngram": [14, 31, 50, 63], "gram": [14, 31, 63], "came": [14, 31, 63], "ngram": [14, 31, 50], "_normalize_index": [14, 31], "j": [14, 31, 63], "get_jth": [14, 31, 50, 63], "set_jth": [14, 31, 50, 63], "v": [14, 15, 31, 42, 49, 63], "get_length_n": [14, 31, 50, 63], "increas": [14, 31, 63], "append_singl": [14, 31, 50, 63], "prepend_singl": [14, 31, 50, 63], "remove_repeat": [14, 31, 50, 63], "return_multipl": [14, 31, 63], "condens": [14, 31, 63], "norepeat": [14, 31, 63], "segarr": [14, 31, 63], "segment_suffix": [14, 31], "_segment": [14, 31], "value_suffix": [14, 31], "_valu": [14, 31], "top": [14, 31, 32, 42, 48, 64], "nest": [14, 31], "seg_a": [14, 31, 63], "seg_b": [14, 31, 63], "setdiff": [14, 31, 50, 63], "setxor": [14, 31, 50, 63], "unregister_segarray_by_nam": [14, 31], "akfloat64": 14, "convert_if_categor": [14, 36], "generic_concat": [14, 36], "get_callback": [14, 36], "earlier": [14, 36, 38], "maintain": [14, 15, 17, 51], "is_uniqu": [14, 15], "rtype": [14, 15, 32], "set_dtyp": [14, 15, 52], "to_dict": [14, 15], "_check_typ": [14, 15], "_merg": [14, 15], "_merge_al": [14, 15], "idx_list": [14, 15], "_check_align": [14, 15], "multiindex": [14, 15, 32, 52, 64], "enter": [14, 32, 51, 64], "str_acc": [14, 32], "lst": [14, 32], "scaler": [14, 32, 64], "special": [14, 32, 62, 64], "_make_binop": [14, 32], "_make_unaryop": [14, 32], "_make_aggop": [14, 32], "topn": [14, 32, 64], "sort_index": [14, 32, 64], "frequent": [14, 32, 45, 64], "diff": [14, 32], "to_datafram": [14, 32], "index_label": [14, 32], "value_label": [14, 32], "frame": [14, 32, 64], "registerd": [14, 32], "_all_align": [14, 32], "verticl": [14, 32, 64], "pdconcat": [14, 32, 64], "akuint64": 14, "plot_dist": [14, 28], "xlabel": [14, 28], "newfig": [14, 28], "graph": [14, 28, 59], "figur": [14, 28], "get_filetyp": 17, "read_parquet": [17, 51], "read_hdf": [17, 51], "h5l": 17, "imit": 17, "technic": 17, "get_null_indic": 17, "shell": [17, 44, 51], "funciton": 17, "datasetnam": [17, 51], "arkouda_typ": 17, "get_dataset": [17, 50, 51], "file_type_to_int": 17, "mode_str_to_int": 17, "allow_error": [17, 51], "strict_typ": 17, "calc_string_offset": [17, 51], "sign": [17, 51, 58, 62], "uint32": [17, 51, 54, 57, 60, 62, 67], "due": [17, 51], "failur": [17, 42, 51], "tell": [17, 51], "versu": [17, 51], "glob": [17, 51], "independ": [17, 30, 51], "sequenti": [17, 51], "name_prefix": [17, 51], "h5": [17, 51], "import_data": [17, 50, 51], "read_path": [17, 51], "write_fil": [17, 51], "return_obj": [17, 51], "runtimewarn": [17, 51], "dataset_nam": [17, 51], "ak_data": [17, 51], "path_prefix": [17, 51], "overwritten": 17, "wrong": [17, 66], "detect": [17, 51], "termin": [17, 40, 47, 51, 66], "invalid": [17, 51], "filenotfound": [17, 51], "read_": [17, 51], "name_prefix_local": [17, 51], "filetyp": [17, 51], "save_al": [17, 51], "datsetnam": [17, 51], "stricttyp": [17, 51], "get_directori": 18, "pathlib": [18, 30], "write_line_to_fil": 18, "unsupportedopt": 18, "delimited_file_to_dict": 18, "unsupportedoper": 18, "dict_to_delimited_fil": 18, "oerror": 18, "matchtyp": [21, 22, 67], "parent_entry_nam": [21, 22], "match_typ": [21, 22, 50, 67], "indici": [21, 67], "find_match": [21, 50, 67], "group_num": [21, 67], "return_group_origin": [21, 67], "isaac": [21, 67], "newton": [21, 67], "physic": [21, 67], "calculu": [21, 67], "gottfri": [21, 67], "leibniz": [21, 67], "math": [21, 67], "locationsinfo": 22, "get_match": 22, "return_num_sub": 22, "objecttyp": 23, "messagetyp": 23, "parameterobject": 23, "__slot": 23, "messageformat": 23, "_build_pdarray_param": 23, "ot": 23, "_build_strings_param": 23, "_build_list_param": 23, "_build_dict_param": 23, "_build_gen_param": 23, "singular": 23, "etc": [23, 43, 44, 47], "generate_dispatch": 23, "dispatch": 23, "requestmessag": 23, "cmd": [23, 45], "asdict": 23, "attribut": [23, 25, 34, 51, 55, 62], "replymessag": 23, "__slots__": 23, "msgtype": 23, "fromdict": 23, "metadata": 23, "repli": 23, "username_token": 30, "generate_token": 30, "secret": 30, "token_hex": 30, "hexidecim": 30, "get_home_directori": 30, "platform": 30, "home": [30, 42, 45], "o": [30, 48, 50], "expandus": 30, "get_arkouda_client_directori": 30, "artifact": 30, "environ": [30, 40, 45, 46], "get_usernam": 30, "host": [30, 42], "environmenterror": 30, "linux": [30, 42, 47, 48], "maco": [30, 43, 48], "aka": 30, "darwin": 30, "generate_username_token_json": 30, "report_mem": 36, "register_al": 36, "attach_al": 36, "unregister_al": 36, "enrich_inplac": 36, "keynam": 36, "seg": 36, "unregister_by_nam": 36, "page": [37, 42], "auto": 37, "arkouda": [37, 43, 44, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 59, 60, 61, 62, 65], "sphinx": [37, 42, 46], "autoapi": [37, 46], "aim": 38, "introduct": 38, "commonli": 38, "exhaust": 38, "descript": [38, 50], "ak_arr": 38, "easili": 38, "np_arr": 38, "52": 38, "84": 38, "80": 38, "71": 38, "aid": 38, "transit": 38, "toolset": 38, "IN": 38, "ak_in1d": 38, "ak_int": 38, "m1": 38, "m2": 38, "ak_in1dmult": 38, "ak_in1dmulti": 38, "ak_intmult": 38, "thing": 38, "abov": [38, 40, 42, 43, 58, 67], "though": 38, "extrem": 38, "relat": 38, "let": 38, "sever": [38, 51, 54, 57], "column_nam": 38, "column_data": 38, "rememb": 38, "fname": 38, "john": 38, "jane": 38, "jake": 38, "lname": 38, "smith": 38, "brown": 38, "ag": 38, "37": 38, "35": 38, "50": 38, "salari": 38, "75000": 38, "77000": 38, "100000": 38, "35000": 38, "f_name": 38, "l_name": 38, "notic": 38, "demo": 38, "computation": 38, "interest": 38, "17": [38, 55, 61], "interact": [39, 40, 44, 46], "analyt": 39, "supercomput": 39, "guid": [40, 44], "pythonpath": 40, "nl": [40, 66], "listen": [40, 66], "your_machin": 40, "15461882265": 40, "token_str": 40, "session": 40, "ipython": 40, "jupyt": [40, 43, 44], "notebook": 40, "modul": [40, 51, 67], "node01": [40, 66], "syntax": [40, 61], "live": 40, "minval": 40, "maxval": 40, "evens1": 40, "evenind": 40, "evens2": 40, "ubiquit": 40, "reorder": 40, "still": [40, 67], "usag": [40, 49, 63, 66], "caus": [40, 42], "exit": [40, 47], "prerequisit": [42, 44], "proceed": 42, "download": [42, 43, 44, 48], "clone": [42, 48], "repo": [42, 43, 48], "further": [42, 48], "manag": [42, 43, 44, 46, 48], "md": [42, 44], "makefil": 42, "manual": [42, 44], "zeromq": [42, 46], "eval": 42, "anaconda3": [42, 43, 44], "comma": 42, "pip": [42, 43, 44], "tip": 42, "grep": [42, 47], "opt": [42, 43, 44], "homebrew": 42, "caskroom": [42, 44], "miniforg": [42, 44], "python3": [42, 43], "site": 42, "conda": [42, 43, 44, 46], "channel": 42, "nompi_hf9525e8_104": 42, "forg": 42, "rpath": 42, "cmake": [42, 43, 46], "rhel": 42, "cento": [42, 43], "cm_version": 42, "wget": [42, 43], "kitwar": 42, "x86_64": [42, 43, 47], "sh": [42, 43], "licens": 42, "subdir": 42, "boost": 42, "cpp": 42, "thrift": 42, "utf8proc": 42, "virtual": 42, "venv": [42, 43], "activ": [42, 43, 44, 59], "upgrad": [42, 46], "wheel": 42, "deactiv": 42, "rm": 42, "rf": 42, "dist": 42, "whl": 42, "tar": [42, 43, 44], "gz": [42, 43, 44], "click": [42, 48], "chpldoc": [42, 43], "frontend": 42, "backend": 42, "browser": 42, "ghpage": 42, "push": 42, "next": [42, 45, 66], "navig": [42, 43, 46], "final": 42, "scroll": 42, "folder": 42, "homepag": 42, "featur": [42, 45, 51, 59], "particularli": [43, 45], "regard": 43, "distro": 43, "gcc": 43, "consequ": 43, "newer": 43, "devtoolset": 43, "packag": [43, 44, 46, 48], "leverag": 43, "kernel": 43, "sudo": [43, 47], "apt": 43, "m4": 43, "perl": 43, "bash": [43, 44], "mawk": 43, "pkg": 43, "config": [43, 45], "llvm": [43, 44, 47], "clang": 43, "libclang": 43, "cpp12": 43, "libedit": 43, "latest": [43, 44], "explod": 43, "lang": 43, "29": [43, 44, 46, 47, 55], "xvf": 43, "cd": [43, 44, 46], "chpl_home": 43, "pwd": 43, "setchplenv": [43, 44], "chplconfig": 43, "chpl_comm": 43, "gasnet": 43, "chpl_comm_substr": 43, "smp": 43, "chpl_target_cpu": 43, "gasnet_quiet": 43, "chpl_rt_oversubscrib": 43, "ye": 43, "chpl_re2": [43, 44], "bundl": [43, 44], "chpl_llvm": [43, 44], "chpl_gmp": [43, 44], "linux64": 43, "yum": 43, "devel": 43, "gawk": 43, "curl": 43, "incompat": 43, "el7": 43, "scl": 43, "rh": 43, "highli": 43, "2020": 43, "07": 43, "bashrc": [43, 47], "yml": [43, 44, 46], "account": [44, 47], "chipset": 44, "visit": 44, "quickstart": [44, 48], "xzf": 44, "zsh": 44, "brew": 44, "rc": 44, "gnu": [44, 47], "successfulli": 44, "hello3": 44, "datapar": 44, "abl": [44, 51], "appl": 44, "silicon": 44, "x86": 44, "architectur": 44, "exclud": [44, 45], "progress": 44, "life": [44, 46], "cycl": [44, 46], "sync": 44, "funcion": 45, "prior": 45, "valuabl": 45, "switch": [45, 55], "arkouda_config_fil": 45, "src": 45, "totestmsg": 45, "testmsg": 45, "might": 45, "taken": 45, "kextrememsg": 45, "registerfunct": 45, "minkmsg": 45, "getmodulenam": 45, "maxkmsg": 45, "accomplish": [45, 51], "approach": [45, 63], "script": [45, 49], "generic_msg": 45, "test_command": 45, "__dict__": 45, "sometim": [45, 55, 62], "difficult": 45, "discov": 45, "saveusedmodul": 45, "particular": 45, "usedmodul": 45, "inspect": [45, 51], "wish": 45, "benchmark": [45, 49], "pyzmq": 46, "typeguard": 46, "tabul": 46, "pyfiglet": 46, "h5py": [46, 51], "pyarrow": [46, 51], "pexpect": 46, "pytest": 46, "argpars": 46, "furo": 46, "myst": 46, "parser": 46, "linkifi": 46, "ast": 46, "mypi": 46, "931": 46, "990": 46, "yaml": 46, "env_nam": 46, "yaml_fil": 46, "prune": 46, "path_to_arkouda": 46, "strategi": [46, 47, 51], "eager": 46, "subsystem": 47, "wsl": 47, "launch": [47, 50], "rout": 47, "suggest": 47, "ubuntu": 47, "04": 47, "lt": 47, "tutori": 47, "onlin": 47, "microsoft": 47, "app": 47, "forget": 47, "symlink": 47, "tblgen": 47, "libtinfow": 47, "ln": 47, "libtic": 47, "plan": [47, 48, 60, 62], "powershel": 47, "id": [47, 59], "vcxsrv": 47, "x410": 47, "whichev": 47, "firewal": 47, "xserver": 47, "hous": 47, "conf": 47, "nameserv": 47, "awk": 47, "serv": 48, "involv": 48, "wsl2": 48, "measur": 49, "node": [49, 51], "trial": 49, "100000000": 49, "index_s": 49, "value_s": 49, "alpha": 49, "preprocess": 50, "persist": 50, "arithmet": [50, 62], "scan": 50, "gather": 50, "scatter": 50, "summar": [50, 51], "dedupl": 50, "setop": 50, "creation": 50, "parallel": [51, 62, 65], "smaller": 51, "primarili": 51, "columnar": 51, "spread": 51, "mpi": 51, "layer": 51, "pipelin": [51, 67], "csv": 51, "too": 51, "aggress": 51, "hundr": 51, "thousand": 51, "text": 51, "ingest": [51, 67], "unfortun": 51, "reconstruct": 51, "customiz": 51, "would": [51, 54, 59], "taht": 51, "purpos": [52, 58, 64], "autoclass": 52, "major": [52, 58, 64], "offer": [52, 58, 64, 67], "16": [54, 55, 61], "mathemat": 54, "int8": [54, 57, 60, 62, 67], "int16": [54, 57, 60, 62, 67], "int32": [54, 57, 60, 62, 67], "uint16": [54, 57, 60, 62, 67], "multiplex": 54, "19": [55, 61], "26": 55, "28": 55, "advanc": 55, "talk": 55, "org": 55, "cartesian": 55, "coordin": 55, "wherea": [55, 67], "discourag": [55, 56, 58, 62, 63, 67], "forc": [55, 56, 58, 62, 67], "concept": 56, "almost": [56, 58, 62, 67], "comparison": [56, 62, 63, 67], "liter": [56, 67], "alon": [56, 67], "orient": [56, 58, 62, 67], "unrel": 57, "movement": 57, "unsign": 58, "ieee": [58, 62], "1073741824": 58, "workhors": 59, "scienc": 59, "reli": 59, "imagin": 59, "bydayofweek": 59, "numid": 59, "013": 60, "36": 60, "934176000000015": 60, "07734942223993": 60, "assig": 61, "42": 61, "ind": 61, "matlab": 61, "outer": 61, "touch": 61, "expans": 61, "lim": 61, "backbon": 62, "And": 62, "expos": 62, "incorpor": 62, "implicit": 62, "explicit": 62, "loss": 63, "functioanl": 63, "strucutur": 63, "abil": 63, "arraysetop": 65, "shown": 66, "sai": 66, "someth": 66, "went": 66, "reachabl": 66, "remot": 66, "wide": 67, "compris": 67, "whenev": 67, "threshold": 67, "guidelin": 67, "pipe": 67, "googl": 67, "sacrific": 67, "notabl": 67, "exchang": 67, "linear": 67, "stack": 67}, "objects": {"": [[14, 0, 0, "-", "arkouda"]], "arkouda": [[14, 1, 1, "", "ARKOUDA_SUPPORTED_DTYPES"], [14, 1, 1, "", "AllSymbols"], [55, 2, 1, "", "ArrayView"], [14, 2, 1, "", "BitVector"], [14, 5, 1, "", "BitVectorizer"], [14, 2, 1, "", "CachedAccessor"], [56, 2, 1, "", "Categorical"], [14, 1, 1, "", "DTypeObjects"], [14, 1, 1, "", "DTypes"], [58, 2, 1, "", "DataFrame"], [14, 2, 1, "id911", "Datetime"], [14, 2, 1, "", "DatetimeAccessor"], [14, 2, 1, "", "ErrorMode"], [14, 2, 1, "", "Fields"], [59, 2, 1, "", "GroupBy"], [14, 2, 1, "", "IPv4"], [52, 2, 1, "", "Index"], [14, 2, 1, "", "MultiIndex"], [14, 7, 1, "", "NonUniqueError"], [14, 1, 1, "", "OrderType"], [14, 2, 1, "", "Properties"], [14, 1, 1, "", "RegisteredSymbols"], [14, 7, 1, "id420", "RegistrationError"], [14, 2, 1, "", "Row"], [14, 2, 1, "", "SegArray"], [64, 2, 1, "", "Series"], [14, 1, 1, "", "SortingAlgorithm"], [14, 2, 1, "", "StringAccessor"], [14, 2, 1, "id840", "Strings"], [14, 2, 1, "", "Timedelta"], [14, 2, 1, "", "_AbstractBaseTime"], [14, 1, 1, "", "_BASE_UNIT"], [14, 2, 1, "", "_Timescalar"], [14, 1, 1, "", "__version__"], [14, 5, 1, "", "_aggregator"], [14, 5, 1, "", "_get_factor"], [14, 5, 1, "", "_identity"], [14, 1, 1, "", "_unit2factor"], [14, 1, 1, "", "_unit2normunit"], [3, 0, 0, "-", "_version"], [54, 5, 1, "", "abs"], [4, 0, 0, "-", "accessor"], [14, 5, 1, "", "akabs"], [14, 1, 1, "id535", "akbool"], [14, 5, 1, "id0", "akcast"], [14, 1, 1, "id651", "akfloat64"], [14, 1, 1, "id652", "akint64"], [14, 1, 1, "", "akuint64"], [14, 5, 1, "", "align"], [5, 0, 0, "-", "alignment"], [54, 5, 1, "", "all"], [14, 1, 1, "", "all_scalars"], [54, 5, 1, "", "any"], [57, 5, 1, "", "arange"], [54, 5, 1, "", "argmax"], [54, 5, 1, "", "argmaxk"], [54, 5, 1, "", "argmin"], [54, 5, 1, "", "argmink"], [53, 5, 1, "", "argsort"], [51, 5, 1, "", "array"], [6, 0, 0, "-", "array_view"], [14, 5, 1, "", "attach_pdarray"], [14, 1, 1, "", "bigint"], [14, 5, 1, "", "bigint_from_uint_arrays"], [14, 1, 1, "id113", "bitType"], [14, 1, 1, "", "bool"], [14, 1, 1, "", "bool_scalars"], [62, 5, 1, "", "cast"], [7, 0, 0, "-", "categorical"], [14, 5, 1, "", "check_np_dtype"], [14, 5, 1, "", "clear"], [8, 0, 0, "-", "client"], [9, 0, 0, "-", "client_dtypes"], [14, 5, 1, "", "clz"], [53, 5, 1, "", "coargsort"], [57, 5, 1, "", "concatenate"], [66, 5, 1, "", "connect"], [14, 5, 1, "", "convert_if_categorical"], [14, 5, 1, "", "corr"], [54, 5, 1, "", "cos"], [14, 5, 1, "", "cov"], [14, 5, 1, "id421", "create_pdarray"], [14, 5, 1, "", "ctz"], [54, 5, 1, "", "cumprod"], [54, 5, 1, "", "cumsum"], [10, 0, 0, "-", "dataframe"], [14, 5, 1, "", "date_operators"], [14, 5, 1, "", "date_range"], [11, 0, 0, "-", "decorators"], [14, 5, 1, "", "disableVerbose"], [14, 5, 1, "", "dtype"], [12, 0, 0, "-", "dtypes"], [14, 5, 1, "", "enableVerbose"], [54, 5, 1, "", "exp"], [51, 5, 1, "", "export"], [14, 5, 1, "", "find"], [14, 1, 1, "", "float64"], [14, 1, 1, "", "float_scalars"], [14, 5, 1, "id414", "from_series"], [14, 5, 1, "id762", "full"], [14, 5, 1, "", "full_like"], [14, 5, 1, "", "gen_ranges"], [14, 5, 1, "", "generic_concat"], [14, 5, 1, "", "getArkoudaLogger"], [14, 5, 1, "", "get_byteorder"], [14, 5, 1, "", "get_callback"], [51, 5, 1, "", "get_datasets"], [14, 5, 1, "", "get_server_byteorder"], [14, 5, 1, "", "get_versions"], [13, 0, 0, "-", "groupbyclass"], [14, 5, 1, "", "hash"], [60, 5, 1, "", "histogram"], [51, 5, 1, "", "import_data"], [65, 5, 1, "", "in1d"], [14, 5, 1, "", "in1d_intervals"], [15, 0, 0, "-", "index"], [16, 0, 0, "-", "infoclass"], [14, 5, 1, "", "information"], [14, 1, 1, "id301", "int64"], [14, 1, 1, "id303", "intTypes"], [14, 1, 1, "id302", "int_scalars"], [14, 5, 1, "", "intersect"], [65, 5, 1, "", "intersect1d"], [14, 5, 1, "", "interval_lookup"], [14, 5, 1, "", "intx"], [14, 5, 1, "", "invert_permutation"], [17, 0, 0, "-", "io"], [18, 0, 0, "-", "io_util"], [14, 5, 1, "", "ip_address"], [14, 5, 1, "id415", "isSupportedInt"], [14, 5, 1, "", "is_cosorted"], [14, 5, 1, "", "is_ipv4"], [14, 5, 1, "", "is_ipv6"], [54, 5, 1, "", "is_sorted"], [14, 5, 1, "", "isnan"], [19, 0, 0, "-", "join"], [14, 5, 1, "", "join_on_eq_with_dt"], [14, 5, 1, "", "left_align"], [57, 5, 1, "", "linspace"], [14, 5, 1, "id537", "list_registry"], [14, 5, 1, "", "list_symbol_table"], [51, 5, 1, "", "load"], [51, 5, 1, "", "load_all"], [54, 5, 1, "", "log"], [20, 0, 0, "-", "logger"], [14, 5, 1, "", "lookup"], [21, 0, 0, "-", "match"], [22, 0, 0, "-", "matcher"], [54, 5, 1, "", "max"], [54, 5, 1, "", "maxk"], [54, 5, 1, "", "mean"], [23, 0, 0, "-", "message"], [54, 5, 1, "", "min"], [54, 5, 1, "", "mink"], [24, 0, 0, "-", "numeric"], [14, 1, 1, "", "numeric_scalars"], [14, 1, 1, "", "numpy_scalars"], [14, 5, 1, "", "objtypedec"], [57, 5, 1, "", "ones"], [57, 5, 1, "", "ones_like"], [14, 5, 1, "", "parity"], [14, 5, 1, "", "parse_single_value"], [62, 2, 1, "", "pdarray"], [25, 0, 0, "-", "pdarrayclass"], [26, 0, 0, "-", "pdarraycreation"], [27, 0, 0, "-", "pdarraysetops"], [14, 5, 1, "", "plot_dist"], [28, 0, 0, "-", "plotting"], [14, 5, 1, "", "popcount"], [14, 5, 1, "", "power"], [14, 5, 1, "", "pretty_print_information"], [54, 5, 1, "", "prod"], [57, 5, 1, "", "randint"], [14, 5, 1, "", "random_strings_lognormal"], [14, 5, 1, "", "random_strings_uniform"], [51, 5, 1, "", "read"], [14, 5, 1, "", "register"], [14, 5, 1, "id115", "resolve_scalar_dtype"], [14, 5, 1, "", "right_align"], [14, 5, 1, "", "rotl"], [14, 5, 1, "", "rotr"], [29, 0, 0, "-", "row"], [14, 5, 1, "", "search_intervals"], [30, 0, 0, "-", "security"], [31, 0, 0, "-", "segarray"], [32, 0, 0, "-", "series"], [65, 5, 1, "", "setdiff1d"], [65, 5, 1, "", "setxor1d"], [54, 5, 1, "", "sin"], [14, 5, 1, "", "sort"], [14, 5, 1, "", "sorted"], [33, 0, 0, "-", "sorting"], [14, 5, 1, "", "sqrt"], [14, 5, 1, "", "standard_normal"], [54, 5, 1, "", "std"], [14, 1, 1, "id416", "str_"], [14, 1, 1, "", "str_scalars"], [14, 5, 1, "", "string_operators"], [34, 0, 0, "-", "strings"], [54, 5, 1, "", "sum"], [35, 0, 0, "-", "timeclass"], [14, 5, 1, "", "timedelta_range"], [14, 5, 1, "id417", "translate_np_dtype"], [14, 1, 1, "", "uint64"], [14, 1, 1, "", "uint8"], [14, 5, 1, "", "uniform"], [65, 5, 1, "", "union1d"], [65, 5, 1, "", "unique"], [14, 5, 1, "", "unregister_pdarray_by_name"], [14, 5, 1, "", "unsqueeze"], [36, 0, 0, "-", "util"], [60, 5, 1, "", "value_counts"], [54, 5, 1, "", "var"], [54, 5, 1, "", "where"], [14, 5, 1, "", "zero_up"], [57, 5, 1, "", "zeros"], [57, 5, 1, "", "zeros_like"]], "arkouda.ArrayView": [[14, 3, 1, "", "__getitem__"], [14, 3, 1, "", "__len__"], [14, 3, 1, "", "__repr__"], [14, 3, 1, "", "__setitem__"], [14, 3, 1, "", "__str__"], [55, 4, 1, "", "base"], [55, 4, 1, "", "dtype"], [55, 4, 1, "", "itemsize"], [55, 4, 1, "", "ndim"], [55, 4, 1, "", "order"], [55, 4, 1, "", "shape"], [55, 4, 1, "", "size"], [14, 3, 1, "", "to_hdf"], [14, 3, 1, "", "to_list"], [55, 5, 1, "", "to_ndarray"]], "arkouda.BitVector": [[14, 3, 1, "", "__getitem__"], [14, 3, 1, "", "__repr__"], [14, 3, 1, "", "__setitem__"], [14, 3, 1, "", "__str__"], [14, 3, 1, "", "_binop"], [14, 3, 1, "", "_cast"], [14, 3, 1, "", "_r_binop"], [14, 4, 1, "", "conserves"], [14, 3, 1, "", "format"], [14, 3, 1, "", "opeq"], [14, 3, 1, "", "to_list"], [14, 3, 1, "", "to_ndarray"]], "arkouda.CachedAccessor": [[14, 3, 1, "", "__get__"]], "arkouda.Categorical": [[56, 4, 1, "", "categories"], [56, 4, 1, "", "codes"], [56, 3, 1, "", "contains"], [56, 3, 1, "", "endswith"], [56, 3, 1, "", "from_codes"], [56, 4, 1, "", "ndim"], [56, 4, 1, "", "nlevels"], [56, 4, 1, "", "permutation"], [56, 4, 1, "", "segments"], [56, 4, 1, "", "shape"], [56, 4, 1, "", "size"], [56, 3, 1, "", "startswith"], [56, 5, 1, "", "to_ndarray"]], "arkouda.DataFrame": [[14, 4, 1, "", "COLUMN_CLASSES"], [14, 3, 1, "", "GroupBy"], [14, 3, 1, "", "__delitem__"], [14, 3, 1, "", "__dir__"], [14, 3, 1, "", "__getattr__"], [14, 3, 1, "", "__getitem__"], [14, 3, 1, "", "__len__"], [14, 3, 1, "", "__repr__"], [14, 3, 1, "", "__setitem__"], [14, 3, 1, "", "__str__"], [14, 3, 1, "", "_drop_column"], [14, 3, 1, "", "_drop_row"], [14, 3, 1, "", "_get_head_tail"], [14, 3, 1, "", "_get_head_tail_server"], [14, 3, 1, "", "_ipython_key_completions_"], [14, 3, 1, "", "_ncols"], [14, 3, 1, "", "_parse_col_name"], [14, 3, 1, "", "_prep_data"], [14, 3, 1, "", "_rename_column"], [14, 3, 1, "", "_rename_index"], [14, 3, 1, "", "_repr_html_"], [14, 3, 1, "", "_set_index"], [14, 3, 1, "", "_shape_str"], [14, 3, 1, "", "append"], [58, 5, 1, "", "apply_permutation"], [58, 5, 1, "", "argsort"], [14, 3, 1, "", "attach"], [58, 5, 1, "", "coargsort"], [14, 6, 1, "", "columns"], [58, 5, 1, "", "concat"], [58, 5, 1, "", "copy"], [14, 3, 1, "", "corr"], [58, 5, 1, "", "drop"], [58, 5, 1, "", "drop_duplicates"], [14, 6, 1, "", "dtypes"], [14, 6, 1, "", "empty"], [14, 3, 1, "", "filter_by_range"], [14, 3, 1, "", "from_pandas"], [14, 3, 1, "", "from_return_msg"], [58, 5, 1, "", "groupby"], [58, 5, 1, "", "head"], [14, 6, 1, "", "index"], [14, 6, 1, "", "info"], [14, 3, 1, "", "is_registered"], [14, 3, 1, "", "isin"], [14, 3, 1, "", "load"], [14, 3, 1, "", "memory_usage"], [14, 3, 1, "", "register"], [58, 5, 1, "", "rename"], [58, 5, 1, "", "reset_index"], [14, 3, 1, "", "sample"], [14, 6, 1, "", "shape"], [14, 6, 1, "", "size"], [58, 5, 1, "", "sort_values"], [58, 5, 1, "", "tail"], [14, 3, 1, "", "to_hdf"], [58, 5, 1, "", "to_pandas"], [14, 3, 1, "", "to_parquet"], [14, 3, 1, "", "unregister"], [14, 3, 1, "", "unregister_dataframe_by_name"], [14, 3, 1, "", "update_size"]], "arkouda.Datetime": [[14, 3, 1, "id937", "_ensure_components"], [14, 3, 1, "id939", "_get_callback"], [14, 3, 1, "id941", "_is_supported_scalar"], [14, 3, 1, "id940", "_scalar_callback"], [14, 6, 1, "id928", "date"], [14, 6, 1, "id918", "day"], [14, 6, 1, "id923", "day_of_week"], [14, 6, 1, "id921", "day_of_year"], [14, 6, 1, "id924", "dayofweek"], [14, 6, 1, "id922", "dayofyear"], [14, 6, 1, "id917", "hour"], [14, 6, 1, "id929", "is_leap_year"], [14, 3, 1, "id938", "isocalendar"], [14, 6, 1, "id913", "microsecond"], [14, 6, 1, "id914", "millisecond"], [14, 6, 1, "id916", "minute"], [14, 6, 1, "id919", "month"], [14, 6, 1, "id912", "nanosecond"], [14, 6, 1, "id915", "second"], [14, 3, 1, "id943", "sum"], [14, 4, 1, "id934", "supported_opeq"], [14, 4, 1, "id930", "supported_with_datetime"], [14, 4, 1, "id935", "supported_with_pdarray"], [14, 4, 1, "id931", "supported_with_r_datetime"], [14, 4, 1, "id936", "supported_with_r_pdarray"], [14, 4, 1, "id933", "supported_with_r_timedelta"], [14, 4, 1, "id932", "supported_with_timedelta"], [14, 3, 1, "id942", "to_pandas"], [14, 6, 1, "id926", "week"], [14, 6, 1, "id925", "weekday"], [14, 6, 1, "id927", "weekofyear"], [14, 6, 1, "id920", "year"]], "arkouda.ErrorMode": [[14, 4, 1, "", "ignore"], [14, 4, 1, "", "return_validity"], [14, 4, 1, "", "strict"]], "arkouda.Fields": [[14, 3, 1, "", "__setitem__"], [14, 3, 1, "", "_binop"], [14, 3, 1, "", "_cast"], [14, 3, 1, "", "_convert_strings"], [14, 3, 1, "", "_parse_scalar"], [14, 3, 1, "", "_r_binop"], [14, 3, 1, "", "format"], [14, 3, 1, "", "opeq"]], "arkouda.GroupBy": [[59, 3, 1, "", "AND"], [59, 3, 1, "", "OR"], [59, 3, 1, "", "XOR"], [59, 3, 1, "", "aggregate"], [59, 3, 1, "", "all"], [59, 3, 1, "", "any"], [59, 3, 1, "", "argmax"], [59, 3, 1, "", "argmin"], [59, 3, 1, "", "attach"], [59, 3, 1, "", "broadcast"], [59, 3, 1, "", "build_from_components"], [59, 3, 1, "", "count"], [59, 3, 1, "", "first"], [59, 3, 1, "", "is_registered"], [59, 4, 1, "", "logger"], [59, 3, 1, "", "max"], [59, 3, 1, "", "mean"], [59, 3, 1, "", "median"], [59, 3, 1, "", "min"], [59, 3, 1, "", "mode"], [59, 3, 1, "", "most_common"], [59, 4, 1, "", "ngroups"], [59, 4, 1, "", "nkeys"], [59, 3, 1, "", "nunique"], [59, 4, 1, "", "permutation"], [59, 3, 1, "", "prod"], [59, 3, 1, "", "register"], [59, 4, 1, "", "segments"], [59, 3, 1, "id0", "size"], [59, 3, 1, "", "std"], [59, 3, 1, "", "sum"], [59, 3, 1, "", "unique"], [59, 4, 1, "", "unique_keys"], [59, 3, 1, "", "unregister"], [59, 3, 1, "", "unregister_groupby_by_name"], [59, 3, 1, "", "var"]], "arkouda.IPv4": [[14, 3, 1, "", "__getitem__"], [14, 3, 1, "", "__repr__"], [14, 3, 1, "", "__setitem__"], [14, 3, 1, "", "__str__"], [14, 3, 1, "", "_binop"], [14, 3, 1, "", "_is_supported_scalar"], [14, 3, 1, "", "_r_binop"], [14, 3, 1, "", "format"], [14, 3, 1, "", "normalize"], [14, 3, 1, "", "opeq"], [14, 3, 1, "", "to_list"], [14, 3, 1, "", "to_ndarray"]], "arkouda.Index": [[14, 3, 1, "", "__eq__"], [14, 3, 1, "", "__getitem__"], [14, 3, 1, "", "__len__"], [14, 3, 1, "", "__repr__"], [14, 3, 1, "", "_check_aligned"], [14, 3, 1, "", "_check_types"], [14, 3, 1, "", "_merge"], [14, 3, 1, "", "_merge_all"], [52, 5, 1, "", "argsort"], [52, 5, 1, "", "concat"], [14, 3, 1, "", "factory"], [14, 6, 1, "", "index"], [14, 3, 1, "", "is_registered"], [14, 6, 1, "", "is_unique"], [52, 5, 1, "", "lookup"], [14, 3, 1, "", "register"], [52, 5, 1, "", "set_dtype"], [14, 6, 1, "", "shape"], [14, 3, 1, "", "to_dict"], [14, 3, 1, "", "to_hdf"], [14, 3, 1, "", "to_list"], [14, 3, 1, "", "to_ndarray"], [14, 3, 1, "", "to_pandas"], [14, 3, 1, "", "to_parquet"]], "arkouda.MultiIndex": [[14, 3, 1, "", "__eq__"], [14, 3, 1, "", "__getitem__"], [14, 3, 1, "", "__len__"], [14, 3, 1, "", "__repr__"], [14, 3, 1, "", "_merge"], [14, 3, 1, "", "_merge_all"], [52, 5, 1, "", "argsort"], [52, 5, 1, "", "concat"], [14, 6, 1, "", "index"], [52, 5, 1, "", "lookup"], [14, 3, 1, "", "register"], [52, 5, 1, "", "set_dtype"], [14, 3, 1, "", "to_dict"], [14, 3, 1, "", "to_pandas"]], "arkouda.Properties": [[14, 3, 1, "", "_make_op"]], "arkouda.Row": [[14, 3, 1, "", "__repr__"], [14, 3, 1, "", "__str__"], [14, 3, 1, "", "_repr_html_"]], "arkouda.SegArray": [[14, 3, 1, "", "AND"], [14, 3, 1, "", "OR"], [14, 3, 1, "", "XOR"], [14, 3, 1, "", "__eq__"], [14, 3, 1, "", "__getitem__"], [14, 3, 1, "", "__repr__"], [14, 3, 1, "", "__str__"], [14, 3, 1, "", "_compute_non_empty"], [14, 3, 1, "", "_from_attach_return_msg"], [14, 3, 1, "", "_normalize_index"], [14, 3, 1, "", "aggregate"], [14, 3, 1, "", "all"], [14, 3, 1, "", "any"], [63, 5, 1, "", "append"], [63, 5, 1, "", "append_single"], [14, 3, 1, "", "argmax"], [14, 3, 1, "", "argmin"], [14, 3, 1, "", "attach"], [14, 3, 1, "", "concat"], [14, 3, 1, "", "copy"], [14, 3, 1, "", "from_multi_array"], [14, 3, 1, "", "from_parts"], [14, 3, 1, "", "from_return_msg"], [63, 5, 1, "", "get_jth"], [63, 5, 1, "", "get_length_n"], [63, 5, 1, "", "get_ngrams"], [63, 5, 1, "", "get_prefixes"], [63, 5, 1, "", "get_suffixes"], [63, 5, 1, "", "intersect"], [14, 3, 1, "", "is_registered"], [14, 6, 1, "", "lengths"], [14, 3, 1, "", "load"], [14, 3, 1, "", "max"], [14, 3, 1, "", "mean"], [14, 3, 1, "", "min"], [14, 6, 1, "", "non_empty"], [14, 6, 1, "", "non_empty_count"], [14, 3, 1, "", "nunique"], [14, 6, 1, "", "objtype"], [63, 5, 1, "", "prepend_single"], [14, 3, 1, "", "prod"], [14, 3, 1, "", "register"], [63, 5, 1, "", "remove_repeats"], [63, 5, 1, "", "set_jth"], [63, 5, 1, "", "setdiff"], [63, 5, 1, "", "setxor"], [14, 3, 1, "", "sum"], [14, 3, 1, "", "to_hdf"], [14, 3, 1, "", "to_list"], [63, 5, 1, "", "to_ndarray"], [63, 5, 1, "", "union"], [14, 3, 1, "", "unique"], [14, 3, 1, "", "unregister"], [14, 3, 1, "", "unregister_segarray_by_name"], [14, 4, 1, "", "valsize"]], "arkouda.Series": [[14, 3, 1, "", "__getitem__"], [14, 3, 1, "", "__len__"], [14, 3, 1, "", "__repr__"], [14, 3, 1, "", "_all_aligned"], [14, 3, 1, "", "_make_aggop"], [14, 3, 1, "", "_make_binop"], [14, 3, 1, "", "_make_unaryop"], [14, 3, 1, "", "add"], [14, 3, 1, "", "attach"], [14, 3, 1, "", "concat"], [14, 3, 1, "", "diff"], [14, 4, 1, "", "dt"], [14, 3, 1, "", "from_return_msg"], [64, 5, 1, "", "head"], [14, 3, 1, "", "is_registered"], [14, 3, 1, "", "isin"], [64, 5, 1, "id0", "locate"], [64, 5, 1, "", "pdconcat"], [14, 3, 1, "", "register"], [14, 6, 1, "", "shape"], [64, 5, 1, "", "sort_index"], [64, 5, 1, "", "sort_values"], [14, 4, 1, "", "str_acc"], [64, 5, 1, "", "tail"], [14, 3, 1, "", "to_dataframe"], [64, 5, 1, "", "to_pandas"], [64, 5, 1, "", "topn"], [64, 5, 1, "", "value_counts"]], "arkouda.Strings": [[14, 4, 1, "id848", "BinOps"], [14, 3, 1, "id889", "__add__"], [14, 3, 1, "id857", "__eq__"], [14, 3, 1, "id859", "__getitem__"], [14, 3, 1, "id852", "__iter__"], [14, 3, 1, "id853", "__len__"], [14, 3, 1, "id858", "__ne__"], [14, 3, 1, "id891", "__radd__"], [14, 3, 1, "id855", "__repr__"], [14, 3, 1, "id854", "__str__"], [14, 3, 1, "id856", "_binop"], [14, 3, 1, "id899", "_comp_to_ndarray"], [14, 3, 1, "id872", "_empty_pattern_verification"], [14, 3, 1, "id896", "_get_grouping_keys"], [14, 3, 1, "id873", "_get_matcher"], [14, 3, 1, "id904", "_list_component_names"], [14, 3, 1, "id900", "astype"], [14, 3, 1, "id909", "attach"], [14, 3, 1, "id870", "cached_regex_patterns"], [67, 3, 1, "", "contains"], [14, 3, 1, "id862", "decode"], [14, 4, 1, "id846", "dtype"], [14, 3, 1, "id861", "encode"], [67, 3, 1, "", "endswith"], [14, 4, 1, "id841", "entry"], [67, 3, 1, "", "find_locations"], [67, 3, 1, "", "findall"], [67, 3, 1, "", "flatten"], [14, 3, 1, "id851", "from_parts"], [14, 3, 1, "id850", "from_return_msg"], [67, 3, 1, "", "fullmatch"], [14, 3, 1, "id860", "get_lengths"], [14, 3, 1, "id892", "get_prefixes"], [14, 3, 1, "id893", "get_suffixes"], [14, 3, 1, "id895", "group"], [14, 3, 1, "id894", "hash"], [14, 3, 1, "id905", "info"], [14, 3, 1, "id866", "is_lower"], [14, 3, 1, "id903", "is_registered"], [14, 3, 1, "id868", "is_title"], [14, 3, 1, "id867", "is_upper"], [14, 4, 1, "id847", "logger"], [67, 3, 1, "", "lstick"], [67, 3, 1, "", "match"], [14, 4, 1, "id843", "nbytes"], [14, 4, 1, "id844", "ndim"], [14, 4, 1, "id849", "objtype"], [67, 3, 1, "", "peel"], [14, 3, 1, "id906", "pretty_print_info"], [14, 3, 1, "id871", "purge_cached_regex_patterns"], [14, 3, 1, "id907", "register"], [67, 3, 1, "", "rpeel"], [67, 3, 1, "", "search"], [14, 4, 1, "id845", "shape"], [14, 4, 1, "id842", "size"], [67, 3, 1, "", "split"], [67, 3, 1, "", "startswith"], [67, 3, 1, "", "stick"], [14, 3, 1, "id869", "strip"], [67, 3, 1, "", "sub"], [67, 3, 1, "", "subn"], [14, 3, 1, "id902", "to_hdf"], [14, 3, 1, "id898", "to_list"], [14, 3, 1, "id863", "to_lower"], [67, 5, 1, "", "to_ndarray"], [14, 3, 1, "id901", "to_parquet"], [14, 3, 1, "id865", "to_title"], [14, 3, 1, "id864", "to_upper"], [14, 3, 1, "id908", "unregister"], [14, 3, 1, "id910", "unregister_strings_by_name"]], "arkouda.Timedelta": [[14, 3, 1, "", "_ensure_components"], [14, 3, 1, "", "_get_callback"], [14, 3, 1, "", "_is_supported_scalar"], [14, 3, 1, "", "_scalar_callback"], [14, 3, 1, "", "abs"], [14, 6, 1, "", "components"], [14, 6, 1, "", "days"], [14, 6, 1, "", "microseconds"], [14, 6, 1, "", "nanoseconds"], [14, 6, 1, "", "seconds"], [14, 3, 1, "", "std"], [14, 3, 1, "", "sum"], [14, 4, 1, "", "supported_opeq"], [14, 4, 1, "", "supported_with_datetime"], [14, 4, 1, "", "supported_with_pdarray"], [14, 4, 1, "", "supported_with_r_datetime"], [14, 4, 1, "", "supported_with_r_pdarray"], [14, 4, 1, "", "supported_with_r_timedelta"], [14, 4, 1, "", "supported_with_timedelta"], [14, 3, 1, "", "to_pandas"], [14, 3, 1, "", "total_seconds"]], "arkouda._AbstractBaseTime": [[14, 3, 1, "", "__getitem__"], [14, 3, 1, "", "__repr__"], [14, 3, 1, "", "__setitem__"], [14, 3, 1, "", "__str__"], [14, 3, 1, "", "_binop"], [14, 3, 1, "", "_get_callback"], [14, 3, 1, "", "_is_datetime_scalar"], [14, 3, 1, "", "_is_timedelta_scalar"], [14, 3, 1, "", "_r_binop"], [14, 3, 1, "", "_scalar_callback"], [14, 3, 1, "", "ceil"], [14, 3, 1, "", "floor"], [14, 3, 1, "", "max"], [14, 3, 1, "", "maxk"], [14, 3, 1, "", "min"], [14, 3, 1, "", "mink"], [14, 3, 1, "", "opeq"], [14, 3, 1, "", "round"], [14, 3, 1, "", "to_list"], [14, 3, 1, "", "to_ndarray"]], "arkouda._version": [[3, 1, 1, "", "HANDLERS"], [3, 1, 1, "", "LONG_VERSION_PY"], [3, 7, 1, "", "NotThisMethod"], [3, 2, 1, "", "VersioneerConfig"], [3, 5, 1, "", "get_config"], [3, 5, 1, "", "get_keywords"], [3, 5, 1, "", "get_versions"], [3, 5, 1, "", "git_get_keywords"], [3, 5, 1, "", "git_pieces_from_vcs"], [3, 5, 1, "", "git_versions_from_keywords"], [3, 5, 1, "", "plus_or_dot"], [3, 5, 1, "", "register_vcs_handler"], [3, 5, 1, "", "render"], [3, 5, 1, "", "render_git_describe"], [3, 5, 1, "", "render_git_describe_long"], [3, 5, 1, "", "render_pep440"], [3, 5, 1, "", "render_pep440_old"], [3, 5, 1, "", "render_pep440_post"], [3, 5, 1, "", "render_pep440_pre"], [3, 5, 1, "", "run_command"], [3, 5, 1, "", "versions_from_parentdir"]], "arkouda.accessor": [[4, 2, 1, "", "CachedAccessor"], [4, 2, 1, "", "DatetimeAccessor"], [4, 2, 1, "", "Properties"], [4, 2, 1, "", "StringAccessor"], [4, 5, 1, "", "date_operators"], [4, 5, 1, "", "string_operators"]], "arkouda.accessor.CachedAccessor": [[4, 3, 1, "", "__get__"]], "arkouda.accessor.Properties": [[4, 3, 1, "", "_make_op"]], "arkouda.alignment": [[5, 7, 1, "", "NonUniqueError"], [5, 5, 1, "", "align"], [5, 5, 1, "", "find"], [5, 5, 1, "", "in1d_intervals"], [5, 5, 1, "", "interval_lookup"], [5, 5, 1, "", "is_cosorted"], [5, 5, 1, "", "left_align"], [5, 5, 1, "", "lookup"], [5, 5, 1, "", "right_align"], [5, 5, 1, "", "search_intervals"], [5, 5, 1, "", "unsqueeze"], [5, 5, 1, "", "zero_up"]], "arkouda.array_view": [[6, 2, 1, "", "ArrayView"], [6, 1, 1, "", "OrderType"]], "arkouda.array_view.ArrayView": [[6, 3, 1, "", "__getitem__"], [6, 3, 1, "", "__len__"], [6, 3, 1, "", "__repr__"], [6, 3, 1, "", "__setitem__"], [6, 3, 1, "", "__str__"], [6, 4, 1, "", "base"], [6, 4, 1, "", "dtype"], [6, 4, 1, "", "itemsize"], [6, 4, 1, "", "ndim"], [6, 4, 1, "", "order"], [6, 4, 1, "", "shape"], [6, 4, 1, "", "size"], [6, 3, 1, "", "to_hdf"], [6, 3, 1, "", "to_list"], [6, 3, 1, "", "to_ndarray"]], "arkouda.categorical": [[7, 2, 1, "", "Categorical"]], "arkouda.categorical.Categorical": [[7, 4, 1, "", "BinOps"], [7, 4, 1, "", "RegisterablePieces"], [7, 4, 1, "", "RequiredPieces"], [7, 3, 1, "", "__eq__"], [7, 3, 1, "", "__getitem__"], [7, 3, 1, "", "__iter__"], [7, 3, 1, "", "__len__"], [7, 3, 1, "", "__ne__"], [7, 3, 1, "", "__repr__"], [7, 3, 1, "", "__str__"], [7, 3, 1, "", "_binop"], [7, 3, 1, "", "_get_components_dict"], [7, 3, 1, "", "_get_grouping_keys"], [7, 3, 1, "", "_list_component_names"], [7, 3, 1, "", "_r_binop"], [7, 3, 1, "", "argsort"], [7, 3, 1, "", "attach"], [7, 4, 1, "", "categories"], [7, 4, 1, "", "codes"], [7, 3, 1, "", "concatenate"], [7, 3, 1, "", "contains"], [7, 3, 1, "", "endswith"], [7, 3, 1, "", "from_codes"], [7, 3, 1, "", "from_return_msg"], [7, 3, 1, "", "group"], [7, 3, 1, "", "in1d"], [7, 3, 1, "", "info"], [7, 3, 1, "", "is_registered"], [7, 3, 1, "", "isna"], [7, 4, 1, "", "ndim"], [7, 4, 1, "", "nlevels"], [7, 6, 1, "", "objtype"], [7, 3, 1, "", "parse_hdf_categoricals"], [7, 4, 1, "id0", "permutation"], [7, 3, 1, "", "pretty_print_info"], [7, 3, 1, "", "register"], [7, 3, 1, "", "reset_categories"], [7, 4, 1, "id1", "segments"], [7, 3, 1, "", "set_categories"], [7, 4, 1, "", "shape"], [7, 4, 1, "", "size"], [7, 3, 1, "", "sort"], [7, 3, 1, "", "standardize_categories"], [7, 3, 1, "", "startswith"], [7, 3, 1, "", "to_hdf"], [7, 3, 1, "", "to_list"], [7, 3, 1, "", "to_ndarray"], [7, 3, 1, "", "to_parquet"], [7, 3, 1, "", "unique"], [7, 3, 1, "", "unregister"], [7, 3, 1, "", "unregister_categorical_by_name"]], "arkouda.client": [[8, 5, 1, "", "connect"], [8, 5, 1, "", "disconnect"], [8, 5, 1, "", "get_config"], [8, 5, 1, "", "get_mem_avail"], [8, 5, 1, "", "get_mem_used"], [8, 5, 1, "", "get_server_commands"], [8, 5, 1, "", "print_server_commands"], [8, 5, 1, "", "ruok"], [8, 5, 1, "", "shutdown"]], "arkouda.client_dtypes": [[9, 2, 1, "", "BitVector"], [9, 5, 1, "", "BitVectorizer"], [9, 2, 1, "", "Fields"], [9, 2, 1, "", "IPv4"], [9, 5, 1, "", "ip_address"], [9, 5, 1, "", "is_ipv4"], [9, 5, 1, "", "is_ipv6"]], "arkouda.client_dtypes.BitVector": [[9, 3, 1, "", "__getitem__"], [9, 3, 1, "", "__repr__"], [9, 3, 1, "", "__setitem__"], [9, 3, 1, "", "__str__"], [9, 3, 1, "", "_binop"], [9, 3, 1, "", "_cast"], [9, 3, 1, "", "_r_binop"], [9, 4, 1, "", "conserves"], [9, 3, 1, "", "format"], [9, 3, 1, "", "opeq"], [9, 3, 1, "", "to_list"], [9, 3, 1, "", "to_ndarray"]], "arkouda.client_dtypes.Fields": [[9, 3, 1, "", "__setitem__"], [9, 3, 1, "", "_binop"], [9, 3, 1, "", "_cast"], [9, 3, 1, "", "_convert_strings"], [9, 3, 1, "", "_parse_scalar"], [9, 3, 1, "", "_r_binop"], [9, 3, 1, "", "format"], [9, 3, 1, "", "opeq"]], "arkouda.client_dtypes.IPv4": [[9, 3, 1, "", "__getitem__"], [9, 3, 1, "", "__repr__"], [9, 3, 1, "", "__setitem__"], [9, 3, 1, "", "__str__"], [9, 3, 1, "", "_binop"], [9, 3, 1, "", "_is_supported_scalar"], [9, 3, 1, "", "_r_binop"], [9, 3, 1, "", "format"], [9, 3, 1, "", "normalize"], [9, 3, 1, "", "opeq"], [9, 3, 1, "", "to_list"], [9, 3, 1, "", "to_ndarray"]], "arkouda.dataframe": [[10, 2, 1, "", "DataFrame"], [10, 5, 1, "", "intersect"], [10, 5, 1, "", "intx"], [10, 5, 1, "", "invert_permutation"], [10, 5, 1, "", "sorted"]], "arkouda.dataframe.DataFrame": [[10, 4, 1, "", "COLUMN_CLASSES"], [10, 3, 1, "", "GroupBy"], [10, 3, 1, "", "__delitem__"], [10, 3, 1, "", "__dir__"], [10, 3, 1, "", "__getattr__"], [10, 3, 1, "", "__getitem__"], [10, 3, 1, "", "__len__"], [10, 3, 1, "", "__repr__"], [10, 3, 1, "", "__setitem__"], [10, 3, 1, "", "__str__"], [10, 3, 1, "", "_drop_column"], [10, 3, 1, "", "_drop_row"], [10, 3, 1, "", "_get_head_tail"], [10, 3, 1, "", "_get_head_tail_server"], [10, 3, 1, "", "_ipython_key_completions_"], [10, 3, 1, "", "_ncols"], [10, 3, 1, "", "_parse_col_name"], [10, 3, 1, "", "_prep_data"], [10, 3, 1, "", "_rename_column"], [10, 3, 1, "", "_rename_index"], [10, 3, 1, "", "_repr_html_"], [10, 3, 1, "", "_set_index"], [10, 3, 1, "", "_shape_str"], [10, 3, 1, "", "append"], [10, 3, 1, "", "apply_permutation"], [10, 3, 1, "", "argsort"], [10, 3, 1, "", "attach"], [10, 3, 1, "", "coargsort"], [10, 6, 1, "", "columns"], [10, 3, 1, "", "concat"], [10, 3, 1, "", "copy"], [10, 3, 1, "", "corr"], [10, 3, 1, "", "drop"], [10, 3, 1, "", "drop_duplicates"], [10, 6, 1, "", "dtypes"], [10, 6, 1, "", "empty"], [10, 3, 1, "", "filter_by_range"], [10, 3, 1, "", "from_pandas"], [10, 3, 1, "", "from_return_msg"], [10, 3, 1, "", "groupby"], [10, 3, 1, "", "head"], [10, 6, 1, "", "index"], [10, 6, 1, "", "info"], [10, 3, 1, "", "is_registered"], [10, 3, 1, "", "isin"], [10, 3, 1, "", "load"], [10, 3, 1, "", "memory_usage"], [10, 3, 1, "", "register"], [10, 3, 1, "", "rename"], [10, 3, 1, "", "reset_index"], [10, 3, 1, "", "sample"], [10, 6, 1, "", "shape"], [10, 6, 1, "", "size"], [10, 3, 1, "", "sort_values"], [10, 3, 1, "", "tail"], [10, 3, 1, "", "to_hdf"], [10, 3, 1, "", "to_pandas"], [10, 3, 1, "", "to_parquet"], [10, 3, 1, "", "unregister"], [10, 3, 1, "", "unregister_dataframe_by_name"], [10, 3, 1, "", "update_size"]], "arkouda.decorators": [[11, 5, 1, "", "objtypedec"]], "arkouda.dtypes": [[12, 1, 1, "", "ARKOUDA_SUPPORTED_DTYPES"], [12, 1, 1, "", "DTypeObjects"], [12, 1, 1, "", "DTypes"], [12, 1, 1, "", "all_scalars"], [12, 1, 1, "", "bigint"], [12, 1, 1, "", "bitType"], [12, 1, 1, "", "bool"], [12, 1, 1, "", "bool_scalars"], [12, 5, 1, "", "check_np_dtype"], [12, 5, 1, "", "dtype"], [12, 1, 1, "", "float64"], [12, 1, 1, "", "float_scalars"], [12, 5, 1, "", "get_byteorder"], [12, 5, 1, "", "get_server_byteorder"], [12, 1, 1, "", "int64"], [12, 1, 1, "", "intTypes"], [12, 1, 1, "", "int_scalars"], [12, 1, 1, "", "numeric_scalars"], [12, 1, 1, "", "numpy_scalars"], [12, 5, 1, "", "resolve_scalar_dtype"], [12, 1, 1, "", "str_"], [12, 1, 1, "", "str_scalars"], [12, 5, 1, "", "translate_np_dtype"], [12, 1, 1, "", "uint64"], [12, 1, 1, "", "uint8"]], "arkouda.groupbyclass": [[13, 1, 1, "", "GROUPBY_REDUCTION_TYPES"], [13, 2, 1, "", "GroupBy"], [13, 5, 1, "", "broadcast"], [13, 5, 1, "", "unique"]], "arkouda.groupbyclass.GroupBy": [[13, 3, 1, "", "AND"], [13, 3, 1, "", "OR"], [13, 4, 1, "", "Reductions"], [13, 3, 1, "", "XOR"], [13, 3, 1, "", "_get_groupby_required_pieces"], [13, 3, 1, "", "_nested_grouping_helper"], [13, 3, 1, "", "aggregate"], [13, 3, 1, "", "all"], [13, 3, 1, "", "any"], [13, 3, 1, "", "argmax"], [13, 3, 1, "", "argmin"], [13, 3, 1, "", "attach"], [13, 3, 1, "", "broadcast"], [13, 3, 1, "", "build_from_components"], [13, 3, 1, "", "count"], [13, 3, 1, "", "first"], [13, 3, 1, "", "is_registered"], [13, 4, 1, "", "logger"], [13, 3, 1, "", "max"], [13, 3, 1, "", "mean"], [13, 3, 1, "", "median"], [13, 3, 1, "", "min"], [13, 3, 1, "", "mode"], [13, 3, 1, "", "most_common"], [13, 4, 1, "", "ngroups"], [13, 4, 1, "", "nkeys"], [13, 3, 1, "", "nunique"], [13, 4, 1, "", "permutation"], [13, 3, 1, "", "prod"], [13, 3, 1, "", "register"], [13, 4, 1, "", "segments"], [13, 3, 1, "id0", "size"], [13, 3, 1, "", "std"], [13, 3, 1, "", "sum"], [13, 3, 1, "", "unique"], [13, 4, 1, "", "unique_keys"], [13, 3, 1, "", "unregister"], [13, 3, 1, "", "unregister_groupby_by_name"], [13, 3, 1, "", "var"]], "arkouda.index": [[15, 2, 1, "", "Index"], [15, 2, 1, "", "MultiIndex"]], "arkouda.index.Index": [[15, 3, 1, "", "__eq__"], [15, 3, 1, "", "__getitem__"], [15, 3, 1, "", "__len__"], [15, 3, 1, "", "__repr__"], [15, 3, 1, "", "_check_aligned"], [15, 3, 1, "", "_check_types"], [15, 3, 1, "", "_merge"], [15, 3, 1, "", "_merge_all"], [15, 3, 1, "", "argsort"], [15, 3, 1, "", "concat"], [15, 3, 1, "", "factory"], [15, 6, 1, "", "index"], [15, 3, 1, "", "is_registered"], [15, 6, 1, "", "is_unique"], [15, 3, 1, "", "lookup"], [15, 3, 1, "", "register"], [15, 3, 1, "", "set_dtype"], [15, 6, 1, "", "shape"], [15, 3, 1, "", "to_dict"], [15, 3, 1, "", "to_hdf"], [15, 3, 1, "", "to_list"], [15, 3, 1, "", "to_ndarray"], [15, 3, 1, "", "to_pandas"], [15, 3, 1, "", "to_parquet"]], "arkouda.index.MultiIndex": [[15, 3, 1, "", "__eq__"], [15, 3, 1, "", "__getitem__"], [15, 3, 1, "", "__len__"], [15, 3, 1, "", "__repr__"], [15, 3, 1, "", "_merge"], [15, 3, 1, "", "_merge_all"], [15, 3, 1, "", "argsort"], [15, 3, 1, "", "concat"], [15, 6, 1, "", "index"], [15, 3, 1, "", "lookup"], [15, 3, 1, "", "register"], [15, 3, 1, "", "set_dtype"], [15, 3, 1, "", "to_dict"], [15, 3, 1, "", "to_pandas"]], "arkouda.infoclass": [[16, 1, 1, "", "AllSymbols"], [16, 1, 1, "", "RegisteredSymbols"], [16, 5, 1, "", "information"], [16, 5, 1, "", "list_registry"], [16, 5, 1, "", "list_symbol_table"], [16, 5, 1, "", "pretty_print_information"]], "arkouda.io": [[17, 5, 1, "", "export"], [17, 5, 1, "", "file_type_to_int"], [17, 5, 1, "", "get_datasets"], [17, 5, 1, "", "get_filetype"], [17, 5, 1, "", "get_null_indices"], [17, 5, 1, "", "import_data"], [17, 5, 1, "", "load"], [17, 5, 1, "", "load_all"], [17, 5, 1, "", "ls"], [17, 5, 1, "", "mode_str_to_int"], [17, 5, 1, "", "read"], [17, 5, 1, "", "read_hdf"], [17, 5, 1, "", "read_parquet"], [17, 5, 1, "", "to_hdf"], [17, 5, 1, "", "to_parquet"]], "arkouda.io_util": [[18, 5, 1, "", "delimited_file_to_dict"], [18, 5, 1, "", "dict_to_delimited_file"], [18, 5, 1, "", "get_directory"], [18, 5, 1, "", "write_line_to_file"]], "arkouda.join": [[19, 5, 1, "", "join_on_eq_with_dt"]], "arkouda.logger": [[20, 5, 1, "", "disableVerbose"], [20, 5, 1, "", "enableVerbose"]], "arkouda.match": [[21, 2, 1, "", "Match"], [21, 1, 1, "", "MatchType"]], "arkouda.match.Match": [[21, 3, 1, "", "__getitem__"], [21, 3, 1, "", "__repr__"], [21, 3, 1, "", "__str__"], [67, 3, 1, "", "end"], [67, 3, 1, "", "find_matches"], [67, 3, 1, "", "group"], [67, 3, 1, "", "match_type"], [67, 3, 1, "", "matched"], [67, 3, 1, "", "start"]], "arkouda.matcher": [[22, 2, 1, "", "Matcher"]], "arkouda.matcher.Matcher": [[22, 4, 1, "", "LocationsInfo"], [22, 3, 1, "", "find_locations"], [22, 3, 1, "", "findall"], [22, 3, 1, "", "get_match"], [22, 3, 1, "", "split"], [22, 3, 1, "", "sub"]], "arkouda.message": [[23, 2, 1, "", "MessageFormat"], [23, 2, 1, "", "MessageType"], [23, 2, 1, "", "ObjectType"], [23, 2, 1, "", "ParameterObject"], [23, 2, 1, "", "ReplyMessage"], [23, 2, 1, "", "RequestMessage"]], "arkouda.message.MessageFormat": [[23, 4, 1, "", "BINARY"], [23, 4, 1, "", "STRING"], [23, 3, 1, "", "__repr__"], [23, 3, 1, "", "__str__"]], "arkouda.message.MessageType": [[23, 4, 1, "", "ERROR"], [23, 4, 1, "", "NORMAL"], [23, 4, 1, "", "WARNING"], [23, 3, 1, "", "__repr__"], [23, 3, 1, "", "__str__"]], "arkouda.message.ObjectType": [[23, 4, 1, "", "DATETIME"], [23, 4, 1, "", "DICT"], [23, 4, 1, "", "LIST"], [23, 4, 1, "", "PDARRAY"], [23, 4, 1, "", "STRINGS"], [23, 4, 1, "", "TIMEDELTA"], [23, 4, 1, "", "VALUE"], [23, 3, 1, "", "__repr__"], [23, 3, 1, "", "__str__"]], "arkouda.message.ParameterObject": [[23, 4, 1, "", "__slots"], [23, 3, 1, "", "_build_dict_param"], [23, 3, 1, "", "_build_gen_param"], [23, 3, 1, "", "_build_list_param"], [23, 3, 1, "", "_build_pdarray_param"], [23, 3, 1, "", "_build_strings_param"], [23, 6, 1, "", "dict"], [23, 4, 1, "", "dtype"], [23, 3, 1, "", "factory"], [23, 3, 1, "", "generate_dispatch"], [23, 4, 1, "", "key"], [23, 4, 1, "", "objType"], [23, 4, 1, "", "val"]], "arkouda.message.ReplyMessage": [[23, 4, 1, "", "__slots__"], [23, 3, 1, "", "fromdict"], [23, 4, 1, "", "msg"], [23, 4, 1, "", "msgType"], [23, 4, 1, "", "user"]], "arkouda.message.RequestMessage": [[23, 4, 1, "", "__slots"], [23, 4, 1, "", "args"], [23, 3, 1, "", "asdict"], [23, 4, 1, "", "cmd"], [23, 4, 1, "", "format"], [23, 4, 1, "", "size"], [23, 4, 1, "", "token"], [23, 4, 1, "", "user"]], "arkouda.numeric": [[24, 2, 1, "", "ErrorMode"], [24, 5, 1, "", "abs"], [24, 5, 1, "", "cast"], [24, 5, 1, "", "cos"], [24, 5, 1, "", "cumprod"], [24, 5, 1, "", "cumsum"], [24, 5, 1, "", "exp"], [24, 5, 1, "", "hash"], [24, 5, 1, "", "histogram"], [24, 5, 1, "", "isnan"], [24, 5, 1, "", "log"], [24, 5, 1, "", "sin"], [24, 5, 1, "", "value_counts"], [24, 5, 1, "", "where"]], "arkouda.numeric.ErrorMode": [[24, 4, 1, "", "ignore"], [24, 4, 1, "", "return_validity"], [24, 4, 1, "", "strict"]], "arkouda.pdarray": [[14, 4, 1, "id661", "BinOps"], [14, 4, 1, "id662", "OpEqOps"], [14, 3, 1, "id673", "__add__"], [14, 3, 1, "id689", "__and__"], [14, 4, 1, "id664", "__array_priority__"], [14, 3, 1, "id666", "__bool__"], [14, 3, 1, "id665", "__del__"], [14, 3, 1, "id701", "__eq__"], [14, 3, 1, "id681", "__floordiv__"], [14, 3, 1, "id700", "__ge__"], [14, 3, 1, "id719", "__getitem__"], [14, 3, 1, "id698", "__gt__"], [14, 3, 1, "id706", "__iadd__"], [14, 3, 1, "id714", "__iand__"], [14, 3, 1, "id711", "__ifloordiv__"], [14, 3, 1, "id712", "__ilshift__"], [14, 3, 1, "id710", "__imod__"], [14, 3, 1, "id708", "__imul__"], [14, 3, 1, "id704", "__invert__"], [14, 3, 1, "id715", "__ior__"], [14, 3, 1, "id717", "__ipow__"], [14, 3, 1, "id713", "__irshift__"], [14, 3, 1, "id707", "__isub__"], [14, 3, 1, "id718", "__iter__"], [14, 3, 1, "id709", "__itruediv__"], [14, 3, 1, "id716", "__ixor__"], [14, 3, 1, "id699", "__le__"], [14, 3, 1, "id667", "__len__"], [14, 3, 1, "id685", "__lshift__"], [14, 3, 1, "id697", "__lt__"], [14, 3, 1, "id683", "__mod__"], [14, 3, 1, "id677", "__mul__"], [14, 3, 1, "id702", "__ne__"], [14, 3, 1, "id703", "__neg__"], [14, 3, 1, "id691", "__or__"], [14, 3, 1, "id695", "__pow__"], [14, 3, 1, "id674", "__radd__"], [14, 3, 1, "id690", "__rand__"], [14, 3, 1, "id669", "__repr__"], [14, 3, 1, "id682", "__rfloordiv__"], [14, 3, 1, "id686", "__rlshift__"], [14, 3, 1, "id684", "__rmod__"], [14, 3, 1, "id678", "__rmul__"], [14, 3, 1, "id692", "__ror__"], [14, 3, 1, "id696", "__rpow__"], [14, 3, 1, "id688", "__rrshift__"], [14, 3, 1, "id687", "__rshift__"], [14, 3, 1, "id676", "__rsub__"], [14, 3, 1, "id680", "__rtruediv__"], [14, 3, 1, "id694", "__rxor__"], [14, 3, 1, "id720", "__setitem__"], [14, 3, 1, "id668", "__str__"], [14, 3, 1, "id675", "__sub__"], [14, 3, 1, "id679", "__truediv__"], [14, 3, 1, "id693", "__xor__"], [14, 3, 1, "id671", "_binop"], [14, 3, 1, "id760", "_get_grouping_keys"], [14, 3, 1, "id725", "_list_component_names"], [14, 3, 1, "id672", "_r_binop"], [60, 3, 1, "", "all"], [60, 3, 1, "", "any"], [60, 3, 1, "", "argmax"], [60, 3, 1, "", "argmaxk"], [60, 3, 1, "", "argmin"], [60, 3, 1, "", "argmink"], [14, 3, 1, "id750", "astype"], [14, 3, 1, "id759", "attach"], [14, 3, 1, "id746", "clz"], [14, 3, 1, "id739", "corr"], [14, 3, 1, "id738", "cov"], [14, 3, 1, "id747", "ctz"], [62, 4, 1, "", "dtype"], [14, 3, 1, "id721", "fill"], [14, 3, 1, "id670", "format_other"], [14, 3, 1, "id726", "info"], [14, 3, 1, "id724", "is_registered"], [60, 3, 1, "", "is_sorted"], [62, 4, 1, "", "itemsize"], [60, 3, 1, "", "max"], [60, 3, 1, "", "maxk"], [60, 3, 1, "", "mean"], [60, 3, 1, "", "min"], [60, 3, 1, "", "mink"], [62, 4, 1, "", "name"], [62, 4, 1, "", "ndim"], [14, 4, 1, "id663", "objtype"], [14, 3, 1, "id705", "opeq"], [14, 3, 1, "id745", "parity"], [14, 3, 1, "id744", "popcount"], [14, 3, 1, "id727", "pretty_print_info"], [60, 3, 1, "", "prod"], [14, 3, 1, "id757", "register"], [14, 3, 1, "id751", "reshape"], [14, 3, 1, "id748", "rotl"], [14, 3, 1, "id749", "rotr"], [62, 4, 1, "", "shape"], [62, 4, 1, "", "size"], [60, 3, 1, "", "std"], [60, 3, 1, "", "sum"], [14, 3, 1, "id754", "to_cuda"], [14, 3, 1, "id756", "to_hdf"], [14, 3, 1, "id753", "to_list"], [62, 5, 1, "", "to_ndarray"], [14, 3, 1, "id755", "to_parquet"], [14, 3, 1, "id758", "unregister"], [60, 3, 1, "", "var"]], "arkouda.pdarrayclass": [[25, 7, 1, "", "RegistrationError"], [25, 5, 1, "", "all"], [25, 5, 1, "", "any"], [25, 5, 1, "", "argmax"], [25, 5, 1, "", "argmaxk"], [25, 5, 1, "", "argmin"], [25, 5, 1, "", "argmink"], [25, 5, 1, "", "attach_pdarray"], [25, 5, 1, "", "clear"], [25, 5, 1, "", "clz"], [25, 5, 1, "", "corr"], [25, 5, 1, "", "cov"], [25, 5, 1, "", "ctz"], [25, 5, 1, "", "is_sorted"], [25, 5, 1, "", "max"], [25, 5, 1, "", "maxk"], [25, 5, 1, "", "mean"], [25, 5, 1, "", "min"], [25, 5, 1, "", "mink"], [25, 5, 1, "", "parity"], [25, 2, 1, "", "pdarray"], [25, 5, 1, "", "popcount"], [25, 5, 1, "", "power"], [25, 5, 1, "", "prod"], [25, 5, 1, "", "rotl"], [25, 5, 1, "", "rotr"], [25, 5, 1, "", "sqrt"], [25, 5, 1, "", "std"], [25, 5, 1, "", "sum"], [25, 5, 1, "", "unregister_pdarray_by_name"], [25, 5, 1, "", "var"]], "arkouda.pdarrayclass.pdarray": [[25, 4, 1, "", "BinOps"], [25, 4, 1, "", "OpEqOps"], [25, 3, 1, "", "__add__"], [25, 3, 1, "", "__and__"], [25, 4, 1, "", "__array_priority__"], [25, 3, 1, "", "__bool__"], [25, 3, 1, "", "__del__"], [25, 3, 1, "", "__eq__"], [25, 3, 1, "", "__floordiv__"], [25, 3, 1, "", "__ge__"], [25, 3, 1, "", "__getitem__"], [25, 3, 1, "", "__gt__"], [25, 3, 1, "", "__iadd__"], [25, 3, 1, "", "__iand__"], [25, 3, 1, "", "__ifloordiv__"], [25, 3, 1, "", "__ilshift__"], [25, 3, 1, "", "__imod__"], [25, 3, 1, "", "__imul__"], [25, 3, 1, "", "__invert__"], [25, 3, 1, "", "__ior__"], [25, 3, 1, "", "__ipow__"], [25, 3, 1, "", "__irshift__"], [25, 3, 1, "", "__isub__"], [25, 3, 1, "", "__iter__"], [25, 3, 1, "", "__itruediv__"], [25, 3, 1, "", "__ixor__"], [25, 3, 1, "", "__le__"], [25, 3, 1, "", "__len__"], [25, 3, 1, "", "__lshift__"], [25, 3, 1, "", "__lt__"], [25, 3, 1, "", "__mod__"], [25, 3, 1, "", "__mul__"], [25, 3, 1, "", "__ne__"], [25, 3, 1, "", "__neg__"], [25, 3, 1, "", "__or__"], [25, 3, 1, "", "__pow__"], [25, 3, 1, "", "__radd__"], [25, 3, 1, "", "__rand__"], [25, 3, 1, "", "__repr__"], [25, 3, 1, "", "__rfloordiv__"], [25, 3, 1, "", "__rlshift__"], [25, 3, 1, "", "__rmod__"], [25, 3, 1, "", "__rmul__"], [25, 3, 1, "", "__ror__"], [25, 3, 1, "", "__rpow__"], [25, 3, 1, "", "__rrshift__"], [25, 3, 1, "", "__rshift__"], [25, 3, 1, "", "__rsub__"], [25, 3, 1, "", "__rtruediv__"], [25, 3, 1, "", "__rxor__"], [25, 3, 1, "", "__setitem__"], [25, 3, 1, "", "__str__"], [25, 3, 1, "", "__sub__"], [25, 3, 1, "", "__truediv__"], [25, 3, 1, "", "__xor__"], [25, 3, 1, "", "_binop"], [25, 3, 1, "", "_get_grouping_keys"], [25, 3, 1, "", "_list_component_names"], [25, 3, 1, "", "_r_binop"], [25, 3, 1, "", "all"], [25, 3, 1, "", "any"], [25, 3, 1, "", "argmax"], [25, 3, 1, "", "argmaxk"], [25, 3, 1, "", "argmin"], [25, 3, 1, "", "argmink"], [25, 3, 1, "", "astype"], [25, 3, 1, "", "attach"], [25, 3, 1, "", "clz"], [25, 3, 1, "", "corr"], [25, 3, 1, "", "cov"], [25, 3, 1, "", "ctz"], [25, 4, 1, "", "dtype"], [25, 3, 1, "", "fill"], [25, 3, 1, "", "format_other"], [25, 3, 1, "", "info"], [25, 3, 1, "", "is_registered"], [25, 3, 1, "", "is_sorted"], [25, 4, 1, "", "itemsize"], [25, 3, 1, "", "max"], [25, 3, 1, "", "maxk"], [25, 3, 1, "", "mean"], [25, 3, 1, "", "min"], [25, 3, 1, "", "mink"], [25, 4, 1, "", "name"], [25, 4, 1, "", "ndim"], [25, 4, 1, "", "objtype"], [25, 3, 1, "", "opeq"], [25, 3, 1, "", "parity"], [25, 3, 1, "", "popcount"], [25, 3, 1, "", "pretty_print_info"], [25, 3, 1, "", "prod"], [25, 3, 1, "", "register"], [25, 3, 1, "", "reshape"], [25, 3, 1, "", "rotl"], [25, 3, 1, "", "rotr"], [25, 4, 1, "", "shape"], [25, 4, 1, "", "size"], [25, 3, 1, "", "std"], [25, 3, 1, "", "sum"], [25, 3, 1, "", "to_cuda"], [25, 3, 1, "", "to_hdf"], [25, 3, 1, "", "to_list"], [25, 3, 1, "", "to_ndarray"], [25, 3, 1, "", "to_parquet"], [25, 3, 1, "", "unregister"], [25, 3, 1, "", "var"]], "arkouda.pdarraycreation": [[26, 5, 1, "", "arange"], [26, 5, 1, "", "array"], [26, 5, 1, "", "bigint_from_uint_arrays"], [26, 5, 1, "", "from_series"], [26, 5, 1, "", "full"], [26, 5, 1, "", "full_like"], [26, 5, 1, "", "linspace"], [26, 5, 1, "", "ones"], [26, 5, 1, "", "ones_like"], [26, 5, 1, "", "randint"], [26, 5, 1, "", "random_strings_lognormal"], [26, 5, 1, "", "random_strings_uniform"], [26, 5, 1, "", "standard_normal"], [26, 5, 1, "", "uniform"], [26, 5, 1, "", "zeros"], [26, 5, 1, "", "zeros_like"]], "arkouda.pdarraysetops": [[27, 5, 1, "", "concatenate"], [27, 5, 1, "", "in1d"], [27, 5, 1, "", "intersect1d"], [27, 5, 1, "", "setdiff1d"], [27, 5, 1, "", "setxor1d"], [27, 5, 1, "", "union1d"]], "arkouda.plotting": [[28, 5, 1, "", "plot_dist"]], "arkouda.row": [[29, 2, 1, "", "Row"]], "arkouda.row.Row": [[29, 3, 1, "", "__repr__"], [29, 3, 1, "", "__str__"], [29, 3, 1, "", "_repr_html_"]], "arkouda.security": [[30, 5, 1, "", "generate_token"], [30, 5, 1, "", "generate_username_token_json"], [30, 5, 1, "", "get_arkouda_client_directory"], [30, 5, 1, "", "get_home_directory"], [30, 5, 1, "", "get_username"], [30, 1, 1, "", "username_tokenizer"]], "arkouda.segarray": [[31, 2, 1, "", "SegArray"], [31, 5, 1, "", "_aggregator"], [31, 5, 1, "", "gen_ranges"], [31, 5, 1, "", "segarray"]], "arkouda.segarray.SegArray": [[31, 3, 1, "", "AND"], [31, 3, 1, "", "OR"], [31, 3, 1, "", "XOR"], [31, 3, 1, "", "__eq__"], [31, 3, 1, "", "__getitem__"], [31, 3, 1, "", "__repr__"], [31, 3, 1, "", "__str__"], [31, 3, 1, "", "_compute_non_empty"], [31, 3, 1, "", "_from_attach_return_msg"], [31, 3, 1, "", "_normalize_index"], [31, 3, 1, "", "aggregate"], [31, 3, 1, "", "all"], [31, 3, 1, "", "any"], [31, 3, 1, "", "append"], [31, 3, 1, "", "append_single"], [31, 3, 1, "", "argmax"], [31, 3, 1, "", "argmin"], [31, 3, 1, "", "attach"], [31, 3, 1, "", "concat"], [31, 3, 1, "", "copy"], [31, 3, 1, "", "from_multi_array"], [31, 3, 1, "", "from_parts"], [31, 3, 1, "", "from_return_msg"], [31, 3, 1, "", "get_jth"], [31, 3, 1, "", "get_length_n"], [31, 3, 1, "", "get_ngrams"], [31, 3, 1, "", "get_prefixes"], [31, 3, 1, "", "get_suffixes"], [31, 3, 1, "", "intersect"], [31, 3, 1, "", "is_registered"], [31, 6, 1, "", "lengths"], [31, 3, 1, "", "load"], [31, 3, 1, "", "max"], [31, 3, 1, "", "mean"], [31, 3, 1, "", "min"], [31, 6, 1, "", "non_empty"], [31, 6, 1, "", "non_empty_count"], [31, 3, 1, "", "nunique"], [31, 6, 1, "", "objtype"], [31, 3, 1, "", "prepend_single"], [31, 3, 1, "", "prod"], [31, 3, 1, "", "register"], [31, 3, 1, "", "remove_repeats"], [31, 3, 1, "", "set_jth"], [31, 3, 1, "", "setdiff"], [31, 3, 1, "", "setxor"], [31, 3, 1, "", "sum"], [31, 3, 1, "", "to_hdf"], [31, 3, 1, "", "to_list"], [31, 3, 1, "", "to_ndarray"], [31, 3, 1, "", "union"], [31, 3, 1, "", "unique"], [31, 3, 1, "", "unregister"], [31, 3, 1, "", "unregister_segarray_by_name"], [31, 4, 1, "", "valsize"]], "arkouda.series": [[32, 2, 1, "", "Series"]], "arkouda.series.Series": [[32, 3, 1, "", "__getitem__"], [32, 3, 1, "", "__len__"], [32, 3, 1, "", "__repr__"], [32, 3, 1, "", "_all_aligned"], [32, 3, 1, "", "_make_aggop"], [32, 3, 1, "", "_make_binop"], [32, 3, 1, "", "_make_unaryop"], [32, 3, 1, "", "add"], [32, 3, 1, "", "attach"], [32, 3, 1, "", "concat"], [32, 3, 1, "", "diff"], [32, 4, 1, "", "dt"], [32, 3, 1, "", "from_return_msg"], [32, 3, 1, "", "head"], [32, 3, 1, "", "is_registered"], [32, 3, 1, "", "isin"], [32, 3, 1, "", "locate"], [32, 3, 1, "", "pdconcat"], [32, 3, 1, "", "register"], [32, 6, 1, "", "shape"], [32, 3, 1, "", "sort_index"], [32, 3, 1, "", "sort_values"], [32, 4, 1, "", "str_acc"], [32, 3, 1, "", "tail"], [32, 3, 1, "", "to_dataframe"], [32, 3, 1, "", "to_pandas"], [32, 3, 1, "", "topn"], [32, 3, 1, "", "value_counts"]], "arkouda.sorting": [[33, 1, 1, "", "SortingAlgorithm"], [33, 5, 1, "", "argsort"], [33, 5, 1, "", "coargsort"], [33, 5, 1, "", "sort"]], "arkouda.strings": [[34, 2, 1, "", "Strings"]], "arkouda.strings.Strings": [[34, 4, 1, "", "BinOps"], [34, 3, 1, "", "__add__"], [34, 3, 1, "", "__eq__"], [34, 3, 1, "", "__getitem__"], [34, 3, 1, "", "__iter__"], [34, 3, 1, "", "__len__"], [34, 3, 1, "", "__ne__"], [34, 3, 1, "", "__radd__"], [34, 3, 1, "", "__repr__"], [34, 3, 1, "", "__str__"], [34, 3, 1, "", "_binop"], [34, 3, 1, "", "_comp_to_ndarray"], [34, 3, 1, "", "_empty_pattern_verification"], [34, 3, 1, "", "_get_grouping_keys"], [34, 3, 1, "", "_get_matcher"], [34, 3, 1, "", "_list_component_names"], [34, 3, 1, "", "astype"], [34, 3, 1, "", "attach"], [34, 3, 1, "", "cached_regex_patterns"], [34, 3, 1, "", "contains"], [34, 3, 1, "", "decode"], [34, 4, 1, "", "dtype"], [34, 3, 1, "", "encode"], [34, 3, 1, "", "endswith"], [34, 4, 1, "", "entry"], [34, 3, 1, "", "find_locations"], [34, 3, 1, "", "findall"], [34, 3, 1, "", "flatten"], [34, 3, 1, "", "from_parts"], [34, 3, 1, "", "from_return_msg"], [34, 3, 1, "", "fullmatch"], [34, 3, 1, "", "get_lengths"], [34, 3, 1, "", "get_prefixes"], [34, 3, 1, "", "get_suffixes"], [34, 3, 1, "", "group"], [34, 3, 1, "", "hash"], [34, 3, 1, "", "info"], [34, 3, 1, "", "is_lower"], [34, 3, 1, "", "is_registered"], [34, 3, 1, "", "is_title"], [34, 3, 1, "", "is_upper"], [34, 4, 1, "", "logger"], [34, 3, 1, "", "lstick"], [34, 3, 1, "", "match"], [34, 4, 1, "", "nbytes"], [34, 4, 1, "", "ndim"], [34, 4, 1, "", "objtype"], [34, 3, 1, "", "peel"], [34, 3, 1, "", "pretty_print_info"], [34, 3, 1, "", "purge_cached_regex_patterns"], [34, 3, 1, "", "register"], [34, 3, 1, "", "rpeel"], [34, 3, 1, "", "search"], [34, 4, 1, "", "shape"], [34, 4, 1, "", "size"], [34, 3, 1, "", "split"], [34, 3, 1, "", "startswith"], [34, 3, 1, "", "stick"], [34, 3, 1, "", "strip"], [34, 3, 1, "", "sub"], [34, 3, 1, "", "subn"], [34, 3, 1, "", "to_hdf"], [34, 3, 1, "", "to_list"], [34, 3, 1, "", "to_lower"], [34, 3, 1, "", "to_ndarray"], [34, 3, 1, "", "to_parquet"], [34, 3, 1, "", "to_title"], [34, 3, 1, "", "to_upper"], [34, 3, 1, "", "unregister"], [34, 3, 1, "", "unregister_strings_by_name"]], "arkouda.timeclass": [[35, 2, 1, "", "Datetime"], [35, 2, 1, "", "Timedelta"], [35, 2, 1, "", "_AbstractBaseTime"], [35, 1, 1, "", "_BASE_UNIT"], [35, 2, 1, "", "_Timescalar"], [35, 5, 1, "", "_get_factor"], [35, 5, 1, "", "_identity"], [35, 1, 1, "", "_unit2factor"], [35, 1, 1, "", "_unit2normunit"], [35, 5, 1, "", "date_range"], [35, 5, 1, "", "timedelta_range"]], "arkouda.timeclass.Datetime": [[35, 3, 1, "", "_ensure_components"], [35, 3, 1, "", "_get_callback"], [35, 3, 1, "", "_is_supported_scalar"], [35, 3, 1, "", "_scalar_callback"], [35, 6, 1, "", "date"], [35, 6, 1, "", "day"], [35, 6, 1, "", "day_of_week"], [35, 6, 1, "", "day_of_year"], [35, 6, 1, "", "dayofweek"], [35, 6, 1, "", "dayofyear"], [35, 6, 1, "", "hour"], [35, 6, 1, "", "is_leap_year"], [35, 3, 1, "", "isocalendar"], [35, 6, 1, "", "microsecond"], [35, 6, 1, "", "millisecond"], [35, 6, 1, "", "minute"], [35, 6, 1, "", "month"], [35, 6, 1, "", "nanosecond"], [35, 6, 1, "", "second"], [35, 3, 1, "", "sum"], [35, 4, 1, "", "supported_opeq"], [35, 4, 1, "", "supported_with_datetime"], [35, 4, 1, "", "supported_with_pdarray"], [35, 4, 1, "", "supported_with_r_datetime"], [35, 4, 1, "", "supported_with_r_pdarray"], [35, 4, 1, "", "supported_with_r_timedelta"], [35, 4, 1, "", "supported_with_timedelta"], [35, 3, 1, "", "to_pandas"], [35, 6, 1, "", "week"], [35, 6, 1, "", "weekday"], [35, 6, 1, "", "weekofyear"], [35, 6, 1, "", "year"]], "arkouda.timeclass.Timedelta": [[35, 3, 1, "", "_ensure_components"], [35, 3, 1, "", "_get_callback"], [35, 3, 1, "", "_is_supported_scalar"], [35, 3, 1, "", "_scalar_callback"], [35, 3, 1, "", "abs"], [35, 6, 1, "", "components"], [35, 6, 1, "", "days"], [35, 6, 1, "", "microseconds"], [35, 6, 1, "", "nanoseconds"], [35, 6, 1, "", "seconds"], [35, 3, 1, "", "std"], [35, 3, 1, "", "sum"], [35, 4, 1, "", "supported_opeq"], [35, 4, 1, "", "supported_with_datetime"], [35, 4, 1, "", "supported_with_pdarray"], [35, 4, 1, "", "supported_with_r_datetime"], [35, 4, 1, "", "supported_with_r_pdarray"], [35, 4, 1, "", "supported_with_r_timedelta"], [35, 4, 1, "", "supported_with_timedelta"], [35, 3, 1, "", "to_pandas"], [35, 3, 1, "", "total_seconds"]], "arkouda.timeclass._AbstractBaseTime": [[35, 3, 1, "", "__getitem__"], [35, 3, 1, "", "__repr__"], [35, 3, 1, "", "__setitem__"], [35, 3, 1, "", "__str__"], [35, 3, 1, "", "_binop"], [35, 3, 1, "", "_get_callback"], [35, 3, 1, "", "_is_datetime_scalar"], [35, 3, 1, "", "_is_timedelta_scalar"], [35, 3, 1, "", "_r_binop"], [35, 3, 1, "", "_scalar_callback"], [35, 3, 1, "", "ceil"], [35, 3, 1, "", "floor"], [35, 3, 1, "", "max"], [35, 3, 1, "", "maxk"], [35, 3, 1, "", "min"], [35, 3, 1, "", "mink"], [35, 3, 1, "", "opeq"], [35, 3, 1, "", "round"], [35, 3, 1, "", "to_list"], [35, 3, 1, "", "to_ndarray"]], "arkouda.util": [[36, 5, 1, "", "attach"], [36, 5, 1, "", "attach_all"], [36, 5, 1, "", "concatenate"], [36, 5, 1, "", "convert_if_categorical"], [36, 5, 1, "", "enrich_inplace"], [36, 5, 1, "", "expand"], [36, 5, 1, "", "generic_concat"], [36, 5, 1, "", "get_callback"], [36, 5, 1, "", "identity"], [36, 5, 1, "", "invert_permutation"], [36, 5, 1, "", "most_common"], [36, 5, 1, "", "register"], [36, 5, 1, "", "register_all"], [36, 5, 1, "", "report_mem"], [36, 5, 1, "", "unregister_all"], [36, 5, 1, "", "unregister_by_name"]]}, "objtypes": {"0": "py:module", "1": "py:data", "2": "py:class", "3": "py:method", "4": "py:attribute", "5": "py:function", "6": "py:property", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "data", "Python data"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"], "6": ["py", "property", "Python property"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"contribut": 0, "ad": [0, 1, 45], "issu": 0, "bug": 0, "report": 0, "featur": [0, 52, 58, 64], "request": 0, "develop": [0, 46], "arkouda": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 42, 45, 52, 55, 58, 63, 64, 66, 67], "code": 0, "convent": 0, "lint": 0, "python3": 0, "chapel": [0, 1, 41, 43, 44], "test": [0, 1, 49], "run": [0, 1, 45], "python": [0, 1, 38, 40, 43, 44, 46, 66], "write": [0, 2], "pull": 0, "review": 0, "core": 0, "team": 0, "onli": 0, "merg": 0, "releas": 0, "process": [0, 45], "environ": [1, 42, 43, 44], "variabl": [1, 42], "compil": 1, "makefil": 1, "flag": 1, "depend": [1, 42, 46], "path": 1, "modul": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 45], "from": [1, 44, 51], "outsid": 1, "src": 1, "directori": 1, "client": [1, 8, 40, 51, 66], "file": [2, 45, 51], "i": [2, 51, 67], "o": [2, 51, 67], "support": [2, 51], "type": [2, 58, 62], "hdf5": 2, "format": [2, 51], "metadata": 2, "attribut": [2, 3, 6, 12, 13, 14, 16, 21, 30, 33, 35], "data": [2, 51, 58, 60, 62], "pdarrai": [2, 38, 51, 61, 62], "arrayview": [2, 55], "dataset": [2, 51], "string": [2, 34, 67], "parquet": 2, "read": [2, 51], "object": [2, 38, 67], "_version": 3, "content": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "class": [3, 4, 6, 7, 9, 10, 13, 14, 15, 21, 22, 23, 24, 25, 29, 31, 32, 34, 35, 62], "function": [3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 30, 31, 33, 35, 36, 54], "accessor": 4, "align": 5, "array_view": 6, "categor": [7, 56], "client_dtyp": 9, "datafram": [10, 38, 51, 58], "decor": 11, "dtype": [12, 52], "groupbyclass": 13, "submodul": 14, "packag": [14, 42], "input": [14, 32], "index": [15, 40, 52, 55, 58, 61], "infoclass": 16, "io": 17, "io_util": 18, "join": [19, 67], "logger": 20, "match": [21, 67], "matcher": 22, "messag": 23, "numer": [24, 54], "pdarrayclass": 25, "pdarraycr": 26, "pdarraysetop": 27, "plot": 28, "row": 29, "secur": 30, "segarrai": [31, 63], "seri": [32, 64], "sort": [33, 40, 53, 58, 64], "timeclass": 35, "util": 36, "api": [37, 41], "refer": [37, 41], "exampl": 38, "arrai": [38, 40, 51, 57, 63, 65], "creation": [38, 55], "export": [38, 51], "set": [38, 63, 65], "oper": [38, 54, 56, 62, 63, 65, 67], "creat": [38, 40, 57], "us": [38, 42, 45, 46], "import": [38, 51], "panda": [38, 64], "map": 38, "basic": 38, "interact": 38, "groupbi": [38, 58, 59], "document": [39, 42], "quickstart": 40, "launch": [40, 66], "server": [40, 42, 45, 51, 66], "connect": [40, 66], "3": [40, 66], "simpl": 40, "comput": 40, "sum": 40, "an": [40, 45], "arithmet": [40, 54], "And": 40, "more": 40, "shutdown": 40, "option": 40, "build": [42, 44, 45], "get": 42, "start": 42, "configur": [42, 45], "instal": [42, 43, 44, 46, 48], "recommend": [42, 44], "all": 42, "individu": 42, "arrow": 42, "troubleshoot": 42, "distribut": 42, "modular": [42, 45], "linux": 43, "ubuntu": 43, "rhel": 43, "anaconda": [43, 44, 46], "maco": 44, "sourc": 44, "homebrew": 44, "updat": [44, 46], "next": 44, "step": 44, "specifi": 45, "custom": 45, "new": 45, "save": 45, "requir": [46, 48], "list": 46, "specif": [46, 63, 67], "pip": 46, "window": 47, "wsl2": 47, "overview": 48, "guid": 48, "perform": [49, 63, 67], "argsort": [49, 52], "posit": 49, "argument": 49, "name": [49, 62], "gather": [49, 61], "reduc": 49, "scan": [49, 54], "scatter": [49, 61], "stream": 49, "usag": 50, "between": 51, "larg": 51, "preprocess": 51, "disk": 51, "persist": 51, "load": 51, "chang": 52, "lookup": [52, 64], "concat": 52, "vector": 54, "scalar": 54, "element": [54, 63], "wise": 54, "reduct": 54, "where": 54, "iter": [55, 56, 58, 62, 63, 67], "construct": 56, "constant": 57, "regular": [57, 67], "random": 57, "concaten": [57, 58], "drop": 58, "copi": 58, "filter": 58, "permut": 58, "tail": [58, 64], "head": [58, 64], "renam": 58, "column": 58, "append": [58, 63], "reset": 58, "dedupl": [58, 63], "summar": 60, "descript": 60, "statist": 60, "histogram": 60, "valu": [60, 64], "count": [60, 64], "assign": 61, "integ": 61, "slice": 61, "logic": 61, "The": 62, "rank": 62, "cast": 62, "reshap": 62, "method": [63, 67], "prefix": 63, "suffix": 63, "ngram": 63, "sub": 63, "size": 63, "access": 63, "prepend": 63, "setop": 63, "union": 63, "intersect": 63, "differ": 63, "symmetr": 63, "integr": 64, "startup": 66, "substr": 67, "search": 67, "split": 67, "flatten": 67, "express": 67}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Contributing": [[0, "contributing"]], "Adding Issues": [[0, "adding-issues"]], "Bug Reports": [[0, "bug-reports"]], "Feature Requests": [[0, "feature-requests"]], "Developing Arkouda": [[0, "developing-arkouda"]], "Coding Conventions and Linting": [[0, "coding-conventions-and-linting"]], "Python3": [[0, "python3"]], "Chapel": [[0, "chapel"]], "Testing": [[0, "testing"], [1, "testing"]], "Running python tests": [[0, "running-python-tests"]], "Running chapel tests": [[0, "running-chapel-tests"]], "Writing Pull Requests": [[0, "writing-pull-requests"]], "Reviewing Pull Requests": [[0, "reviewing-pull-requests"]], "Core Development Team Only": [[0, "core-development-team-only"]], "Merging Pull Requests": [[0, "merging-pull-requests"]], "Release Process": [[0, "release-process"]], "Environment Variables": [[1, "environment-variables"], [42, "environment-variables"]], "Running": [[1, "running"]], "Compilation / Makefile": [[1, "compilation-makefile"]], "Chapel Compiler Flags": [[1, "chapel-compiler-flags"]], "Dependency Paths": [[1, "dependency-paths"]], "Adding a Module from Outside the Arkouda src Directory": [[1, "adding-a-module-from-outside-the-arkouda-src-directory"]], "Python Client": [[1, "python-client"]], "File I/O": [[2, "file-i-o"]], "Supported File Types": [[2, "supported-file-types"]], "HDF5": [[2, "hdf5"]], "File Formats": [[2, "file-formats"]], "MetaData Attributes": [[2, "metadata-attributes"]], "Supported Arkouda Data Types": [[2, "supported-arkouda-data-types"]], "PDArray/ArrayView Dataset Format": [[2, "pdarray-arrayview-dataset-format"]], "Strings DataSet Format": [[2, "strings-dataset-format"]], "Parquet": [[2, "parquet"]], "Reading Objects": [[2, "reading-objects"]], "Writing Objects": [[2, "writing-objects"]], "arkouda._version": [[3, "module-arkouda._version"]], "Module Contents": [[3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"]], "Classes": [[3, "classes"], [4, "classes"], [6, "classes"], [7, "classes"], [9, "classes"], [10, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [29, "classes"], [31, "classes"], [32, "classes"], [34, "classes"], [35, "classes"]], "Functions": [[3, "functions"], [4, "functions"], [5, "functions"], [8, "functions"], [9, "functions"], [10, "functions"], [11, "functions"], [12, "functions"], [13, "functions"], [14, "functions"], [16, "functions"], [17, "functions"], [18, "functions"], [19, "functions"], [20, "functions"], [24, "functions"], [25, "functions"], [26, "functions"], [27, "functions"], [28, "functions"], [30, "functions"], [31, "functions"], [33, "functions"], [35, "functions"], [36, "functions"]], "Attributes": [[3, "attributes"], [6, "attributes"], [12, "attributes"], [13, "attributes"], [14, "attributes"], [16, "attributes"], [21, "attributes"], [30, "attributes"], [33, "attributes"], [35, "attributes"]], "arkouda.accessor": [[4, "module-arkouda.accessor"]], "arkouda.alignment": [[5, "module-arkouda.alignment"]], "arkouda.array_view": [[6, "module-arkouda.array_view"]], "arkouda.categorical": [[7, "module-arkouda.categorical"]], "arkouda.client": [[8, "module-arkouda.client"]], "arkouda.client_dtypes": [[9, "module-arkouda.client_dtypes"]], "arkouda.dataframe": [[10, "module-arkouda.dataframe"]], "arkouda.decorators": [[11, "module-arkouda.decorators"]], "arkouda.dtypes": [[12, "module-arkouda.dtypes"]], "arkouda.groupbyclass": [[13, "module-arkouda.groupbyclass"]], "arkouda": [[14, "module-arkouda"]], "Submodules": [[14, "submodules"]], "Package Contents": [[14, "package-contents"]], "Input": [[14, "input"], [32, "input"]], "arkouda.index": [[15, "module-arkouda.index"]], "arkouda.infoclass": [[16, "module-arkouda.infoclass"]], "arkouda.io": [[17, "module-arkouda.io"]], "arkouda.io_util": [[18, "module-arkouda.io_util"]], "arkouda.join": [[19, "module-arkouda.join"]], "arkouda.logger": [[20, "module-arkouda.logger"]], "arkouda.match": [[21, "module-arkouda.match"]], "arkouda.matcher": [[22, "module-arkouda.matcher"]], "arkouda.message": [[23, "module-arkouda.message"]], "arkouda.numeric": [[24, "module-arkouda.numeric"]], "arkouda.pdarrayclass": [[25, "module-arkouda.pdarrayclass"]], "arkouda.pdarraycreation": [[26, "module-arkouda.pdarraycreation"]], "arkouda.pdarraysetops": [[27, "module-arkouda.pdarraysetops"]], "arkouda.plotting": [[28, "module-arkouda.plotting"]], "arkouda.row": [[29, "module-arkouda.row"]], "arkouda.security": [[30, "module-arkouda.security"]], "arkouda.segarray": [[31, "module-arkouda.segarray"]], "arkouda.series": [[32, "module-arkouda.series"]], "arkouda.sorting": [[33, "module-arkouda.sorting"]], "arkouda.strings": [[34, "module-arkouda.strings"]], "arkouda.timeclass": [[35, "module-arkouda.timeclass"]], "arkouda.util": [[36, "module-arkouda.util"]], "API Reference": [[37, "api-reference"]], "Examples": [[38, "examples"]], "Arkouda Arrays": [[38, "arkouda-arrays"]], "pdarray Creation": [[38, "pdarray-creation"]], "Exporting pdarray Objects": [[38, "exporting-pdarray-objects"]], "pdarray Set operations": [[38, "pdarray-set-operations"]], "Arkouda DataFrames": [[38, "arkouda-dataframes"]], "Creating & Using a DataFrame": [[38, "creating-using-a-dataframe"]], "Importing Pandas DataFrame": [[38, "importing-pandas-dataframe"]], "Python Mapping": [[38, "python-mapping"]], "Basic Interaction": [[38, "basic-interaction"]], "Exporting to Pandas": [[38, "exporting-to-pandas"]], "GroupBy": [[38, "groupby"], [58, "groupby"], [59, "groupby"]], "pdarrays": [[38, "pdarrays"]], "DataFrames": [[38, "dataframes"]], "Arkouda Documentation": [[39, "arkouda-documentation"]], "Quickstart": [[40, "quickstart"]], "Launch Arkouda Server": [[40, "launch-arkouda-server"]], "Connect the Python 3 Client": [[40, "connect-the-python-3-client"]], "Simple Computations": [[40, "simple-computations"]], "Create and sum an array": [[40, "create-and-sum-an-array"]], "Array arithmetic": [[40, "array-arithmetic"]], "Indexing": [[40, "indexing"], [55, "indexing"]], "Sorting": [[40, "sorting"], [53, "sorting"], [58, "sorting"], [64, "sorting"]], "And More": [[40, "and-more"]], "Shutdown the server (optional)": [[40, "shutdown-the-server-optional"]], "Chapel API Reference": [[41, "chapel-api-reference"]], "Building the Server": [[42, "building-the-server"]], "Getting Started": [[42, "getting-started"]], "Dependency Configuration": [[42, "dependency-configuration"]], "Using Environment Installed Dependencies (Recommended)": [[42, "using-environment-installed-dependencies-recommended"]], "Installing Dependencies": [[42, "installing-dependencies"]], "Dependencies": [[42, "dependencies"]], "All Dependencies": [[42, "all-dependencies"]], "Individual Installs": [[42, "individual-installs"]], "Arrow Install Troubleshooting": [[42, "arrow-install-troubleshooting"]], "Distributable Package": [[42, "distributable-package"]], "Build the Server": [[42, "build-the-server"]], "Building the Arkouda Documentation": [[42, "building-the-arkouda-documentation"]], "Modular Building": [[42, "modular-building"]], "Linux": [[43, "linux"]], "Install Chapel (Ubuntu)": [[43, "install-chapel-ubuntu"]], "Install Chapel (RHEL)": [[43, "install-chapel-rhel"]], "Python Environment - Anaconda (Linux)": [[43, "python-environment-anaconda-linux"]], "MacOS": [[44, "macos"]], "Install Chapel": [[44, "install-chapel"]], "Build from Source (Recommended)": [[44, "build-from-source-recommended"]], "Homebrew": [[44, "homebrew"]], "Python Environment - Anaconda": [[44, "python-environment-anaconda"]], "Updating Environment": [[44, "updating-environment"]], "Anaconda": [[44, "anaconda"]], "Next Steps": [[44, "next-steps"]], "Modular Server Builds": [[45, "modular-server-builds"]], "Specifying a custom configuration file": [[45, "specifying-a-custom-configuration-file"]], "Adding new modules into the build process": [[45, "adding-new-modules-into-the-build-process"]], "Saving modules used in an Arkouda server run": [[45, "saving-modules-used-in-an-arkouda-server-run"]], "Requirements": [[46, "requirements"], [48, "requirements"]], "Dependency List": [[46, "dependency-list"]], "Python Dependencies": [[46, "python-dependencies"]], "Developer Specific": [[46, "developer-specific"]], "Installing/Updating Python Dependencies": [[46, "installing-updating-python-dependencies"]], "Using Anaconda": [[46, "using-anaconda"]], "Using Pip": [[46, "using-pip"]], "Windows (WSL2)": [[47, "windows-wsl2"]], "Installation": [[48, "installation"]], "Overview": [[48, "overview"]], "Install Guides": [[48, "install-guides"]], "Performance Testing": [[49, "performance-testing"]], "Argsort": [[49, "argsort"]], "Positional Arguments": [[49, "positional-arguments"], [49, "positional-arguments"], [49, "positional-arguments"], [49, "positional-arguments"], [49, "positional-arguments"], [49, "positional-arguments"]], "Named Arguments": [[49, "named-arguments"], [49, "named-arguments"], [49, "named-arguments"], [49, "named-arguments"], [49, "named-arguments"], [49, "named-arguments"]], "Gather": [[49, "gather"]], "Reduce": [[49, "reduce"]], "Scan": [[49, "scan"]], "Scatter": [[49, "scatter"]], "Stream": [[49, "stream"]], "Usage": [[50, "usage"]], "Data I/O": [[51, "data-i-o"]], "Between client and server": [[51, "between-client-and-server"]], "Large Datasets": [[51, "large-datasets"]], "Supported File Formats": [[51, "supported-file-formats"]], "Data Preprocessing": [[51, "data-preprocessing"]], "Reading data from disk": [[51, "reading-data-from-disk"]], "Persisting pdarray data to disk": [[51, "persisting-pdarray-data-to-disk"]], "Loading persisted arrays from disk": [[51, "loading-persisted-arrays-from-disk"]], "Persisting DataFrame data to disk": [[51, "persisting-dataframe-data-to-disk"]], "Loading persisted DataFrame data from disk": [[51, "loading-persisted-dataframe-data-from-disk"]], "Import/Export": [[51, "import-export"]], "Indexs in Arkouda": [[52, "indexs-in-arkouda"]], "Features": [[52, "features"], [58, "features"], [64, "features"]], "Change Dtype": [[52, "change-dtype"]], "ArgSort": [[52, "argsort"]], "Lookup": [[52, "lookup"], [64, "lookup"], [64, "id1"]], "Concat": [[52, "concat"]], "Arithmetic and Numeric Operations": [[54, "arithmetic-and-numeric-operations"]], "Vector and Scalar Arithmetic": [[54, "vector-and-scalar-arithmetic"]], "Element-wise Functions": [[54, "element-wise-functions"]], "Scans": [[54, "scans"]], "Reductions": [[54, "reductions"]], "Where": [[54, "where"]], "ArrayView in Arkouda": [[55, "arrayview-in-arkouda"]], "Creation": [[55, "creation"]], "Iteration": [[55, "iteration"], [56, "iteration"], [58, "iteration"], [62, "iteration"], [63, "iteration"], [67, "iteration"]], "Categoricals": [[56, "categoricals"]], "Construction": [[56, "construction"]], "Operations": [[56, "operations"], [67, "operations"]], "Creating Arrays": [[57, "creating-arrays"]], "Constant": [[57, "constant"]], "Regular": [[57, "regular"]], "Random": [[57, "random"]], "Concatenation": [[57, "concatenation"]], "DataFrames in Arkouda": [[58, "dataframes-in-arkouda"]], "Data Types": [[58, "data-types"]], "Drop": [[58, "drop"]], "Copy": [[58, "copy"]], "Filter": [[58, "filter"]], "Permutations": [[58, "permutations"]], "Tail/Head of Data": [[58, "tail-head-of-data"]], "Rename Columns": [[58, "rename-columns"]], "Append": [[58, "append"]], "Concatenate": [[58, "concatenate"]], "Reset Indexes": [[58, "reset-indexes"]], "Deduplication": [[58, "deduplication"], [63, "deduplication"]], "Summarizing Data": [[60, "summarizing-data"]], "Descriptive Statistics": [[60, "descriptive-statistics"]], "Histogram": [[60, "histogram"]], "Value Counts": [[60, "value-counts"], [64, "value-counts"]], "Indexing and Assignment": [[61, "indexing-and-assignment"]], "Integer": [[61, "integer"]], "Slice": [[61, "slice"]], "Gather/Scatter (pdarray)": [[61, "gather-scatter-pdarray"]], "Integer pdarray index": [[61, "integer-pdarray-index"]], "Logical indexing": [[61, "logical-indexing"]], "The pdarray class": [[62, "the-pdarray-class"]], "Data Type": [[62, "data-type"]], "Rank": [[62, "rank"]], "Name": [[62, "name"]], "Operators": [[62, "operators"]], "Type Casting": [[62, "type-casting"]], "Reshape": [[62, "reshape"]], "SegArrays in Arkouda": [[63, "segarrays-in-arkouda"]], "Performance": [[63, "performance"], [67, "performance"]], "Operation": [[63, "operation"]], "SegArray Specific Methods": [[63, "segarray-specific-methods"]], "Prefix & Suffix": [[63, "prefix-suffix"]], "NGrams": [[63, "ngrams"]], "Sub-array of Size": [[63, "sub-array-of-size"]], "Access/Set Specific Elements in Sub-Array": [[63, "access-set-specific-elements-in-sub-array"]], "Append & Prepend": [[63, "append-prepend"]], "SegArray SetOps": [[63, "segarray-setops"]], "Union": [[63, "union"]], "Intersect": [[63, "intersect"]], "Set Difference": [[63, "set-difference"]], "Symmetric Difference": [[63, "symmetric-difference"]], "Series in Arkouda": [[64, "series-in-arkouda"]], "Head/Tail": [[64, "head-tail"]], "Pandas Integration": [[64, "pandas-integration"]], "Array Set Operations": [[65, "array-set-operations"]], "Startup": [[66, "startup"]], "Launch arkouda server": [[66, "launch-arkouda-server"]], "Connect a Python 3 client": [[66, "connect-a-python-3-client"]], "Strings in Arkouda": [[67, "strings-in-arkouda"]], "I/O": [[67, "i-o"]], "String-Specific Methods": [[67, "string-specific-methods"]], "Substring search": [[67, "substring-search"]], "Splitting and joining": [[67, "splitting-and-joining"]], "Flattening": [[67, "flattening"]], "Regular Expressions": [[67, "regular-expressions"]], "Match Object": [[67, "match-object"]]}, "indexentries": {"handlers (in module arkouda._version)": [[3, "arkouda._version.HANDLERS"]], "long_version_py (in module arkouda._version)": [[3, "arkouda._version.LONG_VERSION_PY"]], "notthismethod": [[3, "arkouda._version.NotThisMethod"]], "versioneerconfig (class in arkouda._version)": [[3, "arkouda._version.VersioneerConfig"]], "arkouda._version": [[3, "module-arkouda._version"]], "get_config() (in module arkouda._version)": [[3, "arkouda._version.get_config"]], "get_keywords() (in module arkouda._version)": [[3, "arkouda._version.get_keywords"]], "get_versions() (in module arkouda._version)": [[3, "arkouda._version.get_versions"]], "git_get_keywords() (in module arkouda._version)": [[3, "arkouda._version.git_get_keywords"]], "git_pieces_from_vcs() (in module arkouda._version)": [[3, "arkouda._version.git_pieces_from_vcs"]], "git_versions_from_keywords() (in module arkouda._version)": [[3, "arkouda._version.git_versions_from_keywords"]], "module": [[3, "module-arkouda._version"], [4, "module-arkouda.accessor"], [5, "module-arkouda.alignment"], [6, "module-arkouda.array_view"], [7, "module-arkouda.categorical"], [8, "module-arkouda.client"], [9, "module-arkouda.client_dtypes"], [10, "module-arkouda.dataframe"], [11, "module-arkouda.decorators"], [12, "module-arkouda.dtypes"], [13, "module-arkouda.groupbyclass"], [14, "module-arkouda"], [15, "module-arkouda.index"], [16, "module-arkouda.infoclass"], [17, "module-arkouda.io"], [18, "module-arkouda.io_util"], [19, "module-arkouda.join"], [20, "module-arkouda.logger"], [21, "module-arkouda.match"], [22, "module-arkouda.matcher"], [23, "module-arkouda.message"], [24, "module-arkouda.numeric"], [25, "module-arkouda.pdarrayclass"], [26, "module-arkouda.pdarraycreation"], [27, "module-arkouda.pdarraysetops"], [28, "module-arkouda.plotting"], [29, "module-arkouda.row"], [30, "module-arkouda.security"], [31, "module-arkouda.segarray"], [32, "module-arkouda.series"], [33, "module-arkouda.sorting"], [34, "module-arkouda.strings"], [35, "module-arkouda.timeclass"], [36, "module-arkouda.util"]], "plus_or_dot() (in module arkouda._version)": [[3, "arkouda._version.plus_or_dot"]], "register_vcs_handler() (in module arkouda._version)": [[3, "arkouda._version.register_vcs_handler"]], "render() (in module arkouda._version)": [[3, "arkouda._version.render"]], "render_git_describe() (in module arkouda._version)": [[3, "arkouda._version.render_git_describe"]], "render_git_describe_long() (in module arkouda._version)": [[3, "arkouda._version.render_git_describe_long"]], "render_pep440() (in module arkouda._version)": [[3, "arkouda._version.render_pep440"]], "render_pep440_old() (in module arkouda._version)": [[3, "arkouda._version.render_pep440_old"]], "render_pep440_post() (in module arkouda._version)": [[3, "arkouda._version.render_pep440_post"]], "render_pep440_pre() (in module arkouda._version)": [[3, "arkouda._version.render_pep440_pre"]], "run_command() (in module arkouda._version)": [[3, "arkouda._version.run_command"]], "versions_from_parentdir() (in module arkouda._version)": [[3, "arkouda._version.versions_from_parentdir"]], "cachedaccessor (class in arkouda.accessor)": [[4, "arkouda.accessor.CachedAccessor"]], "datetimeaccessor (class in arkouda.accessor)": [[4, "arkouda.accessor.DatetimeAccessor"]], "properties (class in arkouda.accessor)": [[4, "arkouda.accessor.Properties"]], "stringaccessor (class in arkouda.accessor)": [[4, "arkouda.accessor.StringAccessor"]], "__get__() (arkouda.accessor.cachedaccessor method)": [[4, "arkouda.accessor.CachedAccessor.__get__"]], "_make_op() (arkouda.accessor.properties class method)": [[4, "arkouda.accessor.Properties._make_op"]], "arkouda.accessor": [[4, "module-arkouda.accessor"]], "date_operators() (in module arkouda.accessor)": [[4, "arkouda.accessor.date_operators"]], "string_operators() (in module arkouda.accessor)": [[4, "arkouda.accessor.string_operators"]], "nonuniqueerror": [[5, "arkouda.alignment.NonUniqueError"], [14, "arkouda.NonUniqueError"]], "align() (in module arkouda.alignment)": [[5, "arkouda.alignment.align"]], "arkouda.alignment": [[5, "module-arkouda.alignment"]], "find() (in module arkouda.alignment)": [[5, "arkouda.alignment.find"]], "in1d_intervals() (in module arkouda.alignment)": [[5, "arkouda.alignment.in1d_intervals"]], "interval_lookup() (in module arkouda.alignment)": [[5, "arkouda.alignment.interval_lookup"]], "is_cosorted() (in module arkouda.alignment)": [[5, "arkouda.alignment.is_cosorted"]], "left_align() (in module arkouda.alignment)": [[5, "arkouda.alignment.left_align"]], "lookup() (in module arkouda.alignment)": [[5, "arkouda.alignment.lookup"]], "right_align() (in module arkouda.alignment)": [[5, "arkouda.alignment.right_align"]], "search_intervals() (in module arkouda.alignment)": [[5, "arkouda.alignment.search_intervals"]], "unsqueeze() (in module arkouda.alignment)": [[5, "arkouda.alignment.unsqueeze"]], "zero_up() (in module arkouda.alignment)": [[5, "arkouda.alignment.zero_up"]], "arrayview (class in arkouda.array_view)": [[6, "arkouda.array_view.ArrayView"]], "ordertype (in module arkouda.array_view)": [[6, "arkouda.array_view.OrderType"]], "__getitem__() (arkouda.array_view.arrayview method)": [[6, "arkouda.array_view.ArrayView.__getitem__"]], "__len__() (arkouda.array_view.arrayview method)": [[6, "arkouda.array_view.ArrayView.__len__"]], "__repr__() (arkouda.array_view.arrayview method)": [[6, "arkouda.array_view.ArrayView.__repr__"]], "__setitem__() (arkouda.array_view.arrayview method)": [[6, "arkouda.array_view.ArrayView.__setitem__"]], "__str__() (arkouda.array_view.arrayview method)": [[6, "arkouda.array_view.ArrayView.__str__"]], "arkouda.array_view": [[6, "module-arkouda.array_view"]], "base (arkouda.array_view.arrayview attribute)": [[6, "arkouda.array_view.ArrayView.base"]], "dtype (arkouda.array_view.arrayview attribute)": [[6, "arkouda.array_view.ArrayView.dtype"]], "itemsize (arkouda.array_view.arrayview attribute)": [[6, "arkouda.array_view.ArrayView.itemsize"]], "ndim (arkouda.array_view.arrayview attribute)": [[6, "arkouda.array_view.ArrayView.ndim"]], "order (arkouda.array_view.arrayview attribute)": [[6, "arkouda.array_view.ArrayView.order"]], "shape (arkouda.array_view.arrayview attribute)": [[6, "arkouda.array_view.ArrayView.shape"]], "size (arkouda.array_view.arrayview attribute)": [[6, "arkouda.array_view.ArrayView.size"]], "to_hdf() (arkouda.array_view.arrayview method)": [[6, "arkouda.array_view.ArrayView.to_hdf"]], "to_list() (arkouda.array_view.arrayview method)": [[6, "arkouda.array_view.ArrayView.to_list"]], "to_ndarray() (arkouda.array_view.arrayview method)": [[6, "arkouda.array_view.ArrayView.to_ndarray"]], "binops (arkouda.categorical.categorical attribute)": [[7, "arkouda.categorical.Categorical.BinOps"]], "categorical (class in arkouda.categorical)": [[7, "arkouda.categorical.Categorical"]], "registerablepieces (arkouda.categorical.categorical attribute)": [[7, "arkouda.categorical.Categorical.RegisterablePieces"]], "requiredpieces (arkouda.categorical.categorical attribute)": [[7, "arkouda.categorical.Categorical.RequiredPieces"]], "__eq__() (arkouda.categorical.categorical method)": [[7, "arkouda.categorical.Categorical.__eq__"]], "__getitem__() (arkouda.categorical.categorical method)": [[7, "arkouda.categorical.Categorical.__getitem__"]], "__iter__() (arkouda.categorical.categorical method)": [[7, "arkouda.categorical.Categorical.__iter__"]], "__len__() (arkouda.categorical.categorical method)": [[7, "arkouda.categorical.Categorical.__len__"]], "__ne__() (arkouda.categorical.categorical method)": [[7, "arkouda.categorical.Categorical.__ne__"]], "__repr__() (arkouda.categorical.categorical method)": [[7, "arkouda.categorical.Categorical.__repr__"]], "__str__() (arkouda.categorical.categorical method)": [[7, "arkouda.categorical.Categorical.__str__"]], "_binop() (arkouda.categorical.categorical method)": [[7, "arkouda.categorical.Categorical._binop"]], "_get_components_dict() (arkouda.categorical.categorical method)": [[7, "arkouda.categorical.Categorical._get_components_dict"]], "_get_grouping_keys() (arkouda.categorical.categorical method)": [[7, "arkouda.categorical.Categorical._get_grouping_keys"]], "_list_component_names() (arkouda.categorical.categorical method)": [[7, "arkouda.categorical.Categorical._list_component_names"]], "_r_binop() (arkouda.categorical.categorical method)": [[7, "arkouda.categorical.Categorical._r_binop"]], "argsort() (arkouda.categorical.categorical method)": [[7, "arkouda.categorical.Categorical.argsort"]], "arkouda.categorical": [[7, "module-arkouda.categorical"]], "attach() (arkouda.categorical.categorical static method)": [[7, "arkouda.categorical.Categorical.attach"]], "categories (arkouda.categorical.categorical attribute)": [[7, "arkouda.categorical.Categorical.categories"]], "codes (arkouda.categorical.categorical attribute)": [[7, "arkouda.categorical.Categorical.codes"]], "concatenate() (arkouda.categorical.categorical method)": [[7, "arkouda.categorical.Categorical.concatenate"]], "contains() (arkouda.categorical.categorical method)": [[7, "arkouda.categorical.Categorical.contains"]], "endswith() (arkouda.categorical.categorical method)": [[7, "arkouda.categorical.Categorical.endswith"]], "from_codes() (arkouda.categorical.categorical class method)": [[7, "arkouda.categorical.Categorical.from_codes"]], "from_return_msg() (arkouda.categorical.categorical static method)": [[7, "arkouda.categorical.Categorical.from_return_msg"]], "group() (arkouda.categorical.categorical method)": [[7, "arkouda.categorical.Categorical.group"]], "in1d() (arkouda.categorical.categorical method)": [[7, "arkouda.categorical.Categorical.in1d"]], "info() (arkouda.categorical.categorical method)": [[7, "arkouda.categorical.Categorical.info"]], "is_registered() (arkouda.categorical.categorical method)": [[7, "arkouda.categorical.Categorical.is_registered"]], "isna() (arkouda.categorical.categorical method)": [[7, "arkouda.categorical.Categorical.isna"]], "ndim (arkouda.categorical.categorical attribute)": [[7, "arkouda.categorical.Categorical.ndim"]], "nlevels (arkouda.categorical.categorical attribute)": [[7, "arkouda.categorical.Categorical.nlevels"]], "objtype (arkouda.categorical.categorical property)": [[7, "arkouda.categorical.Categorical.objtype"]], "parse_hdf_categoricals() (arkouda.categorical.categorical static method)": [[7, "arkouda.categorical.Categorical.parse_hdf_categoricals"]], "permutation (arkouda.categorical.categorical attribute)": [[7, "arkouda.categorical.Categorical.permutation"], [7, "id0"]], "pretty_print_info() (arkouda.categorical.categorical method)": [[7, "arkouda.categorical.Categorical.pretty_print_info"]], "register() (arkouda.categorical.categorical method)": [[7, "arkouda.categorical.Categorical.register"]], "reset_categories() (arkouda.categorical.categorical method)": [[7, "arkouda.categorical.Categorical.reset_categories"]], "segments (arkouda.categorical.categorical attribute)": [[7, "arkouda.categorical.Categorical.segments"], [7, "id1"]], "set_categories() (arkouda.categorical.categorical method)": [[7, "arkouda.categorical.Categorical.set_categories"]], "shape (arkouda.categorical.categorical attribute)": [[7, "arkouda.categorical.Categorical.shape"]], "size (arkouda.categorical.categorical attribute)": [[7, "arkouda.categorical.Categorical.size"]], "sort() (arkouda.categorical.categorical method)": [[7, "arkouda.categorical.Categorical.sort"]], "standardize_categories() (arkouda.categorical.categorical class method)": [[7, "arkouda.categorical.Categorical.standardize_categories"]], "startswith() (arkouda.categorical.categorical method)": [[7, "arkouda.categorical.Categorical.startswith"]], "to_hdf() (arkouda.categorical.categorical method)": [[7, "arkouda.categorical.Categorical.to_hdf"]], "to_list() (arkouda.categorical.categorical method)": [[7, "arkouda.categorical.Categorical.to_list"]], "to_ndarray() (arkouda.categorical.categorical method)": [[7, "arkouda.categorical.Categorical.to_ndarray"]], "to_parquet() (arkouda.categorical.categorical method)": [[7, "arkouda.categorical.Categorical.to_parquet"]], "unique() (arkouda.categorical.categorical method)": [[7, "arkouda.categorical.Categorical.unique"]], "unregister() (arkouda.categorical.categorical method)": [[7, "arkouda.categorical.Categorical.unregister"]], "unregister_categorical_by_name() (arkouda.categorical.categorical static method)": [[7, "arkouda.categorical.Categorical.unregister_categorical_by_name"]], "arkouda.client": [[8, "module-arkouda.client"]], "connect() (in module arkouda.client)": [[8, "arkouda.client.connect"]], "disconnect() (in module arkouda.client)": [[8, "arkouda.client.disconnect"]], "get_config() (in module arkouda.client)": [[8, "arkouda.client.get_config"]], "get_mem_avail() (in module arkouda.client)": [[8, "arkouda.client.get_mem_avail"]], "get_mem_used() (in module arkouda.client)": [[8, "arkouda.client.get_mem_used"]], "get_server_commands() (in module arkouda.client)": [[8, "arkouda.client.get_server_commands"]], "print_server_commands() (in module arkouda.client)": [[8, "arkouda.client.print_server_commands"]], "ruok() (in module arkouda.client)": [[8, "arkouda.client.ruok"]], "shutdown() (in module arkouda.client)": [[8, "arkouda.client.shutdown"]], "bitvector (class in arkouda.client_dtypes)": [[9, "arkouda.client_dtypes.BitVector"]], "bitvectorizer() (in module arkouda.client_dtypes)": [[9, "arkouda.client_dtypes.BitVectorizer"]], "fields (class in arkouda.client_dtypes)": [[9, "arkouda.client_dtypes.Fields"]], "ipv4 (class in arkouda.client_dtypes)": [[9, "arkouda.client_dtypes.IPv4"]], "__getitem__() (arkouda.client_dtypes.bitvector method)": [[9, "arkouda.client_dtypes.BitVector.__getitem__"]], "__getitem__() (arkouda.client_dtypes.ipv4 method)": [[9, "arkouda.client_dtypes.IPv4.__getitem__"]], "__repr__() (arkouda.client_dtypes.bitvector method)": [[9, "arkouda.client_dtypes.BitVector.__repr__"]], "__repr__() (arkouda.client_dtypes.ipv4 method)": [[9, "arkouda.client_dtypes.IPv4.__repr__"]], "__setitem__() (arkouda.client_dtypes.bitvector method)": [[9, "arkouda.client_dtypes.BitVector.__setitem__"]], "__setitem__() (arkouda.client_dtypes.fields method)": [[9, "arkouda.client_dtypes.Fields.__setitem__"]], "__setitem__() (arkouda.client_dtypes.ipv4 method)": [[9, "arkouda.client_dtypes.IPv4.__setitem__"]], "__str__() (arkouda.client_dtypes.bitvector method)": [[9, "arkouda.client_dtypes.BitVector.__str__"]], "__str__() (arkouda.client_dtypes.ipv4 method)": [[9, "arkouda.client_dtypes.IPv4.__str__"]], "_binop() (arkouda.client_dtypes.bitvector method)": [[9, "arkouda.client_dtypes.BitVector._binop"]], "_binop() (arkouda.client_dtypes.fields method)": [[9, "arkouda.client_dtypes.Fields._binop"]], "_binop() (arkouda.client_dtypes.ipv4 method)": [[9, "arkouda.client_dtypes.IPv4._binop"]], "_cast() (arkouda.client_dtypes.bitvector method)": [[9, "arkouda.client_dtypes.BitVector._cast"]], "_cast() (arkouda.client_dtypes.fields method)": [[9, "arkouda.client_dtypes.Fields._cast"]], "_convert_strings() (arkouda.client_dtypes.fields method)": [[9, "arkouda.client_dtypes.Fields._convert_strings"]], "_is_supported_scalar() (arkouda.client_dtypes.ipv4 method)": [[9, "arkouda.client_dtypes.IPv4._is_supported_scalar"]], "_parse_scalar() (arkouda.client_dtypes.fields method)": [[9, "arkouda.client_dtypes.Fields._parse_scalar"]], "_r_binop() (arkouda.client_dtypes.bitvector method)": [[9, "arkouda.client_dtypes.BitVector._r_binop"]], "_r_binop() (arkouda.client_dtypes.fields method)": [[9, "arkouda.client_dtypes.Fields._r_binop"]], "_r_binop() (arkouda.client_dtypes.ipv4 method)": [[9, "arkouda.client_dtypes.IPv4._r_binop"]], "arkouda.client_dtypes": [[9, "module-arkouda.client_dtypes"]], "conserves (arkouda.client_dtypes.bitvector attribute)": [[9, "arkouda.client_dtypes.BitVector.conserves"]], "format() (arkouda.client_dtypes.bitvector method)": [[9, "arkouda.client_dtypes.BitVector.format"]], "format() (arkouda.client_dtypes.fields method)": [[9, "arkouda.client_dtypes.Fields.format"]], "format() (arkouda.client_dtypes.ipv4 method)": [[9, "arkouda.client_dtypes.IPv4.format"]], "ip_address() (in module arkouda.client_dtypes)": [[9, "arkouda.client_dtypes.ip_address"]], "is_ipv4() (in module arkouda.client_dtypes)": [[9, "arkouda.client_dtypes.is_ipv4"]], "is_ipv6() (in module arkouda.client_dtypes)": [[9, "arkouda.client_dtypes.is_ipv6"]], "normalize() (arkouda.client_dtypes.ipv4 method)": [[9, "arkouda.client_dtypes.IPv4.normalize"]], "opeq() (arkouda.client_dtypes.bitvector method)": [[9, "arkouda.client_dtypes.BitVector.opeq"]], "opeq() (arkouda.client_dtypes.fields method)": [[9, "arkouda.client_dtypes.Fields.opeq"]], "opeq() (arkouda.client_dtypes.ipv4 method)": [[9, "arkouda.client_dtypes.IPv4.opeq"]], "to_list() (arkouda.client_dtypes.bitvector method)": [[9, "arkouda.client_dtypes.BitVector.to_list"]], "to_list() (arkouda.client_dtypes.ipv4 method)": [[9, "arkouda.client_dtypes.IPv4.to_list"]], "to_ndarray() (arkouda.client_dtypes.bitvector method)": [[9, "arkouda.client_dtypes.BitVector.to_ndarray"]], "to_ndarray() (arkouda.client_dtypes.ipv4 method)": [[9, "arkouda.client_dtypes.IPv4.to_ndarray"]], "column_classes (arkouda.dataframe.dataframe attribute)": [[10, "arkouda.dataframe.DataFrame.COLUMN_CLASSES"]], "dataframe (class in arkouda.dataframe)": [[10, "arkouda.dataframe.DataFrame"]], "groupby() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame.GroupBy"], [10, "arkouda.dataframe.DataFrame.groupby"]], "__delitem__() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame.__delitem__"]], "__dir__() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame.__dir__"]], "__getattr__() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame.__getattr__"]], "__getitem__() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame.__getitem__"]], "__len__() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame.__len__"]], "__repr__() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame.__repr__"]], "__setitem__() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame.__setitem__"]], "__str__() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame.__str__"]], "_drop_column() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame._drop_column"]], "_drop_row() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame._drop_row"]], "_get_head_tail() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame._get_head_tail"]], "_get_head_tail_server() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame._get_head_tail_server"]], "_ipython_key_completions_() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame._ipython_key_completions_"]], "_ncols() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame._ncols"]], "_parse_col_name() (arkouda.dataframe.dataframe static method)": [[10, "arkouda.dataframe.DataFrame._parse_col_name"]], "_prep_data() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame._prep_data"]], "_rename_column() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame._rename_column"]], "_rename_index() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame._rename_index"]], "_repr_html_() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame._repr_html_"]], "_set_index() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame._set_index"]], "_shape_str() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame._shape_str"]], "append() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame.append"]], "apply_permutation() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame.apply_permutation"]], "argsort() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame.argsort"]], "arkouda.dataframe": [[10, "module-arkouda.dataframe"]], "attach() (arkouda.dataframe.dataframe static method)": [[10, "arkouda.dataframe.DataFrame.attach"]], "coargsort() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame.coargsort"]], "columns (arkouda.dataframe.dataframe property)": [[10, "arkouda.dataframe.DataFrame.columns"]], "concat() (arkouda.dataframe.dataframe class method)": [[10, "arkouda.dataframe.DataFrame.concat"]], "copy() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame.copy"]], "corr() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame.corr"]], "drop() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame.drop"]], "drop_duplicates() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame.drop_duplicates"]], "dtypes (arkouda.dataframe.dataframe property)": [[10, "arkouda.dataframe.DataFrame.dtypes"]], "empty (arkouda.dataframe.dataframe property)": [[10, "arkouda.dataframe.DataFrame.empty"]], "filter_by_range() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame.filter_by_range"]], "from_pandas() (arkouda.dataframe.dataframe class method)": [[10, "arkouda.dataframe.DataFrame.from_pandas"]], "from_return_msg() (arkouda.dataframe.dataframe static method)": [[10, "arkouda.dataframe.DataFrame.from_return_msg"]], "head() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame.head"]], "index (arkouda.dataframe.dataframe property)": [[10, "arkouda.dataframe.DataFrame.index"]], "info (arkouda.dataframe.dataframe property)": [[10, "arkouda.dataframe.DataFrame.info"]], "intersect() (in module arkouda.dataframe)": [[10, "arkouda.dataframe.intersect"]], "intx() (in module arkouda.dataframe)": [[10, "arkouda.dataframe.intx"]], "invert_permutation() (in module arkouda.dataframe)": [[10, "arkouda.dataframe.invert_permutation"]], "is_registered() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame.is_registered"]], "isin() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame.isin"]], "load() (arkouda.dataframe.dataframe class method)": [[10, "arkouda.dataframe.DataFrame.load"]], "memory_usage() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame.memory_usage"]], "register() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame.register"]], "rename() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame.rename"]], "reset_index() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame.reset_index"]], "sample() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame.sample"]], "shape (arkouda.dataframe.dataframe property)": [[10, "arkouda.dataframe.DataFrame.shape"]], "size (arkouda.dataframe.dataframe property)": [[10, "arkouda.dataframe.DataFrame.size"]], "sort_values() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame.sort_values"]], "sorted() (in module arkouda.dataframe)": [[10, "arkouda.dataframe.sorted"]], "tail() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame.tail"]], "to_hdf() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame.to_hdf"]], "to_pandas() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame.to_pandas"]], "to_parquet() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame.to_parquet"]], "unregister() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame.unregister"]], "unregister_dataframe_by_name() (arkouda.dataframe.dataframe static method)": [[10, "arkouda.dataframe.DataFrame.unregister_dataframe_by_name"]], "update_size() (arkouda.dataframe.dataframe method)": [[10, "arkouda.dataframe.DataFrame.update_size"]], "arkouda.decorators": [[11, "module-arkouda.decorators"]], "objtypedec() (in module arkouda.decorators)": [[11, "arkouda.decorators.objtypedec"]], "arkouda_supported_dtypes (in module arkouda.dtypes)": [[12, "arkouda.dtypes.ARKOUDA_SUPPORTED_DTYPES"]], "dtypeobjects (in module arkouda.dtypes)": [[12, "arkouda.dtypes.DTypeObjects"]], "dtypes (in module arkouda.dtypes)": [[12, "arkouda.dtypes.DTypes"]], "all_scalars (in module arkouda.dtypes)": [[12, "arkouda.dtypes.all_scalars"]], "arkouda.dtypes": [[12, "module-arkouda.dtypes"]], "bigint (in module arkouda.dtypes)": [[12, "arkouda.dtypes.bigint"]], "bittype (in module arkouda.dtypes)": [[12, "arkouda.dtypes.bitType"]], "bool (in module arkouda.dtypes)": [[12, "arkouda.dtypes.bool"]], "bool_scalars (in module arkouda.dtypes)": [[12, "arkouda.dtypes.bool_scalars"]], "check_np_dtype() (in module arkouda.dtypes)": [[12, "arkouda.dtypes.check_np_dtype"]], "dtype() (in module arkouda.dtypes)": [[12, "arkouda.dtypes.dtype"]], "float64 (in module arkouda.dtypes)": [[12, "arkouda.dtypes.float64"]], "float_scalars (in module arkouda.dtypes)": [[12, "arkouda.dtypes.float_scalars"]], "get_byteorder() (in module arkouda.dtypes)": [[12, "arkouda.dtypes.get_byteorder"]], "get_server_byteorder() (in module arkouda.dtypes)": [[12, "arkouda.dtypes.get_server_byteorder"]], "int64 (in module arkouda.dtypes)": [[12, "arkouda.dtypes.int64"]], "inttypes (in module arkouda.dtypes)": [[12, "arkouda.dtypes.intTypes"]], "int_scalars (in module arkouda.dtypes)": [[12, "arkouda.dtypes.int_scalars"]], "numeric_scalars (in module arkouda.dtypes)": [[12, "arkouda.dtypes.numeric_scalars"]], "numpy_scalars (in module arkouda.dtypes)": [[12, "arkouda.dtypes.numpy_scalars"]], "resolve_scalar_dtype() (in module arkouda.dtypes)": [[12, "arkouda.dtypes.resolve_scalar_dtype"]], "str_ (in module arkouda.dtypes)": [[12, "arkouda.dtypes.str_"]], "str_scalars (in module arkouda.dtypes)": [[12, "arkouda.dtypes.str_scalars"]], "translate_np_dtype() (in module arkouda.dtypes)": [[12, "arkouda.dtypes.translate_np_dtype"]], "uint64 (in module arkouda.dtypes)": [[12, "arkouda.dtypes.uint64"]], "uint8 (in module arkouda.dtypes)": [[12, "arkouda.dtypes.uint8"]], "and() (arkouda.groupbyclass.groupby method)": [[13, "arkouda.groupbyclass.GroupBy.AND"]], "groupby_reduction_types (in module arkouda.groupbyclass)": [[13, "arkouda.groupbyclass.GROUPBY_REDUCTION_TYPES"]], "groupby (class in arkouda.groupbyclass)": [[13, "arkouda.groupbyclass.GroupBy"]], "or() (arkouda.groupbyclass.groupby method)": [[13, "arkouda.groupbyclass.GroupBy.OR"]], "reductions (arkouda.groupbyclass.groupby attribute)": [[13, "arkouda.groupbyclass.GroupBy.Reductions"]], "xor() (arkouda.groupbyclass.groupby method)": [[13, "arkouda.groupbyclass.GroupBy.XOR"]], "_get_groupby_required_pieces() (arkouda.groupbyclass.groupby method)": [[13, "arkouda.groupbyclass.GroupBy._get_groupby_required_pieces"]], "_nested_grouping_helper() (arkouda.groupbyclass.groupby method)": [[13, "arkouda.groupbyclass.GroupBy._nested_grouping_helper"]], "aggregate() (arkouda.groupbyclass.groupby method)": [[13, "arkouda.groupbyclass.GroupBy.aggregate"]], "all() (arkouda.groupbyclass.groupby method)": [[13, "arkouda.groupbyclass.GroupBy.all"]], "any() (arkouda.groupbyclass.groupby method)": [[13, "arkouda.groupbyclass.GroupBy.any"]], "argmax() (arkouda.groupbyclass.groupby method)": [[13, "arkouda.groupbyclass.GroupBy.argmax"]], "argmin() (arkouda.groupbyclass.groupby method)": [[13, "arkouda.groupbyclass.GroupBy.argmin"]], "arkouda.groupbyclass": [[13, "module-arkouda.groupbyclass"]], "attach() (arkouda.groupbyclass.groupby static method)": [[13, "arkouda.groupbyclass.GroupBy.attach"]], "broadcast() (arkouda.groupbyclass.groupby method)": [[13, "arkouda.groupbyclass.GroupBy.broadcast"]], "broadcast() (in module arkouda.groupbyclass)": [[13, "arkouda.groupbyclass.broadcast"]], "build_from_components() (arkouda.groupbyclass.groupby static method)": [[13, "arkouda.groupbyclass.GroupBy.build_from_components"]], "count() (arkouda.groupbyclass.groupby method)": [[13, "arkouda.groupbyclass.GroupBy.count"]], "first() (arkouda.groupbyclass.groupby method)": [[13, "arkouda.groupbyclass.GroupBy.first"]], "is_registered() (arkouda.groupbyclass.groupby method)": [[13, "arkouda.groupbyclass.GroupBy.is_registered"]], "logger (arkouda.groupbyclass.groupby attribute)": [[13, "arkouda.groupbyclass.GroupBy.logger"]], "max() (arkouda.groupbyclass.groupby method)": [[13, "arkouda.groupbyclass.GroupBy.max"]], "mean() (arkouda.groupbyclass.groupby method)": [[13, "arkouda.groupbyclass.GroupBy.mean"]], "median() (arkouda.groupbyclass.groupby method)": [[13, "arkouda.groupbyclass.GroupBy.median"]], "min() (arkouda.groupbyclass.groupby method)": [[13, "arkouda.groupbyclass.GroupBy.min"]], "mode() (arkouda.groupbyclass.groupby method)": [[13, "arkouda.groupbyclass.GroupBy.mode"]], "most_common() (arkouda.groupbyclass.groupby method)": [[13, "arkouda.groupbyclass.GroupBy.most_common"]], "ngroups (arkouda.groupbyclass.groupby attribute)": [[13, "arkouda.groupbyclass.GroupBy.ngroups"]], "nkeys (arkouda.groupbyclass.groupby attribute)": [[13, "arkouda.groupbyclass.GroupBy.nkeys"]], "nunique() (arkouda.groupbyclass.groupby method)": [[13, "arkouda.groupbyclass.GroupBy.nunique"]], "permutation (arkouda.groupbyclass.groupby attribute)": [[13, "arkouda.groupbyclass.GroupBy.permutation"]], "prod() (arkouda.groupbyclass.groupby method)": [[13, "arkouda.groupbyclass.GroupBy.prod"]], "register() (arkouda.groupbyclass.groupby method)": [[13, "arkouda.groupbyclass.GroupBy.register"]], "segments (arkouda.groupbyclass.groupby attribute)": [[13, "arkouda.groupbyclass.GroupBy.segments"]], "size (arkouda.groupbyclass.groupby attribute)": [[13, "arkouda.groupbyclass.GroupBy.size"]], "size() (arkouda.groupbyclass.groupby method)": [[13, "id0"]], "std() (arkouda.groupbyclass.groupby method)": [[13, "arkouda.groupbyclass.GroupBy.std"]], "sum() (arkouda.groupbyclass.groupby method)": [[13, "arkouda.groupbyclass.GroupBy.sum"]], "unique() (arkouda.groupbyclass.groupby method)": [[13, "arkouda.groupbyclass.GroupBy.unique"]], "unique() (in module arkouda.groupbyclass)": [[13, "arkouda.groupbyclass.unique"]], "unique_keys (arkouda.groupbyclass.groupby attribute)": [[13, "arkouda.groupbyclass.GroupBy.unique_keys"]], "unregister() (arkouda.groupbyclass.groupby method)": [[13, "arkouda.groupbyclass.GroupBy.unregister"]], "unregister_groupby_by_name() (arkouda.groupbyclass.groupby static method)": [[13, "arkouda.groupbyclass.GroupBy.unregister_groupby_by_name"]], "var() (arkouda.groupbyclass.groupby method)": [[13, "arkouda.groupbyclass.GroupBy.var"]], "and() (arkouda.segarray method)": [[14, "arkouda.SegArray.AND"]], "arkouda_supported_dtypes (in module arkouda)": [[14, "arkouda.ARKOUDA_SUPPORTED_DTYPES"]], "allsymbols (in module arkouda)": [[14, "arkouda.AllSymbols"]], "arrayview (class in arkouda)": [[14, "arkouda.ArrayView"], [55, "arkouda.ArrayView"]], "binops (arkouda.strings attribute)": [[14, "arkouda.Strings.BinOps"], [14, "id238"], [14, "id777"], [14, "id848"]], "binops (arkouda.pdarray attribute)": [[14, "arkouda.pdarray.BinOps"], [14, "id123"], [14, "id314"], [14, "id430"], [14, "id545"], [14, "id661"], [14, "id9"]], "bitvector (class in arkouda)": [[14, "arkouda.BitVector"]], "bitvectorizer() (in module arkouda)": [[14, "arkouda.BitVectorizer"]], "column_classes (arkouda.dataframe attribute)": [[14, "arkouda.DataFrame.COLUMN_CLASSES"]], "cachedaccessor (class in arkouda)": [[14, "arkouda.CachedAccessor"]], "dtypeobjects (in module arkouda)": [[14, "arkouda.DTypeObjects"]], "dtypes (in module arkouda)": [[14, "arkouda.DTypes"]], "dataframe (class in arkouda)": [[14, "arkouda.DataFrame"], [58, "arkouda.DataFrame"]], "datetime (class in arkouda)": [[14, "arkouda.Datetime"], [14, "id911"]], "datetimeaccessor (class in arkouda)": [[14, "arkouda.DatetimeAccessor"]], "errormode (class in arkouda)": [[14, "arkouda.ErrorMode"]], "fields (class in arkouda)": [[14, "arkouda.Fields"]], "groupby() (arkouda.dataframe method)": [[14, "arkouda.DataFrame.GroupBy"], [14, "arkouda.DataFrame.groupby"]], "ipv4 (class in arkouda)": [[14, "arkouda.IPv4"]], "index (class in arkouda)": [[14, "arkouda.Index"], [52, "arkouda.Index"]], "multiindex (class in arkouda)": [[14, "arkouda.MultiIndex"]], "or() (arkouda.segarray method)": [[14, "arkouda.SegArray.OR"]], "opeqops (arkouda.pdarray attribute)": [[14, "arkouda.pdarray.OpEqOps"], [14, "id10"], [14, "id124"], [14, "id315"], [14, "id431"], [14, "id546"], [14, "id662"]], "ordertype (in module arkouda)": [[14, "arkouda.OrderType"]], "properties (class in arkouda)": [[14, "arkouda.Properties"]], "registeredsymbols (in module arkouda)": [[14, "arkouda.RegisteredSymbols"]], "registrationerror": [[14, "arkouda.RegistrationError"], [14, "id420"], [25, "arkouda.pdarrayclass.RegistrationError"]], "row (class in arkouda)": [[14, "arkouda.Row"]], "segarray (class in arkouda)": [[14, "arkouda.SegArray"]], "series (class in arkouda)": [[14, "arkouda.Series"], [64, "arkouda.Series"]], "sortingalgorithm (in module arkouda)": [[14, "arkouda.SortingAlgorithm"]], "stringaccessor (class in arkouda)": [[14, "arkouda.StringAccessor"]], "strings (class in arkouda)": [[14, "arkouda.Strings"], [14, "id230"], [14, "id769"], [14, "id840"]], "timedelta (class in arkouda)": [[14, "arkouda.Timedelta"]], "xor() (arkouda.segarray method)": [[14, "arkouda.SegArray.XOR"]], "_abstractbasetime (class in arkouda)": [[14, "arkouda._AbstractBaseTime"]], "_base_unit (in module arkouda)": [[14, "arkouda._BASE_UNIT"]], "_timescalar (class in arkouda)": [[14, "arkouda._Timescalar"]], "__add__() (arkouda.strings method)": [[14, "arkouda.Strings.__add__"], [14, "id279"], [14, "id818"], [14, "id889"]], "__add__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__add__"], [14, "id135"], [14, "id21"], [14, "id326"], [14, "id442"], [14, "id557"], [14, "id673"]], "__and__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__and__"], [14, "id151"], [14, "id342"], [14, "id37"], [14, "id458"], [14, "id573"], [14, "id689"]], "__array_priority__ (arkouda.pdarray attribute)": [[14, "arkouda.pdarray.__array_priority__"], [14, "id12"], [14, "id126"], [14, "id317"], [14, "id433"], [14, "id548"], [14, "id664"]], "__bool__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__bool__"], [14, "id128"], [14, "id14"], [14, "id319"], [14, "id435"], [14, "id550"], [14, "id666"]], "__del__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__del__"], [14, "id127"], [14, "id13"], [14, "id318"], [14, "id434"], [14, "id549"], [14, "id665"]], "__delitem__() (arkouda.dataframe method)": [[14, "arkouda.DataFrame.__delitem__"]], "__dir__() (arkouda.dataframe method)": [[14, "arkouda.DataFrame.__dir__"]], "__eq__() (arkouda.index method)": [[14, "arkouda.Index.__eq__"]], "__eq__() (arkouda.multiindex method)": [[14, "arkouda.MultiIndex.__eq__"]], "__eq__() (arkouda.segarray method)": [[14, "arkouda.SegArray.__eq__"]], "__eq__() (arkouda.strings method)": [[14, "arkouda.Strings.__eq__"], [14, "id247"], [14, "id786"], [14, "id857"]], "__eq__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__eq__"], [14, "id163"], [14, "id354"], [14, "id470"], [14, "id49"], [14, "id585"], [14, "id701"]], "__floordiv__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__floordiv__"], [14, "id143"], [14, "id29"], [14, "id334"], [14, "id450"], [14, "id565"], [14, "id681"]], "__ge__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__ge__"], [14, "id162"], [14, "id353"], [14, "id469"], [14, "id48"], [14, "id584"], [14, "id700"]], "__get__() (arkouda.cachedaccessor method)": [[14, "arkouda.CachedAccessor.__get__"]], "__getattr__() (arkouda.dataframe method)": [[14, "arkouda.DataFrame.__getattr__"]], "__getitem__() (arkouda.arrayview method)": [[14, "arkouda.ArrayView.__getitem__"]], "__getitem__() (arkouda.bitvector method)": [[14, "arkouda.BitVector.__getitem__"]], "__getitem__() (arkouda.dataframe method)": [[14, "arkouda.DataFrame.__getitem__"]], "__getitem__() (arkouda.ipv4 method)": [[14, "arkouda.IPv4.__getitem__"]], "__getitem__() (arkouda.index method)": [[14, "arkouda.Index.__getitem__"]], "__getitem__() (arkouda.multiindex method)": [[14, "arkouda.MultiIndex.__getitem__"]], "__getitem__() (arkouda.segarray method)": [[14, "arkouda.SegArray.__getitem__"]], "__getitem__() (arkouda.series method)": [[14, "arkouda.Series.__getitem__"]], "__getitem__() (arkouda.strings method)": [[14, "arkouda.Strings.__getitem__"], [14, "id249"], [14, "id788"], [14, "id859"]], "__getitem__() (arkouda._abstractbasetime method)": [[14, "arkouda._AbstractBaseTime.__getitem__"]], "__getitem__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__getitem__"], [14, "id181"], [14, "id372"], [14, "id488"], [14, "id603"], [14, "id67"], [14, "id719"]], "__gt__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__gt__"], [14, "id160"], [14, "id351"], [14, "id46"], [14, "id467"], [14, "id582"], [14, "id698"]], "__iadd__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__iadd__"], [14, "id168"], [14, "id359"], [14, "id475"], [14, "id54"], [14, "id590"], [14, "id706"]], "__iand__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__iand__"], [14, "id176"], [14, "id367"], [14, "id483"], [14, "id598"], [14, "id62"], [14, "id714"]], "__ifloordiv__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__ifloordiv__"], [14, "id173"], [14, "id364"], [14, "id480"], [14, "id59"], [14, "id595"], [14, "id711"]], "__ilshift__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__ilshift__"], [14, "id174"], [14, "id365"], [14, "id481"], [14, "id596"], [14, "id60"], [14, "id712"]], "__imod__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__imod__"], [14, "id172"], [14, "id363"], [14, "id479"], [14, "id58"], [14, "id594"], [14, "id710"]], "__imul__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__imul__"], [14, "id170"], [14, "id361"], [14, "id477"], [14, "id56"], [14, "id592"], [14, "id708"]], "__invert__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__invert__"], [14, "id166"], [14, "id357"], [14, "id473"], [14, "id52"], [14, "id588"], [14, "id704"]], "__ior__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__ior__"], [14, "id177"], [14, "id368"], [14, "id484"], [14, "id599"], [14, "id63"], [14, "id715"]], "__ipow__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__ipow__"], [14, "id179"], [14, "id370"], [14, "id486"], [14, "id601"], [14, "id65"], [14, "id717"]], "__irshift__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__irshift__"], [14, "id175"], [14, "id366"], [14, "id482"], [14, "id597"], [14, "id61"], [14, "id713"]], "__isub__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__isub__"], [14, "id169"], [14, "id360"], [14, "id476"], [14, "id55"], [14, "id591"], [14, "id707"]], "__iter__() (arkouda.strings method)": [[14, "arkouda.Strings.__iter__"], [14, "id242"], [14, "id781"], [14, "id852"]], "__iter__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__iter__"], [14, "id180"], [14, "id371"], [14, "id487"], [14, "id602"], [14, "id66"], [14, "id718"]], "__itruediv__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__itruediv__"], [14, "id171"], [14, "id362"], [14, "id478"], [14, "id57"], [14, "id593"], [14, "id709"]], "__ixor__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__ixor__"], [14, "id178"], [14, "id369"], [14, "id485"], [14, "id600"], [14, "id64"], [14, "id716"]], "__le__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__le__"], [14, "id161"], [14, "id352"], [14, "id468"], [14, "id47"], [14, "id583"], [14, "id699"]], "__len__() (arkouda.arrayview method)": [[14, "arkouda.ArrayView.__len__"]], "__len__() (arkouda.dataframe method)": [[14, "arkouda.DataFrame.__len__"]], "__len__() (arkouda.index method)": [[14, "arkouda.Index.__len__"]], "__len__() (arkouda.multiindex method)": [[14, "arkouda.MultiIndex.__len__"]], "__len__() (arkouda.series method)": [[14, "arkouda.Series.__len__"]], "__len__() (arkouda.strings method)": [[14, "arkouda.Strings.__len__"], [14, "id243"], [14, "id782"], [14, "id853"]], "__len__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__len__"], [14, "id129"], [14, "id15"], [14, "id320"], [14, "id436"], [14, "id551"], [14, "id667"]], "__lshift__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__lshift__"], [14, "id147"], [14, "id33"], [14, "id338"], [14, "id454"], [14, "id569"], [14, "id685"]], "__lt__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__lt__"], [14, "id159"], [14, "id350"], [14, "id45"], [14, "id466"], [14, "id581"], [14, "id697"]], "__mod__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__mod__"], [14, "id145"], [14, "id31"], [14, "id336"], [14, "id452"], [14, "id567"], [14, "id683"]], "__mul__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__mul__"], [14, "id139"], [14, "id25"], [14, "id330"], [14, "id446"], [14, "id561"], [14, "id677"]], "__ne__() (arkouda.strings method)": [[14, "arkouda.Strings.__ne__"], [14, "id248"], [14, "id787"], [14, "id858"]], "__ne__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__ne__"], [14, "id164"], [14, "id355"], [14, "id471"], [14, "id50"], [14, "id586"], [14, "id702"]], "__neg__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__neg__"], [14, "id165"], [14, "id356"], [14, "id472"], [14, "id51"], [14, "id587"], [14, "id703"]], "__or__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__or__"], [14, "id153"], [14, "id344"], [14, "id39"], [14, "id460"], [14, "id575"], [14, "id691"]], "__pow__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__pow__"], [14, "id157"], [14, "id348"], [14, "id43"], [14, "id464"], [14, "id579"], [14, "id695"]], "__radd__() (arkouda.strings method)": [[14, "arkouda.Strings.__radd__"], [14, "id281"], [14, "id820"], [14, "id891"]], "__radd__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__radd__"], [14, "id136"], [14, "id22"], [14, "id327"], [14, "id443"], [14, "id558"], [14, "id674"]], "__rand__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__rand__"], [14, "id152"], [14, "id343"], [14, "id38"], [14, "id459"], [14, "id574"], [14, "id690"]], "__repr__() (arkouda.arrayview method)": [[14, "arkouda.ArrayView.__repr__"]], "__repr__() (arkouda.bitvector method)": [[14, "arkouda.BitVector.__repr__"]], "__repr__() (arkouda.dataframe method)": [[14, "arkouda.DataFrame.__repr__"]], "__repr__() (arkouda.ipv4 method)": [[14, "arkouda.IPv4.__repr__"]], "__repr__() (arkouda.index method)": [[14, "arkouda.Index.__repr__"]], "__repr__() (arkouda.multiindex method)": [[14, "arkouda.MultiIndex.__repr__"]], "__repr__() (arkouda.row method)": [[14, "arkouda.Row.__repr__"]], "__repr__() (arkouda.segarray method)": [[14, "arkouda.SegArray.__repr__"]], "__repr__() (arkouda.series method)": [[14, "arkouda.Series.__repr__"]], "__repr__() (arkouda.strings method)": [[14, "arkouda.Strings.__repr__"], [14, "id245"], [14, "id784"], [14, "id855"]], "__repr__() (arkouda._abstractbasetime method)": [[14, "arkouda._AbstractBaseTime.__repr__"]], "__repr__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__repr__"], [14, "id131"], [14, "id17"], [14, "id322"], [14, "id438"], [14, "id553"], [14, "id669"]], "__rfloordiv__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__rfloordiv__"], [14, "id144"], [14, "id30"], [14, "id335"], [14, "id451"], [14, "id566"], [14, "id682"]], "__rlshift__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__rlshift__"], [14, "id148"], [14, "id339"], [14, "id34"], [14, "id455"], [14, "id570"], [14, "id686"]], "__rmod__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__rmod__"], [14, "id146"], [14, "id32"], [14, "id337"], [14, "id453"], [14, "id568"], [14, "id684"]], "__rmul__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__rmul__"], [14, "id140"], [14, "id26"], [14, "id331"], [14, "id447"], [14, "id562"], [14, "id678"]], "__ror__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__ror__"], [14, "id154"], [14, "id345"], [14, "id40"], [14, "id461"], [14, "id576"], [14, "id692"]], "__rpow__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__rpow__"], [14, "id158"], [14, "id349"], [14, "id44"], [14, "id465"], [14, "id580"], [14, "id696"]], "__rrshift__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__rrshift__"], [14, "id150"], [14, "id341"], [14, "id36"], [14, "id457"], [14, "id572"], [14, "id688"]], "__rshift__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__rshift__"], [14, "id149"], [14, "id340"], [14, "id35"], [14, "id456"], [14, "id571"], [14, "id687"]], "__rsub__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__rsub__"], [14, "id138"], [14, "id24"], [14, "id329"], [14, "id445"], [14, "id560"], [14, "id676"]], "__rtruediv__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__rtruediv__"], [14, "id142"], [14, "id28"], [14, "id333"], [14, "id449"], [14, "id564"], [14, "id680"]], "__rxor__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__rxor__"], [14, "id156"], [14, "id347"], [14, "id42"], [14, "id463"], [14, "id578"], [14, "id694"]], "__setitem__() (arkouda.arrayview method)": [[14, "arkouda.ArrayView.__setitem__"]], "__setitem__() (arkouda.bitvector method)": [[14, "arkouda.BitVector.__setitem__"]], "__setitem__() (arkouda.dataframe method)": [[14, "arkouda.DataFrame.__setitem__"]], "__setitem__() (arkouda.fields method)": [[14, "arkouda.Fields.__setitem__"]], "__setitem__() (arkouda.ipv4 method)": [[14, "arkouda.IPv4.__setitem__"]], "__setitem__() (arkouda._abstractbasetime method)": [[14, "arkouda._AbstractBaseTime.__setitem__"]], "__setitem__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__setitem__"], [14, "id182"], [14, "id373"], [14, "id489"], [14, "id604"], [14, "id68"], [14, "id720"]], "__str__() (arkouda.arrayview method)": [[14, "arkouda.ArrayView.__str__"]], "__str__() (arkouda.bitvector method)": [[14, "arkouda.BitVector.__str__"]], "__str__() (arkouda.dataframe method)": [[14, "arkouda.DataFrame.__str__"]], "__str__() (arkouda.ipv4 method)": [[14, "arkouda.IPv4.__str__"]], "__str__() (arkouda.row method)": [[14, "arkouda.Row.__str__"]], "__str__() (arkouda.segarray method)": [[14, "arkouda.SegArray.__str__"]], "__str__() (arkouda.strings method)": [[14, "arkouda.Strings.__str__"], [14, "id244"], [14, "id783"], [14, "id854"]], "__str__() (arkouda._abstractbasetime method)": [[14, "arkouda._AbstractBaseTime.__str__"]], "__str__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__str__"], [14, "id130"], [14, "id16"], [14, "id321"], [14, "id437"], [14, "id552"], [14, "id668"]], "__sub__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__sub__"], [14, "id137"], [14, "id23"], [14, "id328"], [14, "id444"], [14, "id559"], [14, "id675"]], "__truediv__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__truediv__"], [14, "id141"], [14, "id27"], [14, "id332"], [14, "id448"], [14, "id563"], [14, "id679"]], "__version__ (in module arkouda)": [[14, "arkouda.__version__"]], "__xor__() (arkouda.pdarray method)": [[14, "arkouda.pdarray.__xor__"], [14, "id155"], [14, "id346"], [14, "id41"], [14, "id462"], [14, "id577"], [14, "id693"]], "_aggregator() (in module arkouda)": [[14, "arkouda._aggregator"]], "_all_aligned() (arkouda.series static method)": [[14, "arkouda.Series._all_aligned"]], "_binop() (arkouda.bitvector method)": [[14, "arkouda.BitVector._binop"]], "_binop() (arkouda.fields method)": [[14, "arkouda.Fields._binop"]], "_binop() (arkouda.ipv4 method)": [[14, "arkouda.IPv4._binop"]], "_binop() (arkouda.strings method)": [[14, "arkouda.Strings._binop"], [14, "id246"], [14, "id785"], [14, "id856"]], "_binop() (arkouda._abstractbasetime method)": [[14, "arkouda._AbstractBaseTime._binop"]], "_binop() (arkouda.pdarray method)": [[14, "arkouda.pdarray._binop"], [14, "id133"], [14, "id19"], [14, "id324"], [14, "id440"], [14, "id555"], [14, "id671"]], "_cast() (arkouda.bitvector method)": [[14, "arkouda.BitVector._cast"]], "_cast() (arkouda.fields method)": [[14, "arkouda.Fields._cast"]], "_check_aligned() (arkouda.index method)": [[14, "arkouda.Index._check_aligned"]], "_check_types() (arkouda.index method)": [[14, "arkouda.Index._check_types"]], "_comp_to_ndarray() (arkouda.strings method)": [[14, "arkouda.Strings._comp_to_ndarray"], [14, "id289"], [14, "id828"], [14, "id899"]], "_compute_non_empty() (arkouda.segarray method)": [[14, "arkouda.SegArray._compute_non_empty"]], "_convert_strings() (arkouda.fields method)": [[14, "arkouda.Fields._convert_strings"]], "_drop_column() (arkouda.dataframe method)": [[14, "arkouda.DataFrame._drop_column"]], "_drop_row() (arkouda.dataframe method)": [[14, "arkouda.DataFrame._drop_row"]], "_empty_pattern_verification() (arkouda.strings method)": [[14, "arkouda.Strings._empty_pattern_verification"], [14, "id262"], [14, "id801"], [14, "id872"]], "_ensure_components() (arkouda.datetime method)": [[14, "arkouda.Datetime._ensure_components"], [14, "id937"]], "_ensure_components() (arkouda.timedelta method)": [[14, "arkouda.Timedelta._ensure_components"]], "_from_attach_return_msg() (arkouda.segarray class method)": [[14, "arkouda.SegArray._from_attach_return_msg"]], "_get_callback() (arkouda.datetime class method)": [[14, "arkouda.Datetime._get_callback"], [14, "id939"]], "_get_callback() (arkouda.timedelta class method)": [[14, "arkouda.Timedelta._get_callback"]], "_get_callback() (arkouda._abstractbasetime class method)": [[14, "arkouda._AbstractBaseTime._get_callback"]], "_get_factor() (in module arkouda)": [[14, "arkouda._get_factor"]], "_get_grouping_keys() (arkouda.strings method)": [[14, "arkouda.Strings._get_grouping_keys"], [14, "id286"], [14, "id825"], [14, "id896"]], "_get_grouping_keys() (arkouda.pdarray method)": [[14, "arkouda.pdarray._get_grouping_keys"], [14, "id108"], [14, "id222"], [14, "id413"], [14, "id529"], [14, "id644"], [14, "id760"]], "_get_head_tail() (arkouda.dataframe method)": [[14, "arkouda.DataFrame._get_head_tail"]], "_get_head_tail_server() (arkouda.dataframe method)": [[14, "arkouda.DataFrame._get_head_tail_server"]], "_get_matcher() (arkouda.strings method)": [[14, "arkouda.Strings._get_matcher"], [14, "id263"], [14, "id802"], [14, "id873"]], "_identity() (in module arkouda)": [[14, "arkouda._identity"]], "_ipython_key_completions_() (arkouda.dataframe method)": [[14, "arkouda.DataFrame._ipython_key_completions_"]], "_is_datetime_scalar() (arkouda._abstractbasetime static method)": [[14, "arkouda._AbstractBaseTime._is_datetime_scalar"]], "_is_supported_scalar() (arkouda.datetime static method)": [[14, "arkouda.Datetime._is_supported_scalar"], [14, "id941"]], "_is_supported_scalar() (arkouda.ipv4 method)": [[14, "arkouda.IPv4._is_supported_scalar"]], "_is_supported_scalar() (arkouda.timedelta static method)": [[14, "arkouda.Timedelta._is_supported_scalar"]], "_is_timedelta_scalar() (arkouda._abstractbasetime static method)": [[14, "arkouda._AbstractBaseTime._is_timedelta_scalar"]], "_list_component_names() (arkouda.strings method)": [[14, "arkouda.Strings._list_component_names"], [14, "id294"], [14, "id833"], [14, "id904"]], "_list_component_names() (arkouda.pdarray method)": [[14, "arkouda.pdarray._list_component_names"], [14, "id187"], [14, "id378"], [14, "id494"], [14, "id609"], [14, "id725"], [14, "id73"]], "_make_aggop() (arkouda.series class method)": [[14, "arkouda.Series._make_aggop"]], "_make_binop() (arkouda.series class method)": [[14, "arkouda.Series._make_binop"]], "_make_op() (arkouda.properties class method)": [[14, "arkouda.Properties._make_op"]], "_make_unaryop() (arkouda.series class method)": [[14, "arkouda.Series._make_unaryop"]], "_merge() (arkouda.index method)": [[14, "arkouda.Index._merge"]], "_merge() (arkouda.multiindex method)": [[14, "arkouda.MultiIndex._merge"]], "_merge_all() (arkouda.index method)": [[14, "arkouda.Index._merge_all"]], "_merge_all() (arkouda.multiindex method)": [[14, "arkouda.MultiIndex._merge_all"]], "_ncols() (arkouda.dataframe method)": [[14, "arkouda.DataFrame._ncols"]], "_normalize_index() (arkouda.segarray method)": [[14, "arkouda.SegArray._normalize_index"]], "_parse_col_name() (arkouda.dataframe static method)": [[14, "arkouda.DataFrame._parse_col_name"]], "_parse_scalar() (arkouda.fields method)": [[14, "arkouda.Fields._parse_scalar"]], "_prep_data() (arkouda.dataframe method)": [[14, "arkouda.DataFrame._prep_data"]], "_r_binop() (arkouda.bitvector method)": [[14, "arkouda.BitVector._r_binop"]], "_r_binop() (arkouda.fields method)": [[14, "arkouda.Fields._r_binop"]], "_r_binop() (arkouda.ipv4 method)": [[14, "arkouda.IPv4._r_binop"]], "_r_binop() (arkouda._abstractbasetime method)": [[14, "arkouda._AbstractBaseTime._r_binop"]], "_r_binop() (arkouda.pdarray method)": [[14, "arkouda.pdarray._r_binop"], [14, "id134"], [14, "id20"], [14, "id325"], [14, "id441"], [14, "id556"], [14, "id672"]], "_rename_column() (arkouda.dataframe method)": [[14, "arkouda.DataFrame._rename_column"]], "_rename_index() (arkouda.dataframe method)": [[14, "arkouda.DataFrame._rename_index"]], "_repr_html_() (arkouda.dataframe method)": [[14, "arkouda.DataFrame._repr_html_"]], "_repr_html_() (arkouda.row method)": [[14, "arkouda.Row._repr_html_"]], "_scalar_callback() (arkouda.datetime method)": [[14, "arkouda.Datetime._scalar_callback"], [14, "id940"]], "_scalar_callback() (arkouda.timedelta method)": [[14, "arkouda.Timedelta._scalar_callback"]], "_scalar_callback() (arkouda._abstractbasetime method)": [[14, "arkouda._AbstractBaseTime._scalar_callback"]], "_set_index() (arkouda.dataframe method)": [[14, "arkouda.DataFrame._set_index"]], "_shape_str() (arkouda.dataframe method)": [[14, "arkouda.DataFrame._shape_str"]], "_unit2factor (in module arkouda)": [[14, "arkouda._unit2factor"]], "_unit2normunit (in module arkouda)": [[14, "arkouda._unit2normunit"]], "abs() (arkouda.timedelta method)": [[14, "arkouda.Timedelta.abs"]], "abs() (in module arkouda)": [[14, "arkouda.abs"], [54, "arkouda.abs"]], "add() (arkouda.series method)": [[14, "arkouda.Series.add"]], "aggregate() (arkouda.segarray method)": [[14, "arkouda.SegArray.aggregate"]], "akabs() (in module arkouda)": [[14, "arkouda.akabs"]], "akbool (in module arkouda)": [[14, "arkouda.akbool"], [14, "id535"]], "akcast() (in module arkouda)": [[14, "arkouda.akcast"], [14, "id0"]], "akfloat64 (in module arkouda)": [[14, "arkouda.akfloat64"], [14, "id651"]], "akint64 (in module arkouda)": [[14, "arkouda.akint64"], [14, "id536"], [14, "id652"]], "akuint64 (in module arkouda)": [[14, "arkouda.akuint64"]], "align() (in module arkouda)": [[14, "arkouda.align"]], "all() (arkouda.segarray method)": [[14, "arkouda.SegArray.all"]], "all() (arkouda.pdarray method)": [[14, "arkouda.pdarray.all"], [14, "id185"], [14, "id376"], [14, "id492"], [14, "id607"], [14, "id71"], [14, "id723"], [60, "arkouda.pdarray.all"]], "all() (in module arkouda)": [[14, "arkouda.all"], [54, "arkouda.all"]], "all_scalars (in module arkouda)": [[14, "arkouda.all_scalars"]], "any() (arkouda.segarray method)": [[14, "arkouda.SegArray.any"]], "any() (arkouda.pdarray method)": [[14, "arkouda.pdarray.any"], [14, "id184"], [14, "id375"], [14, "id491"], [14, "id606"], [14, "id70"], [14, "id722"], [60, "arkouda.pdarray.any"]], "any() (in module arkouda)": [[14, "arkouda.any"], [54, "arkouda.any"]], "append() (arkouda.dataframe method)": [[14, "arkouda.DataFrame.append"]], "append() (arkouda.segarray method)": [[14, "arkouda.SegArray.append"]], "append_single() (arkouda.segarray method)": [[14, "arkouda.SegArray.append_single"]], "apply_permutation() (arkouda.dataframe method)": [[14, "arkouda.DataFrame.apply_permutation"]], "arange() (in module arkouda)": [[14, "arkouda.arange"], [14, "id109"], [14, "id227"], [14, "id530"], [14, "id645"], [14, "id761"], [57, "arkouda.arange"]], "argmax() (arkouda.segarray method)": [[14, "arkouda.SegArray.argmax"]], "argmax() (arkouda.pdarray method)": [[14, "arkouda.pdarray.argmax"], [14, "id196"], [14, "id387"], [14, "id503"], [14, "id618"], [14, "id734"], [14, "id82"], [60, "arkouda.pdarray.argmax"]], "argmax() (in module arkouda)": [[14, "arkouda.argmax"], [54, "arkouda.argmax"]], "argmaxk() (arkouda.pdarray method)": [[14, "arkouda.pdarray.argmaxk"], [14, "id205"], [14, "id396"], [14, "id512"], [14, "id627"], [14, "id743"], [14, "id91"], [60, "arkouda.pdarray.argmaxk"]], "argmaxk() (in module arkouda)": [[14, "arkouda.argmaxk"], [54, "arkouda.argmaxk"]], "argmin() (arkouda.segarray method)": [[14, "arkouda.SegArray.argmin"]], "argmin() (arkouda.pdarray method)": [[14, "arkouda.pdarray.argmin"], [14, "id195"], [14, "id386"], [14, "id502"], [14, "id617"], [14, "id733"], [14, "id81"], [60, "arkouda.pdarray.argmin"]], "argmin() (in module arkouda)": [[14, "arkouda.argmin"], [54, "arkouda.argmin"]], "argmink() (arkouda.pdarray method)": [[14, "arkouda.pdarray.argmink"], [14, "id204"], [14, "id395"], [14, "id511"], [14, "id626"], [14, "id742"], [14, "id90"], [60, "arkouda.pdarray.argmink"]], "argmink() (in module arkouda)": [[14, "arkouda.argmink"], [54, "arkouda.argmink"]], "argsort() (arkouda.dataframe method)": [[14, "arkouda.DataFrame.argsort"]], "argsort() (arkouda.index method)": [[14, "arkouda.Index.argsort"]], "argsort() (arkouda.multiindex method)": [[14, "arkouda.MultiIndex.argsort"]], "argsort() (in module arkouda)": [[14, "arkouda.argsort"], [14, "id648"], [14, "id767"], [53, "arkouda.argsort"]], "arkouda": [[14, "module-arkouda"]], "array() (in module arkouda)": [[14, "arkouda.array"], [14, "id110"], [14, "id224"], [14, "id531"], [14, "id646"], [51, "arkouda.array"]], "astype() (arkouda.strings method)": [[14, "arkouda.Strings.astype"], [14, "id290"], [14, "id829"], [14, "id900"]], "astype() (arkouda.pdarray method)": [[14, "arkouda.pdarray.astype"], [14, "id212"], [14, "id403"], [14, "id519"], [14, "id634"], [14, "id750"], [14, "id98"]], "attach() (arkouda.dataframe static method)": [[14, "arkouda.DataFrame.attach"]], "attach() (arkouda.segarray class method)": [[14, "arkouda.SegArray.attach"]], "attach() (arkouda.series static method)": [[14, "arkouda.Series.attach"]], "attach() (arkouda.strings static method)": [[14, "arkouda.Strings.attach"], [14, "id299"], [14, "id838"], [14, "id909"]], "attach() (arkouda.pdarray static method)": [[14, "arkouda.pdarray.attach"], [14, "id107"], [14, "id221"], [14, "id412"], [14, "id528"], [14, "id643"], [14, "id759"]], "attach_pdarray() (in module arkouda)": [[14, "arkouda.attach_pdarray"]], "base (arkouda.arrayview attribute)": [[14, "arkouda.ArrayView.base"], [55, "arkouda.ArrayView.base"]], "bigint (in module arkouda)": [[14, "arkouda.bigint"]], "bigint_from_uint_arrays() (in module arkouda)": [[14, "arkouda.bigint_from_uint_arrays"]], "bittype (in module arkouda)": [[14, "arkouda.bitType"], [14, "id113"]], "bool (in module arkouda)": [[14, "arkouda.bool"]], "bool_scalars (in module arkouda)": [[14, "arkouda.bool_scalars"]], "cached_regex_patterns() (arkouda.strings method)": [[14, "arkouda.Strings.cached_regex_patterns"], [14, "id260"], [14, "id799"], [14, "id870"]], "cast() (in module arkouda)": [[14, "arkouda.cast"], [14, "id305"], [62, "arkouda.cast"]], "ceil() (arkouda._abstractbasetime method)": [[14, "arkouda._AbstractBaseTime.ceil"]], "check_np_dtype() (in module arkouda)": [[14, "arkouda.check_np_dtype"]], "clear() (in module arkouda)": [[14, "arkouda.clear"]], "clz() (arkouda.pdarray method)": [[14, "arkouda.pdarray.clz"], [14, "id208"], [14, "id399"], [14, "id515"], [14, "id630"], [14, "id746"], [14, "id94"]], "clz() (in module arkouda)": [[14, "arkouda.clz"]], "coargsort() (arkouda.dataframe method)": [[14, "arkouda.DataFrame.coargsort"]], "coargsort() (in module arkouda)": [[14, "arkouda.coargsort"], [14, "id650"], [14, "id768"], [53, "arkouda.coargsort"]], "columns (arkouda.dataframe property)": [[14, "arkouda.DataFrame.columns"]], "components (arkouda.timedelta property)": [[14, "arkouda.Timedelta.components"]], "concat() (arkouda.dataframe class method)": [[14, "arkouda.DataFrame.concat"]], "concat() (arkouda.index method)": [[14, "arkouda.Index.concat"]], "concat() (arkouda.multiindex method)": [[14, "arkouda.MultiIndex.concat"]], "concat() (arkouda.segarray class method)": [[14, "arkouda.SegArray.concat"]], "concat() (arkouda.series static method)": [[14, "arkouda.Series.concat"]], "concatenate() (in module arkouda)": [[14, "arkouda.concatenate"], [14, "id223"], [14, "id534"], [14, "id765"], [57, "arkouda.concatenate"]], "conserves (arkouda.bitvector attribute)": [[14, "arkouda.BitVector.conserves"]], "contains() (arkouda.strings method)": [[14, "arkouda.Strings.contains"], [14, "id272"], [14, "id811"], [14, "id882"], [67, "arkouda.Strings.contains"]], "convert_if_categorical() (in module arkouda)": [[14, "arkouda.convert_if_categorical"]], "copy() (arkouda.dataframe method)": [[14, "arkouda.DataFrame.copy"]], "copy() (arkouda.segarray method)": [[14, "arkouda.SegArray.copy"]], "corr() (arkouda.dataframe method)": [[14, "arkouda.DataFrame.corr"]], "corr() (arkouda.pdarray method)": [[14, "arkouda.pdarray.corr"], [14, "id201"], [14, "id392"], [14, "id508"], [14, "id623"], [14, "id739"], [14, "id87"]], "corr() (in module arkouda)": [[14, "arkouda.corr"]], "cos() (in module arkouda)": [[14, "arkouda.cos"], [54, "arkouda.cos"]], "cov() (arkouda.pdarray method)": [[14, "arkouda.pdarray.cov"], [14, "id200"], [14, "id391"], [14, "id507"], [14, "id622"], [14, "id738"], [14, "id86"]], "cov() (in module arkouda)": [[14, "arkouda.cov"]], "create_pdarray() (in module arkouda)": [[14, "arkouda.create_pdarray"], [14, "id306"], [14, "id421"]], "ctz() (arkouda.pdarray method)": [[14, "arkouda.pdarray.ctz"], [14, "id209"], [14, "id400"], [14, "id516"], [14, "id631"], [14, "id747"], [14, "id95"]], "ctz() (in module arkouda)": [[14, "arkouda.ctz"]], "cumprod() (in module arkouda)": [[14, "arkouda.cumprod"], [14, "id228"], [54, "arkouda.cumprod"]], "cumsum() (in module arkouda)": [[14, "arkouda.cumsum"], [14, "id419"], [54, "arkouda.cumsum"]], "date (arkouda.datetime property)": [[14, "arkouda.Datetime.date"], [14, "id928"]], "date_operators() (in module arkouda)": [[14, "arkouda.date_operators"]], "date_range() (in module arkouda)": [[14, "arkouda.date_range"]], "day (arkouda.datetime property)": [[14, "arkouda.Datetime.day"], [14, "id918"]], "day_of_week (arkouda.datetime property)": [[14, "arkouda.Datetime.day_of_week"], [14, "id923"]], "day_of_year (arkouda.datetime property)": [[14, "arkouda.Datetime.day_of_year"], [14, "id921"]], "dayofweek (arkouda.datetime property)": [[14, "arkouda.Datetime.dayofweek"], [14, "id924"]], "dayofyear (arkouda.datetime property)": [[14, "arkouda.Datetime.dayofyear"], [14, "id922"]], "days (arkouda.timedelta property)": [[14, "arkouda.Timedelta.days"]], "decode() (arkouda.strings method)": [[14, "arkouda.Strings.decode"], [14, "id252"], [14, "id791"], [14, "id862"]], "diff() (arkouda.series method)": [[14, "arkouda.Series.diff"]], "disableverbose() (in module arkouda)": [[14, "arkouda.disableVerbose"]], "drop() (arkouda.dataframe method)": [[14, "arkouda.DataFrame.drop"]], "drop_duplicates() (arkouda.dataframe method)": [[14, "arkouda.DataFrame.drop_duplicates"]], "dt (arkouda.series attribute)": [[14, "arkouda.Series.dt"]], "dtype (arkouda.arrayview attribute)": [[14, "arkouda.ArrayView.dtype"], [55, "arkouda.ArrayView.dtype"]], "dtype (arkouda.strings attribute)": [[14, "arkouda.Strings.dtype"], [14, "id236"], [14, "id775"], [14, "id846"]], "dtype (arkouda.pdarray attribute)": [[14, "arkouda.pdarray.dtype"], [14, "id118"], [14, "id309"], [14, "id4"], [14, "id425"], [14, "id540"], [14, "id656"], [62, "arkouda.pdarray.dtype"]], "dtype() (in module arkouda)": [[14, "arkouda.dtype"]], "dtypes (arkouda.dataframe property)": [[14, "arkouda.DataFrame.dtypes"]], "empty (arkouda.dataframe property)": [[14, "arkouda.DataFrame.empty"]], "enableverbose() (in module arkouda)": [[14, "arkouda.enableVerbose"]], "encode() (arkouda.strings method)": [[14, "arkouda.Strings.encode"], [14, "id251"], [14, "id790"], [14, "id861"]], "endswith() (arkouda.strings method)": [[14, "arkouda.Strings.endswith"], [14, "id274"], [14, "id813"], [14, "id884"], [67, "arkouda.Strings.endswith"]], "entry (arkouda.strings attribute)": [[14, "arkouda.Strings.entry"], [14, "id231"], [14, "id770"], [14, "id841"]], "exp() (in module arkouda)": [[14, "arkouda.exp"], [54, "arkouda.exp"]], "factory() (arkouda.index static method)": [[14, "arkouda.Index.factory"]], "fill() (arkouda.pdarray method)": [[14, "arkouda.pdarray.fill"], [14, "id183"], [14, "id374"], [14, "id490"], [14, "id605"], [14, "id69"], [14, "id721"]], "filter_by_range() (arkouda.dataframe method)": [[14, "arkouda.DataFrame.filter_by_range"]], "find() (in module arkouda)": [[14, "arkouda.find"]], "find_locations() (arkouda.strings method)": [[14, "arkouda.Strings.find_locations"], [14, "id264"], [14, "id803"], [14, "id874"], [67, "arkouda.Strings.find_locations"]], "findall() (arkouda.strings method)": [[14, "arkouda.Strings.findall"], [14, "id269"], [14, "id808"], [14, "id879"], [67, "arkouda.Strings.findall"]], "flatten() (arkouda.strings method)": [[14, "arkouda.Strings.flatten"], [14, "id275"], [14, "id814"], [14, "id885"], [67, "arkouda.Strings.flatten"]], "float64 (in module arkouda)": [[14, "arkouda.float64"]], "float_scalars (in module arkouda)": [[14, "arkouda.float_scalars"]], "floor() (arkouda._abstractbasetime method)": [[14, "arkouda._AbstractBaseTime.floor"]], "format() (arkouda.bitvector method)": [[14, "arkouda.BitVector.format"]], "format() (arkouda.fields method)": [[14, "arkouda.Fields.format"]], "format() (arkouda.ipv4 method)": [[14, "arkouda.IPv4.format"]], "format_other() (arkouda.pdarray method)": [[14, "arkouda.pdarray.format_other"], [14, "id132"], [14, "id18"], [14, "id323"], [14, "id439"], [14, "id554"], [14, "id670"]], "from_multi_array() (arkouda.segarray class method)": [[14, "arkouda.SegArray.from_multi_array"]], "from_pandas() (arkouda.dataframe class method)": [[14, "arkouda.DataFrame.from_pandas"]], "from_parts() (arkouda.segarray class method)": [[14, "arkouda.SegArray.from_parts"]], "from_parts() (arkouda.strings static method)": [[14, "arkouda.Strings.from_parts"], [14, "id241"], [14, "id780"], [14, "id851"]], "from_return_msg() (arkouda.dataframe static method)": [[14, "arkouda.DataFrame.from_return_msg"]], "from_return_msg() (arkouda.segarray class method)": [[14, "arkouda.SegArray.from_return_msg"]], "from_return_msg() (arkouda.series static method)": [[14, "arkouda.Series.from_return_msg"]], "from_return_msg() (arkouda.strings static method)": [[14, "arkouda.Strings.from_return_msg"], [14, "id240"], [14, "id779"], [14, "id850"]], "from_series() (in module arkouda)": [[14, "arkouda.from_series"], [14, "id414"]], "full() (in module arkouda)": [[14, "arkouda.full"], [14, "id762"]], "full_like() (in module arkouda)": [[14, "arkouda.full_like"]], "fullmatch() (arkouda.strings method)": [[14, "arkouda.Strings.fullmatch"], [14, "id267"], [14, "id806"], [14, "id877"], [67, "arkouda.Strings.fullmatch"]], "gen_ranges() (in module arkouda)": [[14, "arkouda.gen_ranges"]], "generic_concat() (in module arkouda)": [[14, "arkouda.generic_concat"]], "getarkoudalogger() (in module arkouda)": [[14, "arkouda.getArkoudaLogger"]], "get_byteorder() (in module arkouda)": [[14, "arkouda.get_byteorder"]], "get_callback() (in module arkouda)": [[14, "arkouda.get_callback"]], "get_jth() (arkouda.segarray method)": [[14, "arkouda.SegArray.get_jth"]], "get_length_n() (arkouda.segarray method)": [[14, "arkouda.SegArray.get_length_n"]], "get_lengths() (arkouda.strings method)": [[14, "arkouda.Strings.get_lengths"], [14, "id250"], [14, "id789"], [14, "id860"]], "get_ngrams() (arkouda.segarray method)": [[14, "arkouda.SegArray.get_ngrams"]], "get_prefixes() (arkouda.segarray method)": [[14, "arkouda.SegArray.get_prefixes"]], "get_prefixes() (arkouda.strings method)": [[14, "arkouda.Strings.get_prefixes"], [14, "id282"], [14, "id821"], [14, "id892"]], "get_server_byteorder() (in module arkouda)": [[14, "arkouda.get_server_byteorder"]], "get_suffixes() (arkouda.segarray method)": [[14, "arkouda.SegArray.get_suffixes"]], "get_suffixes() (arkouda.strings method)": [[14, "arkouda.Strings.get_suffixes"], [14, "id283"], [14, "id822"], [14, "id893"]], "get_versions() (in module arkouda)": [[14, "arkouda.get_versions"]], "group() (arkouda.strings method)": [[14, "arkouda.Strings.group"], [14, "id285"], [14, "id824"], [14, "id895"]], "hash() (arkouda.strings method)": [[14, "arkouda.Strings.hash"], [14, "id284"], [14, "id823"], [14, "id894"]], "hash() (in module arkouda)": [[14, "arkouda.hash"]], "head() (arkouda.dataframe method)": [[14, "arkouda.DataFrame.head"]], "head() (arkouda.series method)": [[14, "arkouda.Series.head"]], "histogram() (in module arkouda)": [[14, "arkouda.histogram"], [60, "arkouda.histogram"]], "hour (arkouda.datetime property)": [[14, "arkouda.Datetime.hour"], [14, "id917"]], "ignore (arkouda.errormode attribute)": [[14, "arkouda.ErrorMode.ignore"]], "in1d() (in module arkouda)": [[14, "arkouda.in1d"], [14, "id649"], [14, "id766"], [65, "arkouda.in1d"]], "in1d_intervals() (in module arkouda)": [[14, "arkouda.in1d_intervals"]], "index (arkouda.dataframe property)": [[14, "arkouda.DataFrame.index"]], "index (arkouda.index property)": [[14, "arkouda.Index.index"]], "index (arkouda.multiindex property)": [[14, "arkouda.MultiIndex.index"]], "info (arkouda.dataframe property)": [[14, "arkouda.DataFrame.info"]], "info() (arkouda.strings method)": [[14, "arkouda.Strings.info"], [14, "id295"], [14, "id834"], [14, "id905"]], "info() (arkouda.pdarray method)": [[14, "arkouda.pdarray.info"], [14, "id188"], [14, "id379"], [14, "id495"], [14, "id610"], [14, "id726"], [14, "id74"]], "information() (in module arkouda)": [[14, "arkouda.information"]], "int64 (in module arkouda)": [[14, "arkouda.int64"], [14, "id301"]], "inttypes (in module arkouda)": [[14, "arkouda.intTypes"], [14, "id112"], [14, "id303"]], "int_scalars (in module arkouda)": [[14, "arkouda.int_scalars"], [14, "id302"]], "intersect() (arkouda.segarray method)": [[14, "arkouda.SegArray.intersect"]], "intersect() (in module arkouda)": [[14, "arkouda.intersect"]], "intersect1d() (in module arkouda)": [[14, "arkouda.intersect1d"], [65, "arkouda.intersect1d"]], "interval_lookup() (in module arkouda)": [[14, "arkouda.interval_lookup"]], "intx() (in module arkouda)": [[14, "arkouda.intx"]], "invert_permutation() (in module arkouda)": [[14, "arkouda.invert_permutation"]], "ip_address() (in module arkouda)": [[14, "arkouda.ip_address"]], "issupportedint() (in module arkouda)": [[14, "arkouda.isSupportedInt"], [14, "id304"], [14, "id415"]], "is_cosorted() (in module arkouda)": [[14, "arkouda.is_cosorted"]], "is_ipv4() (in module arkouda)": [[14, "arkouda.is_ipv4"]], "is_ipv6() (in module arkouda)": [[14, "arkouda.is_ipv6"]], "is_leap_year (arkouda.datetime property)": [[14, "arkouda.Datetime.is_leap_year"], [14, "id929"]], "is_lower() (arkouda.strings method)": [[14, "arkouda.Strings.is_lower"], [14, "id256"], [14, "id795"], [14, "id866"]], "is_registered() (arkouda.dataframe method)": [[14, "arkouda.DataFrame.is_registered"]], "is_registered() (arkouda.index method)": [[14, "arkouda.Index.is_registered"]], "is_registered() (arkouda.segarray method)": [[14, "arkouda.SegArray.is_registered"]], "is_registered() (arkouda.series method)": [[14, "arkouda.Series.is_registered"]], "is_registered() (arkouda.strings method)": [[14, "arkouda.Strings.is_registered"], [14, "id293"], [14, "id832"], [14, "id903"]], "is_registered() (arkouda.pdarray method)": [[14, "arkouda.pdarray.is_registered"], [14, "id186"], [14, "id377"], [14, "id493"], [14, "id608"], [14, "id72"], [14, "id724"]], "is_sorted() (arkouda.pdarray method)": [[14, "arkouda.pdarray.is_sorted"], [14, "id190"], [14, "id381"], [14, "id497"], [14, "id612"], [14, "id728"], [14, "id76"], [60, "arkouda.pdarray.is_sorted"]], "is_sorted() (in module arkouda)": [[14, "arkouda.is_sorted"], [14, "id422"], [54, "arkouda.is_sorted"]], "is_title() (arkouda.strings method)": [[14, "arkouda.Strings.is_title"], [14, "id258"], [14, "id797"], [14, "id868"]], "is_unique (arkouda.index property)": [[14, "arkouda.Index.is_unique"]], "is_upper() (arkouda.strings method)": [[14, "arkouda.Strings.is_upper"], [14, "id257"], [14, "id796"], [14, "id867"]], "isin() (arkouda.dataframe method)": [[14, "arkouda.DataFrame.isin"]], "isin() (arkouda.series method)": [[14, "arkouda.Series.isin"]], "isnan() (in module arkouda)": [[14, "arkouda.isnan"]], "isocalendar() (arkouda.datetime method)": [[14, "arkouda.Datetime.isocalendar"], [14, "id938"]], "itemsize (arkouda.arrayview attribute)": [[14, "arkouda.ArrayView.itemsize"], [55, "arkouda.ArrayView.itemsize"]], "itemsize (arkouda.pdarray attribute)": [[14, "arkouda.pdarray.itemsize"], [14, "id122"], [14, "id313"], [14, "id429"], [14, "id544"], [14, "id660"], [14, "id8"], [62, "arkouda.pdarray.itemsize"]], "join_on_eq_with_dt() (in module arkouda)": [[14, "arkouda.join_on_eq_with_dt"]], "left_align() (in module arkouda)": [[14, "arkouda.left_align"]], "lengths (arkouda.segarray property)": [[14, "arkouda.SegArray.lengths"]], "linspace() (in module arkouda)": [[14, "arkouda.linspace"], [57, "arkouda.linspace"]], "list_registry() (in module arkouda)": [[14, "arkouda.list_registry"], [14, "id418"], [14, "id537"]], "list_symbol_table() (in module arkouda)": [[14, "arkouda.list_symbol_table"]], "load() (arkouda.dataframe class method)": [[14, "arkouda.DataFrame.load"]], "load() (arkouda.segarray class method)": [[14, "arkouda.SegArray.load"]], "locate() (arkouda.series method)": [[14, "arkouda.Series.locate"]], "log() (in module arkouda)": [[14, "arkouda.log"], [54, "arkouda.log"]], "logger (arkouda.strings attribute)": [[14, "arkouda.Strings.logger"], [14, "id237"], [14, "id776"], [14, "id847"]], "lookup() (arkouda.index method)": [[14, "arkouda.Index.lookup"]], "lookup() (arkouda.multiindex method)": [[14, "arkouda.MultiIndex.lookup"]], "lookup() (in module arkouda)": [[14, "arkouda.lookup"]], "lstick() (arkouda.strings method)": [[14, "arkouda.Strings.lstick"], [14, "id280"], [14, "id819"], [14, "id890"], [67, "arkouda.Strings.lstick"]], "match() (arkouda.strings method)": [[14, "arkouda.Strings.match"], [14, "id266"], [14, "id805"], [14, "id876"], [67, "arkouda.Strings.match"]], "max() (arkouda.segarray method)": [[14, "arkouda.SegArray.max"]], "max() (arkouda._abstractbasetime method)": [[14, "arkouda._AbstractBaseTime.max"]], "max() (arkouda.pdarray method)": [[14, "arkouda.pdarray.max"], [14, "id194"], [14, "id385"], [14, "id501"], [14, "id616"], [14, "id732"], [14, "id80"], [60, "arkouda.pdarray.max"]], "max() (in module arkouda)": [[14, "arkouda.max"], [54, "arkouda.max"]], "maxk() (arkouda._abstractbasetime method)": [[14, "arkouda._AbstractBaseTime.maxk"]], "maxk() (arkouda.pdarray method)": [[14, "arkouda.pdarray.maxk"], [14, "id203"], [14, "id394"], [14, "id510"], [14, "id625"], [14, "id741"], [14, "id89"], [60, "arkouda.pdarray.maxk"]], "maxk() (in module arkouda)": [[14, "arkouda.maxk"], [54, "arkouda.maxk"]], "mean() (arkouda.segarray method)": [[14, "arkouda.SegArray.mean"]], "mean() (arkouda.pdarray method)": [[14, "arkouda.pdarray.mean"], [14, "id197"], [14, "id388"], [14, "id504"], [14, "id619"], [14, "id735"], [14, "id83"], [60, "arkouda.pdarray.mean"]], "mean() (in module arkouda)": [[14, "arkouda.mean"], [54, "arkouda.mean"]], "memory_usage() (arkouda.dataframe method)": [[14, "arkouda.DataFrame.memory_usage"]], "microsecond (arkouda.datetime property)": [[14, "arkouda.Datetime.microsecond"], [14, "id913"]], "microseconds (arkouda.timedelta property)": [[14, "arkouda.Timedelta.microseconds"]], "millisecond (arkouda.datetime property)": [[14, "arkouda.Datetime.millisecond"], [14, "id914"]], "min() (arkouda.segarray method)": [[14, "arkouda.SegArray.min"]], "min() (arkouda._abstractbasetime method)": [[14, "arkouda._AbstractBaseTime.min"]], "min() (arkouda.pdarray method)": [[14, "arkouda.pdarray.min"], [14, "id193"], [14, "id384"], [14, "id500"], [14, "id615"], [14, "id731"], [14, "id79"], [60, "arkouda.pdarray.min"]], "min() (in module arkouda)": [[14, "arkouda.min"], [54, "arkouda.min"]], "mink() (arkouda._abstractbasetime method)": [[14, "arkouda._AbstractBaseTime.mink"]], "mink() (arkouda.pdarray method)": [[14, "arkouda.pdarray.mink"], [14, "id202"], [14, "id393"], [14, "id509"], [14, "id624"], [14, "id740"], [14, "id88"], [60, "arkouda.pdarray.mink"]], "mink() (in module arkouda)": [[14, "arkouda.mink"], [54, "arkouda.mink"]], "minute (arkouda.datetime property)": [[14, "arkouda.Datetime.minute"], [14, "id916"]], "month (arkouda.datetime property)": [[14, "arkouda.Datetime.month"], [14, "id919"]], "name (arkouda.pdarray attribute)": [[14, "arkouda.pdarray.name"], [14, "id117"], [14, "id3"], [14, "id308"], [14, "id424"], [14, "id539"], [14, "id655"], [62, "arkouda.pdarray.name"]], "nanosecond (arkouda.datetime property)": [[14, "arkouda.Datetime.nanosecond"], [14, "id912"]], "nanoseconds (arkouda.timedelta property)": [[14, "arkouda.Timedelta.nanoseconds"]], "nbytes (arkouda.strings attribute)": [[14, "arkouda.Strings.nbytes"], [14, "id233"], [14, "id772"], [14, "id843"]], "ndim (arkouda.arrayview attribute)": [[14, "arkouda.ArrayView.ndim"], [55, "arkouda.ArrayView.ndim"]], "ndim (arkouda.strings attribute)": [[14, "arkouda.Strings.ndim"], [14, "id234"], [14, "id773"], [14, "id844"]], "ndim (arkouda.pdarray attribute)": [[14, "arkouda.pdarray.ndim"], [14, "id120"], [14, "id311"], [14, "id427"], [14, "id542"], [14, "id6"], [14, "id658"], [62, "arkouda.pdarray.ndim"]], "non_empty (arkouda.segarray property)": [[14, "arkouda.SegArray.non_empty"]], "non_empty_count (arkouda.segarray property)": [[14, "arkouda.SegArray.non_empty_count"]], "normalize() (arkouda.ipv4 method)": [[14, "arkouda.IPv4.normalize"]], "numeric_scalars (in module arkouda)": [[14, "arkouda.numeric_scalars"]], "numpy_scalars (in module arkouda)": [[14, "arkouda.numpy_scalars"]], "nunique() (arkouda.segarray method)": [[14, "arkouda.SegArray.nunique"]], "objtype (arkouda.segarray property)": [[14, "arkouda.SegArray.objtype"]], "objtype (arkouda.strings attribute)": [[14, "arkouda.Strings.objtype"], [14, "id239"], [14, "id778"], [14, "id849"]], "objtype (arkouda.pdarray attribute)": [[14, "arkouda.pdarray.objtype"], [14, "id11"], [14, "id125"], [14, "id316"], [14, "id432"], [14, "id547"], [14, "id663"]], "objtypedec() (in module arkouda)": [[14, "arkouda.objtypedec"]], "ones() (in module arkouda)": [[14, "arkouda.ones"], [14, "id226"], [14, "id532"], [14, "id647"], [14, "id763"], [57, "arkouda.ones"]], "ones_like() (in module arkouda)": [[14, "arkouda.ones_like"], [57, "arkouda.ones_like"]], "opeq() (arkouda.bitvector method)": [[14, "arkouda.BitVector.opeq"]], "opeq() (arkouda.fields method)": [[14, "arkouda.Fields.opeq"]], "opeq() (arkouda.ipv4 method)": [[14, "arkouda.IPv4.opeq"]], "opeq() (arkouda._abstractbasetime method)": [[14, "arkouda._AbstractBaseTime.opeq"]], "opeq() (arkouda.pdarray method)": [[14, "arkouda.pdarray.opeq"], [14, "id167"], [14, "id358"], [14, "id474"], [14, "id53"], [14, "id589"], [14, "id705"]], "order (arkouda.arrayview attribute)": [[14, "arkouda.ArrayView.order"], [55, "arkouda.ArrayView.order"]], "parity() (arkouda.pdarray method)": [[14, "arkouda.pdarray.parity"], [14, "id207"], [14, "id398"], [14, "id514"], [14, "id629"], [14, "id745"], [14, "id93"]], "parity() (in module arkouda)": [[14, "arkouda.parity"]], "parse_single_value() (in module arkouda)": [[14, "arkouda.parse_single_value"]], "pdarray (class in arkouda)": [[14, "arkouda.pdarray"], [14, "id116"], [14, "id2"], [14, "id307"], [14, "id423"], [14, "id538"], [14, "id654"], [62, "arkouda.pdarray"]], "pdconcat() (arkouda.series static method)": [[14, "arkouda.Series.pdconcat"]], "peel() (arkouda.strings method)": [[14, "arkouda.Strings.peel"], [14, "id276"], [14, "id815"], [14, "id886"], [67, "arkouda.Strings.peel"]], "plot_dist() (in module arkouda)": [[14, "arkouda.plot_dist"]], "popcount() (arkouda.pdarray method)": [[14, "arkouda.pdarray.popcount"], [14, "id206"], [14, "id397"], [14, "id513"], [14, "id628"], [14, "id744"], [14, "id92"]], "popcount() (in module arkouda)": [[14, "arkouda.popcount"]], "power() (in module arkouda)": [[14, "arkouda.power"]], "prepend_single() (arkouda.segarray method)": [[14, "arkouda.SegArray.prepend_single"]], "pretty_print_info() (arkouda.strings method)": [[14, "arkouda.Strings.pretty_print_info"], [14, "id296"], [14, "id835"], [14, "id906"]], "pretty_print_info() (arkouda.pdarray method)": [[14, "arkouda.pdarray.pretty_print_info"], [14, "id189"], [14, "id380"], [14, "id496"], [14, "id611"], [14, "id727"], [14, "id75"]], "pretty_print_information() (in module arkouda)": [[14, "arkouda.pretty_print_information"]], "prod() (arkouda.segarray method)": [[14, "arkouda.SegArray.prod"]], "prod() (arkouda.pdarray method)": [[14, "arkouda.pdarray.prod"], [14, "id192"], [14, "id383"], [14, "id499"], [14, "id614"], [14, "id730"], [14, "id78"], [60, "arkouda.pdarray.prod"]], "prod() (in module arkouda)": [[14, "arkouda.prod"], [54, "arkouda.prod"]], "purge_cached_regex_patterns() (arkouda.strings method)": [[14, "arkouda.Strings.purge_cached_regex_patterns"], [14, "id261"], [14, "id800"], [14, "id871"]], "randint() (in module arkouda)": [[14, "arkouda.randint"], [57, "arkouda.randint"]], "random_strings_lognormal() (in module arkouda)": [[14, "arkouda.random_strings_lognormal"]], "random_strings_uniform() (in module arkouda)": [[14, "arkouda.random_strings_uniform"]], "register() (arkouda.dataframe method)": [[14, "arkouda.DataFrame.register"]], "register() (arkouda.index method)": [[14, "arkouda.Index.register"]], "register() (arkouda.multiindex method)": [[14, "arkouda.MultiIndex.register"]], "register() (arkouda.segarray method)": [[14, "arkouda.SegArray.register"]], "register() (arkouda.series method)": [[14, "arkouda.Series.register"]], "register() (arkouda.strings method)": [[14, "arkouda.Strings.register"], [14, "id297"], [14, "id836"], [14, "id907"]], "register() (arkouda.pdarray method)": [[14, "arkouda.pdarray.register"], [14, "id105"], [14, "id219"], [14, "id410"], [14, "id526"], [14, "id641"], [14, "id757"]], "register() (in module arkouda)": [[14, "arkouda.register"]], "remove_repeats() (arkouda.segarray method)": [[14, "arkouda.SegArray.remove_repeats"]], "rename() (arkouda.dataframe method)": [[14, "arkouda.DataFrame.rename"]], "reset_index() (arkouda.dataframe method)": [[14, "arkouda.DataFrame.reset_index"]], "reshape() (arkouda.pdarray method)": [[14, "arkouda.pdarray.reshape"], [14, "id213"], [14, "id404"], [14, "id520"], [14, "id635"], [14, "id751"], [14, "id99"]], "resolve_scalar_dtype() (in module arkouda)": [[14, "arkouda.resolve_scalar_dtype"], [14, "id115"]], "return_validity (arkouda.errormode attribute)": [[14, "arkouda.ErrorMode.return_validity"]], "right_align() (in module arkouda)": [[14, "arkouda.right_align"]], "rotl() (arkouda.pdarray method)": [[14, "arkouda.pdarray.rotl"], [14, "id210"], [14, "id401"], [14, "id517"], [14, "id632"], [14, "id748"], [14, "id96"]], "rotl() (in module arkouda)": [[14, "arkouda.rotl"]], "rotr() (arkouda.pdarray method)": [[14, "arkouda.pdarray.rotr"], [14, "id211"], [14, "id402"], [14, "id518"], [14, "id633"], [14, "id749"], [14, "id97"]], "rotr() (in module arkouda)": [[14, "arkouda.rotr"]], "round() (arkouda._abstractbasetime method)": [[14, "arkouda._AbstractBaseTime.round"]], "rpeel() (arkouda.strings method)": [[14, "arkouda.Strings.rpeel"], [14, "id277"], [14, "id816"], [14, "id887"], [67, "arkouda.Strings.rpeel"]], "sample() (arkouda.dataframe method)": [[14, "arkouda.DataFrame.sample"]], "search() (arkouda.strings method)": [[14, "arkouda.Strings.search"], [14, "id265"], [14, "id804"], [14, "id875"], [67, "arkouda.Strings.search"]], "search_intervals() (in module arkouda)": [[14, "arkouda.search_intervals"]], "second (arkouda.datetime property)": [[14, "arkouda.Datetime.second"], [14, "id915"]], "seconds (arkouda.timedelta property)": [[14, "arkouda.Timedelta.seconds"]], "segarray() (in module arkouda)": [[14, "arkouda.segarray"]], "set_dtype() (arkouda.index method)": [[14, "arkouda.Index.set_dtype"]], "set_dtype() (arkouda.multiindex method)": [[14, "arkouda.MultiIndex.set_dtype"]], "set_jth() (arkouda.segarray method)": [[14, "arkouda.SegArray.set_jth"]], "setdiff() (arkouda.segarray method)": [[14, "arkouda.SegArray.setdiff"]], "setdiff1d() (in module arkouda)": [[14, "arkouda.setdiff1d"], [65, "arkouda.setdiff1d"]], "setxor() (arkouda.segarray method)": [[14, "arkouda.SegArray.setxor"]], "setxor1d() (in module arkouda)": [[14, "arkouda.setxor1d"], [65, "arkouda.setxor1d"]], "shape (arkouda.arrayview attribute)": [[14, "arkouda.ArrayView.shape"], [55, "arkouda.ArrayView.shape"]], "shape (arkouda.dataframe property)": [[14, "arkouda.DataFrame.shape"]], "shape (arkouda.index property)": [[14, "arkouda.Index.shape"]], "shape (arkouda.series property)": [[14, "arkouda.Series.shape"]], "shape (arkouda.strings attribute)": [[14, "arkouda.Strings.shape"], [14, "id235"], [14, "id774"], [14, "id845"]], "shape (arkouda.pdarray attribute)": [[14, "arkouda.pdarray.shape"], [14, "id121"], [14, "id312"], [14, "id428"], [14, "id543"], [14, "id659"], [14, "id7"], [62, "arkouda.pdarray.shape"]], "sin() (in module arkouda)": [[14, "arkouda.sin"], [54, "arkouda.sin"]], "size (arkouda.arrayview attribute)": [[14, "arkouda.ArrayView.size"], [55, "arkouda.ArrayView.size"]], "size (arkouda.dataframe property)": [[14, "arkouda.DataFrame.size"]], "size (arkouda.strings attribute)": [[14, "arkouda.Strings.size"], [14, "id232"], [14, "id771"], [14, "id842"]], "size (arkouda.pdarray attribute)": [[14, "arkouda.pdarray.size"], [14, "id119"], [14, "id310"], [14, "id426"], [14, "id5"], [14, "id541"], [14, "id657"], [62, "arkouda.pdarray.size"]], "sort() (in module arkouda)": [[14, "arkouda.sort"]], "sort_index() (arkouda.series method)": [[14, "arkouda.Series.sort_index"]], "sort_values() (arkouda.dataframe method)": [[14, "arkouda.DataFrame.sort_values"]], "sort_values() (arkouda.series method)": [[14, "arkouda.Series.sort_values"]], "sorted() (in module arkouda)": [[14, "arkouda.sorted"]], "split() (arkouda.strings method)": [[14, "arkouda.Strings.split"], [14, "id268"], [14, "id807"], [14, "id878"], [67, "arkouda.Strings.split"]], "sqrt() (in module arkouda)": [[14, "arkouda.sqrt"]], "standard_normal() (in module arkouda)": [[14, "arkouda.standard_normal"]], "startswith() (arkouda.strings method)": [[14, "arkouda.Strings.startswith"], [14, "id273"], [14, "id812"], [14, "id883"], [67, "arkouda.Strings.startswith"]], "std() (arkouda.timedelta method)": [[14, "arkouda.Timedelta.std"]], "std() (arkouda.pdarray method)": [[14, "arkouda.pdarray.std"], [14, "id199"], [14, "id390"], [14, "id506"], [14, "id621"], [14, "id737"], [14, "id85"], [60, "arkouda.pdarray.std"]], "std() (in module arkouda)": [[14, "arkouda.std"], [54, "arkouda.std"]], "stick() (arkouda.strings method)": [[14, "arkouda.Strings.stick"], [14, "id278"], [14, "id817"], [14, "id888"], [67, "arkouda.Strings.stick"]], "str_ (in module arkouda)": [[14, "arkouda.str_"], [14, "id416"]], "str_acc (arkouda.series attribute)": [[14, "arkouda.Series.str_acc"]], "str_scalars (in module arkouda)": [[14, "arkouda.str_scalars"]], "strict (arkouda.errormode attribute)": [[14, "arkouda.ErrorMode.strict"]], "string_operators() (in module arkouda)": [[14, "arkouda.string_operators"]], "strip() (arkouda.strings method)": [[14, "arkouda.Strings.strip"], [14, "id259"], [14, "id798"], [14, "id869"]], "sub() (arkouda.strings method)": [[14, "arkouda.Strings.sub"], [14, "id270"], [14, "id809"], [14, "id880"], [67, "arkouda.Strings.sub"]], "subn() (arkouda.strings method)": [[14, "arkouda.Strings.subn"], [14, "id271"], [14, "id810"], [14, "id881"], [67, "arkouda.Strings.subn"]], "sum() (arkouda.datetime method)": [[14, "arkouda.Datetime.sum"], [14, "id943"]], "sum() (arkouda.segarray method)": [[14, "arkouda.SegArray.sum"]], "sum() (arkouda.timedelta method)": [[14, "arkouda.Timedelta.sum"]], "sum() (arkouda.pdarray method)": [[14, "arkouda.pdarray.sum"], [14, "id191"], [14, "id382"], [14, "id498"], [14, "id613"], [14, "id729"], [14, "id77"], [60, "arkouda.pdarray.sum"]], "sum() (in module arkouda)": [[14, "arkouda.sum"], [54, "arkouda.sum"]], "supported_opeq (arkouda.datetime attribute)": [[14, "arkouda.Datetime.supported_opeq"], [14, "id934"]], "supported_opeq (arkouda.timedelta attribute)": [[14, "arkouda.Timedelta.supported_opeq"]], "supported_with_datetime (arkouda.datetime attribute)": [[14, "arkouda.Datetime.supported_with_datetime"], [14, "id930"]], "supported_with_datetime (arkouda.timedelta attribute)": [[14, "arkouda.Timedelta.supported_with_datetime"]], "supported_with_pdarray (arkouda.datetime attribute)": [[14, "arkouda.Datetime.supported_with_pdarray"], [14, "id935"]], "supported_with_pdarray (arkouda.timedelta attribute)": [[14, "arkouda.Timedelta.supported_with_pdarray"]], "supported_with_r_datetime (arkouda.datetime attribute)": [[14, "arkouda.Datetime.supported_with_r_datetime"], [14, "id931"]], "supported_with_r_datetime (arkouda.timedelta attribute)": [[14, "arkouda.Timedelta.supported_with_r_datetime"]], "supported_with_r_pdarray (arkouda.datetime attribute)": [[14, "arkouda.Datetime.supported_with_r_pdarray"], [14, "id936"]], "supported_with_r_pdarray (arkouda.timedelta attribute)": [[14, "arkouda.Timedelta.supported_with_r_pdarray"]], "supported_with_r_timedelta (arkouda.datetime attribute)": [[14, "arkouda.Datetime.supported_with_r_timedelta"], [14, "id933"]], "supported_with_r_timedelta (arkouda.timedelta attribute)": [[14, "arkouda.Timedelta.supported_with_r_timedelta"]], "supported_with_timedelta (arkouda.datetime attribute)": [[14, "arkouda.Datetime.supported_with_timedelta"], [14, "id932"]], "supported_with_timedelta (arkouda.timedelta attribute)": [[14, "arkouda.Timedelta.supported_with_timedelta"]], "tail() (arkouda.dataframe method)": [[14, "arkouda.DataFrame.tail"]], "tail() (arkouda.series method)": [[14, "arkouda.Series.tail"]], "timedelta_range() (in module arkouda)": [[14, "arkouda.timedelta_range"]], "to_cuda() (arkouda.pdarray method)": [[14, "arkouda.pdarray.to_cuda"], [14, "id102"], [14, "id216"], [14, "id407"], [14, "id523"], [14, "id638"], [14, "id754"]], "to_dataframe() (arkouda.series method)": [[14, "arkouda.Series.to_dataframe"]], "to_dict() (arkouda.index method)": [[14, "arkouda.Index.to_dict"]], "to_dict() (arkouda.multiindex method)": [[14, "arkouda.MultiIndex.to_dict"]], "to_hdf() (arkouda.arrayview method)": [[14, "arkouda.ArrayView.to_hdf"]], "to_hdf() (arkouda.dataframe method)": [[14, "arkouda.DataFrame.to_hdf"]], "to_hdf() (arkouda.index method)": [[14, "arkouda.Index.to_hdf"]], "to_hdf() (arkouda.segarray method)": [[14, "arkouda.SegArray.to_hdf"]], "to_hdf() (arkouda.strings method)": [[14, "arkouda.Strings.to_hdf"], [14, "id292"], [14, "id831"], [14, "id902"]], "to_hdf() (arkouda.pdarray method)": [[14, "arkouda.pdarray.to_hdf"], [14, "id104"], [14, "id218"], [14, "id409"], [14, "id525"], [14, "id640"], [14, "id756"]], "to_list() (arkouda.arrayview method)": [[14, "arkouda.ArrayView.to_list"]], "to_list() (arkouda.bitvector method)": [[14, "arkouda.BitVector.to_list"]], "to_list() (arkouda.ipv4 method)": [[14, "arkouda.IPv4.to_list"]], "to_list() (arkouda.index method)": [[14, "arkouda.Index.to_list"]], "to_list() (arkouda.segarray method)": [[14, "arkouda.SegArray.to_list"]], "to_list() (arkouda.strings method)": [[14, "arkouda.Strings.to_list"], [14, "id288"], [14, "id827"], [14, "id898"]], "to_list() (arkouda._abstractbasetime method)": [[14, "arkouda._AbstractBaseTime.to_list"]], "to_list() (arkouda.pdarray method)": [[14, "arkouda.pdarray.to_list"], [14, "id101"], [14, "id215"], [14, "id406"], [14, "id522"], [14, "id637"], [14, "id753"]], "to_lower() (arkouda.strings method)": [[14, "arkouda.Strings.to_lower"], [14, "id253"], [14, "id792"], [14, "id863"]], "to_ndarray() (arkouda.arrayview method)": [[14, "arkouda.ArrayView.to_ndarray"]], "to_ndarray() (arkouda.bitvector method)": [[14, "arkouda.BitVector.to_ndarray"]], "to_ndarray() (arkouda.ipv4 method)": [[14, "arkouda.IPv4.to_ndarray"]], "to_ndarray() (arkouda.index method)": [[14, "arkouda.Index.to_ndarray"]], "to_ndarray() (arkouda.segarray method)": [[14, "arkouda.SegArray.to_ndarray"]], "to_ndarray() (arkouda.strings method)": [[14, "arkouda.Strings.to_ndarray"], [14, "id287"], [14, "id826"], [14, "id897"]], "to_ndarray() (arkouda._abstractbasetime method)": [[14, "arkouda._AbstractBaseTime.to_ndarray"]], "to_ndarray() (arkouda.pdarray method)": [[14, "arkouda.pdarray.to_ndarray"], [14, "id100"], [14, "id214"], [14, "id405"], [14, "id521"], [14, "id636"], [14, "id752"]], "to_pandas() (arkouda.dataframe method)": [[14, "arkouda.DataFrame.to_pandas"]], "to_pandas() (arkouda.datetime method)": [[14, "arkouda.Datetime.to_pandas"], [14, "id942"]], "to_pandas() (arkouda.index method)": [[14, "arkouda.Index.to_pandas"]], "to_pandas() (arkouda.multiindex method)": [[14, "arkouda.MultiIndex.to_pandas"]], "to_pandas() (arkouda.series method)": [[14, "arkouda.Series.to_pandas"]], "to_pandas() (arkouda.timedelta method)": [[14, "arkouda.Timedelta.to_pandas"]], "to_parquet() (arkouda.dataframe method)": [[14, "arkouda.DataFrame.to_parquet"]], "to_parquet() (arkouda.index method)": [[14, "arkouda.Index.to_parquet"]], "to_parquet() (arkouda.strings method)": [[14, "arkouda.Strings.to_parquet"], [14, "id291"], [14, "id830"], [14, "id901"]], "to_parquet() (arkouda.pdarray method)": [[14, "arkouda.pdarray.to_parquet"], [14, "id103"], [14, "id217"], [14, "id408"], [14, "id524"], [14, "id639"], [14, "id755"]], "to_title() (arkouda.strings method)": [[14, "arkouda.Strings.to_title"], [14, "id255"], [14, "id794"], [14, "id865"]], "to_upper() (arkouda.strings method)": [[14, "arkouda.Strings.to_upper"], [14, "id254"], [14, "id793"], [14, "id864"]], "topn() (arkouda.series method)": [[14, "arkouda.Series.topn"]], "total_seconds() (arkouda.timedelta method)": [[14, "arkouda.Timedelta.total_seconds"]], "translate_np_dtype() (in module arkouda)": [[14, "arkouda.translate_np_dtype"], [14, "id114"], [14, "id417"]], "uint64 (in module arkouda)": [[14, "arkouda.uint64"]], "uint8 (in module arkouda)": [[14, "arkouda.uint8"]], "uniform() (in module arkouda)": [[14, "arkouda.uniform"]], "union() (arkouda.segarray method)": [[14, "arkouda.SegArray.union"]], "union1d() (in module arkouda)": [[14, "arkouda.union1d"], [65, "arkouda.union1d"]], "unique() (arkouda.segarray method)": [[14, "arkouda.SegArray.unique"]], "unregister() (arkouda.dataframe method)": [[14, "arkouda.DataFrame.unregister"]], "unregister() (arkouda.segarray method)": [[14, "arkouda.SegArray.unregister"]], "unregister() (arkouda.strings method)": [[14, "arkouda.Strings.unregister"], [14, "id298"], [14, "id837"], [14, "id908"]], "unregister() (arkouda.pdarray method)": [[14, "arkouda.pdarray.unregister"], [14, "id106"], [14, "id220"], [14, "id411"], [14, "id527"], [14, "id642"], [14, "id758"]], "unregister_dataframe_by_name() (arkouda.dataframe static method)": [[14, "arkouda.DataFrame.unregister_dataframe_by_name"]], "unregister_pdarray_by_name() (in module arkouda)": [[14, "arkouda.unregister_pdarray_by_name"]], "unregister_segarray_by_name() (arkouda.segarray static method)": [[14, "arkouda.SegArray.unregister_segarray_by_name"]], "unregister_strings_by_name() (arkouda.strings static method)": [[14, "arkouda.Strings.unregister_strings_by_name"], [14, "id300"], [14, "id839"], [14, "id910"]], "unsqueeze() (in module arkouda)": [[14, "arkouda.unsqueeze"]], "update_size() (arkouda.dataframe method)": [[14, "arkouda.DataFrame.update_size"]], "valsize (arkouda.segarray attribute)": [[14, "arkouda.SegArray.valsize"]], "value_counts() (arkouda.series method)": [[14, "arkouda.Series.value_counts"]], "value_counts() (in module arkouda)": [[14, "arkouda.value_counts"], [60, "arkouda.value_counts"]], "var() (arkouda.pdarray method)": [[14, "arkouda.pdarray.var"], [14, "id198"], [14, "id389"], [14, "id505"], [14, "id620"], [14, "id736"], [14, "id84"], [60, "arkouda.pdarray.var"]], "var() (in module arkouda)": [[14, "arkouda.var"], [54, "arkouda.var"]], "week (arkouda.datetime property)": [[14, "arkouda.Datetime.week"], [14, "id926"]], "weekday (arkouda.datetime property)": [[14, "arkouda.Datetime.weekday"], [14, "id925"]], "weekofyear (arkouda.datetime property)": [[14, "arkouda.Datetime.weekofyear"], [14, "id927"]], "where() (in module arkouda)": [[14, "arkouda.where"], [14, "id1"], [14, "id229"], [14, "id653"], [54, "arkouda.where"]], "year (arkouda.datetime property)": [[14, "arkouda.Datetime.year"], [14, "id920"]], "zero_up() (in module arkouda)": [[14, "arkouda.zero_up"]], "zeros() (in module arkouda)": [[14, "arkouda.zeros"], [14, "id111"], [14, "id225"], [14, "id533"], [14, "id764"], [57, "arkouda.zeros"]], "zeros_like() (in module arkouda)": [[14, "arkouda.zeros_like"], [57, "arkouda.zeros_like"]], "index (class in arkouda.index)": [[15, "arkouda.index.Index"]], "multiindex (class in arkouda.index)": [[15, "arkouda.index.MultiIndex"]], "__eq__() (arkouda.index.index method)": [[15, "arkouda.index.Index.__eq__"]], "__eq__() (arkouda.index.multiindex method)": [[15, "arkouda.index.MultiIndex.__eq__"]], "__getitem__() (arkouda.index.index method)": [[15, "arkouda.index.Index.__getitem__"]], "__getitem__() (arkouda.index.multiindex method)": [[15, "arkouda.index.MultiIndex.__getitem__"]], "__len__() (arkouda.index.index method)": [[15, "arkouda.index.Index.__len__"]], "__len__() (arkouda.index.multiindex method)": [[15, "arkouda.index.MultiIndex.__len__"]], "__repr__() (arkouda.index.index method)": [[15, "arkouda.index.Index.__repr__"]], "__repr__() (arkouda.index.multiindex method)": [[15, "arkouda.index.MultiIndex.__repr__"]], "_check_aligned() (arkouda.index.index method)": [[15, "arkouda.index.Index._check_aligned"]], "_check_types() (arkouda.index.index method)": [[15, "arkouda.index.Index._check_types"]], "_merge() (arkouda.index.index method)": [[15, "arkouda.index.Index._merge"]], "_merge() (arkouda.index.multiindex method)": [[15, "arkouda.index.MultiIndex._merge"]], "_merge_all() (arkouda.index.index method)": [[15, "arkouda.index.Index._merge_all"]], "_merge_all() (arkouda.index.multiindex method)": [[15, "arkouda.index.MultiIndex._merge_all"]], "argsort() (arkouda.index.index method)": [[15, "arkouda.index.Index.argsort"]], "argsort() (arkouda.index.multiindex method)": [[15, "arkouda.index.MultiIndex.argsort"]], "arkouda.index": [[15, "module-arkouda.index"]], "concat() (arkouda.index.index method)": [[15, "arkouda.index.Index.concat"]], "concat() (arkouda.index.multiindex method)": [[15, "arkouda.index.MultiIndex.concat"]], "factory() (arkouda.index.index static method)": [[15, "arkouda.index.Index.factory"]], "index (arkouda.index.index property)": [[15, "arkouda.index.Index.index"]], "index (arkouda.index.multiindex property)": [[15, "arkouda.index.MultiIndex.index"]], "is_registered() (arkouda.index.index method)": [[15, "arkouda.index.Index.is_registered"]], "is_unique (arkouda.index.index property)": [[15, "arkouda.index.Index.is_unique"]], "lookup() (arkouda.index.index method)": [[15, "arkouda.index.Index.lookup"]], "lookup() (arkouda.index.multiindex method)": [[15, "arkouda.index.MultiIndex.lookup"]], "register() (arkouda.index.index method)": [[15, "arkouda.index.Index.register"]], "register() (arkouda.index.multiindex method)": [[15, "arkouda.index.MultiIndex.register"]], "set_dtype() (arkouda.index.index method)": [[15, "arkouda.index.Index.set_dtype"]], "set_dtype() (arkouda.index.multiindex method)": [[15, "arkouda.index.MultiIndex.set_dtype"]], "shape (arkouda.index.index property)": [[15, "arkouda.index.Index.shape"]], "to_dict() (arkouda.index.index method)": [[15, "arkouda.index.Index.to_dict"]], "to_dict() (arkouda.index.multiindex method)": [[15, "arkouda.index.MultiIndex.to_dict"]], "to_hdf() (arkouda.index.index method)": [[15, "arkouda.index.Index.to_hdf"]], "to_list() (arkouda.index.index method)": [[15, "arkouda.index.Index.to_list"]], "to_ndarray() (arkouda.index.index method)": [[15, "arkouda.index.Index.to_ndarray"]], "to_pandas() (arkouda.index.index method)": [[15, "arkouda.index.Index.to_pandas"]], "to_pandas() (arkouda.index.multiindex method)": [[15, "arkouda.index.MultiIndex.to_pandas"]], "to_parquet() (arkouda.index.index method)": [[15, "arkouda.index.Index.to_parquet"]], "allsymbols (in module arkouda.infoclass)": [[16, "arkouda.infoclass.AllSymbols"]], "registeredsymbols (in module arkouda.infoclass)": [[16, "arkouda.infoclass.RegisteredSymbols"]], "arkouda.infoclass": [[16, "module-arkouda.infoclass"]], "information() (in module arkouda.infoclass)": [[16, "arkouda.infoclass.information"]], "list_registry() (in module arkouda.infoclass)": [[16, "arkouda.infoclass.list_registry"]], "list_symbol_table() (in module arkouda.infoclass)": [[16, "arkouda.infoclass.list_symbol_table"]], "pretty_print_information() (in module arkouda.infoclass)": [[16, "arkouda.infoclass.pretty_print_information"]], "arkouda.io": [[17, "module-arkouda.io"]], "export() (in module arkouda.io)": [[17, "arkouda.io.export"]], "file_type_to_int() (in module arkouda.io)": [[17, "arkouda.io.file_type_to_int"]], "get_datasets() (in module arkouda.io)": [[17, "arkouda.io.get_datasets"]], "get_filetype() (in module arkouda.io)": [[17, "arkouda.io.get_filetype"]], "get_null_indices() (in module arkouda.io)": [[17, "arkouda.io.get_null_indices"]], "import_data() (in module arkouda.io)": [[17, "arkouda.io.import_data"]], "load() (in module arkouda.io)": [[17, "arkouda.io.load"]], "load_all() (in module arkouda.io)": [[17, "arkouda.io.load_all"]], "ls() (in module arkouda.io)": [[17, "arkouda.io.ls"]], "mode_str_to_int() (in module arkouda.io)": [[17, "arkouda.io.mode_str_to_int"]], "read() (in module arkouda.io)": [[17, "arkouda.io.read"]], "read_hdf() (in module arkouda.io)": [[17, "arkouda.io.read_hdf"]], "read_parquet() (in module arkouda.io)": [[17, "arkouda.io.read_parquet"]], "to_hdf() (in module arkouda.io)": [[17, "arkouda.io.to_hdf"]], "to_parquet() (in module arkouda.io)": [[17, "arkouda.io.to_parquet"]], "arkouda.io_util": [[18, "module-arkouda.io_util"]], "delimited_file_to_dict() (in module arkouda.io_util)": [[18, "arkouda.io_util.delimited_file_to_dict"]], "dict_to_delimited_file() (in module arkouda.io_util)": [[18, "arkouda.io_util.dict_to_delimited_file"]], "get_directory() (in module arkouda.io_util)": [[18, "arkouda.io_util.get_directory"]], "write_line_to_file() (in module arkouda.io_util)": [[18, "arkouda.io_util.write_line_to_file"]], "arkouda.join": [[19, "module-arkouda.join"]], "join_on_eq_with_dt() (in module arkouda.join)": [[19, "arkouda.join.join_on_eq_with_dt"]], "arkouda.logger": [[20, "module-arkouda.logger"]], "disableverbose() (in module arkouda.logger)": [[20, "arkouda.logger.disableVerbose"]], "enableverbose() (in module arkouda.logger)": [[20, "arkouda.logger.enableVerbose"]], "match (class in arkouda.match)": [[21, "arkouda.match.Match"]], "matchtype (in module arkouda.match)": [[21, "arkouda.match.MatchType"]], "__getitem__() (arkouda.match.match method)": [[21, "arkouda.match.Match.__getitem__"]], "__repr__() (arkouda.match.match method)": [[21, "arkouda.match.Match.__repr__"]], "__str__() (arkouda.match.match method)": [[21, "arkouda.match.Match.__str__"]], "arkouda.match": [[21, "module-arkouda.match"]], "end() (arkouda.match.match method)": [[21, "arkouda.match.Match.end"], [67, "arkouda.match.Match.end"]], "find_matches() (arkouda.match.match method)": [[21, "arkouda.match.Match.find_matches"], [67, "arkouda.match.Match.find_matches"]], "group() (arkouda.match.match method)": [[21, "arkouda.match.Match.group"], [67, "arkouda.match.Match.group"]], "match_type() (arkouda.match.match method)": [[21, "arkouda.match.Match.match_type"], [67, "arkouda.match.Match.match_type"]], "matched() (arkouda.match.match method)": [[21, "arkouda.match.Match.matched"], [67, "arkouda.match.Match.matched"]], "start() (arkouda.match.match method)": [[21, "arkouda.match.Match.start"], [67, "arkouda.match.Match.start"]], "locationsinfo (arkouda.matcher.matcher attribute)": [[22, "arkouda.matcher.Matcher.LocationsInfo"]], "matcher (class in arkouda.matcher)": [[22, "arkouda.matcher.Matcher"]], "arkouda.matcher": [[22, "module-arkouda.matcher"]], "find_locations() (arkouda.matcher.matcher method)": [[22, "arkouda.matcher.Matcher.find_locations"]], "findall() (arkouda.matcher.matcher method)": [[22, "arkouda.matcher.Matcher.findall"]], "get_match() (arkouda.matcher.matcher method)": [[22, "arkouda.matcher.Matcher.get_match"]], "split() (arkouda.matcher.matcher method)": [[22, "arkouda.matcher.Matcher.split"]], "sub() (arkouda.matcher.matcher method)": [[22, "arkouda.matcher.Matcher.sub"]], "binary (arkouda.message.messageformat attribute)": [[23, "arkouda.message.MessageFormat.BINARY"]], "datetime (arkouda.message.objecttype attribute)": [[23, "arkouda.message.ObjectType.DATETIME"]], "dict (arkouda.message.objecttype attribute)": [[23, "arkouda.message.ObjectType.DICT"]], "error (arkouda.message.messagetype attribute)": [[23, "arkouda.message.MessageType.ERROR"]], "list (arkouda.message.objecttype attribute)": [[23, "arkouda.message.ObjectType.LIST"]], "messageformat (class in arkouda.message)": [[23, "arkouda.message.MessageFormat"]], "messagetype (class in arkouda.message)": [[23, "arkouda.message.MessageType"]], "normal (arkouda.message.messagetype attribute)": [[23, "arkouda.message.MessageType.NORMAL"]], "objecttype (class in arkouda.message)": [[23, "arkouda.message.ObjectType"]], "pdarray (arkouda.message.objecttype attribute)": [[23, "arkouda.message.ObjectType.PDARRAY"]], "parameterobject (class in arkouda.message)": [[23, "arkouda.message.ParameterObject"]], "replymessage (class in arkouda.message)": [[23, "arkouda.message.ReplyMessage"]], "requestmessage (class in arkouda.message)": [[23, "arkouda.message.RequestMessage"]], "string (arkouda.message.messageformat attribute)": [[23, "arkouda.message.MessageFormat.STRING"]], "strings (arkouda.message.objecttype attribute)": [[23, "arkouda.message.ObjectType.STRINGS"]], "timedelta (arkouda.message.objecttype attribute)": [[23, "arkouda.message.ObjectType.TIMEDELTA"]], "value (arkouda.message.objecttype attribute)": [[23, "arkouda.message.ObjectType.VALUE"]], "warning (arkouda.message.messagetype attribute)": [[23, "arkouda.message.MessageType.WARNING"]], "__repr__() (arkouda.message.messageformat method)": [[23, "arkouda.message.MessageFormat.__repr__"]], "__repr__() (arkouda.message.messagetype method)": [[23, "arkouda.message.MessageType.__repr__"]], "__repr__() (arkouda.message.objecttype method)": [[23, "arkouda.message.ObjectType.__repr__"]], "__slots (arkouda.message.parameterobject attribute)": [[23, "arkouda.message.ParameterObject.__slots"]], "__slots (arkouda.message.requestmessage attribute)": [[23, "arkouda.message.RequestMessage.__slots"]], "__slots__ (arkouda.message.replymessage attribute)": [[23, "arkouda.message.ReplyMessage.__slots__"]], "__str__() (arkouda.message.messageformat method)": [[23, "arkouda.message.MessageFormat.__str__"]], "__str__() (arkouda.message.messagetype method)": [[23, "arkouda.message.MessageType.__str__"]], "__str__() (arkouda.message.objecttype method)": [[23, "arkouda.message.ObjectType.__str__"]], "_build_dict_param() (arkouda.message.parameterobject static method)": [[23, "arkouda.message.ParameterObject._build_dict_param"]], "_build_gen_param() (arkouda.message.parameterobject static method)": [[23, "arkouda.message.ParameterObject._build_gen_param"]], "_build_list_param() (arkouda.message.parameterobject static method)": [[23, "arkouda.message.ParameterObject._build_list_param"]], "_build_pdarray_param() (arkouda.message.parameterobject static method)": [[23, "arkouda.message.ParameterObject._build_pdarray_param"]], "_build_strings_param() (arkouda.message.parameterobject static method)": [[23, "arkouda.message.ParameterObject._build_strings_param"]], "args (arkouda.message.requestmessage attribute)": [[23, "arkouda.message.RequestMessage.args"]], "arkouda.message": [[23, "module-arkouda.message"]], "asdict() (arkouda.message.requestmessage method)": [[23, "arkouda.message.RequestMessage.asdict"]], "cmd (arkouda.message.requestmessage attribute)": [[23, "arkouda.message.RequestMessage.cmd"]], "dict (arkouda.message.parameterobject property)": [[23, "arkouda.message.ParameterObject.dict"]], "dtype (arkouda.message.parameterobject attribute)": [[23, "arkouda.message.ParameterObject.dtype"]], "factory() (arkouda.message.parameterobject class method)": [[23, "arkouda.message.ParameterObject.factory"]], "format (arkouda.message.requestmessage attribute)": [[23, "arkouda.message.RequestMessage.format"]], "fromdict() (arkouda.message.replymessage static method)": [[23, "arkouda.message.ReplyMessage.fromdict"]], "generate_dispatch() (arkouda.message.parameterobject static method)": [[23, "arkouda.message.ParameterObject.generate_dispatch"]], "key (arkouda.message.parameterobject attribute)": [[23, "arkouda.message.ParameterObject.key"]], "msg (arkouda.message.replymessage attribute)": [[23, "arkouda.message.ReplyMessage.msg"]], "msgtype (arkouda.message.replymessage attribute)": [[23, "arkouda.message.ReplyMessage.msgType"]], "objtype (arkouda.message.parameterobject attribute)": [[23, "arkouda.message.ParameterObject.objType"]], "size (arkouda.message.requestmessage attribute)": [[23, "arkouda.message.RequestMessage.size"]], "token (arkouda.message.requestmessage attribute)": [[23, "arkouda.message.RequestMessage.token"]], "user (arkouda.message.replymessage attribute)": [[23, "arkouda.message.ReplyMessage.user"]], "user (arkouda.message.requestmessage attribute)": [[23, "arkouda.message.RequestMessage.user"]], "val (arkouda.message.parameterobject attribute)": [[23, "arkouda.message.ParameterObject.val"]], "errormode (class in arkouda.numeric)": [[24, "arkouda.numeric.ErrorMode"]], "abs() (in module arkouda.numeric)": [[24, "arkouda.numeric.abs"]], "arkouda.numeric": [[24, "module-arkouda.numeric"]], "cast() (in module arkouda.numeric)": [[24, "arkouda.numeric.cast"]], "cos() (in module arkouda.numeric)": [[24, "arkouda.numeric.cos"]], "cumprod() (in module arkouda.numeric)": [[24, "arkouda.numeric.cumprod"]], "cumsum() (in module arkouda.numeric)": [[24, "arkouda.numeric.cumsum"]], "exp() (in module arkouda.numeric)": [[24, "arkouda.numeric.exp"]], "hash() (in module arkouda.numeric)": [[24, "arkouda.numeric.hash"]], "histogram() (in module arkouda.numeric)": [[24, "arkouda.numeric.histogram"]], "ignore (arkouda.numeric.errormode attribute)": [[24, "arkouda.numeric.ErrorMode.ignore"]], "isnan() (in module arkouda.numeric)": [[24, "arkouda.numeric.isnan"]], "log() (in module arkouda.numeric)": [[24, "arkouda.numeric.log"]], "return_validity (arkouda.numeric.errormode attribute)": [[24, "arkouda.numeric.ErrorMode.return_validity"]], "sin() (in module arkouda.numeric)": [[24, "arkouda.numeric.sin"]], "strict (arkouda.numeric.errormode attribute)": [[24, "arkouda.numeric.ErrorMode.strict"]], "value_counts() (in module arkouda.numeric)": [[24, "arkouda.numeric.value_counts"]], "where() (in module arkouda.numeric)": [[24, "arkouda.numeric.where"]], "binops (arkouda.pdarrayclass.pdarray attribute)": [[25, "arkouda.pdarrayclass.pdarray.BinOps"]], "opeqops (arkouda.pdarrayclass.pdarray attribute)": [[25, "arkouda.pdarrayclass.pdarray.OpEqOps"]], "__add__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__add__"]], "__and__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__and__"]], "__array_priority__ (arkouda.pdarrayclass.pdarray attribute)": [[25, "arkouda.pdarrayclass.pdarray.__array_priority__"]], "__bool__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__bool__"]], "__del__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__del__"]], "__eq__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__eq__"]], "__floordiv__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__floordiv__"]], "__ge__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__ge__"]], "__getitem__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__getitem__"]], "__gt__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__gt__"]], "__iadd__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__iadd__"]], "__iand__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__iand__"]], "__ifloordiv__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__ifloordiv__"]], "__ilshift__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__ilshift__"]], "__imod__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__imod__"]], "__imul__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__imul__"]], "__invert__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__invert__"]], "__ior__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__ior__"]], "__ipow__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__ipow__"]], "__irshift__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__irshift__"]], "__isub__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__isub__"]], "__iter__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__iter__"]], "__itruediv__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__itruediv__"]], "__ixor__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__ixor__"]], "__le__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__le__"]], "__len__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__len__"]], "__lshift__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__lshift__"]], "__lt__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__lt__"]], "__mod__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__mod__"]], "__mul__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__mul__"]], "__ne__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__ne__"]], "__neg__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__neg__"]], "__or__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__or__"]], "__pow__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__pow__"]], "__radd__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__radd__"]], "__rand__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__rand__"]], "__repr__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__repr__"]], "__rfloordiv__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__rfloordiv__"]], "__rlshift__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__rlshift__"]], "__rmod__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__rmod__"]], "__rmul__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__rmul__"]], "__ror__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__ror__"]], "__rpow__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__rpow__"]], "__rrshift__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__rrshift__"]], "__rshift__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__rshift__"]], "__rsub__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__rsub__"]], "__rtruediv__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__rtruediv__"]], "__rxor__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__rxor__"]], "__setitem__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__setitem__"]], "__str__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__str__"]], "__sub__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__sub__"]], "__truediv__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__truediv__"]], "__xor__() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.__xor__"]], "_binop() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray._binop"]], "_get_grouping_keys() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray._get_grouping_keys"]], "_list_component_names() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray._list_component_names"]], "_r_binop() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray._r_binop"]], "all() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.all"]], "all() (in module arkouda.pdarrayclass)": [[25, "arkouda.pdarrayclass.all"]], "any() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.any"]], "any() (in module arkouda.pdarrayclass)": [[25, "arkouda.pdarrayclass.any"]], "argmax() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.argmax"]], "argmax() (in module arkouda.pdarrayclass)": [[25, "arkouda.pdarrayclass.argmax"]], "argmaxk() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.argmaxk"]], "argmaxk() (in module arkouda.pdarrayclass)": [[25, "arkouda.pdarrayclass.argmaxk"]], "argmin() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.argmin"]], "argmin() (in module arkouda.pdarrayclass)": [[25, "arkouda.pdarrayclass.argmin"]], "argmink() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.argmink"]], "argmink() (in module arkouda.pdarrayclass)": [[25, "arkouda.pdarrayclass.argmink"]], "arkouda.pdarrayclass": [[25, "module-arkouda.pdarrayclass"]], "astype() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.astype"]], "attach() (arkouda.pdarrayclass.pdarray static method)": [[25, "arkouda.pdarrayclass.pdarray.attach"]], "attach_pdarray() (in module arkouda.pdarrayclass)": [[25, "arkouda.pdarrayclass.attach_pdarray"]], "clear() (in module arkouda.pdarrayclass)": [[25, "arkouda.pdarrayclass.clear"]], "clz() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.clz"]], "clz() (in module arkouda.pdarrayclass)": [[25, "arkouda.pdarrayclass.clz"]], "corr() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.corr"]], "corr() (in module arkouda.pdarrayclass)": [[25, "arkouda.pdarrayclass.corr"]], "cov() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.cov"]], "cov() (in module arkouda.pdarrayclass)": [[25, "arkouda.pdarrayclass.cov"]], "ctz() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.ctz"]], "ctz() (in module arkouda.pdarrayclass)": [[25, "arkouda.pdarrayclass.ctz"]], "dtype (arkouda.pdarrayclass.pdarray attribute)": [[25, "arkouda.pdarrayclass.pdarray.dtype"]], "fill() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.fill"]], "format_other() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.format_other"]], "info() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.info"]], "is_registered() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.is_registered"]], "is_sorted() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.is_sorted"]], "is_sorted() (in module arkouda.pdarrayclass)": [[25, "arkouda.pdarrayclass.is_sorted"]], "itemsize (arkouda.pdarrayclass.pdarray attribute)": [[25, "arkouda.pdarrayclass.pdarray.itemsize"]], "max() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.max"]], "max() (in module arkouda.pdarrayclass)": [[25, "arkouda.pdarrayclass.max"]], "maxk() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.maxk"]], "maxk() (in module arkouda.pdarrayclass)": [[25, "arkouda.pdarrayclass.maxk"]], "mean() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.mean"]], "mean() (in module arkouda.pdarrayclass)": [[25, "arkouda.pdarrayclass.mean"]], "min() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.min"]], "min() (in module arkouda.pdarrayclass)": [[25, "arkouda.pdarrayclass.min"]], "mink() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.mink"]], "mink() (in module arkouda.pdarrayclass)": [[25, "arkouda.pdarrayclass.mink"]], "name (arkouda.pdarrayclass.pdarray attribute)": [[25, "arkouda.pdarrayclass.pdarray.name"]], "ndim (arkouda.pdarrayclass.pdarray attribute)": [[25, "arkouda.pdarrayclass.pdarray.ndim"]], "objtype (arkouda.pdarrayclass.pdarray attribute)": [[25, "arkouda.pdarrayclass.pdarray.objtype"]], "opeq() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.opeq"]], "parity() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.parity"]], "parity() (in module arkouda.pdarrayclass)": [[25, "arkouda.pdarrayclass.parity"]], "pdarray (class in arkouda.pdarrayclass)": [[25, "arkouda.pdarrayclass.pdarray"]], "popcount() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.popcount"]], "popcount() (in module arkouda.pdarrayclass)": [[25, "arkouda.pdarrayclass.popcount"]], "power() (in module arkouda.pdarrayclass)": [[25, "arkouda.pdarrayclass.power"]], "pretty_print_info() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.pretty_print_info"]], "prod() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.prod"]], "prod() (in module arkouda.pdarrayclass)": [[25, "arkouda.pdarrayclass.prod"]], "register() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.register"]], "reshape() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.reshape"]], "rotl() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.rotl"]], "rotl() (in module arkouda.pdarrayclass)": [[25, "arkouda.pdarrayclass.rotl"]], "rotr() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.rotr"]], "rotr() (in module arkouda.pdarrayclass)": [[25, "arkouda.pdarrayclass.rotr"]], "shape (arkouda.pdarrayclass.pdarray attribute)": [[25, "arkouda.pdarrayclass.pdarray.shape"]], "size (arkouda.pdarrayclass.pdarray attribute)": [[25, "arkouda.pdarrayclass.pdarray.size"]], "sqrt() (in module arkouda.pdarrayclass)": [[25, "arkouda.pdarrayclass.sqrt"]], "std() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.std"]], "std() (in module arkouda.pdarrayclass)": [[25, "arkouda.pdarrayclass.std"]], "sum() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.sum"]], "sum() (in module arkouda.pdarrayclass)": [[25, "arkouda.pdarrayclass.sum"]], "to_cuda() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.to_cuda"]], "to_hdf() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.to_hdf"]], "to_list() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.to_list"]], "to_ndarray() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.to_ndarray"]], "to_parquet() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.to_parquet"]], "unregister() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.unregister"]], "unregister_pdarray_by_name() (in module arkouda.pdarrayclass)": [[25, "arkouda.pdarrayclass.unregister_pdarray_by_name"]], "var() (arkouda.pdarrayclass.pdarray method)": [[25, "arkouda.pdarrayclass.pdarray.var"]], "var() (in module arkouda.pdarrayclass)": [[25, "arkouda.pdarrayclass.var"]], "arange() (in module arkouda.pdarraycreation)": [[26, "arkouda.pdarraycreation.arange"]], "arkouda.pdarraycreation": [[26, "module-arkouda.pdarraycreation"]], "array() (in module arkouda.pdarraycreation)": [[26, "arkouda.pdarraycreation.array"]], "bigint_from_uint_arrays() (in module arkouda.pdarraycreation)": [[26, "arkouda.pdarraycreation.bigint_from_uint_arrays"]], "from_series() (in module arkouda.pdarraycreation)": [[26, "arkouda.pdarraycreation.from_series"]], "full() (in module arkouda.pdarraycreation)": [[26, "arkouda.pdarraycreation.full"]], "full_like() (in module arkouda.pdarraycreation)": [[26, "arkouda.pdarraycreation.full_like"]], "linspace() (in module arkouda.pdarraycreation)": [[26, "arkouda.pdarraycreation.linspace"]], "ones() (in module arkouda.pdarraycreation)": [[26, "arkouda.pdarraycreation.ones"]], "ones_like() (in module arkouda.pdarraycreation)": [[26, "arkouda.pdarraycreation.ones_like"]], "randint() (in module arkouda.pdarraycreation)": [[26, "arkouda.pdarraycreation.randint"]], "random_strings_lognormal() (in module arkouda.pdarraycreation)": [[26, "arkouda.pdarraycreation.random_strings_lognormal"]], "random_strings_uniform() (in module arkouda.pdarraycreation)": [[26, "arkouda.pdarraycreation.random_strings_uniform"]], "standard_normal() (in module arkouda.pdarraycreation)": [[26, "arkouda.pdarraycreation.standard_normal"]], "uniform() (in module arkouda.pdarraycreation)": [[26, "arkouda.pdarraycreation.uniform"]], "zeros() (in module arkouda.pdarraycreation)": [[26, "arkouda.pdarraycreation.zeros"]], "zeros_like() (in module arkouda.pdarraycreation)": [[26, "arkouda.pdarraycreation.zeros_like"]], "arkouda.pdarraysetops": [[27, "module-arkouda.pdarraysetops"]], "concatenate() (in module arkouda.pdarraysetops)": [[27, "arkouda.pdarraysetops.concatenate"]], "in1d() (in module arkouda.pdarraysetops)": [[27, "arkouda.pdarraysetops.in1d"]], "intersect1d() (in module arkouda.pdarraysetops)": [[27, "arkouda.pdarraysetops.intersect1d"]], "setdiff1d() (in module arkouda.pdarraysetops)": [[27, "arkouda.pdarraysetops.setdiff1d"]], "setxor1d() (in module arkouda.pdarraysetops)": [[27, "arkouda.pdarraysetops.setxor1d"]], "union1d() (in module arkouda.pdarraysetops)": [[27, "arkouda.pdarraysetops.union1d"]], "arkouda.plotting": [[28, "module-arkouda.plotting"]], "plot_dist() (in module arkouda.plotting)": [[28, "arkouda.plotting.plot_dist"]], "row (class in arkouda.row)": [[29, "arkouda.row.Row"]], "__repr__() (arkouda.row.row method)": [[29, "arkouda.row.Row.__repr__"]], "__str__() (arkouda.row.row method)": [[29, "arkouda.row.Row.__str__"]], "_repr_html_() (arkouda.row.row method)": [[29, "arkouda.row.Row._repr_html_"]], "arkouda.row": [[29, "module-arkouda.row"]], "arkouda.security": [[30, "module-arkouda.security"]], "generate_token() (in module arkouda.security)": [[30, "arkouda.security.generate_token"]], "generate_username_token_json() (in module arkouda.security)": [[30, "arkouda.security.generate_username_token_json"]], "get_arkouda_client_directory() (in module arkouda.security)": [[30, "arkouda.security.get_arkouda_client_directory"]], "get_home_directory() (in module arkouda.security)": [[30, "arkouda.security.get_home_directory"]], "get_username() (in module arkouda.security)": [[30, "arkouda.security.get_username"]], "username_tokenizer (in module arkouda.security)": [[30, "arkouda.security.username_tokenizer"]], "and() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.AND"]], "or() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.OR"]], "segarray (class in arkouda.segarray)": [[31, "arkouda.segarray.SegArray"]], "xor() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.XOR"]], "__eq__() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.__eq__"]], "__getitem__() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.__getitem__"]], "__repr__() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.__repr__"]], "__str__() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.__str__"]], "_aggregator() (in module arkouda.segarray)": [[31, "arkouda.segarray._aggregator"]], "_compute_non_empty() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray._compute_non_empty"]], "_from_attach_return_msg() (arkouda.segarray.segarray class method)": [[31, "arkouda.segarray.SegArray._from_attach_return_msg"]], "_normalize_index() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray._normalize_index"]], "aggregate() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.aggregate"]], "all() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.all"]], "any() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.any"]], "append() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.append"]], "append_single() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.append_single"]], "argmax() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.argmax"]], "argmin() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.argmin"]], "arkouda.segarray": [[31, "module-arkouda.segarray"]], "attach() (arkouda.segarray.segarray class method)": [[31, "arkouda.segarray.SegArray.attach"]], "concat() (arkouda.segarray.segarray class method)": [[31, "arkouda.segarray.SegArray.concat"]], "copy() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.copy"]], "from_multi_array() (arkouda.segarray.segarray class method)": [[31, "arkouda.segarray.SegArray.from_multi_array"]], "from_parts() (arkouda.segarray.segarray class method)": [[31, "arkouda.segarray.SegArray.from_parts"]], "from_return_msg() (arkouda.segarray.segarray class method)": [[31, "arkouda.segarray.SegArray.from_return_msg"]], "gen_ranges() (in module arkouda.segarray)": [[31, "arkouda.segarray.gen_ranges"]], "get_jth() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.get_jth"]], "get_length_n() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.get_length_n"]], "get_ngrams() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.get_ngrams"]], "get_prefixes() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.get_prefixes"]], "get_suffixes() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.get_suffixes"]], "intersect() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.intersect"]], "is_registered() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.is_registered"]], "lengths (arkouda.segarray.segarray property)": [[31, "arkouda.segarray.SegArray.lengths"]], "load() (arkouda.segarray.segarray class method)": [[31, "arkouda.segarray.SegArray.load"]], "max() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.max"]], "mean() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.mean"]], "min() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.min"]], "non_empty (arkouda.segarray.segarray property)": [[31, "arkouda.segarray.SegArray.non_empty"]], "non_empty_count (arkouda.segarray.segarray property)": [[31, "arkouda.segarray.SegArray.non_empty_count"]], "nunique() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.nunique"]], "objtype (arkouda.segarray.segarray property)": [[31, "arkouda.segarray.SegArray.objtype"]], "prepend_single() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.prepend_single"]], "prod() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.prod"]], "register() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.register"]], "remove_repeats() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.remove_repeats"]], "segarray() (in module arkouda.segarray)": [[31, "arkouda.segarray.segarray"]], "set_jth() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.set_jth"]], "setdiff() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.setdiff"]], "setxor() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.setxor"]], "sum() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.sum"]], "to_hdf() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.to_hdf"]], "to_list() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.to_list"]], "to_ndarray() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.to_ndarray"]], "union() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.union"]], "unique() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.unique"]], "unregister() (arkouda.segarray.segarray method)": [[31, "arkouda.segarray.SegArray.unregister"]], "unregister_segarray_by_name() (arkouda.segarray.segarray static method)": [[31, "arkouda.segarray.SegArray.unregister_segarray_by_name"]], "valsize (arkouda.segarray.segarray attribute)": [[31, "arkouda.segarray.SegArray.valsize"]], "series (class in arkouda.series)": [[32, "arkouda.series.Series"]], "__getitem__() (arkouda.series.series method)": [[32, "arkouda.series.Series.__getitem__"]], "__len__() (arkouda.series.series method)": [[32, "arkouda.series.Series.__len__"]], "__repr__() (arkouda.series.series method)": [[32, "arkouda.series.Series.__repr__"]], "_all_aligned() (arkouda.series.series static method)": [[32, "arkouda.series.Series._all_aligned"]], "_make_aggop() (arkouda.series.series class method)": [[32, "arkouda.series.Series._make_aggop"]], "_make_binop() (arkouda.series.series class method)": [[32, "arkouda.series.Series._make_binop"]], "_make_unaryop() (arkouda.series.series class method)": [[32, "arkouda.series.Series._make_unaryop"]], "add() (arkouda.series.series method)": [[32, "arkouda.series.Series.add"]], "arkouda.series": [[32, "module-arkouda.series"]], "attach() (arkouda.series.series static method)": [[32, "arkouda.series.Series.attach"]], "concat() (arkouda.series.series static method)": [[32, "arkouda.series.Series.concat"]], "diff() (arkouda.series.series method)": [[32, "arkouda.series.Series.diff"]], "dt (arkouda.series.series attribute)": [[32, "arkouda.series.Series.dt"]], "from_return_msg() (arkouda.series.series static method)": [[32, "arkouda.series.Series.from_return_msg"]], "head() (arkouda.series.series method)": [[32, "arkouda.series.Series.head"]], "is_registered() (arkouda.series.series method)": [[32, "arkouda.series.Series.is_registered"]], "isin() (arkouda.series.series method)": [[32, "arkouda.series.Series.isin"]], "locate() (arkouda.series.series method)": [[32, "arkouda.series.Series.locate"]], "pdconcat() (arkouda.series.series static method)": [[32, "arkouda.series.Series.pdconcat"]], "register() (arkouda.series.series method)": [[32, "arkouda.series.Series.register"]], "shape (arkouda.series.series property)": [[32, "arkouda.series.Series.shape"]], "sort_index() (arkouda.series.series method)": [[32, "arkouda.series.Series.sort_index"]], "sort_values() (arkouda.series.series method)": [[32, "arkouda.series.Series.sort_values"]], "str_acc (arkouda.series.series attribute)": [[32, "arkouda.series.Series.str_acc"]], "tail() (arkouda.series.series method)": [[32, "arkouda.series.Series.tail"]], "to_dataframe() (arkouda.series.series method)": [[32, "arkouda.series.Series.to_dataframe"]], "to_pandas() (arkouda.series.series method)": [[32, "arkouda.series.Series.to_pandas"]], "topn() (arkouda.series.series method)": [[32, "arkouda.series.Series.topn"]], "value_counts() (arkouda.series.series method)": [[32, "arkouda.series.Series.value_counts"]], "sortingalgorithm (in module arkouda.sorting)": [[33, "arkouda.sorting.SortingAlgorithm"]], "argsort() (in module arkouda.sorting)": [[33, "arkouda.sorting.argsort"]], "arkouda.sorting": [[33, "module-arkouda.sorting"]], "coargsort() (in module arkouda.sorting)": [[33, "arkouda.sorting.coargsort"]], "sort() (in module arkouda.sorting)": [[33, "arkouda.sorting.sort"]], "binops (arkouda.strings.strings attribute)": [[34, "arkouda.strings.Strings.BinOps"]], "strings (class in arkouda.strings)": [[34, "arkouda.strings.Strings"]], "__add__() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.__add__"]], "__eq__() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.__eq__"]], "__getitem__() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.__getitem__"]], "__iter__() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.__iter__"]], "__len__() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.__len__"]], "__ne__() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.__ne__"]], "__radd__() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.__radd__"]], "__repr__() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.__repr__"]], "__str__() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.__str__"]], "_binop() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings._binop"]], "_comp_to_ndarray() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings._comp_to_ndarray"]], "_empty_pattern_verification() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings._empty_pattern_verification"]], "_get_grouping_keys() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings._get_grouping_keys"]], "_get_matcher() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings._get_matcher"]], "_list_component_names() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings._list_component_names"]], "arkouda.strings": [[34, "module-arkouda.strings"]], "astype() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.astype"]], "attach() (arkouda.strings.strings static method)": [[34, "arkouda.strings.Strings.attach"]], "cached_regex_patterns() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.cached_regex_patterns"]], "contains() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.contains"]], "decode() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.decode"]], "dtype (arkouda.strings.strings attribute)": [[34, "arkouda.strings.Strings.dtype"]], "encode() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.encode"]], "endswith() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.endswith"]], "entry (arkouda.strings.strings attribute)": [[34, "arkouda.strings.Strings.entry"]], "find_locations() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.find_locations"]], "findall() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.findall"]], "flatten() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.flatten"]], "from_parts() (arkouda.strings.strings static method)": [[34, "arkouda.strings.Strings.from_parts"]], "from_return_msg() (arkouda.strings.strings static method)": [[34, "arkouda.strings.Strings.from_return_msg"]], "fullmatch() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.fullmatch"]], "get_lengths() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.get_lengths"]], "get_prefixes() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.get_prefixes"]], "get_suffixes() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.get_suffixes"]], "group() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.group"]], "hash() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.hash"]], "info() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.info"]], "is_lower() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.is_lower"]], "is_registered() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.is_registered"]], "is_title() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.is_title"]], "is_upper() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.is_upper"]], "logger (arkouda.strings.strings attribute)": [[34, "arkouda.strings.Strings.logger"]], "lstick() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.lstick"]], "match() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.match"]], "nbytes (arkouda.strings.strings attribute)": [[34, "arkouda.strings.Strings.nbytes"]], "ndim (arkouda.strings.strings attribute)": [[34, "arkouda.strings.Strings.ndim"]], "objtype (arkouda.strings.strings attribute)": [[34, "arkouda.strings.Strings.objtype"]], "peel() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.peel"]], "pretty_print_info() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.pretty_print_info"]], "purge_cached_regex_patterns() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.purge_cached_regex_patterns"]], "register() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.register"]], "rpeel() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.rpeel"]], "search() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.search"]], "shape (arkouda.strings.strings attribute)": [[34, "arkouda.strings.Strings.shape"]], "size (arkouda.strings.strings attribute)": [[34, "arkouda.strings.Strings.size"]], "split() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.split"]], "startswith() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.startswith"]], "stick() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.stick"]], "strip() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.strip"]], "sub() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.sub"]], "subn() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.subn"]], "to_hdf() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.to_hdf"]], "to_list() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.to_list"]], "to_lower() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.to_lower"]], "to_ndarray() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.to_ndarray"]], "to_parquet() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.to_parquet"]], "to_title() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.to_title"]], "to_upper() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.to_upper"]], "unregister() (arkouda.strings.strings method)": [[34, "arkouda.strings.Strings.unregister"]], "unregister_strings_by_name() (arkouda.strings.strings static method)": [[34, "arkouda.strings.Strings.unregister_strings_by_name"]], "datetime (class in arkouda.timeclass)": [[35, "arkouda.timeclass.Datetime"]], "timedelta (class in arkouda.timeclass)": [[35, "arkouda.timeclass.Timedelta"]], "_abstractbasetime (class in arkouda.timeclass)": [[35, "arkouda.timeclass._AbstractBaseTime"]], "_base_unit (in module arkouda.timeclass)": [[35, "arkouda.timeclass._BASE_UNIT"]], "_timescalar (class in arkouda.timeclass)": [[35, "arkouda.timeclass._Timescalar"]], "__getitem__() (arkouda.timeclass._abstractbasetime method)": [[35, "arkouda.timeclass._AbstractBaseTime.__getitem__"]], "__repr__() (arkouda.timeclass._abstractbasetime method)": [[35, "arkouda.timeclass._AbstractBaseTime.__repr__"]], "__setitem__() (arkouda.timeclass._abstractbasetime method)": [[35, "arkouda.timeclass._AbstractBaseTime.__setitem__"]], "__str__() (arkouda.timeclass._abstractbasetime method)": [[35, "arkouda.timeclass._AbstractBaseTime.__str__"]], "_binop() (arkouda.timeclass._abstractbasetime method)": [[35, "arkouda.timeclass._AbstractBaseTime._binop"]], "_ensure_components() (arkouda.timeclass.datetime method)": [[35, "arkouda.timeclass.Datetime._ensure_components"]], "_ensure_components() (arkouda.timeclass.timedelta method)": [[35, "arkouda.timeclass.Timedelta._ensure_components"]], "_get_callback() (arkouda.timeclass.datetime class method)": [[35, "arkouda.timeclass.Datetime._get_callback"]], "_get_callback() (arkouda.timeclass.timedelta class method)": [[35, "arkouda.timeclass.Timedelta._get_callback"]], "_get_callback() (arkouda.timeclass._abstractbasetime class method)": [[35, "arkouda.timeclass._AbstractBaseTime._get_callback"]], "_get_factor() (in module arkouda.timeclass)": [[35, "arkouda.timeclass._get_factor"]], "_identity() (in module arkouda.timeclass)": [[35, "arkouda.timeclass._identity"]], "_is_datetime_scalar() (arkouda.timeclass._abstractbasetime static method)": [[35, "arkouda.timeclass._AbstractBaseTime._is_datetime_scalar"]], "_is_supported_scalar() (arkouda.timeclass.datetime static method)": [[35, "arkouda.timeclass.Datetime._is_supported_scalar"]], "_is_supported_scalar() (arkouda.timeclass.timedelta static method)": [[35, "arkouda.timeclass.Timedelta._is_supported_scalar"]], "_is_timedelta_scalar() (arkouda.timeclass._abstractbasetime static method)": [[35, "arkouda.timeclass._AbstractBaseTime._is_timedelta_scalar"]], "_r_binop() (arkouda.timeclass._abstractbasetime method)": [[35, "arkouda.timeclass._AbstractBaseTime._r_binop"]], "_scalar_callback() (arkouda.timeclass.datetime method)": [[35, "arkouda.timeclass.Datetime._scalar_callback"]], "_scalar_callback() (arkouda.timeclass.timedelta method)": [[35, "arkouda.timeclass.Timedelta._scalar_callback"]], "_scalar_callback() (arkouda.timeclass._abstractbasetime method)": [[35, "arkouda.timeclass._AbstractBaseTime._scalar_callback"]], "_unit2factor (in module arkouda.timeclass)": [[35, "arkouda.timeclass._unit2factor"]], "_unit2normunit (in module arkouda.timeclass)": [[35, "arkouda.timeclass._unit2normunit"]], "abs() (arkouda.timeclass.timedelta method)": [[35, "arkouda.timeclass.Timedelta.abs"]], "arkouda.timeclass": [[35, "module-arkouda.timeclass"]], "ceil() (arkouda.timeclass._abstractbasetime method)": [[35, "arkouda.timeclass._AbstractBaseTime.ceil"]], "components (arkouda.timeclass.timedelta property)": [[35, "arkouda.timeclass.Timedelta.components"]], "date (arkouda.timeclass.datetime property)": [[35, "arkouda.timeclass.Datetime.date"]], "date_range() (in module arkouda.timeclass)": [[35, "arkouda.timeclass.date_range"]], "day (arkouda.timeclass.datetime property)": [[35, "arkouda.timeclass.Datetime.day"]], "day_of_week (arkouda.timeclass.datetime property)": [[35, "arkouda.timeclass.Datetime.day_of_week"]], "day_of_year (arkouda.timeclass.datetime property)": [[35, "arkouda.timeclass.Datetime.day_of_year"]], "dayofweek (arkouda.timeclass.datetime property)": [[35, "arkouda.timeclass.Datetime.dayofweek"]], "dayofyear (arkouda.timeclass.datetime property)": [[35, "arkouda.timeclass.Datetime.dayofyear"]], "days (arkouda.timeclass.timedelta property)": [[35, "arkouda.timeclass.Timedelta.days"]], "floor() (arkouda.timeclass._abstractbasetime method)": [[35, "arkouda.timeclass._AbstractBaseTime.floor"]], "hour (arkouda.timeclass.datetime property)": [[35, "arkouda.timeclass.Datetime.hour"]], "is_leap_year (arkouda.timeclass.datetime property)": [[35, "arkouda.timeclass.Datetime.is_leap_year"]], "isocalendar() (arkouda.timeclass.datetime method)": [[35, "arkouda.timeclass.Datetime.isocalendar"]], "max() (arkouda.timeclass._abstractbasetime method)": [[35, "arkouda.timeclass._AbstractBaseTime.max"]], "maxk() (arkouda.timeclass._abstractbasetime method)": [[35, "arkouda.timeclass._AbstractBaseTime.maxk"]], "microsecond (arkouda.timeclass.datetime property)": [[35, "arkouda.timeclass.Datetime.microsecond"]], "microseconds (arkouda.timeclass.timedelta property)": [[35, "arkouda.timeclass.Timedelta.microseconds"]], "millisecond (arkouda.timeclass.datetime property)": [[35, "arkouda.timeclass.Datetime.millisecond"]], "min() (arkouda.timeclass._abstractbasetime method)": [[35, "arkouda.timeclass._AbstractBaseTime.min"]], "mink() (arkouda.timeclass._abstractbasetime method)": [[35, "arkouda.timeclass._AbstractBaseTime.mink"]], "minute (arkouda.timeclass.datetime property)": [[35, "arkouda.timeclass.Datetime.minute"]], "month (arkouda.timeclass.datetime property)": [[35, "arkouda.timeclass.Datetime.month"]], "nanosecond (arkouda.timeclass.datetime property)": [[35, "arkouda.timeclass.Datetime.nanosecond"]], "nanoseconds (arkouda.timeclass.timedelta property)": [[35, "arkouda.timeclass.Timedelta.nanoseconds"]], "opeq() (arkouda.timeclass._abstractbasetime method)": [[35, "arkouda.timeclass._AbstractBaseTime.opeq"]], "round() (arkouda.timeclass._abstractbasetime method)": [[35, "arkouda.timeclass._AbstractBaseTime.round"]], "second (arkouda.timeclass.datetime property)": [[35, "arkouda.timeclass.Datetime.second"]], "seconds (arkouda.timeclass.timedelta property)": [[35, "arkouda.timeclass.Timedelta.seconds"]], "std() (arkouda.timeclass.timedelta method)": [[35, "arkouda.timeclass.Timedelta.std"]], "sum() (arkouda.timeclass.datetime method)": [[35, "arkouda.timeclass.Datetime.sum"]], "sum() (arkouda.timeclass.timedelta method)": [[35, "arkouda.timeclass.Timedelta.sum"]], "supported_opeq (arkouda.timeclass.datetime attribute)": [[35, "arkouda.timeclass.Datetime.supported_opeq"]], "supported_opeq (arkouda.timeclass.timedelta attribute)": [[35, "arkouda.timeclass.Timedelta.supported_opeq"]], "supported_with_datetime (arkouda.timeclass.datetime attribute)": [[35, "arkouda.timeclass.Datetime.supported_with_datetime"]], "supported_with_datetime (arkouda.timeclass.timedelta attribute)": [[35, "arkouda.timeclass.Timedelta.supported_with_datetime"]], "supported_with_pdarray (arkouda.timeclass.datetime attribute)": [[35, "arkouda.timeclass.Datetime.supported_with_pdarray"]], "supported_with_pdarray (arkouda.timeclass.timedelta attribute)": [[35, "arkouda.timeclass.Timedelta.supported_with_pdarray"]], "supported_with_r_datetime (arkouda.timeclass.datetime attribute)": [[35, "arkouda.timeclass.Datetime.supported_with_r_datetime"]], "supported_with_r_datetime (arkouda.timeclass.timedelta attribute)": [[35, "arkouda.timeclass.Timedelta.supported_with_r_datetime"]], "supported_with_r_pdarray (arkouda.timeclass.datetime attribute)": [[35, "arkouda.timeclass.Datetime.supported_with_r_pdarray"]], "supported_with_r_pdarray (arkouda.timeclass.timedelta attribute)": [[35, "arkouda.timeclass.Timedelta.supported_with_r_pdarray"]], "supported_with_r_timedelta (arkouda.timeclass.datetime attribute)": [[35, "arkouda.timeclass.Datetime.supported_with_r_timedelta"]], "supported_with_r_timedelta (arkouda.timeclass.timedelta attribute)": [[35, "arkouda.timeclass.Timedelta.supported_with_r_timedelta"]], "supported_with_timedelta (arkouda.timeclass.datetime attribute)": [[35, "arkouda.timeclass.Datetime.supported_with_timedelta"]], "supported_with_timedelta (arkouda.timeclass.timedelta attribute)": [[35, "arkouda.timeclass.Timedelta.supported_with_timedelta"]], "timedelta_range() (in module arkouda.timeclass)": [[35, "arkouda.timeclass.timedelta_range"]], "to_list() (arkouda.timeclass._abstractbasetime method)": [[35, "arkouda.timeclass._AbstractBaseTime.to_list"]], "to_ndarray() (arkouda.timeclass._abstractbasetime method)": [[35, "arkouda.timeclass._AbstractBaseTime.to_ndarray"]], "to_pandas() (arkouda.timeclass.datetime method)": [[35, "arkouda.timeclass.Datetime.to_pandas"]], "to_pandas() (arkouda.timeclass.timedelta method)": [[35, "arkouda.timeclass.Timedelta.to_pandas"]], "total_seconds() (arkouda.timeclass.timedelta method)": [[35, "arkouda.timeclass.Timedelta.total_seconds"]], "week (arkouda.timeclass.datetime property)": [[35, "arkouda.timeclass.Datetime.week"]], "weekday (arkouda.timeclass.datetime property)": [[35, "arkouda.timeclass.Datetime.weekday"]], "weekofyear (arkouda.timeclass.datetime property)": [[35, "arkouda.timeclass.Datetime.weekofyear"]], "year (arkouda.timeclass.datetime property)": [[35, "arkouda.timeclass.Datetime.year"]], "arkouda.util": [[36, "module-arkouda.util"]], "attach() (in module arkouda.util)": [[36, "arkouda.util.attach"]], "attach_all() (in module arkouda.util)": [[36, "arkouda.util.attach_all"]], "concatenate() (in module arkouda.util)": [[36, "arkouda.util.concatenate"]], "convert_if_categorical() (in module arkouda.util)": [[36, "arkouda.util.convert_if_categorical"]], "enrich_inplace() (in module arkouda.util)": [[36, "arkouda.util.enrich_inplace"]], "expand() (in module arkouda.util)": [[36, "arkouda.util.expand"]], "generic_concat() (in module arkouda.util)": [[36, "arkouda.util.generic_concat"]], "get_callback() (in module arkouda.util)": [[36, "arkouda.util.get_callback"]], "identity() (in module arkouda.util)": [[36, "arkouda.util.identity"]], "invert_permutation() (in module arkouda.util)": [[36, "arkouda.util.invert_permutation"]], "most_common() (in module arkouda.util)": [[36, "arkouda.util.most_common"]], "register() (in module arkouda.util)": [[36, "arkouda.util.register"]], "register_all() (in module arkouda.util)": [[36, "arkouda.util.register_all"]], "report_mem() (in module arkouda.util)": [[36, "arkouda.util.report_mem"]], "unregister_all() (in module arkouda.util)": [[36, "arkouda.util.unregister_all"]], "unregister_by_name() (in module arkouda.util)": [[36, "arkouda.util.unregister_by_name"]], "export() (in module arkouda)": [[51, "arkouda.export"]], "get_datasets() (in module arkouda)": [[51, "arkouda.get_datasets"]], "import_data() (in module arkouda)": [[51, "arkouda.import_data"]], "load() (in module arkouda)": [[51, "arkouda.load"]], "load_all() (in module arkouda)": [[51, "arkouda.load_all"]], "read() (in module arkouda)": [[51, "arkouda.read"]], "to_ndarray() (in module arkouda.strings)": [[51, "arkouda.Strings.to_ndarray"], [67, "arkouda.Strings.to_ndarray"]], "to_ndarray() (in module arkouda.pdarray)": [[51, "arkouda.pdarray.to_ndarray"], [62, "arkouda.pdarray.to_ndarray"]], "argsort() (in module arkouda.index)": [[52, "arkouda.Index.argsort"]], "argsort() (in module arkouda.multiindex)": [[52, "arkouda.MultiIndex.argsort"]], "concat() (in module arkouda.index)": [[52, "arkouda.Index.concat"]], "concat() (in module arkouda.multiindex)": [[52, "arkouda.MultiIndex.concat"]], "lookup() (in module arkouda.index)": [[52, "arkouda.Index.lookup"]], "lookup() (in module arkouda.multiindex)": [[52, "arkouda.MultiIndex.lookup"]], "set_dtype() (in module arkouda.index)": [[52, "arkouda.Index.set_dtype"]], "set_dtype() (in module arkouda.multiindex)": [[52, "arkouda.MultiIndex.set_dtype"]], "to_ndarray() (in module arkouda.arrayview)": [[55, "arkouda.ArrayView.to_ndarray"]], "categorical (class in arkouda)": [[56, "arkouda.Categorical"]], "categories (arkouda.categorical attribute)": [[56, "arkouda.Categorical.categories"]], "codes (arkouda.categorical attribute)": [[56, "arkouda.Categorical.codes"]], "contains() (arkouda.categorical method)": [[56, "arkouda.Categorical.contains"]], "endswith() (arkouda.categorical method)": [[56, "arkouda.Categorical.endswith"]], "from_codes() (arkouda.categorical class method)": [[56, "arkouda.Categorical.from_codes"]], "ndim (arkouda.categorical attribute)": [[56, "arkouda.Categorical.ndim"]], "nlevels (arkouda.categorical attribute)": [[56, "arkouda.Categorical.nlevels"]], "permutation (arkouda.categorical attribute)": [[56, "arkouda.Categorical.permutation"]], "segments (arkouda.categorical attribute)": [[56, "arkouda.Categorical.segments"]], "shape (arkouda.categorical attribute)": [[56, "arkouda.Categorical.shape"]], "size (arkouda.categorical attribute)": [[56, "arkouda.Categorical.size"]], "startswith() (arkouda.categorical method)": [[56, "arkouda.Categorical.startswith"]], "to_ndarray() (in module arkouda.categorical)": [[56, "arkouda.Categorical.to_ndarray"]], "apply_permutation() (in module arkouda.dataframe)": [[58, "arkouda.DataFrame.apply_permutation"]], "argsort() (in module arkouda.dataframe)": [[58, "arkouda.DataFrame.argsort"]], "coargsort() (in module arkouda.dataframe)": [[58, "arkouda.DataFrame.coargsort"]], "concat() (in module arkouda.dataframe)": [[58, "arkouda.DataFrame.concat"]], "copy() (in module arkouda.dataframe)": [[58, "arkouda.DataFrame.copy"]], "drop() (in module arkouda.dataframe)": [[58, "arkouda.DataFrame.drop"]], "drop_duplicates() (in module arkouda.dataframe)": [[58, "arkouda.DataFrame.drop_duplicates"]], "groupby() (in module arkouda.dataframe)": [[58, "arkouda.DataFrame.groupby"]], "head() (in module arkouda.dataframe)": [[58, "arkouda.DataFrame.head"]], "rename() (in module arkouda.dataframe)": [[58, "arkouda.DataFrame.rename"]], "reset_index() (in module arkouda.dataframe)": [[58, "arkouda.DataFrame.reset_index"]], "sort_values() (in module arkouda.dataframe)": [[58, "arkouda.DataFrame.sort_values"]], "tail() (in module arkouda.dataframe)": [[58, "arkouda.DataFrame.tail"]], "to_pandas() (in module arkouda.dataframe)": [[58, "arkouda.DataFrame.to_pandas"]], "and() (arkouda.groupby method)": [[59, "arkouda.GroupBy.AND"]], "groupby (class in arkouda)": [[59, "arkouda.GroupBy"]], "or() (arkouda.groupby method)": [[59, "arkouda.GroupBy.OR"]], "xor() (arkouda.groupby method)": [[59, "arkouda.GroupBy.XOR"]], "aggregate() (arkouda.groupby method)": [[59, "arkouda.GroupBy.aggregate"]], "all() (arkouda.groupby method)": [[59, "arkouda.GroupBy.all"]], "any() (arkouda.groupby method)": [[59, "arkouda.GroupBy.any"]], "argmax() (arkouda.groupby method)": [[59, "arkouda.GroupBy.argmax"]], "argmin() (arkouda.groupby method)": [[59, "arkouda.GroupBy.argmin"]], "attach() (arkouda.groupby static method)": [[59, "arkouda.GroupBy.attach"]], "broadcast() (arkouda.groupby method)": [[59, "arkouda.GroupBy.broadcast"]], "build_from_components() (arkouda.groupby static method)": [[59, "arkouda.GroupBy.build_from_components"]], "count() (arkouda.groupby method)": [[59, "arkouda.GroupBy.count"]], "first() (arkouda.groupby method)": [[59, "arkouda.GroupBy.first"]], "is_registered() (arkouda.groupby method)": [[59, "arkouda.GroupBy.is_registered"]], "logger (arkouda.groupby attribute)": [[59, "arkouda.GroupBy.logger"]], "max() (arkouda.groupby method)": [[59, "arkouda.GroupBy.max"]], "mean() (arkouda.groupby method)": [[59, "arkouda.GroupBy.mean"]], "median() (arkouda.groupby method)": [[59, "arkouda.GroupBy.median"]], "min() (arkouda.groupby method)": [[59, "arkouda.GroupBy.min"]], "mode() (arkouda.groupby method)": [[59, "arkouda.GroupBy.mode"]], "most_common() (arkouda.groupby method)": [[59, "arkouda.GroupBy.most_common"]], "ngroups (arkouda.groupby attribute)": [[59, "arkouda.GroupBy.ngroups"]], "nkeys (arkouda.groupby attribute)": [[59, "arkouda.GroupBy.nkeys"]], "nunique() (arkouda.groupby method)": [[59, "arkouda.GroupBy.nunique"]], "permutation (arkouda.groupby attribute)": [[59, "arkouda.GroupBy.permutation"]], "prod() (arkouda.groupby method)": [[59, "arkouda.GroupBy.prod"]], "register() (arkouda.groupby method)": [[59, "arkouda.GroupBy.register"]], "segments (arkouda.groupby attribute)": [[59, "arkouda.GroupBy.segments"]], "size (arkouda.groupby attribute)": [[59, "arkouda.GroupBy.size"]], "size() (arkouda.groupby method)": [[59, "id0"]], "std() (arkouda.groupby method)": [[59, "arkouda.GroupBy.std"]], "sum() (arkouda.groupby method)": [[59, "arkouda.GroupBy.sum"]], "unique() (arkouda.groupby method)": [[59, "arkouda.GroupBy.unique"]], "unique_keys (arkouda.groupby attribute)": [[59, "arkouda.GroupBy.unique_keys"]], "unregister() (arkouda.groupby method)": [[59, "arkouda.GroupBy.unregister"]], "unregister_groupby_by_name() (arkouda.groupby static method)": [[59, "arkouda.GroupBy.unregister_groupby_by_name"]], "var() (arkouda.groupby method)": [[59, "arkouda.GroupBy.var"]], "append() (in module arkouda.segarray)": [[63, "arkouda.SegArray.append"]], "append_single() (in module arkouda.segarray)": [[63, "arkouda.SegArray.append_single"]], "get_jth() (in module arkouda.segarray)": [[63, "arkouda.SegArray.get_jth"]], "get_length_n() (in module arkouda.segarray)": [[63, "arkouda.SegArray.get_length_n"]], "get_ngrams() (in module arkouda.segarray)": [[63, "arkouda.SegArray.get_ngrams"]], "get_prefixes() (in module arkouda.segarray)": [[63, "arkouda.SegArray.get_prefixes"]], "get_suffixes() (in module arkouda.segarray)": [[63, "arkouda.SegArray.get_suffixes"]], "intersect() (in module arkouda.segarray)": [[63, "arkouda.SegArray.intersect"]], "prepend_single() (in module arkouda.segarray)": [[63, "arkouda.SegArray.prepend_single"]], "remove_repeats() (in module arkouda.segarray)": [[63, "arkouda.SegArray.remove_repeats"]], "set_jth() (in module arkouda.segarray)": [[63, "arkouda.SegArray.set_jth"]], "setdiff() (in module arkouda.segarray)": [[63, "arkouda.SegArray.setdiff"]], "setxor() (in module arkouda.segarray)": [[63, "arkouda.SegArray.setxor"]], "to_ndarray() (in module arkouda.segarray)": [[63, "arkouda.SegArray.to_ndarray"]], "union() (in module arkouda.segarray)": [[63, "arkouda.SegArray.union"]], "head() (in module arkouda.series)": [[64, "arkouda.Series.head"]], "locate() (in module arkouda.series)": [[64, "arkouda.Series.locate"], [64, "id0"]], "pdconcat() (in module arkouda.series)": [[64, "arkouda.Series.pdconcat"]], "sort_index() (in module arkouda.series)": [[64, "arkouda.Series.sort_index"]], "sort_values() (in module arkouda.series)": [[64, "arkouda.Series.sort_values"]], "tail() (in module arkouda.series)": [[64, "arkouda.Series.tail"]], "to_pandas() (in module arkouda.series)": [[64, "arkouda.Series.to_pandas"]], "topn() (in module arkouda.series)": [[64, "arkouda.Series.topn"]], "value_counts() (in module arkouda.series)": [[64, "arkouda.Series.value_counts"]], "unique() (in module arkouda)": [[65, "arkouda.unique"]], "connect() (in module arkouda)": [[66, "arkouda.connect"]]}})