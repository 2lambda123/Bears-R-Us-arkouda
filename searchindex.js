Search.setIndex({"docnames": ["CONTRIBUTING_LINK", "ENVIRONMENT", "autoapi/arkouda/_version/index", "autoapi/arkouda/accessor/index", "autoapi/arkouda/alignment/index", "autoapi/arkouda/array_view/index", "autoapi/arkouda/categorical/index", "autoapi/arkouda/client/index", "autoapi/arkouda/client_dtypes/index", "autoapi/arkouda/dataframe/index", "autoapi/arkouda/decorators/index", "autoapi/arkouda/dtypes/index", "autoapi/arkouda/groupbyclass/index", "autoapi/arkouda/index", "autoapi/arkouda/index/index", "autoapi/arkouda/infoclass/index", "autoapi/arkouda/io/index", "autoapi/arkouda/io_util/index", "autoapi/arkouda/join/index", "autoapi/arkouda/logger/index", "autoapi/arkouda/match/index", "autoapi/arkouda/matcher/index", "autoapi/arkouda/message/index", "autoapi/arkouda/numeric/index", "autoapi/arkouda/pdarrayclass/index", "autoapi/arkouda/pdarraycreation/index", "autoapi/arkouda/pdarraysetops/index", "autoapi/arkouda/plotting/index", "autoapi/arkouda/row/index", "autoapi/arkouda/security/index", "autoapi/arkouda/segarray/index", "autoapi/arkouda/series/index", "autoapi/arkouda/sorting/index", "autoapi/arkouda/strings/index", "autoapi/arkouda/timeclass/index", "autoapi/arkouda/util/index", "autoapi/index", "developer/GASNET", "developer/dev_menu", "examples", "file_io/HDF5", "file_io/IMPORT_EXPORT", "file_io/PARQUET", "file_io/io_menu", "index", "quickstart", "server/index", "setup/BUILD", "setup/LINUX_INSTALL", "setup/MAC_INSTALL", "setup/MODULAR", "setup/REQUIREMENTS", "setup/WINDOWS_INSTALL", "setup/install_menu", "setup/testing", "usage", "usage/IO", "usage/Index", "usage/argsort", "usage/arithmetic", "usage/arrayview", "usage/categorical", "usage/creation", "usage/dataframe", "usage/groupby", "usage/histogram", "usage/indexing", "usage/pdarray", "usage/segarray", "usage/series", "usage/setops", "usage/startup", "usage/strings"], "filenames": ["CONTRIBUTING_LINK.md", "ENVIRONMENT.md", "autoapi/arkouda/_version/index.rst", "autoapi/arkouda/accessor/index.rst", "autoapi/arkouda/alignment/index.rst", "autoapi/arkouda/array_view/index.rst", "autoapi/arkouda/categorical/index.rst", "autoapi/arkouda/client/index.rst", "autoapi/arkouda/client_dtypes/index.rst", "autoapi/arkouda/dataframe/index.rst", "autoapi/arkouda/decorators/index.rst", "autoapi/arkouda/dtypes/index.rst", "autoapi/arkouda/groupbyclass/index.rst", "autoapi/arkouda/index.rst", "autoapi/arkouda/index/index.rst", "autoapi/arkouda/infoclass/index.rst", "autoapi/arkouda/io/index.rst", "autoapi/arkouda/io_util/index.rst", "autoapi/arkouda/join/index.rst", "autoapi/arkouda/logger/index.rst", "autoapi/arkouda/match/index.rst", "autoapi/arkouda/matcher/index.rst", "autoapi/arkouda/message/index.rst", "autoapi/arkouda/numeric/index.rst", "autoapi/arkouda/pdarrayclass/index.rst", "autoapi/arkouda/pdarraycreation/index.rst", "autoapi/arkouda/pdarraysetops/index.rst", "autoapi/arkouda/plotting/index.rst", "autoapi/arkouda/row/index.rst", "autoapi/arkouda/security/index.rst", "autoapi/arkouda/segarray/index.rst", "autoapi/arkouda/series/index.rst", "autoapi/arkouda/sorting/index.rst", "autoapi/arkouda/strings/index.rst", "autoapi/arkouda/timeclass/index.rst", "autoapi/arkouda/util/index.rst", "autoapi/index.rst", "developer/GASNET.md", "developer/dev_menu.rst", "examples.rst", "file_io/HDF5.md", "file_io/IMPORT_EXPORT.md", "file_io/PARQUET.md", "file_io/io_menu.rst", "index.rst", "quickstart.rst", "server/index.rst", "setup/BUILD.md", "setup/LINUX_INSTALL.md", "setup/MAC_INSTALL.md", "setup/MODULAR.md", "setup/REQUIREMENTS.md", "setup/WINDOWS_INSTALL.md", "setup/install_menu.rst", "setup/testing.rst", "usage.rst", "usage/IO.rst", "usage/Index.rst", "usage/argsort.rst", "usage/arithmetic.rst", "usage/arrayview.rst", "usage/categorical.rst", "usage/creation.rst", "usage/dataframe.rst", "usage/groupby.rst", "usage/histogram.rst", "usage/indexing.rst", "usage/pdarray.rst", "usage/segarray.rst", "usage/series.rst", "usage/setops.rst", "usage/startup.rst", "usage/strings.rst"], "titles": ["Contributing", "Environment Variables", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda._version</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.accessor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.alignment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_view</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.categorical</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.client</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.client_dtypes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.dataframe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.decorators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.dtypes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.groupbyclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.index</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.infoclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.io</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.io_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.join</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.match</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.message</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.numeric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.pdarrayclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.pdarraycreation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.pdarraysetops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.plotting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.row</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.security</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.segarray</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.series</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.sorting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.strings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.timeclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.util</span></code>", "API Reference", "GASNet Development", "Developer Documentation", "Examples", "HDF5", "Import/Export", "Parquet", "File I/O", "Arkouda Documentation", "Quickstart", "Chapel API Reference", "Building the Server", "Linux", "MacOS", "Modular Server Builds", "Requirements", "Windows (WSL2)", "Installation", "Performance Testing", "Usage Guide", "Data I/O", "Indexs in Arkouda", "Sorting", "Arithmetic and Numeric Operations", "ArrayView in Arkouda", "Categoricals", "Creating Arrays", "DataFrames in Arkouda", "GroupBy", "Summarizing Data", "Indexing and Assignment", "The <code class=\"docutils literal notranslate\"><span class=\"pre\">pdarray</span></code> class", "SegArrays in Arkouda", "Series in Arkouda", "Array Set Operations", "Startup", "Strings in Arkouda"], "terms": {"i": [0, 1, 2, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 37, 39, 40, 41, 42, 45, 47, 48, 49, 50, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "an": [0, 1, 2, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 45, 47, 52, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72], "open": [0, 4, 13, 16, 17, 34, 52], "sourc": [0, 1, 2, 37, 40, 45, 47, 48], "project": [0, 2, 47], "we": [0, 1, 2, 9, 13, 16, 24, 30, 33, 35, 37, 39, 42, 47, 51, 52, 65, 67], "love": 0, "see": [0, 1, 4, 12, 13, 23, 24, 27, 31, 33, 34, 45, 47, 56, 59, 61, 64, 65, 67, 68, 69, 70, 72], "new": [0, 6, 9, 12, 13, 14, 16, 17, 19, 20, 21, 22, 23, 24, 27, 30, 31, 33, 51, 63, 64, 67, 68, 69, 72], "contributor": 0, "welcom": 0, "via": [0, 1, 6, 9, 12, 13, 24, 25, 33, 47, 48, 49, 56, 61, 64, 66, 67, 72], "most": [0, 1, 8, 12, 13, 21, 31, 33, 39, 40, 45, 47, 52, 56, 62, 64, 67, 69, 72], "fall": 0, "under": [0, 3, 5, 6, 9, 12, 13, 16, 24, 25, 30, 33, 34, 56, 60, 61, 64, 67, 72], "broad": 0, "categori": [0, 6, 13, 32, 55, 58, 61], "If": [0, 1, 4, 5, 6, 7, 8, 9, 12, 13, 14, 16, 17, 20, 21, 23, 24, 25, 26, 30, 31, 33, 34, 35, 37, 40, 42, 45, 47, 48, 49, 50, 52, 53, 56, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 72], "your": [0, 1, 9, 13, 37, 45, 47, 49, 50, 51, 52, 53, 63, 71, 72], "doesn": 0, "t": [0, 2, 6, 8, 13, 24, 33, 34, 52, 54, 72], "fit": [0, 56], "either": [0, 6, 9, 12, 13, 15, 16, 23, 24, 25, 26, 30, 31, 50, 52, 56, 68, 69, 70], "pleas": [0, 6, 9, 12, 13, 16, 24, 33, 34, 37, 39, 40, 42, 43, 47, 49, 51, 61, 63, 64], "add": [0, 1, 5, 9, 13, 16, 30, 31, 47, 48, 49, 50, 52, 63], "anywai": [0, 2, 62], "provid": [0, 6, 9, 12, 13, 16, 22, 24, 30, 33, 39, 40, 42, 47, 48, 49, 51, 56, 59, 63, 64, 68], "much": [0, 4, 5, 6, 13, 24, 33, 34, 39, 40, 56, 60, 61, 67, 72], "detail": [0, 6, 13, 24, 30, 47, 48, 49, 51, 65, 71, 72], "possibl": [0, 9, 13, 16, 23, 30, 33, 34, 39, 47, 52, 56, 68, 72], "It": [0, 8, 9, 13, 29, 35, 37, 39, 40, 42, 45, 47, 48, 49, 52, 63, 64, 68], "alwai": [0, 2, 6, 12, 13, 16, 24, 34, 47, 56, 59, 61, 63, 64, 65, 67, 72], "good": 0, "idea": [0, 56], "current": [0, 2, 5, 6, 7, 9, 13, 14, 16, 23, 24, 25, 29, 30, 33, 40, 41, 42, 47, 49, 53, 56, 57, 59, 61, 62, 63, 65, 67, 68, 71, 72], "list": [0, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 22, 24, 25, 26, 30, 31, 33, 34, 37, 39, 45, 47, 49, 50, 53, 56, 57, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72], "make": [0, 1, 6, 8, 9, 13, 23, 34, 37, 45, 47, 48, 49, 50, 52, 61, 63], "sure": [0, 49, 52], "alreadi": [0, 1, 2, 6, 9, 12, 13, 14, 16, 24, 30, 33, 40, 42, 61, 64, 70], "present": [0, 4, 6, 8, 9, 13, 16, 23, 26, 30, 39, 56, 65, 70], "us": [0, 1, 4, 6, 7, 8, 9, 12, 13, 14, 16, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 40, 41, 42, 48, 49, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72], "github": [0, 47, 48, 53], "markdown": 0, "especi": [0, 6, 9, 13, 61], "block": [0, 6, 13, 26, 33, 39, 62], "veri": [0, 9, 13, 39, 62, 63], "appreci": 0, "when": [0, 1, 4, 6, 8, 9, 12, 13, 14, 16, 23, 24, 26, 30, 33, 39, 40, 42, 47, 49, 50, 51, 52, 56, 59, 61, 63, 64, 67, 68, 70], "includ": [0, 1, 2, 4, 6, 9, 13, 16, 23, 24, 34, 40, 45, 47, 48, 49, 50, 56, 59, 67, 68], "follow": [0, 1, 4, 7, 13, 23, 37, 45, 47, 48, 49, 50, 51, 52, 53, 59, 61, 64, 67, 68, 70, 71, 72], "inform": [0, 1, 2, 6, 7, 12, 13, 15, 24, 33, 39, 40, 42, 43, 45, 47, 49, 61, 68, 70, 72], "summari": [0, 9, 13], "problem": [0, 54], "what": [0, 11, 13, 30, 48, 50, 71], "behavior": [0, 9, 13, 24, 25, 59, 60, 62, 63, 72], "did": [0, 7], "you": [0, 1, 2, 6, 9, 12, 13, 14, 16, 24, 33, 37, 38, 39, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 63, 64, 66], "observ": [0, 13, 24, 59], "encount": [0, 13, 16], "expect": [0, 5, 12, 13, 24, 33, 34, 40, 56, 60, 64, 67], "thi": [0, 1, 2, 5, 6, 7, 8, 9, 12, 13, 14, 16, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 45, 47, 49, 50, 52, 53, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72], "known": [0, 13, 23, 35], "work": [0, 6, 9, 13, 16, 24, 26, 28, 33, 39, 40, 42, 47, 49, 50, 56, 61, 63, 66, 70, 72], "around": [0, 8, 13], "step": [0, 12, 37, 47, 48, 50, 53, 70, 71], "reproduc": 0, "simplifi": 0, "program": [0, 6, 9, 12, 13, 24, 33, 45, 64, 71], "demonstr": 0, "configur": [0, 1, 2, 13, 30, 39, 45, 49, 52, 57, 63, 69], "": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 23, 24, 29, 30, 31, 33, 34, 35, 39, 47, 52, 53, 54, 56, 59, 60, 61, 63, 64, 65, 67, 68, 69, 71, 72], "output": [0, 1, 6, 8, 12, 13, 14, 16, 22, 23, 24, 30, 33, 34, 39, 42, 45, 56, 59, 65, 67, 70, 71], "ak": [0, 1, 4, 5, 6, 8, 9, 12, 13, 14, 15, 16, 20, 23, 24, 25, 26, 27, 30, 32, 33, 34, 35, 39, 45, 47, 50, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72], "get_config": [0, 2, 7], "like": [0, 2, 3, 4, 8, 9, 12, 13, 24, 34, 37, 39, 41, 45, 50, 56, 57, 63, 64, 66, 69, 71, 72], "arkoudavers": 0, "version": [0, 2, 6, 9, 13, 28, 31, 35, 40, 45, 47, 48, 49, 51, 52], "server": [0, 1, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 20, 22, 24, 25, 29, 30, 31, 33, 34, 35, 49, 52, 54, 55, 59, 60, 61, 62, 63, 64, 65, 67, 68, 72], "wa": [0, 2, 6, 9, 12, 13, 16, 23, 24, 30, 31, 33, 40, 41, 47, 49, 56, 64, 67, 68], "built": [0, 5, 6, 13, 24, 33, 34, 37, 45, 47, 49, 50, 56, 60, 61, 67, 72], "Be": 0, "specif": [0, 9, 13, 16, 40, 41, 48, 50, 55, 56, 63], "exampl": [0, 4, 5, 6, 9, 12, 13, 16, 20, 23, 24, 25, 26, 27, 30, 32, 33, 34, 40, 45, 47, 49, 50, 52, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 72], "appropri": [0, 2, 41, 45, 47, 49, 51, 56], "base": [0, 1, 2, 3, 4, 5, 6, 8, 9, 13, 14, 16, 22, 23, 24, 28, 32, 34, 35, 47, 49, 53, 55, 56, 57, 58, 59, 60, 61, 63, 67, 69, 72], "anoth": [0, 9, 12, 13, 16, 23, 33, 40, 45, 49, 52, 56, 63, 64, 66, 67, 68, 72], "librari": [0, 1, 52, 72], "e": [0, 1, 3, 4, 8, 12, 13, 23, 24, 25, 30, 33, 34, 48, 49, 51, 56, 59, 61, 62, 64, 68, 71, 72], "numpi": [0, 5, 6, 8, 9, 11, 12, 13, 18, 23, 24, 25, 30, 33, 34, 39, 51, 54, 56, 59, 60, 61, 62, 63, 65, 66, 67, 68, 70, 72], "panda": [0, 9, 12, 13, 14, 16, 25, 31, 34, 41, 43, 51, 56, 57, 61, 63, 64], "scipi": 0, "link": [0, 1, 13, 34, 47], "support": [0, 2, 6, 8, 9, 11, 12, 13, 14, 16, 17, 23, 24, 25, 26, 29, 30, 33, 34, 35, 39, 41, 45, 47, 48, 49, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72], "document": [0, 1, 36, 39, 43, 49], "refer": [0, 12, 39, 47, 49, 64], "don": [0, 2, 6, 8, 13, 24, 33, 34, 52], "have": [0, 1, 2, 4, 6, 9, 12, 13, 14, 16, 23, 24, 25, 26, 27, 30, 31, 33, 34, 39, 40, 42, 47, 48, 49, 50, 51, 56, 59, 61, 62, 63, 64, 67, 68, 69], "anyth": [0, 13, 24], "mind": [0, 39, 52], "check": [0, 1, 2, 4, 6, 9, 12, 13, 30, 31, 33, 54, 61, 70, 71, 72], "out": [0, 2, 7, 9, 13, 23, 30, 40, 42, 47, 50, 65, 66, 68], "our": [0, 2, 13, 24, 39, 40, 45, 47, 52, 53, 56], "outstand": 0, "filter": [0, 9, 13, 56], "label": [0, 6, 9, 12, 13, 14, 27, 31, 61, 63, 64, 69], "first": [0, 4, 9, 12, 13, 16, 17, 23, 24, 25, 31, 33, 37, 39, 40, 45, 47, 48, 49, 50, 55, 56, 59, 62, 63, 64, 65, 69, 72], "identifi": [0, 2, 4, 6, 13, 24, 35, 67], "befor": [0, 13, 34, 47, 56], "start": [0, 4, 6, 12, 13, 14, 20, 24, 25, 30, 32, 33, 34, 40, 55, 58, 61, 62, 64, 66, 68, 72], "onc": [0, 9, 13, 16, 24, 30, 33, 37, 39, 42, 47, 49, 52], "find": [0, 4, 6, 9, 12, 13, 21, 24, 26, 29, 31, 33, 35, 38, 59, 64, 65, 70, 72], "creat": [0, 2, 6, 8, 9, 12, 13, 14, 16, 17, 21, 22, 24, 25, 30, 31, 33, 34, 36, 40, 42, 45, 48, 49, 50, 51, 52, 55, 56, 60, 61, 63, 64, 65, 67], "intend": [0, 8, 13, 23, 45, 57, 63, 69], "leav": [0, 13, 23, 65], "comment": [0, 50], "indic": [0, 4, 5, 6, 7, 8, 9, 12, 13, 14, 16, 18, 20, 23, 24, 30, 31, 32, 33, 35, 39, 40, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 72], "mention": 0, "bear": 0, "r": [0, 9, 13, 39, 54], "u": [0, 8, 13, 25, 34, 56], "dev": [0, 48, 49, 51], "awar": 0, "assign": [0, 6, 12, 22, 40, 55, 61, 64, 68, 72], "avoid": 0, "anyon": 0, "duplic": [0, 9, 13, 63], "need": [0, 2, 9, 13, 16, 30, 31, 33, 47, 48, 49, 50, 52, 56, 63, 69], "assist": [0, 50], "want": [0, 1, 9, 13, 45, 51, 63], "discuss": 0, "design": [0, 56], "someon": 0, "tag": [0, 2], "reach": 0, "git": [0, 2, 48], "fork": [0, 47, 53], "workflow": [0, 13, 16, 50, 56], "recommend": [0, 13, 23, 37, 42, 48, 51, 52, 53, 63, 68], "simpl": [0, 39, 50, 65], "branch": [0, 47], "own": [0, 1, 13, 34, 68, 72], "standard": [0, 6, 12, 13, 24, 25, 34, 37, 59, 64, 65], "laid": 0, "pep8": 0, "continu": 0, "integr": [0, 12, 13, 24, 25, 56, 62, 64], "ha": [0, 6, 9, 12, 13, 16, 23, 24, 25, 26, 30, 31, 33, 34, 37, 50, 52, 56, 59, 61, 62, 63, 64, 66, 67, 68, 69], "linter": 0, "flake8": [0, 51], "verifi": [0, 1, 9, 13, 41, 56, 63], "all": [0, 4, 6, 7, 9, 12, 13, 14, 15, 16, 19, 20, 21, 23, 24, 25, 26, 30, 31, 33, 34, 35, 40, 42, 45, 48, 49, 50, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72], "meet": 0, "requir": [0, 4, 6, 7, 12, 13, 14, 16, 22, 24, 25, 37, 40, 41, 42, 45, 48, 49, 50, 56, 62, 63, 64], "isort": 0, "black": 0, "typic": [0, 8, 13, 61], "order": [0, 5, 6, 8, 9, 12, 13, 23, 24, 25, 26, 30, 31, 32, 33, 35, 37, 40, 42, 47, 55, 58, 60, 61, 62, 63, 64, 65, 66, 68, 69, 72], "ensur": [0, 9, 13, 23, 40, 47, 49, 63, 67], "consist": [0, 9, 13, 23, 39, 59, 63], "util": [0, 9, 13, 16, 36, 47, 48, 49], "line": [0, 13, 17, 45, 47, 49, 50, 60, 71], "length": [0, 4, 6, 12, 13, 16, 20, 25, 26, 29, 30, 31, 33, 40, 54, 59, 62, 64, 68, 69, 70, 72], "105": 0, "paramet": [0, 2, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 49, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72], "example_featur": 0, "py": [0, 1, 2, 47, 50, 51, 54], "fix": [0, 13, 23, 34, 52, 72], "reformat": [0, 56], "done": [0, 9, 13, 30, 47, 50, 63], "1": [0, 1, 2, 4, 5, 6, 9, 12, 13, 16, 20, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 36, 37, 39, 40, 43, 45, 47, 48, 49, 50, 51, 52, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72], "file": [0, 1, 2, 5, 6, 9, 13, 14, 16, 17, 24, 29, 30, 33, 37, 41, 42, 45, 47, 48, 49, 51, 52, 72], "For": [0, 3, 4, 12, 13, 16, 20, 25, 32, 33, 34, 39, 43, 45, 47, 48, 49, 50, 53, 56, 58, 62, 64, 65, 66, 67, 68, 70, 72], "user": [0, 1, 5, 6, 8, 9, 12, 13, 14, 16, 22, 23, 24, 25, 27, 29, 30, 31, 33, 34, 35, 39, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 56, 60, 61, 64, 67, 72], "pycharm": 0, "nice": [0, 48, 49], "interoper": 0, "tool": [0, 48, 49], "style": [0, 2, 6, 9, 12, 13, 24, 33, 63, 64, 67], "doc": [0, 47, 48, 60], "string": [0, 1, 2, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 34, 35, 36, 50, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 68, 69, 70], "look": [0, 1, 2, 39, 50, 56, 71], "similar": [0, 13, 16, 33, 34, 39, 56, 67, 68, 72], "surround": 0, "function": [0, 1, 6, 22, 31, 33, 39, 41, 42, 43, 45, 50, 55, 56, 57, 60, 61, 63, 64, 65, 67, 68, 69, 70, 72], "space": [0, 1, 4, 13, 22, 23, 25, 34, 47, 50, 62, 65, 72], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 19, 20, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 37, 39, 40, 41, 45, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72], "ci": 0, "fail": [0, 9, 13, 16, 23, 56, 63, 67], "tab": [0, 47], "ar": [0, 1, 4, 6, 8, 9, 12, 13, 14, 16, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 37, 39, 40, 42, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72], "lowercamelcas": 0, "variabl": [0, 12, 13, 16, 24, 29, 30, 33, 37, 48, 49, 50, 59, 64, 68, 72], "name": [0, 1, 2, 3, 4, 5, 6, 8, 9, 12, 13, 14, 15, 16, 24, 25, 30, 31, 33, 34, 35, 37, 39, 40, 42, 47, 49, 50, 51, 55, 56, 57, 61, 62, 63, 64, 69], "procedur": 0, "var": [0, 1, 12, 13, 24, 55, 59, 64, 65], "ax": 0, "0": [0, 2, 4, 5, 6, 7, 9, 12, 13, 14, 16, 18, 20, 21, 23, 24, 25, 26, 30, 31, 32, 33, 34, 37, 39, 40, 45, 47, 48, 49, 51, 52, 54, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72], "real": [0, 13, 25, 40], "proc": 0, "printit": 0, "x": [0, 8, 9, 11, 12, 13, 16, 24, 27, 30, 33, 34, 35, 39, 52, 56, 59, 60, 61, 63, 64, 67, 68, 72], "writeln": 0, "uppercamelcas": 0, "class": [0, 25, 55, 56, 57, 60, 61, 63, 64, 68, 69, 72], "foo": [0, 3], "foopar": 0, "re": [0, 2, 6, 7, 9, 12, 13, 48, 64, 71, 72], "confirm": 0, "again": [0, 39, 47, 48], "realli": [0, 13, 33], "behav": [0, 5, 13, 60], "properli": [0, 40], "wiki": 0, "more": [0, 1, 4, 5, 6, 9, 13, 16, 23, 24, 33, 34, 37, 39, 40, 42, 43, 45, 47, 49, 56, 60, 61, 63, 67, 68, 72], "info": [0, 1, 6, 9, 13, 15, 19, 24, 33], "how": [0, 8, 13, 23, 51, 60, 64, 67], "http": [0, 47, 48, 60], "com": [0, 47, 48], "unit": [0, 1, 7, 9, 13, 34], "server_util": [0, 1], "parallel_start_test": 0, "d": [0, 6, 13, 25, 26, 30, 33, 34, 39, 54, 68, 70, 72], "everi": [0, 1, 9, 13, 63, 72], "should": [0, 1, 6, 9, 11, 12, 13, 23, 24, 25, 30, 31, 33, 35, 39, 40, 41, 45, 47, 51, 56, 63, 64, 67, 71], "least": [0, 8, 9, 13, 30, 32, 33, 58, 68], "one": [0, 1, 2, 3, 4, 6, 9, 11, 12, 13, 14, 16, 17, 23, 24, 25, 26, 30, 33, 39, 40, 42, 45, 49, 50, 51, 52, 56, 59, 61, 62, 63, 64, 68, 70, 72], "associ": [0, 1, 13, 31, 56, 68, 69], "number": [0, 1, 4, 5, 6, 7, 8, 9, 12, 13, 14, 16, 21, 23, 24, 25, 30, 31, 33, 34, 37, 39, 40, 47, 50, 52, 54, 56, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72], "titl": [0, 13, 33], "bodi": 0, "close": [0, 4, 13, 25, 34, 39, 62], "keyword": [0, 2, 6, 13, 30, 31, 62, 69], "doubt": 0, "take": [0, 8, 12, 13, 24, 37, 39, 41, 56, 64], "some": [0, 6, 9, 13, 37, 39, 42, 47, 61, 63, 68, 72], "99999": 0, "pr": 0, "implement": [0, 2, 6, 9, 13, 22, 23, 24, 26, 29, 33, 45, 59, 62, 63, 72], "arg": [0, 2, 4, 13, 22, 25, 30, 34, 50, 62, 64], "super": 0, "cool": 0, "note": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 16, 17, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 39, 40, 42, 47, 49, 50, 52, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72], "help": [0, 8, 13, 50], "keep": [0, 4, 9, 13, 39, 49, 52, 56, 63], "part": [0, 13, 30, 33, 35, 52, 72], "those": [0, 13, 32, 39, 48, 50, 58, 66], "As": [0, 13, 23, 24, 31, 41, 48, 49, 56, 59, 67, 69, 72], "person": 0, "who": 0, "left": [0, 4, 8, 13, 23, 24, 32, 33, 34, 58, 65, 72], "feedback": 0, "resolv": [0, 52], "convers": [0, 6, 56, 61, 67, 72], "decid": 0, "author": 0, "address": [0, 7, 8, 13, 71], "try": [0, 2, 11, 13, 14, 16, 24, 35, 52], "feel": 0, "readi": [0, 37, 49], "necessari": [0, 52], "track": 0, "ani": [0, 4, 5, 6, 9, 12, 13, 14, 16, 17, 23, 24, 25, 30, 33, 40, 42, 47, 55, 59, 63, 64, 65, 67, 68, 72], "which": [0, 4, 5, 6, 8, 9, 12, 13, 16, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 39, 47, 49, 50, 54, 56, 58, 59, 60, 61, 62, 63, 64, 67, 68, 70, 71, 72], "outsid": [0, 50], "scope": [0, 50], "member": 0, "quit": [0, 45], "bit": [0, 6, 8, 13, 23, 24, 25, 33, 56, 60, 63, 67], "experi": [0, 56], "unsur": 0, "ask": 0, "2": [0, 4, 5, 6, 9, 12, 13, 16, 20, 23, 24, 25, 26, 30, 31, 32, 33, 34, 37, 39, 40, 47, 48, 49, 50, 51, 52, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72], "concurr": [0, 56], "approv": 0, "from": [0, 2, 4, 5, 6, 7, 8, 9, 12, 13, 14, 16, 17, 20, 22, 23, 24, 25, 27, 30, 33, 34, 37, 39, 40, 45, 47, 50, 52, 54, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72], "limit": [0, 5, 6, 13, 18, 24, 25, 33, 34, 42, 45, 56, 60, 61, 63, 67, 72], "except": [0, 2, 4, 9, 13, 24, 39, 48, 63, 72], "after": [0, 6, 9, 13, 33, 47, 63, 72], "pass": [0, 1, 4, 8, 9, 12, 13, 16, 31, 35, 56, 63, 64, 69], "conflict": 0, "ideal": 0, "rebas": 0, "master": [0, 47], "prefer": [0, 49, 51, 53], "wrote": 0, "best": [0, 4, 13], "practic": [0, 12, 13, 24, 50, 59, 64], "els": [0, 2], "To": [0, 1, 9, 12, 13, 23, 34, 37, 45, 47, 50, 60, 61, 63, 65, 67, 72], "commit": 0, "histori": 0, "allow": [0, 8, 9, 13, 16, 25, 30, 33, 37, 39, 40, 41, 43, 50, 52, 56, 68], "easi": [0, 39, 47], "manipul": 0, "squash": 0, "web": 0, "interfac": 0, "pierce314159": 0, "ethan": 0, "debandi99": 0, "consensu": 0, "instruct": [0, 1, 13, 33, 45, 47, 48, 49, 51, 52, 53, 71], "There": [1, 12, 13, 16, 39, 47, 48, 52, 62, 70], "can": [1, 4, 5, 6, 8, 9, 12, 13, 14, 16, 23, 24, 25, 26, 29, 30, 31, 33, 34, 39, 40, 41, 42, 45, 47, 49, 50, 51, 52, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72], "role": 1, "develop": [1, 6, 48, 49, 50, 53, 56], "highlight": [1, 39], "variou": 1, "avail": [1, 7, 13, 16, 24, 40, 52, 56, 65], "separ": [1, 8, 13, 17, 33, 40, 50, 56, 67, 72], "section": [1, 13, 23, 39, 40, 45, 47, 51, 59], "These": [1, 39, 40, 43, 45, 48, 49, 56], "env": [1, 2, 13, 45, 47, 48, 49, 51], "arkouda_serv": [1, 7, 11, 13, 37, 45, 47, 50, 71], "arkouda_server_connection_info": 1, "set": [1, 4, 5, 6, 8, 9, 12, 13, 14, 16, 19, 22, 23, 24, 25, 26, 29, 30, 31, 33, 34, 37, 40, 47, 48, 49, 50, 52, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 72], "write": [1, 5, 6, 9, 13, 14, 16, 17, 24, 30, 33, 56, 60], "port": [1, 7, 45, 54, 71], "startup": [1, 45, 55], "tune": 1, "buffer": 1, "messag": [1, 6, 7, 13, 14, 24, 25, 30, 33, 36, 45, 56], "aggreg": [1, 12, 13, 30, 35, 39, 55, 56, 64], "dure": [1, 13, 16, 39, 40, 41, 50, 51], "sort": [1, 2, 4, 6, 9, 12, 13, 23, 24, 26, 30, 31, 33, 36, 54, 55, 59, 61, 62, 64, 65, 70, 72], "non": [1, 4, 6, 12, 13, 21, 22, 24, 25, 26, 32, 33, 56, 58, 59, 62, 64, 65, 66, 72], "crazi": 1, "system": [1, 5, 6, 13, 24, 29, 33, 34, 49, 51, 52, 53, 56, 59, 60, 61, 67, 71, 72], "thei": [1, 6, 7, 9, 12, 13, 14, 16, 24, 30, 31, 33, 37, 41, 56, 60, 61, 64, 69], "per": [1, 5, 6, 7, 9, 12, 13, 14, 16, 24, 30, 33, 40, 50, 56, 59, 64], "task": [1, 7], "so": [1, 2, 6, 9, 12, 13, 16, 24, 31, 33, 34, 48, 50, 51, 52, 56, 59, 60, 63, 64, 69, 70], "content": [1, 56], "between": [1, 13, 18, 24, 25, 30, 33, 34, 39, 50, 62, 65, 67, 72], "compet": 1, "arkouda_server_aggregation_dst_buff_s": 1, "commun": [1, 13, 32, 58, 62], "arkouda_server_aggregation_src_buff_s": 1, "arkouda_server_aggregation_yield_frequ": 1, "frequenc": [1, 13, 34], "yield": [1, 9, 13, 63, 66], "default": [1, 2, 4, 5, 6, 7, 8, 9, 12, 13, 14, 16, 20, 23, 24, 25, 26, 29, 30, 31, 33, 34, 40, 45, 49, 50, 54, 56, 60, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72], "1024": [1, 13, 24], "build": [1, 2, 12, 22, 45, 48, 52, 64, 71], "chpl_flag": 1, "A": [1, 3, 5, 6, 7, 8, 9, 12, 13, 16, 22, 23, 24, 25, 27, 29, 30, 31, 33, 34, 39, 44, 49, 54, 56, 59, 60, 61, 63, 65, 66, 67, 68, 69, 70, 72], "automat": [1, 6, 13, 16, 31, 40, 56, 61, 69], "chpl": [1, 47, 48, 49, 50], "addit": [1, 12, 13, 23, 27, 37, 40, 42, 48, 67, 70, 71], "ones": [1, 13, 23, 25, 54, 55, 59, 62], "here": [1, 9, 13, 35, 37, 38, 39, 40, 42, 47, 49, 50, 51, 52, 53, 71], "smemtrack": 1, "true": [1, 4, 6, 7, 8, 9, 12, 13, 14, 16, 18, 20, 21, 23, 24, 25, 26, 27, 30, 31, 33, 35, 39, 56, 57, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72], "lhdf5": 1, "lhdf5_hl": 1, "lzmq": 1, "liconv": 1, "lidn2": 1, "fast": [1, 13, 33], "unless": [1, 13, 16, 23, 33, 72], "arkouda_develop": 1, "o1": 1, "mutual": 1, "exclus": [1, 13, 25, 26, 39, 47, 62, 66, 70], "arkouda_quick_compil": 1, "loop": 1, "invari": 1, "code": [1, 6, 13, 14, 32, 39, 50, 55, 58, 61], "motion": 1, "ccflag": 1, "o0": 1, "arkouda_print_passes_fil": 1, "print": [1, 6, 7, 9, 13, 15, 24, 28, 33, 52, 71], "time": [1, 6, 7, 12, 13, 16, 18, 23, 24, 30, 33, 34, 40, 42, 48, 50, 54, 56, 61, 64, 65, 68, 70, 72], "specifi": [1, 4, 5, 8, 9, 12, 13, 16, 17, 24, 25, 30, 31, 33, 34, 35, 41, 56, 59, 60, 62, 63, 64, 68], "mainli": 1, "nightli": 1, "infrastructur": 1, "chpl_debug_flag": 1, "regex_max_captur": 1, "integ": [1, 6, 8, 9, 12, 13, 16, 18, 24, 25, 34, 40, 55, 59, 60, 61, 62, 63, 64, 67, 68, 70, 72], "chang": [1, 8, 9, 13, 14, 16, 24, 45, 49, 51, 56, 59, 63], "maximum": [1, 7, 9, 12, 13, 24, 25, 34, 56, 59, 62, 63, 64, 65], "captur": [1, 20, 72], "group": [1, 6, 9, 12, 13, 20, 24, 30, 31, 32, 33, 39, 40, 55, 58, 61, 63, 64, 69, 70, 72], "access": [1, 3, 7, 13, 16, 29, 39, 49, 55, 56, 71], "match": [1, 5, 6, 8, 9, 12, 13, 16, 21, 23, 24, 25, 30, 31, 33, 34, 36, 55, 56, 59, 60, 62, 64, 67, 69, 71], "20": [1, 4, 13, 23, 39, 51, 52, 59, 60, 66], "folk": 1, "instal": [1, 13, 24, 52, 71], "anaconda": [1, 45, 47, 52, 53], "through": [1, 37, 45, 49], "altern": [1, 47, 49, 52], "setup": [1, 47, 52], "them": [1, 13, 16, 26, 33, 48, 56, 70], "explicitli": [1, 9, 13, 26, 50, 70], "arkouda_zmq_path": 1, "zmq": [1, 47], "arkouda_hdf5_path": 1, "hdf5": [1, 5, 6, 9, 13, 14, 16, 24, 30, 33, 41, 42, 43, 47, 51, 56, 72], "arkouda_arrow_path": 1, "arrow": [1, 51], "arkouda_iconv_path": 1, "iconv": [1, 47, 51], "arkouda_idn2_path": 1, "idn2": [1, 47, 51], "ld_library_path": 1, "lib": [1, 47, 52, 70], "arkouda_skip_check_dep": 1, "skip": [1, 12, 13, 16, 33, 47, 56, 64, 70, 72], "autom": 1, "do": [1, 2, 4, 7, 9, 12, 13, 16, 23, 31, 33, 48, 50, 51, 53, 59, 60, 63, 64, 69], "repeat": [1, 6, 13, 30, 61, 68], "sinc": [1, 13, 30, 61, 63, 67, 72], "dep": [1, 47, 48, 49], "been": [1, 2, 6, 7, 9, 13, 16, 24, 26, 30, 33, 37, 47, 50, 59, 61, 62], "up": [1, 2, 4, 6, 7, 12, 13, 16, 23, 24, 26, 33, 34, 47, 52, 56, 59, 60, 61, 62, 70, 72], "arkouda_server_user_modul": [1, 50], "absolut": [1, 13, 23, 34, 50, 59], "must": [1, 4, 6, 7, 8, 9, 12, 13, 14, 16, 23, 24, 25, 26, 27, 30, 31, 33, 34, 37, 39, 45, 47, 48, 50, 59, 62, 64, 66, 67, 68, 69, 71, 72], "also": [1, 2, 4, 6, 8, 12, 13, 18, 23, 25, 26, 30, 33, 39, 41, 42, 43, 45, 47, 52, 56, 62, 66, 67, 68, 70, 72], "servermodul": [1, 50], "cfg": [1, 50], "regist": [1, 6, 9, 12, 13, 14, 15, 24, 30, 31, 33, 35, 55, 64], "readm": 1, "verbos": [1, 2, 13, 15, 19], "arkouda_verbos": 1, "arkouda_server_host": 1, "hostnam": [1, 7, 45, 54, 71], "arkouda_server_port": 1, "arkouda_client_timeout": 1, "control": [1, 8, 13, 23, 67], "timeout": [1, 7, 71], "arkouda_full_stack_test": 1, "option": [1, 4, 6, 7, 8, 9, 12, 13, 14, 16, 20, 23, 24, 25, 26, 30, 31, 33, 34, 40, 47, 48, 51, 54, 56, 57, 62, 63, 64, 65, 69, 70, 71, 72], "test_data_url": 1, "readalltest": 1, "read_all_test": 1, "arkouda_numlocal": 1, "local": [1, 2, 5, 6, 7, 9, 13, 14, 16, 24, 30, 31, 33, 34, 37, 40, 45, 47, 48, 56, 62, 69, 71], "where": [1, 6, 7, 9, 12, 13, 14, 16, 17, 18, 23, 24, 25, 26, 29, 30, 33, 35, 37, 40, 55, 56, 62, 64, 65, 66, 67, 68, 70, 71, 72], "found": [1, 4, 9, 13, 14, 24, 39, 42, 49, 50, 52], "arkouda_hom": 1, "locat": [1, 12, 13, 14, 24, 29, 31, 33, 47, 52, 64, 69, 72], "execut": [1, 6, 8, 13, 16, 24, 33, 34, 37, 47, 48, 50, 61, 71], "warn": [1, 13, 16, 22, 33, 56, 72], "subject": [1, 13, 34], "futur": [1, 8, 13, 16, 30, 33, 56, 65], "intern": [1, 6, 12, 13, 24, 33], "arkouda_client_directori": [1, 29], "parent": [1, 2, 21], "token": [1, 7, 22, 29, 45, 71], "txt": 1, "arkouda_tunnel_serv": 1, "ssh": 1, "tunnel": 1, "url": [1, 7, 45, 47, 71], "arkouda_key_fil": 1, "keyfil": 1, "arkouda_password": 1, "password": [1, 52], "arkouda_log_level": [1, 13], "side": [1, 5, 6, 7, 9, 12, 13, 14, 15, 16, 20, 24, 25, 30, 31, 33, 34, 45, 50, 52, 56, 59, 60, 64, 65, 66, 67, 68, 71, 72], "log": [1, 12, 13, 19, 23, 25, 27, 33, 55, 59, 64], "level": [1, 2, 13, 19, 26, 30, 31, 40, 47, 50, 53, 56, 69, 70], "arkouda_client_mod": 1, "mode": [1, 5, 6, 12, 13, 14, 16, 24, 30, 33, 55, 62, 64], "ui": 1, "api": [1, 6, 12, 13, 24, 33, 44, 64, 67], "displai": [1, 8, 13, 27, 35, 47, 52], "splash": 1, "get_keyword": 2, "get": [2, 7, 9, 11, 13, 16, 23, 30, 48, 52, 56, 60, 67, 68], "versioneerconfig": 2, "contain": [2, 4, 6, 8, 9, 12, 13, 14, 15, 16, 17, 20, 22, 23, 24, 25, 26, 30, 31, 32, 33, 36, 39, 40, 45, 50, 54, 55, 56, 58, 59, 61, 62, 64, 67, 68, 69, 70, 72], "popul": [2, 12, 13, 17, 21, 24, 59, 64], "return": [2, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 41, 47, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72], "object": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 40, 41, 42, 43, 52, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], "notthismethod": 2, "rais": [2, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72], "method": [2, 3, 6, 7, 8, 9, 12, 13, 16, 22, 23, 24, 25, 29, 30, 33, 39, 49, 55, 56, 61, 62, 64, 65, 67], "valid": [2, 4, 13, 16, 23, 25, 33, 56, 67, 72], "scenario": 2, "long_version_pi": 2, "handler": [2, 13], "register_vcs_handl": 2, "vc": 2, "decor": [2, 13, 36], "mark": [2, 40], "run_command": 2, "command": [2, 7, 13, 24, 37, 45, 47, 49, 50, 51, 52, 71], "cwd": [2, 13, 16, 24], "none": [2, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 24, 25, 27, 28, 30, 31, 33, 34, 48, 56, 57, 61, 62, 63, 64, 65, 69, 71], "fals": [2, 4, 6, 7, 8, 9, 12, 13, 14, 16, 20, 21, 23, 24, 25, 26, 30, 31, 33, 34, 39, 54, 56, 59, 61, 62, 63, 64, 67, 68, 70, 72], "hide_stderr": 2, "call": [2, 6, 7, 8, 9, 12, 13, 16, 24, 25, 30, 31, 33, 39, 42, 45, 47, 49, 50, 56, 59, 60, 62, 63, 64, 67, 71], "given": [2, 4, 6, 9, 12, 13, 16, 22, 24, 25, 26, 33, 34, 35, 51, 56, 61, 62, 63, 64, 72], "versions_from_parentdir": 2, "parentdir_prefix": 2, "root": [2, 6, 9, 12, 13, 24, 40, 48, 56, 59, 64], "determin": [2, 6, 9, 12, 13, 14, 16, 24, 30, 33, 40, 50, 56, 61, 63, 64], "directori": [2, 6, 13, 14, 16, 17, 24, 29, 30, 33, 37, 45, 47, 48, 49, 50, 51, 52, 53, 54], "tarbal": 2, "convention": 2, "unpack": [2, 13, 33, 45, 49, 72], "both": [2, 7, 9, 13, 16, 24, 26, 34, 39, 40, 41, 45, 47, 49, 56, 61, 70, 72], "search": [2, 4, 6, 13, 20, 33, 55, 61], "two": [2, 4, 6, 9, 12, 13, 18, 23, 24, 25, 26, 30, 33, 34, 39, 48, 50, 56, 59, 62, 64, 70, 72], "git_get_keyword": 2, "versionfile_ab": 2, "extract": [2, 64], "git_versions_from_keyword": 2, "tag_prefix": 2, "git_pieces_from_vc": 2, "describ": 2, "tree": 2, "onli": [2, 6, 9, 12, 13, 14, 16, 20, 23, 24, 25, 26, 30, 31, 32, 33, 39, 40, 47, 48, 49, 50, 51, 53, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72], "archiv": [2, 48], "subst": 2, "were": [2, 4, 5, 12, 13, 14, 16, 24, 30, 33, 50, 60, 64, 68, 72], "expand": [2, 13, 16, 35, 56], "hasn": 2, "rewritten": 2, "short": 2, "mean": [2, 7, 9, 12, 13, 16, 24, 25, 29, 30, 55, 56, 59, 64, 65], "insid": 2, "plus_or_dot": 2, "piec": 2, "render_pep440": 2, "post": 2, "releas": [2, 47, 48, 49], "goal": 2, "distanc": 2, "ghex": 2, "dirti": 2, "ll": [2, 47], "git_describ": 2, "just": [2, 67], "hex": 2, "untag": 2, "render_pep440_pr": 2, "post0": 2, "devdist": 2, "No": [2, 47, 52], "render_pep440_post": 2, "postdist": 2, "dev0": 2, "backward": [2, 13, 30, 35, 68], "appear": [2, 4, 6, 9, 12, 13, 64, 65], "older": [2, 13, 14, 24, 40, 47, 48], "than": [2, 4, 5, 6, 9, 12, 13, 14, 23, 24, 25, 26, 30, 32, 33, 34, 37, 42, 56, 58, 60, 61, 62, 63, 64, 67, 70, 72], "correspond": [2, 4, 6, 8, 9, 12, 13, 14, 16, 17, 18, 20, 22, 23, 24, 25, 29, 30, 31, 33, 35, 40, 42, 56, 59, 61, 64, 65, 66, 68, 69, 72], "clean": [2, 47], "shouldn": 2, "softwar": [2, 48], "render_pep440_old": 2, "render_git_describ": 2, "g": [2, 3, 8, 12, 13, 23, 24, 33, 34, 35, 39, 48, 56, 59, 61, 62, 64, 68, 71, 72], "prefix": [2, 6, 9, 13, 14, 16, 24, 30, 33, 34, 35, 55, 72], "render_git_describe_long": 2, "long": [2, 13, 30, 33, 68], "hash": [2, 6, 13, 23, 32, 33, 58], "uncondit": 2, "render": 2, "request": [2, 6, 9, 12, 13, 17, 24, 25, 33, 62, 63, 64], "get_vers": [2, 13], "unabl": [2, 6, 9, 12, 13, 24, 33, 64], "cachedaccessor": 3, "str": [3, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 33, 34, 35, 56, 57, 60, 61, 62, 63, 64, 67, 71, 72], "custom": [3, 47, 65], "properti": [3, 6, 9, 13, 14, 22, 30, 31, 34], "descriptor": [3, 13, 33], "cach": [3, 6, 13, 30, 33], "param": [3, 6, 9, 13, 14, 16, 24, 30, 33], "namespac": 3, "df": [3, 9, 13, 39, 63], "type": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 41, 47, 51, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 68, 69, 70, 71, 72], "extens": [3, 6, 13, 14, 16, 24, 30, 33, 47, 56], "cl": 3, "__init__": 3, "assum": [3, 9, 12, 13, 16, 25, 26, 31, 40, 41, 47, 49, 53, 56, 63, 64, 69, 70], "seri": [3, 9, 13, 25, 34, 35, 36], "datafram": [3, 13, 16, 28, 31, 36, 41, 56, 69], "index": [3, 4, 5, 6, 8, 9, 12, 13, 16, 20, 24, 25, 30, 31, 33, 36, 39, 47, 54, 55, 56, 59, 61, 62, 64, 65, 68, 69, 72], "singl": [3, 4, 5, 6, 8, 9, 12, 13, 14, 16, 22, 23, 24, 26, 30, 33, 39, 40, 47, 50, 54, 56, 62, 63, 64, 66, 68, 70], "argument": [3, 4, 8, 9, 12, 13, 24, 30, 31, 33, 35, 50, 69], "data": [3, 5, 6, 8, 9, 11, 12, 13, 14, 16, 22, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 39, 41, 43, 44, 55, 57, 58, 60, 61, 62, 64, 68, 69, 71, 72], "__get__": 3, "obj": [3, 9, 13, 16], "string_oper": 3, "date_oper": 3, "classmethod": [3, 6, 9, 13, 22, 30, 31, 34, 61], "_make_op": 3, "datetimeaccessor": 3, "stringaccessor": 3, "unsqueez": [4, 13], "p": [4, 13, 24, 25], "zero_up": [4, 13], "val": [4, 11, 12, 13, 22, 30, 35, 64, 68], "map": [4, 6, 7, 8, 9, 13, 16, 17, 22, 33, 56, 63, 72], "arrai": [4, 5, 6, 8, 9, 12, 13, 14, 16, 18, 20, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 40, 45, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 72], "spars": [4, 12, 13, 64, 67], "valu": [4, 5, 6, 7, 8, 9, 12, 13, 14, 16, 17, 22, 23, 24, 25, 26, 30, 31, 33, 34, 35, 39, 40, 49, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72], "pdarrai": [4, 5, 6, 8, 9, 12, 13, 14, 16, 18, 20, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 72], "dens": [4, 6, 12, 13, 64], "replac": [4, 9, 13, 16, 21, 24, 30, 33, 37, 40, 49, 50, 51, 68, 72], "multipl": [4, 9, 13, 16, 23, 30, 34, 37, 39, 40, 42, 43, 50, 54, 56, 57, 59, 63, 68], "common": [4, 12, 13, 26, 52, 56, 64, 70, 72], "right_align": [4, 13], "right": [4, 8, 9, 13, 24, 30, 32, 33, 34, 58, 63, 66, 71, 72], "impli": [4, 13, 66], "discard": [4, 6, 13, 61], "hand": [4, 13, 66], "defin": [4, 6, 8, 9, 11, 12, 13, 16, 22, 23, 24, 25, 30, 33, 60, 61, 62, 63, 64, 65, 67], "bool": [4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 20, 21, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 54, 56, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72], "logic": [4, 5, 6, 13, 23, 25, 30, 33, 55, 60, 62, 65, 68], "surviv": [4, 13], "left_align": [4, 13], "nonuniqueerror": [4, 13], "valueerror": [4, 6, 7, 8, 12, 13, 14, 16, 17, 18, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 56, 58, 59, 62, 64, 65, 68, 69, 71, 72], "inappropri": [4, 13], "correct": [4, 9, 13, 52, 54, 63], "queri": [4, 13, 56], "item": [4, 6, 9, 13, 20, 24, 25, 26, 31, 35, 61, 63, 69, 70], "sequenc": [4, 6, 8, 13, 24, 25, 26, 30, 32, 58, 62, 67, 68, 70, 72], "each": [4, 5, 6, 9, 12, 13, 14, 15, 16, 17, 19, 20, 23, 24, 26, 30, 31, 33, 34, 35, 39, 40, 47, 50, 56, 59, 60, 61, 63, 64, 65, 67, 68, 69, 70, 72], "row": [4, 9, 12, 13, 26, 30, 32, 36, 39, 56, 58, 63, 64, 68, 70], "same": [4, 5, 6, 8, 9, 12, 13, 14, 16, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 39, 40, 42, 48, 49, 50, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72], "shape": [4, 5, 6, 9, 13, 14, 23, 24, 30, 31, 33, 40, 55, 59, 60, 61, 67], "dtype": [4, 5, 6, 8, 9, 12, 13, 14, 16, 18, 21, 22, 23, 24, 25, 26, 30, 32, 33, 34, 35, 36, 39, 54, 55, 56, 59, 60, 62, 64, 65, 66, 67, 70, 72], "its": [4, 6, 11, 13, 14, 24, 30, 31, 33, 40, 49, 67, 68, 69, 72], "int64": [4, 6, 8, 9, 11, 12, 13, 16, 18, 20, 23, 24, 25, 26, 30, 32, 33, 34, 39, 40, 54, 56, 58, 59, 61, 62, 63, 64, 65, 67, 68, 70, 72], "lookup": [4, 13, 14, 31], "kei": [4, 5, 6, 8, 9, 12, 13, 14, 16, 17, 22, 23, 24, 31, 33, 34, 39, 50, 52, 57, 63, 64, 69], "fillvalu": [4, 13], "appli": [4, 9, 12, 13, 23, 59, 63, 64, 72], "domain": [4, 13], "entri": [4, 13, 33], "uniqu": [4, 6, 9, 12, 13, 14, 23, 26, 30, 31, 33, 39, 55, 56, 61, 64, 65, 66, 68, 69, 70, 72], "treat": [4, 5, 8, 11, 13, 32, 39, 58, 60], "tupl": [4, 6, 8, 9, 11, 12, 13, 18, 23, 24, 25, 26, 31, 33, 39, 56, 61, 62, 63, 64, 65, 67, 69, 70, 72], "rang": [4, 6, 9, 13, 14, 23, 24, 25, 30, 31, 33, 34, 54, 56, 62, 63, 65, 69, 72], "evalu": [4, 13, 24, 59, 65], "scalar": [4, 6, 13, 24, 30, 31, 34, 54, 55, 61, 65, 66, 68, 69], "result": [4, 6, 8, 9, 12, 13, 14, 16, 18, 23, 24, 25, 26, 27, 30, 31, 33, 34, 39, 40, 41, 49, 56, 59, 62, 63, 64, 67, 68, 69, 72], "over": [4, 13, 23, 24, 33, 54, 59, 60, 61, 63, 65, 67, 68, 72], "while": [4, 6, 13, 16, 32, 33, 40, 42, 47, 52, 56, 58], "cannot": [4, 5, 6, 9, 12, 13, 16, 23, 24, 25, 33, 34, 42, 52, 56, 60, 61, 64, 67, 72], "other": [4, 6, 8, 9, 12, 13, 14, 23, 24, 25, 30, 32, 33, 34, 39, 56, 57, 58, 59, 61, 64, 68, 72], "complex": [4, 13, 45], "achiev": [4, 13, 47], "arang": [4, 5, 9, 12, 13, 16, 23, 24, 25, 26, 27, 30, 34, 39, 55, 56, 59, 60, 62, 64, 65, 66, 67, 68, 70], "desir": [4, 8, 13, 23, 24, 25, 29, 34, 37, 45, 50, 59, 62, 65, 67, 72], "word": [4, 13], "keys1": [4, 13], "twenti": [4, 13], "_": [4, 13, 20, 33, 72], "5": [4, 5, 6, 9, 12, 13, 23, 24, 25, 26, 30, 32, 33, 34, 39, 42, 49, 51, 56, 58, 59, 60, 62, 63, 64, 66, 67, 68, 70, 72], "keys2": [4, 13], "three": [4, 13, 25, 26, 33, 34, 47, 62, 66, 67, 72], "four": [4, 13, 26, 33, 34, 62, 72], "five": [4, 13, 26, 33, 62, 72], "21": [4, 13, 60], "22": [4, 13, 59, 60], "23": [4, 13, 60], "24": [4, 13, 23, 24, 51, 59, 60], "25": [4, 12, 13, 16, 24, 25, 60, 62, 64], "args1": [4, 13], "thirti": [4, 13], "args2": [4, 13], "aku": [4, 9, 13, 14, 28, 57, 63], "direct": [4, 13, 40, 47], "intermedi": [4, 13], "revkei": [4, 13], "revindic": [4, 13], "size": [4, 5, 6, 8, 9, 11, 12, 13, 18, 22, 23, 24, 25, 30, 31, 32, 33, 34, 35, 39, 40, 41, 42, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 72], "revarg": [4, 13], "idx": [4, 13, 39], "in1d_interv": [4, 13], "interv": [4, 13, 23, 25, 34, 62, 65], "symmetr": [4, 13, 26, 30, 39, 55, 70], "test": [4, 6, 9, 13, 16, 23, 26, 37, 39, 45, 47, 50, 63, 70], "membership": [4, 13, 26, 70], "half": [4, 13], "python": [4, 5, 6, 8, 9, 13, 24, 25, 26, 29, 31, 33, 34, 44, 47, 52, 53, 55, 56, 59, 60, 61, 62, 63, 66, 67, 72], "int": [4, 5, 6, 7, 8, 9, 11, 12, 13, 16, 18, 20, 21, 22, 23, 24, 25, 29, 30, 31, 33, 34, 40, 56, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72], "float": [4, 7, 9, 13, 22, 23, 24, 25, 59, 62, 63, 65, 67], "overlap": [4, 13, 21, 33, 72], "lower_bounds_inclus": [4, 13], "upper_bounds_exclus": [4, 13], "boolean": [4, 6, 9, 12, 13, 20, 24, 26, 30, 31, 33, 39, 40, 61, 63, 64, 66, 67, 68, 69, 70, 72], "low": [4, 8, 9, 13, 23, 24, 25, 39, 56, 62], "high": [4, 8, 9, 13, 23, 24, 25, 39, 62], "inclus": [4, 9, 13, 23, 24, 25, 34, 59, 62, 66], "equival": [4, 5, 6, 12, 13, 24, 25, 26, 32, 33, 34, 39, 58, 59, 60, 62, 70], "But": [4, 13], "faster": [4, 6, 13, 26, 61, 70], "mani": [4, 6, 13, 61, 64], "second": [4, 7, 13, 17, 23, 25, 26, 31, 33, 34, 39, 59, 62, 67, 69, 70, 71, 72], "trivial": [4, 13], "search_interv": [4, 13], "tiebreak": [4, 13], "hierarch": [4, 13], "uint": [4, 13, 24, 25], "numer": [4, 9, 13, 25, 31, 32, 36, 55, 56, 58, 61, 67, 69, 72], "lowest": [4, 9, 13, 24, 25], "chosen": [4, 13, 23, 24, 59, 67, 68], "compon": [4, 6, 9, 12, 13, 24, 30, 31, 33, 34, 35, 40, 42, 64], "dimens": [4, 5, 6, 13, 24, 33, 39, 40, 60, 61, 67, 68], "multi": [4, 5, 8, 12, 13, 16, 26, 31, 39, 57, 60, 62, 64, 67, 69, 70], "dimension": [4, 5, 13, 25, 31, 56, 60, 67, 69], "satisfi": [4, 13], "condit": [4, 13, 23, 24, 59], "11": [4, 9, 13, 23, 30, 39, 45, 47, 51, 59, 60, 63, 65, 66, 68], "end": [4, 6, 9, 13, 20, 24, 25, 30, 33, 34, 55, 61, 62, 66, 68, 72], "9": [4, 6, 9, 12, 13, 23, 24, 25, 30, 32, 33, 39, 48, 56, 58, 59, 60, 62, 64, 66, 68, 72], "10": [4, 12, 13, 16, 23, 24, 25, 27, 30, 31, 32, 33, 39, 47, 51, 56, 58, 59, 60, 62, 64, 65, 66, 67, 68, 69], "6": [4, 5, 9, 12, 13, 23, 24, 25, 26, 30, 33, 39, 48, 49, 51, 52, 54, 56, 59, 60, 62, 63, 64, 65, 66, 68, 70, 72], "15": [4, 13, 33, 60, 66], "12": [4, 12, 13, 23, 30, 33, 47, 48, 59, 60, 64, 66, 68], "30": [4, 13, 60], "bi_start": [4, 13], "bigint_from_uint_arrai": [4, 13, 24, 25], "cast": [4, 8, 13, 23, 24, 25, 33, 55, 56, 62, 72], "uint64": [4, 8, 11, 12, 13, 23, 24, 25, 32, 54, 58, 59, 62, 63, 65, 67, 72], "bi_end": [4, 13], "bi_val": [4, 13], "92233720368547758091": [4, 13], "92233720368547758090": [4, 13], "166020696663385964564": [4, 13], "36893488147419103233": [4, 13], "92233720368547758085": [4, 13], "92233720368547758095": [4, 13], "110680464442257309696": [4, 13], "110680464442257309708": [4, 13], "166020696663385964574": [4, 13], "is_cosort": [4, 13], "iff": [4, 6, 13, 24, 33, 59, 65], "cosort": [4, 13], "column": [4, 6, 9, 12, 13, 16, 30, 31, 32, 39, 42, 56, 58, 64, 68, 69], "tabl": [4, 7, 13, 15, 22, 24, 30, 33, 51, 67, 68], "cosorted": [4, 13], "typeerror": [4, 6, 8, 9, 11, 12, 13, 14, 16, 18, 19, 23, 24, 25, 26, 31, 32, 33, 34, 56, 58, 59, 61, 62, 64, 65, 69, 70, 72], "interval_lookup": [4, 13], "express": [4, 13, 16, 33, 55, 56, 61, 63, 66, 67], "upper_bounds_inclus": [4, 13], "ordertyp": [5, 13], "arrayview": [5, 13, 16, 24, 55, 56, 67], "pdarrayclass": [5, 6, 8, 9, 12, 13, 14, 16, 18, 20, 23, 25, 26, 30, 31, 32, 33, 34, 36], "row_major": [5, 13, 24, 60], "view": [5, 13, 39, 43, 47, 53, 60, 67], "arraryview": [5, 13, 60], "similarli": [5, 13, 39, 60], "ndarrai": [5, 6, 13, 23, 24, 25, 27, 30, 33, 34, 39, 56, 59, 60, 61, 65, 67, 68, 72], "store": [5, 12, 13, 16, 25, 29, 33, 40, 52, 56, 60, 61, 62, 64, 68, 72], "being": [5, 9, 13, 14, 16, 24, 31, 35, 39, 40, 41, 42, 49, 50, 56, 60, 63, 66, 69], "element": [5, 6, 9, 12, 13, 17, 20, 23, 24, 25, 26, 30, 31, 33, 34, 35, 39, 50, 55, 60, 61, 62, 64, 65, 66, 67, 69, 70, 72], "int_scalar": [5, 11, 12, 13, 23, 24, 25, 33, 34, 59, 60, 62, 64, 65, 67], "ndim": [5, 6, 13, 24, 30, 33, 55, 60, 61, 67], "items": [5, 13, 24, 25, 30, 33, 55, 56, 60, 67], "byte": [5, 6, 9, 11, 13, 16, 24, 25, 33, 34, 40, 45, 56, 60, 61, 63, 67, 72], "read": [5, 6, 13, 14, 16, 17, 24, 33, 40, 41, 42, 60, 72], "By": [5, 6, 8, 9, 12, 13, 14, 16, 23, 24, 26, 30, 33, 34, 60, 64, 70, 72], "c": [5, 9, 13, 24, 25, 26, 30, 33, 48, 54, 60, 63, 67, 68, 70, 72], "f": [5, 6, 13, 24, 25, 33, 45, 48, 49, 51, 56, 60, 72], "column_major": [5, 13, 24, 60], "__len__": [5, 6, 9, 13, 14, 24, 31, 33], "__repr__": [5, 6, 8, 9, 13, 14, 20, 22, 24, 28, 30, 31, 33, 34], "repr": [5, 6, 8, 13, 14, 20, 24, 28, 30, 33, 34], "self": [5, 6, 8, 9, 12, 13, 14, 20, 24, 28, 30, 33, 34, 56, 57, 60, 61, 63, 67, 68, 69, 72], "__str__": [5, 6, 8, 9, 13, 20, 22, 24, 28, 30, 33, 34], "__getitem__": [5, 6, 8, 9, 13, 14, 20, 24, 30, 31, 33, 34], "__setitem__": [5, 8, 9, 13, 24, 34], "to_ndarrai": [5, 6, 8, 13, 14, 23, 24, 25, 27, 30, 33, 34, 39, 55, 56, 60, 61, 65, 67, 68, 72], "convert": [5, 6, 8, 9, 13, 16, 23, 24, 25, 30, 31, 33, 34, 35, 56, 60, 61, 63, 67, 68, 69, 70, 72], "np": [5, 6, 9, 11, 12, 13, 18, 23, 24, 25, 27, 30, 33, 34, 39, 56, 59, 60, 61, 62, 63, 64, 65, 67, 68, 72], "transfer": [5, 6, 9, 13, 24, 33, 34, 56, 60, 61, 63, 67, 68, 72], "client": [5, 6, 9, 13, 24, 25, 33, 34, 36, 41, 47, 48, 49, 50, 51, 52, 55, 60, 61, 63, 67, 68, 72], "exce": [5, 6, 9, 13, 24, 25, 33, 34, 56, 60, 61, 62, 63, 67, 72], "maxtransferbyt": [5, 6, 9, 13, 24, 25, 33, 34, 56, 60, 61, 63, 67, 72], "runtimeerror": [5, 6, 7, 9, 12, 13, 14, 15, 16, 20, 23, 24, 25, 26, 30, 31, 33, 34, 56, 59, 60, 61, 62, 64, 65, 67, 70, 71, 72], "error": [5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 20, 22, 23, 24, 25, 30, 31, 33, 34, 40, 42, 52, 56, 59, 60, 61, 63, 64, 65, 67, 71, 72], "thrown": [5, 6, 9, 13, 14, 15, 16, 20, 24, 25, 30, 31, 33, 34, 56, 59, 60, 65, 67, 72], "receiv": [5, 7, 13, 16, 24, 33, 34, 56, 60, 67, 71], "doe": [5, 6, 7, 9, 12, 13, 14, 16, 17, 24, 25, 27, 30, 31, 33, 34, 39, 40, 42, 56, 60, 62, 63, 64, 67, 69, 71, 72], "otherwis": [5, 6, 9, 11, 12, 13, 14, 16, 20, 23, 24, 25, 26, 30, 31, 33, 34, 35, 53, 56, 60, 61, 63, 64, 67, 68, 70, 72], "protect": [5, 6, 13, 24, 25, 33, 34, 56, 60, 61, 67, 72], "overflow": [5, 6, 13, 23, 24, 33, 34, 56, 60, 61, 67, 72], "memori": [5, 6, 7, 13, 24, 33, 34, 40, 45, 56, 60, 61, 67, 72], "run": [5, 6, 7, 13, 23, 24, 30, 33, 34, 39, 45, 47, 48, 49, 51, 52, 54, 56, 60, 61, 67, 68, 71, 72], "assumpt": [5, 6, 13, 24, 25, 33, 34, 56, 60, 61, 67, 72], "distribut": [5, 6, 9, 12, 13, 14, 16, 24, 25, 27, 30, 33, 34, 45, 56, 59, 60, 61, 62, 64, 67, 70, 72], "mai": [5, 6, 9, 13, 16, 24, 25, 26, 33, 34, 39, 47, 49, 51, 52, 56, 60, 61, 62, 63, 67, 72], "overrid": [5, 6, 13, 24, 25, 33, 34, 56, 60, 61, 67, 72], "larger": [5, 6, 13, 24, 25, 33, 34, 39, 56, 60, 61, 67, 72], "proce": [5, 6, 13, 24, 25, 33, 34, 56, 60, 61, 67, 72], "caution": [5, 6, 13, 24, 25, 33, 34, 56, 60, 61, 67, 72], "to_list": [5, 6, 8, 13, 14, 24, 30, 33, 34, 39, 56, 60, 67, 68, 72], "reshap": [5, 13, 24, 55, 60], "3": [5, 9, 12, 13, 20, 23, 24, 25, 26, 27, 30, 32, 33, 34, 39, 40, 47, 49, 51, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 70, 72], "4": [5, 9, 12, 13, 20, 23, 24, 25, 26, 30, 32, 33, 34, 39, 49, 51, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 70, 72], "to_hdf": [5, 6, 9, 13, 14, 16, 24, 30, 33, 40, 43, 56], "filepath": [5, 13], "dset": [5, 13], "truncat": [5, 6, 13, 14, 16, 24, 30, 33, 40, 42], "file_typ": [5, 6, 9, 13, 14, 16, 24, 30, 33], "save": [5, 6, 9, 12, 13, 14, 16, 24, 30, 33, 37, 40, 41, 42, 56, 61, 70], "path": [5, 9, 13, 14, 16, 17, 24, 29, 47, 48, 49, 50, 52, 56], "dataset": [5, 6, 13, 14, 16, 24, 30, 33, 40, 42, 64, 72], "append": [5, 6, 9, 13, 14, 16, 24, 26, 30, 33, 40, 42, 55, 62, 72], "overwrit": [5, 6, 13, 14, 16, 24, 30, 33, 35, 67], "exist": [5, 6, 7, 9, 13, 14, 16, 17, 24, 25, 30, 33, 40, 42, 62, 63, 71], "format": [5, 6, 7, 8, 9, 13, 14, 15, 16, 22, 24, 28, 29, 30, 31, 33, 39, 40, 41, 42, 50, 63, 71, 72], "date": [5, 13, 34], "kwarg": [6, 12, 13, 25, 28, 34, 35, 61, 64], "repres": [6, 8, 9, 12, 13, 16, 30, 31, 33, 34, 40, 61, 64, 72], "belong": [6, 61], "often": [6, 61, 65], "speed": [6, 13, 26, 61, 62, 70], "oper": [6, 7, 8, 9, 12, 13, 14, 24, 29, 30, 31, 32, 33, 34, 41, 45, 51, 53, 54, 55, 58, 63, 64, 66, 71], "cost": [6, 61], "initi": [6, 7, 13, 24, 25, 34, 54, 61, 62, 67, 71], "navalu": [6, 61], "miss": [6, 22, 61], "null": [6, 13, 16, 33, 40, 61, 72], "n": [6, 9, 12, 13, 23, 24, 25, 26, 30, 31, 33, 34, 49, 51, 54, 59, 60, 61, 62, 63, 64, 68, 69], "permut": [6, 9, 12, 13, 32, 33, 35, 55, 58, 61, 64, 70], "segment": [6, 12, 13, 16, 30, 33, 35, 40, 55, 56, 61, 64, 68, 70, 72], "offset": [6, 12, 13, 16, 25, 33, 40, 56, 61, 70, 72], "union": [6, 7, 8, 9, 12, 13, 14, 15, 16, 18, 23, 24, 25, 26, 30, 31, 32, 33, 39, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 69, 70, 72], "nlevel": [6, 55, 61], "distinct": [6, 9, 13, 61], "rank": [6, 13, 24, 25, 33, 40, 55, 56, 61, 62, 66], "objtyp": [6, 13, 22, 24, 30, 33, 40], "binop": [6, 8, 13, 24, 33, 34], "registerablepiec": 6, "requiredpiec": 6, "from_cod": [6, 55, 61], "pre": [6, 35, 61], "comput": [6, 7, 9, 12, 13, 23, 24, 30, 33, 34, 39, 56, 59, 61, 63, 64, 65, 67, 68, 70, 72], "constructor": [6, 39, 61], "normal": [6, 7, 8, 9, 12, 13, 22, 24, 25, 34, 59, 61, 63, 64], "input": [6, 8, 9, 12, 23, 24, 25, 26, 30, 32, 34, 56, 58, 59, 61, 64, 67, 69, 70], "standardize_categori": 6, "share": [6, 13, 14, 24, 30, 33, 52], "origin": [6, 9, 12, 13, 16, 20, 23, 24, 26, 30, 33, 59, 61, 62, 63, 64, 68, 72], "remap": 6, "set_categori": 6, "new_categori": 6, "old": 6, "unchang": 6, "na": 6, "static": [6, 9, 12, 13, 14, 22, 24, 30, 31, 33, 34, 64], "from_return_msg": [6, 9, 13, 30, 31, 33], "repmsg": [6, 9, 13, 30, 31], "instanc": [6, 8, 9, 12, 13, 22, 24, 25, 30, 31, 33, 47, 50, 56, 59, 63, 64, 65, 67, 72], "point": [6, 9, 13, 14, 24, 25, 30, 31, 52, 62, 63, 67], "directli": [6, 13, 24, 30, 31, 32, 33, 39, 58, 60, 61, 63, 67, 72], "delimit": [6, 9, 13, 17, 30, 31, 33, 72], "process": [6, 9, 13, 15, 16, 22, 30, 31, 40, 45, 49, 52, 56, 68, 72], "produc": [6, 13, 33, 61, 72], "abstract": [6, 13, 24, 33], "__iter__": [6, 13, 24, 33], "_binop": [6, 8, 13, 24, 33, 34], "str_scalar": [6, 11, 13, 21, 33, 72], "op": [6, 8, 13, 24, 30, 33, 34], "within": [6, 8, 9, 12, 13, 22, 24, 25, 30, 33, 34, 40, 42, 62, 63, 64, 68], "binari": [6, 8, 13, 22, 24, 25, 33, 34, 47, 59], "perform": [6, 9, 12, 13, 16, 18, 23, 24, 26, 33, 39, 41, 47, 55, 56, 59, 62, 63, 64, 67], "encapsul": [6, 8, 13, 22, 24, 25, 29, 33, 34], "_r_binop": [6, 8, 13, 24, 34], "revers": [6, 8, 12, 13, 24, 34], "__eq__": [6, 13, 14, 24, 30, 33], "__ne__": [6, 13, 24, 33], "isna": 6, "reset_categori": 6, "recomput": [6, 13, 16, 30], "unus": 6, "slice": [6, 9, 13, 24, 39, 55, 60, 61, 63, 68, 72], "subset": [6, 9, 13, 30, 50, 59, 63, 68], "In": [6, 9, 12, 13, 16, 24, 33, 37, 39, 45, 47, 48, 50, 52, 56, 59, 64, 65, 66, 68, 71, 72], "case": [6, 7, 12, 13, 14, 16, 23, 24, 31, 33, 34, 39, 40, 47, 48, 50, 52, 59, 69], "elimin": [6, 42], "gener": [6, 9, 13, 22, 23, 24, 25, 27, 29, 30, 31, 33, 34, 36, 39, 40, 42, 47, 48, 52, 54, 56, 59, 62, 69], "substr": [6, 8, 13, 33, 55, 61], "whether": [6, 9, 12, 13, 16, 20, 26, 30, 31, 33, 34, 39, 56, 61, 68, 69, 70, 72], "significantli": [6, 61], "becaus": [6, 9, 13, 16, 25, 30, 33, 39, 40, 41, 45, 56, 61, 62, 63, 68, 72], "instead": [6, 8, 12, 13, 16, 24, 33, 48, 54, 56, 59, 61, 64, 72], "full": [6, 9, 13, 20, 23, 25, 33, 34, 45, 47, 53, 61, 72], "startswith": [6, 13, 33, 55, 61, 72], "endswith": [6, 13, 33, 55, 61, 72], "in1d": [6, 13, 26, 39, 55, 61, 70, 72], "against": [6, 13, 30, 33, 39, 56, 68, 72], "intersect1d": [6, 13, 26, 30, 39, 55, 68, 70], "union1d": [6, 13, 26, 30, 39, 55, 68, 70], "consid": [6, 72], "wise": [6, 13, 23, 55, 60], "b": [6, 7, 9, 12, 13, 16, 23, 24, 25, 26, 27, 30, 31, 32, 33, 39, 54, 58, 59, 63, 64, 65, 66, 67, 68, 70, 72], "scale": [6, 13, 27, 39, 44], "arbitrarili": 6, "larg": [6, 59], "cat": [6, 52], "cattwo": 6, "place": [6, 9, 12, 13, 24, 29, 33, 35, 37, 59, 64], "togeth": [6, 9, 12, 13, 33, 70], "guarante": [6, 13, 32, 33, 58, 72], "lie": [6, 13, 33], "contigu": [6, 13, 30, 33], "necessarili": [6, 13, 33], "groupbi": [6, 9, 12, 13, 24, 30, 33, 55, 61, 72], "simpli": [6, 7, 62], "even": [6, 9, 12, 13, 24, 34, 40, 59, 63, 64, 71], "rather": [6, 9, 13, 33], "128": [6, 13, 23, 33], "_get_grouping_kei": [6, 12, 13, 24, 33, 64], "privat": [6, 13, 24, 33], "groupabl": [6, 12, 13, 24, 26, 33, 64, 70], "co": [6, 12, 13, 23, 24, 25, 33, 55, 59, 64], "argsort": [6, 9, 12, 13, 14, 24, 32, 33, 55, 58, 59, 61, 63, 64, 72], "concaten": [6, 9, 13, 26, 30, 31, 33, 35, 55, 68, 69, 72], "merg": 6, "synchron": 6, "interleav": [6, 9, 13, 26, 62], "greatli": [6, 13, 26, 62], "improv": [6, 13, 26, 48, 50, 62], "determinist": [6, 13, 26, 62], "expens": 6, "slower": [6, 72], "prefix_path": [6, 9, 13, 14, 16, 24, 30, 33], "categorical_arrai": 6, "collect": [6, 9, 13, 14, 16, 24, 28, 30, 33, 48], "filenam": [6, 13, 14, 16, 24, 30, 33, 56], "written": [6, 13, 14, 16, 17, 24, 30, 33, 40, 41, 42, 43, 47, 56, 67], "impact": [6, 13, 14, 24, 30], "parquet": [6, 9, 13, 14, 16, 24, 30, 33, 41, 43, 56], "visibl": [6, 7, 13, 14, 16, 24, 30, 33, 71], "permiss": [6, 13, 14, 24, 30, 33], "form": [6, 11, 13, 14, 24, 29, 30, 33, 50, 72], "_local": [6, 13, 14, 24, 30, 33, 40], "numlocal": [6, 7, 13, 14, 16, 24, 30, 33, 71], "overwritten": [6, 13, 14, 16, 24, 30, 33, 40, 42], "less": [6, 12, 13, 14, 24, 30, 33, 34], "o": [6, 13, 14, 24, 29, 30, 33, 53, 55], "reli": [6, 13, 14, 24, 30, 33, 64], "to_parquet": [6, 9, 13, 14, 16, 24, 33, 42, 43, 56], "compress": [6, 9, 13, 14, 16, 24, 30, 33, 66, 68], "chunk": [6, 13, 14, 16, 24, 33], "snappi": [6, 9, 13, 14, 16, 24, 33, 42, 47], "gzip": [6, 9, 13, 14, 16, 24, 33, 42], "brotli": [6, 9, 13, 14, 16, 24, 33, 42], "zstd": [6, 9, 13, 14, 16, 24, 33, 42], "lz4": [6, 9, 13, 14, 16, 24, 33, 42], "On": [6, 7, 71], "due": [6, 13, 16, 42, 56], "compat": [6, 9, 13, 24, 30, 34, 35, 63, 64], "issu": [6, 9, 12, 13, 47, 52, 64, 68], "effici": [6, 9, 13, 14, 24, 33, 68, 72], "file_format": [6, 9, 13, 14, 16, 24, 33], "deprec": [6, 9, 12, 13, 14, 16, 24, 30, 33, 34, 56, 64], "differ": [6, 9, 12, 13, 16, 23, 24, 25, 26, 29, 30, 33, 34, 35, 39, 40, 42, 48, 49, 55, 56, 60, 62, 63, 64, 65, 70], "neither": [6, 13, 14, 24, 25, 33, 34, 62, 72], "nor": [6, 13, 14, 24, 25, 33, 62, 72], "import": [6, 8, 9, 13, 16, 23, 27, 29, 33, 40, 45, 47, 50, 63, 65, 71], "state": [6, 13, 22, 33], "charact": [6, 8, 13, 25, 33, 50, 72], "user_defined_nam": [6, 9, 12, 13, 24, 30, 33, 64], "underli": [6, 9, 12, 13, 23, 64], "now": [6, 9, 12, 13, 23, 24, 30, 33, 35, 42, 47, 49, 64, 65], "updat": [6, 9, 12, 13, 16, 24, 27, 33, 48, 52, 56, 64], "modif": [6, 9, 12, 13, 24, 33, 50, 63, 64], "fluid": [6, 9, 12, 13, 24, 33, 64], "registrationerror": [6, 9, 12, 13, 24, 30, 33, 64], "unregist": [6, 9, 12, 13, 24, 30, 31, 33, 35, 55, 64], "attach": [6, 9, 12, 13, 24, 30, 31, 33, 35, 55, 64], "unregister_categorical_by_nam": 6, "is_regist": [6, 9, 12, 13, 14, 24, 30, 31, 33, 55, 64], "immun": [6, 9, 12, 13, 24, 33, 64], "delet": [6, 7, 9, 12, 13, 24, 33, 45, 64], "until": [6, 9, 12, 13, 24, 33, 64], "previous": [6, 9, 12, 13, 14, 16, 24, 33, 64], "attempt": [6, 9, 12, 13, 14, 16, 24, 30, 32, 33, 35, 47, 56, 63, 64], "bool_": [6, 13, 24, 33, 59, 65], "registri": [6, 9, 12, 13, 14, 15, 24, 33, 64], "mi": 6, "_get_components_dict": 6, "dict": [6, 7, 9, 12, 13, 16, 17, 22, 28, 63, 64], "dictionari": [6, 7, 9, 12, 13, 16, 17, 22, 33, 50, 56, 63, 64], "components_dict": 6, "ve": 6, "_list_component_nam": [6, 13, 24, 33], "json": [6, 7, 13, 15, 22, 24, 29, 33], "about": [6, 7, 13, 15, 24, 33, 34, 45, 59, 60, 72], "pretty_print_info": [6, 13, 24, 33], "human": [6, 13, 15, 24, 33], "readabl": [6, 13, 15, 16, 24, 33, 40, 56], "parse_hdf_categor": 6, "conjunct": [6, 56, 61, 72], "load_al": [6, 13, 16, 43], "reconstitut": 6, "convent": 6, "structur": [6, 9, 13, 30, 39, 42, 63, 64, 67, 68, 72], "construct": [6, 13, 25, 30, 33, 34, 39, 55, 64, 66], "remov": [6, 9, 13, 24, 30, 33, 51, 63, 68, 72], "connect": [7, 13, 25, 29, 52, 55, 56], "localhost": [7, 45, 71], "5555": [7, 45, 71], "access_token": [7, 71], "connect_url": [7, 45, 71], "machin": [7, 37, 49, 71], "send": [7, 9, 13, 24, 25, 30, 56, 63, 71], "whicn": [7, 71], "interpret": [7, 13, 16, 56, 71], "socket": [7, 71], "enabl": [7, 13, 19, 24, 29, 47, 48, 50, 56, 71], "authent": [7, 29, 45, 71], "complet": [7, 37, 47, 49, 71, 72], "tcp": [7, 45, 71], "token_valu": [7, 71], "connectionerror": [7, 71], "pars": [7, 8, 9, 13, 14, 22, 24, 71], "success": [7, 13, 23, 30, 67, 71], "seen": [7, 71], "disconnect": [7, 13, 24], "shutdown": [7, 50], "symtabl": 7, "shut": [7, 45, 50], "down": [7, 13, 34, 45, 47, 50], "stop": [7, 13, 25, 62, 66], "runtim": 7, "serverhostnam": 7, "serverport": 7, "numpu": 7, "processor": 7, "maxtaskpar": 7, "physicalmemori": 7, "get_mem_us": 7, "as_perc": 7, "amount": [7, 9, 13, 24, 50, 63, 72], "symbol": [7, 13, 15, 22, 24, 30, 33, 35, 67], "kb": [7, 9, 13], "mb": [7, 9, 13], "gb": [7, 9, 13], "tb": 7, "pb": 7, "percent": 7, "alloc": 7, "get_mem_avail": 7, "get_server_command": 7, "retriev": [7, 13, 15, 24, 29, 31], "commandmap": [7, 50], "print_server_command": 7, "ruok": 7, "imok": 7, "imnotok": 7, "occur": [7, 9, 12, 13, 16, 21, 23, 24, 31, 33, 47, 64, 65, 69, 72], "basic": [7, 13, 24, 29, 52, 60, 67], "wai": [7, 40, 45, 50, 59, 61, 62, 63, 67, 72], "quick": 7, "healthcheck": 7, "handl": [7, 9, 13, 23, 33, 34, 41, 56, 63, 67, 72], "respons": [7, 13, 33], "latter": [7, 72], "bitvector": [8, 13], "width": [8, 13, 72], "64": [8, 13, 23, 24, 25, 62, 63, 67], "callback": [8, 13], "field": [8, 13, 22, 25, 33, 56, 72], "vector": [8, 12, 13, 55, 64], "signific": [8, 13, 23, 24, 32, 50, 58, 59], "callabl": [8, 9, 13, 63], "flag": [8, 13, 16, 27, 50, 71], "thin": [8, 13], "wrapper": [8, 13, 67], "mostli": [8, 13], "affect": [8, 13], "conserv": [8, 13], "export": [8, 13, 16, 23, 37, 47, 48, 49, 52, 65], "_cast": [8, 13], "upon": [8, 13, 23, 24, 33, 34, 49, 50, 51, 53, 59], "opeq": [8, 13, 24, 34], "msb_left": [8, 13], "pad": [8, 13], "show_int": [8, 13], "back": [8, 12, 13, 56, 64], "represent": [8, 13, 16, 24], "accord": [8, 9, 13, 23, 63, 67], "empti": [8, 9, 12, 13, 16, 22, 23, 24, 26, 31, 47, 59, 62, 63, 65, 69], "_convert_str": [8, 13], "_parse_scalar": [8, 13], "ip_address": [8, 13, 14, 57], "ip": [8, 13], "ipv4": [8, 13], "helper": [8, 9, 13, 33], "proof": [8, 13], "made": [8, 9, 13, 33, 72], "accomod": [8, 13], "ipv6": [8, 13], "prevent": [8, 13, 30, 40, 48, 68], "inadvert": [8, 13], "ipaddress": [8, 13], "_is_supported_scalar": [8, 13, 34], "is_ipv4": [8, 13], "ip2": [8, 13], "well": [8, 13, 39, 51], "ad": [8, 12, 13, 16, 39, 42, 47, 56, 64, 71], "deal": [8, 13], "is_ipv6": [8, 13], "initialdata": [9, 13, 63], "userdict": [9, 13, 28], "pd": [9, 13, 16, 25, 34, 39, 56, 63], "usernam": [9, 13, 29, 63], "alic": [9, 13, 63], "bob": [9, 13, 63], "carol": [9, 13, 63], "userid": [9, 13, 63, 64], "111": [9, 13, 63], "222": [9, 13, 63], "333": [9, 13, 63], "dai": [9, 13, 34, 63, 64], "224": [9, 13, 63], "slightli": [9, 13, 63], "7": [9, 12, 13, 23, 24, 25, 26, 30, 32, 39, 47, 48, 49, 51, 56, 58, 59, 60, 62, 63, 64, 66, 68, 70], "stride": [9, 13, 25, 30, 62, 63, 66], "148": [9, 13, 63], "112": [9, 13, 63], "96": [9, 13, 24, 63], "column_class": [9, 13], "__getattr__": [9, 13], "__dir__": [9, 13], "dir": [9, 13], "__delitem__": [9, 13], "_ncol": [9, 13], "actual": [9, 13, 30], "move": [9, 13, 30, 32, 39, 58, 62, 68], "_get_head_tail": [9, 13], "_get_head_tail_serv": [9, 13], "_shape_str": [9, 13], "ascii": [9, 13, 28, 31], "_repr_html_": [9, 13, 28], "html": [9, 13, 28, 47, 60], "_ipython_key_completions_": [9, 13], "from_panda": [9, 13], "pd_df": [9, 13, 39], "_drop_column": [9, 13], "drop": [9, 13, 24, 59], "axi": [9, 13, 27, 30, 31, 63, 68, 69], "_drop_row": [9, 13], "inplac": [9, 13, 63], "datefram": [9, 13, 63], "col_nam": [9, 13, 63], "drop_dupl": [9, 13, 63], "duplcat": [9, 13, 63], "iter": [9, 13, 16, 25, 32, 55, 56, 58], "dedup": [9, 13, 63], "last": [9, 13, 24, 25, 31, 32, 33, 50, 58, 63, 69, 71, 72], "_set_index": [9, 13], "reset_index": [9, 13, 63], "longer": [9, 13, 25, 40, 51, 63], "caller": [9, 13, 63], "correctli": [9, 13, 52, 63], "update_s": [9, 13], "_rename_column": [9, 13], "mapper": [9, 13, 63], "renam": [9, 13], "nonexist": [9, 13, 63], "_rename_index": [9, 13], "exactli": [9, 13, 34], "ignor": [9, 12, 13, 16, 23, 34, 63, 67], "99": [9, 13, 63], "lower": [9, 13, 33, 40, 63], "onto": [9, 13, 33, 72], "sens": [9, 13], "whose": [9, 13, 30, 31, 33, 69], "better": [9, 13], "remain": [9, 13, 16, 48, 56, 57, 63, 69], "concat": [9, 13, 14, 30, 31, 63, 69], "essenti": [9, 13, 24, 30, 33, 63, 68], "diffen": [9, 13, 63], "head": [9, 13, 31], "quickli": [9, 13, 37, 63], "select": [9, 13, 16, 30, 47, 53, 63, 68], "tail": [9, 13, 25, 31], "sampl": [9, 13, 25], "random": [9, 13, 25, 54, 55], "use_seri": [9, 13, 63], "oject": [9, 13], "memory_usag": [9, 13], "One": [9, 12, 13, 24, 31, 39, 64, 69], "to_panda": [9, 13, 14, 31, 34, 39, 63, 69], "datalimit": [9, 13, 63], "retain_index": [9, 13, 63], "megabyt": [9, 13, 63], "estim": [9, 12, 13, 24, 59, 63, 64], "book": [9, 13, 63], "_prep_data": [9, 13], "disk": [9, 13, 72], "preserv": [9, 13, 31, 69, 72], "across": [9, 13, 16, 40, 56], "suffix": [9, 13, 30, 33, 40, 55, 72], "load": [9, 13, 14, 16, 22, 24, 30, 33, 40, 42, 43, 52, 56], "infer": [9, 11, 12, 13, 16, 25, 35, 40, 56], "ascend": [9, 12, 13, 14, 23, 31, 57, 63, 65, 69], "coargsort": [9, 13, 32, 55, 58, 61, 63, 72], "sort_valu": [9, 13, 31, 63, 69], "descend": [9, 13, 25, 31, 62, 63, 69], "apply_permut": [9, 13, 63], "perm": [9, 13, 32, 35, 58, 63], "entir": [9, 13, 30, 33, 63, 68], "unsort": [9, 13, 63], "arbitrari": [9, 13, 63], "invers": [9, 13, 35, 63], "minim": [9, 13, 62, 63], "filter_by_rang": [9, 13], "count": [9, 12, 13, 21, 23, 24, 30, 31, 33, 34, 39, 55, 59, 64, 68, 72], "highest": [9, 13, 24, 25], "unlimit": [9, 13], "qualifi": [9, 13], "filter_by_count": [9, 13], "copi": [9, 13, 30, 32, 68], "deep": [9, 13, 30, 63], "reflect": [9, 13, 63, 68], "without": [9, 13, 16, 24, 47, 56, 63], "shallow": [9, 13, 63], "vice": [9, 13, 56, 63], "versa": [9, 13, 56, 63], "alia": [9, 12, 13, 30, 34, 63, 64], "isin": [9, 13, 31], "show": [9, 13, 16, 27, 47, 56, 60, 64], "col_a": [9, 13], "col_b": [9, 13], "position": [9, 13], "other_df": [9, 13], "col_c": [9, 13], "corr": [9, 13, 24], "pairwis": [9, 13], "correl": [9, 13, 24], "matrix": [9, 12, 13, 64], "pearson": [9, 13, 24], "unregister_dataframe_by_nam": [9, 13], "mismatch": [9, 12, 13, 47, 64], "unregister_groupby_by_nam": [9, 12, 13, 55, 64], "_parse_col_nam": [9, 13], "entrynam": [9, 13], "dfname": [9, 13], "pull": [9, 13, 25, 35, 40, 62], "columnnam": [9, 13], "columntyp": [9, 13], "analog": [9, 12, 13, 34, 64], "intx": [9, 13], "ident": [9, 13, 35, 59, 67], "categor": [9, 12, 13, 14, 16, 23, 26, 30, 31, 32, 35, 36, 55, 57, 58, 62, 63, 64, 65, 69, 70], "intersect": [9, 13, 26, 30, 39, 55, 70], "posit": [9, 13, 20, 21, 24, 31, 33, 66, 69, 72], "equal": [9, 13, 18, 23, 40, 42, 65, 68], "invert_permut": [9, 13, 35], "objtypedec": [10, 13], "orig_cl": [10, 13], "float64": [11, 12, 13, 23, 24, 25, 26, 32, 54, 58, 59, 62, 63, 64, 65, 67, 70], "uint8": [11, 13, 23, 40, 59, 62, 65, 67, 72], "str_": [11, 13, 59, 65, 72], "bigint": [11, 13, 23, 24, 25, 56, 62, 67], "inttyp": [11, 13], "bittyp": [11, 13], "bool_scalar": [11, 13], "float_scalar": [11, 13, 25], "numeric_scalar": [11, 13, 23, 24, 25, 59, 62], "numpy_scalar": [11, 13, 24, 59], "all_scalar": [11, 13, 25, 62], "enum": [11, 13, 19, 22, 23, 40], "arkouda_supported_dtyp": [11, 13], "dtypeobject": [11, 13], "check_np_dtyp": [11, 13], "dt": [11, 13, 18, 23, 31, 67], "assert": [11, 13], "translate_np_dtyp": [11, 13], "split": [11, 13, 21, 33, 55], "kind": [11, 13], "unsupport": [11, 12, 13, 16, 29, 32, 56, 70], "resolve_scalar_dtyp": [11, 13], "get_byteord": [11, 13], "concret": [11, 13], "byteord": [11, 13], "turn": [11, 13, 31, 45, 69], "get_server_byteord": [11, 13], "pda": [12, 13, 23, 24, 25, 32, 34, 58, 59, 62, 65, 67, 70], "return_group": [12, 70], "assume_sort": [12, 64, 70], "come": [12, 56, 62, 70], "consider": [12, 70, 72], "groupby_reduction_typ": 12, "usual": [12, 64], "prepar": [12, 47, 64], "nkei": [12, 13, 31, 55, 64], "unique_kei": [12, 55, 64], "ngroup": [12, 55, 64], "logger": [12, 13, 33, 36, 55, 64], "arkoudalogg": [12, 13, 19, 33, 64], "nativ": [12, 41, 42, 48, 56, 64, 68], "inherit": [12, 64, 67], "overload": [12, 64], "reduct": [12, 13, 24, 54, 55, 64, 65], "conform": [12, 64], "randint": [12, 13, 23, 25, 32, 39, 55, 58, 59, 62, 64, 65], "skipna": [12, 64], "ddof": [12, 13, 24, 34, 59, 64, 65], "reduc": [12, 64], "nan": [12, 13, 23, 31, 64, 67], "delta": [12, 13, 18, 24, 59, 64, 65], "degre": [12, 13, 24, 59, 64, 65], "freedom": [12, 13, 24, 59, 64, 65], "calcul": [12, 13, 16, 24, 26, 40, 56, 59, 64, 65, 70], "std": [12, 13, 24, 34, 55, 59, 64, 65], "linspac": [12, 13, 23, 25, 55, 59, 62, 64, 67], "sum": [12, 13, 23, 24, 30, 34, 55, 59, 64, 65], "8": [12, 13, 24, 25, 30, 32, 33, 39, 49, 51, 56, 58, 59, 60, 62, 63, 64, 66, 67, 68], "77777777777777768": [12, 64], "55555555555555536": [12, 64], "33333333333333348": [12, 64], "11111111111111116": [12, 64], "min": [12, 13, 23, 24, 30, 34, 55, 59, 64, 65], "77777777777777779": [12, 64], "55555555555555558": [12, 64], "33333333333333337": [12, 64], "33333333333333326": [12, 64], "group_sum": [12, 64], "14": [12, 39, 49, 59, 60, 64, 66], "prod": [12, 13, 24, 30, 55, 59, 64, 65], "product": [12, 13, 23, 24, 25, 56, 59, 60, 64, 65], "multipli": [12, 64], "group_product": [12, 64], "108": [12, 64], "00000000000003": [12, 64], "9999999999999982": [12, 64], "varianc": [12, 13, 24, 49, 59, 64, 65], "group_var": [12, 64], "averag": [12, 13, 24, 25, 59, 64], "squar": [12, 13, 24, 59, 64], "deviat": [12, 13, 24, 25, 34, 59, 64, 65], "len": [12, 13, 24, 30, 33, 59, 64, 66, 68, 72], "howev": [12, 13, 23, 24, 40, 47, 51, 52, 59, 61, 64], "divisor": [12, 13, 24, 59, 64], "statist": [12, 13, 24, 55, 59, 64], "unbias": [12, 13, 24, 59, 64], "hypothet": [12, 13, 24, 59, 64], "infinit": [12, 13, 24, 59, 64], "likelihood": [12, 13, 24, 59, 64], "333333333333333": [12, 64], "group_std": [12, 64], "sqrt": [12, 13, 24, 59, 64], "se": [12, 13, 24, 59, 64], "5275252316519465": [12, 64], "0954451150103321": [12, 64], "group_mean": [12, 64], "6666666666666665": [12, 64], "7999999999999998": [12, 64], "median": [12, 55, 64], "group_median": [12, 64], "75": [12, 13, 25, 62, 64], "minimum": [12, 13, 24, 25, 34, 47, 59, 64, 65], "minima": [12, 64], "group_minima": [12, 64], "max": [12, 13, 23, 24, 30, 33, 34, 55, 59, 64, 65, 72], "maxima": [12, 64], "group_maxima": [12, 64], "argmin": [12, 13, 24, 30, 55, 59, 64, 65], "group_argminima": [12, 64], "argmax": [12, 13, 24, 30, 55, 59, 64, 65], "group_argmaxima": [12, 64], "_nested_grouping_help": 12, "nuniqu": [12, 13, 30, 55, 64], "group_nuniqu": [12, 64], "group_ani": [12, 64], "OR": [12, 13, 30, 55, 64], "bitwis": [12, 64, 67], "AND": [12, 13, 30, 55, 64], "xor": [12, 13, 24, 30, 55, 64], "groupable_element_typ": [12, 13, 26, 31, 64, 69], "modal": [12, 64], "segarrai": [12, 13, 35, 36, 55, 63, 64], "broadcast": [12, 13, 24, 35, 55, 64], "fill": [12, 13, 24, 25, 54, 62, 64], "constant": [12, 13, 24, 55, 64], "put": [12, 64], "tensor": [12, 64], "replic": [12, 64], "zero": [12, 13, 23, 24, 25, 55, 62, 64, 66, 67], "With": [12, 50, 60, 64, 66], "build_from_compon": [12, 55, 64], "init": [12, 64], "rebuild": [12, 64], "orig_kei": [12, 64], "_get_groupby_required_piec": 12, "most_common": [12, 35, 55, 64], "total": [12, 13, 16, 33, 56], "nonzero": [12, 13, 21, 33, 72], "go": [12, 48, 52, 62], "invert": [12, 13, 26, 70], "suppli": [12, 13, 16, 25, 30, 40, 42, 43, 62, 63], "row_start": 12, "nnz": 12, "row_numb": 12, "_version": [13, 36], "accessor": [13, 36], "align": [13, 31, 36], "array_view": [13, 16, 36, 60], "client_dtyp": [13, 36], "groupbyclass": [13, 26, 31, 36], "infoclass": [13, 36], "io": [13, 36, 41, 42, 43], "io_util": [13, 36], "join": [13, 30, 33, 36, 55], "matcher": [13, 33, 36], "pdarraycr": [13, 24, 36], "pdarraysetop": [13, 30, 36, 68], "plot": [13, 23, 36, 56, 65], "secur": [13, 23, 36], "timeclass": [13, 36], "__version__": 13, "akcast": 13, "errormod": [13, 23, 67], "strict": [13, 23, 67], "target": [13, 17, 23, 25, 47, 56, 62, 66, 67], "return_valid": [13, 23, 67], "never": [13, 23, 67], "uninterpret": [13, 23, 67], "63": [13, 23, 24, 67], "succeed": [13, 23, 67], "chapel": [13, 22, 23, 40, 44, 45, 47, 50, 51, 52, 53, 67, 71, 72], "rule": [13, 23, 67], "NOT": [13, 23, 47, 56, 67], "safe": [13, 23, 67], "underflow": [13, 23, 67], "precis": [13, 16, 23, 56, 67], "capac": [13, 23, 67], "hold": [13, 23, 67], "cumprod": [13, 23, 55, 59], "cumul": [13, 23, 27, 54, 59], "th": [13, 23, 30, 59, 68], "uniform": [13, 23, 25, 32, 56, 58, 59, 62], "5728783400481925": [13, 23, 59], "0472855509390593": [13, 23, 59], "33": [13, 23, 59], "78523998586553": [13, 23, 59], "134": [13, 23, 59], "05309592737584": [13, 23, 59], "450": [13, 23, 59], "21589865655358": [13, 23, 59], "choos": [13, 23, 49, 52, 59, 71], "claus": [13, 23, 59], "unequ": [13, 23, 59], "a1": [13, 18, 23, 59], "a2": [13, 18, 23, 59], "cond": [13, 23, 59], "create_pdarrai": 13, "datatyp": [13, 25, 40], "gpu": [13, 24], "six": [13, 33, 72], "parse_single_valu": 13, "msg": [13, 22], "mydtyp": [13, 24, 67], "attributi": [13, 24, 67], "resid": [13, 24, 33, 67], "opeqop": [13, 24], "__array_priority__": [13, 24], "1000": [13, 18, 24, 65], "__del__": [13, 24], "__bool__": [13, 24], "format_oth": [13, 24], "__add__": [13, 24, 33], "__radd__": [13, 24, 33], "__sub__": [13, 24], "__rsub__": [13, 24], "__mul__": [13, 24], "__rmul__": [13, 24], "__truediv__": [13, 24], "__rtruediv__": [13, 24], "__floordiv__": [13, 24], "__rfloordiv__": [13, 24], "__mod__": [13, 24], "__rmod__": [13, 24], "__lshift__": [13, 24], "__rlshift__": [13, 24], "__rshift__": [13, 24], "__rrshift__": [13, 24], "__and__": [13, 24], "__rand__": [13, 24], "__or__": [13, 24], "__ror__": [13, 24], "__xor__": [13, 24], "__rxor__": [13, 24], "__pow__": [13, 24], "__rpow__": [13, 24], "__lt__": [13, 24], "__gt__": [13, 24], "__le__": [13, 24], "__ge__": [13, 24], "__neg__": [13, 24], "__invert__": [13, 24], "__iadd__": [13, 24], "__isub__": [13, 24], "__imul__": [13, 24], "__itruediv__": [13, 24], "__imod__": [13, 24], "__ifloordiv__": [13, 24], "__ilshift__": [13, 24], "__irshift__": [13, 24], "__iand__": [13, 24], "__ior__": [13, 24], "__ixor__": [13, 24], "__ipow__": [13, 24], "is_sort": [13, 24, 55, 59, 65], "monoton": [13, 24, 59, 65], "decreas": [13, 24, 25, 59, 62, 65], "numeric_and_bool_scalar": [13, 24], "occurr": [13, 21, 23, 24, 33, 59, 65, 72], "cov": [13, 24], "y": [13, 24, 27, 37, 48], "covari": [13, 24], "coeffici": [13, 24], "mink": [13, 24, 34, 50, 55, 59, 65], "k": [13, 24, 34, 59, 65], "maxk": [13, 24, 34, 50, 55, 59, 65], "argmink": [13, 24, 55, 59, 65], "argmaxk": [13, 24, 55, 59, 65], "popcount": [13, 24], "pariti": [13, 24], "clz": [13, 24], "lead": [13, 24, 33], "ctz": [13, 24], "trail": [13, 24, 33], "rotl": [13, 24], "rotat": [13, 24], "rotr": [13, 24], "astyp": [13, 24, 33], "shorthand": [13, 24, 33], "slice_bit": [13, 24], "bottom": [13, 24], "65": [13, 24], "bin": [13, 23, 24, 27, 47, 48, 49, 52, 65], "0b101111111111111111111111111111111111111111111111111111111111111111": [13, 24], "0b10": [13, 24], "bigint_to_uint_arrai": [13, 24, 25], "18446744073709551616": [13, 24, 25], "18446744073709551617": [13, 24, 25], "18446744073709551618": [13, 24, 25], "18446744073709551619": [13, 24, 25], "18446744073709551620": [13, 24, 25], "give": [13, 24, 31, 47, 51, 69, 71], "fastest": [13, 24], "fortran": [13, 24, 67], "to_cuda": [13, 24], "numba": [13, 24], "devicend": [13, 24], "builtin": [13, 24], "devicendarrai": [13, 24], "importerror": [13, 24], "cuda": [13, 24], "modulenotfounderror": [13, 24], "cours": [13, 24], "name_prefix_local": [13, 16, 24], "to_parqet": [13, 24], "h5": [13, 16, 24, 56], "node": [13, 24, 40, 54, 56], "name_prefix": [13, 16, 24, 56], "insensit": [13, 14, 24, 33], "save_al": [13, 14, 16, 24, 43], "later": [13, 24, 33, 51], "former": [13, 24, 33, 72], "free": [13, 24, 33], "registr": [13, 24, 33], "list_registri": [13, 15, 24], "unregister_pdarray_by_nam": [13, 24], "100": [13, 23, 24, 39, 59], "my_zero": [13, 24], "potenti": [13, 24], "reconnect": [13, 24], "attahc": [13, 24], "could": [13, 22, 24, 27, 30, 33, 50, 72], "bound": [13, 24, 25, 30, 34, 62, 68], "consecut": [13, 25, 31, 62], "third": [13, 25, 62], "zerodivisionerror": [13, 25, 62], "neg": [13, 25, 30, 62, 66, 68], "max_bit": [13, 25, 56], "compos": [13, 22, 25, 33, 45, 56], "dequ": [13, 25, 56], "nbyte": [13, 25, 33, 56], "malform": [13, 22, 25, 56], "overwhelm": [13, 25, 56], "bandwidth": [13, 25, 56], "pdrrai": [13, 25, 56], "twice": [13, 25, 56], "recurs": [13, 25, 56], "respect": [13, 23, 24, 25, 26, 34, 56, 62], "Ones": [13, 25, 62], "parseabl": [13, 25, 62], "ones_lik": [13, 25, 55, 62], "zeros_lik": [13, 25, 55, 62], "issupportedint": 13, "num": 13, "strings_pdarrai": [13, 33], "bytes_s": [13, 33], "composit": [13, 33], "raw": [13, 33, 72], "rep_msg": [13, 30, 33, 50], "factori": [13, 14, 22, 33], "1234": [13, 33], "probabl": [13, 33], "from_part": [13, 30, 33], "offset_attrib": [13, 33], "bytes_attrib": [13, 33], "assembl": [13, 33], "entiti": [13, 33], "get_length": [13, 33], "encod": [13, 33, 72], "toencod": [13, 33], "fromencod": [13, 33], "utf": [13, 33], "decod": [13, 33], "to_low": [13, 33], "uppercas": [13, 25, 33], "lowercas": [13, 25, 33], "to_upp": [13, 33], "to_titl": [13, 33], "titlecas": [13, 33], "is_low": [13, 33], "is_upp": [13, 33], "upper": [13, 33], "is_titl": [13, 33], "mix": [13, 33, 34, 60], "strip": [13, 33], "char": [13, 33], "omit": [13, 33, 34, 40], "whitespac": [13, 16, 33], "combin": [13, 33, 34], "1string": [13, 33], "cached_regex_pattern": [13, 33], "regex": [13, 33, 72], "pattern": [13, 20, 21, 33, 39, 64, 72], "purge_cached_regex_pattern": [13, 33], "purg": [13, 33], "_empty_pattern_verif": [13, 33], "_get_match": [13, 33], "fetch": [13, 33], "find_loc": [13, 21, 33, 55, 72], "postit": [13, 33, 72], "positon": [13, 33, 72], "findal": [13, 21, 33, 55, 72], "num_match": [13, 33, 72], "regular": [13, 33, 55], "1_2___": [13, 20, 33, 72], "____": [13, 20, 33, 72], "__4___5____6___7": [13, 20, 33, 72], "span": [13, 33, 72], "begin": [13, 33, 66, 72], "fullmatch": [13, 33, 55, 72], "whole": [13, 33, 72], "maxsplit": [13, 21, 33, 72], "return_seg": [13, 21, 33, 72], "5____6___7": [13, 33, 72], "return_match_origin": [13, 20, 21, 33, 72], "conta": [13, 33, 72], "___": [13, 33, 72], "__": [13, 20, 33, 72], "sub": [13, 21, 30, 33, 55, 72], "repl": [13, 21, 33, 72], "obtain": [13, 21, 33, 72], "substitut": [13, 21, 33, 45, 47, 72], "substitu": [13, 33, 72], "subn": [13, 33, 55, 72], "new_str": [13, 33, 72], "number_of_substit": [13, 33, 72], "re2": [13, 33, 47, 72], "lookahead": [13, 33, 72], "lookbehind": [13, 33, 72], "rasi": [13, 33, 72], "ior": [13, 33, 72], "strings_end": [13, 33, 72], "strings_start": [13, 33, 72], "ing": [13, 33, 72], "flatten": [13, 30, 33, 40, 55, 68], "flat": [13, 33, 72], "peel": [13, 33, 55, 72], "rpeel": [13, 33, 55, 72], "orig": [13, 33, 72], "one_two": [13, 33, 72], "three_____four____f": [13, 33, 72], "under_flat": [13, 33, 72], "under_map": [13, 33, 72], "includedelimit": [13, 33, 72], "keepparti": [13, 33, 72], "fromright": [13, 33, 72], "off": [13, 33, 72], "partit": [13, 33, 72], "experiment": [13, 33, 72], "sought": [13, 33, 72], "prepend": [13, 30, 33, 55, 72], "remaind": [13, 33, 72], "stick": [13, 33, 55, 72], "lstick": [13, 33, 55, 72], "rpartit": [13, 33, 72], "compar": [13, 33, 54, 56, 72], "toleft": [13, 33, 72], "insert": [13, 33, 72], "get_prefix": [13, 30, 33, 55, 68], "return_origin": [13, 30, 33, 68], "proper": [13, 30, 33, 35, 68], "enough": [13, 30, 33, 40, 68], "mask": [13, 30, 33, 68], "origin_indic": [13, 30, 33, 68], "get_suffix": [13, 30, 33, 55, 68], "ith": [13, 33], "siphash128": [13, 33], "balanc": [13, 33], "realist": [13, 33], "collis": [13, 23, 33], "neglig": [13, 33], "compil": [13, 33, 47, 48, 49, 52], "ssegmentedstr": [13, 33], "usehash": [13, 33], "mere": [13, 33], "hello": [13, 33, 56, 72], "my": [13, 33, 56, 72], "world": [13, 33, 56, 72], "u5": [13, 33, 56, 72], "segstr": [13, 22, 33], "_comp_to_ndarrai": [13, 33], "comp": [13, 33], "strings_arrai": [13, 33, 40], "save_offset": [13, 33], "deriv": [13, 16, 17, 22, 23, 33, 67], "unregister_strings_by_nam": [13, 33], "clear": [13, 24], "smallest": [13, 24, 31, 59, 69], "outperform": [13, 24, 59], "grow": [13, 24, 59], "beyond": [13, 24, 39, 59], "certain": [13, 24, 37, 50, 59], "depend": [13, 24, 48, 49, 52, 53, 59, 68], "million": [13, 23, 24, 59], "degred": [13, 24, 59], "largest": [13, 24, 31, 59, 69], "degrad": [13, 24, 59], "maxmum": [13, 24, 59], "odd": [13, 24], "lz": [13, 24], "62": [13, 24], "61": [13, 24], "60": [13, 24], "rot": [13, 24], "160": [13, 24], "384": [13, 24], "896": [13, 24], "2048": [13, 24], "4608": [13, 24], "512": [13, 24], "256": [13, 24], "56": [13, 24], "32": [13, 24, 29, 39, 40], "18": [13, 24, 59, 60, 66], "pdarri": [13, 24], "pdaarrai": [13, 24], "At": [13, 24], "elsewher": [13, 24], "retain": [13, 24, 35], "4142135623730951": [13, 24], "7320508075688772": [13, 24], "power": [13, 24, 44, 66], "pwr": [13, 24], "uniniti": [13, 24], "vari": [13, 24, 39, 47, 49, 51, 53, 68], "27": [13, 24, 39, 60], "attach_pdarrai": [13, 24], "algorithm": [13, 23, 32, 45, 58], "sortingalgorithm": [13, 32, 58], "radixsortlsd": [13, 32, 58], "digit": [13, 32, 58], "radix": [13, 32, 58], "stabl": [13, 32, 58, 60], "resili": [13, 32, 58], "intens": [13, 32, 39, 58, 62], "forward": [13, 32, 52, 58, 68], "thu": [13, 25, 32, 40, 41, 58, 68], "lexicograph": [13, 32, 58], "pda1": [13, 26, 70], "pda2": [13, 26, 70], "assume_uniqu": [13, 26, 70], "1d": [13, 26, 30, 31, 68, 69, 70], "multia": [13, 26, 70], "multib": [13, 26, 70], "setdiff1d": [13, 26, 30, 39, 55, 68, 70], "setxor1d": [13, 26, 30, 39, 55, 68, 70], "fill_valu": [13, 25], "deleg": [13, 23, 25, 62, 65], "accordingli": [13, 25, 62], "full_lik": [13, 25], "linearli": [13, 25, 34, 62], "evenli": [13, 23, 25, 62, 65], "along": [13, 25, 62], "greater": [13, 25, 62], "seed": [13, 25, 54, 62], "drawn": [13, 25, 62], "uniformli": [13, 25, 62], "undefin": [13, 25, 62], "92176432277231968": [13, 25, 62], "083130710959903542": [13, 25, 62], "68894208386667544": [13, 25, 62], "9160772326374946": [13, 25, 62], "353429832157099": [13, 25, 62], "5392023718621486": [13, 25, 62], "invok": [13, 22, 25], "30013431967121934": [13, 25], "47383036230759112": [13, 25], "0441791878997098": [13, 25], "standard_norm": [13, 25], "draw": [13, 25], "mu": [13, 25], "sigma": [13, 25], "68586185091150265": [13, 25], "1723810583573375": [13, 25], "567584107142031": [13, 25], "random_strings_uniform": [13, 25], "minlen": [13, 25], "maxlen": [13, 25], "printabl": [13, 25], "random_strings_lognorm": [13, 25], "tvkj": [13, 25], "ewab": [13, 25], "hfmd": [13, 25], "4k": [13, 25], "hff": [13, 25], "logmean": [13, 25], "logstd": [13, 25], "lognorm": [13, 25], "exp": [13, 23, 25, 55, 59], "heavi": [13, 25], "toward": [13, 25], "tvkjte": [13, 25], "abocorhfm": [13, 25], "ludmmgtb": [13, 25], "kwoqnphz": [13, 25], "vsxrrl": [13, 25], "fp": [13, 25], "3q4kc": [13, 25], "hf": [13, 25], "ie": [13, 25], "djkba": [13, 25], "5oz1": [13, 25], "from_seri": [13, 25], "overridden": [13, 22, 25, 29], "unknown": [13, 16, 25], "situat": [13, 25], "datetim": [13, 22, 25, 34], "timedelta": [13, 22, 25, 34], "57600036956445599": [13, 25], "41619265571741659": [13, 25], "6615356693784662": [13, 25], "choic": [13, 25, 47], "to_datetim": [13, 25], "2018": [13, 25], "datetime64": [13, 25, 34], "01": [13, 25, 45], "1514764800000000000": [13, 25], "nanosecond": [13, 25, 34], "ab": [13, 23, 34, 55, 59], "natur": [13, 23, 59], "logarithm": [13, 23, 59], "3025850929940459": [13, 23, 59], "6051701859880918": [13, 23, 59], "3219280948873626": [13, 23, 59], "6438561897747253": [13, 23, 59], "exponenti": [13, 23, 59], "7182818284590451": [13, 23, 59], "3890560989306504": [13, 23, 59], "085536923187668": [13, 23, 59], "54": [13, 23, 59], "598150033144236": [13, 23, 59], "84010843172504": [13, 23, 59], "46": [13, 23, 59], "454368507659211": [13, 23, 59], "5571769623557188": [13, 23, 59], "494295836924771": [13, 23, 59], "13": [13, 23, 59, 60, 65, 66], "478894913238722": [13, 23, 59], "cumsum": [13, 23, 55, 59], "1598310770203937": [13, 23, 59], "4110385860243131": [13, 23, 59], "1622479306453748": [13, 23, 59], "710615785506533": [13, 23, 59], "945880905466208": [13, 23, 59], "sin": [13, 23, 55, 59], "sine": [13, 23, 59], "cosin": [13, 23, 59], "siphash": [13, 23], "risk": [13, 23, 40], "few": [13, 23, 39], "small": [13, 23, 40, 56], "strongli": [13, 23], "cryptograph": [13, 23], "applic": [13, 23, 56, 62, 64], "Not": [13, 23, 34, 63], "emploi": [13, 23], "adversari": [13, 23], "engin": [13, 23], "histogram": [13, 23, 27, 55], "edg": [13, 23, 27, 65], "notimplementederror": [13, 23, 65], "value_count": [13, 23, 31, 55, 65, 69], "matplotlib": [13, 23, 27, 51, 65], "pyplot": [13, 23, 27, 65], "plt": [13, 23, 27, 65], "nbin": [13, 23, 65], "h": [13, 23, 27, 34, 54, 65, 71], "unique_valu": [13, 23, 65], "return_count": [13, 23, 65], "isnan": [13, 23], "enumer": [13, 22, 23], "join_on_eq_with_dt": [13, 18], "t1": [13, 18], "t2": [13, 18], "pred": [13, 18], "result_limit": [13, 18], "inner": [13, 18], "window": [13, 18, 29, 45, 53], "predic": [13, 18], "timestamp": [13, 18], "milli": [13, 18], "result_array_on": [13, 18], "true_dt": [13, 18], "abs_dt": [13, 18], "pos_dt": [13, 18], "enableverbos": [13, 19], "debug": [13, 19, 37], "disableverbos": [13, 19], "loglevel": [13, 19], "disabl": [13, 19, 37], "defaultt": [13, 19], "akab": 13, "_base_unit": [13, 34], "_unit2normunit": [13, 34], "_unit2factor": [13, 34], "_get_factor": [13, 34], "_ident": [13, 34], "_timescalar": [13, 34], "_abstractbasetim": [13, 34], "face": [13, 30, 34, 67], "albeit": [13, 34], "rel": [13, 34], "behind": [13, 34], "scene": [13, 34], "transpar": [13, 34], "_get_callback": [13, 34], "floor": [13, 34], "freq": [13, 34], "round": [13, 34], "nearest": [13, 34], "m": [13, 20, 30, 34, 47, 52, 72], "__class__": [13, 34], "ceil": [13, 34], "midpoint": [13, 34], "_is_datetime_scalar": [13, 34], "_is_timedelta_scalar": [13, 34], "_scalar_callback": [13, 34], "datetimeindex": [13, 34], "timeseri": [13, 34], "denot": [13, 34], "carri": [13, 34], "sensit": [13, 34], "sec": [13, 34], "accept": [13, 31, 34, 69], "week": [13, 34, 64], "w": [13, 20, 34, 72], "hour": [13, 34], "minut": [13, 34], "millisecond": [13, 34], "l": [13, 16, 34, 37, 39, 47, 56], "microsecond": [13, 34], "unlik": [13, 30, 34], "month": [13, 34], "year": [13, 34], "day_of_year": [13, 34], "dayofyear": [13, 34], "day_of_week": [13, 34], "dayofweek": [13, 34, 64], "weekdai": [13, 34], "weekofyear": [13, 34], "is_leap_year": [13, 34], "supported_with_datetim": [13, 34], "supported_with_r_datetim": [13, 34], "supported_with_timedelta": [13, 34], "supported_with_r_timedelta": [13, 34], "supported_opeq": [13, 34], "supported_with_pdarrai": [13, 34], "supported_with_r_pdarrai": [13, 34], "_ensure_compon": [13, 34], "isocalendar": [13, 34], "otherclass": [13, 34], "durat": [13, 34], "timedeltaindex": [13, 34], "timedelta64": [13, 34], "total_second": [13, 34], "date_rang": [13, 34], "period": [13, 34], "tz": [13, 34], "impos": [13, 34], "dateoffset": [13, 34], "5h": [13, 34], "offset_alias": [13, 34], "alias": [13, 34], "tzinfo": [13, 34], "zone": [13, 34], "asia": [13, 34], "hong_kong": [13, 34], "timezon": [13, 34], "naiv": [13, 34], "midnight": [13, 34], "boundari": [13, 34], "effect": [13, 34, 70], "rng": [13, 34], "Of": [13, 34], "learn": [13, 34, 45], "timedelta_rang": [13, 34], "allsymbol": [13, 15], "__allsymbols__": [13, 15], "registeredsymbol": [13, 15], "__registeredsymbols__": [13, 15], "list_symbol_t": [13, 15], "pretty_print_inform": [13, 15], "akbool": 13, "akint64": 13, "path_prefix": [13, 16], "calc_string_offset": [13, 16, 56], "detect": [13, 16, 40, 56], "termin": [13, 16, 40, 45, 52, 71], "invalid": [13, 16, 56], "filenotfound": [13, 16], "glob": [13, 16, 56], "read_": [13, 16], "filetyp": [13, 16, 56], "getarkoudalogg": 13, "logformat": 13, "default_log_format": 13, "conveni": [13, 49, 56], "instanti": [13, 22], "streamhandl": 13, "consol": 13, "lineno": 13, "levelnam": 13, "dynam": 13, "gen_rang": [13, 30], "pair": [13, 17, 22, 30, 68], "_aggreg": [13, 30], "func": [13, 30], "non_empti": [13, 30], "non_empty_count": [13, 30], "valsiz": [13, 30], "sent": [13, 22, 30, 41], "_from_attach_return_msg": [13, 30], "from_multi_arrai": [13, 30], "transpos": [13, 30, 56], "_compute_non_empti": [13, 30], "vertic": [13, 30, 31, 68], "horizont": [13, 30, 31, 68, 69], "unord": [13, 30], "yet": [13, 30, 56, 60], "get_ngram": [13, 30, 55, 68], "gram": [13, 30, 68], "came": [13, 30, 68], "ngram": [13, 30, 55], "_normalize_index": [13, 30], "j": [13, 30, 37, 68], "get_jth": [13, 30, 55, 68], "set_jth": [13, 30, 55, 68], "v": [13, 14, 30, 47, 54, 68], "get_length_n": [13, 30, 55, 68], "increas": [13, 30, 68], "append_singl": [13, 30, 55, 68], "prepend_singl": [13, 30, 55, 68], "remove_repeat": [13, 30, 55, 68], "return_multipl": [13, 30, 68], "condens": [13, 30, 68], "norepeat": [13, 30, 68], "segarr": [13, 30, 68], "segment_suffix": [13, 30], "_segment": [13, 30, 40], "value_suffix": [13, 30], "_valu": [13, 30, 40], "top": [13, 30, 31, 40, 47, 53, 69], "nest": [13, 30, 40], "seg_a": [13, 30, 68], "seg_b": [13, 30, 68], "setdiff": [13, 30, 55, 68], "setxor": [13, 30, 55, 68], "unregister_segarray_by_nam": [13, 30], "individu": [13, 28, 37, 72], "akfloat64": 13, "convert_if_categor": [13, 35], "generic_concat": [13, 35], "get_callback": [13, 35], "earlier": [13, 35, 39], "maintain": [13, 14, 16, 41, 56], "is_uniqu": [13, 14], "rtype": [13, 14, 31], "set_dtyp": [13, 14, 57], "to_dict": [13, 14], "_check_typ": [13, 14], "_merg": [13, 14], "_merge_al": [13, 14], "idx_list": [13, 14], "_check_align": [13, 14], "multiindex": [13, 14, 31, 57, 69], "enter": [13, 31, 56, 69], "str_acc": [13, 31], "lst": [13, 31], "scaler": [13, 31, 69], "special": [13, 31, 67, 69], "_make_binop": [13, 31], "_make_unaryop": [13, 31], "_make_aggop": [13, 31], "topn": [13, 31, 69], "sort_index": [13, 31, 69], "frequent": [13, 31, 50, 69], "diff": [13, 31], "to_datafram": [13, 31], "index_label": [13, 31], "value_label": [13, 31], "frame": [13, 31, 69], "registerd": [13, 31], "_all_align": [13, 31], "verticl": [13, 31, 69], "pdconcat": [13, 31, 69], "akuint64": 13, "plot_dist": [13, 27], "xlabel": [13, 27], "newfig": [13, 27], "graph": [13, 27, 64], "figur": [13, 27], "below": [13, 27, 37, 39, 47, 51, 56, 63], "get_filetyp": [13, 16], "read_parquet": [13, 16, 43, 56], "read_hdf": [13, 16, 43, 56], "h5l": [13, 16], "imit": [13, 16], "technic": [13, 16], "get_null_indic": [13, 16], "shell": [13, 16, 49, 56], "funciton": [13, 16], "datasetnam": [13, 16, 56], "arkouda_typ": [13, 16], "get_dataset": [13, 16, 56], "allow_error": [13, 16, 56], "strict_typ": [13, 16], "sign": [13, 16, 56, 63, 67], "uint32": [13, 16, 56, 59, 62, 65, 67, 72], "failur": [13, 16, 47, 56], "tell": [13, 16, 56], "versu": [13, 16, 56], "independ": [13, 16, 29, 56], "sequenti": [13, 16, 56], "stricttyp": [13, 16, 56], "import_data": [13, 16, 41, 56], "read_path": [13, 16, 56], "write_fil": [13, 16, 56], "return_obj": [13, 16, 56], "runtimewarn": [13, 16, 56], "dataset_nam": [13, 16, 56], "ak_data": [13, 16, 56], "wrong": [13, 16, 71], "datsetnam": [13, 16], "file_type_to_int": [13, 16], "mode_str_to_int": [13, 16], "get_directori": 17, "pathlib": [17, 29], "write_line_to_fil": 17, "unsupportedopt": 17, "delimited_file_to_dict": 17, "unsupportedoper": 17, "dict_to_delimited_fil": 17, "oerror": 17, "matchtyp": [20, 21, 72], "parent_entry_nam": [20, 21], "match_typ": [20, 21, 55, 72], "indici": [20, 72], "find_match": [20, 55, 72], "group_num": [20, 72], "return_group_origin": [20, 72], "isaac": [20, 72], "newton": [20, 72], "physic": [20, 72], "calculu": [20, 72], "gottfri": [20, 72], "leibniz": [20, 72], "math": [20, 72], "locationsinfo": 21, "get_match": 21, "return_num_sub": 21, "objecttyp": 22, "messagetyp": 22, "parameterobject": 22, "__slot": 22, "messageformat": 22, "_build_pdarray_param": 22, "ot": 22, "_build_strings_param": 22, "_build_list_param": 22, "_build_dict_param": 22, "_build_gen_param": 22, "singular": 22, "etc": [22, 48, 49, 52], "generate_dispatch": 22, "dispatch": 22, "requestmessag": 22, "cmd": [22, 50], "asdict": 22, "attribut": [22, 24, 33, 56, 60, 67], "replymessag": 22, "__slots__": 22, "msgtype": 22, "fromdict": 22, "metadata": 22, "repli": 22, "username_token": 29, "generate_token": 29, "secret": 29, "token_hex": 29, "hexidecim": 29, "get_home_directori": 29, "platform": 29, "home": [29, 47, 50], "expandus": 29, "get_arkouda_client_directori": 29, "artifact": 29, "environ": [29, 45, 50, 51], "get_usernam": 29, "host": [29, 47], "environmenterror": 29, "linux": [29, 47, 52, 53], "maco": [29, 48, 53], "aka": 29, "darwin": 29, "generate_username_token_json": 29, "report_mem": 35, "register_al": 35, "attach_al": 35, "unregister_al": 35, "enrich_inplac": 35, "keynam": 35, "seg": 35, "unregister_by_nam": 35, "page": [36, 47], "auto": 36, "arkouda": [36, 38, 41, 43, 48, 49, 51, 52, 53, 54, 55, 56, 58, 59, 61, 62, 64, 65, 66, 67, 70], "sphinx": [36, 47, 51], "autoapi": [36, 51], "featur": [37, 47, 50, 56, 64], "walk": [37, 45], "chpl_comm": [37, 48], "gasnet_spawnfn": 37, "gasnet_route_output": 37, "chpl_gasnet_cfg_opt": 37, "ibv": 37, "gasnet_quiet": [37, 48], "gasnet_masterip": 37, "127": 37, "gasnet_workerip": 37, "chpl_test_timeout": 37, "500": 37, "chpl_rt_oversubscrib": [37, 48], "ye": [37, 48], "gasnetsetup": 37, "cd": [37, 45, 48, 49, 51], "chpl_home": [37, 48], "16": [37, 59, 60, 66], "nl": [37, 45, 71], "would": [37, 41, 56, 59, 64], "gasnet": [38, 48], "aim": 39, "introduct": 39, "commonli": 39, "exhaust": [39, 40], "descript": [39, 55], "ak_arr": 39, "easili": 39, "np_arr": 39, "52": 39, "84": 39, "80": 39, "71": 39, "aid": [39, 40], "transit": 39, "toolset": 39, "IN": 39, "ak_in1d": 39, "ak_int": 39, "m1": 39, "m2": 39, "ak_in1dmult": 39, "ak_in1dmulti": 39, "ak_intmult": 39, "thing": 39, "abov": [39, 47, 48, 63, 72], "though": 39, "extrem": [39, 40, 42], "relat": 39, "let": 39, "sever": [39, 40, 56, 59, 62], "column_nam": 39, "column_data": 39, "rememb": 39, "fname": 39, "john": 39, "jane": 39, "jake": 39, "lname": 39, "smith": 39, "brown": 39, "ag": 39, "37": 39, "35": 39, "50": 39, "salari": 39, "75000": 39, "77000": 39, "100000": 39, "35000": 39, "f_name": 39, "l_name": 39, "notic": 39, "demo": 39, "computation": 39, "interest": 39, "17": [39, 60, 66], "flexibl": 40, "adher": 40, "portion": 40, "main": 40, "abl": [40, 41, 49, 56], "isbool": 40, "file_vers": 40, "arkouda_vers": 40, "c_string": 40, "arkodua": 40, "outlin": 40, "therefor": 40, "unflatten": 40, "reconstruct": 40, "number_of_dimens": 40, "array_of_size_rank": 40, "current_arkouda_vers": 40, "subsequ": 40, "notifi": 40, "elect": [40, 41], "ONE": 40, "explicit": [40, 67], "still": [40, 72], "orient": [42, 61, 63, 67, 72], "benefici": 42, "writ": 42, "paruqet": 42, "ineffiec": 42, "fact": 42, "interact": [43, 44, 45, 49, 51], "analyt": 44, "supercomput": 44, "guid": [45, 49], "usag": [45, 54, 68, 71], "visit": [45, 49], "installt": 45, "conda": [45, 47, 48, 49, 51], "yml": [45, 48, 49, 51], "download": [45, 47, 48, 49, 53], "v2023": 45, "tar": [45, 47, 48, 49], "xzf": [45, 49], "2023": 45, "gz": [45, 47, 48, 49], "listen": [45, 71], "your_machin": 45, "chapel_vers": 45, "15461882265": 45, "token_str": 45, "session": 45, "ipython": 45, "jupyt": [45, 48, 49], "notebook": 45, "modul": [45, 56, 72], "node01": [45, 71], "caus": [45, 47], "exit": [45, 52], "prerequisit": [47, 49], "proceed": 47, "clone": [47, 53], "repo": [47, 48, 53], "further": [47, 53], "manag": [47, 48, 49, 51, 53], "md": [47, 49], "makefil": 47, "manual": [47, 49], "zeromq": [47, 51], "eval": 47, "anaconda3": [47, 48, 49], "comma": 47, "pip": [47, 48, 49], "tip": 47, "grep": [47, 52], "opt": [47, 48, 49], "homebrew": 47, "caskroom": [47, 49], "miniforg": [47, 49], "python3": [47, 48], "site": 47, "channel": 47, "nompi_hf9525e8_104": 47, "forg": 47, "rpath": 47, "cmake": [47, 48, 51], "rhel": 47, "cento": [47, 48], "cm_version": 47, "wget": [47, 48], "kitwar": 47, "x86_64": [47, 48, 52], "sh": [47, 48], "licens": 47, "subdir": 47, "boost": 47, "cpp": 47, "thrift": 47, "utf8proc": 47, "virtual": 47, "venv": [47, 48], "activ": [47, 48, 49, 64], "upgrad": [47, 51], "wheel": 47, "deactiv": 47, "rm": 47, "rf": 47, "dist": 47, "whl": 47, "click": [47, 53], "chpldoc": [47, 48], "frontend": 47, "backend": 47, "browser": 47, "ghpage": 47, "push": 47, "next": [47, 50, 71], "navig": [47, 48, 51], "final": 47, "scroll": 47, "folder": 47, "homepag": 47, "particularli": [48, 50], "regard": 48, "distro": 48, "gcc": 48, "consequ": 48, "newer": 48, "devtoolset": 48, "packag": [48, 49, 51, 53], "leverag": 48, "kernel": 48, "sudo": [48, 52], "apt": 48, "m4": 48, "perl": 48, "bash": [48, 49], "mawk": 48, "pkg": 48, "config": [48, 50], "llvm": [48, 49, 52], "clang": 48, "libclang": 48, "cpp12": 48, "libedit": 48, "latest": [48, 49], "explod": 48, "lang": 48, "29": [48, 49, 51, 52, 60], "xvf": 48, "pwd": 48, "setchplenv": [48, 49], "chplconfig": 48, "chpl_comm_substr": 48, "smp": 48, "chpl_target_cpu": 48, "chpl_re2": [48, 49], "bundl": [48, 49], "chpl_llvm": [48, 49], "chpl_gmp": [48, 49], "linux64": 48, "yum": 48, "devel": 48, "gawk": 48, "curl": 48, "incompat": 48, "el7": 48, "scl": 48, "rh": 48, "highli": 48, "2020": 48, "07": 48, "bashrc": [48, 52], "account": [49, 52], "chipset": 49, "quickstart": [49, 53], "zsh": 49, "brew": 49, "gmp": 49, "rc": 49, "gnu": [49, 52], "successfulli": 49, "hello3": 49, "datapar": 49, "appl": 49, "silicon": 49, "x86": 49, "architectur": 49, "exclud": [49, 50], "progress": 49, "life": [49, 51], "cycl": [49, 51], "sync": 49, "funcion": 50, "prior": 50, "valuabl": 50, "switch": [50, 60], "arkouda_config_fil": 50, "src": 50, "totestmsg": 50, "testmsg": 50, "addition": [50, 57], "might": 50, "taken": 50, "kextrememsg": 50, "registerfunct": 50, "minkmsg": 50, "getmodulenam": 50, "maxkmsg": 50, "accomplish": [50, 56], "approach": [50, 68], "script": [50, 54], "generic_msg": 50, "def": 50, "test_command": 50, "__dict__": 50, "sometim": [50, 60, 67], "difficult": 50, "discov": 50, "saveusedmodul": 50, "particular": 50, "usedmodul": 50, "inspect": [50, 56], "wish": 50, "benchmark": [50, 54], "pyzmq": 51, "typeguard": 51, "tabul": 51, "pyfiglet": 51, "h5py": [51, 56], "pyarrow": [51, 56], "pexpect": 51, "pytest": 51, "argpars": 51, "furo": 51, "myst": 51, "parser": 51, "linkifi": 51, "ast": 51, "mypi": 51, "931": 51, "990": 51, "yaml": 51, "env_nam": 51, "yaml_fil": 51, "prune": 51, "path_to_arkouda": 51, "strategi": [51, 52, 56], "eager": 51, "subsystem": 52, "wsl": 52, "launch": [52, 55], "rout": 52, "suggest": 52, "ubuntu": 52, "04": 52, "lt": 52, "tutori": 52, "onlin": 52, "microsoft": 52, "app": 52, "forget": 52, "symlink": 52, "tblgen": 52, "libtinfow": 52, "ln": 52, "libtic": 52, "plan": [52, 53, 65, 67], "powershel": 52, "id": [52, 64], "vcxsrv": 52, "x410": 52, "whichev": 52, "firewal": 52, "xserver": 52, "hous": 52, "conf": 52, "nameserv": 52, "awk": 52, "serv": 53, "involv": 53, "wsl2": 53, "measur": 54, "trial": 54, "100000000": 54, "index_s": 54, "value_s": 54, "alpha": 54, "arithmet": [55, 67], "scan": 55, "gather": 55, "scatter": 55, "summar": [55, 56], "dedupl": 55, "setop": 55, "creation": 55, "parallel": [56, 67, 70], "smaller": 56, "primarili": 56, "columnar": 56, "spread": 56, "mpi": 56, "layer": 56, "pipelin": [56, 72], "csv": 56, "too": 56, "aggress": 56, "hundr": 56, "thousand": 56, "text": 56, "ingest": [56, 72], "customiz": 56, "schema": 56, "taht": 56, "purpos": [57, 63, 69], "autoclass": 57, "major": [57, 63, 69], "offer": [57, 63, 69, 72], "mathemat": 59, "int8": [59, 62, 65, 67, 72], "int16": [59, 62, 65, 67, 72], "int32": [59, 62, 65, 67, 72], "uint16": [59, 62, 65, 67, 72], "multiplex": 59, "19": [60, 66], "26": 60, "28": 60, "advanc": 60, "talk": 60, "org": 60, "cartesian": 60, "coordin": 60, "wherea": [60, 72], "discourag": [60, 61, 63, 67, 68, 72], "forc": [60, 61, 63, 67, 72], "concept": 61, "almost": [61, 63, 67, 72], "comparison": [61, 67, 68, 72], "liter": [61, 72], "alon": [61, 72], "unrel": 62, "movement": 62, "unsign": 63, "ieee": [63, 67], "1073741824": 63, "workhors": 64, "scienc": 64, "imagin": 64, "bydayofweek": 64, "numid": 64, "013": 65, "36": 65, "934176000000015": 65, "07734942223993": 65, "syntax": 66, "assig": 66, "42": 66, "ind": 66, "matlab": 66, "outer": 66, "touch": 66, "expans": 66, "lim": 66, "backbon": 67, "And": 67, "expos": 67, "incorpor": 67, "implicit": 67, "loss": 68, "functioanl": 68, "strucutur": 68, "abil": 68, "arraysetop": 70, "shown": 71, "sai": 71, "someth": 71, "went": 71, "reachabl": 71, "remot": 71, "wide": 72, "compris": 72, "whenev": 72, "threshold": 72, "guidelin": 72, "pipe": 72, "googl": 72, "sacrific": 72, "notabl": 72, "exchang": 72, "linear": 72, "stack": 72}, "objects": {"": [[13, 0, 0, "-", "arkouda"]], "arkouda": [[13, 1, 1, "", "ARKOUDA_SUPPORTED_DTYPES"], [13, 1, 1, "", "AllSymbols"], [60, 2, 1, "", "ArrayView"], [13, 2, 1, "", "BitVector"], [13, 5, 1, "", "BitVectorizer"], [61, 2, 1, "", "Categorical"], [13, 1, 1, "", "DTypeObjects"], [13, 1, 1, "", "DTypes"], [63, 2, 1, "", "DataFrame"], [13, 2, 1, "", "Datetime"], [13, 2, 1, "", "ErrorMode"], [13, 2, 1, "", "Fields"], [64, 2, 1, "", "GroupBy"], [13, 2, 1, "", "IPv4"], [57, 2, 1, "", "Index"], [13, 2, 1, "", "MultiIndex"], [13, 7, 1, "", "NonUniqueError"], [13, 1, 1, "", "OrderType"], [13, 1, 1, "", "RegisteredSymbols"], [13, 7, 1, "id430", "RegistrationError"], [13, 2, 1, "", "Row"], [13, 2, 1, "", "SegArray"], [69, 2, 1, "", "Series"], [13, 1, 1, "", "SortingAlgorithm"], [13, 2, 1, "id789", "Strings"], [13, 2, 1, "", "Timedelta"], [13, 2, 1, "", "_AbstractBaseTime"], [13, 1, 1, "", "_BASE_UNIT"], [13, 2, 1, "", "_Timescalar"], [13, 1, 1, "", "__version__"], [13, 5, 1, "", "_aggregator"], [13, 5, 1, "", "_get_factor"], [13, 5, 1, "", "_identity"], [13, 1, 1, "", "_unit2factor"], [13, 1, 1, "", "_unit2normunit"], [2, 0, 0, "-", "_version"], [59, 5, 1, "", "abs"], [3, 0, 0, "-", "accessor"], [13, 5, 1, "", "akabs"], [13, 1, 1, "id548", "akbool"], [13, 5, 1, "id0", "akcast"], [13, 1, 1, "id668", "akfloat64"], [13, 1, 1, "id669", "akint64"], [13, 1, 1, "", "akuint64"], [13, 5, 1, "", "align"], [4, 0, 0, "-", "alignment"], [59, 5, 1, "", "all"], [13, 1, 1, "", "all_scalars"], [59, 5, 1, "", "any"], [62, 5, 1, "", "arange"], [59, 5, 1, "", "argmax"], [59, 5, 1, "", "argmaxk"], [59, 5, 1, "", "argmin"], [59, 5, 1, "", "argmink"], [58, 5, 1, "", "argsort"], [56, 5, 1, "", "array"], [5, 0, 0, "-", "array_view"], [13, 5, 1, "", "attach_pdarray"], [13, 1, 1, "id667", "bigint"], [13, 5, 1, "", "bigint_from_uint_arrays"], [13, 1, 1, "id116", "bitType"], [13, 1, 1, "", "bool"], [13, 1, 1, "", "bool_scalars"], [67, 5, 1, "", "cast"], [6, 0, 0, "-", "categorical"], [13, 5, 1, "", "check_np_dtype"], [13, 5, 1, "", "clear"], [7, 0, 0, "-", "client"], [8, 0, 0, "-", "client_dtypes"], [13, 5, 1, "", "clz"], [58, 5, 1, "", "coargsort"], [62, 5, 1, "", "concatenate"], [71, 5, 1, "", "connect"], [13, 5, 1, "", "convert_if_categorical"], [13, 5, 1, "", "corr"], [59, 5, 1, "", "cos"], [13, 5, 1, "", "cov"], [13, 5, 1, "id431", "create_pdarray"], [13, 5, 1, "", "ctz"], [59, 5, 1, "", "cumprod"], [59, 5, 1, "", "cumsum"], [9, 0, 0, "-", "dataframe"], [13, 5, 1, "", "date_range"], [10, 0, 0, "-", "decorators"], [13, 5, 1, "", "disableVerbose"], [13, 5, 1, "", "dtype"], [11, 0, 0, "-", "dtypes"], [13, 5, 1, "", "enableVerbose"], [59, 5, 1, "", "exp"], [56, 5, 1, "", "export"], [13, 5, 1, "", "file_type_to_int"], [13, 5, 1, "", "find"], [13, 1, 1, "", "float64"], [13, 1, 1, "", "float_scalars"], [13, 5, 1, "id424", "from_series"], [13, 5, 1, "id782", "full"], [13, 5, 1, "", "full_like"], [13, 5, 1, "", "gen_ranges"], [13, 5, 1, "", "generic_concat"], [13, 5, 1, "", "getArkoudaLogger"], [13, 5, 1, "", "get_byteorder"], [13, 5, 1, "", "get_callback"], [56, 5, 1, "", "get_datasets"], [13, 5, 1, "", "get_filetype"], [13, 5, 1, "", "get_null_indices"], [13, 5, 1, "", "get_server_byteorder"], [13, 5, 1, "", "get_versions"], [12, 0, 0, "-", "groupbyclass"], [13, 5, 1, "", "hash"], [65, 5, 1, "", "histogram"], [56, 5, 1, "", "import_data"], [70, 5, 1, "", "in1d"], [13, 5, 1, "", "in1d_intervals"], [14, 0, 0, "-", "index"], [15, 0, 0, "-", "infoclass"], [13, 5, 1, "", "information"], [13, 1, 1, "id308", "int64"], [13, 1, 1, "id310", "intTypes"], [13, 1, 1, "id309", "int_scalars"], [13, 5, 1, "", "intersect"], [70, 5, 1, "", "intersect1d"], [13, 5, 1, "", "interval_lookup"], [13, 5, 1, "", "intx"], [13, 5, 1, "", "invert_permutation"], [16, 0, 0, "-", "io"], [17, 0, 0, "-", "io_util"], [13, 5, 1, "", "ip_address"], [13, 5, 1, "id425", "isSupportedInt"], [13, 5, 1, "", "is_cosorted"], [13, 5, 1, "", "is_ipv4"], [13, 5, 1, "", "is_ipv6"], [59, 5, 1, "", "is_sorted"], [13, 5, 1, "", "isnan"], [18, 0, 0, "-", "join"], [13, 5, 1, "", "join_on_eq_with_dt"], [13, 5, 1, "", "left_align"], [62, 5, 1, "", "linspace"], [13, 5, 1, "id550", "list_registry"], [13, 5, 1, "", "list_symbol_table"], [13, 5, 1, "id861", "load"], [13, 5, 1, "", "load_all"], [59, 5, 1, "", "log"], [19, 0, 0, "-", "logger"], [13, 5, 1, "", "lookup"], [13, 5, 1, "", "ls"], [20, 0, 0, "-", "match"], [21, 0, 0, "-", "matcher"], [59, 5, 1, "", "max"], [59, 5, 1, "", "maxk"], [59, 5, 1, "", "mean"], [22, 0, 0, "-", "message"], [59, 5, 1, "", "min"], [59, 5, 1, "", "mink"], [13, 5, 1, "", "mode_str_to_int"], [23, 0, 0, "-", "numeric"], [13, 1, 1, "", "numeric_scalars"], [13, 1, 1, "", "numpy_scalars"], [13, 5, 1, "", "objtypedec"], [62, 5, 1, "", "ones"], [62, 5, 1, "", "ones_like"], [13, 5, 1, "", "parity"], [13, 5, 1, "", "parse_single_value"], [67, 2, 1, "", "pdarray"], [24, 0, 0, "-", "pdarrayclass"], [25, 0, 0, "-", "pdarraycreation"], [26, 0, 0, "-", "pdarraysetops"], [13, 5, 1, "", "plot_dist"], [27, 0, 0, "-", "plotting"], [13, 5, 1, "", "popcount"], [13, 5, 1, "", "power"], [13, 5, 1, "", "pretty_print_information"], [59, 5, 1, "", "prod"], [62, 5, 1, "", "randint"], [13, 5, 1, "", "random_strings_lognormal"], [13, 5, 1, "", "random_strings_uniform"], [56, 5, 1, "", "read"], [13, 5, 1, "", "read_hdf"], [13, 5, 1, "", "read_parquet"], [13, 5, 1, "", "register"], [13, 5, 1, "id118", "resolve_scalar_dtype"], [13, 5, 1, "", "right_align"], [13, 5, 1, "", "rotl"], [13, 5, 1, "", "rotr"], [28, 0, 0, "-", "row"], [13, 5, 1, "", "save_all"], [13, 5, 1, "", "search_intervals"], [29, 0, 0, "-", "security"], [30, 0, 0, "-", "segarray"], [31, 0, 0, "-", "series"], [70, 5, 1, "", "setdiff1d"], [70, 5, 1, "", "setxor1d"], [59, 5, 1, "", "sin"], [13, 5, 1, "", "sort"], [13, 5, 1, "", "sorted"], [32, 0, 0, "-", "sorting"], [13, 5, 1, "", "sqrt"], [13, 5, 1, "", "standard_normal"], [59, 5, 1, "", "std"], [13, 1, 1, "id426", "str_"], [13, 1, 1, "", "str_scalars"], [33, 0, 0, "-", "strings"], [59, 5, 1, "", "sum"], [34, 0, 0, "-", "timeclass"], [13, 5, 1, "", "timedelta_range"], [13, 5, 1, "", "to_hdf"], [13, 5, 1, "", "to_parquet"], [13, 5, 1, "id427", "translate_np_dtype"], [13, 1, 1, "", "uint64"], [13, 1, 1, "", "uint8"], [13, 5, 1, "", "uniform"], [70, 5, 1, "", "union1d"], [70, 5, 1, "", "unique"], [13, 5, 1, "", "unregister_pdarray_by_name"], [13, 5, 1, "", "unsqueeze"], [35, 0, 0, "-", "util"], [65, 5, 1, "", "value_counts"], [59, 5, 1, "", "var"], [59, 5, 1, "", "where"], [13, 5, 1, "", "zero_up"], [62, 5, 1, "", "zeros"], [62, 5, 1, "", "zeros_like"]], "arkouda.ArrayView": [[13, 3, 1, "", "__getitem__"], [13, 3, 1, "", "__len__"], [13, 3, 1, "", "__repr__"], [13, 3, 1, "", "__setitem__"], [13, 3, 1, "", "__str__"], [60, 4, 1, "", "base"], [60, 4, 1, "", "dtype"], [60, 4, 1, "", "itemsize"], [60, 4, 1, "", "ndim"], [60, 4, 1, "", "order"], [60, 4, 1, "", "shape"], [60, 4, 1, "", "size"], [13, 3, 1, "", "to_hdf"], [13, 3, 1, "", "to_list"], [60, 5, 1, "", "to_ndarray"]], "arkouda.BitVector": [[13, 3, 1, "", "__getitem__"], [13, 3, 1, "", "__repr__"], [13, 3, 1, "", "__setitem__"], [13, 3, 1, "", "__str__"], [13, 3, 1, "", "_binop"], [13, 3, 1, "", "_cast"], [13, 3, 1, "", "_r_binop"], [13, 4, 1, "", "conserves"], [13, 3, 1, "", "format"], [13, 3, 1, "", "opeq"], [13, 3, 1, "", "to_list"], [13, 3, 1, "", "to_ndarray"]], "arkouda.Categorical": [[61, 4, 1, "", "categories"], [61, 4, 1, "", "codes"], [61, 3, 1, "", "contains"], [61, 3, 1, "", "endswith"], [61, 3, 1, "", "from_codes"], [61, 4, 1, "", "ndim"], [61, 4, 1, "", "nlevels"], [61, 4, 1, "", "permutation"], [61, 4, 1, "", "segments"], [61, 4, 1, "", "shape"], [61, 4, 1, "", "size"], [61, 3, 1, "", "startswith"], [61, 5, 1, "", "to_ndarray"]], "arkouda.DataFrame": [[13, 4, 1, "", "COLUMN_CLASSES"], [13, 3, 1, "", "GroupBy"], [13, 3, 1, "", "__delitem__"], [13, 3, 1, "", "__dir__"], [13, 3, 1, "", "__getattr__"], [13, 3, 1, "", "__getitem__"], [13, 3, 1, "", "__len__"], [13, 3, 1, "", "__repr__"], [13, 3, 1, "", "__setitem__"], [13, 3, 1, "", "__str__"], [13, 3, 1, "", "_drop_column"], [13, 3, 1, "", "_drop_row"], [13, 3, 1, "", "_get_head_tail"], [13, 3, 1, "", "_get_head_tail_server"], [13, 3, 1, "", "_ipython_key_completions_"], [13, 3, 1, "", "_ncols"], [13, 3, 1, "", "_parse_col_name"], [13, 3, 1, "", "_prep_data"], [13, 3, 1, "", "_rename_column"], [13, 3, 1, "", "_rename_index"], [13, 3, 1, "", "_repr_html_"], [13, 3, 1, "", "_set_index"], [13, 3, 1, "", "_shape_str"], [13, 3, 1, "", "append"], [63, 5, 1, "", "apply_permutation"], [63, 5, 1, "", "argsort"], [13, 3, 1, "", "attach"], [63, 5, 1, "", "coargsort"], [13, 6, 1, "", "columns"], [63, 5, 1, "", "concat"], [63, 5, 1, "", "copy"], [13, 3, 1, "", "corr"], [63, 5, 1, "", "drop"], [63, 5, 1, "", "drop_duplicates"], [13, 6, 1, "", "dtypes"], [13, 6, 1, "", "empty"], [13, 3, 1, "", "filter_by_range"], [13, 3, 1, "", "from_pandas"], [13, 3, 1, "", "from_return_msg"], [63, 5, 1, "", "groupby"], [63, 5, 1, "", "head"], [13, 6, 1, "", "index"], [13, 6, 1, "", "info"], [13, 3, 1, "", "is_registered"], [13, 3, 1, "", "isin"], [13, 3, 1, "", "load"], [13, 3, 1, "", "memory_usage"], [13, 3, 1, "", "register"], [63, 5, 1, "", "rename"], [63, 5, 1, "", "reset_index"], [13, 3, 1, "", "sample"], [13, 3, 1, "", "save"], [13, 6, 1, "", "shape"], [13, 6, 1, "", "size"], [63, 5, 1, "", "sort_values"], [63, 5, 1, "", "tail"], [13, 3, 1, "", "to_hdf"], [63, 5, 1, "", "to_pandas"], [13, 3, 1, "", "to_parquet"], [13, 3, 1, "", "unregister"], [13, 3, 1, "", "unregister_dataframe_by_name"], [13, 3, 1, "", "update_size"]], "arkouda.Datetime": [[13, 3, 1, "", "_ensure_components"], [13, 3, 1, "", "_get_callback"], [13, 3, 1, "", "_is_supported_scalar"], [13, 3, 1, "", "_scalar_callback"], [13, 6, 1, "", "date"], [13, 6, 1, "", "day"], [13, 6, 1, "", "day_of_week"], [13, 6, 1, "", "day_of_year"], [13, 6, 1, "", "dayofweek"], [13, 6, 1, "", "dayofyear"], [13, 6, 1, "", "hour"], [13, 6, 1, "", "is_leap_year"], [13, 3, 1, "", "isocalendar"], [13, 6, 1, "", "microsecond"], [13, 6, 1, "", "millisecond"], [13, 6, 1, "", "minute"], [13, 6, 1, "", "month"], [13, 6, 1, "", "nanosecond"], [13, 6, 1, "", "second"], [13, 3, 1, "", "sum"], [13, 4, 1, "", "supported_opeq"], [13, 4, 1, "", "supported_with_datetime"], [13, 4, 1, "", "supported_with_pdarray"], [13, 4, 1, "", "supported_with_r_datetime"], [13, 4, 1, "", "supported_with_r_pdarray"], [13, 4, 1, "", "supported_with_r_timedelta"], [13, 4, 1, "", "supported_with_timedelta"], [13, 3, 1, "", "to_pandas"], [13, 6, 1, "", "week"], [13, 6, 1, "", "weekday"], [13, 6, 1, "", "weekofyear"], [13, 6, 1, "", "year"]], "arkouda.ErrorMode": [[13, 4, 1, "", "ignore"], [13, 4, 1, "", "return_validity"], [13, 4, 1, "", "strict"]], "arkouda.Fields": [[13, 3, 1, "", "__setitem__"], [13, 3, 1, "", "_binop"], [13, 3, 1, "", "_cast"], [13, 3, 1, "", "_convert_strings"], [13, 3, 1, "", "_parse_scalar"], [13, 3, 1, "", "_r_binop"], [13, 3, 1, "", "format"], [13, 3, 1, "", "opeq"]], "arkouda.GroupBy": [[64, 3, 1, "", "AND"], [64, 3, 1, "", "OR"], [64, 3, 1, "", "XOR"], [64, 3, 1, "", "aggregate"], [64, 3, 1, "", "all"], [64, 3, 1, "", "any"], [64, 3, 1, "", "argmax"], [64, 3, 1, "", "argmin"], [64, 3, 1, "", "attach"], [64, 3, 1, "", "broadcast"], [64, 3, 1, "", "build_from_components"], [64, 3, 1, "", "count"], [64, 3, 1, "", "first"], [64, 3, 1, "", "is_registered"], [64, 4, 1, "", "logger"], [64, 3, 1, "", "max"], [64, 3, 1, "", "mean"], [64, 3, 1, "", "median"], [64, 3, 1, "", "min"], [64, 3, 1, "", "mode"], [64, 3, 1, "", "most_common"], [64, 4, 1, "", "ngroups"], [64, 4, 1, "", "nkeys"], [64, 3, 1, "", "nunique"], [64, 4, 1, "", "permutation"], [64, 3, 1, "", "prod"], [64, 3, 1, "", "register"], [64, 4, 1, "", "segments"], [64, 3, 1, "id0", "size"], [64, 3, 1, "", "std"], [64, 3, 1, "", "sum"], [64, 3, 1, "", "unique"], [64, 4, 1, "", "unique_keys"], [64, 3, 1, "", "unregister"], [64, 3, 1, "", "unregister_groupby_by_name"], [64, 3, 1, "", "var"]], "arkouda.IPv4": [[13, 3, 1, "", "__getitem__"], [13, 3, 1, "", "__repr__"], [13, 3, 1, "", "__setitem__"], [13, 3, 1, "", "__str__"], [13, 3, 1, "", "_binop"], [13, 3, 1, "", "_is_supported_scalar"], [13, 3, 1, "", "_r_binop"], [13, 3, 1, "", "format"], [13, 3, 1, "", "normalize"], [13, 3, 1, "", "opeq"], [13, 3, 1, "", "to_list"], [13, 3, 1, "", "to_ndarray"]], "arkouda.Index": [[13, 3, 1, "", "__eq__"], [13, 3, 1, "", "__getitem__"], [13, 3, 1, "", "__len__"], [13, 3, 1, "", "__repr__"], [13, 3, 1, "", "_check_aligned"], [13, 3, 1, "", "_check_types"], [13, 3, 1, "", "_merge"], [13, 3, 1, "", "_merge_all"], [57, 5, 1, "", "argsort"], [57, 5, 1, "", "concat"], [13, 3, 1, "", "factory"], [13, 6, 1, "", "index"], [13, 3, 1, "", "is_registered"], [13, 6, 1, "", "is_unique"], [57, 5, 1, "", "lookup"], [13, 3, 1, "", "register"], [13, 3, 1, "", "save"], [57, 5, 1, "", "set_dtype"], [13, 6, 1, "", "shape"], [13, 3, 1, "", "to_dict"], [13, 3, 1, "", "to_hdf"], [13, 3, 1, "", "to_list"], [13, 3, 1, "", "to_ndarray"], [13, 3, 1, "", "to_pandas"], [13, 3, 1, "", "to_parquet"]], "arkouda.MultiIndex": [[13, 3, 1, "", "__eq__"], [13, 3, 1, "", "__getitem__"], [13, 3, 1, "", "__len__"], [13, 3, 1, "", "__repr__"], [13, 3, 1, "", "_merge"], [13, 3, 1, "", "_merge_all"], [57, 5, 1, "", "argsort"], [57, 5, 1, "", "concat"], [13, 6, 1, "", "index"], [57, 5, 1, "", "lookup"], [13, 3, 1, "", "register"], [57, 5, 1, "", "set_dtype"], [13, 3, 1, "", "to_dict"], [13, 3, 1, "", "to_pandas"]], "arkouda.Row": [[13, 3, 1, "", "__repr__"], [13, 3, 1, "", "__str__"], [13, 3, 1, "", "_repr_html_"]], "arkouda.SegArray": [[13, 3, 1, "", "AND"], [13, 3, 1, "", "OR"], [13, 3, 1, "", "XOR"], [13, 3, 1, "", "__eq__"], [13, 3, 1, "", "__getitem__"], [13, 3, 1, "", "__repr__"], [13, 3, 1, "", "__str__"], [13, 3, 1, "", "_compute_non_empty"], [13, 3, 1, "", "_from_attach_return_msg"], [13, 3, 1, "", "_normalize_index"], [13, 3, 1, "", "aggregate"], [13, 3, 1, "", "all"], [13, 3, 1, "", "any"], [68, 5, 1, "", "append"], [68, 5, 1, "", "append_single"], [13, 3, 1, "", "argmax"], [13, 3, 1, "", "argmin"], [13, 3, 1, "", "attach"], [13, 3, 1, "", "concat"], [13, 3, 1, "", "copy"], [13, 3, 1, "", "from_multi_array"], [13, 3, 1, "", "from_parts"], [13, 3, 1, "", "from_return_msg"], [68, 5, 1, "", "get_jth"], [68, 5, 1, "", "get_length_n"], [68, 5, 1, "", "get_ngrams"], [68, 5, 1, "", "get_prefixes"], [68, 5, 1, "", "get_suffixes"], [68, 5, 1, "", "intersect"], [13, 3, 1, "", "is_registered"], [13, 6, 1, "", "lengths"], [13, 3, 1, "", "load"], [13, 3, 1, "", "max"], [13, 3, 1, "", "mean"], [13, 3, 1, "", "min"], [13, 6, 1, "", "non_empty"], [13, 6, 1, "", "non_empty_count"], [13, 3, 1, "", "nunique"], [13, 6, 1, "", "objtype"], [68, 5, 1, "", "prepend_single"], [13, 3, 1, "", "prod"], [13, 3, 1, "", "register"], [68, 5, 1, "", "remove_repeats"], [13, 3, 1, "", "save"], [68, 5, 1, "", "set_jth"], [68, 5, 1, "", "setdiff"], [68, 5, 1, "", "setxor"], [13, 3, 1, "", "sum"], [13, 3, 1, "", "to_hdf"], [13, 3, 1, "", "to_list"], [68, 5, 1, "", "to_ndarray"], [68, 5, 1, "", "union"], [13, 3, 1, "", "unique"], [13, 3, 1, "", "unregister"], [13, 3, 1, "", "unregister_segarray_by_name"], [13, 4, 1, "", "valsize"]], "arkouda.Series": [[13, 3, 1, "", "__getitem__"], [13, 3, 1, "", "__len__"], [13, 3, 1, "", "__repr__"], [13, 3, 1, "", "_all_aligned"], [13, 3, 1, "", "_make_aggop"], [13, 3, 1, "", "_make_binop"], [13, 3, 1, "", "_make_unaryop"], [13, 3, 1, "", "add"], [13, 3, 1, "", "attach"], [13, 3, 1, "", "concat"], [13, 3, 1, "", "diff"], [13, 4, 1, "", "dt"], [13, 3, 1, "", "from_return_msg"], [69, 5, 1, "", "head"], [13, 3, 1, "", "is_registered"], [13, 3, 1, "", "isin"], [69, 5, 1, "id0", "locate"], [69, 5, 1, "", "pdconcat"], [13, 3, 1, "", "register"], [13, 6, 1, "", "shape"], [69, 5, 1, "", "sort_index"], [69, 5, 1, "", "sort_values"], [13, 4, 1, "", "str_acc"], [69, 5, 1, "", "tail"], [13, 3, 1, "", "to_dataframe"], [69, 5, 1, "", "to_pandas"], [69, 5, 1, "", "topn"], [69, 5, 1, "", "value_counts"]], "arkouda.Strings": [[13, 4, 1, "id797", "BinOps"], [13, 3, 1, "id838", "__add__"], [13, 3, 1, "id806", "__eq__"], [13, 3, 1, "id808", "__getitem__"], [13, 3, 1, "id801", "__iter__"], [13, 3, 1, "id802", "__len__"], [13, 3, 1, "id807", "__ne__"], [13, 3, 1, "id840", "__radd__"], [13, 3, 1, "id804", "__repr__"], [13, 3, 1, "id803", "__str__"], [13, 3, 1, "id805", "_binop"], [13, 3, 1, "id848", "_comp_to_ndarray"], [13, 3, 1, "id821", "_empty_pattern_verification"], [13, 3, 1, "id845", "_get_grouping_keys"], [13, 3, 1, "id822", "_get_matcher"], [13, 3, 1, "id854", "_list_component_names"], [13, 3, 1, "id849", "astype"], [13, 3, 1, "id859", "attach"], [13, 3, 1, "id819", "cached_regex_patterns"], [72, 3, 1, "", "contains"], [13, 3, 1, "id811", "decode"], [13, 4, 1, "id795", "dtype"], [13, 3, 1, "id810", "encode"], [72, 3, 1, "", "endswith"], [13, 4, 1, "id790", "entry"], [72, 3, 1, "", "find_locations"], [72, 3, 1, "", "findall"], [72, 3, 1, "", "flatten"], [13, 3, 1, "id800", "from_parts"], [13, 3, 1, "id799", "from_return_msg"], [72, 3, 1, "", "fullmatch"], [13, 3, 1, "id809", "get_lengths"], [13, 3, 1, "id841", "get_prefixes"], [13, 3, 1, "id842", "get_suffixes"], [13, 3, 1, "id844", "group"], [13, 3, 1, "id843", "hash"], [13, 3, 1, "id855", "info"], [13, 3, 1, "id815", "is_lower"], [13, 3, 1, "id853", "is_registered"], [13, 3, 1, "id817", "is_title"], [13, 3, 1, "id816", "is_upper"], [13, 4, 1, "id796", "logger"], [72, 3, 1, "", "lstick"], [72, 3, 1, "", "match"], [13, 4, 1, "id792", "nbytes"], [13, 4, 1, "id793", "ndim"], [13, 4, 1, "id798", "objtype"], [72, 3, 1, "", "peel"], [13, 3, 1, "id856", "pretty_print_info"], [13, 3, 1, "id820", "purge_cached_regex_patterns"], [13, 3, 1, "id857", "register"], [72, 3, 1, "", "rpeel"], [13, 3, 1, "id852", "save"], [72, 3, 1, "", "search"], [13, 4, 1, "id794", "shape"], [13, 4, 1, "id791", "size"], [72, 3, 1, "", "split"], [72, 3, 1, "", "startswith"], [72, 3, 1, "", "stick"], [13, 3, 1, "id818", "strip"], [72, 3, 1, "", "sub"], [72, 3, 1, "", "subn"], [13, 3, 1, "id851", "to_hdf"], [13, 3, 1, "id847", "to_list"], [13, 3, 1, "id812", "to_lower"], [72, 5, 1, "", "to_ndarray"], [13, 3, 1, "id850", "to_parquet"], [13, 3, 1, "id814", "to_title"], [13, 3, 1, "id813", "to_upper"], [13, 3, 1, "id858", "unregister"], [13, 3, 1, "id860", "unregister_strings_by_name"]], "arkouda.Timedelta": [[13, 3, 1, "", "_ensure_components"], [13, 3, 1, "", "_get_callback"], [13, 3, 1, "", "_is_supported_scalar"], [13, 3, 1, "", "_scalar_callback"], [13, 3, 1, "", "abs"], [13, 6, 1, "", "components"], [13, 6, 1, "", "days"], [13, 6, 1, "", "microseconds"], [13, 6, 1, "", "nanoseconds"], [13, 6, 1, "", "seconds"], [13, 3, 1, "", "std"], [13, 3, 1, "", "sum"], [13, 4, 1, "", "supported_opeq"], [13, 4, 1, "", "supported_with_datetime"], [13, 4, 1, "", "supported_with_pdarray"], [13, 4, 1, "", "supported_with_r_datetime"], [13, 4, 1, "", "supported_with_r_pdarray"], [13, 4, 1, "", "supported_with_r_timedelta"], [13, 4, 1, "", "supported_with_timedelta"], [13, 3, 1, "", "to_pandas"], [13, 3, 1, "", "total_seconds"]], "arkouda._AbstractBaseTime": [[13, 3, 1, "", "__getitem__"], [13, 3, 1, "", "__repr__"], [13, 3, 1, "", "__setitem__"], [13, 3, 1, "", "__str__"], [13, 3, 1, "", "_binop"], [13, 3, 1, "", "_get_callback"], [13, 3, 1, "", "_is_datetime_scalar"], [13, 3, 1, "", "_is_timedelta_scalar"], [13, 3, 1, "", "_r_binop"], [13, 3, 1, "", "_scalar_callback"], [13, 3, 1, "", "ceil"], [13, 3, 1, "", "floor"], [13, 3, 1, "", "max"], [13, 3, 1, "", "maxk"], [13, 3, 1, "", "min"], [13, 3, 1, "", "mink"], [13, 3, 1, "", "opeq"], [13, 3, 1, "", "round"], [13, 3, 1, "", "to_list"], [13, 3, 1, "", "to_ndarray"]], "arkouda._version": [[2, 1, 1, "", "HANDLERS"], [2, 1, 1, "", "LONG_VERSION_PY"], [2, 7, 1, "", "NotThisMethod"], [2, 2, 1, "", "VersioneerConfig"], [2, 5, 1, "", "get_config"], [2, 5, 1, "", "get_keywords"], [2, 5, 1, "", "get_versions"], [2, 5, 1, "", "git_get_keywords"], [2, 5, 1, "", "git_pieces_from_vcs"], [2, 5, 1, "", "git_versions_from_keywords"], [2, 5, 1, "", "plus_or_dot"], [2, 5, 1, "", "register_vcs_handler"], [2, 5, 1, "", "render"], [2, 5, 1, "", "render_git_describe"], [2, 5, 1, "", "render_git_describe_long"], [2, 5, 1, "", "render_pep440"], [2, 5, 1, "", "render_pep440_old"], [2, 5, 1, "", "render_pep440_post"], [2, 5, 1, "", "render_pep440_pre"], [2, 5, 1, "", "run_command"], [2, 5, 1, "", "versions_from_parentdir"]], "arkouda.accessor": [[3, 2, 1, "", "CachedAccessor"], [3, 2, 1, "", "DatetimeAccessor"], [3, 2, 1, "", "Properties"], [3, 2, 1, "", "StringAccessor"], [3, 5, 1, "", "date_operators"], [3, 5, 1, "", "string_operators"]], "arkouda.accessor.CachedAccessor": [[3, 3, 1, "", "__get__"]], "arkouda.accessor.Properties": [[3, 3, 1, "", "_make_op"]], "arkouda.alignment": [[4, 7, 1, "", "NonUniqueError"], [4, 5, 1, "", "align"], [4, 5, 1, "", "find"], [4, 5, 1, "", "in1d_intervals"], [4, 5, 1, "", "interval_lookup"], [4, 5, 1, "", "is_cosorted"], [4, 5, 1, "", "left_align"], [4, 5, 1, "", "lookup"], [4, 5, 1, "", "right_align"], [4, 5, 1, "", "search_intervals"], [4, 5, 1, "", "unsqueeze"], [4, 5, 1, "", "zero_up"]], "arkouda.array_view": [[5, 2, 1, "", "ArrayView"], [5, 1, 1, "", "OrderType"]], "arkouda.array_view.ArrayView": [[5, 3, 1, "", "__getitem__"], [5, 3, 1, "", "__len__"], [5, 3, 1, "", "__repr__"], [5, 3, 1, "", "__setitem__"], [5, 3, 1, "", "__str__"], [5, 4, 1, "", "base"], [5, 4, 1, "", "dtype"], [5, 4, 1, "", "itemsize"], [5, 4, 1, "", "ndim"], [5, 4, 1, "", "order"], [5, 4, 1, "", "shape"], [5, 4, 1, "", "size"], [5, 3, 1, "", "to_hdf"], [5, 3, 1, "", "to_list"], [5, 3, 1, "", "to_ndarray"]], "arkouda.categorical": [[6, 2, 1, "", "Categorical"]], "arkouda.categorical.Categorical": [[6, 4, 1, "", "BinOps"], [6, 4, 1, "", "RegisterablePieces"], [6, 4, 1, "", "RequiredPieces"], [6, 3, 1, "", "__eq__"], [6, 3, 1, "", "__getitem__"], [6, 3, 1, "", "__iter__"], [6, 3, 1, "", "__len__"], [6, 3, 1, "", "__ne__"], [6, 3, 1, "", "__repr__"], [6, 3, 1, "", "__str__"], [6, 3, 1, "", "_binop"], [6, 3, 1, "", "_get_components_dict"], [6, 3, 1, "", "_get_grouping_keys"], [6, 3, 1, "", "_list_component_names"], [6, 3, 1, "", "_r_binop"], [6, 3, 1, "", "argsort"], [6, 3, 1, "", "attach"], [6, 4, 1, "", "categories"], [6, 4, 1, "", "codes"], [6, 3, 1, "", "concatenate"], [6, 3, 1, "", "contains"], [6, 3, 1, "", "endswith"], [6, 3, 1, "", "from_codes"], [6, 3, 1, "", "from_return_msg"], [6, 3, 1, "", "group"], [6, 3, 1, "", "in1d"], [6, 3, 1, "", "info"], [6, 3, 1, "", "is_registered"], [6, 3, 1, "", "isna"], [6, 4, 1, "", "ndim"], [6, 4, 1, "", "nlevels"], [6, 6, 1, "", "objtype"], [6, 3, 1, "", "parse_hdf_categoricals"], [6, 4, 1, "id0", "permutation"], [6, 3, 1, "", "pretty_print_info"], [6, 3, 1, "", "register"], [6, 3, 1, "", "reset_categories"], [6, 3, 1, "", "save"], [6, 4, 1, "id1", "segments"], [6, 3, 1, "", "set_categories"], [6, 4, 1, "", "shape"], [6, 4, 1, "", "size"], [6, 3, 1, "", "sort"], [6, 3, 1, "", "standardize_categories"], [6, 3, 1, "", "startswith"], [6, 3, 1, "", "to_hdf"], [6, 3, 1, "", "to_list"], [6, 3, 1, "", "to_ndarray"], [6, 3, 1, "", "to_parquet"], [6, 3, 1, "", "unique"], [6, 3, 1, "", "unregister"], [6, 3, 1, "", "unregister_categorical_by_name"]], "arkouda.client": [[7, 5, 1, "", "connect"], [7, 5, 1, "", "disconnect"], [7, 5, 1, "", "get_config"], [7, 5, 1, "", "get_mem_avail"], [7, 5, 1, "", "get_mem_used"], [7, 5, 1, "", "get_server_commands"], [7, 5, 1, "", "print_server_commands"], [7, 5, 1, "", "ruok"], [7, 5, 1, "", "shutdown"]], "arkouda.client_dtypes": [[8, 2, 1, "", "BitVector"], [8, 5, 1, "", "BitVectorizer"], [8, 2, 1, "", "Fields"], [8, 2, 1, "", "IPv4"], [8, 5, 1, "", "ip_address"], [8, 5, 1, "", "is_ipv4"], [8, 5, 1, "", "is_ipv6"]], "arkouda.client_dtypes.BitVector": [[8, 3, 1, "", "__getitem__"], [8, 3, 1, "", "__repr__"], [8, 3, 1, "", "__setitem__"], [8, 3, 1, "", "__str__"], [8, 3, 1, "", "_binop"], [8, 3, 1, "", "_cast"], [8, 3, 1, "", "_r_binop"], [8, 4, 1, "", "conserves"], [8, 3, 1, "", "format"], [8, 3, 1, "", "opeq"], [8, 3, 1, "", "to_list"], [8, 3, 1, "", "to_ndarray"]], "arkouda.client_dtypes.Fields": [[8, 3, 1, "", "__setitem__"], [8, 3, 1, "", "_binop"], [8, 3, 1, "", "_cast"], [8, 3, 1, "", "_convert_strings"], [8, 3, 1, "", "_parse_scalar"], [8, 3, 1, "", "_r_binop"], [8, 3, 1, "", "format"], [8, 3, 1, "", "opeq"]], "arkouda.client_dtypes.IPv4": [[8, 3, 1, "", "__getitem__"], [8, 3, 1, "", "__repr__"], [8, 3, 1, "", "__setitem__"], [8, 3, 1, "", "__str__"], [8, 3, 1, "", "_binop"], [8, 3, 1, "", "_is_supported_scalar"], [8, 3, 1, "", "_r_binop"], [8, 3, 1, "", "format"], [8, 3, 1, "", "normalize"], [8, 3, 1, "", "opeq"], [8, 3, 1, "", "to_list"], [8, 3, 1, "", "to_ndarray"]], "arkouda.dataframe": [[9, 2, 1, "", "DataFrame"], [9, 5, 1, "", "intersect"], [9, 5, 1, "", "intx"], [9, 5, 1, "", "invert_permutation"], [9, 5, 1, "", "sorted"]], "arkouda.dataframe.DataFrame": [[9, 4, 1, "", "COLUMN_CLASSES"], [9, 3, 1, "", "GroupBy"], [9, 3, 1, "", "__delitem__"], [9, 3, 1, "", "__dir__"], [9, 3, 1, "", "__getattr__"], [9, 3, 1, "", "__getitem__"], [9, 3, 1, "", "__len__"], [9, 3, 1, "", "__repr__"], [9, 3, 1, "", "__setitem__"], [9, 3, 1, "", "__str__"], [9, 3, 1, "", "_drop_column"], [9, 3, 1, "", "_drop_row"], [9, 3, 1, "", "_get_head_tail"], [9, 3, 1, "", "_get_head_tail_server"], [9, 3, 1, "", "_ipython_key_completions_"], [9, 3, 1, "", "_ncols"], [9, 3, 1, "", "_parse_col_name"], [9, 3, 1, "", "_prep_data"], [9, 3, 1, "", "_rename_column"], [9, 3, 1, "", "_rename_index"], [9, 3, 1, "", "_repr_html_"], [9, 3, 1, "", "_set_index"], [9, 3, 1, "", "_shape_str"], [9, 3, 1, "", "append"], [9, 3, 1, "", "apply_permutation"], [9, 3, 1, "", "argsort"], [9, 3, 1, "", "attach"], [9, 3, 1, "", "coargsort"], [9, 6, 1, "", "columns"], [9, 3, 1, "", "concat"], [9, 3, 1, "", "copy"], [9, 3, 1, "", "corr"], [9, 3, 1, "", "drop"], [9, 3, 1, "", "drop_duplicates"], [9, 6, 1, "", "dtypes"], [9, 6, 1, "", "empty"], [9, 3, 1, "", "filter_by_range"], [9, 3, 1, "", "from_pandas"], [9, 3, 1, "", "from_return_msg"], [9, 3, 1, "", "groupby"], [9, 3, 1, "", "head"], [9, 6, 1, "", "index"], [9, 6, 1, "", "info"], [9, 3, 1, "", "is_registered"], [9, 3, 1, "", "isin"], [9, 3, 1, "", "load"], [9, 3, 1, "", "memory_usage"], [9, 3, 1, "", "register"], [9, 3, 1, "", "rename"], [9, 3, 1, "", "reset_index"], [9, 3, 1, "", "sample"], [9, 3, 1, "", "save"], [9, 6, 1, "", "shape"], [9, 6, 1, "", "size"], [9, 3, 1, "", "sort_values"], [9, 3, 1, "", "tail"], [9, 3, 1, "", "to_hdf"], [9, 3, 1, "", "to_pandas"], [9, 3, 1, "", "to_parquet"], [9, 3, 1, "", "unregister"], [9, 3, 1, "", "unregister_dataframe_by_name"], [9, 3, 1, "", "update_size"]], "arkouda.decorators": [[10, 5, 1, "", "objtypedec"]], "arkouda.dtypes": [[11, 1, 1, "", "ARKOUDA_SUPPORTED_DTYPES"], [11, 1, 1, "", "DTypeObjects"], [11, 1, 1, "", "DTypes"], [11, 1, 1, "", "all_scalars"], [11, 1, 1, "", "bigint"], [11, 1, 1, "", "bitType"], [11, 1, 1, "", "bool"], [11, 1, 1, "", "bool_scalars"], [11, 5, 1, "", "check_np_dtype"], [11, 5, 1, "", "dtype"], [11, 1, 1, "", "float64"], [11, 1, 1, "", "float_scalars"], [11, 5, 1, "", "get_byteorder"], [11, 5, 1, "", "get_server_byteorder"], [11, 1, 1, "", "int64"], [11, 1, 1, "", "intTypes"], [11, 1, 1, "", "int_scalars"], [11, 1, 1, "", "numeric_scalars"], [11, 1, 1, "", "numpy_scalars"], [11, 5, 1, "", "resolve_scalar_dtype"], [11, 1, 1, "", "str_"], [11, 1, 1, "", "str_scalars"], [11, 5, 1, "", "translate_np_dtype"], [11, 1, 1, "", "uint64"], [11, 1, 1, "", "uint8"]], "arkouda.groupbyclass": [[12, 1, 1, "", "GROUPBY_REDUCTION_TYPES"], [12, 2, 1, "", "GroupBy"], [12, 5, 1, "", "broadcast"], [12, 5, 1, "", "unique"]], "arkouda.groupbyclass.GroupBy": [[12, 3, 1, "", "AND"], [12, 3, 1, "", "OR"], [12, 4, 1, "", "Reductions"], [12, 3, 1, "", "XOR"], [12, 3, 1, "", "_get_groupby_required_pieces"], [12, 3, 1, "", "_nested_grouping_helper"], [12, 3, 1, "", "aggregate"], [12, 3, 1, "", "all"], [12, 3, 1, "", "any"], [12, 3, 1, "", "argmax"], [12, 3, 1, "", "argmin"], [12, 3, 1, "", "attach"], [12, 3, 1, "", "broadcast"], [12, 3, 1, "", "build_from_components"], [12, 3, 1, "", "count"], [12, 3, 1, "", "first"], [12, 3, 1, "", "is_registered"], [12, 4, 1, "", "logger"], [12, 3, 1, "", "max"], [12, 3, 1, "", "mean"], [12, 3, 1, "", "median"], [12, 3, 1, "", "min"], [12, 3, 1, "", "mode"], [12, 3, 1, "", "most_common"], [12, 4, 1, "", "ngroups"], [12, 4, 1, "", "nkeys"], [12, 3, 1, "", "nunique"], [12, 4, 1, "", "permutation"], [12, 3, 1, "", "prod"], [12, 3, 1, "", "register"], [12, 4, 1, "", "segments"], [12, 3, 1, "id0", "size"], [12, 3, 1, "", "std"], [12, 3, 1, "", "sum"], [12, 3, 1, "", "unique"], [12, 4, 1, "", "unique_keys"], [12, 3, 1, "", "unregister"], [12, 3, 1, "", "unregister_groupby_by_name"], [12, 3, 1, "", "var"]], "arkouda.index": [[14, 2, 1, "", "Index"], [14, 2, 1, "", "MultiIndex"]], "arkouda.index.Index": [[14, 3, 1, "", "__eq__"], [14, 3, 1, "", "__getitem__"], [14, 3, 1, "", "__len__"], [14, 3, 1, "", "__repr__"], [14, 3, 1, "", "_check_aligned"], [14, 3, 1, "", "_check_types"], [14, 3, 1, "", "_merge"], [14, 3, 1, "", "_merge_all"], [14, 3, 1, "", "argsort"], [14, 3, 1, "", "concat"], [14, 3, 1, "", "factory"], [14, 6, 1, "", "index"], [14, 3, 1, "", "is_registered"], [14, 6, 1, "", "is_unique"], [14, 3, 1, "", "lookup"], [14, 3, 1, "", "register"], [14, 3, 1, "", "save"], [14, 3, 1, "", "set_dtype"], [14, 6, 1, "", "shape"], [14, 3, 1, "", "to_dict"], [14, 3, 1, "", "to_hdf"], [14, 3, 1, "", "to_list"], [14, 3, 1, "", "to_ndarray"], [14, 3, 1, "", "to_pandas"], [14, 3, 1, "", "to_parquet"]], "arkouda.index.MultiIndex": [[14, 3, 1, "", "__eq__"], [14, 3, 1, "", "__getitem__"], [14, 3, 1, "", "__len__"], [14, 3, 1, "", "__repr__"], [14, 3, 1, "", "_merge"], [14, 3, 1, "", "_merge_all"], [14, 3, 1, "", "argsort"], [14, 3, 1, "", "concat"], [14, 6, 1, "", "index"], [14, 3, 1, "", "lookup"], [14, 3, 1, "", "register"], [14, 3, 1, "", "set_dtype"], [14, 3, 1, "", "to_dict"], [14, 3, 1, "", "to_pandas"]], "arkouda.infoclass": [[15, 1, 1, "", "AllSymbols"], [15, 1, 1, "", "RegisteredSymbols"], [15, 5, 1, "", "information"], [15, 5, 1, "", "list_registry"], [15, 5, 1, "", "list_symbol_table"], [15, 5, 1, "", "pretty_print_information"]], "arkouda.io": [[16, 5, 1, "", "export"], [16, 5, 1, "", "file_type_to_int"], [16, 5, 1, "", "get_datasets"], [16, 5, 1, "", "get_filetype"], [16, 5, 1, "", "get_null_indices"], [16, 5, 1, "", "import_data"], [16, 5, 1, "", "load"], [16, 5, 1, "", "load_all"], [16, 5, 1, "", "ls"], [16, 5, 1, "", "mode_str_to_int"], [16, 5, 1, "", "read"], [16, 5, 1, "", "read_hdf"], [16, 5, 1, "", "read_parquet"], [16, 5, 1, "", "save_all"], [16, 5, 1, "", "to_hdf"], [16, 5, 1, "", "to_parquet"]], "arkouda.io_util": [[17, 5, 1, "", "delimited_file_to_dict"], [17, 5, 1, "", "dict_to_delimited_file"], [17, 5, 1, "", "get_directory"], [17, 5, 1, "", "write_line_to_file"]], "arkouda.join": [[18, 5, 1, "", "join_on_eq_with_dt"]], "arkouda.logger": [[19, 5, 1, "", "disableVerbose"], [19, 5, 1, "", "enableVerbose"]], "arkouda.match": [[20, 2, 1, "", "Match"], [20, 1, 1, "", "MatchType"]], "arkouda.match.Match": [[20, 3, 1, "", "__getitem__"], [20, 3, 1, "", "__repr__"], [20, 3, 1, "", "__str__"], [72, 3, 1, "", "end"], [72, 3, 1, "", "find_matches"], [72, 3, 1, "", "group"], [72, 3, 1, "", "match_type"], [72, 3, 1, "", "matched"], [72, 3, 1, "", "start"]], "arkouda.matcher": [[21, 2, 1, "", "Matcher"]], "arkouda.matcher.Matcher": [[21, 4, 1, "", "LocationsInfo"], [21, 3, 1, "", "find_locations"], [21, 3, 1, "", "findall"], [21, 3, 1, "", "get_match"], [21, 3, 1, "", "split"], [21, 3, 1, "", "sub"]], "arkouda.message": [[22, 2, 1, "", "MessageFormat"], [22, 2, 1, "", "MessageType"], [22, 2, 1, "", "ObjectType"], [22, 2, 1, "", "ParameterObject"], [22, 2, 1, "", "ReplyMessage"], [22, 2, 1, "", "RequestMessage"]], "arkouda.message.MessageFormat": [[22, 4, 1, "", "BINARY"], [22, 4, 1, "", "STRING"], [22, 3, 1, "", "__repr__"], [22, 3, 1, "", "__str__"]], "arkouda.message.MessageType": [[22, 4, 1, "", "ERROR"], [22, 4, 1, "", "NORMAL"], [22, 4, 1, "", "WARNING"], [22, 3, 1, "", "__repr__"], [22, 3, 1, "", "__str__"]], "arkouda.message.ObjectType": [[22, 4, 1, "", "DATETIME"], [22, 4, 1, "", "DICT"], [22, 4, 1, "", "LIST"], [22, 4, 1, "", "PDARRAY"], [22, 4, 1, "", "STRINGS"], [22, 4, 1, "", "TIMEDELTA"], [22, 4, 1, "", "VALUE"], [22, 3, 1, "", "__repr__"], [22, 3, 1, "", "__str__"]], "arkouda.message.ParameterObject": [[22, 4, 1, "", "__slots"], [22, 3, 1, "", "_build_dict_param"], [22, 3, 1, "", "_build_gen_param"], [22, 3, 1, "", "_build_list_param"], [22, 3, 1, "", "_build_pdarray_param"], [22, 3, 1, "", "_build_strings_param"], [22, 6, 1, "", "dict"], [22, 4, 1, "", "dtype"], [22, 3, 1, "", "factory"], [22, 3, 1, "", "generate_dispatch"], [22, 4, 1, "", "key"], [22, 4, 1, "", "objType"], [22, 4, 1, "", "val"]], "arkouda.message.ReplyMessage": [[22, 4, 1, "", "__slots__"], [22, 3, 1, "", "fromdict"], [22, 4, 1, "", "msg"], [22, 4, 1, "", "msgType"], [22, 4, 1, "", "user"]], "arkouda.message.RequestMessage": [[22, 4, 1, "", "__slots"], [22, 4, 1, "", "args"], [22, 3, 1, "", "asdict"], [22, 4, 1, "", "cmd"], [22, 4, 1, "", "format"], [22, 4, 1, "", "size"], [22, 4, 1, "", "token"], [22, 4, 1, "", "user"]], "arkouda.numeric": [[23, 2, 1, "", "ErrorMode"], [23, 5, 1, "", "abs"], [23, 5, 1, "", "cast"], [23, 5, 1, "", "cos"], [23, 5, 1, "", "cumprod"], [23, 5, 1, "", "cumsum"], [23, 5, 1, "", "exp"], [23, 5, 1, "", "hash"], [23, 5, 1, "", "histogram"], [23, 5, 1, "", "isnan"], [23, 5, 1, "", "log"], [23, 5, 1, "", "sin"], [23, 5, 1, "", "value_counts"], [23, 5, 1, "", "where"]], "arkouda.numeric.ErrorMode": [[23, 4, 1, "", "ignore"], [23, 4, 1, "", "return_validity"], [23, 4, 1, "", "strict"]], "arkouda.pdarray": [[13, 4, 1, "id678", "BinOps"], [13, 4, 1, "id679", "OpEqOps"], [13, 3, 1, "id690", "__add__"], [13, 3, 1, "id706", "__and__"], [13, 4, 1, "id681", "__array_priority__"], [13, 3, 1, "id683", "__bool__"], [13, 3, 1, "id682", "__del__"], [13, 3, 1, "id718", "__eq__"], [13, 3, 1, "id698", "__floordiv__"], [13, 3, 1, "id717", "__ge__"], [13, 3, 1, "id736", "__getitem__"], [13, 3, 1, "id715", "__gt__"], [13, 3, 1, "id723", "__iadd__"], [13, 3, 1, "id731", "__iand__"], [13, 3, 1, "id728", "__ifloordiv__"], [13, 3, 1, "id729", "__ilshift__"], [13, 3, 1, "id727", "__imod__"], [13, 3, 1, "id725", "__imul__"], [13, 3, 1, "id721", "__invert__"], [13, 3, 1, "id732", "__ior__"], [13, 3, 1, "id734", "__ipow__"], [13, 3, 1, "id730", "__irshift__"], [13, 3, 1, "id724", "__isub__"], [13, 3, 1, "id735", "__iter__"], [13, 3, 1, "id726", "__itruediv__"], [13, 3, 1, "id733", "__ixor__"], [13, 3, 1, "id716", "__le__"], [13, 3, 1, "id684", "__len__"], [13, 3, 1, "id702", "__lshift__"], [13, 3, 1, "id714", "__lt__"], [13, 3, 1, "id700", "__mod__"], [13, 3, 1, "id694", "__mul__"], [13, 3, 1, "id719", "__ne__"], [13, 3, 1, "id720", "__neg__"], [13, 3, 1, "id708", "__or__"], [13, 3, 1, "id712", "__pow__"], [13, 3, 1, "id691", "__radd__"], [13, 3, 1, "id707", "__rand__"], [13, 3, 1, "id686", "__repr__"], [13, 3, 1, "id699", "__rfloordiv__"], [13, 3, 1, "id703", "__rlshift__"], [13, 3, 1, "id701", "__rmod__"], [13, 3, 1, "id695", "__rmul__"], [13, 3, 1, "id709", "__ror__"], [13, 3, 1, "id713", "__rpow__"], [13, 3, 1, "id705", "__rrshift__"], [13, 3, 1, "id704", "__rshift__"], [13, 3, 1, "id693", "__rsub__"], [13, 3, 1, "id697", "__rtruediv__"], [13, 3, 1, "id711", "__rxor__"], [13, 3, 1, "id737", "__setitem__"], [13, 3, 1, "id685", "__str__"], [13, 3, 1, "id692", "__sub__"], [13, 3, 1, "id696", "__truediv__"], [13, 3, 1, "id710", "__xor__"], [13, 3, 1, "id688", "_binop"], [13, 3, 1, "id780", "_get_grouping_keys"], [13, 3, 1, "id742", "_list_component_names"], [13, 3, 1, "id689", "_r_binop"], [65, 3, 1, "", "all"], [65, 3, 1, "", "any"], [65, 3, 1, "", "argmax"], [65, 3, 1, "", "argmaxk"], [65, 3, 1, "", "argmin"], [65, 3, 1, "", "argmink"], [13, 3, 1, "id767", "astype"], [13, 3, 1, "id779", "attach"], [13, 3, 1, "id769", "bigint_to_uint_arrays"], [13, 3, 1, "id763", "clz"], [13, 3, 1, "id756", "corr"], [13, 3, 1, "id755", "cov"], [13, 3, 1, "id764", "ctz"], [67, 4, 1, "", "dtype"], [13, 3, 1, "id738", "fill"], [13, 3, 1, "id687", "format_other"], [13, 3, 1, "id743", "info"], [13, 3, 1, "id741", "is_registered"], [65, 3, 1, "", "is_sorted"], [67, 4, 1, "", "itemsize"], [65, 3, 1, "", "max"], [65, 3, 1, "", "maxk"], [65, 3, 1, "", "mean"], [65, 3, 1, "", "min"], [65, 3, 1, "", "mink"], [67, 4, 1, "", "name"], [67, 4, 1, "", "ndim"], [13, 4, 1, "id680", "objtype"], [13, 3, 1, "id722", "opeq"], [13, 3, 1, "id762", "parity"], [13, 3, 1, "id761", "popcount"], [13, 3, 1, "id744", "pretty_print_info"], [65, 3, 1, "", "prod"], [13, 3, 1, "id777", "register"], [13, 3, 1, "id770", "reshape"], [13, 3, 1, "id765", "rotl"], [13, 3, 1, "id766", "rotr"], [13, 3, 1, "id776", "save"], [67, 4, 1, "", "shape"], [67, 4, 1, "", "size"], [13, 3, 1, "id768", "slice_bits"], [65, 3, 1, "", "std"], [65, 3, 1, "", "sum"], [13, 3, 1, "id773", "to_cuda"], [13, 3, 1, "id775", "to_hdf"], [13, 3, 1, "id772", "to_list"], [67, 5, 1, "", "to_ndarray"], [13, 3, 1, "id774", "to_parquet"], [13, 3, 1, "id778", "unregister"], [65, 3, 1, "", "var"]], "arkouda.pdarrayclass": [[24, 7, 1, "", "RegistrationError"], [24, 5, 1, "", "all"], [24, 5, 1, "", "any"], [24, 5, 1, "", "argmax"], [24, 5, 1, "", "argmaxk"], [24, 5, 1, "", "argmin"], [24, 5, 1, "", "argmink"], [24, 5, 1, "", "attach_pdarray"], [24, 5, 1, "", "clear"], [24, 5, 1, "", "clz"], [24, 5, 1, "", "corr"], [24, 5, 1, "", "cov"], [24, 5, 1, "", "ctz"], [24, 5, 1, "", "is_sorted"], [24, 5, 1, "", "max"], [24, 5, 1, "", "maxk"], [24, 5, 1, "", "mean"], [24, 5, 1, "", "min"], [24, 5, 1, "", "mink"], [24, 5, 1, "", "parity"], [24, 2, 1, "", "pdarray"], [24, 5, 1, "", "popcount"], [24, 5, 1, "", "power"], [24, 5, 1, "", "prod"], [24, 5, 1, "", "rotl"], [24, 5, 1, "", "rotr"], [24, 5, 1, "", "sqrt"], [24, 5, 1, "", "std"], [24, 5, 1, "", "sum"], [24, 5, 1, "", "unregister_pdarray_by_name"], [24, 5, 1, "", "var"]], "arkouda.pdarrayclass.pdarray": [[24, 4, 1, "", "BinOps"], [24, 4, 1, "", "OpEqOps"], [24, 3, 1, "", "__add__"], [24, 3, 1, "", "__and__"], [24, 4, 1, "", "__array_priority__"], [24, 3, 1, "", "__bool__"], [24, 3, 1, "", "__del__"], [24, 3, 1, "", "__eq__"], [24, 3, 1, "", "__floordiv__"], [24, 3, 1, "", "__ge__"], [24, 3, 1, "", "__getitem__"], [24, 3, 1, "", "__gt__"], [24, 3, 1, "", "__iadd__"], [24, 3, 1, "", "__iand__"], [24, 3, 1, "", "__ifloordiv__"], [24, 3, 1, "", "__ilshift__"], [24, 3, 1, "", "__imod__"], [24, 3, 1, "", "__imul__"], [24, 3, 1, "", "__invert__"], [24, 3, 1, "", "__ior__"], [24, 3, 1, "", "__ipow__"], [24, 3, 1, "", "__irshift__"], [24, 3, 1, "", "__isub__"], [24, 3, 1, "", "__iter__"], [24, 3, 1, "", "__itruediv__"], [24, 3, 1, "", "__ixor__"], [24, 3, 1, "", "__le__"], [24, 3, 1, "", "__len__"], [24, 3, 1, "", "__lshift__"], [24, 3, 1, "", "__lt__"], [24, 3, 1, "", "__mod__"], [24, 3, 1, "", "__mul__"], [24, 3, 1, "", "__ne__"], [24, 3, 1, "", "__neg__"], [24, 3, 1, "", "__or__"], [24, 3, 1, "", "__pow__"], [24, 3, 1, "", "__radd__"], [24, 3, 1, "", "__rand__"], [24, 3, 1, "", "__repr__"], [24, 3, 1, "", "__rfloordiv__"], [24, 3, 1, "", "__rlshift__"], [24, 3, 1, "", "__rmod__"], [24, 3, 1, "", "__rmul__"], [24, 3, 1, "", "__ror__"], [24, 3, 1, "", "__rpow__"], [24, 3, 1, "", "__rrshift__"], [24, 3, 1, "", "__rshift__"], [24, 3, 1, "", "__rsub__"], [24, 3, 1, "", "__rtruediv__"], [24, 3, 1, "", "__rxor__"], [24, 3, 1, "", "__setitem__"], [24, 3, 1, "", "__str__"], [24, 3, 1, "", "__sub__"], [24, 3, 1, "", "__truediv__"], [24, 3, 1, "", "__xor__"], [24, 3, 1, "", "_binop"], [24, 3, 1, "", "_get_grouping_keys"], [24, 3, 1, "", "_list_component_names"], [24, 3, 1, "", "_r_binop"], [24, 3, 1, "", "all"], [24, 3, 1, "", "any"], [24, 3, 1, "", "argmax"], [24, 3, 1, "", "argmaxk"], [24, 3, 1, "", "argmin"], [24, 3, 1, "", "argmink"], [24, 3, 1, "", "astype"], [24, 3, 1, "", "attach"], [24, 3, 1, "", "bigint_to_uint_arrays"], [24, 3, 1, "", "clz"], [24, 3, 1, "", "corr"], [24, 3, 1, "", "cov"], [24, 3, 1, "", "ctz"], [24, 4, 1, "", "dtype"], [24, 3, 1, "", "fill"], [24, 3, 1, "", "format_other"], [24, 3, 1, "", "info"], [24, 3, 1, "", "is_registered"], [24, 3, 1, "", "is_sorted"], [24, 4, 1, "", "itemsize"], [24, 3, 1, "", "max"], [24, 3, 1, "", "maxk"], [24, 3, 1, "", "mean"], [24, 3, 1, "", "min"], [24, 3, 1, "", "mink"], [24, 4, 1, "", "name"], [24, 4, 1, "", "ndim"], [24, 4, 1, "", "objtype"], [24, 3, 1, "", "opeq"], [24, 3, 1, "", "parity"], [24, 3, 1, "", "popcount"], [24, 3, 1, "", "pretty_print_info"], [24, 3, 1, "", "prod"], [24, 3, 1, "", "register"], [24, 3, 1, "", "reshape"], [24, 3, 1, "", "rotl"], [24, 3, 1, "", "rotr"], [24, 3, 1, "", "save"], [24, 4, 1, "", "shape"], [24, 4, 1, "", "size"], [24, 3, 1, "", "slice_bits"], [24, 3, 1, "", "std"], [24, 3, 1, "", "sum"], [24, 3, 1, "", "to_cuda"], [24, 3, 1, "", "to_hdf"], [24, 3, 1, "", "to_list"], [24, 3, 1, "", "to_ndarray"], [24, 3, 1, "", "to_parquet"], [24, 3, 1, "", "unregister"], [24, 3, 1, "", "var"]], "arkouda.pdarraycreation": [[25, 5, 1, "", "arange"], [25, 5, 1, "", "array"], [25, 5, 1, "", "bigint_from_uint_arrays"], [25, 5, 1, "", "from_series"], [25, 5, 1, "", "full"], [25, 5, 1, "", "full_like"], [25, 5, 1, "", "linspace"], [25, 5, 1, "", "ones"], [25, 5, 1, "", "ones_like"], [25, 5, 1, "", "randint"], [25, 5, 1, "", "random_strings_lognormal"], [25, 5, 1, "", "random_strings_uniform"], [25, 5, 1, "", "standard_normal"], [25, 5, 1, "", "uniform"], [25, 5, 1, "", "zeros"], [25, 5, 1, "", "zeros_like"]], "arkouda.pdarraysetops": [[26, 5, 1, "", "concatenate"], [26, 5, 1, "", "in1d"], [26, 5, 1, "", "intersect1d"], [26, 5, 1, "", "setdiff1d"], [26, 5, 1, "", "setxor1d"], [26, 5, 1, "", "union1d"]], "arkouda.plotting": [[27, 5, 1, "", "plot_dist"]], "arkouda.row": [[28, 2, 1, "", "Row"]], "arkouda.row.Row": [[28, 3, 1, "", "__repr__"], [28, 3, 1, "", "__str__"], [28, 3, 1, "", "_repr_html_"]], "arkouda.security": [[29, 5, 1, "", "generate_token"], [29, 5, 1, "", "generate_username_token_json"], [29, 5, 1, "", "get_arkouda_client_directory"], [29, 5, 1, "", "get_home_directory"], [29, 5, 1, "", "get_username"], [29, 1, 1, "", "username_tokenizer"]], "arkouda.segarray": [[30, 2, 1, "", "SegArray"], [30, 5, 1, "", "_aggregator"], [30, 5, 1, "", "gen_ranges"], [30, 5, 1, "", "segarray"]], "arkouda.segarray.SegArray": [[30, 3, 1, "", "AND"], [30, 3, 1, "", "OR"], [30, 3, 1, "", "XOR"], [30, 3, 1, "", "__eq__"], [30, 3, 1, "", "__getitem__"], [30, 3, 1, "", "__repr__"], [30, 3, 1, "", "__str__"], [30, 3, 1, "", "_compute_non_empty"], [30, 3, 1, "", "_from_attach_return_msg"], [30, 3, 1, "", "_normalize_index"], [30, 3, 1, "", "aggregate"], [30, 3, 1, "", "all"], [30, 3, 1, "", "any"], [30, 3, 1, "", "append"], [30, 3, 1, "", "append_single"], [30, 3, 1, "", "argmax"], [30, 3, 1, "", "argmin"], [30, 3, 1, "", "attach"], [30, 3, 1, "", "concat"], [30, 3, 1, "", "copy"], [30, 3, 1, "", "from_multi_array"], [30, 3, 1, "", "from_parts"], [30, 3, 1, "", "from_return_msg"], [30, 3, 1, "", "get_jth"], [30, 3, 1, "", "get_length_n"], [30, 3, 1, "", "get_ngrams"], [30, 3, 1, "", "get_prefixes"], [30, 3, 1, "", "get_suffixes"], [30, 3, 1, "", "intersect"], [30, 3, 1, "", "is_registered"], [30, 6, 1, "", "lengths"], [30, 3, 1, "", "load"], [30, 3, 1, "", "max"], [30, 3, 1, "", "mean"], [30, 3, 1, "", "min"], [30, 6, 1, "", "non_empty"], [30, 6, 1, "", "non_empty_count"], [30, 3, 1, "", "nunique"], [30, 6, 1, "", "objtype"], [30, 3, 1, "", "prepend_single"], [30, 3, 1, "", "prod"], [30, 3, 1, "", "register"], [30, 3, 1, "", "remove_repeats"], [30, 3, 1, "", "save"], [30, 3, 1, "", "set_jth"], [30, 3, 1, "", "setdiff"], [30, 3, 1, "", "setxor"], [30, 3, 1, "", "sum"], [30, 3, 1, "", "to_hdf"], [30, 3, 1, "", "to_list"], [30, 3, 1, "", "to_ndarray"], [30, 3, 1, "", "union"], [30, 3, 1, "", "unique"], [30, 3, 1, "", "unregister"], [30, 3, 1, "", "unregister_segarray_by_name"], [30, 4, 1, "", "valsize"]], "arkouda.series": [[31, 2, 1, "", "Series"]], "arkouda.series.Series": [[31, 3, 1, "", "__getitem__"], [31, 3, 1, "", "__len__"], [31, 3, 1, "", "__repr__"], [31, 3, 1, "", "_all_aligned"], [31, 3, 1, "", "_make_aggop"], [31, 3, 1, "", "_make_binop"], [31, 3, 1, "", "_make_unaryop"], [31, 3, 1, "", "add"], [31, 3, 1, "", "attach"], [31, 3, 1, "", "concat"], [31, 3, 1, "", "diff"], [31, 4, 1, "", "dt"], [31, 3, 1, "", "from_return_msg"], [31, 3, 1, "", "head"], [31, 3, 1, "", "is_registered"], [31, 3, 1, "", "isin"], [31, 3, 1, "", "locate"], [31, 3, 1, "", "pdconcat"], [31, 3, 1, "", "register"], [31, 6, 1, "", "shape"], [31, 3, 1, "", "sort_index"], [31, 3, 1, "", "sort_values"], [31, 4, 1, "", "str_acc"], [31, 3, 1, "", "tail"], [31, 3, 1, "", "to_dataframe"], [31, 3, 1, "", "to_pandas"], [31, 3, 1, "", "topn"], [31, 3, 1, "", "value_counts"]], "arkouda.sorting": [[32, 1, 1, "", "SortingAlgorithm"], [32, 5, 1, "", "argsort"], [32, 5, 1, "", "coargsort"], [32, 5, 1, "", "sort"]], "arkouda.strings": [[33, 2, 1, "", "Strings"]], "arkouda.strings.Strings": [[33, 4, 1, "", "BinOps"], [33, 3, 1, "", "__add__"], [33, 3, 1, "", "__eq__"], [33, 3, 1, "", "__getitem__"], [33, 3, 1, "", "__iter__"], [33, 3, 1, "", "__len__"], [33, 3, 1, "", "__ne__"], [33, 3, 1, "", "__radd__"], [33, 3, 1, "", "__repr__"], [33, 3, 1, "", "__str__"], [33, 3, 1, "", "_binop"], [33, 3, 1, "", "_comp_to_ndarray"], [33, 3, 1, "", "_empty_pattern_verification"], [33, 3, 1, "", "_get_grouping_keys"], [33, 3, 1, "", "_get_matcher"], [33, 3, 1, "", "_list_component_names"], [33, 3, 1, "", "astype"], [33, 3, 1, "", "attach"], [33, 3, 1, "", "cached_regex_patterns"], [33, 3, 1, "", "contains"], [33, 3, 1, "", "decode"], [33, 4, 1, "", "dtype"], [33, 3, 1, "", "encode"], [33, 3, 1, "", "endswith"], [33, 4, 1, "", "entry"], [33, 3, 1, "", "find_locations"], [33, 3, 1, "", "findall"], [33, 3, 1, "", "flatten"], [33, 3, 1, "", "from_parts"], [33, 3, 1, "", "from_return_msg"], [33, 3, 1, "", "fullmatch"], [33, 3, 1, "", "get_lengths"], [33, 3, 1, "", "get_prefixes"], [33, 3, 1, "", "get_suffixes"], [33, 3, 1, "", "group"], [33, 3, 1, "", "hash"], [33, 3, 1, "", "info"], [33, 3, 1, "", "is_lower"], [33, 3, 1, "", "is_registered"], [33, 3, 1, "", "is_title"], [33, 3, 1, "", "is_upper"], [33, 4, 1, "", "logger"], [33, 3, 1, "", "lstick"], [33, 3, 1, "", "match"], [33, 4, 1, "", "nbytes"], [33, 4, 1, "", "ndim"], [33, 4, 1, "", "objtype"], [33, 3, 1, "", "peel"], [33, 3, 1, "", "pretty_print_info"], [33, 3, 1, "", "purge_cached_regex_patterns"], [33, 3, 1, "", "register"], [33, 3, 1, "", "rpeel"], [33, 3, 1, "", "save"], [33, 3, 1, "", "search"], [33, 4, 1, "", "shape"], [33, 4, 1, "", "size"], [33, 3, 1, "", "split"], [33, 3, 1, "", "startswith"], [33, 3, 1, "", "stick"], [33, 3, 1, "", "strip"], [33, 3, 1, "", "sub"], [33, 3, 1, "", "subn"], [33, 3, 1, "", "to_hdf"], [33, 3, 1, "", "to_list"], [33, 3, 1, "", "to_lower"], [33, 3, 1, "", "to_ndarray"], [33, 3, 1, "", "to_parquet"], [33, 3, 1, "", "to_title"], [33, 3, 1, "", "to_upper"], [33, 3, 1, "", "unregister"], [33, 3, 1, "", "unregister_strings_by_name"]], "arkouda.timeclass": [[34, 2, 1, "", "Datetime"], [34, 2, 1, "", "Timedelta"], [34, 2, 1, "", "_AbstractBaseTime"], [34, 1, 1, "", "_BASE_UNIT"], [34, 2, 1, "", "_Timescalar"], [34, 5, 1, "", "_get_factor"], [34, 5, 1, "", "_identity"], [34, 1, 1, "", "_unit2factor"], [34, 1, 1, "", "_unit2normunit"], [34, 5, 1, "", "date_range"], [34, 5, 1, "", "timedelta_range"]], "arkouda.timeclass.Datetime": [[34, 3, 1, "", "_ensure_components"], [34, 3, 1, "", "_get_callback"], [34, 3, 1, "", "_is_supported_scalar"], [34, 3, 1, "", "_scalar_callback"], [34, 6, 1, "", "date"], [34, 6, 1, "", "day"], [34, 6, 1, "", "day_of_week"], [34, 6, 1, "", "day_of_year"], [34, 6, 1, "", "dayofweek"], [34, 6, 1, "", "dayofyear"], [34, 6, 1, "", "hour"], [34, 6, 1, "", "is_leap_year"], [34, 3, 1, "", "isocalendar"], [34, 6, 1, "", "microsecond"], [34, 6, 1, "", "millisecond"], [34, 6, 1, "", "minute"], [34, 6, 1, "", "month"], [34, 6, 1, "", "nanosecond"], [34, 6, 1, "", "second"], [34, 3, 1, "", "sum"], [34, 4, 1, "", "supported_opeq"], [34, 4, 1, "", "supported_with_datetime"], [34, 4, 1, "", "supported_with_pdarray"], [34, 4, 1, "", "supported_with_r_datetime"], [34, 4, 1, "", "supported_with_r_pdarray"], [34, 4, 1, "", "supported_with_r_timedelta"], [34, 4, 1, "", "supported_with_timedelta"], [34, 3, 1, "", "to_pandas"], [34, 6, 1, "", "week"], [34, 6, 1, "", "weekday"], [34, 6, 1, "", "weekofyear"], [34, 6, 1, "", "year"]], "arkouda.timeclass.Timedelta": [[34, 3, 1, "", "_ensure_components"], [34, 3, 1, "", "_get_callback"], [34, 3, 1, "", "_is_supported_scalar"], [34, 3, 1, "", "_scalar_callback"], [34, 3, 1, "", "abs"], [34, 6, 1, "", "components"], [34, 6, 1, "", "days"], [34, 6, 1, "", "microseconds"], [34, 6, 1, "", "nanoseconds"], [34, 6, 1, "", "seconds"], [34, 3, 1, "", "std"], [34, 3, 1, "", "sum"], [34, 4, 1, "", "supported_opeq"], [34, 4, 1, "", "supported_with_datetime"], [34, 4, 1, "", "supported_with_pdarray"], [34, 4, 1, "", "supported_with_r_datetime"], [34, 4, 1, "", "supported_with_r_pdarray"], [34, 4, 1, "", "supported_with_r_timedelta"], [34, 4, 1, "", "supported_with_timedelta"], [34, 3, 1, "", "to_pandas"], [34, 3, 1, "", "total_seconds"]], "arkouda.timeclass._AbstractBaseTime": [[34, 3, 1, "", "__getitem__"], [34, 3, 1, "", "__repr__"], [34, 3, 1, "", "__setitem__"], [34, 3, 1, "", "__str__"], [34, 3, 1, "", "_binop"], [34, 3, 1, "", "_get_callback"], [34, 3, 1, "", "_is_datetime_scalar"], [34, 3, 1, "", "_is_timedelta_scalar"], [34, 3, 1, "", "_r_binop"], [34, 3, 1, "", "_scalar_callback"], [34, 3, 1, "", "ceil"], [34, 3, 1, "", "floor"], [34, 3, 1, "", "max"], [34, 3, 1, "", "maxk"], [34, 3, 1, "", "min"], [34, 3, 1, "", "mink"], [34, 3, 1, "", "opeq"], [34, 3, 1, "", "round"], [34, 3, 1, "", "to_list"], [34, 3, 1, "", "to_ndarray"]], "arkouda.util": [[35, 5, 1, "", "attach"], [35, 5, 1, "", "attach_all"], [35, 5, 1, "", "concatenate"], [35, 5, 1, "", "convert_if_categorical"], [35, 5, 1, "", "enrich_inplace"], [35, 5, 1, "", "expand"], [35, 5, 1, "", "generic_concat"], [35, 5, 1, "", "get_callback"], [35, 5, 1, "", "identity"], [35, 5, 1, "", "invert_permutation"], [35, 5, 1, "", "most_common"], [35, 5, 1, "", "register"], [35, 5, 1, "", "register_all"], [35, 5, 1, "", "report_mem"], [35, 5, 1, "", "unregister_all"], [35, 5, 1, "", "unregister_by_name"]]}, "objtypes": {"0": "py:module", "1": "py:data", "2": "py:class", "3": "py:method", "4": "py:attribute", "5": "py:function", "6": "py:property", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "data", "Python data"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"], "6": ["py", "property", "Python property"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"contribut": 0, "ad": [0, 1, 50], "issu": 0, "bug": 0, "report": 0, "featur": [0, 57, 63, 69], "request": 0, "develop": [0, 37, 38, 51], "arkouda": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 39, 40, 42, 44, 45, 47, 50, 57, 60, 63, 68, 69, 71, 72], "code": 0, "convent": 0, "lint": 0, "python3": 0, "chapel": [0, 1, 37, 46, 48, 49], "test": [0, 1, 54], "run": [0, 1, 37, 50], "python": [0, 1, 39, 45, 48, 49, 51, 71], "write": [0, 40, 42, 43], "pull": 0, "review": 0, "core": 0, "team": 0, "onli": 0, "merg": 0, "releas": 0, "process": [0, 50], "environ": [1, 37, 47, 48, 49], "variabl": [1, 47], "compil": 1, "makefil": 1, "flag": 1, "depend": [1, 45, 47, 51], "path": 1, "modul": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 50], "from": [1, 49, 56], "outsid": 1, "src": 1, "directori": 1, "client": [1, 7, 45, 56, 71], "_version": 2, "content": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "class": [2, 3, 5, 6, 8, 9, 12, 13, 14, 20, 21, 22, 23, 24, 28, 30, 31, 33, 34, 67], "function": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 29, 30, 32, 34, 35, 59], "attribut": [2, 5, 11, 12, 13, 15, 20, 29, 32, 34, 40], "accessor": 3, "align": 4, "array_view": 5, "categor": [6, 40, 42, 61], "client_dtyp": 8, "datafram": [9, 39, 40, 42, 63], "decor": 10, "dtype": [11, 57], "groupbyclass": 12, "submodul": 13, "packag": [13, 47], "input": [13, 31], "index": [14, 40, 42, 57, 60, 63, 66], "infoclass": 15, "io": 16, "io_util": 17, "join": [18, 72], "logger": 19, "match": [20, 72], "matcher": 21, "messag": 22, "numer": [23, 59], "pdarrayclass": 24, "pdarraycr": 25, "pdarraysetop": 26, "plot": 27, "row": 28, "secur": 29, "segarrai": [30, 68], "seri": [31, 69], "sort": [32, 58, 63, 69], "string": [33, 40, 42, 72], "timeclass": 34, "util": 35, "api": [36, 40, 41, 42, 43, 46], "refer": [36, 40, 41, 42, 46], "gasnet": 37, "configur": [37, 40, 47, 50], "build": [37, 47, 49, 50], "document": [38, 44, 47], "exampl": 39, "arrai": [39, 62, 68, 70], "pdarrai": [39, 40, 42, 66, 67], "creation": [39, 60], "export": [39, 41, 43, 56], "object": [39, 72], "set": [39, 68, 70], "oper": [39, 59, 61, 67, 68, 70, 72], "creat": [39, 62], "us": [39, 45, 47, 50, 51], "import": [39, 41, 43, 56], "panda": [39, 69], "map": 39, "basic": 39, "interact": 39, "groupbi": [39, 63, 64], "hdf5": 40, "file": [40, 43, 50, 56], "support": [40, 42, 43, 56], "data": [40, 42, 56, 63, 65, 67], "type": [40, 42, 63, 67], "metadata": 40, "schema": 40, "arrayview": [40, 60], "mode": [40, 42], "distribut": [40, 47], "legaci": 40, "parquet": 42, "compress": 42, "i": [43, 56, 72], "o": [43, 56, 72], "format": [43, 56], "gener": 43, "read": [43, 56], "quickstart": 45, "instal": [45, 47, 48, 49, 51, 53], "launch": [45, 71], "server": [45, 47, 50, 56, 71], "connect": [45, 71], "3": [45, 71], "shutdown": 45, "disconnect": 45, "get": 47, "start": 47, "recommend": [47, 49], "all": 47, "individu": 47, "arrow": 47, "troubleshoot": 47, "modular": [47, 50], "linux": 48, "ubuntu": 48, "rhel": 48, "anaconda": [48, 49, 51], "maco": 49, "sourc": 49, "homebrew": 49, "updat": [49, 51], "next": 49, "step": 49, "specifi": 50, "custom": 50, "new": 50, "save": 50, "an": 50, "requir": [51, 53], "list": 51, "specif": [51, 68, 72], "pip": 51, "window": 52, "wsl2": 52, "overview": 53, "guid": [53, 55], "perform": [54, 68, 72], "argsort": [54, 57], "posit": 54, "argument": 54, "name": [54, 67], "gather": [54, 66], "reduc": 54, "scan": [54, 59], "scatter": [54, 66], "stream": 54, "usag": 55, "between": 56, "larg": 56, "dataset": 56, "preprocess": 56, "disk": 56, "chang": 57, "lookup": [57, 69], "concat": 57, "arithmet": 59, "vector": 59, "scalar": 59, "element": [59, 68], "wise": 59, "reduct": 59, "where": 59, "iter": [60, 61, 63, 67, 68, 72], "construct": 61, "constant": 62, "regular": [62, 72], "random": 62, "concaten": [62, 63], "drop": 63, "copi": 63, "filter": 63, "permut": 63, "tail": [63, 69], "head": [63, 69], "renam": 63, "column": 63, "append": [63, 68], "reset": 63, "dedupl": [63, 68], "summar": 65, "descript": 65, "statist": 65, "histogram": 65, "valu": [65, 69], "count": [65, 69], "assign": 66, "integ": 66, "slice": 66, "logic": 66, "The": 67, "rank": 67, "cast": 67, "reshap": 67, "method": [68, 72], "prefix": 68, "suffix": 68, "ngram": 68, "sub": 68, "size": 68, "access": 68, "prepend": 68, "setop": 68, "union": 68, "intersect": 68, "differ": 68, "symmetr": 68, "integr": 69, "startup": 71, "substr": 72, "search": 72, "split": 72, "flatten": 72, "express": 72}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Contributing": [[0, "contributing"]], "Adding Issues": [[0, "adding-issues"]], "Bug Reports": [[0, "bug-reports"]], "Feature Requests": [[0, "feature-requests"]], "Developing Arkouda": [[0, "developing-arkouda"]], "Coding Conventions and Linting": [[0, "coding-conventions-and-linting"]], "Python3": [[0, "python3"]], "Chapel": [[0, "chapel"]], "Testing": [[0, "testing"], [1, "testing"]], "Running python tests": [[0, "running-python-tests"]], "Running chapel tests": [[0, "running-chapel-tests"]], "Writing Pull Requests": [[0, "writing-pull-requests"]], "Reviewing Pull Requests": [[0, "reviewing-pull-requests"]], "Core Development Team Only": [[0, "core-development-team-only"]], "Merging Pull Requests": [[0, "merging-pull-requests"]], "Release Process": [[0, "release-process"]], "Environment Variables": [[1, "environment-variables"], [47, "environment-variables"]], "Running": [[1, "running"]], "Compilation / Makefile": [[1, "compilation-makefile"]], "Chapel Compiler Flags": [[1, "chapel-compiler-flags"]], "Dependency Paths": [[1, "dependency-paths"]], "Adding a Module from Outside the Arkouda src Directory": [[1, "adding-a-module-from-outside-the-arkouda-src-directory"]], "Python Client": [[1, "python-client"]], "arkouda._version": [[2, "module-arkouda._version"]], "Module Contents": [[2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"]], "Classes": [[2, "classes"], [3, "classes"], [5, "classes"], [6, "classes"], [8, "classes"], [9, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [28, "classes"], [30, "classes"], [31, "classes"], [33, "classes"], [34, "classes"]], "Functions": [[2, "functions"], [3, "functions"], [4, "functions"], [7, "functions"], [8, "functions"], [9, "functions"], [10, "functions"], [11, "functions"], [12, "functions"], [13, "functions"], [15, "functions"], [16, "functions"], [17, "functions"], [18, "functions"], [19, "functions"], [23, "functions"], [24, "functions"], [25, "functions"], [26, "functions"], [27, "functions"], [29, "functions"], [30, "functions"], [32, "functions"], [34, "functions"], [35, "functions"]], "Attributes": [[2, "attributes"], [5, "attributes"], [11, "attributes"], [12, "attributes"], [13, "attributes"], [15, "attributes"], [20, "attributes"], [29, "attributes"], [32, "attributes"], [34, "attributes"]], "arkouda.accessor": [[3, "module-arkouda.accessor"]], "arkouda.alignment": [[4, "module-arkouda.alignment"]], "arkouda.array_view": [[5, "module-arkouda.array_view"]], "arkouda.categorical": [[6, "module-arkouda.categorical"]], "arkouda.client": [[7, "module-arkouda.client"]], "arkouda.client_dtypes": [[8, "module-arkouda.client_dtypes"]], "arkouda.dataframe": [[9, "module-arkouda.dataframe"]], "arkouda.decorators": [[10, "module-arkouda.decorators"]], "arkouda.dtypes": [[11, "module-arkouda.dtypes"]], "arkouda.groupbyclass": [[12, "module-arkouda.groupbyclass"]], "arkouda": [[13, "module-arkouda"]], "Submodules": [[13, "submodules"]], "Package Contents": [[13, "package-contents"]], "Input": [[13, "input"], [31, "input"]], "arkouda.index": [[14, "module-arkouda.index"]], "arkouda.infoclass": [[15, "module-arkouda.infoclass"]], "arkouda.io": [[16, "module-arkouda.io"]], "arkouda.io_util": [[17, "module-arkouda.io_util"]], "arkouda.join": [[18, "module-arkouda.join"]], "arkouda.logger": [[19, "module-arkouda.logger"]], "arkouda.match": [[20, "module-arkouda.match"]], "arkouda.matcher": [[21, "module-arkouda.matcher"]], "arkouda.message": [[22, "module-arkouda.message"]], "arkouda.numeric": [[23, "module-arkouda.numeric"]], "arkouda.pdarrayclass": [[24, "module-arkouda.pdarrayclass"]], "arkouda.pdarraycreation": [[25, "module-arkouda.pdarraycreation"]], "arkouda.pdarraysetops": [[26, "module-arkouda.pdarraysetops"]], "arkouda.plotting": [[27, "module-arkouda.plotting"]], "arkouda.row": [[28, "module-arkouda.row"]], "arkouda.security": [[29, "module-arkouda.security"]], "arkouda.segarray": [[30, "module-arkouda.segarray"]], "arkouda.series": [[31, "module-arkouda.series"]], "arkouda.sorting": [[32, "module-arkouda.sorting"]], "arkouda.strings": [[33, "module-arkouda.strings"]], "arkouda.timeclass": [[34, "module-arkouda.timeclass"]], "arkouda.util": [[35, "module-arkouda.util"]], "API Reference": [[36, "api-reference"], [40, "api-reference"], [41, "api-reference"], [42, "api-reference"]], "GASNet Development": [[37, "gasnet-development"]], "Environment Configuration": [[37, "environment-configuration"]], "Build Chapel with GASNet": [[37, "build-chapel-with-gasnet"]], "Build Arkouda": [[37, "build-arkouda"]], "Run Arkouda": [[37, "run-arkouda"]], "Developer Documentation": [[38, "developer-documentation"]], "Examples": [[39, "examples"]], "Arkouda Arrays": [[39, "arkouda-arrays"]], "pdarray Creation": [[39, "pdarray-creation"]], "Exporting pdarray Objects": [[39, "exporting-pdarray-objects"]], "pdarray Set operations": [[39, "pdarray-set-operations"]], "Arkouda DataFrames": [[39, "arkouda-dataframes"]], "Creating & Using a DataFrame": [[39, "creating-using-a-dataframe"]], "Importing Pandas DataFrame": [[39, "importing-pandas-dataframe"]], "Python Mapping": [[39, "python-mapping"]], "Basic Interaction": [[39, "basic-interaction"]], "Exporting to Pandas": [[39, "exporting-to-pandas"]], "GroupBy": [[39, "groupby"], [63, "groupby"], [64, "groupby"]], "pdarrays": [[39, "pdarrays"]], "DataFrames": [[39, "dataframes"]], "HDF5": [[40, "hdf5"]], "File Configuration": [[40, "file-configuration"]], "Supported Arkouda Data Types": [[40, "supported-arkouda-data-types"], [42, "supported-arkouda-data-types"]], "MetaData Attributes": [[40, "metadata-attributes"]], "Data Schema": [[40, "data-schema"]], "ArrayView": [[40, "arrayview"]], "pdarray": [[40, "pdarray"], [40, "id1"], [42, "pdarray"]], "Strings": [[40, "strings"], [40, "id2"], [42, "strings"]], "Supported Write Modes": [[40, "supported-write-modes"], [42, "supported-write-modes"]], "Data Distribution": [[40, "data-distribution"]], "Legacy File Support": [[40, "legacy-file-support"]], "Index": [[40, "index"], [42, "index"]], "DataFrame": [[40, "dataframe"], [42, "dataframe"]], "Categorical": [[40, "categorical"], [42, "categorical"]], "Import/Export": [[41, "import-export"], [56, "import-export"]], "Export": [[41, "export"]], "Import": [[41, "import"]], "Parquet": [[42, "parquet"]], "Compression": [[42, "compression"]], "File I/O": [[43, "file-i-o"]], "Supported File Formats:": [[43, null]], "Import/Export Support": [[43, "import-export-support"]], "General I/O API": [[43, "general-i-o-api"]], "Write": [[43, "write"]], "Read": [[43, "read"]], "Arkouda Documentation": [[44, "arkouda-documentation"]], "Quickstart": [[45, "quickstart"]], "Install Dependencies": [[45, "install-dependencies"]], "Install Arkouda": [[45, "install-arkouda"]], "Launching the Server": [[45, "launching-the-server"]], "Connect the Python 3 Client": [[45, "connect-the-python-3-client"]], "Shutdown/Disconnect": [[45, "shutdown-disconnect"]], "Using Arkouda": [[45, "using-arkouda"]], "Chapel API Reference": [[46, "chapel-api-reference"]], "Building the Server": [[47, "building-the-server"]], "Getting Started": [[47, "getting-started"]], "Dependency Configuration": [[47, "dependency-configuration"]], "Using Environment Installed Dependencies (Recommended)": [[47, "using-environment-installed-dependencies-recommended"]], "Installing Dependencies": [[47, "installing-dependencies"]], "Dependencies": [[47, "dependencies"]], "All Dependencies": [[47, "all-dependencies"]], "Individual Installs": [[47, "individual-installs"]], "Arrow Install Troubleshooting": [[47, "arrow-install-troubleshooting"]], "Distributable Package": [[47, "distributable-package"]], "Build the Server": [[47, "build-the-server"]], "Building the Arkouda Documentation": [[47, "building-the-arkouda-documentation"]], "Modular Building": [[47, "modular-building"]], "Linux": [[48, "linux"]], "Install Chapel (Ubuntu)": [[48, "install-chapel-ubuntu"]], "Install Chapel (RHEL)": [[48, "install-chapel-rhel"]], "Python Environment - Anaconda (Linux)": [[48, "python-environment-anaconda-linux"]], "MacOS": [[49, "macos"]], "Install Chapel": [[49, "install-chapel"]], "Build from Source (Recommended)": [[49, "build-from-source-recommended"]], "Homebrew": [[49, "homebrew"]], "Python Environment - Anaconda": [[49, "python-environment-anaconda"]], "Updating Environment": [[49, "updating-environment"]], "Anaconda": [[49, "anaconda"]], "Next Steps": [[49, "next-steps"]], "Modular Server Builds": [[50, "modular-server-builds"]], "Specifying a custom configuration file": [[50, "specifying-a-custom-configuration-file"]], "Adding new modules into the build process": [[50, "adding-new-modules-into-the-build-process"]], "Saving modules used in an Arkouda server run": [[50, "saving-modules-used-in-an-arkouda-server-run"]], "Requirements": [[51, "requirements"], [53, "requirements"]], "Dependency List": [[51, "dependency-list"]], "Python Dependencies": [[51, "python-dependencies"]], "Developer Specific": [[51, "developer-specific"]], "Installing/Updating Python Dependencies": [[51, "installing-updating-python-dependencies"]], "Using Anaconda": [[51, "using-anaconda"]], "Using Pip": [[51, "using-pip"]], "Windows (WSL2)": [[52, "windows-wsl2"]], "Installation": [[53, "installation"]], "Overview": [[53, "overview"]], "Install Guides": [[53, "install-guides"]], "Performance Testing": [[54, "performance-testing"]], "Argsort": [[54, "argsort"]], "Positional Arguments": [[54, "positional-arguments"], [54, "positional-arguments"], [54, "positional-arguments"], [54, "positional-arguments"], [54, "positional-arguments"], [54, "positional-arguments"]], "Named Arguments": [[54, "named-arguments"], [54, "named-arguments"], [54, "named-arguments"], [54, "named-arguments"], [54, "named-arguments"], [54, "named-arguments"]], "Gather": [[54, "gather"]], "Reduce": [[54, "reduce"]], "Scan": [[54, "scan"]], "Scatter": [[54, "scatter"]], "Stream": [[54, "stream"]], "Usage Guide": [[55, "usage-guide"]], "Data I/O": [[56, "data-i-o"]], "Between client and server": [[56, "between-client-and-server"]], "Large Datasets": [[56, "large-datasets"]], "Supported File Formats": [[56, "supported-file-formats"]], "Data Preprocessing": [[56, "data-preprocessing"]], "Reading data from disk": [[56, "reading-data-from-disk"]], "Indexs in Arkouda": [[57, "indexs-in-arkouda"]], "Features": [[57, "features"], [63, "features"], [69, "features"]], "Change Dtype": [[57, "change-dtype"]], "ArgSort": [[57, "argsort"]], "Lookup": [[57, "lookup"], [69, "lookup"], [69, "id1"]], "Concat": [[57, "concat"]], "Sorting": [[58, "sorting"], [63, "sorting"], [69, "sorting"]], "Arithmetic and Numeric Operations": [[59, "arithmetic-and-numeric-operations"]], "Vector and Scalar Arithmetic": [[59, "vector-and-scalar-arithmetic"]], "Element-wise Functions": [[59, "element-wise-functions"]], "Scans": [[59, "scans"]], "Reductions": [[59, "reductions"]], "Where": [[59, "where"]], "ArrayView in Arkouda": [[60, "arrayview-in-arkouda"]], "Creation": [[60, "creation"]], "Indexing": [[60, "indexing"]], "Iteration": [[60, "iteration"], [61, "iteration"], [63, "iteration"], [67, "iteration"], [68, "iteration"], [72, "iteration"]], "Categoricals": [[61, "categoricals"]], "Construction": [[61, "construction"]], "Operations": [[61, "operations"], [72, "operations"]], "Creating Arrays": [[62, "creating-arrays"]], "Constant": [[62, "constant"]], "Regular": [[62, "regular"]], "Random": [[62, "random"]], "Concatenation": [[62, "concatenation"]], "DataFrames in Arkouda": [[63, "dataframes-in-arkouda"]], "Data Types": [[63, "data-types"]], "Drop": [[63, "drop"]], "Copy": [[63, "copy"]], "Filter": [[63, "filter"]], "Permutations": [[63, "permutations"]], "Tail/Head of Data": [[63, "tail-head-of-data"]], "Rename Columns": [[63, "rename-columns"]], "Append": [[63, "append"]], "Concatenate": [[63, "concatenate"]], "Reset Indexes": [[63, "reset-indexes"]], "Deduplication": [[63, "deduplication"], [68, "deduplication"]], "Summarizing Data": [[65, "summarizing-data"]], "Descriptive Statistics": [[65, "descriptive-statistics"]], "Histogram": [[65, "histogram"]], "Value Counts": [[65, "value-counts"], [69, "value-counts"]], "Indexing and Assignment": [[66, "indexing-and-assignment"]], "Integer": [[66, "integer"]], "Slice": [[66, "slice"]], "Gather/Scatter (pdarray)": [[66, "gather-scatter-pdarray"]], "Integer pdarray index": [[66, "integer-pdarray-index"]], "Logical indexing": [[66, "logical-indexing"]], "The pdarray class": [[67, "the-pdarray-class"]], "Data Type": [[67, "data-type"]], "Rank": [[67, "rank"]], "Name": [[67, "name"]], "Operators": [[67, "operators"]], "Type Casting": [[67, "type-casting"]], "Reshape": [[67, "reshape"]], "SegArrays in Arkouda": [[68, "segarrays-in-arkouda"]], "Performance": [[68, "performance"], [72, "performance"]], "Operation": [[68, "operation"]], "SegArray Specific Methods": [[68, "segarray-specific-methods"]], "Prefix & Suffix": [[68, "prefix-suffix"]], "NGrams": [[68, "ngrams"]], "Sub-array of Size": [[68, "sub-array-of-size"]], "Access/Set Specific Elements in Sub-Array": [[68, "access-set-specific-elements-in-sub-array"]], "Append & Prepend": [[68, "append-prepend"]], "SegArray SetOps": [[68, "segarray-setops"]], "Union": [[68, "union"]], "Intersect": [[68, "intersect"]], "Set Difference": [[68, "set-difference"]], "Symmetric Difference": [[68, "symmetric-difference"]], "Series in Arkouda": [[69, "series-in-arkouda"]], "Head/Tail": [[69, "head-tail"]], "Pandas Integration": [[69, "pandas-integration"]], "Array Set Operations": [[70, "array-set-operations"]], "Startup": [[71, "startup"]], "Launch arkouda server": [[71, "launch-arkouda-server"]], "Connect a Python 3 client": [[71, "connect-a-python-3-client"]], "Strings in Arkouda": [[72, "strings-in-arkouda"]], "I/O": [[72, "i-o"]], "String-Specific Methods": [[72, "string-specific-methods"]], "Substring search": [[72, "substring-search"]], "Splitting and joining": [[72, "splitting-and-joining"]], "Flattening": [[72, "flattening"]], "Regular Expressions": [[72, "regular-expressions"]], "Match Object": [[72, "match-object"]]}, "indexentries": {"handlers (in module arkouda._version)": [[2, "arkouda._version.HANDLERS"]], "long_version_py (in module arkouda._version)": [[2, "arkouda._version.LONG_VERSION_PY"]], "notthismethod": [[2, "arkouda._version.NotThisMethod"]], "versioneerconfig (class in arkouda._version)": [[2, "arkouda._version.VersioneerConfig"]], "arkouda._version": [[2, "module-arkouda._version"]], "get_config() (in module arkouda._version)": [[2, "arkouda._version.get_config"]], "get_keywords() (in module arkouda._version)": [[2, "arkouda._version.get_keywords"]], "get_versions() (in module arkouda._version)": [[2, "arkouda._version.get_versions"]], "git_get_keywords() (in module arkouda._version)": [[2, "arkouda._version.git_get_keywords"]], "git_pieces_from_vcs() (in module arkouda._version)": [[2, "arkouda._version.git_pieces_from_vcs"]], "git_versions_from_keywords() (in module arkouda._version)": [[2, "arkouda._version.git_versions_from_keywords"]], "module": [[2, "module-arkouda._version"], [3, "module-arkouda.accessor"], [4, "module-arkouda.alignment"], [5, "module-arkouda.array_view"], [6, "module-arkouda.categorical"], [7, "module-arkouda.client"], [8, "module-arkouda.client_dtypes"], [9, "module-arkouda.dataframe"], [10, "module-arkouda.decorators"], [11, "module-arkouda.dtypes"], [12, "module-arkouda.groupbyclass"], [13, "module-arkouda"], [14, "module-arkouda.index"], [15, "module-arkouda.infoclass"], [16, "module-arkouda.io"], [17, "module-arkouda.io_util"], [18, "module-arkouda.join"], [19, "module-arkouda.logger"], [20, "module-arkouda.match"], [21, "module-arkouda.matcher"], [22, "module-arkouda.message"], [23, "module-arkouda.numeric"], [24, "module-arkouda.pdarrayclass"], [25, "module-arkouda.pdarraycreation"], [26, "module-arkouda.pdarraysetops"], [27, "module-arkouda.plotting"], [28, "module-arkouda.row"], [29, "module-arkouda.security"], [30, "module-arkouda.segarray"], [31, "module-arkouda.series"], [32, "module-arkouda.sorting"], [33, "module-arkouda.strings"], [34, "module-arkouda.timeclass"], [35, "module-arkouda.util"]], "plus_or_dot() (in module arkouda._version)": [[2, "arkouda._version.plus_or_dot"]], "register_vcs_handler() (in module arkouda._version)": [[2, "arkouda._version.register_vcs_handler"]], "render() (in module arkouda._version)": [[2, "arkouda._version.render"]], "render_git_describe() (in module arkouda._version)": [[2, "arkouda._version.render_git_describe"]], "render_git_describe_long() (in module arkouda._version)": [[2, "arkouda._version.render_git_describe_long"]], "render_pep440() (in module arkouda._version)": [[2, "arkouda._version.render_pep440"]], "render_pep440_old() (in module arkouda._version)": [[2, "arkouda._version.render_pep440_old"]], "render_pep440_post() (in module arkouda._version)": [[2, "arkouda._version.render_pep440_post"]], "render_pep440_pre() (in module arkouda._version)": [[2, "arkouda._version.render_pep440_pre"]], "run_command() (in module arkouda._version)": [[2, "arkouda._version.run_command"]], "versions_from_parentdir() (in module arkouda._version)": [[2, "arkouda._version.versions_from_parentdir"]], "cachedaccessor (class in arkouda.accessor)": [[3, "arkouda.accessor.CachedAccessor"]], "datetimeaccessor (class in arkouda.accessor)": [[3, "arkouda.accessor.DatetimeAccessor"]], "properties (class in arkouda.accessor)": [[3, "arkouda.accessor.Properties"]], "stringaccessor (class in arkouda.accessor)": [[3, "arkouda.accessor.StringAccessor"]], "__get__() (arkouda.accessor.cachedaccessor method)": [[3, "arkouda.accessor.CachedAccessor.__get__"]], "_make_op() (arkouda.accessor.properties class method)": [[3, "arkouda.accessor.Properties._make_op"]], "arkouda.accessor": [[3, "module-arkouda.accessor"]], "date_operators() (in module arkouda.accessor)": [[3, "arkouda.accessor.date_operators"]], "string_operators() (in module arkouda.accessor)": [[3, "arkouda.accessor.string_operators"]], "nonuniqueerror": [[4, "arkouda.alignment.NonUniqueError"], [13, "arkouda.NonUniqueError"]], "align() (in module arkouda.alignment)": [[4, "arkouda.alignment.align"]], "arkouda.alignment": [[4, "module-arkouda.alignment"]], "find() (in module arkouda.alignment)": [[4, "arkouda.alignment.find"]], "in1d_intervals() (in module arkouda.alignment)": [[4, "arkouda.alignment.in1d_intervals"]], "interval_lookup() (in module arkouda.alignment)": [[4, "arkouda.alignment.interval_lookup"]], "is_cosorted() (in module arkouda.alignment)": [[4, "arkouda.alignment.is_cosorted"]], "left_align() (in module arkouda.alignment)": [[4, "arkouda.alignment.left_align"]], "lookup() (in module arkouda.alignment)": [[4, "arkouda.alignment.lookup"]], "right_align() (in module arkouda.alignment)": [[4, "arkouda.alignment.right_align"]], "search_intervals() (in module arkouda.alignment)": [[4, "arkouda.alignment.search_intervals"]], "unsqueeze() (in module arkouda.alignment)": [[4, "arkouda.alignment.unsqueeze"]], "zero_up() (in module arkouda.alignment)": [[4, "arkouda.alignment.zero_up"]], "arrayview (class in arkouda.array_view)": [[5, "arkouda.array_view.ArrayView"]], "ordertype (in module arkouda.array_view)": [[5, "arkouda.array_view.OrderType"]], "__getitem__() (arkouda.array_view.arrayview method)": [[5, "arkouda.array_view.ArrayView.__getitem__"]], "__len__() (arkouda.array_view.arrayview method)": [[5, "arkouda.array_view.ArrayView.__len__"]], "__repr__() (arkouda.array_view.arrayview method)": [[5, "arkouda.array_view.ArrayView.__repr__"]], "__setitem__() (arkouda.array_view.arrayview method)": [[5, "arkouda.array_view.ArrayView.__setitem__"]], "__str__() (arkouda.array_view.arrayview method)": [[5, "arkouda.array_view.ArrayView.__str__"]], "arkouda.array_view": [[5, "module-arkouda.array_view"]], "base (arkouda.array_view.arrayview attribute)": [[5, "arkouda.array_view.ArrayView.base"]], "dtype (arkouda.array_view.arrayview attribute)": [[5, "arkouda.array_view.ArrayView.dtype"]], "itemsize (arkouda.array_view.arrayview attribute)": [[5, "arkouda.array_view.ArrayView.itemsize"]], "ndim (arkouda.array_view.arrayview attribute)": [[5, "arkouda.array_view.ArrayView.ndim"]], "order (arkouda.array_view.arrayview attribute)": [[5, "arkouda.array_view.ArrayView.order"]], "shape (arkouda.array_view.arrayview attribute)": [[5, "arkouda.array_view.ArrayView.shape"]], "size (arkouda.array_view.arrayview attribute)": [[5, "arkouda.array_view.ArrayView.size"]], "to_hdf() (arkouda.array_view.arrayview method)": [[5, "arkouda.array_view.ArrayView.to_hdf"]], "to_list() (arkouda.array_view.arrayview method)": [[5, "arkouda.array_view.ArrayView.to_list"]], "to_ndarray() (arkouda.array_view.arrayview method)": [[5, "arkouda.array_view.ArrayView.to_ndarray"]], "binops (arkouda.categorical.categorical attribute)": [[6, "arkouda.categorical.Categorical.BinOps"]], "categorical (class in arkouda.categorical)": [[6, "arkouda.categorical.Categorical"]], "registerablepieces (arkouda.categorical.categorical attribute)": [[6, "arkouda.categorical.Categorical.RegisterablePieces"]], "requiredpieces (arkouda.categorical.categorical attribute)": [[6, "arkouda.categorical.Categorical.RequiredPieces"]], "__eq__() (arkouda.categorical.categorical method)": [[6, "arkouda.categorical.Categorical.__eq__"]], "__getitem__() (arkouda.categorical.categorical method)": [[6, "arkouda.categorical.Categorical.__getitem__"]], "__iter__() (arkouda.categorical.categorical method)": [[6, "arkouda.categorical.Categorical.__iter__"]], "__len__() (arkouda.categorical.categorical method)": [[6, "arkouda.categorical.Categorical.__len__"]], "__ne__() (arkouda.categorical.categorical method)": [[6, "arkouda.categorical.Categorical.__ne__"]], "__repr__() (arkouda.categorical.categorical method)": [[6, "arkouda.categorical.Categorical.__repr__"]], "__str__() (arkouda.categorical.categorical method)": [[6, "arkouda.categorical.Categorical.__str__"]], "_binop() (arkouda.categorical.categorical method)": [[6, "arkouda.categorical.Categorical._binop"]], "_get_components_dict() (arkouda.categorical.categorical method)": [[6, "arkouda.categorical.Categorical._get_components_dict"]], "_get_grouping_keys() (arkouda.categorical.categorical method)": [[6, "arkouda.categorical.Categorical._get_grouping_keys"]], "_list_component_names() (arkouda.categorical.categorical method)": [[6, "arkouda.categorical.Categorical._list_component_names"]], "_r_binop() (arkouda.categorical.categorical method)": [[6, "arkouda.categorical.Categorical._r_binop"]], "argsort() (arkouda.categorical.categorical method)": [[6, "arkouda.categorical.Categorical.argsort"]], "arkouda.categorical": [[6, "module-arkouda.categorical"]], "attach() (arkouda.categorical.categorical static method)": [[6, "arkouda.categorical.Categorical.attach"]], "categories (arkouda.categorical.categorical attribute)": [[6, "arkouda.categorical.Categorical.categories"]], "codes (arkouda.categorical.categorical attribute)": [[6, "arkouda.categorical.Categorical.codes"]], "concatenate() (arkouda.categorical.categorical method)": [[6, "arkouda.categorical.Categorical.concatenate"]], "contains() (arkouda.categorical.categorical method)": [[6, "arkouda.categorical.Categorical.contains"]], "endswith() (arkouda.categorical.categorical method)": [[6, "arkouda.categorical.Categorical.endswith"]], "from_codes() (arkouda.categorical.categorical class method)": [[6, "arkouda.categorical.Categorical.from_codes"]], "from_return_msg() (arkouda.categorical.categorical static method)": [[6, "arkouda.categorical.Categorical.from_return_msg"]], "group() (arkouda.categorical.categorical method)": [[6, "arkouda.categorical.Categorical.group"]], "in1d() (arkouda.categorical.categorical method)": [[6, "arkouda.categorical.Categorical.in1d"]], "info() (arkouda.categorical.categorical method)": [[6, "arkouda.categorical.Categorical.info"]], "is_registered() (arkouda.categorical.categorical method)": [[6, "arkouda.categorical.Categorical.is_registered"]], "isna() (arkouda.categorical.categorical method)": [[6, "arkouda.categorical.Categorical.isna"]], "ndim (arkouda.categorical.categorical attribute)": [[6, "arkouda.categorical.Categorical.ndim"]], "nlevels (arkouda.categorical.categorical attribute)": [[6, "arkouda.categorical.Categorical.nlevels"]], "objtype (arkouda.categorical.categorical property)": [[6, "arkouda.categorical.Categorical.objtype"]], "parse_hdf_categoricals() (arkouda.categorical.categorical static method)": [[6, "arkouda.categorical.Categorical.parse_hdf_categoricals"]], "permutation (arkouda.categorical.categorical attribute)": [[6, "arkouda.categorical.Categorical.permutation"], [6, "id0"]], "pretty_print_info() (arkouda.categorical.categorical method)": [[6, "arkouda.categorical.Categorical.pretty_print_info"]], "register() (arkouda.categorical.categorical method)": [[6, "arkouda.categorical.Categorical.register"]], "reset_categories() (arkouda.categorical.categorical method)": [[6, "arkouda.categorical.Categorical.reset_categories"]], "save() (arkouda.categorical.categorical method)": [[6, "arkouda.categorical.Categorical.save"]], "segments (arkouda.categorical.categorical attribute)": [[6, "arkouda.categorical.Categorical.segments"], [6, "id1"]], "set_categories() (arkouda.categorical.categorical method)": [[6, "arkouda.categorical.Categorical.set_categories"]], "shape (arkouda.categorical.categorical attribute)": [[6, "arkouda.categorical.Categorical.shape"]], "size (arkouda.categorical.categorical attribute)": [[6, "arkouda.categorical.Categorical.size"]], "sort() (arkouda.categorical.categorical method)": [[6, "arkouda.categorical.Categorical.sort"]], "standardize_categories() (arkouda.categorical.categorical class method)": [[6, "arkouda.categorical.Categorical.standardize_categories"]], "startswith() (arkouda.categorical.categorical method)": [[6, "arkouda.categorical.Categorical.startswith"]], "to_hdf() (arkouda.categorical.categorical method)": [[6, "arkouda.categorical.Categorical.to_hdf"]], "to_list() (arkouda.categorical.categorical method)": [[6, "arkouda.categorical.Categorical.to_list"]], "to_ndarray() (arkouda.categorical.categorical method)": [[6, "arkouda.categorical.Categorical.to_ndarray"]], "to_parquet() (arkouda.categorical.categorical method)": [[6, "arkouda.categorical.Categorical.to_parquet"]], "unique() (arkouda.categorical.categorical method)": [[6, "arkouda.categorical.Categorical.unique"]], "unregister() (arkouda.categorical.categorical method)": [[6, "arkouda.categorical.Categorical.unregister"]], "unregister_categorical_by_name() (arkouda.categorical.categorical static method)": [[6, "arkouda.categorical.Categorical.unregister_categorical_by_name"]], "arkouda.client": [[7, "module-arkouda.client"]], "connect() (in module arkouda.client)": [[7, "arkouda.client.connect"]], "disconnect() (in module arkouda.client)": [[7, "arkouda.client.disconnect"]], "get_config() (in module arkouda.client)": [[7, "arkouda.client.get_config"]], "get_mem_avail() (in module arkouda.client)": [[7, "arkouda.client.get_mem_avail"]], "get_mem_used() (in module arkouda.client)": [[7, "arkouda.client.get_mem_used"]], "get_server_commands() (in module arkouda.client)": [[7, "arkouda.client.get_server_commands"]], "print_server_commands() (in module arkouda.client)": [[7, "arkouda.client.print_server_commands"]], "ruok() (in module arkouda.client)": [[7, "arkouda.client.ruok"]], "shutdown() (in module arkouda.client)": [[7, "arkouda.client.shutdown"]], "bitvector (class in arkouda.client_dtypes)": [[8, "arkouda.client_dtypes.BitVector"]], "bitvectorizer() (in module arkouda.client_dtypes)": [[8, "arkouda.client_dtypes.BitVectorizer"]], "fields (class in arkouda.client_dtypes)": [[8, "arkouda.client_dtypes.Fields"]], "ipv4 (class in arkouda.client_dtypes)": [[8, "arkouda.client_dtypes.IPv4"]], "__getitem__() (arkouda.client_dtypes.bitvector method)": [[8, "arkouda.client_dtypes.BitVector.__getitem__"]], "__getitem__() (arkouda.client_dtypes.ipv4 method)": [[8, "arkouda.client_dtypes.IPv4.__getitem__"]], "__repr__() (arkouda.client_dtypes.bitvector method)": [[8, "arkouda.client_dtypes.BitVector.__repr__"]], "__repr__() (arkouda.client_dtypes.ipv4 method)": [[8, "arkouda.client_dtypes.IPv4.__repr__"]], "__setitem__() (arkouda.client_dtypes.bitvector method)": [[8, "arkouda.client_dtypes.BitVector.__setitem__"]], "__setitem__() (arkouda.client_dtypes.fields method)": [[8, "arkouda.client_dtypes.Fields.__setitem__"]], "__setitem__() (arkouda.client_dtypes.ipv4 method)": [[8, "arkouda.client_dtypes.IPv4.__setitem__"]], "__str__() (arkouda.client_dtypes.bitvector method)": [[8, "arkouda.client_dtypes.BitVector.__str__"]], "__str__() (arkouda.client_dtypes.ipv4 method)": [[8, "arkouda.client_dtypes.IPv4.__str__"]], "_binop() (arkouda.client_dtypes.bitvector method)": [[8, "arkouda.client_dtypes.BitVector._binop"]], "_binop() (arkouda.client_dtypes.fields method)": [[8, "arkouda.client_dtypes.Fields._binop"]], "_binop() (arkouda.client_dtypes.ipv4 method)": [[8, "arkouda.client_dtypes.IPv4._binop"]], "_cast() (arkouda.client_dtypes.bitvector method)": [[8, "arkouda.client_dtypes.BitVector._cast"]], "_cast() (arkouda.client_dtypes.fields method)": [[8, "arkouda.client_dtypes.Fields._cast"]], "_convert_strings() (arkouda.client_dtypes.fields method)": [[8, "arkouda.client_dtypes.Fields._convert_strings"]], "_is_supported_scalar() (arkouda.client_dtypes.ipv4 method)": [[8, "arkouda.client_dtypes.IPv4._is_supported_scalar"]], "_parse_scalar() (arkouda.client_dtypes.fields method)": [[8, "arkouda.client_dtypes.Fields._parse_scalar"]], "_r_binop() (arkouda.client_dtypes.bitvector method)": [[8, "arkouda.client_dtypes.BitVector._r_binop"]], "_r_binop() (arkouda.client_dtypes.fields method)": [[8, "arkouda.client_dtypes.Fields._r_binop"]], "_r_binop() (arkouda.client_dtypes.ipv4 method)": [[8, "arkouda.client_dtypes.IPv4._r_binop"]], "arkouda.client_dtypes": [[8, "module-arkouda.client_dtypes"]], "conserves (arkouda.client_dtypes.bitvector attribute)": [[8, "arkouda.client_dtypes.BitVector.conserves"]], "format() (arkouda.client_dtypes.bitvector method)": [[8, "arkouda.client_dtypes.BitVector.format"]], "format() (arkouda.client_dtypes.fields method)": [[8, "arkouda.client_dtypes.Fields.format"]], "format() (arkouda.client_dtypes.ipv4 method)": [[8, "arkouda.client_dtypes.IPv4.format"]], "ip_address() (in module arkouda.client_dtypes)": [[8, "arkouda.client_dtypes.ip_address"]], "is_ipv4() (in module arkouda.client_dtypes)": [[8, "arkouda.client_dtypes.is_ipv4"]], "is_ipv6() (in module arkouda.client_dtypes)": [[8, "arkouda.client_dtypes.is_ipv6"]], "normalize() (arkouda.client_dtypes.ipv4 method)": [[8, "arkouda.client_dtypes.IPv4.normalize"]], "opeq() (arkouda.client_dtypes.bitvector method)": [[8, "arkouda.client_dtypes.BitVector.opeq"]], "opeq() (arkouda.client_dtypes.fields method)": [[8, "arkouda.client_dtypes.Fields.opeq"]], "opeq() (arkouda.client_dtypes.ipv4 method)": [[8, "arkouda.client_dtypes.IPv4.opeq"]], "to_list() (arkouda.client_dtypes.bitvector method)": [[8, "arkouda.client_dtypes.BitVector.to_list"]], "to_list() (arkouda.client_dtypes.ipv4 method)": [[8, "arkouda.client_dtypes.IPv4.to_list"]], "to_ndarray() (arkouda.client_dtypes.bitvector method)": [[8, "arkouda.client_dtypes.BitVector.to_ndarray"]], "to_ndarray() (arkouda.client_dtypes.ipv4 method)": [[8, "arkouda.client_dtypes.IPv4.to_ndarray"]], "column_classes (arkouda.dataframe.dataframe attribute)": [[9, "arkouda.dataframe.DataFrame.COLUMN_CLASSES"]], "dataframe (class in arkouda.dataframe)": [[9, "arkouda.dataframe.DataFrame"]], "groupby() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame.GroupBy"], [9, "arkouda.dataframe.DataFrame.groupby"]], "__delitem__() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame.__delitem__"]], "__dir__() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame.__dir__"]], "__getattr__() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame.__getattr__"]], "__getitem__() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame.__getitem__"]], "__len__() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame.__len__"]], "__repr__() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame.__repr__"]], "__setitem__() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame.__setitem__"]], "__str__() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame.__str__"]], "_drop_column() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame._drop_column"]], "_drop_row() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame._drop_row"]], "_get_head_tail() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame._get_head_tail"]], "_get_head_tail_server() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame._get_head_tail_server"]], "_ipython_key_completions_() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame._ipython_key_completions_"]], "_ncols() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame._ncols"]], "_parse_col_name() (arkouda.dataframe.dataframe static method)": [[9, "arkouda.dataframe.DataFrame._parse_col_name"]], "_prep_data() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame._prep_data"]], "_rename_column() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame._rename_column"]], "_rename_index() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame._rename_index"]], "_repr_html_() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame._repr_html_"]], "_set_index() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame._set_index"]], "_shape_str() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame._shape_str"]], "append() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame.append"]], "apply_permutation() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame.apply_permutation"]], "argsort() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame.argsort"]], "arkouda.dataframe": [[9, "module-arkouda.dataframe"]], "attach() (arkouda.dataframe.dataframe static method)": [[9, "arkouda.dataframe.DataFrame.attach"]], "coargsort() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame.coargsort"]], "columns (arkouda.dataframe.dataframe property)": [[9, "arkouda.dataframe.DataFrame.columns"]], "concat() (arkouda.dataframe.dataframe class method)": [[9, "arkouda.dataframe.DataFrame.concat"]], "copy() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame.copy"]], "corr() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame.corr"]], "drop() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame.drop"]], "drop_duplicates() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame.drop_duplicates"]], "dtypes (arkouda.dataframe.dataframe property)": [[9, "arkouda.dataframe.DataFrame.dtypes"]], "empty (arkouda.dataframe.dataframe property)": [[9, "arkouda.dataframe.DataFrame.empty"]], "filter_by_range() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame.filter_by_range"]], "from_pandas() (arkouda.dataframe.dataframe class method)": [[9, "arkouda.dataframe.DataFrame.from_pandas"]], "from_return_msg() (arkouda.dataframe.dataframe static method)": [[9, "arkouda.dataframe.DataFrame.from_return_msg"]], "head() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame.head"]], "index (arkouda.dataframe.dataframe property)": [[9, "arkouda.dataframe.DataFrame.index"]], "info (arkouda.dataframe.dataframe property)": [[9, "arkouda.dataframe.DataFrame.info"]], "intersect() (in module arkouda.dataframe)": [[9, "arkouda.dataframe.intersect"]], "intx() (in module arkouda.dataframe)": [[9, "arkouda.dataframe.intx"]], "invert_permutation() (in module arkouda.dataframe)": [[9, "arkouda.dataframe.invert_permutation"]], "is_registered() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame.is_registered"]], "isin() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame.isin"]], "load() (arkouda.dataframe.dataframe class method)": [[9, "arkouda.dataframe.DataFrame.load"]], "memory_usage() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame.memory_usage"]], "register() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame.register"]], "rename() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame.rename"]], "reset_index() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame.reset_index"]], "sample() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame.sample"]], "save() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame.save"]], "shape (arkouda.dataframe.dataframe property)": [[9, "arkouda.dataframe.DataFrame.shape"]], "size (arkouda.dataframe.dataframe property)": [[9, "arkouda.dataframe.DataFrame.size"]], "sort_values() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame.sort_values"]], "sorted() (in module arkouda.dataframe)": [[9, "arkouda.dataframe.sorted"]], "tail() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame.tail"]], "to_hdf() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame.to_hdf"]], "to_pandas() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame.to_pandas"]], "to_parquet() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame.to_parquet"]], "unregister() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame.unregister"]], "unregister_dataframe_by_name() (arkouda.dataframe.dataframe static method)": [[9, "arkouda.dataframe.DataFrame.unregister_dataframe_by_name"]], "update_size() (arkouda.dataframe.dataframe method)": [[9, "arkouda.dataframe.DataFrame.update_size"]], "arkouda.decorators": [[10, "module-arkouda.decorators"]], "objtypedec() (in module arkouda.decorators)": [[10, "arkouda.decorators.objtypedec"]], "arkouda_supported_dtypes (in module arkouda.dtypes)": [[11, "arkouda.dtypes.ARKOUDA_SUPPORTED_DTYPES"]], "dtypeobjects (in module arkouda.dtypes)": [[11, "arkouda.dtypes.DTypeObjects"]], "dtypes (in module arkouda.dtypes)": [[11, "arkouda.dtypes.DTypes"]], "all_scalars (in module arkouda.dtypes)": [[11, "arkouda.dtypes.all_scalars"]], "arkouda.dtypes": [[11, "module-arkouda.dtypes"]], "bigint (in module arkouda.dtypes)": [[11, "arkouda.dtypes.bigint"]], "bittype (in module arkouda.dtypes)": [[11, "arkouda.dtypes.bitType"]], "bool (in module arkouda.dtypes)": [[11, "arkouda.dtypes.bool"]], "bool_scalars (in module arkouda.dtypes)": [[11, "arkouda.dtypes.bool_scalars"]], "check_np_dtype() (in module arkouda.dtypes)": [[11, "arkouda.dtypes.check_np_dtype"]], "dtype() (in module arkouda.dtypes)": [[11, "arkouda.dtypes.dtype"]], "float64 (in module arkouda.dtypes)": [[11, "arkouda.dtypes.float64"]], "float_scalars (in module arkouda.dtypes)": [[11, "arkouda.dtypes.float_scalars"]], "get_byteorder() (in module arkouda.dtypes)": [[11, "arkouda.dtypes.get_byteorder"]], "get_server_byteorder() (in module arkouda.dtypes)": [[11, "arkouda.dtypes.get_server_byteorder"]], "int64 (in module arkouda.dtypes)": [[11, "arkouda.dtypes.int64"]], "inttypes (in module arkouda.dtypes)": [[11, "arkouda.dtypes.intTypes"]], "int_scalars (in module arkouda.dtypes)": [[11, "arkouda.dtypes.int_scalars"]], "numeric_scalars (in module arkouda.dtypes)": [[11, "arkouda.dtypes.numeric_scalars"]], "numpy_scalars (in module arkouda.dtypes)": [[11, "arkouda.dtypes.numpy_scalars"]], "resolve_scalar_dtype() (in module arkouda.dtypes)": [[11, "arkouda.dtypes.resolve_scalar_dtype"]], "str_ (in module arkouda.dtypes)": [[11, "arkouda.dtypes.str_"]], "str_scalars (in module arkouda.dtypes)": [[11, "arkouda.dtypes.str_scalars"]], "translate_np_dtype() (in module arkouda.dtypes)": [[11, "arkouda.dtypes.translate_np_dtype"]], "uint64 (in module arkouda.dtypes)": [[11, "arkouda.dtypes.uint64"]], "uint8 (in module arkouda.dtypes)": [[11, "arkouda.dtypes.uint8"]], "and() (arkouda.groupbyclass.groupby method)": [[12, "arkouda.groupbyclass.GroupBy.AND"]], "groupby_reduction_types (in module arkouda.groupbyclass)": [[12, "arkouda.groupbyclass.GROUPBY_REDUCTION_TYPES"]], "groupby (class in arkouda.groupbyclass)": [[12, "arkouda.groupbyclass.GroupBy"]], "or() (arkouda.groupbyclass.groupby method)": [[12, "arkouda.groupbyclass.GroupBy.OR"]], "reductions (arkouda.groupbyclass.groupby attribute)": [[12, "arkouda.groupbyclass.GroupBy.Reductions"]], "xor() (arkouda.groupbyclass.groupby method)": [[12, "arkouda.groupbyclass.GroupBy.XOR"]], "_get_groupby_required_pieces() (arkouda.groupbyclass.groupby method)": [[12, "arkouda.groupbyclass.GroupBy._get_groupby_required_pieces"]], "_nested_grouping_helper() (arkouda.groupbyclass.groupby method)": [[12, "arkouda.groupbyclass.GroupBy._nested_grouping_helper"]], "aggregate() (arkouda.groupbyclass.groupby method)": [[12, "arkouda.groupbyclass.GroupBy.aggregate"]], "all() (arkouda.groupbyclass.groupby method)": [[12, "arkouda.groupbyclass.GroupBy.all"]], "any() (arkouda.groupbyclass.groupby method)": [[12, "arkouda.groupbyclass.GroupBy.any"]], "argmax() (arkouda.groupbyclass.groupby method)": [[12, "arkouda.groupbyclass.GroupBy.argmax"]], "argmin() (arkouda.groupbyclass.groupby method)": [[12, "arkouda.groupbyclass.GroupBy.argmin"]], "arkouda.groupbyclass": [[12, "module-arkouda.groupbyclass"]], "attach() (arkouda.groupbyclass.groupby static method)": [[12, "arkouda.groupbyclass.GroupBy.attach"]], "broadcast() (arkouda.groupbyclass.groupby method)": [[12, "arkouda.groupbyclass.GroupBy.broadcast"]], "broadcast() (in module arkouda.groupbyclass)": [[12, "arkouda.groupbyclass.broadcast"]], "build_from_components() (arkouda.groupbyclass.groupby static method)": [[12, "arkouda.groupbyclass.GroupBy.build_from_components"]], "count() (arkouda.groupbyclass.groupby method)": [[12, "arkouda.groupbyclass.GroupBy.count"]], "first() (arkouda.groupbyclass.groupby method)": [[12, "arkouda.groupbyclass.GroupBy.first"]], "is_registered() (arkouda.groupbyclass.groupby method)": [[12, "arkouda.groupbyclass.GroupBy.is_registered"]], "logger (arkouda.groupbyclass.groupby attribute)": [[12, "arkouda.groupbyclass.GroupBy.logger"]], "max() (arkouda.groupbyclass.groupby method)": [[12, "arkouda.groupbyclass.GroupBy.max"]], "mean() (arkouda.groupbyclass.groupby method)": [[12, "arkouda.groupbyclass.GroupBy.mean"]], "median() (arkouda.groupbyclass.groupby method)": [[12, "arkouda.groupbyclass.GroupBy.median"]], "min() (arkouda.groupbyclass.groupby method)": [[12, "arkouda.groupbyclass.GroupBy.min"]], "mode() (arkouda.groupbyclass.groupby method)": [[12, "arkouda.groupbyclass.GroupBy.mode"]], "most_common() (arkouda.groupbyclass.groupby method)": [[12, "arkouda.groupbyclass.GroupBy.most_common"]], "ngroups (arkouda.groupbyclass.groupby attribute)": [[12, "arkouda.groupbyclass.GroupBy.ngroups"]], "nkeys (arkouda.groupbyclass.groupby attribute)": [[12, "arkouda.groupbyclass.GroupBy.nkeys"]], "nunique() (arkouda.groupbyclass.groupby method)": [[12, "arkouda.groupbyclass.GroupBy.nunique"]], "permutation (arkouda.groupbyclass.groupby attribute)": [[12, "arkouda.groupbyclass.GroupBy.permutation"]], "prod() (arkouda.groupbyclass.groupby method)": [[12, "arkouda.groupbyclass.GroupBy.prod"]], "register() (arkouda.groupbyclass.groupby method)": [[12, "arkouda.groupbyclass.GroupBy.register"]], "segments (arkouda.groupbyclass.groupby attribute)": [[12, "arkouda.groupbyclass.GroupBy.segments"]], "size (arkouda.groupbyclass.groupby attribute)": [[12, "arkouda.groupbyclass.GroupBy.size"]], "size() (arkouda.groupbyclass.groupby method)": [[12, "id0"]], "std() (arkouda.groupbyclass.groupby method)": [[12, "arkouda.groupbyclass.GroupBy.std"]], "sum() (arkouda.groupbyclass.groupby method)": [[12, "arkouda.groupbyclass.GroupBy.sum"]], "unique() (arkouda.groupbyclass.groupby method)": [[12, "arkouda.groupbyclass.GroupBy.unique"]], "unique() (in module arkouda.groupbyclass)": [[12, "arkouda.groupbyclass.unique"]], "unique_keys (arkouda.groupbyclass.groupby attribute)": [[12, "arkouda.groupbyclass.GroupBy.unique_keys"]], "unregister() (arkouda.groupbyclass.groupby method)": [[12, "arkouda.groupbyclass.GroupBy.unregister"]], "unregister_groupby_by_name() (arkouda.groupbyclass.groupby static method)": [[12, "arkouda.groupbyclass.GroupBy.unregister_groupby_by_name"]], "var() (arkouda.groupbyclass.groupby method)": [[12, "arkouda.groupbyclass.GroupBy.var"]], "and() (arkouda.segarray method)": [[13, "arkouda.SegArray.AND"]], "arkouda_supported_dtypes (in module arkouda)": [[13, "arkouda.ARKOUDA_SUPPORTED_DTYPES"]], "allsymbols (in module arkouda)": [[13, "arkouda.AllSymbols"]], "arrayview (class in arkouda)": [[13, "arkouda.ArrayView"], [60, "arkouda.ArrayView"]], "binops (arkouda.strings attribute)": [[13, "arkouda.Strings.BinOps"], [13, "id244"], [13, "id797"]], "binops (arkouda.pdarray attribute)": [[13, "arkouda.pdarray.BinOps"], [13, "id126"], [13, "id321"], [13, "id440"], [13, "id558"], [13, "id678"], [13, "id9"]], "bitvector (class in arkouda)": [[13, "arkouda.BitVector"]], "bitvectorizer() (in module arkouda)": [[13, "arkouda.BitVectorizer"]], "column_classes (arkouda.dataframe attribute)": [[13, "arkouda.DataFrame.COLUMN_CLASSES"]], "dtypeobjects (in module arkouda)": [[13, "arkouda.DTypeObjects"]], "dtypes (in module arkouda)": [[13, "arkouda.DTypes"]], "dataframe (class in arkouda)": [[13, "arkouda.DataFrame"], [63, "arkouda.DataFrame"]], "datetime (class in arkouda)": [[13, "arkouda.Datetime"]], "errormode (class in arkouda)": [[13, "arkouda.ErrorMode"]], "fields (class in arkouda)": [[13, "arkouda.Fields"]], "groupby() (arkouda.dataframe method)": [[13, "arkouda.DataFrame.GroupBy"], [13, "arkouda.DataFrame.groupby"]], "ipv4 (class in arkouda)": [[13, "arkouda.IPv4"]], "index (class in arkouda)": [[13, "arkouda.Index"], [57, "arkouda.Index"]], "multiindex (class in arkouda)": [[13, "arkouda.MultiIndex"]], "or() (arkouda.segarray method)": [[13, "arkouda.SegArray.OR"]], "opeqops (arkouda.pdarray attribute)": [[13, "arkouda.pdarray.OpEqOps"], [13, "id10"], [13, "id127"], [13, "id322"], [13, "id441"], [13, "id559"], [13, "id679"]], "ordertype (in module arkouda)": [[13, "arkouda.OrderType"]], "registeredsymbols (in module arkouda)": [[13, "arkouda.RegisteredSymbols"]], "registrationerror": [[13, "arkouda.RegistrationError"], [13, "id430"], [24, "arkouda.pdarrayclass.RegistrationError"]], "row (class in arkouda)": [[13, "arkouda.Row"]], "segarray (class in arkouda)": [[13, "arkouda.SegArray"]], "series (class in arkouda)": [[13, "arkouda.Series"], [69, "arkouda.Series"]], "sortingalgorithm (in module arkouda)": [[13, "arkouda.SortingAlgorithm"]], "strings (class in arkouda)": [[13, "arkouda.Strings"], [13, "id236"], [13, "id789"]], "timedelta (class in arkouda)": [[13, "arkouda.Timedelta"]], "xor() (arkouda.segarray method)": [[13, "arkouda.SegArray.XOR"]], "_abstractbasetime (class in arkouda)": [[13, "arkouda._AbstractBaseTime"]], "_base_unit (in module arkouda)": [[13, "arkouda._BASE_UNIT"]], "_timescalar (class in arkouda)": [[13, "arkouda._Timescalar"]], "__add__() (arkouda.strings method)": [[13, "arkouda.Strings.__add__"], [13, "id285"], [13, "id838"]], "__add__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__add__"], [13, "id138"], [13, "id21"], [13, "id333"], [13, "id452"], [13, "id570"], [13, "id690"]], "__and__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__and__"], [13, "id154"], [13, "id349"], [13, "id37"], [13, "id468"], [13, "id586"], [13, "id706"]], "__array_priority__ (arkouda.pdarray attribute)": [[13, "arkouda.pdarray.__array_priority__"], [13, "id12"], [13, "id129"], [13, "id324"], [13, "id443"], [13, "id561"], [13, "id681"]], "__bool__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__bool__"], [13, "id131"], [13, "id14"], [13, "id326"], [13, "id445"], [13, "id563"], [13, "id683"]], "__del__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__del__"], [13, "id13"], [13, "id130"], [13, "id325"], [13, "id444"], [13, "id562"], [13, "id682"]], "__delitem__() (arkouda.dataframe method)": [[13, "arkouda.DataFrame.__delitem__"]], "__dir__() (arkouda.dataframe method)": [[13, "arkouda.DataFrame.__dir__"]], "__eq__() (arkouda.index method)": [[13, "arkouda.Index.__eq__"]], "__eq__() (arkouda.multiindex method)": [[13, "arkouda.MultiIndex.__eq__"]], "__eq__() (arkouda.segarray method)": [[13, "arkouda.SegArray.__eq__"]], "__eq__() (arkouda.strings method)": [[13, "arkouda.Strings.__eq__"], [13, "id253"], [13, "id806"]], "__eq__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__eq__"], [13, "id166"], [13, "id361"], [13, "id480"], [13, "id49"], [13, "id598"], [13, "id718"]], "__floordiv__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__floordiv__"], [13, "id146"], [13, "id29"], [13, "id341"], [13, "id460"], [13, "id578"], [13, "id698"]], "__ge__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__ge__"], [13, "id165"], [13, "id360"], [13, "id479"], [13, "id48"], [13, "id597"], [13, "id717"]], "__getattr__() (arkouda.dataframe method)": [[13, "arkouda.DataFrame.__getattr__"]], "__getitem__() (arkouda.arrayview method)": [[13, "arkouda.ArrayView.__getitem__"]], "__getitem__() (arkouda.bitvector method)": [[13, "arkouda.BitVector.__getitem__"]], "__getitem__() (arkouda.dataframe method)": [[13, "arkouda.DataFrame.__getitem__"]], "__getitem__() (arkouda.ipv4 method)": [[13, "arkouda.IPv4.__getitem__"]], "__getitem__() (arkouda.index method)": [[13, "arkouda.Index.__getitem__"]], "__getitem__() (arkouda.multiindex method)": [[13, "arkouda.MultiIndex.__getitem__"]], "__getitem__() (arkouda.segarray method)": [[13, "arkouda.SegArray.__getitem__"]], "__getitem__() (arkouda.series method)": [[13, "arkouda.Series.__getitem__"]], "__getitem__() (arkouda.strings method)": [[13, "arkouda.Strings.__getitem__"], [13, "id255"], [13, "id808"]], "__getitem__() (arkouda._abstractbasetime method)": [[13, "arkouda._AbstractBaseTime.__getitem__"]], "__getitem__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__getitem__"], [13, "id184"], [13, "id379"], [13, "id498"], [13, "id616"], [13, "id67"], [13, "id736"]], "__gt__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__gt__"], [13, "id163"], [13, "id358"], [13, "id46"], [13, "id477"], [13, "id595"], [13, "id715"]], "__iadd__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__iadd__"], [13, "id171"], [13, "id366"], [13, "id485"], [13, "id54"], [13, "id603"], [13, "id723"]], "__iand__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__iand__"], [13, "id179"], [13, "id374"], [13, "id493"], [13, "id611"], [13, "id62"], [13, "id731"]], "__ifloordiv__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__ifloordiv__"], [13, "id176"], [13, "id371"], [13, "id490"], [13, "id59"], [13, "id608"], [13, "id728"]], "__ilshift__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__ilshift__"], [13, "id177"], [13, "id372"], [13, "id491"], [13, "id60"], [13, "id609"], [13, "id729"]], "__imod__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__imod__"], [13, "id175"], [13, "id370"], [13, "id489"], [13, "id58"], [13, "id607"], [13, "id727"]], "__imul__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__imul__"], [13, "id173"], [13, "id368"], [13, "id487"], [13, "id56"], [13, "id605"], [13, "id725"]], "__invert__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__invert__"], [13, "id169"], [13, "id364"], [13, "id483"], [13, "id52"], [13, "id601"], [13, "id721"]], "__ior__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__ior__"], [13, "id180"], [13, "id375"], [13, "id494"], [13, "id612"], [13, "id63"], [13, "id732"]], "__ipow__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__ipow__"], [13, "id182"], [13, "id377"], [13, "id496"], [13, "id614"], [13, "id65"], [13, "id734"]], "__irshift__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__irshift__"], [13, "id178"], [13, "id373"], [13, "id492"], [13, "id61"], [13, "id610"], [13, "id730"]], "__isub__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__isub__"], [13, "id172"], [13, "id367"], [13, "id486"], [13, "id55"], [13, "id604"], [13, "id724"]], "__iter__() (arkouda.strings method)": [[13, "arkouda.Strings.__iter__"], [13, "id248"], [13, "id801"]], "__iter__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__iter__"], [13, "id183"], [13, "id378"], [13, "id497"], [13, "id615"], [13, "id66"], [13, "id735"]], "__itruediv__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__itruediv__"], [13, "id174"], [13, "id369"], [13, "id488"], [13, "id57"], [13, "id606"], [13, "id726"]], "__ixor__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__ixor__"], [13, "id181"], [13, "id376"], [13, "id495"], [13, "id613"], [13, "id64"], [13, "id733"]], "__le__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__le__"], [13, "id164"], [13, "id359"], [13, "id47"], [13, "id478"], [13, "id596"], [13, "id716"]], "__len__() (arkouda.arrayview method)": [[13, "arkouda.ArrayView.__len__"]], "__len__() (arkouda.dataframe method)": [[13, "arkouda.DataFrame.__len__"]], "__len__() (arkouda.index method)": [[13, "arkouda.Index.__len__"]], "__len__() (arkouda.multiindex method)": [[13, "arkouda.MultiIndex.__len__"]], "__len__() (arkouda.series method)": [[13, "arkouda.Series.__len__"]], "__len__() (arkouda.strings method)": [[13, "arkouda.Strings.__len__"], [13, "id249"], [13, "id802"]], "__len__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__len__"], [13, "id132"], [13, "id15"], [13, "id327"], [13, "id446"], [13, "id564"], [13, "id684"]], "__lshift__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__lshift__"], [13, "id150"], [13, "id33"], [13, "id345"], [13, "id464"], [13, "id582"], [13, "id702"]], "__lt__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__lt__"], [13, "id162"], [13, "id357"], [13, "id45"], [13, "id476"], [13, "id594"], [13, "id714"]], "__mod__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__mod__"], [13, "id148"], [13, "id31"], [13, "id343"], [13, "id462"], [13, "id580"], [13, "id700"]], "__mul__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__mul__"], [13, "id142"], [13, "id25"], [13, "id337"], [13, "id456"], [13, "id574"], [13, "id694"]], "__ne__() (arkouda.strings method)": [[13, "arkouda.Strings.__ne__"], [13, "id254"], [13, "id807"]], "__ne__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__ne__"], [13, "id167"], [13, "id362"], [13, "id481"], [13, "id50"], [13, "id599"], [13, "id719"]], "__neg__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__neg__"], [13, "id168"], [13, "id363"], [13, "id482"], [13, "id51"], [13, "id600"], [13, "id720"]], "__or__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__or__"], [13, "id156"], [13, "id351"], [13, "id39"], [13, "id470"], [13, "id588"], [13, "id708"]], "__pow__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__pow__"], [13, "id160"], [13, "id355"], [13, "id43"], [13, "id474"], [13, "id592"], [13, "id712"]], "__radd__() (arkouda.strings method)": [[13, "arkouda.Strings.__radd__"], [13, "id287"], [13, "id840"]], "__radd__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__radd__"], [13, "id139"], [13, "id22"], [13, "id334"], [13, "id453"], [13, "id571"], [13, "id691"]], "__rand__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__rand__"], [13, "id155"], [13, "id350"], [13, "id38"], [13, "id469"], [13, "id587"], [13, "id707"]], "__repr__() (arkouda.arrayview method)": [[13, "arkouda.ArrayView.__repr__"]], "__repr__() (arkouda.bitvector method)": [[13, "arkouda.BitVector.__repr__"]], "__repr__() (arkouda.dataframe method)": [[13, "arkouda.DataFrame.__repr__"]], "__repr__() (arkouda.ipv4 method)": [[13, "arkouda.IPv4.__repr__"]], "__repr__() (arkouda.index method)": [[13, "arkouda.Index.__repr__"]], "__repr__() (arkouda.multiindex method)": [[13, "arkouda.MultiIndex.__repr__"]], "__repr__() (arkouda.row method)": [[13, "arkouda.Row.__repr__"]], "__repr__() (arkouda.segarray method)": [[13, "arkouda.SegArray.__repr__"]], "__repr__() (arkouda.series method)": [[13, "arkouda.Series.__repr__"]], "__repr__() (arkouda.strings method)": [[13, "arkouda.Strings.__repr__"], [13, "id251"], [13, "id804"]], "__repr__() (arkouda._abstractbasetime method)": [[13, "arkouda._AbstractBaseTime.__repr__"]], "__repr__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__repr__"], [13, "id134"], [13, "id17"], [13, "id329"], [13, "id448"], [13, "id566"], [13, "id686"]], "__rfloordiv__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__rfloordiv__"], [13, "id147"], [13, "id30"], [13, "id342"], [13, "id461"], [13, "id579"], [13, "id699"]], "__rlshift__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__rlshift__"], [13, "id151"], [13, "id34"], [13, "id346"], [13, "id465"], [13, "id583"], [13, "id703"]], "__rmod__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__rmod__"], [13, "id149"], [13, "id32"], [13, "id344"], [13, "id463"], [13, "id581"], [13, "id701"]], "__rmul__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__rmul__"], [13, "id143"], [13, "id26"], [13, "id338"], [13, "id457"], [13, "id575"], [13, "id695"]], "__ror__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__ror__"], [13, "id157"], [13, "id352"], [13, "id40"], [13, "id471"], [13, "id589"], [13, "id709"]], "__rpow__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__rpow__"], [13, "id161"], [13, "id356"], [13, "id44"], [13, "id475"], [13, "id593"], [13, "id713"]], "__rrshift__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__rrshift__"], [13, "id153"], [13, "id348"], [13, "id36"], [13, "id467"], [13, "id585"], [13, "id705"]], "__rshift__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__rshift__"], [13, "id152"], [13, "id347"], [13, "id35"], [13, "id466"], [13, "id584"], [13, "id704"]], "__rsub__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__rsub__"], [13, "id141"], [13, "id24"], [13, "id336"], [13, "id455"], [13, "id573"], [13, "id693"]], "__rtruediv__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__rtruediv__"], [13, "id145"], [13, "id28"], [13, "id340"], [13, "id459"], [13, "id577"], [13, "id697"]], "__rxor__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__rxor__"], [13, "id159"], [13, "id354"], [13, "id42"], [13, "id473"], [13, "id591"], [13, "id711"]], "__setitem__() (arkouda.arrayview method)": [[13, "arkouda.ArrayView.__setitem__"]], "__setitem__() (arkouda.bitvector method)": [[13, "arkouda.BitVector.__setitem__"]], "__setitem__() (arkouda.dataframe method)": [[13, "arkouda.DataFrame.__setitem__"]], "__setitem__() (arkouda.fields method)": [[13, "arkouda.Fields.__setitem__"]], "__setitem__() (arkouda.ipv4 method)": [[13, "arkouda.IPv4.__setitem__"]], "__setitem__() (arkouda._abstractbasetime method)": [[13, "arkouda._AbstractBaseTime.__setitem__"]], "__setitem__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__setitem__"], [13, "id185"], [13, "id380"], [13, "id499"], [13, "id617"], [13, "id68"], [13, "id737"]], "__str__() (arkouda.arrayview method)": [[13, "arkouda.ArrayView.__str__"]], "__str__() (arkouda.bitvector method)": [[13, "arkouda.BitVector.__str__"]], "__str__() (arkouda.dataframe method)": [[13, "arkouda.DataFrame.__str__"]], "__str__() (arkouda.ipv4 method)": [[13, "arkouda.IPv4.__str__"]], "__str__() (arkouda.row method)": [[13, "arkouda.Row.__str__"]], "__str__() (arkouda.segarray method)": [[13, "arkouda.SegArray.__str__"]], "__str__() (arkouda.strings method)": [[13, "arkouda.Strings.__str__"], [13, "id250"], [13, "id803"]], "__str__() (arkouda._abstractbasetime method)": [[13, "arkouda._AbstractBaseTime.__str__"]], "__str__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__str__"], [13, "id133"], [13, "id16"], [13, "id328"], [13, "id447"], [13, "id565"], [13, "id685"]], "__sub__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__sub__"], [13, "id140"], [13, "id23"], [13, "id335"], [13, "id454"], [13, "id572"], [13, "id692"]], "__truediv__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__truediv__"], [13, "id144"], [13, "id27"], [13, "id339"], [13, "id458"], [13, "id576"], [13, "id696"]], "__version__ (in module arkouda)": [[13, "arkouda.__version__"]], "__xor__() (arkouda.pdarray method)": [[13, "arkouda.pdarray.__xor__"], [13, "id158"], [13, "id353"], [13, "id41"], [13, "id472"], [13, "id590"], [13, "id710"]], "_aggregator() (in module arkouda)": [[13, "arkouda._aggregator"]], "_all_aligned() (arkouda.series static method)": [[13, "arkouda.Series._all_aligned"]], "_binop() (arkouda.bitvector method)": [[13, "arkouda.BitVector._binop"]], "_binop() (arkouda.fields method)": [[13, "arkouda.Fields._binop"]], "_binop() (arkouda.ipv4 method)": [[13, "arkouda.IPv4._binop"]], "_binop() (arkouda.strings method)": [[13, "arkouda.Strings._binop"], [13, "id252"], [13, "id805"]], "_binop() (arkouda._abstractbasetime method)": [[13, "arkouda._AbstractBaseTime._binop"]], "_binop() (arkouda.pdarray method)": [[13, "arkouda.pdarray._binop"], [13, "id136"], [13, "id19"], [13, "id331"], [13, "id450"], [13, "id568"], [13, "id688"]], "_cast() (arkouda.bitvector method)": [[13, "arkouda.BitVector._cast"]], "_cast() (arkouda.fields method)": [[13, "arkouda.Fields._cast"]], "_check_aligned() (arkouda.index method)": [[13, "arkouda.Index._check_aligned"]], "_check_types() (arkouda.index method)": [[13, "arkouda.Index._check_types"]], "_comp_to_ndarray() (arkouda.strings method)": [[13, "arkouda.Strings._comp_to_ndarray"], [13, "id295"], [13, "id848"]], "_compute_non_empty() (arkouda.segarray method)": [[13, "arkouda.SegArray._compute_non_empty"]], "_convert_strings() (arkouda.fields method)": [[13, "arkouda.Fields._convert_strings"]], "_drop_column() (arkouda.dataframe method)": [[13, "arkouda.DataFrame._drop_column"]], "_drop_row() (arkouda.dataframe method)": [[13, "arkouda.DataFrame._drop_row"]], "_empty_pattern_verification() (arkouda.strings method)": [[13, "arkouda.Strings._empty_pattern_verification"], [13, "id268"], [13, "id821"]], "_ensure_components() (arkouda.datetime method)": [[13, "arkouda.Datetime._ensure_components"]], "_ensure_components() (arkouda.timedelta method)": [[13, "arkouda.Timedelta._ensure_components"]], "_from_attach_return_msg() (arkouda.segarray class method)": [[13, "arkouda.SegArray._from_attach_return_msg"]], "_get_callback() (arkouda.datetime class method)": [[13, "arkouda.Datetime._get_callback"]], "_get_callback() (arkouda.timedelta class method)": [[13, "arkouda.Timedelta._get_callback"]], "_get_callback() (arkouda._abstractbasetime class method)": [[13, "arkouda._AbstractBaseTime._get_callback"]], "_get_factor() (in module arkouda)": [[13, "arkouda._get_factor"]], "_get_grouping_keys() (arkouda.strings method)": [[13, "arkouda.Strings._get_grouping_keys"], [13, "id292"], [13, "id845"]], "_get_grouping_keys() (arkouda.pdarray method)": [[13, "arkouda.pdarray._get_grouping_keys"], [13, "id111"], [13, "id228"], [13, "id423"], [13, "id542"], [13, "id660"], [13, "id780"]], "_get_head_tail() (arkouda.dataframe method)": [[13, "arkouda.DataFrame._get_head_tail"]], "_get_head_tail_server() (arkouda.dataframe method)": [[13, "arkouda.DataFrame._get_head_tail_server"]], "_get_matcher() (arkouda.strings method)": [[13, "arkouda.Strings._get_matcher"], [13, "id269"], [13, "id822"]], "_identity() (in module arkouda)": [[13, "arkouda._identity"]], "_ipython_key_completions_() (arkouda.dataframe method)": [[13, "arkouda.DataFrame._ipython_key_completions_"]], "_is_datetime_scalar() (arkouda._abstractbasetime static method)": [[13, "arkouda._AbstractBaseTime._is_datetime_scalar"]], "_is_supported_scalar() (arkouda.datetime static method)": [[13, "arkouda.Datetime._is_supported_scalar"]], "_is_supported_scalar() (arkouda.ipv4 method)": [[13, "arkouda.IPv4._is_supported_scalar"]], "_is_supported_scalar() (arkouda.timedelta static method)": [[13, "arkouda.Timedelta._is_supported_scalar"]], "_is_timedelta_scalar() (arkouda._abstractbasetime static method)": [[13, "arkouda._AbstractBaseTime._is_timedelta_scalar"]], "_list_component_names() (arkouda.strings method)": [[13, "arkouda.Strings._list_component_names"], [13, "id301"], [13, "id854"]], "_list_component_names() (arkouda.pdarray method)": [[13, "arkouda.pdarray._list_component_names"], [13, "id190"], [13, "id385"], [13, "id504"], [13, "id622"], [13, "id73"], [13, "id742"]], "_make_aggop() (arkouda.series class method)": [[13, "arkouda.Series._make_aggop"]], "_make_binop() (arkouda.series class method)": [[13, "arkouda.Series._make_binop"]], "_make_unaryop() (arkouda.series class method)": [[13, "arkouda.Series._make_unaryop"]], "_merge() (arkouda.index method)": [[13, "arkouda.Index._merge"]], "_merge() (arkouda.multiindex method)": [[13, "arkouda.MultiIndex._merge"]], "_merge_all() (arkouda.index method)": [[13, "arkouda.Index._merge_all"]], "_merge_all() (arkouda.multiindex method)": [[13, "arkouda.MultiIndex._merge_all"]], "_ncols() (arkouda.dataframe method)": [[13, "arkouda.DataFrame._ncols"]], "_normalize_index() (arkouda.segarray method)": [[13, "arkouda.SegArray._normalize_index"]], "_parse_col_name() (arkouda.dataframe static method)": [[13, "arkouda.DataFrame._parse_col_name"]], "_parse_scalar() (arkouda.fields method)": [[13, "arkouda.Fields._parse_scalar"]], "_prep_data() (arkouda.dataframe method)": [[13, "arkouda.DataFrame._prep_data"]], "_r_binop() (arkouda.bitvector method)": [[13, "arkouda.BitVector._r_binop"]], "_r_binop() (arkouda.fields method)": [[13, "arkouda.Fields._r_binop"]], "_r_binop() (arkouda.ipv4 method)": [[13, "arkouda.IPv4._r_binop"]], "_r_binop() (arkouda._abstractbasetime method)": [[13, "arkouda._AbstractBaseTime._r_binop"]], "_r_binop() (arkouda.pdarray method)": [[13, "arkouda.pdarray._r_binop"], [13, "id137"], [13, "id20"], [13, "id332"], [13, "id451"], [13, "id569"], [13, "id689"]], "_rename_column() (arkouda.dataframe method)": [[13, "arkouda.DataFrame._rename_column"]], "_rename_index() (arkouda.dataframe method)": [[13, "arkouda.DataFrame._rename_index"]], "_repr_html_() (arkouda.dataframe method)": [[13, "arkouda.DataFrame._repr_html_"]], "_repr_html_() (arkouda.row method)": [[13, "arkouda.Row._repr_html_"]], "_scalar_callback() (arkouda.datetime method)": [[13, "arkouda.Datetime._scalar_callback"]], "_scalar_callback() (arkouda.timedelta method)": [[13, "arkouda.Timedelta._scalar_callback"]], "_scalar_callback() (arkouda._abstractbasetime method)": [[13, "arkouda._AbstractBaseTime._scalar_callback"]], "_set_index() (arkouda.dataframe method)": [[13, "arkouda.DataFrame._set_index"]], "_shape_str() (arkouda.dataframe method)": [[13, "arkouda.DataFrame._shape_str"]], "_unit2factor (in module arkouda)": [[13, "arkouda._unit2factor"]], "_unit2normunit (in module arkouda)": [[13, "arkouda._unit2normunit"]], "abs() (arkouda.timedelta method)": [[13, "arkouda.Timedelta.abs"]], "abs() (in module arkouda)": [[13, "arkouda.abs"], [59, "arkouda.abs"]], "add() (arkouda.series method)": [[13, "arkouda.Series.add"]], "aggregate() (arkouda.segarray method)": [[13, "arkouda.SegArray.aggregate"]], "akabs() (in module arkouda)": [[13, "arkouda.akabs"]], "akbool (in module arkouda)": [[13, "arkouda.akbool"], [13, "id548"]], "akcast() (in module arkouda)": [[13, "arkouda.akcast"], [13, "id0"]], "akfloat64 (in module arkouda)": [[13, "arkouda.akfloat64"], [13, "id668"]], "akint64 (in module arkouda)": [[13, "arkouda.akint64"], [13, "id549"], [13, "id669"]], "akuint64 (in module arkouda)": [[13, "arkouda.akuint64"]], "align() (in module arkouda)": [[13, "arkouda.align"]], "all() (arkouda.segarray method)": [[13, "arkouda.SegArray.all"]], "all() (arkouda.pdarray method)": [[13, "arkouda.pdarray.all"], [13, "id188"], [13, "id383"], [13, "id502"], [13, "id620"], [13, "id71"], [13, "id740"], [65, "arkouda.pdarray.all"]], "all() (in module arkouda)": [[13, "arkouda.all"], [59, "arkouda.all"]], "all_scalars (in module arkouda)": [[13, "arkouda.all_scalars"]], "any() (arkouda.segarray method)": [[13, "arkouda.SegArray.any"]], "any() (arkouda.pdarray method)": [[13, "arkouda.pdarray.any"], [13, "id187"], [13, "id382"], [13, "id501"], [13, "id619"], [13, "id70"], [13, "id739"], [65, "arkouda.pdarray.any"]], "any() (in module arkouda)": [[13, "arkouda.any"], [59, "arkouda.any"]], "append() (arkouda.dataframe method)": [[13, "arkouda.DataFrame.append"]], "append() (arkouda.segarray method)": [[13, "arkouda.SegArray.append"]], "append_single() (arkouda.segarray method)": [[13, "arkouda.SegArray.append_single"]], "apply_permutation() (arkouda.dataframe method)": [[13, "arkouda.DataFrame.apply_permutation"]], "arange() (in module arkouda)": [[13, "arkouda.arange"], [13, "id112"], [13, "id233"], [13, "id543"], [13, "id661"], [13, "id781"], [62, "arkouda.arange"]], "argmax() (arkouda.segarray method)": [[13, "arkouda.SegArray.argmax"]], "argmax() (arkouda.pdarray method)": [[13, "arkouda.pdarray.argmax"], [13, "id199"], [13, "id394"], [13, "id513"], [13, "id631"], [13, "id751"], [13, "id82"], [65, "arkouda.pdarray.argmax"]], "argmax() (in module arkouda)": [[13, "arkouda.argmax"], [59, "arkouda.argmax"]], "argmaxk() (arkouda.pdarray method)": [[13, "arkouda.pdarray.argmaxk"], [13, "id208"], [13, "id403"], [13, "id522"], [13, "id640"], [13, "id760"], [13, "id91"], [65, "arkouda.pdarray.argmaxk"]], "argmaxk() (in module arkouda)": [[13, "arkouda.argmaxk"], [59, "arkouda.argmaxk"]], "argmin() (arkouda.segarray method)": [[13, "arkouda.SegArray.argmin"]], "argmin() (arkouda.pdarray method)": [[13, "arkouda.pdarray.argmin"], [13, "id198"], [13, "id393"], [13, "id512"], [13, "id630"], [13, "id750"], [13, "id81"], [65, "arkouda.pdarray.argmin"]], "argmin() (in module arkouda)": [[13, "arkouda.argmin"], [59, "arkouda.argmin"]], "argmink() (arkouda.pdarray method)": [[13, "arkouda.pdarray.argmink"], [13, "id207"], [13, "id402"], [13, "id521"], [13, "id639"], [13, "id759"], [13, "id90"], [65, "arkouda.pdarray.argmink"]], "argmink() (in module arkouda)": [[13, "arkouda.argmink"], [59, "arkouda.argmink"]], "argsort() (arkouda.dataframe method)": [[13, "arkouda.DataFrame.argsort"]], "argsort() (arkouda.index method)": [[13, "arkouda.Index.argsort"]], "argsort() (arkouda.multiindex method)": [[13, "arkouda.MultiIndex.argsort"]], "argsort() (in module arkouda)": [[13, "arkouda.argsort"], [13, "id664"], [13, "id787"], [58, "arkouda.argsort"]], "arkouda": [[13, "module-arkouda"]], "array() (in module arkouda)": [[13, "arkouda.array"], [13, "id113"], [13, "id230"], [13, "id544"], [13, "id662"], [56, "arkouda.array"]], "astype() (arkouda.strings method)": [[13, "arkouda.Strings.astype"], [13, "id296"], [13, "id849"]], "astype() (arkouda.pdarray method)": [[13, "arkouda.pdarray.astype"], [13, "id215"], [13, "id410"], [13, "id529"], [13, "id647"], [13, "id767"], [13, "id98"]], "attach() (arkouda.dataframe static method)": [[13, "arkouda.DataFrame.attach"]], "attach() (arkouda.segarray class method)": [[13, "arkouda.SegArray.attach"]], "attach() (arkouda.series static method)": [[13, "arkouda.Series.attach"]], "attach() (arkouda.strings static method)": [[13, "arkouda.Strings.attach"], [13, "id306"], [13, "id859"]], "attach() (arkouda.pdarray static method)": [[13, "arkouda.pdarray.attach"], [13, "id110"], [13, "id227"], [13, "id422"], [13, "id541"], [13, "id659"], [13, "id779"]], "attach_pdarray() (in module arkouda)": [[13, "arkouda.attach_pdarray"]], "base (arkouda.arrayview attribute)": [[13, "arkouda.ArrayView.base"], [60, "arkouda.ArrayView.base"]], "bigint (in module arkouda)": [[13, "arkouda.bigint"], [13, "id667"]], "bigint_from_uint_arrays() (in module arkouda)": [[13, "arkouda.bigint_from_uint_arrays"]], "bigint_to_uint_arrays() (arkouda.pdarray method)": [[13, "arkouda.pdarray.bigint_to_uint_arrays"], [13, "id100"], [13, "id217"], [13, "id412"], [13, "id531"], [13, "id649"], [13, "id769"]], "bittype (in module arkouda)": [[13, "arkouda.bitType"], [13, "id116"]], "bool (in module arkouda)": [[13, "arkouda.bool"]], "bool_scalars (in module arkouda)": [[13, "arkouda.bool_scalars"]], "cached_regex_patterns() (arkouda.strings method)": [[13, "arkouda.Strings.cached_regex_patterns"], [13, "id266"], [13, "id819"]], "cast() (in module arkouda)": [[13, "arkouda.cast"], [13, "id312"], [67, "arkouda.cast"]], "ceil() (arkouda._abstractbasetime method)": [[13, "arkouda._AbstractBaseTime.ceil"]], "check_np_dtype() (in module arkouda)": [[13, "arkouda.check_np_dtype"]], "clear() (in module arkouda)": [[13, "arkouda.clear"]], "clz() (arkouda.pdarray method)": [[13, "arkouda.pdarray.clz"], [13, "id211"], [13, "id406"], [13, "id525"], [13, "id643"], [13, "id763"], [13, "id94"]], "clz() (in module arkouda)": [[13, "arkouda.clz"]], "coargsort() (arkouda.dataframe method)": [[13, "arkouda.DataFrame.coargsort"]], "coargsort() (in module arkouda)": [[13, "arkouda.coargsort"], [13, "id666"], [13, "id788"], [58, "arkouda.coargsort"]], "columns (arkouda.dataframe property)": [[13, "arkouda.DataFrame.columns"]], "components (arkouda.timedelta property)": [[13, "arkouda.Timedelta.components"]], "concat() (arkouda.dataframe class method)": [[13, "arkouda.DataFrame.concat"]], "concat() (arkouda.index method)": [[13, "arkouda.Index.concat"]], "concat() (arkouda.multiindex method)": [[13, "arkouda.MultiIndex.concat"]], "concat() (arkouda.segarray class method)": [[13, "arkouda.SegArray.concat"]], "concat() (arkouda.series static method)": [[13, "arkouda.Series.concat"]], "concatenate() (in module arkouda)": [[13, "arkouda.concatenate"], [13, "id229"], [13, "id547"], [13, "id785"], [62, "arkouda.concatenate"]], "conserves (arkouda.bitvector attribute)": [[13, "arkouda.BitVector.conserves"]], "contains() (arkouda.strings method)": [[13, "arkouda.Strings.contains"], [13, "id278"], [13, "id831"], [72, "arkouda.Strings.contains"]], "convert_if_categorical() (in module arkouda)": [[13, "arkouda.convert_if_categorical"]], "copy() (arkouda.dataframe method)": [[13, "arkouda.DataFrame.copy"]], "copy() (arkouda.segarray method)": [[13, "arkouda.SegArray.copy"]], "corr() (arkouda.dataframe method)": [[13, "arkouda.DataFrame.corr"]], "corr() (arkouda.pdarray method)": [[13, "arkouda.pdarray.corr"], [13, "id204"], [13, "id399"], [13, "id518"], [13, "id636"], [13, "id756"], [13, "id87"]], "corr() (in module arkouda)": [[13, "arkouda.corr"]], "cos() (in module arkouda)": [[13, "arkouda.cos"], [59, "arkouda.cos"]], "cov() (arkouda.pdarray method)": [[13, "arkouda.pdarray.cov"], [13, "id203"], [13, "id398"], [13, "id517"], [13, "id635"], [13, "id755"], [13, "id86"]], "cov() (in module arkouda)": [[13, "arkouda.cov"]], "create_pdarray() (in module arkouda)": [[13, "arkouda.create_pdarray"], [13, "id313"], [13, "id431"]], "ctz() (arkouda.pdarray method)": [[13, "arkouda.pdarray.ctz"], [13, "id212"], [13, "id407"], [13, "id526"], [13, "id644"], [13, "id764"], [13, "id95"]], "ctz() (in module arkouda)": [[13, "arkouda.ctz"]], "cumprod() (in module arkouda)": [[13, "arkouda.cumprod"], [13, "id234"], [59, "arkouda.cumprod"]], "cumsum() (in module arkouda)": [[13, "arkouda.cumsum"], [13, "id429"], [59, "arkouda.cumsum"]], "date (arkouda.datetime property)": [[13, "arkouda.Datetime.date"]], "date_range() (in module arkouda)": [[13, "arkouda.date_range"]], "day (arkouda.datetime property)": [[13, "arkouda.Datetime.day"]], "day_of_week (arkouda.datetime property)": [[13, "arkouda.Datetime.day_of_week"]], "day_of_year (arkouda.datetime property)": [[13, "arkouda.Datetime.day_of_year"]], "dayofweek (arkouda.datetime property)": [[13, "arkouda.Datetime.dayofweek"]], "dayofyear (arkouda.datetime property)": [[13, "arkouda.Datetime.dayofyear"]], "days (arkouda.timedelta property)": [[13, "arkouda.Timedelta.days"]], "decode() (arkouda.strings method)": [[13, "arkouda.Strings.decode"], [13, "id258"], [13, "id811"]], "diff() (arkouda.series method)": [[13, "arkouda.Series.diff"]], "disableverbose() (in module arkouda)": [[13, "arkouda.disableVerbose"]], "drop() (arkouda.dataframe method)": [[13, "arkouda.DataFrame.drop"]], "drop_duplicates() (arkouda.dataframe method)": [[13, "arkouda.DataFrame.drop_duplicates"]], "dt (arkouda.series attribute)": [[13, "arkouda.Series.dt"]], "dtype (arkouda.arrayview attribute)": [[13, "arkouda.ArrayView.dtype"], [60, "arkouda.ArrayView.dtype"]], "dtype (arkouda.strings attribute)": [[13, "arkouda.Strings.dtype"], [13, "id242"], [13, "id795"]], "dtype (arkouda.pdarray attribute)": [[13, "arkouda.pdarray.dtype"], [13, "id121"], [13, "id316"], [13, "id4"], [13, "id435"], [13, "id553"], [13, "id673"], [67, "arkouda.pdarray.dtype"]], "dtype() (in module arkouda)": [[13, "arkouda.dtype"]], "dtypes (arkouda.dataframe property)": [[13, "arkouda.DataFrame.dtypes"]], "empty (arkouda.dataframe property)": [[13, "arkouda.DataFrame.empty"]], "enableverbose() (in module arkouda)": [[13, "arkouda.enableVerbose"]], "encode() (arkouda.strings method)": [[13, "arkouda.Strings.encode"], [13, "id257"], [13, "id810"]], "endswith() (arkouda.strings method)": [[13, "arkouda.Strings.endswith"], [13, "id280"], [13, "id833"], [72, "arkouda.Strings.endswith"]], "entry (arkouda.strings attribute)": [[13, "arkouda.Strings.entry"], [13, "id237"], [13, "id790"]], "exp() (in module arkouda)": [[13, "arkouda.exp"], [59, "arkouda.exp"]], "export() (in module arkouda)": [[13, "arkouda.export"], [56, "arkouda.export"]], "factory() (arkouda.index static method)": [[13, "arkouda.Index.factory"]], "file_type_to_int() (in module arkouda)": [[13, "arkouda.file_type_to_int"]], "fill() (arkouda.pdarray method)": [[13, "arkouda.pdarray.fill"], [13, "id186"], [13, "id381"], [13, "id500"], [13, "id618"], [13, "id69"], [13, "id738"]], "filter_by_range() (arkouda.dataframe method)": [[13, "arkouda.DataFrame.filter_by_range"]], "find() (in module arkouda)": [[13, "arkouda.find"]], "find_locations() (arkouda.strings method)": [[13, "arkouda.Strings.find_locations"], [13, "id270"], [13, "id823"], [72, "arkouda.Strings.find_locations"]], "findall() (arkouda.strings method)": [[13, "arkouda.Strings.findall"], [13, "id275"], [13, "id828"], [72, "arkouda.Strings.findall"]], "flatten() (arkouda.strings method)": [[13, "arkouda.Strings.flatten"], [13, "id281"], [13, "id834"], [72, "arkouda.Strings.flatten"]], "float64 (in module arkouda)": [[13, "arkouda.float64"]], "float_scalars (in module arkouda)": [[13, "arkouda.float_scalars"]], "floor() (arkouda._abstractbasetime method)": [[13, "arkouda._AbstractBaseTime.floor"]], "format() (arkouda.bitvector method)": [[13, "arkouda.BitVector.format"]], "format() (arkouda.fields method)": [[13, "arkouda.Fields.format"]], "format() (arkouda.ipv4 method)": [[13, "arkouda.IPv4.format"]], "format_other() (arkouda.pdarray method)": [[13, "arkouda.pdarray.format_other"], [13, "id135"], [13, "id18"], [13, "id330"], [13, "id449"], [13, "id567"], [13, "id687"]], "from_multi_array() (arkouda.segarray class method)": [[13, "arkouda.SegArray.from_multi_array"]], "from_pandas() (arkouda.dataframe class method)": [[13, "arkouda.DataFrame.from_pandas"]], "from_parts() (arkouda.segarray class method)": [[13, "arkouda.SegArray.from_parts"]], "from_parts() (arkouda.strings static method)": [[13, "arkouda.Strings.from_parts"], [13, "id247"], [13, "id800"]], "from_return_msg() (arkouda.dataframe static method)": [[13, "arkouda.DataFrame.from_return_msg"]], "from_return_msg() (arkouda.segarray class method)": [[13, "arkouda.SegArray.from_return_msg"]], "from_return_msg() (arkouda.series static method)": [[13, "arkouda.Series.from_return_msg"]], "from_return_msg() (arkouda.strings static method)": [[13, "arkouda.Strings.from_return_msg"], [13, "id246"], [13, "id799"]], "from_series() (in module arkouda)": [[13, "arkouda.from_series"], [13, "id424"]], "full() (in module arkouda)": [[13, "arkouda.full"], [13, "id782"]], "full_like() (in module arkouda)": [[13, "arkouda.full_like"]], "fullmatch() (arkouda.strings method)": [[13, "arkouda.Strings.fullmatch"], [13, "id273"], [13, "id826"], [72, "arkouda.Strings.fullmatch"]], "gen_ranges() (in module arkouda)": [[13, "arkouda.gen_ranges"]], "generic_concat() (in module arkouda)": [[13, "arkouda.generic_concat"]], "getarkoudalogger() (in module arkouda)": [[13, "arkouda.getArkoudaLogger"]], "get_byteorder() (in module arkouda)": [[13, "arkouda.get_byteorder"]], "get_callback() (in module arkouda)": [[13, "arkouda.get_callback"]], "get_datasets() (in module arkouda)": [[13, "arkouda.get_datasets"], [56, "arkouda.get_datasets"]], "get_filetype() (in module arkouda)": [[13, "arkouda.get_filetype"]], "get_jth() (arkouda.segarray method)": [[13, "arkouda.SegArray.get_jth"]], "get_length_n() (arkouda.segarray method)": [[13, "arkouda.SegArray.get_length_n"]], "get_lengths() (arkouda.strings method)": [[13, "arkouda.Strings.get_lengths"], [13, "id256"], [13, "id809"]], "get_ngrams() (arkouda.segarray method)": [[13, "arkouda.SegArray.get_ngrams"]], "get_null_indices() (in module arkouda)": [[13, "arkouda.get_null_indices"]], "get_prefixes() (arkouda.segarray method)": [[13, "arkouda.SegArray.get_prefixes"]], "get_prefixes() (arkouda.strings method)": [[13, "arkouda.Strings.get_prefixes"], [13, "id288"], [13, "id841"]], "get_server_byteorder() (in module arkouda)": [[13, "arkouda.get_server_byteorder"]], "get_suffixes() (arkouda.segarray method)": [[13, "arkouda.SegArray.get_suffixes"]], "get_suffixes() (arkouda.strings method)": [[13, "arkouda.Strings.get_suffixes"], [13, "id289"], [13, "id842"]], "get_versions() (in module arkouda)": [[13, "arkouda.get_versions"]], "group() (arkouda.strings method)": [[13, "arkouda.Strings.group"], [13, "id291"], [13, "id844"]], "hash() (arkouda.strings method)": [[13, "arkouda.Strings.hash"], [13, "id290"], [13, "id843"]], "hash() (in module arkouda)": [[13, "arkouda.hash"]], "head() (arkouda.dataframe method)": [[13, "arkouda.DataFrame.head"]], "head() (arkouda.series method)": [[13, "arkouda.Series.head"]], "histogram() (in module arkouda)": [[13, "arkouda.histogram"], [65, "arkouda.histogram"]], "hour (arkouda.datetime property)": [[13, "arkouda.Datetime.hour"]], "ignore (arkouda.errormode attribute)": [[13, "arkouda.ErrorMode.ignore"]], "import_data() (in module arkouda)": [[13, "arkouda.import_data"], [56, "arkouda.import_data"]], "in1d() (in module arkouda)": [[13, "arkouda.in1d"], [13, "id665"], [13, "id786"], [70, "arkouda.in1d"]], "in1d_intervals() (in module arkouda)": [[13, "arkouda.in1d_intervals"]], "index (arkouda.dataframe property)": [[13, "arkouda.DataFrame.index"]], "index (arkouda.index property)": [[13, "arkouda.Index.index"]], "index (arkouda.multiindex property)": [[13, "arkouda.MultiIndex.index"]], "info (arkouda.dataframe property)": [[13, "arkouda.DataFrame.info"]], "info() (arkouda.strings method)": [[13, "arkouda.Strings.info"], [13, "id302"], [13, "id855"]], "info() (arkouda.pdarray method)": [[13, "arkouda.pdarray.info"], [13, "id191"], [13, "id386"], [13, "id505"], [13, "id623"], [13, "id74"], [13, "id743"]], "information() (in module arkouda)": [[13, "arkouda.information"]], "int64 (in module arkouda)": [[13, "arkouda.int64"], [13, "id308"]], "inttypes (in module arkouda)": [[13, "arkouda.intTypes"], [13, "id115"], [13, "id310"]], "int_scalars (in module arkouda)": [[13, "arkouda.int_scalars"], [13, "id309"]], "intersect() (arkouda.segarray method)": [[13, "arkouda.SegArray.intersect"]], "intersect() (in module arkouda)": [[13, "arkouda.intersect"]], "intersect1d() (in module arkouda)": [[13, "arkouda.intersect1d"], [70, "arkouda.intersect1d"]], "interval_lookup() (in module arkouda)": [[13, "arkouda.interval_lookup"]], "intx() (in module arkouda)": [[13, "arkouda.intx"]], "invert_permutation() (in module arkouda)": [[13, "arkouda.invert_permutation"]], "ip_address() (in module arkouda)": [[13, "arkouda.ip_address"]], "issupportedint() (in module arkouda)": [[13, "arkouda.isSupportedInt"], [13, "id311"], [13, "id425"]], "is_cosorted() (in module arkouda)": [[13, "arkouda.is_cosorted"]], "is_ipv4() (in module arkouda)": [[13, "arkouda.is_ipv4"]], "is_ipv6() (in module arkouda)": [[13, "arkouda.is_ipv6"]], "is_leap_year (arkouda.datetime property)": [[13, "arkouda.Datetime.is_leap_year"]], "is_lower() (arkouda.strings method)": [[13, "arkouda.Strings.is_lower"], [13, "id262"], [13, "id815"]], "is_registered() (arkouda.dataframe method)": [[13, "arkouda.DataFrame.is_registered"]], "is_registered() (arkouda.index method)": [[13, "arkouda.Index.is_registered"]], "is_registered() (arkouda.segarray method)": [[13, "arkouda.SegArray.is_registered"]], "is_registered() (arkouda.series method)": [[13, "arkouda.Series.is_registered"]], "is_registered() (arkouda.strings method)": [[13, "arkouda.Strings.is_registered"], [13, "id300"], [13, "id853"]], "is_registered() (arkouda.pdarray method)": [[13, "arkouda.pdarray.is_registered"], [13, "id189"], [13, "id384"], [13, "id503"], [13, "id621"], [13, "id72"], [13, "id741"]], "is_sorted() (arkouda.pdarray method)": [[13, "arkouda.pdarray.is_sorted"], [13, "id193"], [13, "id388"], [13, "id507"], [13, "id625"], [13, "id745"], [13, "id76"], [65, "arkouda.pdarray.is_sorted"]], "is_sorted() (in module arkouda)": [[13, "arkouda.is_sorted"], [13, "id432"], [59, "arkouda.is_sorted"]], "is_title() (arkouda.strings method)": [[13, "arkouda.Strings.is_title"], [13, "id264"], [13, "id817"]], "is_unique (arkouda.index property)": [[13, "arkouda.Index.is_unique"]], "is_upper() (arkouda.strings method)": [[13, "arkouda.Strings.is_upper"], [13, "id263"], [13, "id816"]], "isin() (arkouda.dataframe method)": [[13, "arkouda.DataFrame.isin"]], "isin() (arkouda.series method)": [[13, "arkouda.Series.isin"]], "isnan() (in module arkouda)": [[13, "arkouda.isnan"]], "isocalendar() (arkouda.datetime method)": [[13, "arkouda.Datetime.isocalendar"]], "itemsize (arkouda.arrayview attribute)": [[13, "arkouda.ArrayView.itemsize"], [60, "arkouda.ArrayView.itemsize"]], "itemsize (arkouda.pdarray attribute)": [[13, "arkouda.pdarray.itemsize"], [13, "id125"], [13, "id320"], [13, "id439"], [13, "id557"], [13, "id677"], [13, "id8"], [67, "arkouda.pdarray.itemsize"]], "join_on_eq_with_dt() (in module arkouda)": [[13, "arkouda.join_on_eq_with_dt"]], "left_align() (in module arkouda)": [[13, "arkouda.left_align"]], "lengths (arkouda.segarray property)": [[13, "arkouda.SegArray.lengths"]], "linspace() (in module arkouda)": [[13, "arkouda.linspace"], [62, "arkouda.linspace"]], "list_registry() (in module arkouda)": [[13, "arkouda.list_registry"], [13, "id428"], [13, "id550"]], "list_symbol_table() (in module arkouda)": [[13, "arkouda.list_symbol_table"]], "load() (arkouda.dataframe class method)": [[13, "arkouda.DataFrame.load"]], "load() (arkouda.segarray class method)": [[13, "arkouda.SegArray.load"]], "load() (in module arkouda)": [[13, "arkouda.load"], [13, "id861"]], "load_all() (in module arkouda)": [[13, "arkouda.load_all"]], "locate() (arkouda.series method)": [[13, "arkouda.Series.locate"]], "log() (in module arkouda)": [[13, "arkouda.log"], [59, "arkouda.log"]], "logger (arkouda.strings attribute)": [[13, "arkouda.Strings.logger"], [13, "id243"], [13, "id796"]], "lookup() (arkouda.index method)": [[13, "arkouda.Index.lookup"]], "lookup() (arkouda.multiindex method)": [[13, "arkouda.MultiIndex.lookup"]], "lookup() (in module arkouda)": [[13, "arkouda.lookup"]], "ls() (in module arkouda)": [[13, "arkouda.ls"]], "lstick() (arkouda.strings method)": [[13, "arkouda.Strings.lstick"], [13, "id286"], [13, "id839"], [72, "arkouda.Strings.lstick"]], "match() (arkouda.strings method)": [[13, "arkouda.Strings.match"], [13, "id272"], [13, "id825"], [72, "arkouda.Strings.match"]], "max() (arkouda.segarray method)": [[13, "arkouda.SegArray.max"]], "max() (arkouda._abstractbasetime method)": [[13, "arkouda._AbstractBaseTime.max"]], "max() (arkouda.pdarray method)": [[13, "arkouda.pdarray.max"], [13, "id197"], [13, "id392"], [13, "id511"], [13, "id629"], [13, "id749"], [13, "id80"], [65, "arkouda.pdarray.max"]], "max() (in module arkouda)": [[13, "arkouda.max"], [59, "arkouda.max"]], "maxk() (arkouda._abstractbasetime method)": [[13, "arkouda._AbstractBaseTime.maxk"]], "maxk() (arkouda.pdarray method)": [[13, "arkouda.pdarray.maxk"], [13, "id206"], [13, "id401"], [13, "id520"], [13, "id638"], [13, "id758"], [13, "id89"], [65, "arkouda.pdarray.maxk"]], "maxk() (in module arkouda)": [[13, "arkouda.maxk"], [59, "arkouda.maxk"]], "mean() (arkouda.segarray method)": [[13, "arkouda.SegArray.mean"]], "mean() (arkouda.pdarray method)": [[13, "arkouda.pdarray.mean"], [13, "id200"], [13, "id395"], [13, "id514"], [13, "id632"], [13, "id752"], [13, "id83"], [65, "arkouda.pdarray.mean"]], "mean() (in module arkouda)": [[13, "arkouda.mean"], [59, "arkouda.mean"]], "memory_usage() (arkouda.dataframe method)": [[13, "arkouda.DataFrame.memory_usage"]], "microsecond (arkouda.datetime property)": [[13, "arkouda.Datetime.microsecond"]], "microseconds (arkouda.timedelta property)": [[13, "arkouda.Timedelta.microseconds"]], "millisecond (arkouda.datetime property)": [[13, "arkouda.Datetime.millisecond"]], "min() (arkouda.segarray method)": [[13, "arkouda.SegArray.min"]], "min() (arkouda._abstractbasetime method)": [[13, "arkouda._AbstractBaseTime.min"]], "min() (arkouda.pdarray method)": [[13, "arkouda.pdarray.min"], [13, "id196"], [13, "id391"], [13, "id510"], [13, "id628"], [13, "id748"], [13, "id79"], [65, "arkouda.pdarray.min"]], "min() (in module arkouda)": [[13, "arkouda.min"], [59, "arkouda.min"]], "mink() (arkouda._abstractbasetime method)": [[13, "arkouda._AbstractBaseTime.mink"]], "mink() (arkouda.pdarray method)": [[13, "arkouda.pdarray.mink"], [13, "id205"], [13, "id400"], [13, "id519"], [13, "id637"], [13, "id757"], [13, "id88"], [65, "arkouda.pdarray.mink"]], "mink() (in module arkouda)": [[13, "arkouda.mink"], [59, "arkouda.mink"]], "minute (arkouda.datetime property)": [[13, "arkouda.Datetime.minute"]], "mode_str_to_int() (in module arkouda)": [[13, "arkouda.mode_str_to_int"]], "month (arkouda.datetime property)": [[13, "arkouda.Datetime.month"]], "name (arkouda.pdarray attribute)": [[13, "arkouda.pdarray.name"], [13, "id120"], [13, "id3"], [13, "id315"], [13, "id434"], [13, "id552"], [13, "id672"], [67, "arkouda.pdarray.name"]], "nanosecond (arkouda.datetime property)": [[13, "arkouda.Datetime.nanosecond"]], "nanoseconds (arkouda.timedelta property)": [[13, "arkouda.Timedelta.nanoseconds"]], "nbytes (arkouda.strings attribute)": [[13, "arkouda.Strings.nbytes"], [13, "id239"], [13, "id792"]], "ndim (arkouda.arrayview attribute)": [[13, "arkouda.ArrayView.ndim"], [60, "arkouda.ArrayView.ndim"]], "ndim (arkouda.strings attribute)": [[13, "arkouda.Strings.ndim"], [13, "id240"], [13, "id793"]], "ndim (arkouda.pdarray attribute)": [[13, "arkouda.pdarray.ndim"], [13, "id123"], [13, "id318"], [13, "id437"], [13, "id555"], [13, "id6"], [13, "id675"], [67, "arkouda.pdarray.ndim"]], "non_empty (arkouda.segarray property)": [[13, "arkouda.SegArray.non_empty"]], "non_empty_count (arkouda.segarray property)": [[13, "arkouda.SegArray.non_empty_count"]], "normalize() (arkouda.ipv4 method)": [[13, "arkouda.IPv4.normalize"]], "numeric_scalars (in module arkouda)": [[13, "arkouda.numeric_scalars"]], "numpy_scalars (in module arkouda)": [[13, "arkouda.numpy_scalars"]], "nunique() (arkouda.segarray method)": [[13, "arkouda.SegArray.nunique"]], "objtype (arkouda.segarray property)": [[13, "arkouda.SegArray.objtype"]], "objtype (arkouda.strings attribute)": [[13, "arkouda.Strings.objtype"], [13, "id245"], [13, "id798"]], "objtype (arkouda.pdarray attribute)": [[13, "arkouda.pdarray.objtype"], [13, "id11"], [13, "id128"], [13, "id323"], [13, "id442"], [13, "id560"], [13, "id680"]], "objtypedec() (in module arkouda)": [[13, "arkouda.objtypedec"]], "ones() (in module arkouda)": [[13, "arkouda.ones"], [13, "id232"], [13, "id545"], [13, "id663"], [13, "id783"], [62, "arkouda.ones"]], "ones_like() (in module arkouda)": [[13, "arkouda.ones_like"], [62, "arkouda.ones_like"]], "opeq() (arkouda.bitvector method)": [[13, "arkouda.BitVector.opeq"]], "opeq() (arkouda.fields method)": [[13, "arkouda.Fields.opeq"]], "opeq() (arkouda.ipv4 method)": [[13, "arkouda.IPv4.opeq"]], "opeq() (arkouda._abstractbasetime method)": [[13, "arkouda._AbstractBaseTime.opeq"]], "opeq() (arkouda.pdarray method)": [[13, "arkouda.pdarray.opeq"], [13, "id170"], [13, "id365"], [13, "id484"], [13, "id53"], [13, "id602"], [13, "id722"]], "order (arkouda.arrayview attribute)": [[13, "arkouda.ArrayView.order"], [60, "arkouda.ArrayView.order"]], "parity() (arkouda.pdarray method)": [[13, "arkouda.pdarray.parity"], [13, "id210"], [13, "id405"], [13, "id524"], [13, "id642"], [13, "id762"], [13, "id93"]], "parity() (in module arkouda)": [[13, "arkouda.parity"]], "parse_single_value() (in module arkouda)": [[13, "arkouda.parse_single_value"]], "pdarray (class in arkouda)": [[13, "arkouda.pdarray"], [13, "id119"], [13, "id2"], [13, "id314"], [13, "id433"], [13, "id551"], [13, "id671"], [67, "arkouda.pdarray"]], "pdconcat() (arkouda.series static method)": [[13, "arkouda.Series.pdconcat"]], "peel() (arkouda.strings method)": [[13, "arkouda.Strings.peel"], [13, "id282"], [13, "id835"], [72, "arkouda.Strings.peel"]], "plot_dist() (in module arkouda)": [[13, "arkouda.plot_dist"]], "popcount() (arkouda.pdarray method)": [[13, "arkouda.pdarray.popcount"], [13, "id209"], [13, "id404"], [13, "id523"], [13, "id641"], [13, "id761"], [13, "id92"]], "popcount() (in module arkouda)": [[13, "arkouda.popcount"]], "power() (in module arkouda)": [[13, "arkouda.power"]], "prepend_single() (arkouda.segarray method)": [[13, "arkouda.SegArray.prepend_single"]], "pretty_print_info() (arkouda.strings method)": [[13, "arkouda.Strings.pretty_print_info"], [13, "id303"], [13, "id856"]], "pretty_print_info() (arkouda.pdarray method)": [[13, "arkouda.pdarray.pretty_print_info"], [13, "id192"], [13, "id387"], [13, "id506"], [13, "id624"], [13, "id744"], [13, "id75"]], "pretty_print_information() (in module arkouda)": [[13, "arkouda.pretty_print_information"]], "prod() (arkouda.segarray method)": [[13, "arkouda.SegArray.prod"]], "prod() (arkouda.pdarray method)": [[13, "arkouda.pdarray.prod"], [13, "id195"], [13, "id390"], [13, "id509"], [13, "id627"], [13, "id747"], [13, "id78"], [65, "arkouda.pdarray.prod"]], "prod() (in module arkouda)": [[13, "arkouda.prod"], [59, "arkouda.prod"]], "purge_cached_regex_patterns() (arkouda.strings method)": [[13, "arkouda.Strings.purge_cached_regex_patterns"], [13, "id267"], [13, "id820"]], "randint() (in module arkouda)": [[13, "arkouda.randint"], [62, "arkouda.randint"]], "random_strings_lognormal() (in module arkouda)": [[13, "arkouda.random_strings_lognormal"]], "random_strings_uniform() (in module arkouda)": [[13, "arkouda.random_strings_uniform"]], "read() (in module arkouda)": [[13, "arkouda.read"], [56, "arkouda.read"]], "read_hdf() (in module arkouda)": [[13, "arkouda.read_hdf"]], "read_parquet() (in module arkouda)": [[13, "arkouda.read_parquet"]], "register() (arkouda.dataframe method)": [[13, "arkouda.DataFrame.register"]], "register() (arkouda.index method)": [[13, "arkouda.Index.register"]], "register() (arkouda.multiindex method)": [[13, "arkouda.MultiIndex.register"]], "register() (arkouda.segarray method)": [[13, "arkouda.SegArray.register"]], "register() (arkouda.series method)": [[13, "arkouda.Series.register"]], "register() (arkouda.strings method)": [[13, "arkouda.Strings.register"], [13, "id304"], [13, "id857"]], "register() (arkouda.pdarray method)": [[13, "arkouda.pdarray.register"], [13, "id108"], [13, "id225"], [13, "id420"], [13, "id539"], [13, "id657"], [13, "id777"]], "register() (in module arkouda)": [[13, "arkouda.register"]], "remove_repeats() (arkouda.segarray method)": [[13, "arkouda.SegArray.remove_repeats"]], "rename() (arkouda.dataframe method)": [[13, "arkouda.DataFrame.rename"]], "reset_index() (arkouda.dataframe method)": [[13, "arkouda.DataFrame.reset_index"]], "reshape() (arkouda.pdarray method)": [[13, "arkouda.pdarray.reshape"], [13, "id101"], [13, "id218"], [13, "id413"], [13, "id532"], [13, "id650"], [13, "id770"]], "resolve_scalar_dtype() (in module arkouda)": [[13, "arkouda.resolve_scalar_dtype"], [13, "id118"]], "return_validity (arkouda.errormode attribute)": [[13, "arkouda.ErrorMode.return_validity"]], "right_align() (in module arkouda)": [[13, "arkouda.right_align"]], "rotl() (arkouda.pdarray method)": [[13, "arkouda.pdarray.rotl"], [13, "id213"], [13, "id408"], [13, "id527"], [13, "id645"], [13, "id765"], [13, "id96"]], "rotl() (in module arkouda)": [[13, "arkouda.rotl"]], "rotr() (arkouda.pdarray method)": [[13, "arkouda.pdarray.rotr"], [13, "id214"], [13, "id409"], [13, "id528"], [13, "id646"], [13, "id766"], [13, "id97"]], "rotr() (in module arkouda)": [[13, "arkouda.rotr"]], "round() (arkouda._abstractbasetime method)": [[13, "arkouda._AbstractBaseTime.round"]], "rpeel() (arkouda.strings method)": [[13, "arkouda.Strings.rpeel"], [13, "id283"], [13, "id836"], [72, "arkouda.Strings.rpeel"]], "sample() (arkouda.dataframe method)": [[13, "arkouda.DataFrame.sample"]], "save() (arkouda.dataframe method)": [[13, "arkouda.DataFrame.save"]], "save() (arkouda.index method)": [[13, "arkouda.Index.save"]], "save() (arkouda.segarray method)": [[13, "arkouda.SegArray.save"]], "save() (arkouda.strings method)": [[13, "arkouda.Strings.save"], [13, "id299"], [13, "id852"]], "save() (arkouda.pdarray method)": [[13, "arkouda.pdarray.save"], [13, "id107"], [13, "id224"], [13, "id419"], [13, "id538"], [13, "id656"], [13, "id776"]], "save_all() (in module arkouda)": [[13, "arkouda.save_all"]], "search() (arkouda.strings method)": [[13, "arkouda.Strings.search"], [13, "id271"], [13, "id824"], [72, "arkouda.Strings.search"]], "search_intervals() (in module arkouda)": [[13, "arkouda.search_intervals"]], "second (arkouda.datetime property)": [[13, "arkouda.Datetime.second"]], "seconds (arkouda.timedelta property)": [[13, "arkouda.Timedelta.seconds"]], "segarray() (in module arkouda)": [[13, "arkouda.segarray"]], "set_dtype() (arkouda.index method)": [[13, "arkouda.Index.set_dtype"]], "set_dtype() (arkouda.multiindex method)": [[13, "arkouda.MultiIndex.set_dtype"]], "set_jth() (arkouda.segarray method)": [[13, "arkouda.SegArray.set_jth"]], "setdiff() (arkouda.segarray method)": [[13, "arkouda.SegArray.setdiff"]], "setdiff1d() (in module arkouda)": [[13, "arkouda.setdiff1d"], [70, "arkouda.setdiff1d"]], "setxor() (arkouda.segarray method)": [[13, "arkouda.SegArray.setxor"]], "setxor1d() (in module arkouda)": [[13, "arkouda.setxor1d"], [70, "arkouda.setxor1d"]], "shape (arkouda.arrayview attribute)": [[13, "arkouda.ArrayView.shape"], [60, "arkouda.ArrayView.shape"]], "shape (arkouda.dataframe property)": [[13, "arkouda.DataFrame.shape"]], "shape (arkouda.index property)": [[13, "arkouda.Index.shape"]], "shape (arkouda.series property)": [[13, "arkouda.Series.shape"]], "shape (arkouda.strings attribute)": [[13, "arkouda.Strings.shape"], [13, "id241"], [13, "id794"]], "shape (arkouda.pdarray attribute)": [[13, "arkouda.pdarray.shape"], [13, "id124"], [13, "id319"], [13, "id438"], [13, "id556"], [13, "id676"], [13, "id7"], [67, "arkouda.pdarray.shape"]], "sin() (in module arkouda)": [[13, "arkouda.sin"], [59, "arkouda.sin"]], "size (arkouda.arrayview attribute)": [[13, "arkouda.ArrayView.size"], [60, "arkouda.ArrayView.size"]], "size (arkouda.dataframe property)": [[13, "arkouda.DataFrame.size"]], "size (arkouda.strings attribute)": [[13, "arkouda.Strings.size"], [13, "id238"], [13, "id791"]], "size (arkouda.pdarray attribute)": [[13, "arkouda.pdarray.size"], [13, "id122"], [13, "id317"], [13, "id436"], [13, "id5"], [13, "id554"], [13, "id674"], [67, "arkouda.pdarray.size"]], "slice_bits() (arkouda.pdarray method)": [[13, "arkouda.pdarray.slice_bits"], [13, "id216"], [13, "id411"], [13, "id530"], [13, "id648"], [13, "id768"], [13, "id99"]], "sort() (in module arkouda)": [[13, "arkouda.sort"]], "sort_index() (arkouda.series method)": [[13, "arkouda.Series.sort_index"]], "sort_values() (arkouda.dataframe method)": [[13, "arkouda.DataFrame.sort_values"]], "sort_values() (arkouda.series method)": [[13, "arkouda.Series.sort_values"]], "sorted() (in module arkouda)": [[13, "arkouda.sorted"]], "split() (arkouda.strings method)": [[13, "arkouda.Strings.split"], [13, "id274"], [13, "id827"], [72, "arkouda.Strings.split"]], "sqrt() (in module arkouda)": [[13, "arkouda.sqrt"]], "standard_normal() (in module arkouda)": [[13, "arkouda.standard_normal"]], "startswith() (arkouda.strings method)": [[13, "arkouda.Strings.startswith"], [13, "id279"], [13, "id832"], [72, "arkouda.Strings.startswith"]], "std() (arkouda.timedelta method)": [[13, "arkouda.Timedelta.std"]], "std() (arkouda.pdarray method)": [[13, "arkouda.pdarray.std"], [13, "id202"], [13, "id397"], [13, "id516"], [13, "id634"], [13, "id754"], [13, "id85"], [65, "arkouda.pdarray.std"]], "std() (in module arkouda)": [[13, "arkouda.std"], [59, "arkouda.std"]], "stick() (arkouda.strings method)": [[13, "arkouda.Strings.stick"], [13, "id284"], [13, "id837"], [72, "arkouda.Strings.stick"]], "str_ (in module arkouda)": [[13, "arkouda.str_"], [13, "id426"]], "str_acc (arkouda.series attribute)": [[13, "arkouda.Series.str_acc"]], "str_scalars (in module arkouda)": [[13, "arkouda.str_scalars"]], "strict (arkouda.errormode attribute)": [[13, "arkouda.ErrorMode.strict"]], "strip() (arkouda.strings method)": [[13, "arkouda.Strings.strip"], [13, "id265"], [13, "id818"]], "sub() (arkouda.strings method)": [[13, "arkouda.Strings.sub"], [13, "id276"], [13, "id829"], [72, "arkouda.Strings.sub"]], "subn() (arkouda.strings method)": [[13, "arkouda.Strings.subn"], [13, "id277"], [13, "id830"], [72, "arkouda.Strings.subn"]], "sum() (arkouda.datetime method)": [[13, "arkouda.Datetime.sum"]], "sum() (arkouda.segarray method)": [[13, "arkouda.SegArray.sum"]], "sum() (arkouda.timedelta method)": [[13, "arkouda.Timedelta.sum"]], "sum() (arkouda.pdarray method)": [[13, "arkouda.pdarray.sum"], [13, "id194"], [13, "id389"], [13, "id508"], [13, "id626"], [13, "id746"], [13, "id77"], [65, "arkouda.pdarray.sum"]], "sum() (in module arkouda)": [[13, "arkouda.sum"], [59, "arkouda.sum"]], "supported_opeq (arkouda.datetime attribute)": [[13, "arkouda.Datetime.supported_opeq"]], "supported_opeq (arkouda.timedelta attribute)": [[13, "arkouda.Timedelta.supported_opeq"]], "supported_with_datetime (arkouda.datetime attribute)": [[13, "arkouda.Datetime.supported_with_datetime"]], "supported_with_datetime (arkouda.timedelta attribute)": [[13, "arkouda.Timedelta.supported_with_datetime"]], "supported_with_pdarray (arkouda.datetime attribute)": [[13, "arkouda.Datetime.supported_with_pdarray"]], "supported_with_pdarray (arkouda.timedelta attribute)": [[13, "arkouda.Timedelta.supported_with_pdarray"]], "supported_with_r_datetime (arkouda.datetime attribute)": [[13, "arkouda.Datetime.supported_with_r_datetime"]], "supported_with_r_datetime (arkouda.timedelta attribute)": [[13, "arkouda.Timedelta.supported_with_r_datetime"]], "supported_with_r_pdarray (arkouda.datetime attribute)": [[13, "arkouda.Datetime.supported_with_r_pdarray"]], "supported_with_r_pdarray (arkouda.timedelta attribute)": [[13, "arkouda.Timedelta.supported_with_r_pdarray"]], "supported_with_r_timedelta (arkouda.datetime attribute)": [[13, "arkouda.Datetime.supported_with_r_timedelta"]], "supported_with_r_timedelta (arkouda.timedelta attribute)": [[13, "arkouda.Timedelta.supported_with_r_timedelta"]], "supported_with_timedelta (arkouda.datetime attribute)": [[13, "arkouda.Datetime.supported_with_timedelta"]], "supported_with_timedelta (arkouda.timedelta attribute)": [[13, "arkouda.Timedelta.supported_with_timedelta"]], "tail() (arkouda.dataframe method)": [[13, "arkouda.DataFrame.tail"]], "tail() (arkouda.series method)": [[13, "arkouda.Series.tail"]], "timedelta_range() (in module arkouda)": [[13, "arkouda.timedelta_range"]], "to_cuda() (arkouda.pdarray method)": [[13, "arkouda.pdarray.to_cuda"], [13, "id104"], [13, "id221"], [13, "id416"], [13, "id535"], [13, "id653"], [13, "id773"]], "to_dataframe() (arkouda.series method)": [[13, "arkouda.Series.to_dataframe"]], "to_dict() (arkouda.index method)": [[13, "arkouda.Index.to_dict"]], "to_dict() (arkouda.multiindex method)": [[13, "arkouda.MultiIndex.to_dict"]], "to_hdf() (arkouda.arrayview method)": [[13, "arkouda.ArrayView.to_hdf"]], "to_hdf() (arkouda.dataframe method)": [[13, "arkouda.DataFrame.to_hdf"]], "to_hdf() (arkouda.index method)": [[13, "arkouda.Index.to_hdf"]], "to_hdf() (arkouda.segarray method)": [[13, "arkouda.SegArray.to_hdf"]], "to_hdf() (arkouda.strings method)": [[13, "arkouda.Strings.to_hdf"], [13, "id298"], [13, "id851"]], "to_hdf() (arkouda.pdarray method)": [[13, "arkouda.pdarray.to_hdf"], [13, "id106"], [13, "id223"], [13, "id418"], [13, "id537"], [13, "id655"], [13, "id775"]], "to_hdf() (in module arkouda)": [[13, "arkouda.to_hdf"]], "to_list() (arkouda.arrayview method)": [[13, "arkouda.ArrayView.to_list"]], "to_list() (arkouda.bitvector method)": [[13, "arkouda.BitVector.to_list"]], "to_list() (arkouda.ipv4 method)": [[13, "arkouda.IPv4.to_list"]], "to_list() (arkouda.index method)": [[13, "arkouda.Index.to_list"]], "to_list() (arkouda.segarray method)": [[13, "arkouda.SegArray.to_list"]], "to_list() (arkouda.strings method)": [[13, "arkouda.Strings.to_list"], [13, "id294"], [13, "id847"]], "to_list() (arkouda._abstractbasetime method)": [[13, "arkouda._AbstractBaseTime.to_list"]], "to_list() (arkouda.pdarray method)": [[13, "arkouda.pdarray.to_list"], [13, "id103"], [13, "id220"], [13, "id415"], [13, "id534"], [13, "id652"], [13, "id772"]], "to_lower() (arkouda.strings method)": [[13, "arkouda.Strings.to_lower"], [13, "id259"], [13, "id812"]], "to_ndarray() (arkouda.arrayview method)": [[13, "arkouda.ArrayView.to_ndarray"]], "to_ndarray() (arkouda.bitvector method)": [[13, "arkouda.BitVector.to_ndarray"]], "to_ndarray() (arkouda.ipv4 method)": [[13, "arkouda.IPv4.to_ndarray"]], "to_ndarray() (arkouda.index method)": [[13, "arkouda.Index.to_ndarray"]], "to_ndarray() (arkouda.segarray method)": [[13, "arkouda.SegArray.to_ndarray"]], "to_ndarray() (arkouda.strings method)": [[13, "arkouda.Strings.to_ndarray"], [13, "id293"], [13, "id846"]], "to_ndarray() (arkouda._abstractbasetime method)": [[13, "arkouda._AbstractBaseTime.to_ndarray"]], "to_ndarray() (arkouda.pdarray method)": [[13, "arkouda.pdarray.to_ndarray"], [13, "id102"], [13, "id219"], [13, "id414"], [13, "id533"], [13, "id651"], [13, "id771"]], "to_pandas() (arkouda.dataframe method)": [[13, "arkouda.DataFrame.to_pandas"]], "to_pandas() (arkouda.datetime method)": [[13, "arkouda.Datetime.to_pandas"]], "to_pandas() (arkouda.index method)": [[13, "arkouda.Index.to_pandas"]], "to_pandas() (arkouda.multiindex method)": [[13, "arkouda.MultiIndex.to_pandas"]], "to_pandas() (arkouda.series method)": [[13, "arkouda.Series.to_pandas"]], "to_pandas() (arkouda.timedelta method)": [[13, "arkouda.Timedelta.to_pandas"]], "to_parquet() (arkouda.dataframe method)": [[13, "arkouda.DataFrame.to_parquet"]], "to_parquet() (arkouda.index method)": [[13, "arkouda.Index.to_parquet"]], "to_parquet() (arkouda.strings method)": [[13, "arkouda.Strings.to_parquet"], [13, "id297"], [13, "id850"]], "to_parquet() (arkouda.pdarray method)": [[13, "arkouda.pdarray.to_parquet"], [13, "id105"], [13, "id222"], [13, "id417"], [13, "id536"], [13, "id654"], [13, "id774"]], "to_parquet() (in module arkouda)": [[13, "arkouda.to_parquet"]], "to_title() (arkouda.strings method)": [[13, "arkouda.Strings.to_title"], [13, "id261"], [13, "id814"]], "to_upper() (arkouda.strings method)": [[13, "arkouda.Strings.to_upper"], [13, "id260"], [13, "id813"]], "topn() (arkouda.series method)": [[13, "arkouda.Series.topn"]], "total_seconds() (arkouda.timedelta method)": [[13, "arkouda.Timedelta.total_seconds"]], "translate_np_dtype() (in module arkouda)": [[13, "arkouda.translate_np_dtype"], [13, "id117"], [13, "id427"]], "uint64 (in module arkouda)": [[13, "arkouda.uint64"]], "uint8 (in module arkouda)": [[13, "arkouda.uint8"]], "uniform() (in module arkouda)": [[13, "arkouda.uniform"]], "union() (arkouda.segarray method)": [[13, "arkouda.SegArray.union"]], "union1d() (in module arkouda)": [[13, "arkouda.union1d"], [70, "arkouda.union1d"]], "unique() (arkouda.segarray method)": [[13, "arkouda.SegArray.unique"]], "unregister() (arkouda.dataframe method)": [[13, "arkouda.DataFrame.unregister"]], "unregister() (arkouda.segarray method)": [[13, "arkouda.SegArray.unregister"]], "unregister() (arkouda.strings method)": [[13, "arkouda.Strings.unregister"], [13, "id305"], [13, "id858"]], "unregister() (arkouda.pdarray method)": [[13, "arkouda.pdarray.unregister"], [13, "id109"], [13, "id226"], [13, "id421"], [13, "id540"], [13, "id658"], [13, "id778"]], "unregister_dataframe_by_name() (arkouda.dataframe static method)": [[13, "arkouda.DataFrame.unregister_dataframe_by_name"]], "unregister_pdarray_by_name() (in module arkouda)": [[13, "arkouda.unregister_pdarray_by_name"]], "unregister_segarray_by_name() (arkouda.segarray static method)": [[13, "arkouda.SegArray.unregister_segarray_by_name"]], "unregister_strings_by_name() (arkouda.strings static method)": [[13, "arkouda.Strings.unregister_strings_by_name"], [13, "id307"], [13, "id860"]], "unsqueeze() (in module arkouda)": [[13, "arkouda.unsqueeze"]], "update_size() (arkouda.dataframe method)": [[13, "arkouda.DataFrame.update_size"]], "valsize (arkouda.segarray attribute)": [[13, "arkouda.SegArray.valsize"]], "value_counts() (arkouda.series method)": [[13, "arkouda.Series.value_counts"]], "value_counts() (in module arkouda)": [[13, "arkouda.value_counts"], [65, "arkouda.value_counts"]], "var() (arkouda.pdarray method)": [[13, "arkouda.pdarray.var"], [13, "id201"], [13, "id396"], [13, "id515"], [13, "id633"], [13, "id753"], [13, "id84"], [65, "arkouda.pdarray.var"]], "var() (in module arkouda)": [[13, "arkouda.var"], [59, "arkouda.var"]], "week (arkouda.datetime property)": [[13, "arkouda.Datetime.week"]], "weekday (arkouda.datetime property)": [[13, "arkouda.Datetime.weekday"]], "weekofyear (arkouda.datetime property)": [[13, "arkouda.Datetime.weekofyear"]], "where() (in module arkouda)": [[13, "arkouda.where"], [13, "id1"], [13, "id235"], [13, "id670"], [59, "arkouda.where"]], "year (arkouda.datetime property)": [[13, "arkouda.Datetime.year"]], "zero_up() (in module arkouda)": [[13, "arkouda.zero_up"]], "zeros() (in module arkouda)": [[13, "arkouda.zeros"], [13, "id114"], [13, "id231"], [13, "id546"], [13, "id784"], [62, "arkouda.zeros"]], "zeros_like() (in module arkouda)": [[13, "arkouda.zeros_like"], [62, "arkouda.zeros_like"]], "index (class in arkouda.index)": [[14, "arkouda.index.Index"]], "multiindex (class in arkouda.index)": [[14, "arkouda.index.MultiIndex"]], "__eq__() (arkouda.index.index method)": [[14, "arkouda.index.Index.__eq__"]], "__eq__() (arkouda.index.multiindex method)": [[14, "arkouda.index.MultiIndex.__eq__"]], "__getitem__() (arkouda.index.index method)": [[14, "arkouda.index.Index.__getitem__"]], "__getitem__() (arkouda.index.multiindex method)": [[14, "arkouda.index.MultiIndex.__getitem__"]], "__len__() (arkouda.index.index method)": [[14, "arkouda.index.Index.__len__"]], "__len__() (arkouda.index.multiindex method)": [[14, "arkouda.index.MultiIndex.__len__"]], "__repr__() (arkouda.index.index method)": [[14, "arkouda.index.Index.__repr__"]], "__repr__() (arkouda.index.multiindex method)": [[14, "arkouda.index.MultiIndex.__repr__"]], "_check_aligned() (arkouda.index.index method)": [[14, "arkouda.index.Index._check_aligned"]], "_check_types() (arkouda.index.index method)": [[14, "arkouda.index.Index._check_types"]], "_merge() (arkouda.index.index method)": [[14, "arkouda.index.Index._merge"]], "_merge() (arkouda.index.multiindex method)": [[14, "arkouda.index.MultiIndex._merge"]], "_merge_all() (arkouda.index.index method)": [[14, "arkouda.index.Index._merge_all"]], "_merge_all() (arkouda.index.multiindex method)": [[14, "arkouda.index.MultiIndex._merge_all"]], "argsort() (arkouda.index.index method)": [[14, "arkouda.index.Index.argsort"]], "argsort() (arkouda.index.multiindex method)": [[14, "arkouda.index.MultiIndex.argsort"]], "arkouda.index": [[14, "module-arkouda.index"]], "concat() (arkouda.index.index method)": [[14, "arkouda.index.Index.concat"]], "concat() (arkouda.index.multiindex method)": [[14, "arkouda.index.MultiIndex.concat"]], "factory() (arkouda.index.index static method)": [[14, "arkouda.index.Index.factory"]], "index (arkouda.index.index property)": [[14, "arkouda.index.Index.index"]], "index (arkouda.index.multiindex property)": [[14, "arkouda.index.MultiIndex.index"]], "is_registered() (arkouda.index.index method)": [[14, "arkouda.index.Index.is_registered"]], "is_unique (arkouda.index.index property)": [[14, "arkouda.index.Index.is_unique"]], "lookup() (arkouda.index.index method)": [[14, "arkouda.index.Index.lookup"]], "lookup() (arkouda.index.multiindex method)": [[14, "arkouda.index.MultiIndex.lookup"]], "register() (arkouda.index.index method)": [[14, "arkouda.index.Index.register"]], "register() (arkouda.index.multiindex method)": [[14, "arkouda.index.MultiIndex.register"]], "save() (arkouda.index.index method)": [[14, "arkouda.index.Index.save"]], "set_dtype() (arkouda.index.index method)": [[14, "arkouda.index.Index.set_dtype"]], "set_dtype() (arkouda.index.multiindex method)": [[14, "arkouda.index.MultiIndex.set_dtype"]], "shape (arkouda.index.index property)": [[14, "arkouda.index.Index.shape"]], "to_dict() (arkouda.index.index method)": [[14, "arkouda.index.Index.to_dict"]], "to_dict() (arkouda.index.multiindex method)": [[14, "arkouda.index.MultiIndex.to_dict"]], "to_hdf() (arkouda.index.index method)": [[14, "arkouda.index.Index.to_hdf"]], "to_list() (arkouda.index.index method)": [[14, "arkouda.index.Index.to_list"]], "to_ndarray() (arkouda.index.index method)": [[14, "arkouda.index.Index.to_ndarray"]], "to_pandas() (arkouda.index.index method)": [[14, "arkouda.index.Index.to_pandas"]], "to_pandas() (arkouda.index.multiindex method)": [[14, "arkouda.index.MultiIndex.to_pandas"]], "to_parquet() (arkouda.index.index method)": [[14, "arkouda.index.Index.to_parquet"]], "allsymbols (in module arkouda.infoclass)": [[15, "arkouda.infoclass.AllSymbols"]], "registeredsymbols (in module arkouda.infoclass)": [[15, "arkouda.infoclass.RegisteredSymbols"]], "arkouda.infoclass": [[15, "module-arkouda.infoclass"]], "information() (in module arkouda.infoclass)": [[15, "arkouda.infoclass.information"]], "list_registry() (in module arkouda.infoclass)": [[15, "arkouda.infoclass.list_registry"]], "list_symbol_table() (in module arkouda.infoclass)": [[15, "arkouda.infoclass.list_symbol_table"]], "pretty_print_information() (in module arkouda.infoclass)": [[15, "arkouda.infoclass.pretty_print_information"]], "arkouda.io": [[16, "module-arkouda.io"]], "export() (in module arkouda.io)": [[16, "arkouda.io.export"]], "file_type_to_int() (in module arkouda.io)": [[16, "arkouda.io.file_type_to_int"]], "get_datasets() (in module arkouda.io)": [[16, "arkouda.io.get_datasets"]], "get_filetype() (in module arkouda.io)": [[16, "arkouda.io.get_filetype"]], "get_null_indices() (in module arkouda.io)": [[16, "arkouda.io.get_null_indices"]], "import_data() (in module arkouda.io)": [[16, "arkouda.io.import_data"]], "load() (in module arkouda.io)": [[16, "arkouda.io.load"]], "load_all() (in module arkouda.io)": [[16, "arkouda.io.load_all"]], "ls() (in module arkouda.io)": [[16, "arkouda.io.ls"]], "mode_str_to_int() (in module arkouda.io)": [[16, "arkouda.io.mode_str_to_int"]], "read() (in module arkouda.io)": [[16, "arkouda.io.read"]], "read_hdf() (in module arkouda.io)": [[16, "arkouda.io.read_hdf"]], "read_parquet() (in module arkouda.io)": [[16, "arkouda.io.read_parquet"]], "save_all() (in module arkouda.io)": [[16, "arkouda.io.save_all"]], "to_hdf() (in module arkouda.io)": [[16, "arkouda.io.to_hdf"]], "to_parquet() (in module arkouda.io)": [[16, "arkouda.io.to_parquet"]], "arkouda.io_util": [[17, "module-arkouda.io_util"]], "delimited_file_to_dict() (in module arkouda.io_util)": [[17, "arkouda.io_util.delimited_file_to_dict"]], "dict_to_delimited_file() (in module arkouda.io_util)": [[17, "arkouda.io_util.dict_to_delimited_file"]], "get_directory() (in module arkouda.io_util)": [[17, "arkouda.io_util.get_directory"]], "write_line_to_file() (in module arkouda.io_util)": [[17, "arkouda.io_util.write_line_to_file"]], "arkouda.join": [[18, "module-arkouda.join"]], "join_on_eq_with_dt() (in module arkouda.join)": [[18, "arkouda.join.join_on_eq_with_dt"]], "arkouda.logger": [[19, "module-arkouda.logger"]], "disableverbose() (in module arkouda.logger)": [[19, "arkouda.logger.disableVerbose"]], "enableverbose() (in module arkouda.logger)": [[19, "arkouda.logger.enableVerbose"]], "match (class in arkouda.match)": [[20, "arkouda.match.Match"]], "matchtype (in module arkouda.match)": [[20, "arkouda.match.MatchType"]], "__getitem__() (arkouda.match.match method)": [[20, "arkouda.match.Match.__getitem__"]], "__repr__() (arkouda.match.match method)": [[20, "arkouda.match.Match.__repr__"]], "__str__() (arkouda.match.match method)": [[20, "arkouda.match.Match.__str__"]], "arkouda.match": [[20, "module-arkouda.match"]], "end() (arkouda.match.match method)": [[20, "arkouda.match.Match.end"], [72, "arkouda.match.Match.end"]], "find_matches() (arkouda.match.match method)": [[20, "arkouda.match.Match.find_matches"], [72, "arkouda.match.Match.find_matches"]], "group() (arkouda.match.match method)": [[20, "arkouda.match.Match.group"], [72, "arkouda.match.Match.group"]], "match_type() (arkouda.match.match method)": [[20, "arkouda.match.Match.match_type"], [72, "arkouda.match.Match.match_type"]], "matched() (arkouda.match.match method)": [[20, "arkouda.match.Match.matched"], [72, "arkouda.match.Match.matched"]], "start() (arkouda.match.match method)": [[20, "arkouda.match.Match.start"], [72, "arkouda.match.Match.start"]], "locationsinfo (arkouda.matcher.matcher attribute)": [[21, "arkouda.matcher.Matcher.LocationsInfo"]], "matcher (class in arkouda.matcher)": [[21, "arkouda.matcher.Matcher"]], "arkouda.matcher": [[21, "module-arkouda.matcher"]], "find_locations() (arkouda.matcher.matcher method)": [[21, "arkouda.matcher.Matcher.find_locations"]], "findall() (arkouda.matcher.matcher method)": [[21, "arkouda.matcher.Matcher.findall"]], "get_match() (arkouda.matcher.matcher method)": [[21, "arkouda.matcher.Matcher.get_match"]], "split() (arkouda.matcher.matcher method)": [[21, "arkouda.matcher.Matcher.split"]], "sub() (arkouda.matcher.matcher method)": [[21, "arkouda.matcher.Matcher.sub"]], "binary (arkouda.message.messageformat attribute)": [[22, "arkouda.message.MessageFormat.BINARY"]], "datetime (arkouda.message.objecttype attribute)": [[22, "arkouda.message.ObjectType.DATETIME"]], "dict (arkouda.message.objecttype attribute)": [[22, "arkouda.message.ObjectType.DICT"]], "error (arkouda.message.messagetype attribute)": [[22, "arkouda.message.MessageType.ERROR"]], "list (arkouda.message.objecttype attribute)": [[22, "arkouda.message.ObjectType.LIST"]], "messageformat (class in arkouda.message)": [[22, "arkouda.message.MessageFormat"]], "messagetype (class in arkouda.message)": [[22, "arkouda.message.MessageType"]], "normal (arkouda.message.messagetype attribute)": [[22, "arkouda.message.MessageType.NORMAL"]], "objecttype (class in arkouda.message)": [[22, "arkouda.message.ObjectType"]], "pdarray (arkouda.message.objecttype attribute)": [[22, "arkouda.message.ObjectType.PDARRAY"]], "parameterobject (class in arkouda.message)": [[22, "arkouda.message.ParameterObject"]], "replymessage (class in arkouda.message)": [[22, "arkouda.message.ReplyMessage"]], "requestmessage (class in arkouda.message)": [[22, "arkouda.message.RequestMessage"]], "string (arkouda.message.messageformat attribute)": [[22, "arkouda.message.MessageFormat.STRING"]], "strings (arkouda.message.objecttype attribute)": [[22, "arkouda.message.ObjectType.STRINGS"]], "timedelta (arkouda.message.objecttype attribute)": [[22, "arkouda.message.ObjectType.TIMEDELTA"]], "value (arkouda.message.objecttype attribute)": [[22, "arkouda.message.ObjectType.VALUE"]], "warning (arkouda.message.messagetype attribute)": [[22, "arkouda.message.MessageType.WARNING"]], "__repr__() (arkouda.message.messageformat method)": [[22, "arkouda.message.MessageFormat.__repr__"]], "__repr__() (arkouda.message.messagetype method)": [[22, "arkouda.message.MessageType.__repr__"]], "__repr__() (arkouda.message.objecttype method)": [[22, "arkouda.message.ObjectType.__repr__"]], "__slots (arkouda.message.parameterobject attribute)": [[22, "arkouda.message.ParameterObject.__slots"]], "__slots (arkouda.message.requestmessage attribute)": [[22, "arkouda.message.RequestMessage.__slots"]], "__slots__ (arkouda.message.replymessage attribute)": [[22, "arkouda.message.ReplyMessage.__slots__"]], "__str__() (arkouda.message.messageformat method)": [[22, "arkouda.message.MessageFormat.__str__"]], "__str__() (arkouda.message.messagetype method)": [[22, "arkouda.message.MessageType.__str__"]], "__str__() (arkouda.message.objecttype method)": [[22, "arkouda.message.ObjectType.__str__"]], "_build_dict_param() (arkouda.message.parameterobject static method)": [[22, "arkouda.message.ParameterObject._build_dict_param"]], "_build_gen_param() (arkouda.message.parameterobject static method)": [[22, "arkouda.message.ParameterObject._build_gen_param"]], "_build_list_param() (arkouda.message.parameterobject static method)": [[22, "arkouda.message.ParameterObject._build_list_param"]], "_build_pdarray_param() (arkouda.message.parameterobject static method)": [[22, "arkouda.message.ParameterObject._build_pdarray_param"]], "_build_strings_param() (arkouda.message.parameterobject static method)": [[22, "arkouda.message.ParameterObject._build_strings_param"]], "args (arkouda.message.requestmessage attribute)": [[22, "arkouda.message.RequestMessage.args"]], "arkouda.message": [[22, "module-arkouda.message"]], "asdict() (arkouda.message.requestmessage method)": [[22, "arkouda.message.RequestMessage.asdict"]], "cmd (arkouda.message.requestmessage attribute)": [[22, "arkouda.message.RequestMessage.cmd"]], "dict (arkouda.message.parameterobject property)": [[22, "arkouda.message.ParameterObject.dict"]], "dtype (arkouda.message.parameterobject attribute)": [[22, "arkouda.message.ParameterObject.dtype"]], "factory() (arkouda.message.parameterobject class method)": [[22, "arkouda.message.ParameterObject.factory"]], "format (arkouda.message.requestmessage attribute)": [[22, "arkouda.message.RequestMessage.format"]], "fromdict() (arkouda.message.replymessage static method)": [[22, "arkouda.message.ReplyMessage.fromdict"]], "generate_dispatch() (arkouda.message.parameterobject static method)": [[22, "arkouda.message.ParameterObject.generate_dispatch"]], "key (arkouda.message.parameterobject attribute)": [[22, "arkouda.message.ParameterObject.key"]], "msg (arkouda.message.replymessage attribute)": [[22, "arkouda.message.ReplyMessage.msg"]], "msgtype (arkouda.message.replymessage attribute)": [[22, "arkouda.message.ReplyMessage.msgType"]], "objtype (arkouda.message.parameterobject attribute)": [[22, "arkouda.message.ParameterObject.objType"]], "size (arkouda.message.requestmessage attribute)": [[22, "arkouda.message.RequestMessage.size"]], "token (arkouda.message.requestmessage attribute)": [[22, "arkouda.message.RequestMessage.token"]], "user (arkouda.message.replymessage attribute)": [[22, "arkouda.message.ReplyMessage.user"]], "user (arkouda.message.requestmessage attribute)": [[22, "arkouda.message.RequestMessage.user"]], "val (arkouda.message.parameterobject attribute)": [[22, "arkouda.message.ParameterObject.val"]], "errormode (class in arkouda.numeric)": [[23, "arkouda.numeric.ErrorMode"]], "abs() (in module arkouda.numeric)": [[23, "arkouda.numeric.abs"]], "arkouda.numeric": [[23, "module-arkouda.numeric"]], "cast() (in module arkouda.numeric)": [[23, "arkouda.numeric.cast"]], "cos() (in module arkouda.numeric)": [[23, "arkouda.numeric.cos"]], "cumprod() (in module arkouda.numeric)": [[23, "arkouda.numeric.cumprod"]], "cumsum() (in module arkouda.numeric)": [[23, "arkouda.numeric.cumsum"]], "exp() (in module arkouda.numeric)": [[23, "arkouda.numeric.exp"]], "hash() (in module arkouda.numeric)": [[23, "arkouda.numeric.hash"]], "histogram() (in module arkouda.numeric)": [[23, "arkouda.numeric.histogram"]], "ignore (arkouda.numeric.errormode attribute)": [[23, "arkouda.numeric.ErrorMode.ignore"]], "isnan() (in module arkouda.numeric)": [[23, "arkouda.numeric.isnan"]], "log() (in module arkouda.numeric)": [[23, "arkouda.numeric.log"]], "return_validity (arkouda.numeric.errormode attribute)": [[23, "arkouda.numeric.ErrorMode.return_validity"]], "sin() (in module arkouda.numeric)": [[23, "arkouda.numeric.sin"]], "strict (arkouda.numeric.errormode attribute)": [[23, "arkouda.numeric.ErrorMode.strict"]], "value_counts() (in module arkouda.numeric)": [[23, "arkouda.numeric.value_counts"]], "where() (in module arkouda.numeric)": [[23, "arkouda.numeric.where"]], "binops (arkouda.pdarrayclass.pdarray attribute)": [[24, "arkouda.pdarrayclass.pdarray.BinOps"]], "opeqops (arkouda.pdarrayclass.pdarray attribute)": [[24, "arkouda.pdarrayclass.pdarray.OpEqOps"]], "__add__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__add__"]], "__and__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__and__"]], "__array_priority__ (arkouda.pdarrayclass.pdarray attribute)": [[24, "arkouda.pdarrayclass.pdarray.__array_priority__"]], "__bool__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__bool__"]], "__del__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__del__"]], "__eq__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__eq__"]], "__floordiv__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__floordiv__"]], "__ge__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__ge__"]], "__getitem__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__getitem__"]], "__gt__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__gt__"]], "__iadd__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__iadd__"]], "__iand__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__iand__"]], "__ifloordiv__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__ifloordiv__"]], "__ilshift__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__ilshift__"]], "__imod__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__imod__"]], "__imul__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__imul__"]], "__invert__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__invert__"]], "__ior__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__ior__"]], "__ipow__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__ipow__"]], "__irshift__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__irshift__"]], "__isub__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__isub__"]], "__iter__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__iter__"]], "__itruediv__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__itruediv__"]], "__ixor__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__ixor__"]], "__le__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__le__"]], "__len__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__len__"]], "__lshift__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__lshift__"]], "__lt__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__lt__"]], "__mod__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__mod__"]], "__mul__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__mul__"]], "__ne__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__ne__"]], "__neg__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__neg__"]], "__or__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__or__"]], "__pow__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__pow__"]], "__radd__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__radd__"]], "__rand__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__rand__"]], "__repr__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__repr__"]], "__rfloordiv__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__rfloordiv__"]], "__rlshift__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__rlshift__"]], "__rmod__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__rmod__"]], "__rmul__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__rmul__"]], "__ror__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__ror__"]], "__rpow__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__rpow__"]], "__rrshift__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__rrshift__"]], "__rshift__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__rshift__"]], "__rsub__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__rsub__"]], "__rtruediv__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__rtruediv__"]], "__rxor__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__rxor__"]], "__setitem__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__setitem__"]], "__str__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__str__"]], "__sub__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__sub__"]], "__truediv__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__truediv__"]], "__xor__() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.__xor__"]], "_binop() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray._binop"]], "_get_grouping_keys() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray._get_grouping_keys"]], "_list_component_names() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray._list_component_names"]], "_r_binop() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray._r_binop"]], "all() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.all"]], "all() (in module arkouda.pdarrayclass)": [[24, "arkouda.pdarrayclass.all"]], "any() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.any"]], "any() (in module arkouda.pdarrayclass)": [[24, "arkouda.pdarrayclass.any"]], "argmax() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.argmax"]], "argmax() (in module arkouda.pdarrayclass)": [[24, "arkouda.pdarrayclass.argmax"]], "argmaxk() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.argmaxk"]], "argmaxk() (in module arkouda.pdarrayclass)": [[24, "arkouda.pdarrayclass.argmaxk"]], "argmin() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.argmin"]], "argmin() (in module arkouda.pdarrayclass)": [[24, "arkouda.pdarrayclass.argmin"]], "argmink() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.argmink"]], "argmink() (in module arkouda.pdarrayclass)": [[24, "arkouda.pdarrayclass.argmink"]], "arkouda.pdarrayclass": [[24, "module-arkouda.pdarrayclass"]], "astype() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.astype"]], "attach() (arkouda.pdarrayclass.pdarray static method)": [[24, "arkouda.pdarrayclass.pdarray.attach"]], "attach_pdarray() (in module arkouda.pdarrayclass)": [[24, "arkouda.pdarrayclass.attach_pdarray"]], "bigint_to_uint_arrays() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.bigint_to_uint_arrays"]], "clear() (in module arkouda.pdarrayclass)": [[24, "arkouda.pdarrayclass.clear"]], "clz() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.clz"]], "clz() (in module arkouda.pdarrayclass)": [[24, "arkouda.pdarrayclass.clz"]], "corr() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.corr"]], "corr() (in module arkouda.pdarrayclass)": [[24, "arkouda.pdarrayclass.corr"]], "cov() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.cov"]], "cov() (in module arkouda.pdarrayclass)": [[24, "arkouda.pdarrayclass.cov"]], "ctz() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.ctz"]], "ctz() (in module arkouda.pdarrayclass)": [[24, "arkouda.pdarrayclass.ctz"]], "dtype (arkouda.pdarrayclass.pdarray attribute)": [[24, "arkouda.pdarrayclass.pdarray.dtype"]], "fill() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.fill"]], "format_other() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.format_other"]], "info() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.info"]], "is_registered() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.is_registered"]], "is_sorted() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.is_sorted"]], "is_sorted() (in module arkouda.pdarrayclass)": [[24, "arkouda.pdarrayclass.is_sorted"]], "itemsize (arkouda.pdarrayclass.pdarray attribute)": [[24, "arkouda.pdarrayclass.pdarray.itemsize"]], "max() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.max"]], "max() (in module arkouda.pdarrayclass)": [[24, "arkouda.pdarrayclass.max"]], "maxk() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.maxk"]], "maxk() (in module arkouda.pdarrayclass)": [[24, "arkouda.pdarrayclass.maxk"]], "mean() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.mean"]], "mean() (in module arkouda.pdarrayclass)": [[24, "arkouda.pdarrayclass.mean"]], "min() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.min"]], "min() (in module arkouda.pdarrayclass)": [[24, "arkouda.pdarrayclass.min"]], "mink() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.mink"]], "mink() (in module arkouda.pdarrayclass)": [[24, "arkouda.pdarrayclass.mink"]], "name (arkouda.pdarrayclass.pdarray attribute)": [[24, "arkouda.pdarrayclass.pdarray.name"]], "ndim (arkouda.pdarrayclass.pdarray attribute)": [[24, "arkouda.pdarrayclass.pdarray.ndim"]], "objtype (arkouda.pdarrayclass.pdarray attribute)": [[24, "arkouda.pdarrayclass.pdarray.objtype"]], "opeq() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.opeq"]], "parity() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.parity"]], "parity() (in module arkouda.pdarrayclass)": [[24, "arkouda.pdarrayclass.parity"]], "pdarray (class in arkouda.pdarrayclass)": [[24, "arkouda.pdarrayclass.pdarray"]], "popcount() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.popcount"]], "popcount() (in module arkouda.pdarrayclass)": [[24, "arkouda.pdarrayclass.popcount"]], "power() (in module arkouda.pdarrayclass)": [[24, "arkouda.pdarrayclass.power"]], "pretty_print_info() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.pretty_print_info"]], "prod() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.prod"]], "prod() (in module arkouda.pdarrayclass)": [[24, "arkouda.pdarrayclass.prod"]], "register() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.register"]], "reshape() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.reshape"]], "rotl() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.rotl"]], "rotl() (in module arkouda.pdarrayclass)": [[24, "arkouda.pdarrayclass.rotl"]], "rotr() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.rotr"]], "rotr() (in module arkouda.pdarrayclass)": [[24, "arkouda.pdarrayclass.rotr"]], "save() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.save"]], "shape (arkouda.pdarrayclass.pdarray attribute)": [[24, "arkouda.pdarrayclass.pdarray.shape"]], "size (arkouda.pdarrayclass.pdarray attribute)": [[24, "arkouda.pdarrayclass.pdarray.size"]], "slice_bits() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.slice_bits"]], "sqrt() (in module arkouda.pdarrayclass)": [[24, "arkouda.pdarrayclass.sqrt"]], "std() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.std"]], "std() (in module arkouda.pdarrayclass)": [[24, "arkouda.pdarrayclass.std"]], "sum() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.sum"]], "sum() (in module arkouda.pdarrayclass)": [[24, "arkouda.pdarrayclass.sum"]], "to_cuda() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.to_cuda"]], "to_hdf() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.to_hdf"]], "to_list() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.to_list"]], "to_ndarray() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.to_ndarray"]], "to_parquet() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.to_parquet"]], "unregister() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.unregister"]], "unregister_pdarray_by_name() (in module arkouda.pdarrayclass)": [[24, "arkouda.pdarrayclass.unregister_pdarray_by_name"]], "var() (arkouda.pdarrayclass.pdarray method)": [[24, "arkouda.pdarrayclass.pdarray.var"]], "var() (in module arkouda.pdarrayclass)": [[24, "arkouda.pdarrayclass.var"]], "arange() (in module arkouda.pdarraycreation)": [[25, "arkouda.pdarraycreation.arange"]], "arkouda.pdarraycreation": [[25, "module-arkouda.pdarraycreation"]], "array() (in module arkouda.pdarraycreation)": [[25, "arkouda.pdarraycreation.array"]], "bigint_from_uint_arrays() (in module arkouda.pdarraycreation)": [[25, "arkouda.pdarraycreation.bigint_from_uint_arrays"]], "from_series() (in module arkouda.pdarraycreation)": [[25, "arkouda.pdarraycreation.from_series"]], "full() (in module arkouda.pdarraycreation)": [[25, "arkouda.pdarraycreation.full"]], "full_like() (in module arkouda.pdarraycreation)": [[25, "arkouda.pdarraycreation.full_like"]], "linspace() (in module arkouda.pdarraycreation)": [[25, "arkouda.pdarraycreation.linspace"]], "ones() (in module arkouda.pdarraycreation)": [[25, "arkouda.pdarraycreation.ones"]], "ones_like() (in module arkouda.pdarraycreation)": [[25, "arkouda.pdarraycreation.ones_like"]], "randint() (in module arkouda.pdarraycreation)": [[25, "arkouda.pdarraycreation.randint"]], "random_strings_lognormal() (in module arkouda.pdarraycreation)": [[25, "arkouda.pdarraycreation.random_strings_lognormal"]], "random_strings_uniform() (in module arkouda.pdarraycreation)": [[25, "arkouda.pdarraycreation.random_strings_uniform"]], "standard_normal() (in module arkouda.pdarraycreation)": [[25, "arkouda.pdarraycreation.standard_normal"]], "uniform() (in module arkouda.pdarraycreation)": [[25, "arkouda.pdarraycreation.uniform"]], "zeros() (in module arkouda.pdarraycreation)": [[25, "arkouda.pdarraycreation.zeros"]], "zeros_like() (in module arkouda.pdarraycreation)": [[25, "arkouda.pdarraycreation.zeros_like"]], "arkouda.pdarraysetops": [[26, "module-arkouda.pdarraysetops"]], "concatenate() (in module arkouda.pdarraysetops)": [[26, "arkouda.pdarraysetops.concatenate"]], "in1d() (in module arkouda.pdarraysetops)": [[26, "arkouda.pdarraysetops.in1d"]], "intersect1d() (in module arkouda.pdarraysetops)": [[26, "arkouda.pdarraysetops.intersect1d"]], "setdiff1d() (in module arkouda.pdarraysetops)": [[26, "arkouda.pdarraysetops.setdiff1d"]], "setxor1d() (in module arkouda.pdarraysetops)": [[26, "arkouda.pdarraysetops.setxor1d"]], "union1d() (in module arkouda.pdarraysetops)": [[26, "arkouda.pdarraysetops.union1d"]], "arkouda.plotting": [[27, "module-arkouda.plotting"]], "plot_dist() (in module arkouda.plotting)": [[27, "arkouda.plotting.plot_dist"]], "row (class in arkouda.row)": [[28, "arkouda.row.Row"]], "__repr__() (arkouda.row.row method)": [[28, "arkouda.row.Row.__repr__"]], "__str__() (arkouda.row.row method)": [[28, "arkouda.row.Row.__str__"]], "_repr_html_() (arkouda.row.row method)": [[28, "arkouda.row.Row._repr_html_"]], "arkouda.row": [[28, "module-arkouda.row"]], "arkouda.security": [[29, "module-arkouda.security"]], "generate_token() (in module arkouda.security)": [[29, "arkouda.security.generate_token"]], "generate_username_token_json() (in module arkouda.security)": [[29, "arkouda.security.generate_username_token_json"]], "get_arkouda_client_directory() (in module arkouda.security)": [[29, "arkouda.security.get_arkouda_client_directory"]], "get_home_directory() (in module arkouda.security)": [[29, "arkouda.security.get_home_directory"]], "get_username() (in module arkouda.security)": [[29, "arkouda.security.get_username"]], "username_tokenizer (in module arkouda.security)": [[29, "arkouda.security.username_tokenizer"]], "and() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.AND"]], "or() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.OR"]], "segarray (class in arkouda.segarray)": [[30, "arkouda.segarray.SegArray"]], "xor() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.XOR"]], "__eq__() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.__eq__"]], "__getitem__() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.__getitem__"]], "__repr__() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.__repr__"]], "__str__() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.__str__"]], "_aggregator() (in module arkouda.segarray)": [[30, "arkouda.segarray._aggregator"]], "_compute_non_empty() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray._compute_non_empty"]], "_from_attach_return_msg() (arkouda.segarray.segarray class method)": [[30, "arkouda.segarray.SegArray._from_attach_return_msg"]], "_normalize_index() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray._normalize_index"]], "aggregate() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.aggregate"]], "all() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.all"]], "any() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.any"]], "append() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.append"]], "append_single() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.append_single"]], "argmax() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.argmax"]], "argmin() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.argmin"]], "arkouda.segarray": [[30, "module-arkouda.segarray"]], "attach() (arkouda.segarray.segarray class method)": [[30, "arkouda.segarray.SegArray.attach"]], "concat() (arkouda.segarray.segarray class method)": [[30, "arkouda.segarray.SegArray.concat"]], "copy() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.copy"]], "from_multi_array() (arkouda.segarray.segarray class method)": [[30, "arkouda.segarray.SegArray.from_multi_array"]], "from_parts() (arkouda.segarray.segarray class method)": [[30, "arkouda.segarray.SegArray.from_parts"]], "from_return_msg() (arkouda.segarray.segarray class method)": [[30, "arkouda.segarray.SegArray.from_return_msg"]], "gen_ranges() (in module arkouda.segarray)": [[30, "arkouda.segarray.gen_ranges"]], "get_jth() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.get_jth"]], "get_length_n() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.get_length_n"]], "get_ngrams() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.get_ngrams"]], "get_prefixes() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.get_prefixes"]], "get_suffixes() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.get_suffixes"]], "intersect() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.intersect"]], "is_registered() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.is_registered"]], "lengths (arkouda.segarray.segarray property)": [[30, "arkouda.segarray.SegArray.lengths"]], "load() (arkouda.segarray.segarray class method)": [[30, "arkouda.segarray.SegArray.load"]], "max() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.max"]], "mean() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.mean"]], "min() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.min"]], "non_empty (arkouda.segarray.segarray property)": [[30, "arkouda.segarray.SegArray.non_empty"]], "non_empty_count (arkouda.segarray.segarray property)": [[30, "arkouda.segarray.SegArray.non_empty_count"]], "nunique() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.nunique"]], "objtype (arkouda.segarray.segarray property)": [[30, "arkouda.segarray.SegArray.objtype"]], "prepend_single() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.prepend_single"]], "prod() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.prod"]], "register() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.register"]], "remove_repeats() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.remove_repeats"]], "save() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.save"]], "segarray() (in module arkouda.segarray)": [[30, "arkouda.segarray.segarray"]], "set_jth() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.set_jth"]], "setdiff() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.setdiff"]], "setxor() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.setxor"]], "sum() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.sum"]], "to_hdf() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.to_hdf"]], "to_list() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.to_list"]], "to_ndarray() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.to_ndarray"]], "union() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.union"]], "unique() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.unique"]], "unregister() (arkouda.segarray.segarray method)": [[30, "arkouda.segarray.SegArray.unregister"]], "unregister_segarray_by_name() (arkouda.segarray.segarray static method)": [[30, "arkouda.segarray.SegArray.unregister_segarray_by_name"]], "valsize (arkouda.segarray.segarray attribute)": [[30, "arkouda.segarray.SegArray.valsize"]], "series (class in arkouda.series)": [[31, "arkouda.series.Series"]], "__getitem__() (arkouda.series.series method)": [[31, "arkouda.series.Series.__getitem__"]], "__len__() (arkouda.series.series method)": [[31, "arkouda.series.Series.__len__"]], "__repr__() (arkouda.series.series method)": [[31, "arkouda.series.Series.__repr__"]], "_all_aligned() (arkouda.series.series static method)": [[31, "arkouda.series.Series._all_aligned"]], "_make_aggop() (arkouda.series.series class method)": [[31, "arkouda.series.Series._make_aggop"]], "_make_binop() (arkouda.series.series class method)": [[31, "arkouda.series.Series._make_binop"]], "_make_unaryop() (arkouda.series.series class method)": [[31, "arkouda.series.Series._make_unaryop"]], "add() (arkouda.series.series method)": [[31, "arkouda.series.Series.add"]], "arkouda.series": [[31, "module-arkouda.series"]], "attach() (arkouda.series.series static method)": [[31, "arkouda.series.Series.attach"]], "concat() (arkouda.series.series static method)": [[31, "arkouda.series.Series.concat"]], "diff() (arkouda.series.series method)": [[31, "arkouda.series.Series.diff"]], "dt (arkouda.series.series attribute)": [[31, "arkouda.series.Series.dt"]], "from_return_msg() (arkouda.series.series static method)": [[31, "arkouda.series.Series.from_return_msg"]], "head() (arkouda.series.series method)": [[31, "arkouda.series.Series.head"]], "is_registered() (arkouda.series.series method)": [[31, "arkouda.series.Series.is_registered"]], "isin() (arkouda.series.series method)": [[31, "arkouda.series.Series.isin"]], "locate() (arkouda.series.series method)": [[31, "arkouda.series.Series.locate"]], "pdconcat() (arkouda.series.series static method)": [[31, "arkouda.series.Series.pdconcat"]], "register() (arkouda.series.series method)": [[31, "arkouda.series.Series.register"]], "shape (arkouda.series.series property)": [[31, "arkouda.series.Series.shape"]], "sort_index() (arkouda.series.series method)": [[31, "arkouda.series.Series.sort_index"]], "sort_values() (arkouda.series.series method)": [[31, "arkouda.series.Series.sort_values"]], "str_acc (arkouda.series.series attribute)": [[31, "arkouda.series.Series.str_acc"]], "tail() (arkouda.series.series method)": [[31, "arkouda.series.Series.tail"]], "to_dataframe() (arkouda.series.series method)": [[31, "arkouda.series.Series.to_dataframe"]], "to_pandas() (arkouda.series.series method)": [[31, "arkouda.series.Series.to_pandas"]], "topn() (arkouda.series.series method)": [[31, "arkouda.series.Series.topn"]], "value_counts() (arkouda.series.series method)": [[31, "arkouda.series.Series.value_counts"]], "sortingalgorithm (in module arkouda.sorting)": [[32, "arkouda.sorting.SortingAlgorithm"]], "argsort() (in module arkouda.sorting)": [[32, "arkouda.sorting.argsort"]], "arkouda.sorting": [[32, "module-arkouda.sorting"]], "coargsort() (in module arkouda.sorting)": [[32, "arkouda.sorting.coargsort"]], "sort() (in module arkouda.sorting)": [[32, "arkouda.sorting.sort"]], "binops (arkouda.strings.strings attribute)": [[33, "arkouda.strings.Strings.BinOps"]], "strings (class in arkouda.strings)": [[33, "arkouda.strings.Strings"]], "__add__() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.__add__"]], "__eq__() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.__eq__"]], "__getitem__() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.__getitem__"]], "__iter__() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.__iter__"]], "__len__() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.__len__"]], "__ne__() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.__ne__"]], "__radd__() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.__radd__"]], "__repr__() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.__repr__"]], "__str__() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.__str__"]], "_binop() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings._binop"]], "_comp_to_ndarray() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings._comp_to_ndarray"]], "_empty_pattern_verification() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings._empty_pattern_verification"]], "_get_grouping_keys() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings._get_grouping_keys"]], "_get_matcher() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings._get_matcher"]], "_list_component_names() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings._list_component_names"]], "arkouda.strings": [[33, "module-arkouda.strings"]], "astype() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.astype"]], "attach() (arkouda.strings.strings static method)": [[33, "arkouda.strings.Strings.attach"]], "cached_regex_patterns() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.cached_regex_patterns"]], "contains() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.contains"]], "decode() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.decode"]], "dtype (arkouda.strings.strings attribute)": [[33, "arkouda.strings.Strings.dtype"]], "encode() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.encode"]], "endswith() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.endswith"]], "entry (arkouda.strings.strings attribute)": [[33, "arkouda.strings.Strings.entry"]], "find_locations() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.find_locations"]], "findall() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.findall"]], "flatten() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.flatten"]], "from_parts() (arkouda.strings.strings static method)": [[33, "arkouda.strings.Strings.from_parts"]], "from_return_msg() (arkouda.strings.strings static method)": [[33, "arkouda.strings.Strings.from_return_msg"]], "fullmatch() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.fullmatch"]], "get_lengths() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.get_lengths"]], "get_prefixes() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.get_prefixes"]], "get_suffixes() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.get_suffixes"]], "group() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.group"]], "hash() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.hash"]], "info() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.info"]], "is_lower() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.is_lower"]], "is_registered() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.is_registered"]], "is_title() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.is_title"]], "is_upper() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.is_upper"]], "logger (arkouda.strings.strings attribute)": [[33, "arkouda.strings.Strings.logger"]], "lstick() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.lstick"]], "match() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.match"]], "nbytes (arkouda.strings.strings attribute)": [[33, "arkouda.strings.Strings.nbytes"]], "ndim (arkouda.strings.strings attribute)": [[33, "arkouda.strings.Strings.ndim"]], "objtype (arkouda.strings.strings attribute)": [[33, "arkouda.strings.Strings.objtype"]], "peel() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.peel"]], "pretty_print_info() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.pretty_print_info"]], "purge_cached_regex_patterns() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.purge_cached_regex_patterns"]], "register() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.register"]], "rpeel() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.rpeel"]], "save() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.save"]], "search() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.search"]], "shape (arkouda.strings.strings attribute)": [[33, "arkouda.strings.Strings.shape"]], "size (arkouda.strings.strings attribute)": [[33, "arkouda.strings.Strings.size"]], "split() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.split"]], "startswith() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.startswith"]], "stick() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.stick"]], "strip() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.strip"]], "sub() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.sub"]], "subn() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.subn"]], "to_hdf() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.to_hdf"]], "to_list() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.to_list"]], "to_lower() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.to_lower"]], "to_ndarray() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.to_ndarray"]], "to_parquet() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.to_parquet"]], "to_title() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.to_title"]], "to_upper() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.to_upper"]], "unregister() (arkouda.strings.strings method)": [[33, "arkouda.strings.Strings.unregister"]], "unregister_strings_by_name() (arkouda.strings.strings static method)": [[33, "arkouda.strings.Strings.unregister_strings_by_name"]], "datetime (class in arkouda.timeclass)": [[34, "arkouda.timeclass.Datetime"]], "timedelta (class in arkouda.timeclass)": [[34, "arkouda.timeclass.Timedelta"]], "_abstractbasetime (class in arkouda.timeclass)": [[34, "arkouda.timeclass._AbstractBaseTime"]], "_base_unit (in module arkouda.timeclass)": [[34, "arkouda.timeclass._BASE_UNIT"]], "_timescalar (class in arkouda.timeclass)": [[34, "arkouda.timeclass._Timescalar"]], "__getitem__() (arkouda.timeclass._abstractbasetime method)": [[34, "arkouda.timeclass._AbstractBaseTime.__getitem__"]], "__repr__() (arkouda.timeclass._abstractbasetime method)": [[34, "arkouda.timeclass._AbstractBaseTime.__repr__"]], "__setitem__() (arkouda.timeclass._abstractbasetime method)": [[34, "arkouda.timeclass._AbstractBaseTime.__setitem__"]], "__str__() (arkouda.timeclass._abstractbasetime method)": [[34, "arkouda.timeclass._AbstractBaseTime.__str__"]], "_binop() (arkouda.timeclass._abstractbasetime method)": [[34, "arkouda.timeclass._AbstractBaseTime._binop"]], "_ensure_components() (arkouda.timeclass.datetime method)": [[34, "arkouda.timeclass.Datetime._ensure_components"]], "_ensure_components() (arkouda.timeclass.timedelta method)": [[34, "arkouda.timeclass.Timedelta._ensure_components"]], "_get_callback() (arkouda.timeclass.datetime class method)": [[34, "arkouda.timeclass.Datetime._get_callback"]], "_get_callback() (arkouda.timeclass.timedelta class method)": [[34, "arkouda.timeclass.Timedelta._get_callback"]], "_get_callback() (arkouda.timeclass._abstractbasetime class method)": [[34, "arkouda.timeclass._AbstractBaseTime._get_callback"]], "_get_factor() (in module arkouda.timeclass)": [[34, "arkouda.timeclass._get_factor"]], "_identity() (in module arkouda.timeclass)": [[34, "arkouda.timeclass._identity"]], "_is_datetime_scalar() (arkouda.timeclass._abstractbasetime static method)": [[34, "arkouda.timeclass._AbstractBaseTime._is_datetime_scalar"]], "_is_supported_scalar() (arkouda.timeclass.datetime static method)": [[34, "arkouda.timeclass.Datetime._is_supported_scalar"]], "_is_supported_scalar() (arkouda.timeclass.timedelta static method)": [[34, "arkouda.timeclass.Timedelta._is_supported_scalar"]], "_is_timedelta_scalar() (arkouda.timeclass._abstractbasetime static method)": [[34, "arkouda.timeclass._AbstractBaseTime._is_timedelta_scalar"]], "_r_binop() (arkouda.timeclass._abstractbasetime method)": [[34, "arkouda.timeclass._AbstractBaseTime._r_binop"]], "_scalar_callback() (arkouda.timeclass.datetime method)": [[34, "arkouda.timeclass.Datetime._scalar_callback"]], "_scalar_callback() (arkouda.timeclass.timedelta method)": [[34, "arkouda.timeclass.Timedelta._scalar_callback"]], "_scalar_callback() (arkouda.timeclass._abstractbasetime method)": [[34, "arkouda.timeclass._AbstractBaseTime._scalar_callback"]], "_unit2factor (in module arkouda.timeclass)": [[34, "arkouda.timeclass._unit2factor"]], "_unit2normunit (in module arkouda.timeclass)": [[34, "arkouda.timeclass._unit2normunit"]], "abs() (arkouda.timeclass.timedelta method)": [[34, "arkouda.timeclass.Timedelta.abs"]], "arkouda.timeclass": [[34, "module-arkouda.timeclass"]], "ceil() (arkouda.timeclass._abstractbasetime method)": [[34, "arkouda.timeclass._AbstractBaseTime.ceil"]], "components (arkouda.timeclass.timedelta property)": [[34, "arkouda.timeclass.Timedelta.components"]], "date (arkouda.timeclass.datetime property)": [[34, "arkouda.timeclass.Datetime.date"]], "date_range() (in module arkouda.timeclass)": [[34, "arkouda.timeclass.date_range"]], "day (arkouda.timeclass.datetime property)": [[34, "arkouda.timeclass.Datetime.day"]], "day_of_week (arkouda.timeclass.datetime property)": [[34, "arkouda.timeclass.Datetime.day_of_week"]], "day_of_year (arkouda.timeclass.datetime property)": [[34, "arkouda.timeclass.Datetime.day_of_year"]], "dayofweek (arkouda.timeclass.datetime property)": [[34, "arkouda.timeclass.Datetime.dayofweek"]], "dayofyear (arkouda.timeclass.datetime property)": [[34, "arkouda.timeclass.Datetime.dayofyear"]], "days (arkouda.timeclass.timedelta property)": [[34, "arkouda.timeclass.Timedelta.days"]], "floor() (arkouda.timeclass._abstractbasetime method)": [[34, "arkouda.timeclass._AbstractBaseTime.floor"]], "hour (arkouda.timeclass.datetime property)": [[34, "arkouda.timeclass.Datetime.hour"]], "is_leap_year (arkouda.timeclass.datetime property)": [[34, "arkouda.timeclass.Datetime.is_leap_year"]], "isocalendar() (arkouda.timeclass.datetime method)": [[34, "arkouda.timeclass.Datetime.isocalendar"]], "max() (arkouda.timeclass._abstractbasetime method)": [[34, "arkouda.timeclass._AbstractBaseTime.max"]], "maxk() (arkouda.timeclass._abstractbasetime method)": [[34, "arkouda.timeclass._AbstractBaseTime.maxk"]], "microsecond (arkouda.timeclass.datetime property)": [[34, "arkouda.timeclass.Datetime.microsecond"]], "microseconds (arkouda.timeclass.timedelta property)": [[34, "arkouda.timeclass.Timedelta.microseconds"]], "millisecond (arkouda.timeclass.datetime property)": [[34, "arkouda.timeclass.Datetime.millisecond"]], "min() (arkouda.timeclass._abstractbasetime method)": [[34, "arkouda.timeclass._AbstractBaseTime.min"]], "mink() (arkouda.timeclass._abstractbasetime method)": [[34, "arkouda.timeclass._AbstractBaseTime.mink"]], "minute (arkouda.timeclass.datetime property)": [[34, "arkouda.timeclass.Datetime.minute"]], "month (arkouda.timeclass.datetime property)": [[34, "arkouda.timeclass.Datetime.month"]], "nanosecond (arkouda.timeclass.datetime property)": [[34, "arkouda.timeclass.Datetime.nanosecond"]], "nanoseconds (arkouda.timeclass.timedelta property)": [[34, "arkouda.timeclass.Timedelta.nanoseconds"]], "opeq() (arkouda.timeclass._abstractbasetime method)": [[34, "arkouda.timeclass._AbstractBaseTime.opeq"]], "round() (arkouda.timeclass._abstractbasetime method)": [[34, "arkouda.timeclass._AbstractBaseTime.round"]], "second (arkouda.timeclass.datetime property)": [[34, "arkouda.timeclass.Datetime.second"]], "seconds (arkouda.timeclass.timedelta property)": [[34, "arkouda.timeclass.Timedelta.seconds"]], "std() (arkouda.timeclass.timedelta method)": [[34, "arkouda.timeclass.Timedelta.std"]], "sum() (arkouda.timeclass.datetime method)": [[34, "arkouda.timeclass.Datetime.sum"]], "sum() (arkouda.timeclass.timedelta method)": [[34, "arkouda.timeclass.Timedelta.sum"]], "supported_opeq (arkouda.timeclass.datetime attribute)": [[34, "arkouda.timeclass.Datetime.supported_opeq"]], "supported_opeq (arkouda.timeclass.timedelta attribute)": [[34, "arkouda.timeclass.Timedelta.supported_opeq"]], "supported_with_datetime (arkouda.timeclass.datetime attribute)": [[34, "arkouda.timeclass.Datetime.supported_with_datetime"]], "supported_with_datetime (arkouda.timeclass.timedelta attribute)": [[34, "arkouda.timeclass.Timedelta.supported_with_datetime"]], "supported_with_pdarray (arkouda.timeclass.datetime attribute)": [[34, "arkouda.timeclass.Datetime.supported_with_pdarray"]], "supported_with_pdarray (arkouda.timeclass.timedelta attribute)": [[34, "arkouda.timeclass.Timedelta.supported_with_pdarray"]], "supported_with_r_datetime (arkouda.timeclass.datetime attribute)": [[34, "arkouda.timeclass.Datetime.supported_with_r_datetime"]], "supported_with_r_datetime (arkouda.timeclass.timedelta attribute)": [[34, "arkouda.timeclass.Timedelta.supported_with_r_datetime"]], "supported_with_r_pdarray (arkouda.timeclass.datetime attribute)": [[34, "arkouda.timeclass.Datetime.supported_with_r_pdarray"]], "supported_with_r_pdarray (arkouda.timeclass.timedelta attribute)": [[34, "arkouda.timeclass.Timedelta.supported_with_r_pdarray"]], "supported_with_r_timedelta (arkouda.timeclass.datetime attribute)": [[34, "arkouda.timeclass.Datetime.supported_with_r_timedelta"]], "supported_with_r_timedelta (arkouda.timeclass.timedelta attribute)": [[34, "arkouda.timeclass.Timedelta.supported_with_r_timedelta"]], "supported_with_timedelta (arkouda.timeclass.datetime attribute)": [[34, "arkouda.timeclass.Datetime.supported_with_timedelta"]], "supported_with_timedelta (arkouda.timeclass.timedelta attribute)": [[34, "arkouda.timeclass.Timedelta.supported_with_timedelta"]], "timedelta_range() (in module arkouda.timeclass)": [[34, "arkouda.timeclass.timedelta_range"]], "to_list() (arkouda.timeclass._abstractbasetime method)": [[34, "arkouda.timeclass._AbstractBaseTime.to_list"]], "to_ndarray() (arkouda.timeclass._abstractbasetime method)": [[34, "arkouda.timeclass._AbstractBaseTime.to_ndarray"]], "to_pandas() (arkouda.timeclass.datetime method)": [[34, "arkouda.timeclass.Datetime.to_pandas"]], "to_pandas() (arkouda.timeclass.timedelta method)": [[34, "arkouda.timeclass.Timedelta.to_pandas"]], "total_seconds() (arkouda.timeclass.timedelta method)": [[34, "arkouda.timeclass.Timedelta.total_seconds"]], "week (arkouda.timeclass.datetime property)": [[34, "arkouda.timeclass.Datetime.week"]], "weekday (arkouda.timeclass.datetime property)": [[34, "arkouda.timeclass.Datetime.weekday"]], "weekofyear (arkouda.timeclass.datetime property)": [[34, "arkouda.timeclass.Datetime.weekofyear"]], "year (arkouda.timeclass.datetime property)": [[34, "arkouda.timeclass.Datetime.year"]], "arkouda.util": [[35, "module-arkouda.util"]], "attach() (in module arkouda.util)": [[35, "arkouda.util.attach"]], "attach_all() (in module arkouda.util)": [[35, "arkouda.util.attach_all"]], "concatenate() (in module arkouda.util)": [[35, "arkouda.util.concatenate"]], "convert_if_categorical() (in module arkouda.util)": [[35, "arkouda.util.convert_if_categorical"]], "enrich_inplace() (in module arkouda.util)": [[35, "arkouda.util.enrich_inplace"]], "expand() (in module arkouda.util)": [[35, "arkouda.util.expand"]], "generic_concat() (in module arkouda.util)": [[35, "arkouda.util.generic_concat"]], "get_callback() (in module arkouda.util)": [[35, "arkouda.util.get_callback"]], "identity() (in module arkouda.util)": [[35, "arkouda.util.identity"]], "invert_permutation() (in module arkouda.util)": [[35, "arkouda.util.invert_permutation"]], "most_common() (in module arkouda.util)": [[35, "arkouda.util.most_common"]], "register() (in module arkouda.util)": [[35, "arkouda.util.register"]], "register_all() (in module arkouda.util)": [[35, "arkouda.util.register_all"]], "report_mem() (in module arkouda.util)": [[35, "arkouda.util.report_mem"]], "unregister_all() (in module arkouda.util)": [[35, "arkouda.util.unregister_all"]], "unregister_by_name() (in module arkouda.util)": [[35, "arkouda.util.unregister_by_name"]], "to_ndarray() (in module arkouda.strings)": [[56, "arkouda.Strings.to_ndarray"], [72, "arkouda.Strings.to_ndarray"]], "to_ndarray() (in module arkouda.pdarray)": [[56, "arkouda.pdarray.to_ndarray"], [67, "arkouda.pdarray.to_ndarray"]], "argsort() (in module arkouda.index)": [[57, "arkouda.Index.argsort"]], "argsort() (in module arkouda.multiindex)": [[57, "arkouda.MultiIndex.argsort"]], "concat() (in module arkouda.index)": [[57, "arkouda.Index.concat"]], "concat() (in module arkouda.multiindex)": [[57, "arkouda.MultiIndex.concat"]], "lookup() (in module arkouda.index)": [[57, "arkouda.Index.lookup"]], "lookup() (in module arkouda.multiindex)": [[57, "arkouda.MultiIndex.lookup"]], "set_dtype() (in module arkouda.index)": [[57, "arkouda.Index.set_dtype"]], "set_dtype() (in module arkouda.multiindex)": [[57, "arkouda.MultiIndex.set_dtype"]], "to_ndarray() (in module arkouda.arrayview)": [[60, "arkouda.ArrayView.to_ndarray"]], "categorical (class in arkouda)": [[61, "arkouda.Categorical"]], "categories (arkouda.categorical attribute)": [[61, "arkouda.Categorical.categories"]], "codes (arkouda.categorical attribute)": [[61, "arkouda.Categorical.codes"]], "contains() (arkouda.categorical method)": [[61, "arkouda.Categorical.contains"]], "endswith() (arkouda.categorical method)": [[61, "arkouda.Categorical.endswith"]], "from_codes() (arkouda.categorical class method)": [[61, "arkouda.Categorical.from_codes"]], "ndim (arkouda.categorical attribute)": [[61, "arkouda.Categorical.ndim"]], "nlevels (arkouda.categorical attribute)": [[61, "arkouda.Categorical.nlevels"]], "permutation (arkouda.categorical attribute)": [[61, "arkouda.Categorical.permutation"]], "segments (arkouda.categorical attribute)": [[61, "arkouda.Categorical.segments"]], "shape (arkouda.categorical attribute)": [[61, "arkouda.Categorical.shape"]], "size (arkouda.categorical attribute)": [[61, "arkouda.Categorical.size"]], "startswith() (arkouda.categorical method)": [[61, "arkouda.Categorical.startswith"]], "to_ndarray() (in module arkouda.categorical)": [[61, "arkouda.Categorical.to_ndarray"]], "apply_permutation() (in module arkouda.dataframe)": [[63, "arkouda.DataFrame.apply_permutation"]], "argsort() (in module arkouda.dataframe)": [[63, "arkouda.DataFrame.argsort"]], "coargsort() (in module arkouda.dataframe)": [[63, "arkouda.DataFrame.coargsort"]], "concat() (in module arkouda.dataframe)": [[63, "arkouda.DataFrame.concat"]], "copy() (in module arkouda.dataframe)": [[63, "arkouda.DataFrame.copy"]], "drop() (in module arkouda.dataframe)": [[63, "arkouda.DataFrame.drop"]], "drop_duplicates() (in module arkouda.dataframe)": [[63, "arkouda.DataFrame.drop_duplicates"]], "groupby() (in module arkouda.dataframe)": [[63, "arkouda.DataFrame.groupby"]], "head() (in module arkouda.dataframe)": [[63, "arkouda.DataFrame.head"]], "rename() (in module arkouda.dataframe)": [[63, "arkouda.DataFrame.rename"]], "reset_index() (in module arkouda.dataframe)": [[63, "arkouda.DataFrame.reset_index"]], "sort_values() (in module arkouda.dataframe)": [[63, "arkouda.DataFrame.sort_values"]], "tail() (in module arkouda.dataframe)": [[63, "arkouda.DataFrame.tail"]], "to_pandas() (in module arkouda.dataframe)": [[63, "arkouda.DataFrame.to_pandas"]], "and() (arkouda.groupby method)": [[64, "arkouda.GroupBy.AND"]], "groupby (class in arkouda)": [[64, "arkouda.GroupBy"]], "or() (arkouda.groupby method)": [[64, "arkouda.GroupBy.OR"]], "xor() (arkouda.groupby method)": [[64, "arkouda.GroupBy.XOR"]], "aggregate() (arkouda.groupby method)": [[64, "arkouda.GroupBy.aggregate"]], "all() (arkouda.groupby method)": [[64, "arkouda.GroupBy.all"]], "any() (arkouda.groupby method)": [[64, "arkouda.GroupBy.any"]], "argmax() (arkouda.groupby method)": [[64, "arkouda.GroupBy.argmax"]], "argmin() (arkouda.groupby method)": [[64, "arkouda.GroupBy.argmin"]], "attach() (arkouda.groupby static method)": [[64, "arkouda.GroupBy.attach"]], "broadcast() (arkouda.groupby method)": [[64, "arkouda.GroupBy.broadcast"]], "build_from_components() (arkouda.groupby static method)": [[64, "arkouda.GroupBy.build_from_components"]], "count() (arkouda.groupby method)": [[64, "arkouda.GroupBy.count"]], "first() (arkouda.groupby method)": [[64, "arkouda.GroupBy.first"]], "is_registered() (arkouda.groupby method)": [[64, "arkouda.GroupBy.is_registered"]], "logger (arkouda.groupby attribute)": [[64, "arkouda.GroupBy.logger"]], "max() (arkouda.groupby method)": [[64, "arkouda.GroupBy.max"]], "mean() (arkouda.groupby method)": [[64, "arkouda.GroupBy.mean"]], "median() (arkouda.groupby method)": [[64, "arkouda.GroupBy.median"]], "min() (arkouda.groupby method)": [[64, "arkouda.GroupBy.min"]], "mode() (arkouda.groupby method)": [[64, "arkouda.GroupBy.mode"]], "most_common() (arkouda.groupby method)": [[64, "arkouda.GroupBy.most_common"]], "ngroups (arkouda.groupby attribute)": [[64, "arkouda.GroupBy.ngroups"]], "nkeys (arkouda.groupby attribute)": [[64, "arkouda.GroupBy.nkeys"]], "nunique() (arkouda.groupby method)": [[64, "arkouda.GroupBy.nunique"]], "permutation (arkouda.groupby attribute)": [[64, "arkouda.GroupBy.permutation"]], "prod() (arkouda.groupby method)": [[64, "arkouda.GroupBy.prod"]], "register() (arkouda.groupby method)": [[64, "arkouda.GroupBy.register"]], "segments (arkouda.groupby attribute)": [[64, "arkouda.GroupBy.segments"]], "size (arkouda.groupby attribute)": [[64, "arkouda.GroupBy.size"]], "size() (arkouda.groupby method)": [[64, "id0"]], "std() (arkouda.groupby method)": [[64, "arkouda.GroupBy.std"]], "sum() (arkouda.groupby method)": [[64, "arkouda.GroupBy.sum"]], "unique() (arkouda.groupby method)": [[64, "arkouda.GroupBy.unique"]], "unique_keys (arkouda.groupby attribute)": [[64, "arkouda.GroupBy.unique_keys"]], "unregister() (arkouda.groupby method)": [[64, "arkouda.GroupBy.unregister"]], "unregister_groupby_by_name() (arkouda.groupby static method)": [[64, "arkouda.GroupBy.unregister_groupby_by_name"]], "var() (arkouda.groupby method)": [[64, "arkouda.GroupBy.var"]], "append() (in module arkouda.segarray)": [[68, "arkouda.SegArray.append"]], "append_single() (in module arkouda.segarray)": [[68, "arkouda.SegArray.append_single"]], "get_jth() (in module arkouda.segarray)": [[68, "arkouda.SegArray.get_jth"]], "get_length_n() (in module arkouda.segarray)": [[68, "arkouda.SegArray.get_length_n"]], "get_ngrams() (in module arkouda.segarray)": [[68, "arkouda.SegArray.get_ngrams"]], "get_prefixes() (in module arkouda.segarray)": [[68, "arkouda.SegArray.get_prefixes"]], "get_suffixes() (in module arkouda.segarray)": [[68, "arkouda.SegArray.get_suffixes"]], "intersect() (in module arkouda.segarray)": [[68, "arkouda.SegArray.intersect"]], "prepend_single() (in module arkouda.segarray)": [[68, "arkouda.SegArray.prepend_single"]], "remove_repeats() (in module arkouda.segarray)": [[68, "arkouda.SegArray.remove_repeats"]], "set_jth() (in module arkouda.segarray)": [[68, "arkouda.SegArray.set_jth"]], "setdiff() (in module arkouda.segarray)": [[68, "arkouda.SegArray.setdiff"]], "setxor() (in module arkouda.segarray)": [[68, "arkouda.SegArray.setxor"]], "to_ndarray() (in module arkouda.segarray)": [[68, "arkouda.SegArray.to_ndarray"]], "union() (in module arkouda.segarray)": [[68, "arkouda.SegArray.union"]], "head() (in module arkouda.series)": [[69, "arkouda.Series.head"]], "locate() (in module arkouda.series)": [[69, "arkouda.Series.locate"], [69, "id0"]], "pdconcat() (in module arkouda.series)": [[69, "arkouda.Series.pdconcat"]], "sort_index() (in module arkouda.series)": [[69, "arkouda.Series.sort_index"]], "sort_values() (in module arkouda.series)": [[69, "arkouda.Series.sort_values"]], "tail() (in module arkouda.series)": [[69, "arkouda.Series.tail"]], "to_pandas() (in module arkouda.series)": [[69, "arkouda.Series.to_pandas"]], "topn() (in module arkouda.series)": [[69, "arkouda.Series.topn"]], "value_counts() (in module arkouda.series)": [[69, "arkouda.Series.value_counts"]], "unique() (in module arkouda)": [[70, "arkouda.unique"]], "connect() (in module arkouda)": [[71, "arkouda.connect"]]}})