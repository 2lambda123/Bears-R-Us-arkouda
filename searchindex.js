Search.setIndex({"docnames": ["CONTRIBUTING_LINK", "ENVIRONMENT", "autoapi/arkouda/accessor/index", "autoapi/arkouda/alignment/index", "autoapi/arkouda/array_api/_array_object/index", "autoapi/arkouda/array_api/_constants/index", "autoapi/arkouda/array_api/_creation_functions/index", "autoapi/arkouda/array_api/_data_type_functions/index", "autoapi/arkouda/array_api/_dtypes/index", "autoapi/arkouda/array_api/_elementwise_functions/index", "autoapi/arkouda/array_api/_indexing_functions/index", "autoapi/arkouda/array_api/_manipulation_functions/index", "autoapi/arkouda/array_api/_searching_functions/index", "autoapi/arkouda/array_api/_set_functions/index", "autoapi/arkouda/array_api/_sorting_functions/index", "autoapi/arkouda/array_api/_statistical_functions/index", "autoapi/arkouda/array_api/_typing/index", "autoapi/arkouda/array_api/_utility_functions/index", "autoapi/arkouda/array_api/index", "autoapi/arkouda/array_api/linalg/index", "autoapi/arkouda/array_view/index", "autoapi/arkouda/categorical/index", "autoapi/arkouda/client/index", "autoapi/arkouda/client_dtypes/index", "autoapi/arkouda/dataframe/index", "autoapi/arkouda/dtypes/index", "autoapi/arkouda/groupbyclass/index", "autoapi/arkouda/history/index", "autoapi/arkouda/index", "autoapi/arkouda/index/index", "autoapi/arkouda/infoclass/index", "autoapi/arkouda/io/index", "autoapi/arkouda/io_util/index", "autoapi/arkouda/join/index", "autoapi/arkouda/logger/index", "autoapi/arkouda/match/index", "autoapi/arkouda/matcher/index", "autoapi/arkouda/numeric/index", "autoapi/arkouda/numpy/char/index", "autoapi/arkouda/numpy/index", "autoapi/arkouda/pdarrayclass/index", "autoapi/arkouda/pdarraycreation/index", "autoapi/arkouda/pdarraysetops/index", "autoapi/arkouda/plotting/index", "autoapi/arkouda/random/_generator/index", "autoapi/arkouda/random/_legacy/index", "autoapi/arkouda/random/index", "autoapi/arkouda/row/index", "autoapi/arkouda/scipy/_stats_py/index", "autoapi/arkouda/scipy/index", "autoapi/arkouda/scipy/special/_math/index", "autoapi/arkouda/scipy/special/index", "autoapi/arkouda/security/index", "autoapi/arkouda/segarray/index", "autoapi/arkouda/series/index", "autoapi/arkouda/sorting/index", "autoapi/arkouda/strings/index", "autoapi/arkouda/timeclass/index", "autoapi/arkouda/util/index", "autoapi/index", "developer/ADDING_FEATURES", "developer/BENCHMARK", "developer/GASNET", "developer/MEMORY", "developer/RELEASE_PROCESS", "developer/TIPS", "developer/USER_BUGS", "developer/dev_menu", "examples", "file_io/CSV", "file_io/HDF5", "file_io/IMPORT_EXPORT", "file_io/PARQUET", "file_io/io_menu", "index", "quickstart", "server/index", "setup/BUILD", "setup/LINUX_INSTALL", "setup/MAC_INSTALL", "setup/MODULAR", "setup/REQUIREMENTS", "setup/WINDOWS_INSTALL", "setup/install_menu", "setup/testing", "usage", "usage/IO", "usage/Index", "usage/argsort", "usage/arithmetic", "usage/arrayview", "usage/categorical", "usage/creation", "usage/dataframe", "usage/groupby", "usage/histogram", "usage/indexing", "usage/pdarray", "usage/random", "usage/segarray", "usage/series", "usage/setops", "usage/startup", "usage/strings"], "filenames": ["CONTRIBUTING_LINK.md", "ENVIRONMENT.md", "autoapi/arkouda/accessor/index.rst", "autoapi/arkouda/alignment/index.rst", "autoapi/arkouda/array_api/_array_object/index.rst", "autoapi/arkouda/array_api/_constants/index.rst", "autoapi/arkouda/array_api/_creation_functions/index.rst", "autoapi/arkouda/array_api/_data_type_functions/index.rst", "autoapi/arkouda/array_api/_dtypes/index.rst", "autoapi/arkouda/array_api/_elementwise_functions/index.rst", "autoapi/arkouda/array_api/_indexing_functions/index.rst", "autoapi/arkouda/array_api/_manipulation_functions/index.rst", "autoapi/arkouda/array_api/_searching_functions/index.rst", "autoapi/arkouda/array_api/_set_functions/index.rst", "autoapi/arkouda/array_api/_sorting_functions/index.rst", "autoapi/arkouda/array_api/_statistical_functions/index.rst", "autoapi/arkouda/array_api/_typing/index.rst", "autoapi/arkouda/array_api/_utility_functions/index.rst", "autoapi/arkouda/array_api/index.rst", "autoapi/arkouda/array_api/linalg/index.rst", "autoapi/arkouda/array_view/index.rst", "autoapi/arkouda/categorical/index.rst", "autoapi/arkouda/client/index.rst", "autoapi/arkouda/client_dtypes/index.rst", "autoapi/arkouda/dataframe/index.rst", "autoapi/arkouda/dtypes/index.rst", "autoapi/arkouda/groupbyclass/index.rst", "autoapi/arkouda/history/index.rst", "autoapi/arkouda/index.rst", "autoapi/arkouda/index/index.rst", "autoapi/arkouda/infoclass/index.rst", "autoapi/arkouda/io/index.rst", "autoapi/arkouda/io_util/index.rst", "autoapi/arkouda/join/index.rst", "autoapi/arkouda/logger/index.rst", "autoapi/arkouda/match/index.rst", "autoapi/arkouda/matcher/index.rst", "autoapi/arkouda/numeric/index.rst", "autoapi/arkouda/numpy/char/index.rst", "autoapi/arkouda/numpy/index.rst", "autoapi/arkouda/pdarrayclass/index.rst", "autoapi/arkouda/pdarraycreation/index.rst", "autoapi/arkouda/pdarraysetops/index.rst", "autoapi/arkouda/plotting/index.rst", "autoapi/arkouda/random/_generator/index.rst", "autoapi/arkouda/random/_legacy/index.rst", "autoapi/arkouda/random/index.rst", "autoapi/arkouda/row/index.rst", "autoapi/arkouda/scipy/_stats_py/index.rst", "autoapi/arkouda/scipy/index.rst", "autoapi/arkouda/scipy/special/_math/index.rst", "autoapi/arkouda/scipy/special/index.rst", "autoapi/arkouda/security/index.rst", "autoapi/arkouda/segarray/index.rst", "autoapi/arkouda/series/index.rst", "autoapi/arkouda/sorting/index.rst", "autoapi/arkouda/strings/index.rst", "autoapi/arkouda/timeclass/index.rst", "autoapi/arkouda/util/index.rst", "autoapi/index.rst", "developer/ADDING_FEATURES.md", "developer/BENCHMARK.md", "developer/GASNET.md", "developer/MEMORY.md", "developer/RELEASE_PROCESS.md", "developer/TIPS.md", "developer/USER_BUGS.md", "developer/dev_menu.rst", "examples.rst", "file_io/CSV.md", "file_io/HDF5.md", "file_io/IMPORT_EXPORT.md", "file_io/PARQUET.md", "file_io/io_menu.rst", "index.rst", "quickstart.rst", "server/index.rst", "setup/BUILD.md", "setup/LINUX_INSTALL.md", "setup/MAC_INSTALL.md", "setup/MODULAR.md", "setup/REQUIREMENTS.md", "setup/WINDOWS_INSTALL.md", "setup/install_menu.rst", "setup/testing.rst", "usage.rst", "usage/IO.rst", "usage/Index.rst", "usage/argsort.rst", "usage/arithmetic.rst", "usage/arrayview.rst", "usage/categorical.rst", "usage/creation.rst", "usage/dataframe.rst", "usage/groupby.rst", "usage/histogram.rst", "usage/indexing.rst", "usage/pdarray.rst", "usage/random.rst", "usage/segarray.rst", "usage/series.rst", "usage/setops.rst", "usage/startup.rst", "usage/strings.rst"], "titles": ["Contributing", "Environment Variables", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.accessor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.alignment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._array_object</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._constants</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._creation_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._data_type_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._dtypes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._elementwise_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._indexing_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._manipulation_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._searching_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._set_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._sorting_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._statistical_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._typing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api._utility_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_api.linalg</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_view</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.categorical</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.client</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.client_dtypes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.dataframe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.dtypes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.groupbyclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.index</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.infoclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.io</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.io_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.join</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.match</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.numeric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.numpy.char</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.numpy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.pdarrayclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.pdarraycreation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.pdarraysetops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.plotting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.random._generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.random._legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.row</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.scipy._stats_py</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.scipy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.scipy.special._math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.scipy.special</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.security</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.segarray</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.series</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.sorting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.strings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.timeclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.util</span></code>", "API Reference", "Adding Your First Feature", "PyTest Benchmarks", "GASNet Development", "Reducing Memory Usage of Arkouda Builds", "Release Process", "Speeding up Arkouda Compilation", "Tips for Reproducing User Bugs", "Developer Documentation", "Examples", "CSV", "HDF5", "Import/Export", "Parquet", "File I/O", "Arkouda Documentation", "Quickstart", "Chapel API Reference", "Building the Server", "Linux", "MacOS", "Modular Server Builds", "Requirements", "Windows (WSL2)", "Installation", "Performance Testing", "Usage Guide", "Data I/O", "Indexs in Arkouda", "Sorting", "Arithmetic and Numeric Operations", "ArrayView in Arkouda", "Categoricals", "Creating Arrays", "DataFrames in Arkouda", "GroupBy", "Summarizing Data", "Indexing and Assignment", "The <code class=\"docutils literal notranslate\"><span class=\"pre\">pdarray</span></code> class", "Random in Arkouda", "SegArrays in Arkouda", "Series in Arkouda", "Array Set Operations", "Startup", "Strings in Arkouda"], "terms": {"i": [0, 1, 3, 4, 7, 16, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 75, 77, 78, 79, 80, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "an": [0, 1, 3, 4, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 41, 42, 44, 45, 46, 47, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 68, 69, 70, 71, 72, 75, 78, 82, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "open": [0, 3, 21, 24, 28, 29, 31, 32, 40, 44, 46, 53, 54, 56, 57, 82, 98], "sourc": [0, 1, 2, 3, 4, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 70, 75, 77, 78, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103], "project": [0, 24, 28, 54, 61, 64, 77], "we": [0, 1, 4, 24, 28, 29, 31, 37, 40, 44, 46, 56, 58, 60, 61, 62, 64, 66, 68, 69, 72, 77, 78, 79, 81, 82, 95, 97, 98], "love": 0, "see": [0, 1, 3, 4, 7, 9, 10, 11, 14, 16, 17, 24, 26, 28, 37, 40, 43, 44, 46, 54, 56, 57, 58, 60, 61, 64, 65, 66, 75, 77, 80, 86, 89, 91, 94, 95, 97, 98, 99, 100, 101, 103], "new": [0, 20, 21, 24, 26, 28, 29, 31, 32, 34, 35, 36, 37, 40, 43, 44, 53, 54, 56, 58, 60, 64, 65, 66, 81, 93, 94, 97, 98, 99, 100, 103], "contributor": [0, 28, 48, 49], "welcom": 0, "via": [0, 1, 21, 24, 26, 28, 40, 41, 56, 60, 77, 78, 79, 86, 91, 94, 96, 97, 98, 103], "most": [0, 1, 23, 26, 28, 36, 54, 56, 61, 63, 64, 68, 70, 75, 77, 79, 82, 86, 92, 94, 97, 100, 103], "fall": [0, 58], "under": [0, 2, 20, 21, 23, 24, 26, 28, 29, 31, 40, 41, 53, 54, 56, 57, 61, 64, 86, 90, 91, 94, 97, 103], "broad": 0, "categori": [0, 21, 28, 55, 64, 70, 85, 88, 91], "If": [0, 1, 3, 20, 21, 22, 23, 24, 26, 28, 29, 31, 32, 35, 36, 37, 40, 41, 42, 44, 46, 53, 54, 56, 57, 58, 60, 62, 63, 64, 65, 69, 70, 72, 75, 77, 78, 79, 80, 82, 83, 86, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103], "your": [0, 1, 24, 28, 29, 31, 40, 56, 62, 63, 64, 66, 67, 75, 77, 78, 79, 80, 81, 82, 83, 93, 102, 103], "doesn": [0, 64, 77], "t": [0, 4, 16, 24, 28, 31, 56, 57, 60, 64, 65, 66, 77, 78, 79, 82, 84, 103], "fit": [0, 61, 64, 86], "either": [0, 21, 26, 28, 30, 31, 37, 40, 41, 42, 45, 46, 53, 54, 80, 82, 86, 99, 100, 101], "pleas": [0, 21, 23, 24, 26, 28, 29, 31, 40, 53, 54, 56, 57, 62, 64, 65, 68, 70, 72, 73, 77, 78, 79, 80, 91, 93, 94], "add": [0, 1, 9, 20, 21, 24, 26, 28, 31, 44, 46, 53, 54, 60, 64, 77, 78, 79, 80, 82, 93, 94, 98], "anywai": [0, 92], "provid": [0, 7, 20, 21, 24, 26, 28, 29, 31, 40, 44, 46, 53, 54, 56, 58, 61, 63, 68, 69, 70, 72, 73, 77, 78, 79, 81, 86, 89, 93, 94, 98, 99], "much": [0, 3, 20, 21, 24, 28, 31, 40, 53, 56, 63, 68, 70, 86, 90, 91, 97, 103], "detail": [0, 7, 16, 28, 30, 40, 61, 64, 77, 78, 79, 81, 95, 102, 103], "possibl": [0, 24, 28, 31, 37, 53, 56, 57, 60, 61, 64, 68, 77, 82, 86, 99, 103], "It": [0, 4, 23, 24, 28, 40, 52, 53, 58, 62, 63, 66, 68, 69, 70, 72, 75, 77, 78, 79, 82, 93, 94, 99], "alwai": [0, 26, 28, 31, 40, 57, 69, 86, 89, 91, 93, 94, 95, 97, 103], "good": [0, 64, 66], "idea": [0, 64, 66, 69, 86], "current": [0, 20, 21, 22, 24, 26, 28, 29, 30, 31, 37, 40, 41, 44, 46, 52, 56, 63, 64, 65, 69, 70, 71, 72, 78, 79, 83, 86, 87, 89, 91, 92, 93, 94, 95, 97, 98, 99, 102, 103], "list": [0, 3, 4, 6, 11, 16, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 37, 40, 41, 42, 43, 53, 54, 56, 57, 58, 60, 61, 62, 64, 65, 66, 68, 69, 73, 75, 77, 79, 80, 83, 86, 87, 92, 93, 94, 95, 96, 97, 99, 100, 101, 103], "make": [0, 1, 21, 23, 24, 28, 37, 44, 46, 54, 57, 60, 61, 62, 63, 64, 66, 75, 77, 78, 79, 80, 82, 91, 93, 98], "sure": [0, 24, 28, 29, 31, 40, 56, 64, 82], "alreadi": [0, 1, 21, 24, 26, 28, 29, 31, 40, 53, 54, 56, 57, 65, 69, 70, 72, 77, 91, 94, 101], "present": [0, 3, 21, 23, 24, 28, 29, 31, 37, 40, 42, 53, 54, 56, 68, 70, 86, 95, 101], "us": [0, 1, 3, 4, 16, 21, 22, 23, 24, 26, 27, 28, 29, 31, 34, 37, 40, 41, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 67, 69, 70, 71, 72, 78, 79, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "github": [0, 28, 48, 49, 64, 66, 77, 78, 79, 83], "markdown": [0, 24, 28, 54], "especi": [0, 21, 24, 28, 66, 79, 91], "block": [0, 21, 28, 42, 56, 60, 68, 75, 92], "veri": [0, 24, 28, 68, 92, 93], "appreci": 0, "when": [0, 1, 3, 20, 21, 23, 24, 26, 28, 29, 31, 37, 40, 42, 53, 54, 56, 57, 58, 60, 61, 64, 65, 66, 68, 70, 72, 75, 77, 79, 80, 81, 82, 86, 89, 91, 93, 94, 97, 99, 101], "includ": [0, 1, 3, 24, 26, 28, 29, 30, 31, 37, 40, 54, 56, 57, 60, 61, 64, 69, 70, 75, 77, 78, 80, 86, 89, 93, 94, 97, 99], "follow": [0, 1, 3, 22, 28, 37, 48, 49, 60, 61, 62, 64, 75, 77, 78, 79, 80, 81, 82, 83, 89, 91, 94, 97, 99, 101, 102, 103], "inform": [0, 1, 4, 7, 9, 10, 11, 14, 16, 17, 21, 22, 26, 28, 30, 40, 44, 46, 56, 61, 64, 65, 66, 68, 69, 70, 72, 73, 75, 77, 78, 79, 80, 81, 91, 98, 99, 101, 103], "summari": [0, 24, 28], "problem": [0, 61, 75, 84], "what": [0, 25, 28, 44, 53, 60, 64, 65, 66, 80, 98, 102], "behavior": [0, 4, 24, 28, 40, 41, 44, 45, 46, 89, 90, 92, 93, 98, 103], "did": [0, 22], "you": [0, 1, 21, 23, 24, 26, 28, 29, 31, 40, 53, 54, 56, 57, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 75, 77, 78, 79, 80, 81, 82, 83, 93, 94, 96], "observ": [0, 28, 40, 48, 49, 89], "encount": [0, 28, 31], "expect": [0, 20, 24, 26, 28, 29, 31, 40, 48, 49, 56, 61, 70, 78, 79, 86, 90, 94, 97], "thi": [0, 1, 4, 16, 20, 21, 22, 23, 24, 26, 28, 29, 31, 34, 37, 40, 41, 43, 44, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 75, 77, 78, 79, 80, 82, 83, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103], "known": [0, 28, 37], "work": [0, 21, 24, 28, 31, 40, 42, 47, 56, 65, 68, 70, 72, 75, 78, 79, 80, 86, 91, 93, 96, 101, 103], "around": [0, 4, 16, 23, 28, 64, 66], "step": [0, 6, 26, 28, 61, 62, 63, 66, 77, 80, 83, 101, 102], "reproduc": [0, 28, 44, 45, 46, 67, 92, 98], "simplifi": [0, 61], "program": [0, 21, 23, 24, 26, 28, 29, 40, 53, 54, 56, 57, 75, 94, 102], "demonstr": [0, 60], "configur": [0, 1, 61, 68, 75, 79, 82, 87, 93, 100], "": [0, 1, 2, 3, 20, 21, 22, 24, 25, 26, 28, 29, 30, 31, 32, 37, 40, 52, 53, 54, 56, 57, 58, 60, 63, 64, 68, 77, 78, 79, 82, 83, 84, 86, 89, 90, 91, 93, 94, 95, 97, 99, 100, 102, 103], "output": [0, 1, 20, 21, 23, 24, 26, 28, 29, 31, 37, 40, 44, 46, 53, 54, 56, 64, 68, 72, 75, 86, 89, 94, 95, 97, 98, 101, 102], "ak": [0, 1, 3, 9, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 35, 37, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 60, 65, 66, 68, 69, 75, 77, 80, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103], "get_config": [0, 22], "like": [0, 2, 3, 23, 24, 26, 28, 40, 44, 46, 57, 62, 64, 65, 66, 68, 71, 75, 77, 80, 86, 87, 93, 94, 96, 98, 100, 102, 103], "arkoudavers": 0, "version": [0, 21, 24, 28, 48, 49, 58, 61, 64, 70, 75, 77, 78, 79, 81, 82], "server": [0, 1, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 34, 35, 40, 41, 44, 45, 46, 52, 53, 54, 56, 57, 63, 65, 66, 78, 79, 82, 84, 85, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 103], "wa": [0, 20, 21, 23, 24, 26, 28, 29, 31, 37, 40, 53, 54, 56, 57, 65, 70, 71, 77, 79, 86, 94, 97, 99], "built": [0, 20, 21, 28, 40, 56, 62, 64, 65, 66, 75, 77, 79, 80, 86, 90, 91, 97, 103], "Be": [0, 24, 28, 29, 31, 40, 56, 60], "specif": [0, 4, 16, 24, 28, 31, 44, 46, 66, 69, 70, 71, 78, 80, 85, 86, 93, 98], "exampl": [0, 3, 16, 20, 21, 22, 24, 26, 28, 29, 31, 35, 37, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 61, 64, 70, 75, 77, 79, 80, 82, 86, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103], "appropri": [0, 24, 28, 31, 60, 64, 71, 75, 77, 81, 86], "base": [0, 1, 2, 3, 4, 13, 16, 20, 21, 23, 24, 27, 28, 29, 31, 34, 37, 40, 44, 47, 48, 49, 55, 57, 58, 64, 77, 79, 83, 85, 86, 87, 88, 89, 90, 91, 93, 97, 98, 100, 103], "anoth": [0, 24, 26, 28, 31, 37, 40, 56, 70, 75, 79, 82, 86, 93, 94, 96, 97, 99, 103], "librari": [0, 1, 60, 82, 103], "e": [0, 1, 2, 3, 5, 21, 23, 24, 26, 28, 31, 37, 40, 41, 53, 54, 56, 57, 60, 64, 65, 66, 78, 79, 81, 86, 89, 91, 92, 94, 99, 102, 103], "numpi": [0, 4, 16, 20, 21, 23, 25, 26, 28, 29, 33, 37, 40, 41, 44, 46, 48, 49, 50, 51, 53, 54, 56, 57, 59, 60, 61, 68, 81, 84, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 101, 103], "panda": [0, 24, 28, 29, 31, 41, 54, 57, 60, 71, 73, 81, 86, 87, 91, 93], "scipi": [0, 28, 59, 81], "link": [0, 1, 28, 31, 57, 64, 77, 78], "support": [0, 21, 23, 24, 25, 26, 28, 29, 31, 32, 37, 40, 41, 42, 44, 52, 53, 54, 56, 57, 60, 68, 71, 75, 78, 79, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103], "document": [0, 1, 59, 60, 61, 65, 66, 68, 73, 79, 80], "refer": [0, 24, 26, 28, 48, 49, 54, 65, 68, 77, 79, 81, 94], "don": [0, 24, 28, 31, 56, 65, 66, 82], "have": [0, 1, 3, 21, 24, 26, 28, 29, 31, 37, 40, 41, 42, 43, 44, 45, 46, 50, 51, 53, 54, 56, 57, 58, 60, 63, 64, 65, 66, 68, 69, 70, 72, 77, 78, 79, 80, 81, 86, 89, 91, 92, 93, 94, 97, 98, 99, 100], "anyth": [0, 28, 40, 64], "mind": [0, 16, 68, 82], "check": [0, 1, 3, 16, 20, 21, 24, 26, 28, 29, 31, 37, 40, 53, 56, 58, 60, 64, 65, 66, 84, 91, 101, 102, 103], "out": [0, 15, 22, 24, 28, 37, 53, 65, 66, 69, 70, 72, 77, 80, 95, 96, 99], "our": [0, 28, 40, 60, 61, 63, 64, 68, 70, 75, 77, 82, 83, 86], "outstand": 0, "filter": [0, 24, 27, 28, 53, 86], "label": [0, 21, 24, 26, 28, 29, 43, 54, 91, 93, 94, 100], "first": [0, 3, 24, 26, 28, 31, 32, 37, 40, 41, 42, 54, 56, 58, 62, 66, 67, 68, 69, 70, 75, 77, 78, 80, 85, 86, 89, 92, 93, 94, 95, 100, 103], "identifi": [0, 3, 21, 28, 31, 40, 97], "befor": [0, 28, 57, 61, 77, 86], "start": [0, 3, 4, 6, 16, 21, 24, 26, 28, 29, 33, 35, 40, 41, 53, 54, 55, 56, 57, 70, 85, 88, 91, 92, 94, 96, 99, 103], "onc": [0, 24, 28, 31, 40, 54, 56, 62, 63, 64, 66, 68, 69, 72, 77, 82], "find": [0, 3, 21, 24, 26, 28, 36, 40, 42, 52, 54, 56, 58, 61, 64, 67, 78, 89, 94, 95, 101, 103], "creat": [0, 20, 21, 23, 24, 26, 28, 29, 31, 32, 36, 40, 41, 43, 53, 54, 56, 57, 59, 60, 61, 64, 66, 70, 72, 75, 77, 78, 79, 80, 81, 82, 85, 86, 90, 91, 93, 94, 95, 97, 98], "intend": [0, 21, 23, 24, 28, 37, 40, 53, 56, 69, 75, 78, 79, 87, 93, 100], "leav": [0, 28, 37, 95], "comment": [0, 65, 80], "indic": [0, 3, 7, 10, 13, 20, 21, 22, 23, 24, 26, 28, 29, 31, 33, 35, 37, 40, 42, 53, 54, 55, 56, 57, 58, 68, 70, 88, 89, 90, 91, 93, 94, 95, 96, 97, 99, 100, 101, 103], "mention": [0, 66], "bear": [0, 64, 78, 79], "r": [0, 24, 28, 61, 64, 68, 78, 79, 84], "u": [0, 23, 28, 41, 57, 64, 78, 79, 86], "dev": [0, 78, 79, 81], "awar": 0, "assign": [0, 21, 24, 26, 28, 54, 69, 70, 85, 91, 94, 99, 103], "avoid": [0, 63, 66], "anyon": 0, "duplic": [0, 24, 28, 93], "need": [0, 4, 21, 24, 28, 31, 40, 53, 54, 56, 60, 61, 64, 65, 66, 69, 77, 78, 79, 80, 82, 86, 93, 100], "assist": [0, 80], "want": [0, 1, 24, 28, 75, 79, 81, 93], "discuss": 0, "design": [0, 64, 86], "someon": [0, 64], "tag": [0, 28, 31, 34, 64, 66], "reach": 0, "git": [0, 66, 78, 79], "fork": [0, 77, 78, 79, 83], "workflow": [0, 28, 31, 58, 64, 80, 86], "recommend": [0, 28, 37, 44, 46, 62, 66, 72, 78, 81, 82, 83, 93, 98, 99], "simpl": [0, 16, 68, 80, 95], "branch": [0, 60, 61, 64, 77], "own": [0, 1, 28, 57, 99, 103], "standard": [0, 4, 21, 26, 28, 40, 41, 44, 45, 46, 57, 60, 61, 62, 89, 94, 95, 98], "laid": 0, "pep8": 0, "continu": [0, 64], "integr": [0, 26, 28, 31, 40, 41, 45, 46, 64, 86, 92, 94], "ha": [0, 4, 21, 23, 24, 26, 28, 29, 31, 37, 40, 41, 42, 53, 54, 56, 57, 58, 62, 64, 65, 69, 70, 80, 86, 89, 91, 92, 93, 94, 96, 97, 99, 100], "linter": 0, "flake8": [0, 81], "verifi": [0, 1, 24, 28, 71, 86, 93], "all": [0, 3, 4, 16, 17, 20, 21, 22, 24, 26, 28, 29, 30, 31, 34, 35, 36, 37, 40, 41, 42, 43, 44, 46, 53, 56, 57, 58, 60, 61, 64, 65, 66, 69, 70, 72, 75, 78, 79, 80, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103], "meet": 0, "requir": [0, 3, 4, 16, 22, 24, 26, 28, 29, 31, 33, 40, 41, 54, 62, 63, 65, 66, 70, 71, 72, 75, 80, 86, 92, 93, 94], "isort": 0, "black": 0, "typic": [0, 23, 28, 60, 65, 66, 91], "order": [0, 20, 21, 23, 24, 26, 28, 31, 37, 40, 41, 42, 48, 49, 53, 54, 55, 56, 58, 62, 70, 72, 77, 85, 88, 90, 91, 92, 93, 94, 95, 96, 99, 100, 103], "ensur": [0, 24, 28, 37, 64, 70, 77, 79, 93, 97], "consist": [0, 24, 28, 37, 68, 89, 93], "util": [0, 28, 31, 59, 64, 77, 78, 79], "line": [0, 32, 65, 69, 75, 80, 90, 102], "length": [0, 3, 21, 26, 28, 29, 31, 33, 35, 41, 42, 45, 46, 52, 53, 54, 56, 61, 70, 84, 89, 92, 94, 99, 100, 101, 103], "105": [0, 22], "paramet": [0, 3, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 79, 86, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "example_featur": 0, "py": [0, 1, 60, 61, 65, 77, 80, 81, 84], "fix": [0, 28, 37, 57, 64, 82, 103], "reformat": [0, 86], "done": [0, 24, 28, 66, 77, 80, 93], "1": [0, 1, 3, 6, 14, 19, 20, 21, 22, 24, 26, 28, 29, 31, 33, 35, 37, 40, 41, 42, 44, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 61, 62, 64, 65, 68, 69, 70, 73, 75, 78, 79, 80, 81, 82, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103], "file": [0, 1, 16, 20, 21, 24, 26, 28, 29, 31, 32, 40, 52, 53, 54, 56, 60, 62, 65, 66, 71, 72, 75, 77, 78, 79, 81, 82, 94, 103], "For": [0, 2, 3, 4, 16, 21, 26, 28, 31, 35, 41, 44, 45, 46, 55, 56, 57, 58, 60, 61, 65, 68, 73, 75, 77, 78, 79, 80, 83, 86, 88, 92, 94, 95, 96, 97, 98, 99, 101, 103], "user": [0, 1, 20, 21, 23, 24, 26, 28, 29, 31, 34, 37, 40, 41, 43, 52, 53, 54, 56, 57, 58, 61, 64, 67, 68, 70, 71, 73, 75, 77, 78, 79, 80, 81, 82, 83, 86, 90, 91, 94, 97, 103], "pycharm": 0, "nice": 0, "interoper": 0, "tool": [0, 78, 79], "style": [0, 21, 23, 24, 26, 28, 29, 40, 53, 54, 56, 57, 93, 94, 97], "doc": [0, 24, 28, 48, 49, 54, 60, 77, 78, 90], "string": [0, 1, 3, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 40, 41, 42, 48, 49, 52, 53, 54, 55, 57, 58, 59, 60, 61, 64, 80, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97, 99, 100, 101], "look": [0, 1, 60, 64, 65, 68, 80, 86, 102], "similar": [0, 28, 31, 56, 61, 68, 86, 97, 99, 103], "surround": 0, "function": [0, 1, 16, 21, 54, 56, 61, 64, 65, 68, 69, 71, 72, 75, 80, 85, 86, 87, 90, 91, 93, 94, 95, 97, 98, 99, 100, 101, 103], "space": [0, 1, 3, 28, 37, 41, 56, 57, 61, 77, 80, 92, 95, 103], "The": [0, 1, 2, 3, 4, 16, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 40, 41, 42, 44, 45, 46, 48, 49, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64, 68, 69, 70, 71, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103], "ci": 0, "fail": [0, 24, 28, 31, 37, 64, 86, 93, 97], "tab": [0, 64, 77], "ar": [0, 1, 3, 4, 16, 21, 23, 24, 26, 28, 29, 31, 37, 40, 41, 42, 44, 46, 52, 53, 54, 55, 56, 57, 58, 61, 62, 64, 65, 66, 68, 69, 70, 72, 75, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103], "lowercamelcas": 0, "variabl": [0, 26, 28, 31, 33, 40, 52, 53, 56, 61, 62, 78, 79, 80, 89, 94, 99, 103], "name": [0, 1, 2, 3, 16, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 34, 40, 41, 44, 45, 46, 53, 54, 56, 57, 58, 61, 62, 64, 68, 69, 70, 72, 77, 79, 80, 81, 85, 86, 87, 91, 92, 93, 94, 98, 100], "procedur": 0, "var": [0, 1, 15, 26, 28, 40, 60, 85, 89, 94, 95], "ax": [0, 4, 11, 16], "0": [0, 3, 6, 11, 15, 16, 20, 21, 22, 24, 26, 28, 29, 31, 33, 35, 36, 37, 40, 41, 42, 44, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 60, 61, 62, 68, 69, 70, 75, 78, 79, 81, 82, 84, 86, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "real": [0, 9, 28, 41, 45, 46, 64, 70], "proc": [0, 60], "printit": 0, "x": [0, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 23, 24, 25, 26, 28, 31, 37, 40, 43, 48, 49, 50, 51, 53, 56, 58, 68, 82, 86, 89, 90, 91, 93, 94, 97, 99, 103], "writeln": 0, "uppercamelcas": 0, "class": [0, 41, 61, 85, 86, 87, 90, 91, 93, 94, 98, 99, 100, 103], "foo": [0, 2, 28], "foopar": 0, "re": [0, 21, 22, 24, 26, 28, 77, 94, 102, 103], "confirm": [0, 64], "again": [0, 66, 68, 69, 77, 78], "realli": [0, 28, 56], "behav": [0, 20, 28, 90], "properli": [0, 65, 70, 78, 79], "thing": [0, 4, 16, 68], "note": [0, 1, 2, 3, 4, 16, 20, 21, 22, 23, 24, 26, 28, 29, 31, 32, 37, 40, 41, 42, 43, 44, 45, 46, 48, 49, 52, 53, 54, 55, 56, 57, 58, 60, 62, 66, 68, 70, 72, 77, 79, 80, 82, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103], "test_": 0, "begin": [0, 28, 56, 96, 103], "otherwis": [0, 20, 21, 24, 25, 26, 28, 29, 31, 35, 40, 41, 42, 53, 54, 56, 58, 60, 83, 86, 90, 91, 93, 94, 97, 99, 101, 103], "pytest": [0, 67, 81], "ini": [0, 61], "so": [0, 1, 21, 23, 24, 26, 28, 31, 37, 40, 44, 46, 53, 54, 56, 61, 63, 64, 65, 66, 80, 81, 82, 86, 89, 90, 93, 94, 98, 100, 101], "dure": [0, 1, 28, 31, 58, 66, 68, 70, 71, 80, 81], "wiki": [0, 28, 48, 49], "more": [0, 1, 3, 4, 7, 9, 10, 11, 14, 16, 17, 20, 21, 24, 28, 29, 31, 37, 40, 54, 56, 57, 60, 61, 62, 64, 65, 66, 68, 70, 72, 73, 75, 77, 78, 79, 81, 86, 90, 91, 93, 97, 99, 103], "info": [0, 1, 21, 24, 28, 30, 34, 40, 56], "how": [0, 20, 21, 23, 24, 28, 29, 31, 37, 40, 53, 56, 60, 61, 64, 69, 81, 90, 94, 97], "http": [0, 7, 24, 28, 48, 49, 54, 58, 60, 78, 79, 90], "com": [0, 28, 48, 49, 78, 79], "unit": [0, 1, 22, 24, 28, 29, 37, 54, 57, 58], "categoricaltest": 0, "v": [0, 53, 64, 78, 84, 99], "print": [0, 1, 21, 22, 24, 28, 30, 40, 47, 54, 56, 82, 102], "m": [0, 28, 29, 35, 37, 53, 57, 61, 77, 82, 103], "categorical_test": 0, "singl": [0, 2, 3, 4, 16, 20, 21, 23, 24, 26, 28, 29, 31, 33, 37, 40, 42, 44, 46, 53, 56, 65, 66, 68, 70, 72, 77, 80, 84, 86, 92, 93, 94, 96, 98, 99, 101], "from": [0, 3, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 34, 35, 37, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 53, 54, 56, 58, 60, 61, 62, 64, 65, 66, 68, 69, 70, 75, 77, 78, 80, 82, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103], "foo_test": 0, "server_util": [0, 1], "parallel_start_test": 0, "d": [0, 4, 16, 21, 28, 29, 41, 42, 43, 44, 46, 53, 54, 56, 57, 58, 68, 84, 98, 99, 101, 103], "post": [0, 64], "local": [0, 1, 20, 21, 22, 24, 26, 28, 29, 31, 40, 53, 54, 56, 57, 58, 61, 62, 70, 75, 77, 78, 79, 86, 92, 94, 100, 102], "catch": 0, "common": [0, 3, 26, 28, 42, 60, 82, 86, 94, 101, 103], "failur": [0, 28, 31, 77, 86], "earli": 0, "usual": [0, 26, 28, 60, 94], "mypi": [0, 81], "everi": [0, 1, 24, 28, 61, 93, 103], "should": [0, 1, 4, 16, 21, 24, 25, 26, 28, 31, 37, 40, 41, 54, 56, 58, 60, 64, 65, 66, 68, 69, 70, 71, 75, 77, 78, 79, 81, 86, 93, 94, 97, 102], "least": [0, 23, 24, 28, 40, 53, 55, 56, 88, 99], "one": [0, 1, 2, 3, 4, 16, 21, 24, 25, 26, 28, 29, 31, 32, 37, 40, 41, 42, 44, 46, 53, 54, 56, 60, 61, 64, 66, 68, 69, 70, 72, 75, 78, 79, 80, 81, 82, 86, 89, 91, 92, 93, 94, 98, 99, 101, 103], "associ": [0, 1, 28, 31, 44, 46, 54, 58, 61, 64, 86, 98, 99, 100], "number": [0, 1, 3, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 33, 36, 37, 40, 41, 44, 45, 46, 53, 54, 56, 57, 58, 61, 62, 64, 65, 66, 68, 70, 78, 80, 82, 84, 86, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103], "titl": [0, 28, 56, 64], "bodi": 0, "close": [0, 3, 28, 41, 57, 60, 68, 92], "keyword": [0, 21, 28, 44, 46, 53, 54, 92, 98, 100], "doubt": [0, 64], "take": [0, 10, 23, 26, 28, 34, 40, 44, 46, 62, 63, 65, 66, 68, 71, 86, 94, 98], "some": [0, 4, 21, 24, 28, 62, 68, 72, 77, 78, 91, 93, 99, 103], "99999": 0, "pr": [0, 64], "implement": [0, 4, 21, 22, 23, 24, 27, 28, 37, 40, 42, 44, 52, 53, 54, 56, 60, 69, 75, 89, 92, 98, 102, 103], "arg": [0, 3, 28, 29, 41, 53, 54, 57, 58, 60, 80, 92, 94], "super": 0, "cool": 0, "help": [0, 23, 28, 80], "keep": [0, 3, 24, 28, 68, 79, 82, 86, 93], "part": [0, 4, 16, 28, 53, 56, 82, 103], "those": [0, 4, 16, 28, 55, 68, 78, 80, 88, 96], "As": [0, 28, 37, 40, 54, 64, 69, 71, 78, 79, 86, 89, 97, 100, 103], "person": 0, "who": [0, 78, 79], "left": [0, 3, 12, 23, 24, 28, 37, 40, 55, 56, 57, 88, 95, 103], "feedback": 0, "resolv": [0, 63, 75, 82], "convers": [0, 21, 28, 86, 91, 97, 103], "decid": 0, "author": 0, "address": [0, 22, 23, 28, 102], "try": [0, 25, 28, 29, 31, 40, 82], "feel": 0, "readi": [0, 62, 64, 78, 79], "necessari": [0, 60, 64, 77, 82], "track": [0, 65, 72], "ani": [0, 3, 17, 20, 21, 24, 26, 28, 29, 30, 31, 32, 37, 40, 41, 44, 46, 53, 54, 56, 60, 61, 64, 66, 70, 72, 78, 79, 85, 89, 93, 94, 95, 97, 98, 99, 103], "which": [0, 3, 20, 21, 22, 23, 24, 26, 28, 29, 31, 37, 40, 41, 42, 44, 45, 46, 53, 54, 55, 56, 57, 60, 61, 63, 64, 66, 68, 77, 78, 79, 80, 84, 86, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 101, 102, 103], "outsid": [0, 69, 80], "scope": [0, 80], "member": 0, "quit": [0, 75], "bit": [0, 7, 21, 23, 28, 37, 40, 41, 53, 56, 61, 65, 86, 90, 92, 93, 97], "experi": [0, 86], "unsur": 0, "ask": 0, "2": [0, 3, 20, 21, 24, 26, 28, 29, 31, 35, 37, 40, 41, 42, 44, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 58, 60, 61, 62, 64, 68, 69, 70, 77, 78, 79, 80, 81, 82, 86, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103], "concurr": [0, 86], "approv": 0, "limit": [0, 4, 20, 21, 28, 33, 40, 41, 56, 57, 69, 72, 75, 86, 90, 91, 93, 97, 103], "except": [0, 3, 28, 40, 60, 68, 78, 103], "after": [0, 21, 24, 28, 56, 64, 66, 77, 93, 98, 103], "pass": [0, 1, 3, 16, 21, 23, 24, 26, 28, 31, 37, 40, 44, 53, 54, 56, 64, 86, 93, 94, 98, 100], "conflict": 0, "ideal": [0, 64], "rebas": 0, "master": [0, 64, 77], "prefer": [0, 79, 81, 83, 98], "wrote": 0, "best": [0, 3, 28], "practic": [0, 26, 28, 40, 80, 89, 94], "els": [0, 28, 54, 60, 64], "To": [0, 1, 24, 26, 28, 37, 44, 46, 57, 60, 61, 62, 66, 69, 75, 77, 79, 80, 90, 91, 93, 95, 97, 98, 103], "commit": [0, 64], "histori": [0, 22, 28, 59, 64], "allow": [0, 21, 23, 24, 28, 29, 31, 34, 40, 41, 44, 45, 46, 48, 49, 53, 54, 56, 58, 61, 62, 68, 70, 71, 73, 80, 82, 86, 92, 98, 99], "easi": [0, 28, 34, 61, 64, 68, 77], "manipul": 0, "squash": 0, "web": [0, 64], "interfac": [0, 64], "pierce314159": 0, "ethan": 0, "debandi99": 0, "consensu": [0, 64], "There": [1, 26, 28, 31, 61, 68, 77, 82, 92, 101], "can": [1, 3, 16, 20, 21, 23, 24, 26, 28, 29, 31, 37, 40, 41, 42, 45, 46, 52, 53, 54, 56, 57, 60, 61, 63, 64, 65, 66, 68, 69, 70, 71, 72, 75, 77, 78, 79, 80, 81, 82, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103], "role": 1, "develop": [1, 21, 28, 64, 65, 66, 78, 79, 80, 83, 86], "highlight": [1, 64, 68], "variou": [1, 69], "avail": [1, 22, 28, 31, 40, 44, 61, 66, 70, 82, 86, 95, 98], "separ": [1, 4, 23, 24, 28, 29, 31, 32, 40, 56, 61, 69, 70, 80, 86, 97, 103], "section": [1, 28, 37, 61, 63, 64, 65, 66, 68, 70, 75, 77, 81, 89], "These": [1, 16, 24, 28, 54, 68, 70, 73, 75, 86], "env": [1, 65, 75, 77, 78, 79, 81], "arkouda_serv": [1, 22, 25, 28, 62, 65, 66, 75, 77, 80, 102], "arkouda_server_connection_info": 1, "set": [1, 3, 20, 21, 23, 24, 26, 28, 29, 31, 34, 37, 40, 41, 42, 52, 53, 54, 56, 57, 61, 62, 64, 69, 70, 77, 78, 79, 80, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 103], "write": [1, 20, 21, 24, 28, 29, 31, 32, 34, 40, 53, 54, 56, 61, 64, 69, 86, 90], "port": [1, 21, 22, 24, 28, 31, 40, 53, 54, 56, 65, 75, 84, 102], "startup": [1, 75, 85], "tune": 1, "buffer": 1, "messag": [1, 20, 21, 22, 24, 28, 29, 34, 40, 41, 53, 56, 60, 75, 86], "aggreg": [1, 24, 26, 28, 53, 58, 68, 85, 86, 94], "sort": [1, 3, 14, 21, 24, 26, 28, 37, 40, 42, 53, 54, 56, 58, 59, 64, 84, 85, 89, 91, 92, 94, 95, 101, 103], "non": [1, 3, 21, 24, 26, 28, 36, 37, 40, 41, 42, 44, 45, 46, 54, 55, 56, 63, 86, 88, 89, 92, 94, 95, 96, 98, 103], "crazi": 1, "system": [1, 20, 21, 28, 40, 52, 56, 60, 61, 79, 80, 81, 82, 83, 86, 89, 90, 91, 97, 102, 103], "thei": [1, 16, 21, 22, 23, 24, 26, 28, 29, 31, 40, 53, 54, 56, 57, 58, 62, 64, 69, 70, 71, 78, 79, 86, 90, 91, 94, 100], "per": [1, 20, 21, 22, 24, 26, 28, 29, 31, 40, 53, 56, 60, 61, 66, 70, 80, 86, 89, 94], "task": [1, 22], "content": [1, 69, 86], "between": [1, 21, 22, 28, 33, 37, 40, 41, 56, 57, 58, 61, 68, 80, 92, 95, 97, 103], "compet": 1, "arkouda_server_aggregation_dst_buff_s": 1, "commun": [1, 28, 55, 64, 79, 88, 92], "arkouda_server_aggregation_src_buff_s": 1, "arkouda_server_aggregation_yield_frequ": 1, "frequenc": [1, 28, 48, 49, 57], "yield": [1, 20, 21, 24, 28, 29, 31, 40, 53, 56, 93, 96], "default": [1, 3, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 33, 34, 35, 37, 40, 41, 42, 44, 45, 46, 48, 49, 52, 53, 54, 56, 57, 58, 61, 63, 69, 70, 75, 79, 80, 84, 86, 89, 90, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103], "1024": [1, 28, 40], "build": [1, 26, 28, 61, 64, 67, 75, 78, 82, 94, 102], "chpl_flag": [1, 63], "A": [1, 2, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 37, 40, 41, 43, 44, 52, 53, 54, 56, 58, 64, 68, 74, 84, 86, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 103], "automat": [1, 21, 28, 31, 54, 70, 86, 91, 100], "chpl": [1, 60, 65, 77, 78, 79, 80], "addit": [1, 26, 28, 37, 43, 44, 46, 60, 62, 70, 72, 78, 97, 98, 101, 102], "ones": [1, 6, 22, 24, 28, 37, 41, 54, 61, 65, 84, 85, 89, 92], "here": [1, 28, 56, 58, 61, 62, 65, 66, 67, 68, 70, 72, 77, 79, 80, 81, 82, 83, 102], "smemtrack": 1, "true": [1, 3, 6, 7, 14, 20, 21, 22, 23, 24, 26, 28, 29, 31, 33, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 53, 54, 56, 57, 58, 61, 68, 79, 86, 87, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103], "lhdf5": 1, "lhdf5_hl": 1, "lzmq": 1, "liconv": 1, "lidn2": 1, "fast": [1, 21, 28, 56], "unless": [1, 28, 31, 37, 44, 46, 56, 98, 103], "arkouda_develop": [1, 65], "o1": 1, "mutual": 1, "exclus": [1, 28, 33, 41, 42, 44, 45, 46, 68, 92, 96, 98, 101], "arkouda_quick_compil": [1, 65, 79], "loop": 1, "invari": 1, "code": [1, 21, 28, 29, 31, 48, 49, 55, 60, 64, 65, 68, 70, 75, 80, 85, 88, 91], "motion": 1, "ccflag": 1, "o0": 1, "arkouda_print_passes_fil": 1, "time": [1, 21, 22, 24, 26, 28, 29, 31, 33, 37, 40, 44, 53, 54, 56, 57, 61, 63, 65, 66, 69, 70, 72, 80, 84, 86, 91, 94, 95, 98, 99, 101, 103], "specifi": [1, 3, 4, 7, 11, 16, 20, 23, 24, 26, 28, 29, 31, 32, 40, 41, 43, 44, 45, 46, 53, 54, 56, 57, 58, 61, 65, 71, 86, 89, 90, 92, 93, 94, 98, 99], "mainli": 1, "nightli": 1, "infrastructur": 1, "chpl_debug_flag": 1, "regex_max_captur": 1, "integ": [1, 21, 23, 24, 26, 28, 31, 33, 37, 40, 41, 42, 44, 46, 57, 70, 85, 89, 90, 91, 92, 93, 94, 97, 99, 101, 103], "chang": [1, 23, 24, 28, 29, 31, 40, 44, 61, 64, 66, 75, 78, 79, 81, 86, 89, 93, 98], "maximum": [1, 22, 24, 26, 28, 29, 40, 41, 45, 46, 58, 61, 86, 89, 92, 93, 94, 95], "captur": [1, 35, 103], "group": [1, 21, 24, 26, 28, 35, 53, 54, 55, 56, 61, 68, 70, 85, 88, 91, 93, 94, 100, 101, 103], "access": [1, 2, 22, 28, 31, 52, 54, 56, 68, 73, 79, 85, 86, 98, 102], "match": [1, 16, 20, 21, 24, 26, 28, 29, 31, 36, 37, 40, 41, 53, 54, 56, 57, 58, 59, 61, 85, 86, 89, 90, 92, 94, 97, 100, 102], "20": [1, 3, 24, 28, 37, 44, 46, 48, 49, 64, 68, 81, 82, 89, 90, 96, 98], "folk": 1, "instal": [1, 28, 40, 65, 82, 102], "anaconda": [1, 75, 77, 82, 83], "through": [1, 28, 37, 60, 62, 64, 75, 79], "instruct": [1, 28, 56, 75, 78, 79, 81, 82, 83, 102], "altern": [1, 28, 54, 64, 65, 77, 79, 82], "setup": [1, 77, 82], "them": [1, 24, 28, 31, 42, 56, 64, 78, 86, 93, 101], "explicitli": [1, 24, 28, 42, 80, 101], "arkouda_zmq_path": 1, "zmq": [1, 77], "arkouda_hdf5_path": 1, "hdf5": [1, 20, 21, 24, 26, 28, 29, 31, 40, 53, 56, 69, 71, 72, 73, 77, 81, 86, 94, 103], "arkouda_arrow_path": 1, "arrow": [1, 81], "arkouda_iconv_path": 1, "iconv": [1, 77, 81], "arkouda_idn2_path": 1, "idn2": [1, 77, 81], "ld_library_path": 1, "lib": [1, 77, 82, 101], "arkouda_skip_check_dep": 1, "skip": [1, 26, 28, 31, 56, 78, 86, 94, 101, 103], "autom": [1, 64], "do": [1, 3, 20, 21, 22, 24, 26, 28, 29, 31, 37, 40, 53, 54, 56, 61, 65, 66, 78, 80, 81, 83, 89, 90, 93, 94, 100], "repeat": [1, 11, 21, 28, 53, 91, 99], "sinc": [1, 4, 28, 37, 44, 66, 91, 93, 97, 98, 103], "dep": [1, 77, 78, 79], "been": [1, 21, 22, 24, 28, 31, 40, 42, 53, 56, 62, 63, 64, 77, 80, 89, 91, 92], "up": [1, 3, 21, 22, 24, 26, 28, 31, 37, 40, 42, 53, 56, 60, 63, 66, 67, 77, 78, 79, 80, 86, 89, 90, 91, 92, 101, 103], "arkouda_server_user_modul": [1, 80], "absolut": [1, 28, 37, 57, 80, 89], "must": [1, 3, 21, 22, 23, 24, 26, 28, 29, 31, 37, 40, 41, 42, 43, 44, 46, 50, 51, 53, 54, 56, 57, 60, 62, 65, 68, 69, 75, 77, 78, 80, 89, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103], "also": [1, 3, 4, 21, 23, 26, 28, 33, 37, 41, 42, 53, 54, 56, 63, 65, 68, 69, 71, 72, 73, 75, 78, 82, 86, 92, 96, 97, 99, 101, 103], "servermodul": [1, 65, 66, 80], "cfg": [1, 65, 66, 80], "regist": [1, 4, 21, 23, 24, 26, 28, 29, 30, 40, 53, 54, 56, 57, 58, 60, 85, 94], "readm": 1, "verbos": [1, 28, 30, 34], "arkouda_verbos": 1, "arkouda_server_host": 1, "hostnam": [1, 21, 22, 24, 28, 31, 40, 53, 56, 65, 75, 84, 102], "arkouda_server_port": 1, "arkouda_client_timeout": 1, "control": [1, 23, 28, 37, 97], "timeout": [1, 22, 102], "arkouda_full_stack_test": 1, "option": [1, 3, 21, 22, 23, 24, 26, 27, 28, 29, 31, 33, 35, 40, 41, 42, 43, 44, 45, 46, 53, 54, 56, 57, 60, 61, 64, 70, 75, 77, 78, 79, 81, 84, 86, 92, 93, 94, 98, 100, 101, 102, 103], "test_data_url": 1, "readalltest": 1, "read_all_test": 1, "arkouda_numlocal": 1, "where": [1, 12, 21, 22, 24, 26, 28, 29, 31, 32, 33, 37, 40, 41, 42, 52, 53, 56, 58, 60, 61, 62, 63, 70, 78, 79, 85, 86, 94, 95, 96, 97, 99, 101, 102, 103], "found": [1, 3, 24, 28, 29, 31, 40, 56, 60, 61, 68, 72, 79, 80, 82], "arkouda_hom": 1, "locat": [1, 26, 28, 29, 37, 40, 52, 54, 56, 61, 64, 66, 77, 82, 89, 94, 100, 103], "execut": [1, 22, 27, 28, 31, 40, 56, 60, 62, 63, 65, 66, 69, 77, 78, 80, 91, 102], "warn": [1, 28, 31, 34, 56, 86, 103], "subject": [1, 28, 57], "futur": [1, 23, 28, 31, 44, 56, 86, 95, 98], "intern": [1, 4, 16, 28, 33, 40, 56, 64], "arkouda_client_directori": [1, 52], "parent": [1, 24, 28, 36], "token": [1, 22, 52, 75, 102], "txt": 1, "arkouda_tunnel_serv": 1, "ssh": 1, "tunnel": 1, "url": [1, 22, 24, 28, 54, 75, 77, 102], "arkouda_key_fil": 1, "keyfil": 1, "arkouda_password": 1, "password": [1, 24, 28, 54, 82], "arkouda_log_level": 1, "side": [1, 12, 20, 21, 22, 24, 26, 28, 29, 30, 31, 35, 40, 41, 44, 46, 53, 54, 56, 57, 60, 64, 65, 75, 80, 82, 86, 89, 90, 91, 94, 95, 96, 97, 98, 99, 102, 103], "log": [1, 9, 26, 28, 34, 37, 41, 43, 48, 49, 50, 51, 56, 85, 89, 94], "level": [1, 28, 34, 42, 54, 61, 65, 69, 70, 77, 78, 79, 80, 83, 86, 100, 101], "arkouda_client_mod": 1, "mode": [1, 20, 21, 23, 24, 26, 28, 29, 31, 40, 53, 54, 56, 85, 92, 94], "ui": 1, "api": [1, 4, 7, 9, 10, 11, 14, 16, 17, 24, 26, 28, 54, 58, 60, 74, 94, 97], "displai": [1, 23, 24, 28, 29, 43, 54, 58, 77, 82, 93], "splash": 1, "cachedaccessor": [2, 28], "str": [2, 4, 6, 7, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 43, 52, 53, 54, 56, 57, 58, 61, 69, 86, 87, 89, 90, 91, 92, 93, 94, 97, 102, 103], "custom": [2, 28, 34, 60, 69, 77, 95], "properti": [2, 4, 16, 21, 24, 28, 29, 40, 53, 54, 57, 60, 70], "object": [2, 3, 4, 6, 16, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 35, 36, 37, 40, 41, 42, 43, 44, 52, 53, 54, 56, 57, 58, 60, 69, 70, 71, 72, 73, 82, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "descriptor": [2, 28, 56], "cach": [2, 21, 28, 56], "param": [2, 21, 28, 29, 31, 40, 53, 56, 61], "namespac": [2, 4, 16, 28, 31], "g": [2, 21, 23, 24, 26, 28, 31, 37, 40, 53, 54, 56, 57, 58, 65, 66, 68, 78, 86, 89, 91, 92, 94, 99, 102, 103], "df": [2, 24, 28, 68, 93], "type": [2, 3, 4, 7, 16, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 40, 41, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 71, 77, 81, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 99, 100, 102, 103], "extens": [2, 21, 28, 29, 31, 40, 53, 56, 77, 86], "method": [2, 4, 21, 22, 23, 24, 26, 27, 28, 31, 37, 40, 41, 44, 45, 46, 52, 53, 54, 56, 63, 68, 69, 85, 86, 91, 92, 94, 95, 97, 98], "cl": [2, 28], "__init__": [2, 28], "assum": [2, 24, 26, 28, 31, 41, 42, 54, 64, 69, 70, 71, 78, 79, 83, 86, 93, 94, 100, 101], "seri": [2, 24, 28, 29, 41, 57, 58, 59], "datafram": [2, 28, 29, 31, 43, 47, 54, 59, 71, 86, 100], "index": [2, 3, 6, 20, 21, 23, 24, 26, 28, 31, 33, 35, 40, 41, 42, 53, 54, 56, 58, 59, 61, 68, 77, 84, 85, 86, 89, 91, 94, 95, 99, 100, 103], "argument": [2, 3, 23, 24, 26, 28, 37, 40, 44, 46, 53, 54, 56, 58, 60, 75, 80, 98, 100], "data": [2, 7, 20, 21, 23, 24, 25, 26, 28, 29, 31, 37, 40, 41, 42, 43, 53, 54, 55, 56, 57, 58, 60, 61, 68, 71, 73, 74, 85, 87, 88, 90, 91, 92, 94, 99, 100, 102, 103], "datetimeaccessor": [2, 28], "stringaccessor": [2, 28], "date_oper": [2, 28], "string_oper": [2, 28], "nonuniqueerror": [3, 28], "valueerror": [3, 21, 22, 24, 26, 28, 29, 31, 32, 33, 37, 40, 41, 42, 45, 46, 53, 54, 55, 56, 86, 88, 89, 91, 92, 94, 95, 99, 100, 102, 103], "inappropri": [3, 28], "valu": [3, 4, 13, 20, 21, 22, 23, 24, 26, 28, 29, 31, 32, 33, 37, 40, 41, 42, 44, 45, 46, 48, 49, 53, 54, 56, 57, 58, 61, 68, 70, 72, 79, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103], "correct": [3, 15, 24, 28, 60, 65, 78, 82, 84, 93], "map": [3, 21, 22, 23, 24, 28, 29, 31, 32, 44, 46, 54, 56, 58, 86, 93, 98, 103], "multipl": [3, 24, 28, 31, 37, 53, 57, 60, 61, 62, 68, 70, 72, 73, 80, 84, 86, 87, 89, 93, 99], "arrai": [3, 4, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 28, 29, 31, 33, 35, 37, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 60, 61, 69, 70, 75, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 100, 103], "spars": [3, 26, 28, 58, 94, 97], "pdarrai": [3, 20, 21, 23, 24, 26, 28, 29, 31, 33, 35, 37, 40, 41, 42, 44, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 60, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 103], "sequenc": [3, 21, 23, 28, 29, 37, 40, 41, 42, 53, 55, 58, 88, 92, 97, 99, 101, 103], "dens": [3, 21, 26, 28, 94], "return": [3, 4, 7, 16, 20, 21, 22, 23, 24, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 69, 71, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103], "replac": [3, 24, 28, 31, 36, 40, 53, 56, 62, 64, 70, 79, 80, 81, 99, 103], "queri": [3, 28, 86], "item": [3, 4, 16, 21, 24, 28, 40, 41, 42, 54, 58, 91, 93, 100, 101], "search": [3, 21, 28, 35, 42, 56, 85, 91], "each": [3, 20, 21, 22, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 37, 40, 42, 44, 46, 53, 54, 56, 57, 58, 60, 61, 68, 70, 77, 80, 86, 89, 90, 91, 93, 94, 95, 97, 98, 99, 100, 101, 103], "row": [3, 24, 26, 28, 29, 31, 40, 42, 53, 54, 55, 56, 59, 68, 69, 86, 88, 93, 94, 99, 101], "same": [3, 20, 21, 23, 24, 26, 28, 29, 31, 37, 40, 41, 42, 52, 53, 54, 55, 56, 57, 64, 68, 69, 70, 72, 78, 79, 80, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 103], "shape": [3, 4, 6, 11, 16, 20, 21, 24, 28, 29, 37, 40, 44, 46, 54, 56, 58, 70, 85, 89, 90, 91, 97, 98], "dtype": [3, 4, 6, 7, 15, 16, 20, 21, 24, 26, 28, 29, 31, 33, 36, 37, 40, 41, 42, 44, 45, 46, 53, 55, 56, 57, 58, 59, 60, 61, 68, 84, 85, 86, 89, 90, 92, 93, 94, 95, 96, 97, 98, 101, 103], "its": [3, 7, 9, 10, 11, 14, 17, 21, 25, 28, 29, 37, 40, 53, 54, 56, 64, 70, 79, 89, 97, 99, 100, 103], "int64": [3, 8, 21, 23, 24, 25, 26, 28, 29, 31, 33, 35, 37, 40, 41, 42, 44, 45, 46, 53, 55, 56, 57, 60, 61, 68, 69, 70, 84, 86, 88, 89, 91, 92, 93, 94, 95, 97, 98, 99, 101, 103], "in1d_interv": [3, 28], "val": [3, 25, 26, 28, 53, 54, 58, 94, 99], "interv": [3, 28, 37, 41, 44, 46, 57, 92, 95, 98], "symmetr": [3, 28, 42, 53, 68, 85, 101], "fals": [3, 12, 14, 15, 17, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 33, 35, 36, 37, 40, 41, 42, 44, 45, 46, 53, 54, 56, 57, 58, 61, 68, 84, 86, 87, 89, 91, 92, 93, 94, 97, 98, 99, 101, 103], "test": [3, 21, 24, 28, 31, 42, 48, 49, 62, 64, 65, 66, 68, 75, 80, 93, 101], "membership": [3, 28, 42, 101], "half": [3, 28, 44, 46, 98], "python": [3, 4, 16, 20, 21, 22, 23, 27, 28, 40, 41, 42, 52, 54, 56, 61, 74, 77, 82, 83, 85, 86, 89, 90, 91, 92, 93, 96, 97, 103], "int": [3, 4, 6, 7, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 35, 36, 37, 40, 41, 42, 44, 45, 46, 48, 49, 52, 53, 54, 56, 57, 58, 60, 70, 86, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103], "float": [3, 6, 7, 15, 22, 24, 28, 37, 40, 41, 44, 45, 46, 58, 89, 92, 93, 95, 97, 98], "tupl": [3, 4, 6, 7, 11, 12, 15, 16, 17, 21, 23, 24, 25, 26, 28, 33, 37, 40, 41, 42, 45, 46, 53, 54, 56, 58, 68, 86, 91, 92, 93, 94, 95, 97, 100, 101, 103], "overlap": [3, 24, 28, 36, 56, 103], "lower_bounds_inclus": [3, 28], "upper_bounds_exclus": [3, 28], "bool": [3, 6, 7, 8, 11, 12, 14, 15, 17, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 53, 54, 55, 56, 57, 58, 61, 70, 84, 86, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103], "boolean": [3, 7, 21, 24, 26, 28, 35, 37, 40, 42, 53, 54, 56, 68, 70, 89, 91, 93, 94, 96, 97, 99, 100, 101, 103], "contain": [3, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 35, 37, 40, 41, 42, 43, 53, 54, 55, 56, 57, 59, 60, 61, 65, 66, 68, 69, 70, 75, 80, 84, 85, 86, 88, 89, 91, 92, 93, 94, 97, 99, 100, 101, 103], "correspond": [3, 21, 23, 24, 26, 28, 29, 31, 32, 33, 35, 37, 40, 41, 48, 49, 52, 53, 54, 56, 58, 60, 70, 72, 86, 89, 91, 93, 94, 95, 96, 99, 100, 103], "rang": [3, 21, 24, 28, 29, 31, 33, 37, 40, 41, 44, 45, 46, 53, 54, 56, 57, 84, 86, 89, 92, 93, 95, 98, 100, 103], "defin": [3, 4, 16, 21, 23, 24, 25, 26, 27, 28, 29, 31, 34, 37, 40, 41, 53, 54, 56, 57, 60, 64, 90, 91, 92, 93, 94, 95, 97], "low": [3, 23, 24, 28, 37, 40, 41, 44, 45, 46, 68, 86, 92, 98], "high": [3, 23, 24, 28, 37, 40, 41, 44, 45, 46, 68, 92, 98], "inclus": [3, 24, 28, 37, 40, 41, 44, 45, 46, 57, 89, 92, 96, 98], "equival": [3, 20, 21, 24, 26, 28, 31, 37, 40, 41, 42, 55, 56, 57, 58, 65, 68, 88, 89, 90, 92, 101], "But": [3, 28], "faster": [3, 21, 28, 42, 65, 91, 101], "mani": [3, 21, 28, 61, 91, 94], "second": [3, 22, 28, 32, 37, 41, 42, 54, 56, 57, 58, 60, 61, 65, 68, 89, 92, 97, 100, 101, 102, 103], "trivial": [3, 28], "size": [3, 4, 16, 20, 21, 24, 25, 26, 28, 29, 31, 33, 37, 40, 41, 44, 45, 46, 53, 54, 55, 56, 57, 58, 61, 68, 70, 71, 72, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103], "interval_lookup": [3, 28], "kei": [3, 21, 24, 26, 28, 29, 30, 31, 32, 37, 42, 54, 60, 68, 70, 80, 82, 87, 93, 94, 100, 101], "fillvalu": [3, 28], "tiebreak": [3, 28], "none": [3, 4, 6, 10, 11, 12, 15, 16, 17, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 37, 40, 41, 43, 44, 45, 46, 47, 48, 49, 53, 54, 56, 57, 58, 61, 78, 79, 86, 87, 91, 92, 93, 94, 95, 97, 98, 100, 102], "hierarch": [3, 28], "appli": [3, 24, 26, 28, 37, 61, 89, 93, 94, 103], "over": [3, 21, 24, 28, 31, 37, 40, 44, 46, 53, 56, 84, 89, 90, 91, 93, 95, 97, 98, 99, 103], "express": [3, 21, 28, 31, 56, 61, 85, 86, 91, 93, 96, 97], "upper_bounds_inclus": [3, 28], "entri": [3, 24, 28, 40, 54, 56, 60, 61, 93], "scalar": [3, 4, 16, 21, 28, 37, 40, 53, 54, 60, 61, 84, 85, 91, 95, 96, 99, 100], "numer": [3, 24, 28, 40, 41, 43, 54, 55, 58, 59, 70, 85, 86, 88, 91, 97, 100, 103], "than": [3, 4, 20, 21, 24, 26, 28, 29, 31, 37, 40, 41, 42, 44, 46, 53, 54, 55, 56, 62, 64, 65, 72, 86, 88, 90, 91, 92, 93, 94, 97, 98, 101, 103], "lowest": [3, 24, 28, 40, 41, 44, 46, 98], "chosen": [3, 28, 37, 40, 89, 97, 99], "given": [3, 16, 21, 24, 26, 28, 31, 40, 41, 42, 44, 46, 56, 57, 58, 61, 81, 86, 91, 92, 93, 94, 98, 103], "valid": [3, 16, 21, 28, 31, 37, 41, 54, 56, 86, 91, 97, 103], "is_cosort": [3, 28], "iff": [3, 21, 28, 29, 40, 54, 56, 57, 89, 95], "cosort": [3, 28], "were": [3, 20, 26, 28, 29, 31, 40, 53, 56, 65, 80, 90, 94, 99, 103], "column": [3, 21, 24, 26, 28, 29, 31, 40, 43, 53, 54, 55, 56, 68, 69, 72, 73, 86, 88, 94, 99, 100], "tabl": [3, 22, 24, 28, 30, 40, 53, 54, 56, 60, 61, 81, 97, 99], "cosorted": [3, 28], "rais": [3, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 37, 40, 41, 42, 45, 46, 52, 53, 54, 55, 56, 57, 58, 60, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103], "typeerror": [3, 21, 23, 24, 25, 26, 28, 29, 31, 33, 34, 37, 40, 41, 42, 45, 46, 53, 54, 55, 56, 57, 58, 60, 86, 88, 89, 91, 92, 94, 95, 100, 101, 103], "left_align": [3, 28], "right": [3, 12, 23, 24, 28, 40, 44, 55, 56, 57, 64, 88, 93, 96, 98, 102, 103], "two": [3, 19, 21, 23, 24, 26, 28, 29, 33, 37, 40, 41, 42, 53, 54, 56, 57, 58, 68, 69, 78, 80, 86, 89, 92, 94, 101, 103], "impli": [3, 28, 96], "discard": [3, 21, 28, 91], "appear": [3, 21, 24, 26, 28, 29, 31, 40, 42, 54, 56, 64, 94, 95], "lookup": [3, 28, 29, 54], "domain": [3, 28], "uniqu": [3, 21, 24, 26, 28, 29, 37, 40, 42, 53, 54, 56, 68, 70, 85, 86, 91, 94, 95, 96, 99, 100, 101, 103], "treat": [3, 20, 23, 24, 25, 28, 55, 61, 68, 88, 90, 93], "evalu": [3, 28, 40, 89, 95], "result": [3, 21, 24, 26, 28, 29, 31, 33, 37, 40, 41, 42, 43, 44, 45, 46, 48, 49, 53, 54, 56, 57, 60, 61, 68, 69, 70, 71, 79, 86, 89, 92, 93, 94, 97, 98, 99, 100, 103], "while": [3, 28, 31, 55, 66, 70, 72, 77, 82, 86, 88], "cannot": [3, 20, 21, 23, 24, 26, 28, 29, 31, 37, 40, 41, 53, 54, 56, 57, 72, 82, 86, 90, 91, 94, 97, 103], "other": [3, 21, 23, 24, 26, 28, 29, 31, 37, 40, 41, 44, 46, 53, 55, 56, 57, 61, 65, 66, 68, 86, 87, 88, 89, 91, 94, 98, 99, 101, 103], "complex": [3, 28, 75], "achiev": [3, 28, 77], "arang": [3, 6, 20, 24, 26, 28, 31, 37, 40, 41, 42, 43, 53, 54, 58, 60, 68, 85, 86, 89, 90, 92, 93, 94, 95, 96, 97, 99, 101], "desir": [3, 22, 23, 28, 37, 40, 41, 44, 45, 46, 52, 61, 62, 75, 80, 89, 92, 95, 97, 98, 102, 103], "word": [3, 28, 44, 46, 98], "keys1": [3, 28], "twenti": [3, 28], "_": [3, 28, 35, 56, 103], "5": [3, 20, 21, 22, 24, 26, 28, 29, 37, 40, 41, 42, 44, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 58, 61, 68, 69, 70, 72, 79, 81, 86, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 101, 103], "keys2": [3, 28], "three": [3, 28, 41, 42, 56, 57, 77, 92, 96, 97, 103], "four": [3, 28, 42, 56, 57, 92, 103], "five": [3, 28, 42, 56, 92, 103], "21": [3, 28, 37, 89, 90], "22": [3, 28, 89, 90], "23": [3, 28, 40, 90], "24": [3, 28, 29, 37, 40, 54, 61, 81, 89, 90], "25": [3, 26, 28, 29, 31, 40, 41, 54, 58, 90, 92, 94], "args1": [3, 28], "thirti": [3, 28], "args2": [3, 28], "aku": [3, 28, 29, 47, 87], "direct": [3, 28, 64, 70, 77], "intermedi": [3, 28], "revkei": [3, 28], "revindic": [3, 28], "revarg": [3, 28], "idx": [3, 24, 28, 29, 68], "right_align": [3, 28], "hand": [3, 28, 64, 96], "logic": [3, 20, 21, 28, 37, 41, 45, 46, 53, 56, 60, 85, 90, 92, 95, 99], "surviv": [3, 28], "search_interv": [3, 28], "uint": [3, 24, 28, 31, 40, 41, 56, 69], "compon": [3, 21, 23, 24, 26, 28, 29, 30, 40, 53, 54, 56, 57, 58, 61, 70, 72, 94], "dimens": [3, 4, 16, 20, 21, 24, 28, 37, 40, 56, 68, 70, 90, 91, 97, 99], "multi": [3, 20, 23, 26, 28, 31, 42, 54, 68, 87, 90, 92, 94, 97, 100, 101], "dimension": [3, 20, 28, 37, 41, 54, 86, 90, 97, 100], "satisfi": [3, 24, 28, 31], "condit": [3, 12, 24, 28, 37, 40, 89], "11": [3, 24, 28, 37, 53, 58, 61, 66, 68, 69, 89, 90, 93, 95, 96, 99], "end": [3, 21, 24, 28, 33, 35, 37, 40, 41, 53, 56, 57, 63, 85, 91, 92, 96, 99, 103], "9": [3, 21, 24, 26, 28, 31, 37, 40, 41, 53, 55, 56, 58, 61, 68, 78, 79, 86, 88, 89, 90, 92, 93, 94, 95, 96, 99, 103], "10": [3, 21, 24, 26, 28, 31, 37, 40, 41, 43, 44, 45, 46, 48, 49, 53, 54, 55, 56, 58, 60, 61, 68, 77, 79, 81, 86, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100], "6": [3, 20, 24, 26, 28, 29, 31, 37, 40, 41, 42, 50, 51, 53, 56, 58, 61, 68, 78, 79, 81, 82, 84, 86, 89, 90, 92, 93, 94, 95, 96, 99, 101, 103], "15": [3, 21, 24, 28, 44, 46, 56, 79, 90, 96, 98], "12": [3, 24, 26, 28, 31, 37, 48, 49, 53, 56, 58, 61, 81, 89, 90, 94, 96, 99], "30": [3, 28, 29, 48, 49, 54, 58, 65, 81, 90], "bi_start": [3, 28], "bigint_from_uint_arrai": [3, 28, 40, 41], "cast": [3, 4, 23, 28, 37, 40, 41, 56, 60, 85, 86, 92, 103], "uint64": [3, 8, 23, 25, 26, 28, 37, 40, 41, 45, 46, 55, 61, 70, 84, 88, 89, 92, 93, 95, 97, 103], "bi_end": [3, 28], "bi_val": [3, 28], "92233720368547758091": [3, 28], "92233720368547758090": [3, 28], "166020696663385964564": [3, 28], "36893488147419103233": [3, 28], "92233720368547758085": [3, 28], "92233720368547758095": [3, 28], "110680464442257309696": [3, 28], "110680464442257309708": [3, 28], "166020696663385964574": [3, 28], "unsqueez": [3, 28], "p": [3, 28, 40, 41, 48, 49], "zero_up": [3, 28], "wrapper": [4, 7, 9, 10, 11, 14, 16, 17, 23, 28, 97], "ndarrai": [4, 16, 20, 21, 28, 40, 41, 43, 53, 56, 68, 86, 89, 90, 91, 97, 99, 103], "differ": [4, 21, 22, 23, 24, 26, 28, 29, 31, 33, 37, 40, 41, 42, 52, 53, 54, 56, 57, 58, 60, 61, 66, 68, 69, 70, 72, 78, 79, 85, 86, 90, 92, 93, 94, 95, 101, 102], "particular": [4, 24, 28, 54, 80], "promot": [4, 60], "rule": [4, 28, 37, 97], "subset": [4, 21, 22, 24, 27, 28, 53, 80, 89, 93, 99], "goal": 4, "minim": [4, 24, 28, 65, 66, 92, 93], "compliant": 4, "onli": [4, 16, 21, 24, 26, 28, 29, 31, 33, 35, 37, 40, 41, 42, 44, 53, 54, 55, 56, 58, 60, 61, 63, 65, 66, 68, 70, 72, 77, 80, 81, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103], "subclass": 4, "n": [4, 16, 21, 24, 26, 28, 31, 37, 40, 41, 42, 44, 45, 46, 53, 54, 56, 57, 69, 79, 81, 84, 89, 90, 91, 92, 93, 94, 98, 99, 100], "docstr": [4, 7, 9, 10, 11, 14, 16, 17, 60], "np": [4, 7, 9, 10, 11, 14, 16, 17, 20, 21, 24, 25, 26, 28, 33, 37, 40, 41, 43, 50, 51, 53, 54, 56, 57, 58, 68, 86, 89, 90, 91, 92, 93, 94, 95, 97, 99, 103], "restrict": [4, 16], "usag": [4, 16, 24, 28, 29, 54, 67, 75, 84, 99, 102], "underscor": [4, 16], "construct": [4, 16, 21, 28, 41, 44, 53, 56, 60, 68, 85, 94, 96, 98], "directli": [4, 16, 21, 28, 40, 54, 55, 56, 68, 77, 88, 90, 91, 93, 97, 103], "rather": [4, 16, 21, 24, 28, 56], "creation": [4, 16, 21, 28, 60, 64, 85], "asarrai": [4, 6, 16], "devic": [4, 6, 16], "_type": [4, 6, 7, 15], "mt": [4, 16], "ndim": [4, 16, 20, 21, 28, 40, 56, 85, 90, 91, 97], "ellipsi": [4, 6, 7, 11, 12, 15, 16, 17, 28, 40, 41, 45, 46, 58], "convert": [4, 16, 20, 21, 23, 24, 28, 29, 37, 40, 41, 53, 54, 56, 57, 58, 69, 86, 90, 91, 93, 97, 99, 100, 101, 103], "to_devic": [4, 16], "stream": [4, 16, 28, 44, 46, 65, 98], "to_ndarrai": [4, 16, 20, 21, 23, 28, 29, 37, 40, 41, 43, 53, 56, 57, 68, 85, 86, 90, 91, 95, 97, 99, 103], "tolist": [4, 16], "nest": [4, 16, 28, 31, 70, 86], "transpos": [4, 11, 16, 53, 86], "view": [4, 16, 20, 28, 64, 68, 73, 77, 83, 90, 97], "revers": [4, 16, 23, 26, 28], "handled_funct": 4, "dict": [4, 21, 22, 24, 26, 28, 29, 30, 31, 32, 44, 46, 47, 54, 58, 93, 94, 98], "callabl": [4, 23, 24, 28, 93], "implements_numpi": 4, "numpy_funct": 4, "__array_function__": 4, "myarrai": [4, 28, 58], "inf": [5, 28, 37], "nan": [5, 24, 26, 28, 37, 54, 58, 93, 94, 97], "pi": [5, 28, 37], "stop": [6, 22, 28, 41, 92, 96], "_array_object": [6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 19], "obj": [6, 28, 31, 58], "nestedsequ": 6, "supportsbufferprotocol": [6, 16], "copi": [6, 7, 11, 20, 24, 28, 29, 31, 53, 55, 99], "empti": [6, 23, 24, 26, 28, 31, 37, 40, 42, 53, 54, 56, 77, 89, 92, 93, 95, 100], "empty_lik": 6, "ey": 6, "n_row": 6, "n_col": 6, "k": [6, 28, 40, 61, 89, 95], "from_dlpack": 6, "full": [6, 21, 28, 35, 37, 41, 43, 56, 57, 63, 65, 75, 77, 79, 83, 91, 103], "fill_valu": [6, 28, 41], "full_lik": [6, 28, 41], "linspac": [6, 26, 28, 37, 41, 85, 89, 92, 94, 97], "num": [6, 22, 25, 28, 37], "endpoint": [6, 28, 44, 46, 98], "meshgrid": 6, "xy": 6, "ones_lik": [6, 28, 41, 85, 92], "tril": 6, "triu": 6, "zero": [6, 26, 28, 37, 40, 41, 64, 85, 92, 94, 96, 97], "zeros_lik": [6, 28, 41, 85, 92], "astyp": [7, 24, 28, 40, 56], "can_cast": 7, "from_": 7, "compat": [7, 9, 10, 11, 14, 17, 21, 24, 28, 40, 53, 57, 58, 93, 94], "finfo_object": 7, "ep": 7, "max": [7, 15, 26, 28, 37, 40, 53, 56, 61, 85, 89, 94, 95, 103], "min": [7, 15, 26, 28, 37, 40, 53, 61, 85, 89, 94, 95], "smallest_norm": 7, "iinfo_object": 7, "isdtyp": 7, "kind": [7, 25, 28], "whether": [7, 21, 24, 26, 28, 31, 33, 35, 37, 42, 53, 54, 56, 57, 68, 86, 91, 99, 100, 101, 103], "org": [7, 24, 28, 48, 49, 54, 58, 60, 90], "latest": [7, 28, 58, 60, 78, 79, 82], "api_specif": [7, 28, 58], "gener": [7, 16, 21, 22, 24, 27, 28, 33, 34, 37, 40, 41, 43, 44, 45, 46, 48, 49, 52, 54, 57, 59, 60, 61, 65, 66, 68, 69, 70, 72, 77, 78, 82, 84, 85, 86, 89, 92, 98, 100], "html": [7, 24, 28, 48, 49, 54, 58, 60, 77, 90], "result_typ": 7, "arrays_and_dtyp": 7, "complex128": [8, 25, 28], "complex64": [8, 25, 28], "float32": [8, 25, 28, 89, 92, 95], "float64": [8, 24, 25, 26, 28, 29, 37, 40, 41, 42, 45, 46, 48, 49, 50, 51, 55, 61, 69, 70, 84, 88, 89, 92, 93, 94, 95, 97, 101], "int16": [8, 25, 28, 89, 92, 95, 97, 103], "int32": [8, 25, 28, 89, 92, 95, 97, 103], "int8": [8, 25, 28, 89, 92, 95, 97, 103], "uint16": [8, 25, 28, 89, 92, 95, 97, 103], "uint32": [8, 25, 28, 31, 86, 89, 92, 95, 97, 103], "uint8": [8, 25, 28, 37, 56, 70, 89, 92, 95, 97, 103], "ab": [9, 28, 37, 57, 85, 89], "aco": 9, "arcco": [9, 28, 37], "acosh": 9, "arccosh": [9, 28, 37], "x1": [9, 12, 19], "x2": [9, 12, 19], "asin": 9, "arcsin": [9, 28, 37], "asinh": 9, "arcsinh": [9, 28, 37], "atan": 9, "arctan": [9, 28, 37], "atan2": 9, "arctan2": [9, 28, 37], "atanh": 9, "arctanh": [9, 28, 37], "bitwise_and": 9, "bitwise_invert": 9, "invert": [9, 26, 28, 42, 101], "bitwise_left_shift": 9, "left_shift": 9, "bitwise_or": 9, "bitwise_right_shift": 9, "right_shift": 9, "bitwise_xor": 9, "ceil": [9, 28, 37], "conj": 9, "co": [9, 26, 28, 37, 41, 85, 89, 94], "cosh": [9, 28, 37], "divid": [9, 28, 40], "equal": [9, 24, 28, 33, 37, 44, 46, 70, 72, 95, 98, 99], "exp": [9, 28, 37, 41, 85, 89], "expm1": [9, 28, 37], "floor": [9, 28, 37, 40], "floor_divid": [9, 28, 40], "greater": [9, 28, 41, 44, 46, 92, 98], "greater_equ": 9, "imag": 9, "isfinit": [9, 28, 37], "isinf": [9, 28, 37], "isnan": [9, 28, 37], "less": [9, 21, 26, 28, 29, 40, 44, 46, 53, 56, 98], "less_equ": 9, "log10": [9, 28, 37], "log1p": [9, 28, 37], "log2": [9, 28, 37], "logaddexp": 9, "logical_and": 9, "logical_not": 9, "logical_or": 9, "logical_xor": 9, "multipli": [9, 26, 28, 44, 46, 60, 94, 98], "neg": [9, 28, 41, 44, 53, 63, 92, 96, 98, 99], "not_equ": 9, "posit": [9, 24, 28, 35, 36, 40, 54, 56, 96, 100, 103], "pow": 9, "power": [9, 28, 40, 48, 49, 74, 96], "remaind": [9, 28, 40, 56, 103], "round": [9, 28, 37, 61], "sign": [9, 28, 31, 37, 40, 44, 46, 86, 93, 97, 98], "sin": [9, 28, 37, 85, 89], "sinh": [9, 28, 37], "sqrt": [9, 26, 28, 40, 89, 94], "squar": [9, 26, 28, 37, 40, 48, 49, 89, 94], "subtract": 9, "tan": [9, 28, 37], "tanh": [9, 28, 37], "trunc": [9, 28, 37], "axi": [10, 11, 12, 14, 15, 17, 19, 24, 28, 29, 43, 53, 54, 55, 88, 93, 99, 100], "broadcast_arrai": 11, "broadcast_to": 11, "broadcast": [11, 26, 28, 37, 40, 58, 85, 89, 94], "concat": [11, 24, 28, 29, 53, 54, 93, 100], "concaten": [11, 21, 24, 28, 42, 53, 54, 56, 58, 60, 85, 99, 100, 103], "expand_dim": 11, "flip": 11, "moveaxi": 11, "destin": 11, "permute_dim": 11, "reshap": [11, 20, 28, 40, 85, 90], "roll": 11, "shift": 11, "squeez": 11, "stack": [11, 103], "tile": 11, "repetit": 11, "unstack": 11, "argmax": [12, 26, 28, 40, 53, 85, 89, 94, 95], "keepdim": [12, 15, 17], "argmin": [12, 26, 28, 40, 53, 85, 89, 94, 95], "nonzero": [12, 26, 28, 36, 56, 103], "searchsort": 12, "liter": [12, 91, 103], "sorter": 12, "uniqueallresult": 13, "namedtupl": [13, 28, 48, 49], "count": [13, 24, 26, 28, 36, 37, 40, 53, 54, 56, 61, 68, 85, 89, 94, 99, 103], "inverse_indic": 13, "uniquecountsresult": 13, "uniqueinverseresult": 13, "unique_al": 13, "unique_count": 13, "unique_invers": 13, "unique_valu": [13, 28, 37, 40, 95], "argsort": [14, 21, 22, 24, 26, 28, 29, 40, 55, 85, 88, 89, 91, 93, 94, 103], "descend": [14, 24, 28, 41, 54, 92, 93, 100], "stabl": [14, 28, 55, 88, 90], "mean": [15, 22, 24, 26, 28, 31, 40, 41, 44, 46, 52, 53, 56, 61, 85, 86, 89, 94, 95, 98], "mean_shim": 15, "prod": [15, 26, 28, 40, 53, 85, 89, 94, 95], "prod_sum_dtyp": 15, "std": [15, 26, 28, 40, 57, 85, 89, 94, 95], "sum": [15, 24, 26, 28, 37, 40, 53, 57, 58, 85, 89, 94, 95], "annot": 16, "aren": [16, 78, 79], "signatur": [16, 27, 60], "input": [16, 21, 23, 24, 26, 29, 37, 40, 41, 42, 53, 55, 57, 58, 60, 64, 86, 88, 89, 91, 94, 97, 100, 101], "pycapsul": 16, "supportsdlpack": 16, "protocol": 16, "proto": 16, "def": [16, 60, 69, 80], "meth": 16, "self": [16, 21, 24, 28, 40, 53, 56, 86, 87, 90, 91, 93, 97, 98, 99, 100, 103], "Such": 16, "primarili": [16, 86], "static": [16, 21, 24, 26, 28, 29, 40, 53, 54, 56, 94], "checker": 16, "recogn": 16, "structur": [16, 21, 24, 28, 53, 68, 72, 93, 94, 97, 99, 103], "subtyp": 16, "duck": 16, "c": [16, 20, 21, 24, 28, 29, 40, 41, 42, 43, 53, 54, 56, 58, 61, 63, 65, 78, 84, 90, 93, 97, 99, 101, 103], "func": 16, "pep": 16, "544": 16, "decor": 16, "runtime_check": 16, "act": [16, 28, 40, 60], "runtim": [16, 22, 63], "presenc": 16, "ignor": [16, 24, 26, 28, 31, 37, 57, 86, 93, 97], "genproto": 16, "linalg": [18, 28, 59], "matmul": 19, "matrix": [19, 24, 26, 28, 58, 94], "product": [19, 26, 28, 37, 40, 41, 86, 89, 90, 94, 95], "matrix_transpos": 19, "tensordot": 19, "vecdot": 19, "arrayview": [20, 28, 31, 37, 40, 85, 86, 97], "pdarrayclass": [20, 21, 23, 24, 26, 28, 29, 31, 33, 35, 37, 41, 42, 45, 46, 50, 51, 53, 54, 55, 56, 58, 59, 93], "row_major": [20, 28, 40, 90], "arraryview": [20, 28, 90], "similarli": [20, 28, 61, 68, 90], "store": [20, 23, 24, 26, 28, 29, 31, 41, 45, 46, 52, 56, 61, 69, 70, 73, 82, 86, 90, 91, 92, 94, 99, 103], "being": [20, 24, 28, 29, 31, 37, 40, 54, 68, 70, 71, 72, 80, 86, 90, 93, 96, 100], "element": [20, 21, 24, 26, 28, 32, 33, 35, 37, 40, 41, 42, 53, 54, 56, 57, 60, 68, 80, 85, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 103], "int_scalar": [20, 21, 24, 25, 26, 28, 31, 37, 40, 41, 45, 46, 53, 55, 56, 57, 88, 89, 90, 92, 94, 95, 97], "items": [20, 28, 40, 41, 56, 85, 86, 90, 97], "byte": [20, 21, 24, 25, 28, 29, 31, 33, 40, 41, 54, 56, 58, 70, 75, 86, 90, 91, 93, 97, 103], "read": [20, 21, 24, 28, 29, 31, 32, 40, 48, 49, 54, 56, 69, 70, 71, 72, 90, 103], "By": [20, 21, 23, 24, 26, 28, 29, 31, 37, 40, 42, 53, 56, 57, 90, 94, 101, 103], "f": [20, 21, 28, 37, 40, 41, 56, 75, 78, 79, 81, 86, 89, 90, 103], "column_major": [20, 28, 40, 90], "objtyp": [20, 21, 24, 26, 28, 29, 40, 53, 54, 56, 70], "to_hdf": [20, 21, 23, 24, 26, 28, 29, 31, 40, 53, 56, 70, 73, 85, 86, 94], "prefix_path": [20, 21, 23, 24, 26, 28, 29, 31, 40, 53, 56, 94], "dataset": [20, 21, 23, 24, 26, 28, 29, 31, 40, 53, 56, 69, 70, 72, 73, 94, 103], "truncat": [20, 21, 23, 26, 28, 29, 31, 37, 40, 53, 56, 70, 72, 94], "file_typ": [20, 21, 23, 24, 26, 28, 29, 31, 40, 53, 56, 94], "distribut": [20, 21, 23, 24, 26, 28, 29, 31, 40, 41, 43, 44, 45, 46, 53, 56, 75, 78, 79, 86, 89, 90, 91, 92, 94, 97, 98, 101, 103], "save": [20, 21, 24, 26, 28, 29, 31, 40, 53, 56, 61, 62, 64, 65, 70, 71, 72, 86, 91, 94, 101], "path": [20, 24, 28, 29, 31, 32, 40, 52, 61, 66, 77, 78, 79, 80, 82, 86], "append": [20, 21, 24, 26, 28, 29, 31, 40, 42, 53, 56, 70, 72, 85, 92, 94, 103], "overwrit": [20, 21, 24, 26, 28, 29, 31, 40, 53, 56, 94, 97], "exist": [20, 21, 22, 24, 26, 28, 29, 31, 32, 40, 41, 53, 54, 56, 70, 72, 77, 92, 93, 94, 102], "format": [20, 21, 22, 23, 24, 28, 29, 30, 31, 40, 52, 53, 54, 56, 60, 68, 70, 71, 72, 80, 93, 99, 102, 103], "date": [20, 28, 57, 64], "to_list": [20, 21, 23, 28, 29, 40, 53, 54, 56, 68, 86, 90, 97, 99, 103], "transfer": [20, 21, 24, 28, 31, 40, 53, 56, 61, 86, 90, 91, 93, 97, 99, 103], "client": [20, 21, 24, 28, 40, 41, 56, 57, 59, 71, 77, 78, 79, 80, 81, 82, 85, 90, 91, 93, 97, 99, 103], "exce": [20, 21, 24, 28, 40, 41, 45, 46, 56, 57, 58, 86, 90, 91, 92, 93, 97, 103], "maxtransferbyt": [20, 21, 24, 28, 40, 41, 56, 57, 86, 90, 91, 93, 97, 103], "runtimeerror": [20, 21, 22, 24, 26, 28, 29, 30, 31, 35, 37, 40, 41, 42, 53, 54, 56, 57, 86, 89, 90, 91, 92, 94, 95, 97, 101, 102, 103], "error": [20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 34, 35, 37, 40, 41, 53, 54, 56, 57, 60, 70, 72, 82, 86, 89, 90, 91, 93, 94, 95, 97, 102, 103], "thrown": [20, 21, 24, 28, 29, 30, 31, 35, 40, 41, 53, 54, 56, 86, 89, 90, 91, 95, 97, 103], "receiv": [20, 21, 22, 24, 28, 29, 31, 40, 53, 56, 86, 90, 97, 102], "doe": [20, 21, 22, 24, 26, 28, 29, 31, 32, 40, 41, 43, 53, 54, 56, 65, 68, 70, 72, 86, 90, 91, 92, 93, 94, 97, 100, 102, 103], "protect": [20, 21, 28, 40, 41, 56, 86, 90, 91, 97, 103], "overflow": [20, 21, 28, 37, 40, 56, 86, 90, 91, 97, 103], "memori": [20, 21, 22, 24, 28, 29, 31, 40, 53, 54, 56, 66, 67, 70, 75, 86, 90, 91, 97, 103], "run": [20, 21, 22, 24, 28, 31, 37, 40, 53, 56, 65, 66, 68, 75, 77, 78, 79, 81, 82, 84, 86, 90, 91, 97, 99, 102, 103], "assumpt": [20, 21, 28, 40, 41, 56, 86, 90, 91, 97, 103], "mai": [20, 21, 24, 28, 29, 31, 40, 41, 42, 44, 56, 68, 70, 75, 77, 79, 81, 82, 86, 90, 91, 92, 93, 97, 98, 103], "overrid": [20, 21, 23, 28, 40, 41, 56, 65, 86, 90, 91, 97, 103], "larger": [20, 21, 28, 40, 41, 56, 64, 68, 86, 90, 91, 97, 103], "proce": [20, 21, 28, 40, 41, 56, 86, 90, 91, 97, 103], "caution": [20, 21, 28, 40, 41, 56, 86, 90, 91, 97, 103], "3": [20, 24, 26, 28, 29, 31, 35, 37, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 58, 60, 61, 68, 69, 70, 78, 79, 81, 84, 85, 86, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 101, 103], "4": [20, 21, 24, 26, 28, 29, 31, 35, 37, 40, 41, 42, 44, 45, 46, 50, 51, 53, 54, 55, 56, 58, 61, 68, 70, 78, 79, 81, 86, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 101, 103], "attribut": [20, 21, 24, 29, 31, 40, 56, 57, 86, 90, 97], "update_hdf": [20, 21, 23, 24, 26, 28, 29, 31, 40, 53, 56], "repack": [20, 21, 23, 24, 26, 28, 29, 31, 40, 53, 56], "ad": [20, 21, 23, 24, 28, 29, 31, 34, 40, 53, 56, 65, 67, 68, 72, 77, 86, 102], "directori": [20, 21, 24, 26, 28, 29, 31, 32, 40, 52, 53, 56, 61, 62, 65, 66, 75, 77, 78, 79, 80, 81, 82, 83, 84, 94], "filenam": [20, 21, 24, 26, 28, 29, 31, 40, 53, 56, 61, 86, 94], "prefix": [20, 21, 24, 26, 28, 29, 31, 40, 53, 56, 57, 85, 94, 103], "share": [20, 21, 24, 26, 28, 29, 40, 53, 56, 64, 82, 94], "releas": [20, 21, 24, 28, 29, 31, 40, 53, 56, 61, 66, 67, 78, 79, 98], "delet": [20, 21, 22, 23, 24, 26, 28, 29, 31, 40, 53, 54, 56, 57, 61, 66, 75, 94], "inaccess": [20, 21, 24, 28, 29, 31, 40, 53, 56], "overwritten": [20, 21, 24, 28, 29, 31, 40, 53, 56, 70, 72], "remov": [20, 21, 24, 28, 29, 31, 40, 53, 56, 61, 65, 81, 93, 99, 103], "remain": [20, 21, 24, 28, 29, 31, 40, 53, 56, 78, 86, 87, 93, 100], "better": [20, 21, 24, 28, 29, 31, 40, 53, 56], "perform": [20, 21, 24, 26, 28, 29, 31, 33, 37, 40, 42, 53, 56, 61, 63, 64, 65, 68, 69, 71, 77, 85, 86, 89, 92, 93, 94, 97], "caus": [20, 21, 24, 28, 29, 31, 40, 53, 56, 75, 77], "expand": [20, 21, 24, 28, 29, 31, 40, 53, 56, 58, 86], "success": [20, 21, 22, 24, 28, 29, 31, 33, 37, 40, 53, 56, 97, 102], "file_format": [20, 21, 24, 28, 29, 31, 40, 53, 56], "_local": [20, 21, 24, 28, 29, 31, 40, 53, 56, 70], "determin": [20, 21, 24, 26, 28, 29, 31, 40, 53, 56, 58, 64, 70, 80, 86, 91, 93, 94], "becaus": [20, 21, 24, 28, 29, 31, 37, 41, 45, 46, 53, 56, 65, 68, 69, 70, 71, 75, 86, 91, 92, 93, 99, 103], "kwarg": [21, 24, 26, 28, 41, 47, 54, 57, 58, 91, 94], "repres": [21, 23, 26, 28, 53, 54, 56, 57, 61, 70, 91, 94, 103], "belong": [21, 28, 91], "often": [21, 28, 91, 95], "speed": [21, 28, 42, 63, 67, 80, 91, 92, 101], "oper": [21, 22, 23, 24, 26, 28, 29, 31, 40, 52, 53, 55, 56, 60, 61, 64, 71, 75, 81, 83, 84, 85, 88, 93, 94, 96, 102], "cost": [21, 28, 91], "initi": [21, 22, 28, 40, 41, 44, 45, 46, 61, 79, 84, 91, 92, 97, 98, 102], "navalu": [21, 28, 91], "miss": [21, 24, 28, 54, 91], "null": [21, 28, 31, 56, 70, 91, 103], "permut": [21, 24, 26, 28, 55, 56, 58, 70, 85, 88, 91, 94, 101], "segment": [21, 26, 28, 31, 33, 53, 56, 58, 70, 85, 86, 91, 94, 99, 101, 103], "offset": [21, 26, 28, 31, 41, 56, 70, 86, 91, 101, 103], "union": [21, 22, 24, 28, 30, 31, 33, 37, 40, 41, 42, 45, 46, 53, 55, 56, 68, 85, 86, 88, 89, 91, 92, 95, 101, 103], "nlevel": [21, 28, 85, 91], "distinct": [21, 24, 28, 91], "rank": [21, 28, 40, 41, 56, 70, 85, 86, 91, 92, 96], "nbyte": [21, 24, 28, 29, 40, 41, 54, 56, 58, 86], "binop": [21, 24, 28, 31, 40, 53, 56], "registerablepiec": [21, 28], "requiredpiec": [21, 28], "attach": [21, 23, 24, 26, 28, 29, 40, 53, 54, 56, 57, 58, 85, 94], "user_defined_nam": [21, 23, 24, 26, 28, 29, 40, 53, 54, 56, 57, 94], "deprec": [21, 24, 26, 28, 29, 31, 40, 53, 54, 56, 57, 64, 86, 94], "is_regist": [21, 23, 24, 26, 28, 29, 40, 53, 54, 56, 57, 58, 85, 94], "unregist": [21, 23, 24, 26, 28, 29, 40, 53, 54, 56, 57, 58, 85, 94], "unregister_categorical_by_nam": [21, 28], "merg": [21, 24, 28, 58, 64], "synchron": [21, 28], "interleav": [21, 24, 28, 42, 92], "greatli": [21, 28, 42, 92], "improv": [21, 28, 42, 64, 65, 80, 92], "determinist": [21, 28, 42, 92], "expens": [21, 28], "slower": [21, 28, 103], "substr": [21, 23, 28, 56, 85, 91], "str_scalar": [21, 25, 28, 36, 56, 91, 103], "regex": [21, 28, 56, 91, 103], "regular": [21, 28, 56, 85, 91], "handl": [21, 22, 24, 28, 37, 56, 71, 86, 91, 93, 97, 103], "re2": [21, 28, 56, 77, 91, 103], "lookahead": [21, 28, 56, 91, 103], "lookbehind": [21, 28, 56, 91, 103], "rasi": [21, 28, 56, 91, 103], "startswith": [21, 28, 56, 85, 91, 103], "endswith": [21, 28, 56, 85, 91, 103], "significantli": [21, 28, 65, 91], "instead": [21, 23, 24, 26, 28, 31, 40, 44, 46, 56, 61, 84, 86, 89, 91, 94, 98, 103], "classmethod": [21, 23, 24, 28, 29, 53, 54, 91], "from_cod": [21, 28, 85, 91], "pre": [21, 28, 58, 91], "comput": [21, 22, 24, 26, 28, 33, 37, 40, 48, 49, 50, 51, 53, 56, 60, 68, 86, 89, 91, 93, 94, 95, 97, 99, 101, 103], "constructor": [21, 28, 44, 46, 53, 68, 91, 98], "normal": [21, 22, 23, 24, 26, 28, 40, 41, 44, 45, 46, 57, 60, 89, 91, 93, 94, 98], "from_return_msg": [21, 23, 24, 26, 28, 29, 53, 54, 56], "rep_msg": [21, 23, 24, 26, 28, 29, 53, 56, 80], "place": [21, 23, 24, 26, 28, 29, 31, 34, 40, 52, 53, 54, 56, 57, 58, 62, 66, 89, 93, 94], "togeth": [21, 24, 26, 28, 56, 58, 93, 94, 101], "instanc": [21, 23, 24, 26, 28, 40, 41, 54, 56, 61, 72, 77, 80, 86, 89, 93, 94, 95, 97, 103], "guarante": [21, 28, 55, 56, 88, 98, 103], "lie": [21, 28, 56], "contigu": [21, 28, 33, 56], "necessarili": [21, 28, 54, 56], "groupbi": [21, 24, 26, 28, 31, 53, 56, 58, 85, 91, 103], "simpli": [21, 22, 28, 37, 92], "even": [21, 24, 26, 28, 40, 70, 89, 93, 94, 102], "128": [21, 28, 37, 53, 56], "hash": [21, 28, 37, 53, 55, 56, 88], "ith": [21, 28, 53, 56], "siphash128": [21, 28, 56], "balanc": [21, 28, 56], "dictionari": [21, 22, 24, 26, 28, 31, 32, 44, 46, 56, 58, 80, 86, 93, 94, 98], "realist": [21, 28, 56], "about": [21, 22, 28, 30, 40, 56, 57, 60, 61, 65, 75, 80, 89, 90, 103], "probabl": [21, 28, 44, 46, 56, 98], "collis": [21, 28, 37, 56], "neglig": [21, 28, 56], "in1d": [21, 28, 42, 60, 68, 85, 91, 101, 103], "against": [21, 28, 53, 56, 61, 68, 86, 99, 103], "intersect1d": [21, 28, 42, 53, 60, 68, 85, 99, 101], "union1d": [21, 28, 42, 53, 60, 68, 85, 99, 101], "consid": [21, 28, 54, 64, 103], "wise": [21, 28, 37, 40, 85, 90], "b": [21, 22, 24, 26, 28, 29, 31, 33, 37, 40, 41, 42, 43, 44, 46, 53, 54, 55, 56, 58, 68, 84, 88, 89, 93, 94, 95, 96, 97, 98, 99, 101, 103], "scale": [21, 28, 43, 48, 49, 63, 68, 74], "arbitrarili": [21, 28], "larg": [21, 28, 61, 89], "cat": [21, 28, 31, 82], "cattwo": [21, 28], "json": [21, 22, 28, 30, 40, 52, 56], "bool_": [21, 28, 40, 56, 57, 89, 95], "registri": [21, 24, 26, 28, 29, 30, 40, 54, 56, 57, 58, 94], "registrationerror": [21, 23, 24, 26, 28, 29, 40, 53, 54, 56, 57, 94], "mi": [21, 28, 29, 54, 57], "immun": [21, 23, 24, 26, 28, 29, 40, 53, 54, 56, 57, 94], "until": [21, 23, 24, 26, 28, 29, 40, 53, 54, 56, 57, 66, 94], "isna": [21, 28, 54], "parse_hdf_categor": [21, 28], "conjunct": [21, 28, 86, 91, 103], "load_al": [21, 24, 28, 29, 31, 40, 56, 73], "reconstitut": [21, 28], "convent": [21, 28], "In": [21, 24, 26, 28, 31, 37, 40, 44, 46, 56, 60, 61, 62, 64, 65, 68, 75, 77, 78, 80, 82, 86, 89, 94, 95, 96, 98, 99, 102, 103], "call": [21, 22, 23, 24, 26, 28, 31, 40, 41, 44, 45, 46, 53, 54, 56, 60, 68, 72, 75, 77, 79, 80, 86, 89, 90, 92, 93, 94, 97, 98, 102], "pretty_print_info": [21, 28, 40, 56], "human": [21, 28, 30, 40, 56], "readabl": [21, 28, 30, 31, 40, 56, 70, 86], "underli": [21, 23, 24, 26, 28, 29, 37, 53, 54, 57, 94], "root": [21, 23, 24, 26, 28, 29, 40, 54, 57, 61, 70, 78, 86, 89, 94], "now": [21, 23, 24, 26, 28, 29, 40, 44, 53, 54, 56, 57, 58, 60, 65, 66, 69, 72, 77, 78, 79, 94, 98], "updat": [21, 23, 24, 26, 28, 29, 31, 40, 43, 53, 54, 56, 57, 72, 77, 82, 86, 94], "modif": [21, 23, 24, 26, 28, 29, 40, 53, 54, 56, 57, 80, 93, 94], "origin": [21, 23, 24, 26, 28, 29, 31, 35, 37, 40, 42, 53, 54, 56, 57, 89, 91, 92, 93, 94, 99, 103], "fluid": [21, 23, 24, 26, 28, 29, 40, 53, 54, 56, 57, 94], "unabl": [21, 23, 24, 26, 28, 29, 40, 54, 56, 57, 94], "reset_categori": [21, 28], "recomput": [21, 28, 31], "unus": [21, 28, 31, 86], "slice": [21, 24, 28, 40, 68, 85, 90, 91, 93, 99, 103], "case": [21, 22, 26, 28, 29, 31, 37, 40, 44, 46, 54, 56, 57, 61, 63, 68, 69, 70, 72, 77, 78, 80, 82, 89, 98, 100], "elimin": [21, 28, 72], "categorical_arrai": [21, 28], "compress": [21, 24, 28, 29, 31, 40, 53, 56, 61, 96, 99], "parquet": [21, 24, 26, 28, 29, 31, 40, 53, 56, 61, 69, 71, 73, 86, 94], "collect": [21, 24, 26, 28, 29, 31, 40, 47, 53, 56, 78, 94], "chunk": [21, 28, 29, 31, 40, 53, 56], "within": [21, 22, 24, 26, 27, 28, 29, 31, 40, 41, 44, 46, 53, 56, 60, 61, 70, 72, 92, 93, 94, 98, 99], "written": [21, 24, 26, 28, 29, 31, 32, 34, 40, 53, 54, 56, 69, 70, 71, 72, 73, 77, 86, 94, 97], "impact": [21, 26, 28, 29, 40, 53, 63, 64, 66, 94], "snappi": [21, 24, 28, 29, 31, 40, 53, 56, 61, 72, 77], "gzip": [21, 24, 28, 29, 31, 40, 53, 56, 61, 72], "brotli": [21, 24, 28, 29, 31, 40, 53, 56, 61, 72], "zstd": [21, 24, 28, 29, 31, 40, 53, 56, 61, 72], "lz4": [21, 24, 28, 29, 31, 40, 53, 56, 61, 72], "neither": [21, 28, 29, 40, 41, 56, 57, 92, 103], "nor": [21, 28, 29, 40, 41, 56, 92, 103], "import": [21, 23, 24, 28, 29, 31, 37, 43, 48, 49, 50, 51, 52, 54, 56, 58, 60, 64, 70, 75, 77, 80, 93, 95, 102], "state": [21, 28, 44, 46, 56, 64, 98], "charact": [21, 22, 23, 27, 28, 41, 54, 56, 80, 103], "set_categori": [21, 28], "new_categori": [21, 28], "old": [21, 28, 64], "unchang": [21, 28], "na": [21, 28, 54, 70], "standardize_categori": [21, 28], "remap": [21, 28], "load": [21, 24, 28, 29, 31, 40, 53, 56, 69, 70, 72, 73, 82, 86], "produc": [21, 28, 56, 91, 98, 103], "to_parquet": [21, 24, 28, 29, 31, 40, 53, 56, 72, 73, 86], "On": [21, 22, 28, 102], "due": [21, 24, 28, 31, 69, 72, 86], "issu": [21, 24, 26, 28, 60, 64, 77, 82, 94, 99], "visibl": [21, 22, 28, 29, 31, 40, 53, 56, 102], "permiss": [21, 28, 29, 40, 53, 56], "form": [21, 25, 28, 29, 40, 52, 53, 56, 64, 80, 103], "numlocal": [21, 22, 24, 28, 29, 31, 40, 53, 56, 102], "effici": [21, 24, 28, 29, 40, 56, 99, 103], "o": [21, 24, 28, 29, 40, 52, 53, 56, 83, 85], "reli": [21, 28, 29, 40, 53, 56, 94], "to_str": [21, 28], "connect": [21, 22, 24, 28, 29, 41, 48, 49, 50, 51, 52, 54, 58, 60, 65, 82, 85, 86, 93], "isinst": [21, 28, 60], "send": [21, 22, 24, 28, 31, 40, 41, 53, 56, 60, 86, 93, 102], "node": [21, 24, 28, 31, 40, 53, 56, 61, 70, 84, 86], "1234": [21, 24, 28, 31, 40, 53, 56, 64], "1235": [21, 24, 28, 31, 40, 53, 56], "1236": [21, 24, 28, 31, 40, 53, 56], "1237": [21, 24, 28, 31, 40, 53, 56], "receive_arrai": [21, 24, 28, 40, 53, 56], "complet": [21, 22, 24, 28, 40, 53, 56, 60, 62, 64, 77, 79, 102, 103], "op": [21, 23, 24, 28, 31, 40, 53, 56, 61], "previous": [21, 24, 26, 28, 29, 31, 40, 53, 54, 56, 57, 94], "attempt": [21, 24, 26, 28, 29, 31, 40, 53, 54, 55, 56, 57, 77, 86, 93, 94], "without": [21, 24, 28, 31, 40, 66, 75, 77, 86, 93], "localhost": [22, 75, 102], "5555": [22, 75, 102], "access_token": [22, 102], "connect_url": [22, 75, 102], "access_channel": [22, 102], "channel": [22, 102], "machin": [22, 61, 62, 65, 75, 78, 79, 102], "whicn": [22, 102], "interpret": [22, 28, 31, 61, 86, 102], "socket": [22, 102], "enabl": [22, 28, 34, 40, 52, 65, 77, 78, 80, 86, 102], "authent": [22, 52, 75, 102], "tcp": [22, 75, 102], "token_valu": [22, 102], "zmqchannel": [22, 102], "connectionerror": [22, 102], "pars": [22, 23, 24, 28, 29, 40, 54, 60, 102], "seen": [22, 102], "disconnect": [22, 28, 40], "generate_histori": 22, "num_command": [22, 27], "command_filt": [22, 27], "command": [22, 27, 28, 40, 60, 61, 62, 64, 66, 75, 77, 79, 80, 81, 82, 102], "shell": [22, 27, 28, 31, 79, 86], "jupyt": [22, 27, 75], "notebook": [22, 27, 75], "ipython": [22, 27, 75], "cmd_filter": 22, "retriev": [22, 27, 28, 30, 40, 52, 54, 64], "select": [22, 24, 27, 28, 31, 53, 54, 60, 64, 77, 83, 93, 99], "10000": 22, "randint": [22, 26, 28, 37, 41, 45, 46, 55, 68, 85, 88, 89, 92, 94, 95], "500": [22, 62, 65], "457": 22, "647": 22, "9362": 22, "9602": 22, "9683": 22, "get": [22, 24, 25, 27, 28, 31, 37, 53, 54, 60, 61, 64, 65, 66, 78, 82, 86, 90, 97, 99], "serverhostnam": 22, "serverport": 22, "numpu": 22, "processor": [22, 61], "maxtaskpar": 22, "physicalmemori": 22, "get_mem_avail": 22, "as_perc": 22, "amount": [22, 24, 28, 40, 80, 93, 103], "kb": [22, 24, 28, 29, 54, 58], "mb": [22, 24, 28, 29, 54, 58], "gb": [22, 24, 28, 29, 54, 58], "tb": 22, "pb": 22, "percent": 22, "get_mem_statu": 22, "statu": 22, "total_mem": 22, "total": [22, 24, 26, 28, 31, 56, 61, 86, 94], "physic": [22, 35, 103], "host": [22, 24, 28, 52, 54, 77], "avail_mem": 22, "arkouda_mem_alloc": 22, "alloc": 22, "chapel": [22, 28, 37, 44, 60, 63, 65, 70, 74, 75, 77, 80, 81, 82, 83, 97, 98, 102, 103], "process": [22, 28, 30, 31, 54, 60, 67, 70, 75, 82, 86, 99, 103], "pct_avail_mem": 22, "percentag": [22, 58], "locale_id": 22, "id": [22, 61, 82, 94], "locale_hostnam": 22, "get_mem_us": 22, "symbol": [22, 28, 30, 40, 53, 56, 60, 97], "get_server_command": 22, "commandmap": [22, 60, 80], "print_server_command": 22, "ruok": 22, "imok": 22, "imnotok": 22, "occur": [22, 24, 26, 28, 31, 36, 37, 40, 54, 56, 60, 77, 94, 95, 100, 103], "basic": [22, 28, 29, 40, 52, 64, 82, 90, 97], "wai": [22, 61, 65, 70, 75, 80, 89, 91, 92, 93, 97, 98, 103], "quick": [22, 65], "healthcheck": 22, "respons": [22, 24, 28, 56, 60], "both": [22, 24, 28, 31, 33, 40, 42, 57, 65, 68, 70, 71, 75, 77, 86, 91, 101, 103], "latter": [22, 103], "shutdown": [22, 65, 66, 80], "symtabl": 22, "shut": [22, 75, 80], "down": [22, 63, 64, 66, 75, 77, 80], "bitvector": [23, 28], "width": [23, 28, 103], "64": [23, 28, 37, 40, 41, 45, 46, 61, 92, 93, 97], "vector": [23, 26, 28, 85, 94], "flag": [23, 28, 31, 43, 61, 66, 80, 102], "field": [23, 28, 41, 56, 64, 86, 103], "signific": [23, 28, 37, 40, 55, 64, 80, 88, 89], "binari": [23, 28, 41, 78, 79, 89], "thin": [23, 28], "mostli": [23, 28], "affect": [23, 28, 44, 46, 98], "conserv": [23, 28], "special_objtyp": [23, 28, 57], "opeq": [23, 28, 40], "export": [23, 28, 31, 37, 62, 65, 77, 78, 79, 82, 95], "callback": [23, 28], "msb_left": [23, 28], "pad": [23, 28, 64], "show_int": [23, 28], "back": [23, 26, 28, 58, 60, 63, 66, 86, 94], "represent": [23, 24, 28, 40], "accord": [23, 24, 28, 29, 37, 54, 58, 93, 97], "ipv4": [23, 28, 31, 86], "ip": [23, 28], "export_uint": [23, 28], "ipaddress": [23, 28], "special": [23, 28, 49, 54, 56, 59, 97, 100], "ip_address": [23, 28, 29, 87], "helper": [23, 28, 58], "proof": [23, 28], "made": [23, 24, 28, 56, 103], "accomod": [23, 28], "ipv6": [23, 28], "prevent": [23, 28, 31, 40, 53, 69, 70, 78, 99], "inadvert": [23, 28], "is_ipv4": [23, 28], "ip2": [23, 28], "well": [23, 28, 61, 68, 81], "deal": [23, 28], "is_ipv6": [23, 28], "initialdata": [24, 28, 93], "userdict": [24, 28, 47], "homogen": [24, 28, 93], "frame": [24, 28, 54, 93, 100], "stringifi": [24, 28, 93], "usernam": [24, 28, 52, 54, 93], "alic": [24, 28, 93], "bob": [24, 28, 93], "carol": [24, 28, 93], "userid": [24, 28, 93, 94], "111": [24, 28, 56, 93], "222": [24, 28, 93], "333": [24, 28, 93], "dai": [24, 28, 57, 64, 93, 94], "slightli": [24, 28, 31, 93], "stride": [24, 28, 33, 41, 92, 93, 96], "col1": [24, 28, 93], "col2": [24, 28, 93], "u0": [24, 28, 29], "multiindex": [24, 28, 29, 54, 87, 100], "use_seri": [24, 28, 93], "as_index": [24, 28, 93], "dropna": [24, 26, 28, 85, 93, 94], "groupbyclass": [24, 28, 42, 54, 59, 93, 101], "drop": [24, 26, 28, 40, 64, 89, 94], "kept": [24, 26, 28, 53, 93, 94], "7": [24, 26, 28, 29, 37, 40, 41, 42, 44, 45, 46, 50, 51, 53, 54, 55, 58, 68, 78, 79, 81, 86, 88, 89, 90, 92, 93, 94, 96, 98, 99, 101], "0x7f2cf23e10c0": [24, 28, 93], "00000000000000000": [24, 28, 29, 50, 51, 58, 93], "onto": [24, 28, 56, 103], "sens": [24, 28, 54], "whose": [24, 28, 53, 54, 56, 100], "df1": [24, 28], "df2": [24, 28], "apply_permut": [24, 28, 93], "perm": [24, 28, 55, 58, 88, 93], "entir": [24, 28, 53, 56, 61, 66, 93, 99], "modifi": [24, 28, 48, 49, 65, 93], "unsort": [24, 28, 93], "arbitrari": [24, 28, 93], "invers": [24, 28, 37, 58, 93], "perm_arri": [24, 28, 93], "ascend": [24, 26, 28, 29, 37, 40, 54, 87, 93, 95, 100], "coargsort": [24, 28, 55, 85, 88, 91, 93, 103], "sorted_df1": [24, 28, 93], "sorted_df2": [24, 28, 93], "my_table_nam": [24, 28], "col3": [24, 28, 93], "essenti": [24, 28, 40, 53, 56, 93, 99], "deep": [24, 28, 53, 93], "reflect": [24, 28, 79, 93, 99], "shallow": [24, 28, 93], "vice": [24, 28, 86, 93], "versa": [24, 28, 86, 93], "caller": [24, 28, 54, 93], "df_deep": [24, 28, 93], "df_shallow": [24, 28, 93], "corr": [24, 28, 40], "pairwis": [24, 28], "correl": [24, 28, 40], "pearson": [24, 28, 40, 48, 49], "inplac": [24, 28, 93], "datefram": [24, 28, 93], "drop_dupl": [24, 28, 93], "duplcat": [24, 28, 93], "iter": [24, 28, 31, 41, 55, 61, 85, 86, 88], "dedup": [24, 28, 93], "last": [24, 28, 40, 41, 54, 55, 56, 64, 80, 88, 93, 100, 102, 103], "filter_by_rang": [24, 28], "highest": [24, 28, 40, 41], "unlimit": [24, 28], "qualifi": [24, 28], "8": [24, 26, 28, 31, 37, 40, 41, 44, 45, 46, 48, 49, 50, 51, 53, 55, 56, 61, 68, 69, 79, 81, 86, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99], "filtered_df": [24, 28], "from_panda": [24, 28], "pd_df": [24, 28, 68, 93], "pd": [24, 28, 31, 41, 57, 58, 68, 86, 93], "core": [24, 27, 28, 61, 64, 93], "ak_df": [24, 28, 43, 93], "alia": [24, 26, 28, 53, 54, 57, 93, 94], "head": [24, 28, 54, 64], "quickli": [24, 28, 62, 93], "tail": [24, 28, 41, 54], "mismatch": [24, 26, 28, 77, 94], "unregister_dataframe_by_nam": [24, 28], "isin": [24, 28, 54], "show": [24, 28, 31, 43, 77, 86, 90, 94], "col_a": [24, 28], "col_b": [24, 28], "position": [24, 28], "other_df": [24, 28], "col_c": [24, 28], "infer": [24, 25, 26, 28, 31, 41, 70, 86], "my_dir": [24, 28], "my_data_locale0000": [24, 28], "my_data": [24, 28], "pathlib": [24, 28, 32, 52], "my_path": [24, 28], "join": [24, 28, 53, 56, 59, 60, 85], "getcwd": [24, 28], "hdf5_output": [24, 28], "mkdir": [24, 28], "exist_ok": [24, 28], "memory_usag": [24, 28, 29, 54], "contribut": [24, 28, 54, 60], "One": [24, 26, 28, 29, 40, 54, 58, 68, 94, 100], "5000": [24, 28], "40000": [24, 28], "39": [24, 28, 61], "0625": [24, 28], "88281": [24, 28], "approxim": [24, 28], "memory_usage_info": [24, 28], "1000": [24, 28, 29, 33, 87, 95], "00": [24, 28, 61], "inner": [24, 28, 33], "left_suffix": [24, 28], "_x": [24, 28], "right_suffix": [24, 28], "_y": [24, 28], "convert_int": [24, 28], "databas": [24, 28], "pydata": [24, 28, 54], "intersect": [24, 28, 42, 53, 68, 85, 101], "suffix": [24, 28, 31, 53, 56, 70, 85, 103], "effect": [24, 28, 57, 66, 101], "left_df": [24, 28], "right_df": [24, 28], "col2_x": [24, 28], "col2_i": [24, 28], "outer": [24, 28, 96], "read_csv": [24, 28, 31, 69, 73], "col_delim": [24, 28, 29, 31, 40, 56], "csv": [24, 28, 29, 31, 40, 56, 73, 86], "header": [24, 28, 29, 31, 40, 56, 86], "delimit": [24, 28, 29, 31, 32, 40, 54, 56, 61, 64, 69, 86, 103], "allow_error": [24, 28, 29, 31, 40, 56, 86], "unknown": [24, 28, 29, 31, 40, 41, 56], "arkouda_typ": [24, 28, 29, 31, 40, 56], "to_csv": [24, 28, 29, 31, 40, 56, 69, 73], "newlin": [24, 28, 29, 31, 40, 56, 69], "unlik": [24, 28, 31, 56, 57], "utf": [24, 28, 31, 56], "csv_output": [24, 28], "_locale0000": [24, 28], "renam": [24, 28], "mapper": [24, 28, 93], "nonexist": [24, 28, 93], "99": [24, 28, 61, 93], "lower": [24, 28, 44, 46, 56, 70, 93, 98], "reset_index": [24, 28, 93], "longer": [24, 28, 41, 70, 81, 93], "correctli": [24, 28, 82, 93], "perm_df": [24, 28, 93], "sampl": [24, 28, 37, 41, 44, 45, 46, 98], "random": [24, 28, 41, 43, 59, 61, 84, 85], "disk": [24, 28, 29, 31, 40, 56, 103], "preserv": [24, 28, 54, 100, 103], "sort_index": [24, 28, 54, 100], "sort_valu": [24, 28, 54, 93, 100], "denot": [24, 28, 29, 31, 40, 56, 57], "NOT": [24, 28, 29, 31, 37, 40, 56, 77, 86, 97], "across": [24, 28, 31, 70, 86, 98], "hdf_output": [24, 28], "to_markdown": [24, 28, 54], "wt": [24, 28, 54], "tablefmt": [24, 28, 54], "grid": [24, 28, 43, 54], "storage_opt": [24, 28, 54], "friendli": [24, 28, 54], "tablul": [24, 28, 54], "pypi": [24, 28, 54], "tabul": [24, 28, 54, 81], "extra": [24, 28, 54], "storag": [24, 28, 54, 61], "etc": [24, 28, 54, 64, 78, 82], "fsspec": [24, 28, 54], "s3": [24, 28, 54], "gc": [24, 28, 54], "backend": [24, 28, 54, 63, 77], "small": [24, 28, 37, 54, 70, 86], "animal_1": [24, 28], "elk": [24, 28, 54], "pig": [24, 28, 54], "animal_2": [24, 28], "dog": [24, 28, 54], "quetzal": [24, 28, 54], "suppress": [24, 28], "to_panda": [24, 28, 29, 54, 57, 68, 93, 100], "datalimit": [24, 28, 93], "retain_index": [24, 28, 93], "megabyt": [24, 28, 93], "request": [24, 26, 28, 32, 40, 41, 56, 60, 64, 92, 93, 94], "estim": [24, 26, 28, 40, 89, 93, 94], "convert_categor": [24, 28, 31], "categor": [24, 26, 28, 29, 31, 37, 42, 54, 55, 58, 59, 85, 86, 87, 88, 89, 92, 93, 94, 95, 97, 100, 101], "parquet_output": [24, 28], "update_nrow": [24, 28], "diffaggreg": [24, 28], "differenc": [24, 28], "14": [24, 26, 28, 44, 46, 56, 61, 68, 69, 78, 89, 90, 94, 96, 98], "16": [24, 28, 37, 44, 46, 58, 61, 62, 63, 78, 79, 89, 90, 96, 98], "18": [24, 28, 40, 44, 46, 61, 89, 90, 96, 98], "intx": [24, 28], "ident": [24, 28, 58, 89, 97], "point": [24, 28, 29, 33, 37, 40, 41, 45, 46, 54, 82, 92, 93, 97], "intersect_df": [24, 28], "invert_permut": [24, 28, 58], "arkouda_supported_dtyp": [25, 28], "dtypeobject": [25, 28], "scalardtyp": [25, 28], "all_scalar": [25, 28, 41, 92], "enum": [25, 28, 34, 37, 70], "bigint": [25, 28, 37, 40, 41, 61, 86, 92, 97], "bittyp": [25, 28], "bool_scalar": [25, 28], "check_np_dtyp": [25, 28], "dt": [25, 28, 33, 37, 54, 97], "assert": [25, 28], "float_scalar": [25, 28, 40, 41, 45, 46], "get_byteord": [25, 28], "concret": [25, 28], "byteord": [25, 28], "turn": [25, 28, 54, 65, 75, 100], "get_server_byteord": [25, 28], "inttyp": [25, 28], "issupportednumb": [25, 28], "numeric_scalar": [25, 28, 37, 40, 41, 44, 45, 46, 89, 92, 98], "numpy_scalar": [25, 28, 40, 89], "resolve_scalar_dtyp": [25, 28], "str_": [25, 28, 89, 91, 95, 103], "translate_np_dtyp": [25, 28], "split": [25, 28, 36, 56, 64, 85], "unsupport": [25, 26, 28, 31, 52, 55, 86, 101], "groupby_reduction_typ": [26, 28], "groupabl": [26, 28, 42, 94, 101], "assume_sort": [26, 28, 94, 101], "prepar": [26, 28, 77, 94], "nkei": [26, 28, 54, 85, 94], "unique_kei": [26, 28, 85, 94], "ngroup": [26, 28, 85, 94], "logger": [26, 28, 56, 59, 85, 94], "arkoudalogg": [26, 28, 34, 56, 94], "nativ": [26, 28, 71, 72, 79, 86, 94, 99], "inherit": [26, 28, 94, 97], "overload": [26, 28, 94], "_get_grouping_kei": [26, 28, 94], "reduct": [26, 28, 40, 84, 85, 94, 95], "AND": [26, 28, 53, 85, 94], "bitwis": [26, 28, 94, 97], "reduc": [26, 28, 65, 67, 94], "OR": [26, 28, 53, 64, 85, 94], "xor": [26, 28, 40, 53, 85, 94], "skipna": [26, 28, 94], "ddof": [26, 28, 40, 48, 49, 57, 89, 94, 95], "delta": [26, 28, 33, 40, 48, 49, 89, 94, 95], "degre": [26, 28, 37, 40, 48, 49, 89, 94, 95], "freedom": [26, 28, 40, 48, 49, 89, 94, 95], "calcul": [26, 28, 31, 40, 42, 61, 70, 86, 89, 94, 95, 101], "77777777777777768": [26, 28, 94], "55555555555555536": [26, 28, 94], "33333333333333348": [26, 28, 94], "11111111111111116": [26, 28, 94], "77777777777777779": [26, 28, 94], "55555555555555558": [26, 28, 94], "33333333333333337": [26, 28, 94], "33333333333333326": [26, 28, 94], "group_ani": [26, 28, 94], "group_argmaxima": [26, 28, 94], "minimum": [26, 28, 40, 41, 78, 89, 94, 95], "group_argminima": [26, 28, 94], "unregister_groupby_by_nam": [26, 28, 85, 94], "fill": [26, 28, 40, 41, 44, 46, 54, 61, 84, 92, 94, 98], "constant": [26, 28, 40, 85, 94], "put": [26, 28, 66, 94], "analog": [26, 28, 57, 94], "tensor": [26, 28, 94], "replic": [26, 28, 94], "With": [26, 28, 80, 90, 94, 96], "build_from_compon": [26, 28, 85, 94], "init": [26, 28, 79, 94], "rebuild": [26, 28, 60, 63, 65, 66, 94], "orig_kei": [26, 28, 94], "groupable_element_typ": [26, 28, 54, 94, 100], "maxima": [26, 28, 94], "group_maxima": [26, 28, 94], "averag": [26, 28, 40, 41, 61, 89, 94], "group_mean": [26, 28, 94], "6666666666666665": [26, 28, 94], "7999999999999998": [26, 28, 94], "median": [26, 28, 61, 85, 94], "group_median": [26, 28, 94], "75": [26, 28, 41, 92, 94], "minima": [26, 28, 94], "group_minima": [26, 28, 94], "modal": [26, 28, 94], "most_common": [26, 28, 58, 85, 94], "nuniqu": [26, 28, 53, 85, 94], "group_nuniqu": [26, 28, 94], "group_product": [26, 28, 94], "108": [26, 28, 94], "00000000000003": [26, 28, 94], "9999999999999982": [26, 28, 94], "deviat": [26, 28, 40, 41, 57, 89, 94, 95], "group_std": [26, 28, 94], "len": [26, 28, 40, 53, 56, 89, 94, 96, 99, 103], "howev": [26, 28, 37, 40, 70, 77, 81, 82, 89, 91, 94], "divisor": [26, 28, 40, 89, 94], "statist": [26, 28, 40, 48, 49, 61, 85, 89, 94], "unbias": [26, 28, 40, 89, 94], "varianc": [26, 28, 40, 89, 94, 95], "infinit": [26, 28, 37, 40, 89, 94], "popul": [26, 28, 32, 36, 40, 89, 94], "likelihood": [26, 28, 40, 48, 49, 89, 94], "se": [26, 28, 40, 89, 94], "5275252316519465": [26, 28, 94], "0954451150103321": [26, 28, 94], "group_sum": [26, 28, 94], "segarrai": [26, 28, 31, 37, 59, 85, 86, 93, 94], "group_var": [26, 28, 94], "hypothet": [26, 28, 33, 40, 89, 94], "333333333333333": [26, 28, 94], "go": [26, 28, 64, 66, 78, 82, 92], "suppli": [26, 28, 31, 41, 53, 70, 72, 73, 92, 93], "row_start": [26, 28], "nnz": [26, 28], "row_numb": [26, 28], "pda": [26, 28, 37, 40, 41, 55, 57, 58, 60, 88, 89, 92, 95, 97, 101], "return_group": [26, 28, 101], "return_indic": [26, 28, 101], "come": [26, 28, 66, 86, 92, 101], "applic": [26, 28, 37, 86, 92, 94, 101], "along": [26, 28, 37, 41, 92, 101], "consider": [26, 28, 101, 103], "historyretriev": 27, "abstract": 27, "_filter_arkouda_command": 27, "repl": [27, 28, 36, 56, 103], "notebookhistoryretriev": 27, "historyaccessor": 27, "shellhistoryretriev": 27, "array_api": [28, 59], "char": [28, 39, 56, 59], "accessor": [28, 59], "align": [28, 29, 59], "array_view": [28, 31, 59, 90], "client_dtyp": [28, 31, 59], "infoclass": [28, 59], "io": [28, 59, 60, 61, 71, 72, 73], "io_util": [28, 59], "matcher": [28, 59], "pdarraycr": [28, 40, 59], "pdarraysetop": [28, 53, 59, 60, 99], "plot": [28, 37, 59, 86, 95], "secur": [28, 37, 59], "timeclass": [28, 31, 59], "allsymbol": [28, 30], "__allsymbols__": [28, 30], "datetim": [28, 31, 41, 57, 61, 86], "_base_unit": [28, 57], "_abstractbasetim": [28, 57], "datetimeindex": [28, 57], "timeseri": [28, 57], "datetime64": [28, 41, 57], "carri": [28, 57], "Not": [28, 31, 37, 54, 57, 61, 93], "sensit": [28, 57], "sec": [28, 57, 61], "accept": [28, 54, 57, 61, 100], "week": [28, 57, 94], "w": [28, 35, 57, 103], "hour": [28, 57], "h": [28, 37, 43, 57, 84, 95, 102], "minut": [28, 57], "millisecond": [28, 57], "l": [28, 31, 57, 62, 64, 68, 69, 77, 86], "microsecond": [28, 57], "nanosecond": [28, 41, 57], "combin": [28, 56, 57, 58, 66], "mix": [28, 56, 57, 61, 90], "day_of_week": [28, 57], "day_of_year": [28, 57], "dayofweek": [28, 57, 94], "dayofyear": [28, 57], "is_leap_year": [28, 57], "month": [28, 57, 64], "weekdai": [28, 57], "weekofyear": [28, 57], "year": [28, 57], "supported_opeq": [28, 57], "supported_with_datetim": [28, 57], "supported_with_pdarrai": [28, 57], "supported_with_r_datetim": [28, 57], "supported_with_r_pdarrai": [28, 57], "supported_with_r_timedelta": [28, 57], "supported_with_timedelta": [28, 57], "isocalendar": [28, 57], "errormod": [28, 37, 97], "enumer": [28, 34, 37], "deriv": [28, 31, 32, 34, 37, 56, 97], "return_valid": [28, 37, 97], "strict": [28, 37, 97], "name_dict": [28, 44, 46, 98], "seed": [28, 41, 44, 45, 46, 61, 84, 92, 98], "expos": [28, 44, 46, 97, 98], "drawn": [28, 41, 44, 45, 46, 92, 98], "varieti": [28, 44, 46, 98], "mimic": [28, 44, 46, 98], "default_rng": [28, 44, 46, 85, 98], "akint64": [28, 41, 44, 45, 46], "discret": [28, 44, 46, 98], "uniform": [28, 37, 41, 44, 45, 46, 55, 85, 86, 88, 89, 92], "abov": [28, 44, 46, 61, 66, 68, 75, 77, 78, 93, 98, 103], "largest": [28, 40, 44, 46, 54, 89, 98, 100], "uniformli": [28, 41, 44, 45, 46, 92, 98], "rng": [28, 44, 46, 57, 98], "13": [28, 37, 44, 46, 58, 61, 78, 81, 89, 90, 95, 96, 98], "47108547995356098": [28, 44, 46, 98], "055256829926011691": [28, 44, 46, 98], "62511314008006458": [28, 44, 46, 98], "16400145561571539": [28, 44, 46, 98], "standard_norm": [28, 41, 44, 45, 46, 85], "draw": [28, 41, 44, 45, 46, 98], "stdev": [28, 44, 46, 98], "mu": [28, 41, 44, 45, 46, 98], "sigma": [28, 41, 44, 45, 46, 98], "1923875335537315": [28, 44, 46, 98], "8797352989638163": [28, 44, 46, 98], "7085325853376141": [28, 44, 46, 98], "021728052940979934": [28, 44, 46, 98], "boundari": [28, 44, 46, 57, 98], "upper": [28, 44, 46, 56, 64, 98], "030785499755523249": [28, 44, 46, 98], "08505865366367038": [28, 44, 46, 98], "38552048588998722": [28, 44, 46, 98], "allow_list": [28, 29, 87], "max_list_s": [28, 29, 87], "maintain": [28, 29, 31, 53, 71, 86], "older": [28, 29, 40, 70, 78], "is_uniqu": [28, 29], "rtype": [28, 29, 54], "abc": [28, 29, 69], "factori": [28, 29, 56], "transform": [28, 29], "s2": [28, 29, 37, 54, 89], "consum": [28, 29, 54], "insensit": [28, 29, 40, 56, 61], "save_al": [28, 29, 31, 40, 73], "set_dtyp": [28, 29, 87], "repons": [28, 29, 40, 56], "to_dict": [28, 29], "loglevel": [28, 34], "critic": [28, 34], "debug": [28, 34, 60, 62, 66], "48": [28, 29, 54], "power_divergenceresult": [28, 48, 49], "pvalu": [28, 48, 49], "diverg": [28, 48, 49], "registeredsymbol": [28, 30], "__registeredsymbols__": [28, 30], "individu": [28, 47, 62, 103], "1d": [28, 42, 53, 54, 99, 100, 101], "enter": [28, 54, 86, 100], "_locindex": [28, 54], "supported_scalar": [28, 54], "iat": [28, 54], "_ilocindex": [28, 54], "iloc": [28, 54], "loc": [28, 54], "str_acc": [28, 54], "registerd": [28, 54], "index_label": [28, 54], "value_label": [28, 54], "horizont": [28, 53, 54, 99, 100], "vertic": [28, 53, 54, 99], "verticl": [28, 54, 100], "diff": [28, 54], "consecut": [28, 41, 54, 92], "fillna": [28, 54], "hole": [28, 54], "fill_values1": [28, 54], "fill_values2": [28, 54], "fill_values3": [28, 54], "100": [28, 37, 40, 43, 54, 58, 61, 68, 89], "repmsg": [28, 54, 60], "has_repeat_label": [28, 54], "hasnan": [28, 54], "lst": [28, 54], "detect": [28, 31, 54, 70, 86], "everyth": [28, 54, 63, 64], "mask": [28, 53, 54, 56, 99], "isnul": [28, 54], "scaler": [28, 54, 100], "give": [28, 40, 54, 69, 81, 100, 102], "rest": [28, 54], "smaller": [28, 54, 64, 69, 86], "3000": [28, 54], "46": [28, 37, 54, 89], "875": [28, 54], "notna": [28, 54], "notnul": [28, 54], "pdconcat": [28, 54, 100], "smallest": [28, 40, 54, 89, 100], "to_datafram": [28, 54], "anim": [28, 54], "topn": [28, 54, 100], "top": [28, 54, 60, 65, 70, 77, 78, 79, 83, 100], "validate_kei": [28, 54], "might": [28, 54, 77, 79, 80], "keyerror": [28, 54], "indexerror": [28, 54], "validate_v": [28, 54], "value_count": [28, 37, 40, 54, 85, 95, 100], "frequent": [28, 54, 80, 100], "strings_pdarrai": [28, 56], "bytes_s": [28, 56], "resid": [28, 40, 56, 97], "encapsul": [28, 41, 52, 56], "composit": [28, 56], "raw": [28, 56, 103], "compos": [28, 41, 56, 75, 86], "shorthand": [28, 40, 56], "cached_regex_pattern": [28, 56], "pattern": [28, 35, 36, 56, 64, 68, 94, 103], "capit": [28, 56], "letter": [28, 56], "capitilz": [28, 56], "lowercas": [28, 41, 56], "decod": [28, 56], "fromencod": [28, 56], "toencod": [28, 56], "encod": [28, 56, 61, 103], "strings_start": [28, 56, 103], "ing": [28, 56, 103], "strings_end": [28, 56, 103], "find_loc": [28, 36, 56, 85, 103], "postit": [28, 56, 103], "positon": [28, 56, 103], "findal": [28, 36, 56, 85, 103], "num_match": [28, 56, 103], "return_match_origin": [28, 35, 36, 56, 103], "conta": [28, 56, 103], "1_2___": [28, 35, 56, 103], "____": [28, 35, 56, 103], "__4___5____6___7": [28, 35, 56, 103], "___": [28, 56, 103], "__": [28, 35, 56, 103], "flatten": [28, 33, 53, 56, 70, 85, 99], "return_seg": [28, 36, 56, 103], "unpack": [28, 56, 75, 79, 103], "flat": [28, 56, 103], "peel": [28, 56, 85, 103], "rpeel": [28, 56, 85, 103], "orig": [28, 56, 103], "six": [28, 56, 103], "one_two": [28, 56, 103], "three_____four____f": [28, 56, 103], "under_flat": [28, 56, 103], "under_map": [28, 56, 103], "from_part": [28, 53, 56], "offset_attrib": [28, 56], "bytes_attrib": [28, 56], "assembl": [28, 56], "entiti": [28, 56], "could": [28, 40, 43, 53, 56, 65, 80, 103], "fullmatch": [28, 56, 85, 103], "whole": [28, 56, 64, 103], "span": [28, 56, 103], "get_byt": [28, 56], "getter": [28, 56], "110": [28, 56], "101": [28, 56], "116": [28, 56], "119": [28, 56], "104": [28, 56], "114": [28, 56], "get_length": [28, 56], "get_offset": [28, 56], "get_prefix": [28, 53, 56, 85, 99], "return_origin": [28, 53, 56, 99], "proper": [28, 37, 53, 56, 58, 99], "long": [28, 53, 56, 66, 99], "enough": [28, 53, 56, 70, 78, 79, 99], "origin_indic": [28, 53, 56, 99], "get_suffix": [28, 53, 56, 85, 99], "compil": [28, 56, 63, 66, 67, 77, 78, 79, 80, 82], "ssegmentedstr": [28, 56], "usehash": [28, 56], "mere": [28, 56], "isalnum": [28, 56], "alphanumer": [28, 56], "islow": [28, 56], "isupp": [28, 56], "istitl": [28, 56], "not_alnum": [28, 56], "alnum": [28, 56], "strings0": [28, 56], "strings1": [28, 56], "strings2": [28, 56], "isalpha": [28, 56], "alphabet": [28, 56], "not_alpha": [28, 56], "alpha": [28, 56, 61, 84], "stringa": [28, 56], "stringb": [28, 56], "stringc": [28, 56], "isdecim": [28, 56], "decim": [28, 56], "isdigit": [28, 56], "not_decim": [28, 56], "120": [28, 56], "121": [28, 56], "122": [28, 56], "special_str": [28, 56], "\u00b2": [28, 56], "2\u00b3\u2087": [28, 56], "2\u00b3x\u2087": [28, 56], "digit": [28, 55, 56, 88], "not_digit": [28, 56], "isempti": [28, 56], "not_empti": [28, 56], "isspac": [28, 56], "whitespac": [28, 31, 56], "not_spac": [28, 56], "u0009": [28, 56], "u000b": [28, 56], "u000c": [28, 56], "u000d": [28, 56], "u0009nu000bu000cu000d": [28, 56], "titlecas": [28, 56], "uppercas": [28, 41, 56], "lstick": [28, 56, 85, 103], "insert": [28, 56, 103], "experiment": [28, 56, 103], "stick": [28, 56, 66, 85, 103], "includedelimit": [28, 56, 103], "keepparti": [28, 56, 103], "fromright": [28, 56, 103], "off": [28, 56, 65, 103], "partit": [28, 56, 103], "sought": [28, 56, 103], "prepend": [28, 53, 56, 85, 103], "purge_cached_regex_pattern": [28, 56], "purg": [28, 56], "later": [28, 40, 56, 81], "former": [28, 40, 56, 103], "free": [28, 40, 56], "registr": [28, 40, 56], "rpartit": [28, 56, 103], "compar": [28, 56, 64, 84, 86, 103], "strings_arrai": [28, 56, 70], "save_offset": [28, 56], "upon": [28, 37, 56, 79, 80, 83, 89], "maxsplit": [28, 36, 56, 103], "occurr": [28, 36, 37, 40, 56, 89, 95, 103], "5____6___7": [28, 56, 103], "ior": [28, 56, 103], "toleft": [28, 56, 103], "strip": [28, 56], "lead": [28, 40, 56], "trail": [28, 40, 56], "omit": [28, 56, 57, 61, 70], "1string": [28, 56], "sub": [28, 36, 53, 56, 85, 103], "obtain": [28, 36, 56, 103], "substitut": [28, 36, 56, 75, 77, 103], "substitu": [28, 56, 103], "subn": [28, 56, 85, 103], "new_str": [28, 56, 103], "number_of_substit": [28, 56, 103], "segstr": [28, 56], "hello": [28, 56, 86, 103], "my": [28, 56, 65, 86, 103], "world": [28, 56, 86, 103], "u5": [28, 56, 86, 103], "unregister_strings_by_nam": [28, 56], "timedelta": [28, 31, 41, 57, 86], "durat": [28, 57], "timedeltaindex": [28, 57], "timedelta64": [28, 57], "total_second": [28, 57], "akab": 28, "akbool": 28, "akcast": 28, "target": [28, 32, 37, 41, 61, 63, 64, 77, 86, 92, 96, 97], "never": [28, 37, 97], "uninterpret": [28, 37, 97], "63": [28, 37, 40, 97], "succeed": [28, 37, 97], "safe": [28, 37, 64, 97], "underflow": [28, 37, 97], "precis": [28, 31, 37, 86, 97], "capac": [28, 37, 97], "hold": [28, 37, 97], "akfloat64": 28, "akuint64": 28, "third": [28, 41, 64, 92], "max_bit": [28, 40, 41, 61, 86, 92, 97], "zerodivisionerror": [28, 40, 41, 92], "decreas": [28, 40, 41, 65, 89, 92, 95], "cosin": [28, 37, 89], "At": [28, 37, 40, 89], "elsewher": [28, 37, 40, 89], "retain": [28, 37, 40, 58, 89], "hyperbol": [28, 37], "sine": [28, 37, 89], "tangent": [28, 37], "denom": [28, 37], "pair": [28, 32, 33, 37, 53, 99], "angl": [28, 37], "radian": [28, 37], "rai": [28, 37], "denomin": [28, 37, 40], "placement": [28, 37], "circl": [28, 37], "argmaxk": [28, 40, 85, 89, 95], "maxmum": [28, 40, 89], "outperform": [28, 40, 89], "grow": [28, 40, 89], "beyond": [28, 40, 68, 89], "certain": [28, 40, 62, 80, 89], "depend": [28, 40, 70, 78, 79, 82, 83, 89, 99], "million": [28, 37, 40, 89], "degrad": [28, 40, 89], "argmink": [28, 40, 85, 89, 95], "algorithm": [28, 37, 55, 58, 75, 88], "sortingalgorithm": [28, 55, 88], "radixsortlsd": [28, 55, 88], "radix": [28, 55, 88], "resili": [28, 55, 88], "intens": [28, 55, 68, 88, 92], "dequ": [28, 41, 86], "malform": [28, 41, 86], "overwhelm": [28, 41, 86], "bandwidth": [28, 41, 86], "pdrrai": [28, 37, 41, 86], "twice": [28, 41, 86], "recurs": [28, 41, 86], "respect": [28, 37, 40, 41, 42, 57, 64, 86, 92], "attach_al": [28, 58], "attach_pdarrai": [28, 40], "bound": [28, 40, 41, 45, 46, 53, 57, 92, 99], "unregister_pdarray_by_nam": [28, 40], "list_registri": [28, 30, 40], "my_zero": [28, 40], "potenti": [28, 40], "reconnect": [28, 40], "bigint_to_uint_arrai": [28, 40, 41], "18446744073709551616": [28, 40, 41], "18446744073709551617": [28, 40, 41], "18446744073709551618": [28, 40, 41], "18446744073709551619": [28, 40, 41], "18446744073709551620": [28, 40, 41], "broadcast_dim": [28, 58], "sa": [28, 58], "sb": [28, 58], "broadcast_to_shap": [28, 40], "chisquar": [28, 48, 49], "f_ob": [28, 48, 49], "f_exp": [28, 48, 49], "chi": [28, 48, 49], "akstat": [28, 48, 49], "333333333333334": [28, 48, 49], "03960235520756414": [28, 48, 49], "stat": [28, 48, 49, 61], "power_diverg": [28, 48, 49], "en": [28, 48, 49, 60], "wikipedia": [28, 48, 49], "squared_test": [28, 48, 49], "clear": [28, 40], "clz": [28, 40], "lz": [28, 40], "62": [28, 40, 61], "61": [28, 40], "60": [28, 40], "move": [28, 55, 58, 66, 68, 88, 92, 99], "forward": [28, 55, 82, 88, 99], "thu": [28, 31, 41, 55, 60, 70, 71, 88, 99], "lexicograph": [28, 55, 64, 88], "compute_join_s": [28, 33], "convert_if_categor": [28, 58], "y": [28, 37, 40, 43, 48, 49, 50, 51, 62, 78], "cov": [28, 40], "covari": [28, 40], "create_pdarrai": [28, 60], "datatyp": [28, 41, 50, 51, 70], "gpu": [28, 40], "ctz": [28, 40], "cumprod": [28, 37, 85, 89], "cumul": [28, 37, 43, 84, 89], "th": [28, 37, 53, 89, 99], "5728783400481925": [28, 37, 89], "0472855509390593": [28, 37, 89], "33": [28, 37, 89], "78523998586553": [28, 37, 89], "134": [28, 37, 89], "05309592737584": [28, 37, 89], "450": [28, 37, 89], "21589865655358": [28, 37, 89], "cumsum": [28, 37, 85, 89], "1598310770203937": [28, 37, 89], "4110385860243131": [28, 37, 89], "1622479306453748": [28, 37, 89], "710615785506533": [28, 37, 89], "945880905466208": [28, 37, 89], "date_rang": [28, 57], "period": [28, 57], "freq": [28, 57], "tz": [28, 57], "impos": [28, 57], "dateoffset": [28, 57], "5h": [28, 57], "offset_alias": [28, 57], "alias": [28, 57], "tzinfo": [28, 57], "zone": [28, 57], "asia": [28, 57], "hong_kong": [28, 57], "timezon": [28, 57], "naiv": [28, 57], "midnight": [28, 57], "Of": [28, 57], "exactli": [28, 57], "linearli": [28, 41, 57, 92], "learn": [28, 57, 60, 75], "deg2rad": [28, 37], "disableverbos": [28, 34], "disabl": [28, 34, 62], "defaultt": [28, 34], "divmod": [28, 40], "dividend": [28, 40], "floordivis": [28, 40], "modular": [28, 40, 66], "divis": [28, 40], "quotient": [28, 40], "No": [28, 40, 77, 82], "div": [28, 40], "mod": [28, 40, 48, 49], "dot": [28, 40, 64], "pda1": [28, 40, 42, 101], "pda2": [28, 40, 42, 101], "elementwis": [28, 40], "singleton": [28, 40], "enableverbos": [28, 34], "exponenti": [28, 37, 89], "7182818284590451": [28, 37, 89], "3890560989306504": [28, 37, 89], "085536923187668": [28, 37, 89], "54": [28, 37, 89], "598150033144236": [28, 37, 89], "84010843172504": [28, 37, 89], "454368507659211": [28, 37, 89], "5571769623557188": [28, 37, 89], "494295836924771": [28, 37, 89], "478894913238722": [28, 37, 89], "minu": [28, 37], "exp1m": [28, 37], "19": [28, 37, 58, 90, 96], "53": [28, 37], "45": [28, 37], "32": [28, 37, 40, 52, 61, 68, 70, 78, 79], "read_path": [28, 31, 86], "dataset_nam": [28, 31, 86], "ak_data": [28, 31, 86], "write_fil": [28, 31, 86], "return_obj": [28, 31, 86], "read_parquet": [28, 31, 73, 86], "read_hdf": [28, 31, 53, 73, 86], "import_data": [28, 31, 71, 86], "fmod": [28, 40], "from_seri": [28, 41], "overridden": [28, 41, 52], "situat": [28, 41], "57600036956445599": [28, 41], "41619265571741659": [28, 41], "6615356693784662": [28, 41], "choic": [28, 41, 77], "to_datetim": [28, 41], "2018": [28, 41], "01": [28, 41, 61, 64, 66], "1514764800000000000": [28, 41], "parseabl": [28, 41, 92], "deleg": [28, 37, 41, 45, 46, 92, 95], "accordingli": [28, 41, 70, 92], "gen_rang": [28, 33], "return_length": [28, 33], "actual": [28, 33, 60, 69], "generic_concat": [28, 58], "get_callback": [28, 58], "get_column": [28, 31, 69, 73], "get_dataset": [28, 31, 69, 73, 86], "column_delim": [28, 31, 86], "read_nest": [28, 31, 86], "get_filetyp": [28, 31], "get_null_indic": [28, 31], "datasetnam": [28, 31, 86], "siphash": [28, 37], "risk": [28, 37, 70], "few": [28, 37, 68], "strongli": [28, 37], "cryptograph": [28, 37], "emploi": [28, 37], "adversari": [28, 37], "engin": [28, 37], "linear": [28, 37, 103], "subsequ": [28, 37, 70], "xore": [28, 37], "cancel": [28, 37], "henc": [28, 37], "rotat": [28, 37, 40], "ordin": [28, 37], "hist_al": [28, 43], "col": [28, 43], "histogram": [28, 37, 43, 85], "visual": [28, 43], "randn": [28, 43], "bin": [28, 37, 40, 43, 77, 78, 79, 82, 95], "evenli": [28, 37, 41, 92, 95], "edg": [28, 37, 43, 95], "notimplementederror": [28, 37, 60, 95], "histogram2d": [28, 37, 95], "matplotlib": [28, 37, 43, 81, 95], "pyplot": [28, 37, 43, 95], "plt": [28, 37, 43, 95], "nbin": [28, 37, 95], "bi": [28, 37], "coordin": [28, 37, 90], "nx": [28, 37, 61], "ny": [28, 37], "hist": [28, 37], "x_edg": [28, 37], "y_edg": [28, 37], "histogramdd": [28, 37], "multidimension": [28, 37], "nd": [28, 37], "z": [28, 37], "glob": [28, 31, 86], "runtimewarn": [28, 31, 86], "assume_uniqu": [28, 42, 101], "indexof1d": [28, 42], "arr": [28, 42], "multia": [28, 42, 101], "multib": [28, 42, 101], "issupportedint": 28, "as_compon": [28, 58], "is_sort": [28, 40, 85, 89, 95], "monoton": [28, 40, 89, 95], "finit": [28, 37], "join_on_eq_with_dt": [28, 33], "a1": [28, 33, 37, 89], "a2": [28, 33, 37, 89], "t1": [28, 33], "t2": [28, 33], "pred": [28, 33], "result_limit": [28, 33], "window": [28, 33, 52, 75, 83], "predic": [28, 33], "timestamp": [28, 33], "milli": [28, 33], "result_array_on": [28, 33], "true_dt": [28, 33], "abs_dt": [28, 33], "pos_dt": [28, 33], "list_symbol_t": [28, 30], "path_prefix": [28, 31], "calc_string_offset": [28, 31, 86], "termin": [28, 31, 70, 75, 82, 102], "invalid": [28, 31, 86], "filenotfound": [28, 31], "cwd": [28, 31, 40], "name_prefix_local": [28, 31, 40], "filetyp": [28, 31, 86], "datsetnam": [28, 31], "read_": [28, 31], "natur": [28, 37, 89], "logarithm": [28, 37, 89], "3025850929940459": [28, 37, 89], "6051701859880918": [28, 37, 89], "3219280948873626": [28, 37, 89], "6438561897747253": [28, 37, 89], "plu": [28, 37], "h5l": [28, 31], "imit": [28, 31], "technic": [28, 31], "ls_csv": [28, 31, 69, 73], "maxk": [28, 40, 80, 85, 89, 95], "degred": [28, 40, 89], "mink": [28, 40, 80, 85, 89, 95], "complementari": [28, 40], "Ones": [28, 41, 92], "pariti": [28, 40], "odd": [28, 40], "mydtyp": [28, 40, 97], "attributi": [28, 40, 97], "opeqop": [28, 40], "coeffici": [28, 40], "format_oth": [28, 40], "itself": [28, 40, 64], "popcount": [28, 40], "fastest": [28, 40], "fortran": [28, 40, 97], "rotl": [28, 40], "rotr": [28, 40], "h5": [28, 31, 40, 86], "slice_bit": [28, 40], "bottom": [28, 40, 64], "65": [28, 40], "0b101111111111111111111111111111111111111111111111111111111111111111": [28, 40], "0b10": [28, 40], "numeric_and_bool_scalar": [28, 40], "to_cuda": [28, 40], "numba": [28, 40], "devicend": [28, 40], "builtin": [28, 40], "devicendarrai": [28, 40], "importerror": [28, 40], "cuda": [28, 40], "modulenotfounderror": [28, 40], "cours": [28, 40], "name_prefix": [28, 31, 40, 86], "to_parqet": [28, 40], "attahc": [28, 40], "plot_dist": [28, 43], "xlabel": [28, 43], "newfig": [28, 43], "graph": [28, 43, 94], "figur": [28, 43, 66], "below": [28, 43, 61, 62, 68, 77, 78, 79, 81, 86, 93], "pwr": [28, 40], "uniniti": [28, 40], "vari": [28, 40, 68, 77, 79, 81, 83, 99], "27": [28, 40, 61, 68, 90], "lambda_": [28, 48, 49], "lambda": [28, 48, 49], "cressi": [28, 48, 49], "freeman": [28, 48, 49], "tukei": [28, 48, 49], "neyman": [28, 48, 49], "109302162163285": [28, 48, 49], "04380595350226197": [28, 48, 49], "2024": [28, 48, 49], "v1": [28, 48, 49], "pretty_print_inform": [28, 30], "rad2deg": [28, 37], "pull": [28, 31, 41, 64, 70], "undefin": [28, 41, 45, 46, 92], "92176432277231968": [28, 41, 45, 46, 92], "083130710959903542": [28, 41, 45, 46, 92], "68894208386667544": [28, 41, 45, 46, 92], "9160772326374946": [28, 41, 45, 46, 92], "353429832157099": [28, 41, 45, 46, 92], "5392023718621486": [28, 41, 45, 46, 92], "random_strings_lognorm": [28, 41], "logmean": [28, 41], "logstd": [28, 41], "printabl": [28, 41], "lognorm": [28, 41], "heavi": [28, 41], "toward": [28, 41], "tvkjte": [28, 41], "abocorhfm": [28, 41], "ludmmgtb": [28, 41], "kwoqnphz": [28, 41], "vsxrrl": [28, 41], "fp": [28, 41], "3q4kc": [28, 41], "hf": [28, 41], "ie": [28, 41], "djkba": [28, 41], "5oz1": [28, 41], "random_strings_uniform": [28, 41], "minlen": [28, 41], "maxlen": [28, 41], "tvkj": [28, 41], "ewab": [28, 41], "hfmd": [28, 41], "4k": [28, 41], "hff": [28, 41], "stricttyp": [28, 31, 86], "tell": [28, 31, 61, 86], "versu": [28, 31, 86], "independ": [28, 31, 52, 86], "sequenti": [28, 31, 86], "dset_nam": [28, 31], "strict_typ": [28, 31], "tag_data": [28, 31], "tagdata": [28, 31], "read_tagged_data": [28, 31], "record": [28, 31], "filename_cod": [28, 31], "filname_cod": [28, 31], "col_nam": [28, 31], "sent": [28, 31, 71], "receive_datafram": [28, 31], "send_arrai": [28, 31], "register_al": [28, 58], "restor": [28, 31], "snapshot": [28, 31], "alongsid": [28, 31], "rot": [28, 40], "160": [28, 40], "384": [28, 40], "896": [28, 40], "2048": [28, 40], "4608": [28, 40], "512": [28, 40], "256": [28, 40, 61], "96": [28, 40], "56": [28, 40, 69], "nearest": [28, 37], "14159": [28, 37], "wrong": [28, 31, 102], "setdiff1d": [28, 42, 53, 60, 68, 85, 99, 101], "setxor1d": [28, 42, 53, 60, 68, 85, 99, 101], "skew": 28, "bia": 28, "weight": 28, "9442193396379163": 28, "4142135623730951": [28, 40], "7320508075688772": [28, 40], "68586185091150265": [28, 41, 45, 46], "1723810583573375": [28, 41, 45, 46], "567584107142031": [28, 41, 45, 46], "timedelta_rang": [28, 57], "invok": [28, 41, 45, 46], "30013431967121934": [28, 41, 45, 46], "47383036230759112": [28, 41, 45, 46], "0441791878997098": [28, 41, 45, 46], "unregister_al": [28, 58], "return_count": [28, 37, 95], "choos": [28, 37, 64, 79, 82, 89, 102], "claus": [28, 37, 89], "unequ": [28, 37, 89], "cond": [28, 37, 89], "s1": [28, 37, 89], "c1": [28, 37, 89], "c2": [28, 37, 89], "write_log": [28, 34], "log_msg": [28, 34], "clientgeneratedlog": [28, 34], "log_lvl": [28, 34], "identif": [28, 34], "xlogi": [28, 50, 51], "castabl": [28, 50, 51], "6094379124341003": [28, 50, 51], "5835189384561099": [28, 50, 51], "8377304471659395": [28, 50, 51], "317766166719343": [28, 50, 51], "4657359027997265": [28, 50, 51], "4930614433405491": [28, 50, 51], "9314718055994531": [28, 50, 51], "delimited_file_to_dict": 32, "unsupportedoper": 32, "dict_to_delimited_fil": 32, "oerror": 32, "get_directori": 32, "write_line_to_fil": 32, "unsupportedopt": 32, "parent_entry_nam": [35, 36], "match_typ": [35, 36, 85, 103], "matchtyp": [35, 36, 103], "find_match": [35, 85, 103], "group_num": [35, 103], "return_group_origin": [35, 103], "isaac": [35, 103], "newton": [35, 103], "calculu": [35, 103], "gottfri": [35, 103], "leibniz": [35, 103], "math": [35, 103], "indici": [35, 103], "locationsinfo": 36, "get_match": 36, "return_num_sub": 36, "pcg64": [44, 98], "manner": [44, 60, 98], "unstabl": [44, 98], "unalt": [44, 98], "generate_token": 52, "secret": 52, "token_hex": 52, "hexidecim": 52, "generate_username_token_json": 52, "get_arkouda_client_directori": 52, "platform": 52, "artifact": 52, "home": [52, 77, 80], "environ": [52, 61, 75, 80, 81], "get_home_directori": 52, "expandus": 52, "get_usernam": 52, "environmenterror": 52, "linux": [52, 61, 77, 82, 83], "maco": [52, 75, 78, 83], "aka": 52, "darwin": [52, 79], "username_token": 52, "len_suffix": 53, "_length": 53, "seg_suffix": 53, "_segment": [53, 70], "non_empti": 53, "increas": [53, 99], "append_singl": [53, 85, 99], "unord": 53, "yet": [53, 77, 86, 90], "discard_empti": 53, "from_multi_arrai": 53, "face": [53, 64, 97], "get_jth": [53, 85, 99], "j": [53, 62, 63, 78, 79, 99], "backward": [53, 58, 99], "get_length_n": [53, 85, 99], "get_ngram": [53, 85, 99], "gram": [53, 99], "came": [53, 99], "ngram": [53, 85], "seg_a": [53, 99], "seg_b": [53, 99], "segment_nam": 53, "value_nam": 53, "prepend_singl": [53, 85, 99], "remove_repeat": [53, 85, 99], "return_multipl": [53, 99], "condens": [53, 99], "norepeat": [53, 99], "set_jth": [53, 85, 99], "setdiff": [53, 85, 99], "setxor": [53, 85, 99], "segarr": [53, 99], "unregister_segarray_by_nam": 53, "val_suffix": 53, "_valu": [53, 70], "convert_byt": 58, "enrich_inplac": 58, "keynam": 58, "seg": 58, "is_float": 58, "arri": 58, "data2": 58, "is_int": 58, "is_numer": 58, "earlier": [58, 68], "report_mem": 58, "sparse_sum_help": 58, "idx1": 58, "idx2": 58, "val1": 58, "val2": 58, "percent_transfer_limit": 58, "matric": 58, "would": [58, 62, 66, 71, 86, 89, 94], "vals1": 58, "vals2": 58, "inds2": 58, "28": [58, 90], "page": [59, 64, 77], "auto": [59, 64], "arkouda": [59, 61, 64, 66, 67, 71, 73, 81, 82, 83, 84, 85, 86, 88, 89, 91, 92, 94, 95, 96, 97, 101], "sphinx": [59, 77, 81], "autoapi": [59, 81], "guid": [60, 75, 77, 78, 79], "describ": [60, 64], "walk": [60, 62, 75], "times2": 60, "conform": 60, "somewher": 60, "subdirectori": 60, "numpydoc": 60, "readthedoc": 60, "generic_msg": [60, 80], "repli": 60, "possibli": 60, "typecheck": 60, "doubl": 60, "cmd": [60, 80], "arg1": 60, "__all__": 60, "machineri": 60, "broken": 60, "dispatch": 60, "arraysetop": [60, 101], "arraysetopsmsg": 60, "modul": [60, 65, 66, 75, 86, 103], "sake": 60, "simplic": 60, "happen": [60, 64], "serverdaemon": 60, "times2msg": 60, "gensymentri": 60, "getgenerictypearrayentri": 60, "tosymentri": 60, "symentri": 60, "st": 60, "addentri": 60, "servererrorstr": 60, "src": [60, 80], "respond": 60, "reqmsg": 60, "msgarg": 60, "borrow": 60, "messagearg": 60, "symtab": 60, "msgtupl": 60, "throw": 60, "vname": 60, "nextnam": 60, "gent": 60, "getgenerictypedarrayentri": 60, "getvalueof": 60, "av": 60, "createsymentri": 60, "attrib": 60, "aslogg": 60, "getmodulenam": [60, 80], "getroutinenam": 60, "getlinenumb": 60, "msgtype": 60, "errormsg": 60, "ret": 60, "final": [60, 61, 64, 77], "resisterfunct": 60, "abl": [60, 64, 70, 71, 77, 86], "launch": [60, 82, 85], "script": [60, 65, 79, 80, 84], "undoubl": 60, "overview": 61, "simplest": 61, "navig": [61, 64, 77, 78, 79, 81], "python3": [61, 65, 77, 78], "autosav": 61, "benchmark_v2": 61, "commandlin": 61, "0001_0d4865d7c9453adc6af6409568da326845c358b9_20230406_165330": 61, "Will": 61, "counter_nam": 61, "trial": [61, 84], "comma": [61, 69, 77], "NO": 61, "comparison": [61, 69, 91, 97, 99, 103], "maxbit": 61, "wraparound": 61, "unaffect": 61, "index_s": [61, 84], "gather": [61, 85], "scatter": [61, 85], "value_s": [61, 84], "idna": 61, "ascii": 61, "io_only_writ": 61, "io_only_read": 61, "io_only_delet": 61, "io_files_per_loc": 61, "io_compress": 61, "io_path": 61, "ak_io_benchmark": 61, "measur": [61, 84], "rate": 61, "encoding_benchmark": 61, "arkouda_root": 61, "cpython": 61, "64bit": 61, "0014_31de39be8b19c76d073a8999def6673a305c250d_20230405_145759_uncommit": 61, "strings_encodedecod": 61, "stddev": 61, "iqr": 61, "outlier": 61, "bench_encod": 61, "3304": 61, "2561": 61, "7544": 61, "5306": 61, "8075": 61, "9012": 61, "210": 61, "3306": 61, "79": 61, "3805": 61, "02": 61, "8800": 61, "7336": 61, "6465": 61, "58": 61, "4231": 61, "5246": 61, "267": 61, "8380": 61, "bench_decod": 61, "4444": 61, "03": 61, "4177": 61, "7852": 61, "4097": 61, "5622": 61, "04": [61, 82], "5837": 61, "264": 61, "1882": 61, "4621": 61, "9177": 61, "2250": 61, "6125": 61, "50": [61, 68], "0197": 61, "17": [61, 68, 90, 96], "9991": 61, "90": 61, "236": 61, "6864": 61, "88": 61, "0015_31de39be8b19c76d073a8999def6673a305c250d_20230405_145947_uncommit": 61, "4298": 61, "6450": 61, "5541": 61, "0889": 61, "5801": 61, "1436": 61, "281": 61, "3620": 61, "4875": 61, "5255": 61, "7912": 61, "07": 61, "4328": 61, "87": 61, "5652": 61, "4869": 61, "263": 61, "7659": 61, "94": 61, "lot": 61, "benefici": [61, 72], "purpos": [61, 64, 87, 93, 100], "main": [61, 64, 70], "area": 61, "care": 61, "lesser": 61, "extent": 61, "cpu": 61, "architectur": 61, "ran": [61, 65], "350": 61, "relat": [61, 64, 68], "machine_info": 61, "msi": 61, "x86_64": [61, 78, 82], "python_compil": 61, "gcc": [61, 78], "python_implement": 61, "python_implementation_vers": 61, "python_vers": 61, "python_build": 61, "nov": 61, "26": [61, 90], "2020": 61, "57": 61, "microsoft": [61, 82], "wsl2": [61, 83], "cpuinfo_vers": 61, "cpuinfo_version_str": 61, "arch": 61, "arch_string_raw": 61, "vendor_id_raw": 61, "genuineintel": 61, "brand_raw": 61, "intel": 61, "tm": 61, "i7": 61, "8750h": 61, "20ghz": 61, "hz_advertised_friendli": 61, "2000": 61, "ghz": 61, "hz_actual_friendli": 61, "2080": 61, "hz_advertis": 61, "2200000000": 61, "hz_actual": 61, "2207999000": 61, "model": [61, 98], "158": 61, "famili": 61, "3dnowprefetch": 61, "abm": 61, "adx": 61, "ae": 61, "apic": 61, "arch_cap": 61, "avx": 61, "avx2": 61, "bmi1": 61, "bmi2": 61, "clflush": 61, "clflushopt": 61, "cmov": 61, "constant_tsc": 61, "cpuid": 61, "cx16": 61, "cx8": 61, "de": 61, "erm": 61, "f16c": 61, "flush_l1d": 61, "fma": 61, "fpu": 61, "fsgsbase": 61, "fxsr": 61, "ht": 61, "hypervisor": 61, "ibpb": 61, "ibr": 61, "invpcid": 61, "invpcid_singl": 61, "lahf_lm": 61, "lm": 61, "mca": 61, "mce": 61, "mmx": 61, "movb": 61, "msr": 61, "mtrr": 61, "nopl": 61, "osxsav": 61, "pae": 61, "pat": 61, "pcid": 61, "pclmulqdq": 61, "pdpe1gb": 61, "pge": 61, "pni": 61, "popcnt": 61, "pse": 61, "pse36": 61, "pti": 61, "rdrand": 61, "rdrnd": 61, "rdseed": 61, "rdtscp": 61, "rep_good": 61, "sep": 61, "smap": 61, "smep": 61, "ss": 61, "ssbd": 61, "sse": 61, "sse2": 61, "sse4_1": 61, "sse4_2": 61, "ssse3": 61, "stibp": 61, "syscal": 61, "tsc": 61, "vme": 61, "xgetbv1": 61, "xsave": 61, "xsavec": 61, "xsaveopt": 61, "xtopologi": 61, "l3_cache_s": 61, "9437184": 61, "l2_cache_s": 61, "mib": 61, "l1_data_cache_s": 61, "196608": 61, "l1_instruction_cache_s": 61, "l2_cache_line_s": 61, "l2_cache_associ": 61, "commit_info": 61, "31de39be8b19c76d073a8999def6673a305c250d": 61, "2023": [61, 75, 78], "04t16": 61, "author_tim": 61, "04t12": 61, "dirti": 61, "2324_pytest_benchmark_doc": 61, "fullnam": 61, "extra_info": 61, "descript": [61, 64, 68, 85], "problem_s": 61, "transfer_r": 61, "0002": 61, "gib": 61, "disable_gc": 61, "timer": 61, "perf_count": 61, "min_round": 61, "max_tim": 61, "min_tim": 61, "5e": 61, "06": 61, "warmup": 61, "004066600000442122": 61, "007168699999965611": 61, "0048064200000226265": 61, "001326192548940973": 61, "004246700000294368": 61, "0009575499998391024": 61, "q1": 61, "004131924999910552": 61, "q3": 61, "005089474999749655": 61, "iqr_outli": 61, "stddev_outli": 61, "ld15iqr": 61, "hd15iqr": 61, "208": 61, "0550596900172": 61, "024032100000113132": 61, "00383609999971668": 61, "0043372999998609885": 61, "004057779999857303": 61, "00018361238254747651": 61, "0040258999997604406": 61, "0002090000002681336": 61, "0039507749997937935": 61, "004159775000061927": 61, "246": 61, "44017172817806": 61, "020288899999286514": 61, "05t15": 61, "09": [61, 78], "097392": 61, "pai": 61, "attent": 61, "featur": [62, 63, 64, 65, 67, 77, 80, 85, 86, 94], "chpl_comm": [62, 78, 79], "gasnet_spawnfn": 62, "gasnet_route_output": 62, "chpl_gasnet_cfg_opt": 62, "ibv": 62, "gasnet_quiet": 62, "gasnet_masterip": 62, "127": 62, "gasnet_workerip": 62, "chpl_test_timeout": 62, "chpl_rt_oversubscrib": 62, "ye": 62, "gasnetsetup": 62, "cd": [62, 75, 78, 79, 81], "chpl_home": [62, 78, 79], "nl": [62, 75, 102], "too": [63, 86], "parallel": [63, 86, 97, 101], "leverag": [63, 78], "increment": [63, 64], "cut": [63, 64, 66], "somewhat": 63, "heroic": 63, "acceler": 63, "makebinari": 63, "bottleneck": 63, "tend": 63, "chpl_target_compil": 63, "clang": [63, 78], "gnu": [63, 82], "j16": 63, "outlin": [64, 70], "taken": [64, 80], "evolv": 64, "gain": 64, "team": 64, "action": 64, "click": [64, 77, 83], "draft": 64, "button": 64, "bring": 64, "text": [64, 69, 86], "box": 64, "publish": 64, "scheme": 64, "yyyi": 64, "mm": 64, "dd": 64, "v2022": 64, "31": [64, 82], "hei": 64, "mistak": 64, "ok": 64, "dash": 64, "underneath": 64, "excel": 64, "next": [64, 66, 77, 80, 102], "major": [64, 69, 87, 93, 100], "minor": 64, "review": 64, "Or": 64, "straight": 64, "green": 64, "believ": 64, "loos": 64, "remot": [64, 78, 79, 102], "upstream": [64, 78, 79], "someth": [64, 65, 102], "fetch": [64, 66], "previou": [64, 66, 79], "recent": 64, "ellips": 64, "prev": 64, "onlin": [64, 82], "concis": 64, "onelin": 64, "graphic": 64, "gitk": 64, "push": [64, 77], "strive": 64, "hyperlink": 64, "reason": [64, 66, 79], "guidelin": [64, 103], "substanti": 64, "bug": [64, 67], "coupl": 65, "unset": [65, 79], "optim": 65, "wors": 65, "matter": 65, "hit": 65, "chpl_develop": [65, 79], "rebuilt": 65, "homebrew": [65, 77], "shouldn": [65, 66], "worri": 65, "biggest": 65, "involv": [65, 83], "focus": 65, "just": [65, 66, 97, 98], "crucial": 65, "saveusedmodul": [65, 66, 80], "piec": 65, "benchmark": [65, 67, 80, 84], "interact": [65, 69, 73, 74, 75, 79, 81], "session": [65, 75], "usedmodul": [65, 66, 80], "ctrl": 65, "easiest": 65, "mv": [65, 66], "arkouda_config_fil": [65, 80], "know": 65, "ll": [65, 66, 77], "suggest": [66, 82], "gasnet": [66, 67, 78, 79], "report": 66, "pretti": 66, "frustrat": 66, "past": 66, "recompil": 66, "checkout": 66, "v2023": [66, 75], "isn": 66, "mine": 66, "wherev": 66, "rememb": [66, 68], "won": 66, "overnight": 66, "hog": 66, "ve": [66, 78, 79], "got": 66, "forget": [66, 82], "techniqu": 66, "unnecessari": 66, "tip": [67, 77], "aim": 68, "introduct": 68, "commonli": 68, "exhaust": [68, 70], "ak_arr": 68, "easili": 68, "np_arr": 68, "52": 68, "84": 68, "80": 68, "71": 68, "aid": [68, 70], "transit": 68, "toolset": 68, "IN": 68, "ak_in1d": 68, "ak_int": 68, "m1": 68, "m2": 68, "ak_in1dmult": 68, "ak_in1dmulti": 68, "ak_intmult": 68, "though": 68, "extrem": [68, 70, 72], "let": 68, "sever": [68, 70, 86, 89, 92], "column_nam": 68, "column_data": 68, "fname": 68, "john": 68, "jane": 68, "jake": 68, "lname": 68, "smith": 68, "brown": 68, "ag": 68, "37": 68, "35": 68, "salari": 68, "75000": 68, "77000": 68, "100000": 68, "35000": 68, "f_name": 68, "l_name": 68, "notic": 68, "demo": 68, "computation": 68, "interest": 68, "cola": 69, "colb": 69, "colc": 69, "ghi": 69, "arkodua": [69, 70], "flexibl": 70, "adher": 70, "portion": 70, "isbool": 70, "file_vers": 70, "arkouda_vers": 70, "c_string": 70, "mark": 70, "therefor": 70, "unflatten": 70, "reconstruct": 70, "number_of_dimens": 70, "array_of_size_rank": 70, "current_arkouda_vers": 70, "na_cod": 70, "unique_key_idx": 70, "key_": 70, "notifi": 70, "elect": [70, 71], "ONE": 70, "explicit": [70, 97], "still": [70, 103], "orient": [72, 91, 93, 97, 103], "writ": 72, "paruqet": 72, "ineffiec": 72, "fact": 72, "analyt": 74, "supercomput": 74, "visit": [75, 78, 79], "conda": [75, 77, 78, 79, 81], "yml": [75, 78, 79, 81], "download": [75, 78, 79, 83], "05": 75, "tar": [75, 77, 78, 79], "xzf": [75, 79], "gz": [75, 77, 78, 79], "listen": [75, 102], "your_machin": 75, "chapel_vers": 75, "15461882265": 75, "token_str": 75, "node01": [75, 102], "hang": 75, "exit": [75, 82], "prerequisit": [77, 78, 79], "proceed": 77, "manag": [77, 78, 79, 81, 83], "mac": [77, 79], "makefil": 77, "zeromq": [77, 81], "eval": 77, "anaconda3": [77, 78, 79], "pip": [77, 78, 79], "grep": [77, 82], "opt": [77, 78, 79], "caskroom": [77, 79], "miniforg": 77, "site": 77, "rpath": 77, "boost": 77, "cpp": 77, "thrift": 77, "utf8proc": 77, "virtual": 77, "venv": [77, 78], "activ": [77, 78, 79, 94], "upgrad": [77, 81], "wheel": 77, "clean": 77, "deactiv": 77, "rm": 77, "rf": 77, "dist": 77, "whl": 77, "chpldoc": [77, 78], "frontend": 77, "browser": 77, "ghpage": 77, "scroll": 77, "folder": 77, "homepag": 77, "md": [77, 78, 79], "sudo": [78, 82], "apt": 78, "m4": 78, "perl": 78, "bash": [78, 79], "mawk": 78, "pkg": 78, "config": [78, 80], "cmake": [78, 81], "llvm": [78, 79, 82], "libclang": 78, "cpp14": 78, "libedit": 78, "repo": [78, 79, 83], "encourag": [78, 79], "your_fork": [78, 79], "further": [78, 79, 83], "highli": 78, "archiv": 78, "x86": 78, "wget": 78, "sh": [78, 79], "bashrc": [78, 79, 82], "packag": [78, 79, 81, 83], "pythonpath": [78, 79], "live": [78, 79], "pwd": [78, 79], "conveni": [78, 79, 86], "quickstart": [78, 79, 83], "particularli": [78, 80], "regard": 78, "distro": 78, "cento": 78, "consequ": 78, "newer": 78, "devtoolset": 78, "softwar": 78, "explod": 78, "lang": 78, "xvf": 78, "setchplenv": [78, 79], "chplconfig": 78, "chpl_re2": [78, 79], "bundl": [78, 79], "chpl_llvm": [78, 79], "chpl_gmp": [78, 79], "linux64": 78, "yum": 78, "devel": 78, "gawk": 78, "curl": 78, "incompat": 78, "el7": 78, "scl": 78, "rh": 78, "cm_version": 78, "kitwar": 78, "licens": 78, "subdir": 78, "simul": [78, 79], "manual": 79, "brew": 79, "cask": 79, "exact": 79, "chipset": 79, "2022": 79, "macosx": 79, "arm64": 79, "progress": 79, "life": [79, 81], "cycl": [79, 81], "sync": 79, "zsh": 79, "gmp": 79, "rc": 79, "path_to_chpl": 79, "chpl_target_cpu": 79, "path_to_ark": 79, "reactiv": 79, "zshrc": 79, "successfulli": 79, "hello3": 79, "datapar": 79, "defautl": 79, "funcion": 80, "prior": 80, "exclud": 80, "valuabl": 80, "switch": [80, 90], "totestmsg": 80, "testmsg": 80, "addition": [80, 87], "kextrememsg": 80, "registerfunct": 80, "minkmsg": 80, "maxkmsg": 80, "accomplish": [80, 86], "approach": [80, 99], "test_command": 80, "__dict__": 80, "sometim": [80, 90, 97], "difficult": 80, "discov": 80, "inspect": [80, 86], "wish": 80, "pyzmq": 81, "typeguard": 81, "pyfiglet": 81, "h5py": [81, 86], "pyarrow": [81, 86], "pexpect": 81, "argpars": 81, "furo": 81, "myst": 81, "parser": 81, "linkifi": 81, "ast": 81, "931": 81, "990": 81, "yaml": 81, "env_nam": 81, "yaml_fil": 81, "prune": 81, "path_to_arkouda": 81, "strategi": [81, 82, 86], "eager": 81, "subsystem": 82, "wsl": 82, "rout": 82, "ubuntu": 82, "tutori": 82, "app": 82, "account": 82, "symlink": 82, "lt": 82, "tblgen": 82, "libtinfow": 82, "ln": 82, "libtic": 82, "plan": [82, 83, 95, 97], "powershel": 82, "vcxsrv": 82, "x410": 82, "whichev": 82, "firewal": 82, "xserver": 82, "hous": 82, "conf": 82, "nameserv": 82, "awk": 82, "serv": 83, "clone": 83, "100000000": 84, "arithmet": [85, 97], "scan": 85, "summar": [85, 86], "dedupl": 85, "setop": 85, "columnar": 86, "spread": 86, "mpi": 86, "layer": 86, "pipelin": [86, 103], "aggress": 86, "hundr": 86, "thousand": 86, "ingest": [86, 103], "customiz": 86, "schema": 86, "taht": 86, "autoclass": 87, "offer": [87, 93, 100, 103], "mathemat": 89, "multiplex": 89, "29": 90, "advanc": 90, "talk": 90, "cartesian": 90, "wherea": [90, 103], "discourag": [90, 91, 93, 97, 99, 103], "forc": [90, 91, 93, 97, 103], "concept": 91, "almost": [91, 93, 97, 103], "alon": [91, 103], "unrel": 92, "movement": 92, "unsign": 93, "ieee": [93, 97], "1073741824": 93, "workhors": 94, "scienc": 94, "extract": 94, "imagin": 94, "bydayofweek": 94, "numid": 94, "013": 95, "36": 95, "934176000000015": 95, "07734942223993": 95, "syntax": 96, "assig": 96, "42": 96, "ind": 96, "matlab": 96, "touch": 96, "expans": 96, "lim": 96, "backbon": 97, "And": 97, "incorpor": 97, "implicit": 97, "pseudo": 98, "loss": 99, "functioanl": 99, "strucutur": 99, "abil": 99, "shown": 102, "sai": 102, "went": 102, "reachabl": 102, "wide": 103, "compris": 103, "whenev": 103, "threshold": 103, "pipe": 103, "googl": 103, "sacrific": 103, "notabl": 103, "exchang": 103}, "objects": {"": [[28, 0, 0, "-", "arkouda"]], "arkouda": [[28, 1, 1, "", "ARKOUDA_SUPPORTED_DTYPES"], [28, 1, 1, "", "AllSymbols"], [90, 2, 1, "", "ArrayView"], [28, 2, 1, "", "BitVector"], [28, 5, 1, "", "BitVectorizer"], [28, 2, 1, "", "CachedAccessor"], [91, 2, 1, "", "Categorical"], [28, 1, 1, "", "DTypeObjects"], [28, 1, 1, "", "DTypes"], [93, 2, 1, "", "DataFrame"], [28, 2, 1, "id183", "Datetime"], [28, 2, 1, "", "DatetimeAccessor"], [28, 2, 1, "", "DiffAggregate"], [28, 2, 1, "", "ErrorMode"], [28, 2, 1, "", "Fields"], [28, 1, 1, "", "GROUPBY_REDUCTION_TYPES"], [28, 2, 1, "", "Generator"], [94, 2, 1, "", "GroupBy"], [28, 2, 1, "", "IPv4"], [87, 2, 1, "", "Index"], [28, 2, 1, "", "LogLevel"], [28, 2, 1, "", "MultiIndex"], [28, 7, 1, "", "NonUniqueError"], [28, 2, 1, "", "Power_divergenceResult"], [28, 2, 1, "", "Properties"], [28, 1, 1, "", "RegisteredSymbols"], [28, 7, 1, "id397", "RegistrationError"], [28, 2, 1, "", "Row"], [28, 1, 1, "", "ScalarDTypes"], [100, 2, 1, "", "Series"], [28, 2, 1, "", "StringAccessor"], [28, 2, 1, "id536", "Strings"], [28, 2, 1, "id605", "Timedelta"], [89, 5, 1, "", "abs"], [2, 0, 0, "-", "accessor"], [28, 5, 1, "", "akabs"], [28, 1, 1, "", "akbool"], [28, 5, 1, "id627", "akcast"], [28, 1, 1, "id628", "akfloat64"], [28, 1, 1, "id629", "akint64"], [28, 1, 1, "id630", "akuint64"], [28, 5, 1, "", "align"], [3, 0, 0, "-", "alignment"], [89, 5, 1, "", "all"], [28, 1, 1, "", "all_scalars"], [89, 5, 1, "", "any"], [92, 5, 1, "", "arange"], [28, 5, 1, "", "arccos"], [28, 5, 1, "", "arccosh"], [28, 5, 1, "", "arcsin"], [28, 5, 1, "", "arcsinh"], [28, 5, 1, "", "arctan"], [28, 5, 1, "", "arctan2"], [28, 5, 1, "", "arctanh"], [89, 5, 1, "", "argmax"], [89, 5, 1, "", "argmaxk"], [89, 5, 1, "", "argmin"], [89, 5, 1, "", "argmink"], [88, 5, 1, "", "argsort"], [86, 5, 1, "", "array"], [18, 0, 0, "-", "array_api"], [20, 0, 0, "-", "array_view"], [28, 5, 1, "", "attach"], [28, 5, 1, "", "attach_all"], [28, 5, 1, "", "attach_pdarray"], [28, 1, 1, "id639", "bigint"], [28, 5, 1, "", "bigint_from_uint_arrays"], [28, 1, 1, "id640", "bitType"], [28, 1, 1, "", "bool"], [28, 1, 1, "", "bool_scalars"], [28, 5, 1, "id642", "broadcast"], [28, 5, 1, "", "broadcast_dims"], [28, 5, 1, "", "broadcast_to_shape"], [97, 5, 1, "", "cast"], [21, 0, 0, "-", "categorical"], [28, 5, 1, "", "ceil"], [28, 5, 1, "", "check_np_dtype"], [28, 5, 1, "", "chisquare"], [28, 5, 1, "", "clear"], [22, 0, 0, "-", "client"], [23, 0, 0, "-", "client_dtypes"], [28, 5, 1, "", "clz"], [88, 5, 1, "", "coargsort"], [28, 1, 1, "", "complex128"], [28, 1, 1, "", "complex64"], [28, 5, 1, "", "compute_join_size"], [92, 5, 1, "", "concatenate"], [102, 5, 1, "", "connect"], [28, 5, 1, "", "convert_if_categorical"], [28, 5, 1, "", "corr"], [89, 5, 1, "", "cos"], [28, 5, 1, "", "cosh"], [28, 5, 1, "", "cov"], [28, 5, 1, "id648", "create_pdarray"], [28, 5, 1, "", "ctz"], [89, 5, 1, "", "cumprod"], [89, 5, 1, "", "cumsum"], [24, 0, 0, "-", "dataframe"], [28, 5, 1, "", "date_operators"], [28, 5, 1, "id649", "date_range"], [28, 5, 1, "", "deg2rad"], [28, 5, 1, "", "disableVerbose"], [28, 5, 1, "", "divmod"], [28, 5, 1, "", "dot"], [28, 5, 1, "", "dtype"], [25, 0, 0, "-", "dtypes"], [28, 5, 1, "", "enableVerbose"], [89, 5, 1, "", "exp"], [28, 5, 1, "", "expm1"], [86, 5, 1, "", "export"], [28, 5, 1, "", "find"], [28, 1, 1, "", "float32"], [28, 1, 1, "", "float64"], [28, 1, 1, "", "float_scalars"], [28, 5, 1, "", "floor"], [28, 5, 1, "", "fmod"], [28, 5, 1, "id650", "from_series"], [28, 5, 1, "id651", "full"], [28, 5, 1, "", "full_like"], [28, 5, 1, "", "gen_ranges"], [28, 5, 1, "", "generic_concat"], [28, 5, 1, "", "get_byteorder"], [28, 5, 1, "", "get_callback"], [28, 5, 1, "", "get_columns"], [86, 5, 1, "", "get_datasets"], [28, 5, 1, "", "get_filetype"], [28, 5, 1, "", "get_null_indices"], [28, 5, 1, "", "get_server_byteorder"], [26, 0, 0, "-", "groupbyclass"], [28, 5, 1, "", "hash"], [28, 5, 1, "", "hist_all"], [95, 5, 1, "", "histogram"], [28, 5, 1, "", "histogram2d"], [28, 5, 1, "", "histogramdd"], [27, 0, 0, "-", "history"], [86, 5, 1, "", "import_data"], [101, 5, 1, "", "in1d"], [28, 5, 1, "", "in1d_intervals"], [29, 0, 0, "-", "index"], [28, 5, 1, "", "indexof1d"], [30, 0, 0, "-", "infoclass"], [28, 5, 1, "", "information"], [28, 1, 1, "", "int16"], [28, 1, 1, "", "int32"], [28, 1, 1, "id657", "int64"], [28, 1, 1, "", "int8"], [28, 1, 1, "id659", "intTypes"], [28, 1, 1, "id660", "int_scalars"], [28, 5, 1, "", "intersect"], [101, 5, 1, "", "intersect1d"], [28, 5, 1, "", "interval_lookup"], [28, 5, 1, "", "intx"], [28, 5, 1, "", "invert_permutation"], [31, 0, 0, "-", "io"], [32, 0, 0, "-", "io_util"], [28, 5, 1, "", "ip_address"], [28, 5, 1, "id661", "isSupportedInt"], [28, 5, 1, "", "isSupportedNumber"], [28, 5, 1, "", "is_cosorted"], [28, 5, 1, "", "is_ipv4"], [28, 5, 1, "", "is_ipv6"], [28, 5, 1, "", "is_registered"], [89, 5, 1, "", "is_sorted"], [28, 5, 1, "", "isfinite"], [28, 5, 1, "", "isinf"], [28, 5, 1, "id662", "isnan"], [33, 0, 0, "-", "join"], [28, 5, 1, "", "join_on_eq_with_dt"], [28, 5, 1, "", "left_align"], [92, 5, 1, "", "linspace"], [28, 5, 1, "", "list_registry"], [28, 5, 1, "", "list_symbol_table"], [28, 5, 1, "", "load"], [28, 5, 1, "", "load_all"], [89, 5, 1, "", "log"], [28, 5, 1, "", "log10"], [28, 5, 1, "", "log1p"], [28, 5, 1, "", "log2"], [34, 0, 0, "-", "logger"], [28, 5, 1, "", "lookup"], [28, 5, 1, "", "ls"], [28, 5, 1, "", "ls_csv"], [35, 0, 0, "-", "match"], [36, 0, 0, "-", "matcher"], [89, 5, 1, "", "max"], [89, 5, 1, "", "maxk"], [89, 5, 1, "", "mean"], [28, 5, 1, "", "merge"], [89, 5, 1, "", "min"], [89, 5, 1, "", "mink"], [28, 5, 1, "", "mod"], [37, 0, 0, "-", "numeric"], [28, 1, 1, "", "numeric_scalars"], [39, 0, 0, "-", "numpy"], [28, 1, 1, "", "numpy_scalars"], [92, 5, 1, "", "ones"], [92, 5, 1, "", "ones_like"], [28, 5, 1, "", "parity"], [97, 2, 1, "", "pdarray"], [40, 0, 0, "-", "pdarrayclass"], [41, 0, 0, "-", "pdarraycreation"], [42, 0, 0, "-", "pdarraysetops"], [28, 5, 1, "", "plot_dist"], [43, 0, 0, "-", "plotting"], [28, 5, 1, "", "popcount"], [28, 5, 1, "", "power"], [28, 5, 1, "", "power_divergence"], [28, 5, 1, "", "pretty_print_information"], [89, 5, 1, "", "prod"], [28, 5, 1, "", "rad2deg"], [92, 5, 1, "", "randint"], [46, 0, 0, "-", "random"], [28, 5, 1, "", "random_strings_lognormal"], [28, 5, 1, "", "random_strings_uniform"], [86, 5, 1, "", "read"], [28, 5, 1, "", "read_csv"], [28, 5, 1, "", "read_hdf"], [28, 5, 1, "", "read_parquet"], [28, 5, 1, "", "read_tagged_data"], [28, 5, 1, "", "receive"], [28, 5, 1, "", "receive_dataframe"], [28, 5, 1, "", "register_all"], [28, 5, 1, "", "resolve_scalar_dtype"], [28, 5, 1, "", "restore"], [28, 5, 1, "", "right_align"], [28, 5, 1, "", "rotl"], [28, 5, 1, "", "rotr"], [28, 5, 1, "", "round"], [47, 0, 0, "-", "row"], [28, 5, 1, "", "save_all"], [49, 0, 0, "-", "scipy"], [28, 5, 1, "", "search_intervals"], [52, 0, 0, "-", "security"], [53, 0, 0, "-", "segarray"], [54, 0, 0, "-", "series"], [101, 5, 1, "", "setdiff1d"], [101, 5, 1, "", "setxor1d"], [28, 5, 1, "", "sign"], [89, 5, 1, "", "sin"], [28, 5, 1, "", "sinh"], [28, 5, 1, "", "skew"], [28, 5, 1, "", "snapshot"], [28, 5, 1, "", "sort"], [55, 0, 0, "-", "sorting"], [28, 5, 1, "", "sqrt"], [28, 5, 1, "", "square"], [28, 5, 1, "id912", "standard_normal"], [89, 5, 1, "", "std"], [28, 1, 1, "", "str_"], [28, 1, 1, "", "str_scalars"], [28, 5, 1, "", "string_operators"], [56, 0, 0, "-", "strings"], [89, 5, 1, "", "sum"], [28, 5, 1, "", "tan"], [28, 5, 1, "", "tanh"], [57, 0, 0, "-", "timeclass"], [28, 5, 1, "id913", "timedelta_range"], [28, 5, 1, "", "to_csv"], [28, 5, 1, "", "to_hdf"], [28, 5, 1, "", "to_parquet"], [28, 5, 1, "", "translate_np_dtype"], [28, 5, 1, "", "trunc"], [28, 1, 1, "", "uint16"], [28, 1, 1, "", "uint32"], [28, 1, 1, "", "uint64"], [28, 1, 1, "", "uint8"], [28, 5, 1, "id914", "uniform"], [101, 5, 1, "", "union1d"], [101, 5, 1, "", "unique"], [28, 5, 1, "", "unregister"], [28, 5, 1, "", "unregister_all"], [28, 5, 1, "", "unregister_pdarray_by_name"], [28, 5, 1, "", "unsqueeze"], [28, 5, 1, "", "update_hdf"], [58, 0, 0, "-", "util"], [95, 5, 1, "", "value_counts"], [89, 5, 1, "", "var"], [89, 5, 1, "", "where"], [28, 5, 1, "", "write_log"], [28, 5, 1, "", "xlogy"], [28, 5, 1, "", "zero_up"], [92, 5, 1, "", "zeros"], [92, 5, 1, "", "zeros_like"]], "arkouda.ArrayView": [[90, 3, 1, "", "base"], [90, 3, 1, "", "dtype"], [90, 3, 1, "", "itemsize"], [90, 3, 1, "", "ndim"], [28, 3, 1, "", "objType"], [90, 3, 1, "", "order"], [90, 3, 1, "", "shape"], [90, 3, 1, "", "size"], [28, 4, 1, "", "to_hdf"], [28, 4, 1, "", "to_list"], [90, 5, 1, "", "to_ndarray"], [28, 4, 1, "", "update_hdf"]], "arkouda.BitVector": [[28, 3, 1, "", "conserves"], [28, 4, 1, "", "format"], [28, 4, 1, "", "from_return_msg"], [28, 4, 1, "", "opeq"], [28, 4, 1, "", "register"], [28, 3, 1, "", "special_objType"], [28, 4, 1, "", "to_list"], [28, 4, 1, "", "to_ndarray"]], "arkouda.Categorical": [[28, 3, 1, "id61", "BinOps"], [28, 3, 1, "id62", "RegisterablePieces"], [28, 3, 1, "id63", "RequiredPieces"], [28, 4, 1, "id68", "argsort"], [28, 4, 1, "id69", "attach"], [91, 3, 1, "", "categories"], [91, 3, 1, "", "codes"], [28, 4, 1, "id70", "concatenate"], [91, 4, 1, "", "contains"], [28, 3, 1, "id64", "dtype"], [91, 4, 1, "", "endswith"], [91, 4, 1, "", "from_codes"], [28, 4, 1, "id74", "from_return_msg"], [28, 4, 1, "id75", "group"], [28, 4, 1, "id76", "hash"], [28, 4, 1, "id77", "in1d"], [28, 4, 1, "id78", "info"], [28, 4, 1, "id79", "is_registered"], [28, 4, 1, "id80", "isna"], [28, 6, 1, "id60", "nbytes"], [91, 3, 1, "", "ndim"], [91, 3, 1, "", "nlevels"], [28, 3, 1, "id65", "objType"], [28, 4, 1, "id81", "parse_hdf_categoricals"], [91, 3, 1, "", "permutation"], [28, 4, 1, "id82", "pretty_print_info"], [28, 4, 1, "id83", "register"], [28, 4, 1, "id84", "reset_categories"], [28, 4, 1, "id85", "save"], [91, 3, 1, "", "segments"], [28, 4, 1, "id86", "set_categories"], [91, 3, 1, "", "shape"], [91, 3, 1, "", "size"], [28, 4, 1, "id87", "sort"], [28, 4, 1, "id88", "standardize_categories"], [91, 4, 1, "", "startswith"], [28, 4, 1, "id90", "to_hdf"], [28, 4, 1, "id91", "to_list"], [91, 5, 1, "", "to_ndarray"], [28, 4, 1, "id93", "to_parquet"], [28, 4, 1, "id94", "to_strings"], [28, 4, 1, "id95", "transfer"], [28, 4, 1, "id96", "unique"], [28, 4, 1, "id97", "unregister"], [28, 4, 1, "id98", "unregister_categorical_by_name"], [28, 4, 1, "id99", "update_hdf"]], "arkouda.DataFrame": [[28, 4, 1, "id109", "GroupBy"], [28, 4, 1, "id110", "append"], [93, 5, 1, "", "apply_permutation"], [93, 5, 1, "", "argsort"], [28, 4, 1, "id113", "attach"], [93, 5, 1, "", "coargsort"], [28, 6, 1, "id101", "columns"], [93, 5, 1, "", "concat"], [93, 5, 1, "", "copy"], [28, 4, 1, "id117", "corr"], [93, 5, 1, "", "drop"], [93, 5, 1, "", "drop_duplicates"], [28, 6, 1, "id102", "dtypes"], [28, 6, 1, "id103", "empty"], [28, 4, 1, "id120", "filter_by_range"], [28, 4, 1, "id121", "from_pandas"], [28, 4, 1, "id122", "from_return_msg"], [93, 5, 1, "", "groupby"], [93, 5, 1, "", "head"], [28, 6, 1, "id104", "index"], [28, 6, 1, "id105", "info"], [28, 4, 1, "id125", "is_registered"], [28, 4, 1, "id126", "isin"], [28, 4, 1, "id127", "load"], [28, 4, 1, "id128", "memory_usage"], [28, 4, 1, "id129", "memory_usage_info"], [28, 4, 1, "id130", "merge"], [28, 3, 1, "id108", "objType"], [28, 4, 1, "id131", "read_csv"], [28, 4, 1, "id132", "register"], [93, 5, 1, "", "rename"], [93, 5, 1, "", "reset_index"], [28, 4, 1, "id135", "sample"], [28, 4, 1, "id136", "save"], [28, 6, 1, "id106", "shape"], [28, 6, 1, "id107", "size"], [28, 4, 1, "id137", "sort_index"], [93, 5, 1, "", "sort_values"], [93, 5, 1, "", "tail"], [28, 4, 1, "id140", "to_csv"], [28, 4, 1, "id141", "to_hdf"], [28, 4, 1, "id142", "to_markdown"], [93, 5, 1, "", "to_pandas"], [28, 4, 1, "id144", "to_parquet"], [28, 4, 1, "id145", "transfer"], [28, 4, 1, "id146", "unregister"], [28, 4, 1, "id147", "unregister_dataframe_by_name"], [28, 4, 1, "id148", "update_hdf"], [28, 4, 1, "id149", "update_nrows"]], "arkouda.Datetime": [[28, 6, 1, "id184", "date"], [28, 6, 1, "id185", "day"], [28, 6, 1, "id186", "day_of_week"], [28, 6, 1, "id187", "day_of_year"], [28, 6, 1, "id188", "dayofweek"], [28, 6, 1, "id189", "dayofyear"], [28, 6, 1, "id190", "hour"], [28, 6, 1, "id191", "is_leap_year"], [28, 4, 1, "id210", "is_registered"], [28, 4, 1, "id211", "isocalendar"], [28, 6, 1, "id192", "microsecond"], [28, 6, 1, "id193", "millisecond"], [28, 6, 1, "id194", "minute"], [28, 6, 1, "id195", "month"], [28, 6, 1, "id196", "nanosecond"], [28, 4, 1, "id212", "register"], [28, 6, 1, "id197", "second"], [28, 3, 1, "id202", "special_objType"], [28, 4, 1, "id213", "sum"], [28, 3, 1, "id203", "supported_opeq"], [28, 3, 1, "id204", "supported_with_datetime"], [28, 3, 1, "id205", "supported_with_pdarray"], [28, 3, 1, "id206", "supported_with_r_datetime"], [28, 3, 1, "id207", "supported_with_r_pdarray"], [28, 3, 1, "id208", "supported_with_r_timedelta"], [28, 3, 1, "id209", "supported_with_timedelta"], [28, 4, 1, "id214", "to_pandas"], [28, 4, 1, "id215", "unregister"], [28, 6, 1, "id198", "week"], [28, 6, 1, "id199", "weekday"], [28, 6, 1, "id200", "weekofyear"], [28, 6, 1, "id201", "year"]], "arkouda.DiffAggregate": [[28, 3, 1, "", "gb"], [28, 3, 1, "", "values"]], "arkouda.ErrorMode": [[28, 3, 1, "", "ignore"], [28, 3, 1, "", "return_validity"], [28, 3, 1, "", "strict"]], "arkouda.Fields": [[28, 4, 1, "", "format"], [28, 4, 1, "", "opeq"]], "arkouda.Generator": [[28, 4, 1, "", "integers"], [28, 4, 1, "", "random"], [28, 4, 1, "", "standard_normal"], [28, 4, 1, "", "uniform"]], "arkouda.GroupBy": [[94, 4, 1, "", "AND"], [94, 4, 1, "", "OR"], [28, 3, 1, "id358", "Reductions"], [94, 4, 1, "", "XOR"], [94, 4, 1, "", "aggregate"], [94, 4, 1, "", "all"], [94, 4, 1, "", "any"], [94, 4, 1, "", "argmax"], [94, 4, 1, "", "argmin"], [94, 4, 1, "", "attach"], [94, 4, 1, "", "broadcast"], [94, 4, 1, "", "build_from_components"], [94, 4, 1, "", "count"], [94, 3, 1, "", "dropna"], [94, 4, 1, "", "first"], [28, 4, 1, "id373", "from_return_msg"], [94, 4, 1, "", "is_registered"], [94, 3, 1, "", "logger"], [94, 4, 1, "", "max"], [94, 4, 1, "", "mean"], [94, 4, 1, "", "median"], [94, 4, 1, "", "min"], [94, 4, 1, "", "mode"], [94, 4, 1, "", "most_common"], [94, 3, 1, "", "ngroups"], [94, 3, 1, "", "nkeys"], [94, 4, 1, "", "nunique"], [28, 3, 1, "id359", "objType"], [94, 3, 1, "", "permutation"], [94, 4, 1, "", "prod"], [94, 4, 1, "", "register"], [94, 3, 1, "", "segments"], [94, 4, 1, "id0", "size"], [94, 4, 1, "", "std"], [94, 4, 1, "", "sum"], [94, 4, 1, "", "to_hdf"], [94, 4, 1, "", "unique"], [94, 3, 1, "", "unique_keys"], [94, 4, 1, "", "unregister"], [94, 4, 1, "", "unregister_groupby_by_name"], [28, 4, 1, "id391", "update_hdf"], [94, 4, 1, "", "var"]], "arkouda.IPv4": [[28, 4, 1, "", "export_uint"], [28, 4, 1, "", "format"], [28, 4, 1, "", "normalize"], [28, 4, 1, "", "opeq"], [28, 4, 1, "", "register"], [28, 3, 1, "", "special_objType"], [28, 4, 1, "", "to_hdf"], [28, 4, 1, "", "to_list"], [28, 4, 1, "", "to_ndarray"], [28, 4, 1, "", "update_hdf"]], "arkouda.Index": [[87, 5, 1, "", "argsort"], [87, 5, 1, "", "concat"], [28, 4, 1, "", "factory"], [28, 4, 1, "", "from_return_msg"], [28, 6, 1, "", "index"], [28, 4, 1, "", "is_registered"], [28, 6, 1, "", "is_unique"], [87, 5, 1, "", "lookup"], [28, 4, 1, "", "map"], [28, 4, 1, "", "memory_usage"], [28, 3, 1, "", "objType"], [28, 4, 1, "", "register"], [28, 4, 1, "", "save"], [87, 5, 1, "", "set_dtype"], [28, 6, 1, "", "shape"], [28, 4, 1, "", "to_csv"], [28, 4, 1, "", "to_dict"], [28, 4, 1, "", "to_hdf"], [28, 4, 1, "", "to_list"], [28, 4, 1, "", "to_ndarray"], [28, 4, 1, "", "to_pandas"], [28, 4, 1, "", "to_parquet"], [28, 4, 1, "", "unregister"], [28, 4, 1, "", "update_hdf"]], "arkouda.LogLevel": [[28, 3, 1, "", "CRITICAL"], [28, 3, 1, "", "DEBUG"], [28, 3, 1, "", "ERROR"], [28, 3, 1, "", "INFO"], [28, 3, 1, "", "WARN"]], "arkouda.MultiIndex": [[87, 5, 1, "", "argsort"], [87, 5, 1, "", "concat"], [28, 6, 1, "", "index"], [28, 4, 1, "", "is_registered"], [87, 5, 1, "", "lookup"], [28, 4, 1, "", "memory_usage"], [28, 3, 1, "", "objType"], [28, 4, 1, "", "register"], [87, 5, 1, "", "set_dtype"], [28, 4, 1, "", "to_dict"], [28, 4, 1, "", "to_hdf"], [28, 4, 1, "", "to_list"], [28, 4, 1, "", "to_ndarray"], [28, 4, 1, "", "to_pandas"], [28, 4, 1, "", "unregister"], [28, 4, 1, "", "update_hdf"]], "arkouda.Power_divergenceResult": [[28, 3, 1, "", "pvalue"], [28, 3, 1, "", "statistic"]], "arkouda.SegArray": [[99, 5, 1, "", "append"], [99, 5, 1, "", "append_single"], [99, 5, 1, "", "get_jth"], [99, 5, 1, "", "get_length_n"], [99, 5, 1, "", "get_ngrams"], [99, 5, 1, "", "get_prefixes"], [99, 5, 1, "", "get_suffixes"], [99, 5, 1, "", "intersect"], [99, 5, 1, "", "prepend_single"], [99, 5, 1, "", "remove_repeats"], [99, 5, 1, "", "set_jth"], [99, 5, 1, "", "setdiff"], [99, 5, 1, "", "setxor"], [99, 5, 1, "", "to_ndarray"], [99, 5, 1, "", "union"]], "arkouda.Series": [[28, 4, 1, "", "add"], [28, 6, 1, "", "at"], [28, 4, 1, "", "attach"], [28, 4, 1, "", "concat"], [28, 4, 1, "", "diff"], [28, 3, 1, "", "dt"], [28, 4, 1, "", "fillna"], [28, 4, 1, "", "from_return_msg"], [28, 4, 1, "", "has_repeat_labels"], [28, 4, 1, "", "hasnans"], [100, 5, 1, "", "head"], [28, 6, 1, "", "iat"], [28, 6, 1, "", "iloc"], [28, 4, 1, "", "is_registered"], [28, 4, 1, "", "isin"], [28, 4, 1, "", "isna"], [28, 4, 1, "", "isnull"], [28, 6, 1, "", "loc"], [100, 5, 1, "id0", "locate"], [28, 4, 1, "", "map"], [28, 4, 1, "", "memory_usage"], [28, 4, 1, "", "notna"], [28, 4, 1, "", "notnull"], [28, 3, 1, "", "objType"], [100, 5, 1, "", "pdconcat"], [28, 4, 1, "", "register"], [28, 6, 1, "", "shape"], [100, 5, 1, "", "sort_index"], [100, 5, 1, "", "sort_values"], [28, 3, 1, "", "str_acc"], [100, 5, 1, "", "tail"], [28, 4, 1, "", "to_dataframe"], [28, 4, 1, "", "to_list"], [28, 4, 1, "", "to_markdown"], [100, 5, 1, "", "to_pandas"], [100, 5, 1, "", "topn"], [28, 4, 1, "", "unregister"], [28, 4, 1, "", "validate_key"], [28, 4, 1, "", "validate_val"], [100, 5, 1, "", "value_counts"]], "arkouda.Strings": [[28, 3, 1, "id544", "BinOps"], [28, 4, 1, "id546", "astype"], [28, 4, 1, "id547", "attach"], [28, 4, 1, "id548", "cached_regex_patterns"], [28, 4, 1, "id549", "capitalize"], [103, 4, 1, "", "contains"], [28, 4, 1, "id551", "decode"], [28, 3, 1, "id542", "dtype"], [28, 4, 1, "id552", "encode"], [103, 4, 1, "", "endswith"], [28, 3, 1, "id537", "entry"], [103, 4, 1, "", "find_locations"], [103, 4, 1, "", "findall"], [103, 4, 1, "", "flatten"], [28, 4, 1, "id557", "from_parts"], [28, 4, 1, "id558", "from_return_msg"], [103, 4, 1, "", "fullmatch"], [28, 4, 1, "id560", "get_bytes"], [28, 4, 1, "id561", "get_lengths"], [28, 4, 1, "id562", "get_offsets"], [28, 4, 1, "id563", "get_prefixes"], [28, 4, 1, "id564", "get_suffixes"], [28, 4, 1, "id565", "group"], [28, 4, 1, "id566", "hash"], [28, 4, 1, "id567", "info"], [28, 4, 1, "id568", "is_registered"], [28, 4, 1, "id569", "isalnum"], [28, 4, 1, "id570", "isalpha"], [28, 4, 1, "id571", "isdecimal"], [28, 4, 1, "id572", "isdigit"], [28, 4, 1, "id573", "isempty"], [28, 4, 1, "id574", "islower"], [28, 4, 1, "id575", "isspace"], [28, 4, 1, "id576", "istitle"], [28, 4, 1, "id577", "isupper"], [28, 3, 1, "id543", "logger"], [28, 4, 1, "id578", "lower"], [103, 4, 1, "", "lstick"], [103, 4, 1, "", "match"], [28, 3, 1, "id539", "nbytes"], [28, 3, 1, "id540", "ndim"], [28, 3, 1, "id545", "objType"], [103, 4, 1, "", "peel"], [28, 4, 1, "id582", "pretty_print_info"], [28, 4, 1, "id583", "purge_cached_regex_patterns"], [28, 4, 1, "id584", "register"], [103, 4, 1, "", "rpeel"], [28, 4, 1, "id586", "save"], [103, 4, 1, "", "search"], [28, 3, 1, "id541", "shape"], [28, 3, 1, "id538", "size"], [103, 4, 1, "", "split"], [103, 4, 1, "", "startswith"], [103, 4, 1, "", "stick"], [28, 4, 1, "id591", "strip"], [103, 4, 1, "", "sub"], [103, 4, 1, "", "subn"], [28, 4, 1, "id594", "title"], [28, 4, 1, "id595", "to_csv"], [28, 4, 1, "id596", "to_hdf"], [28, 4, 1, "id597", "to_list"], [103, 5, 1, "", "to_ndarray"], [28, 4, 1, "id599", "to_parquet"], [28, 4, 1, "id600", "transfer"], [28, 4, 1, "id601", "unregister"], [28, 4, 1, "id602", "unregister_strings_by_name"], [28, 4, 1, "id603", "update_hdf"], [28, 4, 1, "id604", "upper"]], "arkouda.Timedelta": [[28, 4, 1, "id619", "abs"], [28, 6, 1, "id606", "components"], [28, 6, 1, "id607", "days"], [28, 4, 1, "id620", "is_registered"], [28, 6, 1, "id608", "microseconds"], [28, 6, 1, "id609", "nanoseconds"], [28, 4, 1, "id621", "register"], [28, 6, 1, "id610", "seconds"], [28, 3, 1, "id611", "special_objType"], [28, 4, 1, "id622", "std"], [28, 4, 1, "id623", "sum"], [28, 3, 1, "id612", "supported_opeq"], [28, 3, 1, "id613", "supported_with_datetime"], [28, 3, 1, "id614", "supported_with_pdarray"], [28, 3, 1, "id615", "supported_with_r_datetime"], [28, 3, 1, "id616", "supported_with_r_pdarray"], [28, 3, 1, "id617", "supported_with_r_timedelta"], [28, 3, 1, "id618", "supported_with_timedelta"], [28, 4, 1, "id624", "to_pandas"], [28, 4, 1, "id625", "total_seconds"], [28, 4, 1, "id626", "unregister"]], "arkouda.accessor": [[2, 2, 1, "", "CachedAccessor"], [2, 2, 1, "", "DatetimeAccessor"], [2, 2, 1, "", "Properties"], [2, 2, 1, "", "StringAccessor"], [2, 5, 1, "", "date_operators"], [2, 5, 1, "", "string_operators"]], "arkouda.alignment": [[3, 7, 1, "", "NonUniqueError"], [3, 5, 1, "", "align"], [3, 5, 1, "", "find"], [3, 5, 1, "", "in1d_intervals"], [3, 5, 1, "", "interval_lookup"], [3, 5, 1, "", "is_cosorted"], [3, 5, 1, "", "left_align"], [3, 5, 1, "", "lookup"], [3, 5, 1, "", "right_align"], [3, 5, 1, "", "search_intervals"], [3, 5, 1, "", "unsqueeze"], [3, 5, 1, "", "zero_up"]], "arkouda.array_api": [[4, 0, 0, "-", "_array_object"], [5, 0, 0, "-", "_constants"], [6, 0, 0, "-", "_creation_functions"], [7, 0, 0, "-", "_data_type_functions"], [8, 0, 0, "-", "_dtypes"], [9, 0, 0, "-", "_elementwise_functions"], [10, 0, 0, "-", "_indexing_functions"], [11, 0, 0, "-", "_manipulation_functions"], [12, 0, 0, "-", "_searching_functions"], [13, 0, 0, "-", "_set_functions"], [14, 0, 0, "-", "_sorting_functions"], [15, 0, 0, "-", "_statistical_functions"], [16, 0, 0, "-", "_typing"], [17, 0, 0, "-", "_utility_functions"], [19, 0, 0, "-", "linalg"]], "arkouda.array_api._array_object": [[4, 2, 1, "", "Array"], [4, 1, 1, "", "HANDLED_FUNCTIONS"], [4, 5, 1, "", "implements_numpy"]], "arkouda.array_api._array_object.Array": [[4, 6, 1, "", "T"], [4, 6, 1, "", "device"], [4, 6, 1, "", "dtype"], [4, 4, 1, "", "item"], [4, 6, 1, "", "mT"], [4, 6, 1, "", "ndim"], [4, 6, 1, "", "shape"], [4, 6, 1, "", "size"], [4, 4, 1, "", "to_device"], [4, 4, 1, "", "to_ndarray"], [4, 4, 1, "", "tolist"], [4, 4, 1, "", "transpose"]], "arkouda.array_api._constants": [[5, 1, 1, "", "e"], [5, 1, 1, "", "inf"], [5, 1, 1, "", "nan"], [5, 1, 1, "", "pi"]], "arkouda.array_api._creation_functions": [[6, 5, 1, "", "arange"], [6, 5, 1, "", "asarray"], [6, 5, 1, "", "empty"], [6, 5, 1, "", "empty_like"], [6, 5, 1, "", "eye"], [6, 5, 1, "", "from_dlpack"], [6, 5, 1, "", "full"], [6, 5, 1, "", "full_like"], [6, 5, 1, "", "linspace"], [6, 5, 1, "", "meshgrid"], [6, 5, 1, "", "ones"], [6, 5, 1, "", "ones_like"], [6, 5, 1, "", "tril"], [6, 5, 1, "", "triu"], [6, 5, 1, "", "zeros"], [6, 5, 1, "", "zeros_like"]], "arkouda.array_api._data_type_functions": [[7, 5, 1, "", "astype"], [7, 5, 1, "", "can_cast"], [7, 2, 1, "", "finfo_object"], [7, 2, 1, "", "iinfo_object"], [7, 5, 1, "", "isdtype"], [7, 5, 1, "", "result_type"]], "arkouda.array_api._data_type_functions.finfo_object": [[7, 3, 1, "", "bits"], [7, 3, 1, "", "dtype"], [7, 3, 1, "", "eps"], [7, 3, 1, "", "max"], [7, 3, 1, "", "min"], [7, 3, 1, "", "smallest_normal"]], "arkouda.array_api._data_type_functions.iinfo_object": [[7, 3, 1, "", "bits"], [7, 3, 1, "", "dtype"], [7, 3, 1, "", "max"], [7, 3, 1, "", "min"]], "arkouda.array_api._dtypes": [[8, 1, 1, "", "bool"], [8, 1, 1, "", "complex128"], [8, 1, 1, "", "complex64"], [8, 1, 1, "", "float32"], [8, 1, 1, "", "float64"], [8, 1, 1, "", "int16"], [8, 1, 1, "", "int32"], [8, 1, 1, "", "int64"], [8, 1, 1, "", "int8"], [8, 1, 1, "", "uint16"], [8, 1, 1, "", "uint32"], [8, 1, 1, "", "uint64"], [8, 1, 1, "", "uint8"]], "arkouda.array_api._elementwise_functions": [[9, 5, 1, "", "abs"], [9, 5, 1, "", "acos"], [9, 5, 1, "", "acosh"], [9, 5, 1, "", "add"], [9, 5, 1, "", "asin"], [9, 5, 1, "", "asinh"], [9, 5, 1, "", "atan"], [9, 5, 1, "", "atan2"], [9, 5, 1, "", "atanh"], [9, 5, 1, "", "bitwise_and"], [9, 5, 1, "", "bitwise_invert"], [9, 5, 1, "", "bitwise_left_shift"], [9, 5, 1, "", "bitwise_or"], [9, 5, 1, "", "bitwise_right_shift"], [9, 5, 1, "", "bitwise_xor"], [9, 5, 1, "", "ceil"], [9, 5, 1, "", "conj"], [9, 5, 1, "", "cos"], [9, 5, 1, "", "cosh"], [9, 5, 1, "", "divide"], [9, 5, 1, "", "equal"], [9, 5, 1, "", "exp"], [9, 5, 1, "", "expm1"], [9, 5, 1, "", "floor"], [9, 5, 1, "", "floor_divide"], [9, 5, 1, "", "greater"], [9, 5, 1, "", "greater_equal"], [9, 5, 1, "", "imag"], [9, 5, 1, "", "isfinite"], [9, 5, 1, "", "isinf"], [9, 5, 1, "", "isnan"], [9, 5, 1, "", "less"], [9, 5, 1, "", "less_equal"], [9, 5, 1, "", "log"], [9, 5, 1, "", "log10"], [9, 5, 1, "", "log1p"], [9, 5, 1, "", "log2"], [9, 5, 1, "", "logaddexp"], [9, 5, 1, "", "logical_and"], [9, 5, 1, "", "logical_not"], [9, 5, 1, "", "logical_or"], [9, 5, 1, "", "logical_xor"], [9, 5, 1, "", "multiply"], [9, 5, 1, "", "negative"], [9, 5, 1, "", "not_equal"], [9, 5, 1, "", "positive"], [9, 5, 1, "", "pow"], [9, 5, 1, "", "real"], [9, 5, 1, "", "remainder"], [9, 5, 1, "", "round"], [9, 5, 1, "", "sign"], [9, 5, 1, "", "sin"], [9, 5, 1, "", "sinh"], [9, 5, 1, "", "sqrt"], [9, 5, 1, "", "square"], [9, 5, 1, "", "subtract"], [9, 5, 1, "", "tan"], [9, 5, 1, "", "tanh"], [9, 5, 1, "", "trunc"]], "arkouda.array_api._indexing_functions": [[10, 5, 1, "", "take"]], "arkouda.array_api._manipulation_functions": [[11, 5, 1, "", "broadcast_arrays"], [11, 5, 1, "", "broadcast_to"], [11, 5, 1, "", "concat"], [11, 5, 1, "", "expand_dims"], [11, 5, 1, "", "flip"], [11, 5, 1, "", "moveaxis"], [11, 5, 1, "", "permute_dims"], [11, 5, 1, "", "repeat"], [11, 5, 1, "", "reshape"], [11, 5, 1, "", "roll"], [11, 5, 1, "", "squeeze"], [11, 5, 1, "", "stack"], [11, 5, 1, "", "tile"], [11, 5, 1, "", "unstack"]], "arkouda.array_api._searching_functions": [[12, 5, 1, "", "argmax"], [12, 5, 1, "", "argmin"], [12, 5, 1, "", "nonzero"], [12, 5, 1, "", "searchsorted"], [12, 5, 1, "", "where"]], "arkouda.array_api._set_functions": [[13, 2, 1, "", "UniqueAllResult"], [13, 2, 1, "", "UniqueCountsResult"], [13, 2, 1, "", "UniqueInverseResult"], [13, 5, 1, "", "unique_all"], [13, 5, 1, "", "unique_counts"], [13, 5, 1, "", "unique_inverse"], [13, 5, 1, "", "unique_values"]], "arkouda.array_api._set_functions.UniqueAllResult": [[13, 3, 1, "", "counts"], [13, 3, 1, "", "indices"], [13, 3, 1, "", "inverse_indices"], [13, 3, 1, "", "values"]], "arkouda.array_api._set_functions.UniqueCountsResult": [[13, 3, 1, "", "counts"], [13, 3, 1, "", "values"]], "arkouda.array_api._set_functions.UniqueInverseResult": [[13, 3, 1, "", "inverse_indices"], [13, 3, 1, "", "values"]], "arkouda.array_api._sorting_functions": [[14, 5, 1, "", "argsort"], [14, 5, 1, "", "sort"]], "arkouda.array_api._statistical_functions": [[15, 5, 1, "", "max"], [15, 5, 1, "", "mean"], [15, 5, 1, "", "mean_shim"], [15, 5, 1, "", "min"], [15, 5, 1, "", "prod"], [15, 5, 1, "", "prod_sum_dtype"], [15, 5, 1, "", "std"], [15, 5, 1, "", "sum"], [15, 5, 1, "", "var"]], "arkouda.array_api._typing": [[16, 2, 1, "", "Array"], [16, 1, 1, "", "Device"], [16, 1, 1, "", "Dtype"], [16, 1, 1, "", "PyCapsule"], [16, 1, 1, "", "SupportsBufferProtocol"], [16, 2, 1, "", "SupportsDLPack"]], "arkouda.array_api._typing.Array": [[16, 6, 1, "", "T"], [16, 6, 1, "", "device"], [16, 6, 1, "", "dtype"], [16, 4, 1, "", "item"], [16, 6, 1, "", "mT"], [16, 6, 1, "", "ndim"], [16, 6, 1, "", "shape"], [16, 6, 1, "", "size"], [16, 4, 1, "", "to_device"], [16, 4, 1, "", "to_ndarray"], [16, 4, 1, "", "tolist"], [16, 4, 1, "", "transpose"]], "arkouda.array_api._utility_functions": [[17, 5, 1, "", "all"], [17, 5, 1, "", "any"]], "arkouda.array_api.linalg": [[19, 5, 1, "", "matmul"], [19, 5, 1, "", "matrix_transpose"], [19, 5, 1, "", "tensordot"], [19, 5, 1, "", "vecdot"]], "arkouda.array_view": [[20, 2, 1, "", "ArrayView"]], "arkouda.array_view.ArrayView": [[20, 3, 1, "", "base"], [20, 3, 1, "", "dtype"], [20, 3, 1, "", "itemsize"], [20, 3, 1, "", "ndim"], [20, 3, 1, "", "objType"], [20, 3, 1, "", "order"], [20, 3, 1, "", "shape"], [20, 3, 1, "", "size"], [20, 4, 1, "", "to_hdf"], [20, 4, 1, "", "to_list"], [20, 4, 1, "", "to_ndarray"], [20, 4, 1, "", "update_hdf"]], "arkouda.categorical": [[21, 2, 1, "", "Categorical"]], "arkouda.categorical.Categorical": [[21, 3, 1, "", "BinOps"], [21, 3, 1, "", "RegisterablePieces"], [21, 3, 1, "", "RequiredPieces"], [21, 4, 1, "", "argsort"], [21, 4, 1, "", "attach"], [21, 3, 1, "", "categories"], [21, 3, 1, "", "codes"], [21, 4, 1, "", "concatenate"], [21, 4, 1, "", "contains"], [21, 3, 1, "", "dtype"], [21, 4, 1, "", "endswith"], [21, 4, 1, "", "from_codes"], [21, 4, 1, "", "from_return_msg"], [21, 4, 1, "", "group"], [21, 4, 1, "", "hash"], [21, 4, 1, "", "in1d"], [21, 4, 1, "", "info"], [21, 4, 1, "", "is_registered"], [21, 4, 1, "", "isna"], [21, 6, 1, "", "nbytes"], [21, 3, 1, "", "ndim"], [21, 3, 1, "", "nlevels"], [21, 3, 1, "", "objType"], [21, 4, 1, "", "parse_hdf_categoricals"], [21, 3, 1, "id0", "permutation"], [21, 4, 1, "", "pretty_print_info"], [21, 4, 1, "", "register"], [21, 4, 1, "", "reset_categories"], [21, 4, 1, "", "save"], [21, 3, 1, "id1", "segments"], [21, 4, 1, "", "set_categories"], [21, 3, 1, "", "shape"], [21, 3, 1, "", "size"], [21, 4, 1, "", "sort"], [21, 4, 1, "", "standardize_categories"], [21, 4, 1, "", "startswith"], [21, 4, 1, "", "to_hdf"], [21, 4, 1, "", "to_list"], [21, 4, 1, "", "to_ndarray"], [21, 4, 1, "", "to_parquet"], [21, 4, 1, "", "to_strings"], [21, 4, 1, "", "transfer"], [21, 4, 1, "", "unique"], [21, 4, 1, "", "unregister"], [21, 4, 1, "", "unregister_categorical_by_name"], [21, 4, 1, "", "update_hdf"]], "arkouda.client": [[22, 5, 1, "", "connect"], [22, 5, 1, "", "disconnect"], [22, 5, 1, "", "generate_history"], [22, 5, 1, "", "get_config"], [22, 5, 1, "", "get_mem_avail"], [22, 5, 1, "", "get_mem_status"], [22, 5, 1, "", "get_mem_used"], [22, 5, 1, "", "get_server_commands"], [22, 5, 1, "", "print_server_commands"], [22, 5, 1, "", "ruok"], [22, 5, 1, "", "shutdown"]], "arkouda.client_dtypes": [[23, 2, 1, "", "BitVector"], [23, 5, 1, "", "BitVectorizer"], [23, 2, 1, "", "Fields"], [23, 2, 1, "", "IPv4"], [23, 5, 1, "", "ip_address"], [23, 5, 1, "", "is_ipv4"], [23, 5, 1, "", "is_ipv6"]], "arkouda.client_dtypes.BitVector": [[23, 3, 1, "", "conserves"], [23, 4, 1, "", "format"], [23, 4, 1, "", "from_return_msg"], [23, 4, 1, "", "opeq"], [23, 4, 1, "", "register"], [23, 3, 1, "", "special_objType"], [23, 4, 1, "", "to_list"], [23, 4, 1, "", "to_ndarray"]], "arkouda.client_dtypes.Fields": [[23, 4, 1, "", "format"], [23, 4, 1, "", "opeq"]], "arkouda.client_dtypes.IPv4": [[23, 4, 1, "", "export_uint"], [23, 4, 1, "", "format"], [23, 4, 1, "", "normalize"], [23, 4, 1, "", "opeq"], [23, 4, 1, "", "register"], [23, 3, 1, "", "special_objType"], [23, 4, 1, "", "to_hdf"], [23, 4, 1, "", "to_list"], [23, 4, 1, "", "to_ndarray"], [23, 4, 1, "", "update_hdf"]], "arkouda.dataframe": [[24, 2, 1, "", "DataFrame"], [24, 2, 1, "", "DiffAggregate"], [24, 5, 1, "", "intersect"], [24, 5, 1, "", "intx"], [24, 5, 1, "", "invert_permutation"], [24, 5, 1, "", "merge"]], "arkouda.dataframe.DataFrame": [[24, 4, 1, "", "GroupBy"], [24, 4, 1, "", "append"], [24, 4, 1, "", "apply_permutation"], [24, 4, 1, "", "argsort"], [24, 4, 1, "", "attach"], [24, 4, 1, "", "coargsort"], [24, 6, 1, "", "columns"], [24, 4, 1, "", "concat"], [24, 4, 1, "", "copy"], [24, 4, 1, "", "corr"], [24, 4, 1, "", "drop"], [24, 4, 1, "", "drop_duplicates"], [24, 6, 1, "", "dtypes"], [24, 6, 1, "", "empty"], [24, 4, 1, "", "filter_by_range"], [24, 4, 1, "", "from_pandas"], [24, 4, 1, "", "from_return_msg"], [24, 4, 1, "", "groupby"], [24, 4, 1, "", "head"], [24, 6, 1, "", "index"], [24, 6, 1, "", "info"], [24, 4, 1, "", "is_registered"], [24, 4, 1, "", "isin"], [24, 4, 1, "", "load"], [24, 4, 1, "", "memory_usage"], [24, 4, 1, "", "memory_usage_info"], [24, 4, 1, "", "merge"], [24, 3, 1, "", "objType"], [24, 4, 1, "", "read_csv"], [24, 4, 1, "", "register"], [24, 4, 1, "", "rename"], [24, 4, 1, "", "reset_index"], [24, 4, 1, "", "sample"], [24, 4, 1, "", "save"], [24, 6, 1, "", "shape"], [24, 6, 1, "", "size"], [24, 4, 1, "", "sort_index"], [24, 4, 1, "", "sort_values"], [24, 4, 1, "", "tail"], [24, 4, 1, "", "to_csv"], [24, 4, 1, "", "to_hdf"], [24, 4, 1, "", "to_markdown"], [24, 4, 1, "", "to_pandas"], [24, 4, 1, "", "to_parquet"], [24, 4, 1, "", "transfer"], [24, 4, 1, "", "unregister"], [24, 4, 1, "", "unregister_dataframe_by_name"], [24, 4, 1, "", "update_hdf"], [24, 4, 1, "", "update_nrows"]], "arkouda.dataframe.DiffAggregate": [[24, 3, 1, "", "gb"], [24, 3, 1, "", "values"]], "arkouda.dtypes": [[25, 1, 1, "", "ARKOUDA_SUPPORTED_DTYPES"], [25, 1, 1, "", "DTypeObjects"], [25, 1, 1, "", "DTypes"], [25, 1, 1, "", "ScalarDTypes"], [25, 1, 1, "", "all_scalars"], [25, 1, 1, "", "bigint"], [25, 1, 1, "", "bitType"], [25, 1, 1, "", "bool"], [25, 1, 1, "", "bool_scalars"], [25, 5, 1, "", "check_np_dtype"], [25, 1, 1, "", "complex128"], [25, 1, 1, "", "complex64"], [25, 5, 1, "", "dtype"], [25, 1, 1, "", "float32"], [25, 1, 1, "", "float64"], [25, 1, 1, "", "float_scalars"], [25, 5, 1, "", "get_byteorder"], [25, 5, 1, "", "get_server_byteorder"], [25, 1, 1, "", "int16"], [25, 1, 1, "", "int32"], [25, 1, 1, "", "int64"], [25, 1, 1, "", "int8"], [25, 1, 1, "", "intTypes"], [25, 1, 1, "", "int_scalars"], [25, 5, 1, "", "isSupportedNumber"], [25, 1, 1, "", "numeric_scalars"], [25, 1, 1, "", "numpy_scalars"], [25, 5, 1, "", "resolve_scalar_dtype"], [25, 1, 1, "", "str_"], [25, 1, 1, "", "str_scalars"], [25, 5, 1, "", "translate_np_dtype"], [25, 1, 1, "", "uint16"], [25, 1, 1, "", "uint32"], [25, 1, 1, "", "uint64"], [25, 1, 1, "", "uint8"]], "arkouda.groupbyclass": [[26, 1, 1, "", "GROUPBY_REDUCTION_TYPES"], [26, 2, 1, "", "GroupBy"], [26, 5, 1, "", "broadcast"], [26, 5, 1, "", "unique"]], "arkouda.groupbyclass.GroupBy": [[26, 4, 1, "", "AND"], [26, 4, 1, "", "OR"], [26, 3, 1, "", "Reductions"], [26, 4, 1, "", "XOR"], [26, 4, 1, "", "aggregate"], [26, 4, 1, "", "all"], [26, 4, 1, "", "any"], [26, 4, 1, "", "argmax"], [26, 4, 1, "", "argmin"], [26, 4, 1, "", "attach"], [26, 4, 1, "", "broadcast"], [26, 4, 1, "", "build_from_components"], [26, 4, 1, "", "count"], [26, 3, 1, "", "dropna"], [26, 4, 1, "", "first"], [26, 4, 1, "", "from_return_msg"], [26, 4, 1, "", "is_registered"], [26, 3, 1, "", "logger"], [26, 4, 1, "", "max"], [26, 4, 1, "", "mean"], [26, 4, 1, "", "median"], [26, 4, 1, "", "min"], [26, 4, 1, "", "mode"], [26, 4, 1, "", "most_common"], [26, 3, 1, "", "ngroups"], [26, 3, 1, "", "nkeys"], [26, 4, 1, "", "nunique"], [26, 3, 1, "", "objType"], [26, 3, 1, "", "permutation"], [26, 4, 1, "", "prod"], [26, 4, 1, "", "register"], [26, 3, 1, "", "segments"], [26, 4, 1, "id0", "size"], [26, 4, 1, "", "std"], [26, 4, 1, "", "sum"], [26, 4, 1, "", "to_hdf"], [26, 4, 1, "", "unique"], [26, 3, 1, "", "unique_keys"], [26, 4, 1, "", "unregister"], [26, 4, 1, "", "unregister_groupby_by_name"], [26, 4, 1, "", "update_hdf"], [26, 4, 1, "", "var"]], "arkouda.history": [[27, 2, 1, "", "HistoryRetriever"], [27, 2, 1, "", "NotebookHistoryRetriever"], [27, 2, 1, "", "ShellHistoryRetriever"]], "arkouda.history.HistoryRetriever": [[27, 4, 1, "", "retrieve"]], "arkouda.history.NotebookHistoryRetriever": [[27, 4, 1, "", "retrieve"]], "arkouda.history.ShellHistoryRetriever": [[27, 4, 1, "", "retrieve"]], "arkouda.index": [[29, 2, 1, "", "Index"], [29, 2, 1, "", "MultiIndex"]], "arkouda.index.Index": [[29, 4, 1, "", "argsort"], [29, 4, 1, "", "concat"], [29, 4, 1, "", "factory"], [29, 4, 1, "", "from_return_msg"], [29, 6, 1, "", "index"], [29, 4, 1, "", "is_registered"], [29, 6, 1, "", "is_unique"], [29, 4, 1, "", "lookup"], [29, 4, 1, "", "map"], [29, 4, 1, "", "memory_usage"], [29, 3, 1, "", "objType"], [29, 4, 1, "", "register"], [29, 4, 1, "", "save"], [29, 4, 1, "", "set_dtype"], [29, 6, 1, "", "shape"], [29, 4, 1, "", "to_csv"], [29, 4, 1, "", "to_dict"], [29, 4, 1, "", "to_hdf"], [29, 4, 1, "", "to_list"], [29, 4, 1, "", "to_ndarray"], [29, 4, 1, "", "to_pandas"], [29, 4, 1, "", "to_parquet"], [29, 4, 1, "", "unregister"], [29, 4, 1, "", "update_hdf"]], "arkouda.index.MultiIndex": [[29, 4, 1, "", "argsort"], [29, 4, 1, "", "concat"], [29, 6, 1, "", "index"], [29, 4, 1, "", "is_registered"], [29, 4, 1, "", "lookup"], [29, 4, 1, "", "memory_usage"], [29, 3, 1, "", "objType"], [29, 4, 1, "", "register"], [29, 4, 1, "", "set_dtype"], [29, 4, 1, "", "to_dict"], [29, 4, 1, "", "to_hdf"], [29, 4, 1, "", "to_list"], [29, 4, 1, "", "to_ndarray"], [29, 4, 1, "", "to_pandas"], [29, 4, 1, "", "unregister"], [29, 4, 1, "", "update_hdf"]], "arkouda.infoclass": [[30, 1, 1, "", "AllSymbols"], [30, 1, 1, "", "RegisteredSymbols"], [30, 5, 1, "", "information"], [30, 5, 1, "", "list_registry"], [30, 5, 1, "", "list_symbol_table"], [30, 5, 1, "", "pretty_print_information"]], "arkouda.io": [[31, 5, 1, "", "export"], [31, 5, 1, "", "get_columns"], [31, 5, 1, "", "get_datasets"], [31, 5, 1, "", "get_filetype"], [31, 5, 1, "", "get_null_indices"], [31, 5, 1, "", "import_data"], [31, 5, 1, "", "load"], [31, 5, 1, "", "load_all"], [31, 5, 1, "", "ls"], [31, 5, 1, "", "ls_csv"], [31, 5, 1, "", "read"], [31, 5, 1, "", "read_csv"], [31, 5, 1, "", "read_hdf"], [31, 5, 1, "", "read_parquet"], [31, 5, 1, "", "read_tagged_data"], [31, 5, 1, "", "receive"], [31, 5, 1, "", "receive_dataframe"], [31, 5, 1, "", "restore"], [31, 5, 1, "", "save_all"], [31, 5, 1, "", "snapshot"], [31, 5, 1, "", "to_csv"], [31, 5, 1, "", "to_hdf"], [31, 5, 1, "", "to_parquet"], [31, 5, 1, "", "update_hdf"]], "arkouda.io_util": [[32, 5, 1, "", "delimited_file_to_dict"], [32, 5, 1, "", "dict_to_delimited_file"], [32, 5, 1, "", "get_directory"], [32, 5, 1, "", "write_line_to_file"]], "arkouda.join": [[33, 5, 1, "", "compute_join_size"], [33, 5, 1, "", "gen_ranges"], [33, 5, 1, "", "join_on_eq_with_dt"]], "arkouda.logger": [[34, 2, 1, "", "LogLevel"], [34, 5, 1, "", "disableVerbose"], [34, 5, 1, "", "enableVerbose"], [34, 5, 1, "", "write_log"]], "arkouda.logger.LogLevel": [[34, 3, 1, "", "CRITICAL"], [34, 3, 1, "", "DEBUG"], [34, 3, 1, "", "ERROR"], [34, 3, 1, "", "INFO"], [34, 3, 1, "", "WARN"]], "arkouda.match": [[35, 2, 1, "", "Match"]], "arkouda.match.Match": [[103, 4, 1, "", "end"], [103, 4, 1, "", "find_matches"], [103, 4, 1, "", "group"], [103, 4, 1, "", "match_type"], [103, 4, 1, "", "matched"], [103, 4, 1, "", "start"]], "arkouda.matcher": [[36, 2, 1, "", "Matcher"]], "arkouda.matcher.Matcher": [[36, 3, 1, "", "LocationsInfo"], [36, 4, 1, "", "find_locations"], [36, 4, 1, "", "findall"], [36, 4, 1, "", "get_match"], [36, 4, 1, "", "split"], [36, 4, 1, "", "sub"]], "arkouda.numeric": [[37, 2, 1, "", "ErrorMode"], [37, 5, 1, "", "abs"], [37, 5, 1, "", "arccos"], [37, 5, 1, "", "arccosh"], [37, 5, 1, "", "arcsin"], [37, 5, 1, "", "arcsinh"], [37, 5, 1, "", "arctan"], [37, 5, 1, "", "arctan2"], [37, 5, 1, "", "arctanh"], [37, 5, 1, "", "cast"], [37, 5, 1, "", "ceil"], [37, 5, 1, "", "cos"], [37, 5, 1, "", "cosh"], [37, 5, 1, "", "cumprod"], [37, 5, 1, "", "cumsum"], [37, 5, 1, "", "deg2rad"], [37, 5, 1, "", "exp"], [37, 5, 1, "", "expm1"], [37, 5, 1, "", "floor"], [37, 5, 1, "", "hash"], [37, 5, 1, "", "histogram"], [37, 5, 1, "", "histogram2d"], [37, 5, 1, "", "histogramdd"], [37, 5, 1, "", "isfinite"], [37, 5, 1, "", "isinf"], [37, 5, 1, "", "isnan"], [37, 5, 1, "", "log"], [37, 5, 1, "", "log10"], [37, 5, 1, "", "log1p"], [37, 5, 1, "", "log2"], [37, 5, 1, "", "rad2deg"], [37, 5, 1, "", "round"], [37, 5, 1, "", "sign"], [37, 5, 1, "", "sin"], [37, 5, 1, "", "sinh"], [37, 5, 1, "", "square"], [37, 5, 1, "", "tan"], [37, 5, 1, "", "tanh"], [37, 5, 1, "", "trunc"], [37, 5, 1, "", "value_counts"], [37, 5, 1, "", "where"]], "arkouda.numeric.ErrorMode": [[37, 3, 1, "", "ignore"], [37, 3, 1, "", "return_validity"], [37, 3, 1, "", "strict"]], "arkouda.numpy": [[38, 0, 0, "-", "char"]], "arkouda.pdarray": [[28, 3, 1, "id859", "BinOps"], [28, 3, 1, "id860", "OpEqOps"], [95, 4, 1, "", "all"], [95, 4, 1, "", "any"], [95, 4, 1, "", "argmax"], [95, 4, 1, "", "argmaxk"], [95, 4, 1, "", "argmin"], [95, 4, 1, "", "argmink"], [28, 4, 1, "id868", "astype"], [28, 4, 1, "id869", "attach"], [28, 4, 1, "id870", "bigint_to_uint_arrays"], [28, 4, 1, "id871", "clz"], [28, 4, 1, "id872", "corr"], [28, 4, 1, "id873", "cov"], [28, 4, 1, "id874", "ctz"], [97, 3, 1, "", "dtype"], [28, 4, 1, "id875", "fill"], [28, 4, 1, "id876", "format_other"], [28, 4, 1, "id877", "info"], [28, 4, 1, "id878", "is_registered"], [95, 4, 1, "", "is_sorted"], [97, 3, 1, "", "itemsize"], [95, 4, 1, "", "max"], [28, 6, 1, "id857", "max_bits"], [95, 4, 1, "", "maxk"], [95, 4, 1, "", "mean"], [95, 4, 1, "", "min"], [95, 4, 1, "", "mink"], [97, 3, 1, "", "name"], [28, 6, 1, "id858", "nbytes"], [97, 3, 1, "", "ndim"], [28, 3, 1, "id861", "objType"], [28, 4, 1, "id885", "opeq"], [28, 4, 1, "id886", "parity"], [28, 4, 1, "id887", "popcount"], [28, 4, 1, "id888", "pretty_print_info"], [95, 4, 1, "", "prod"], [28, 4, 1, "id890", "register"], [28, 4, 1, "id891", "reshape"], [28, 4, 1, "id892", "rotl"], [28, 4, 1, "id893", "rotr"], [28, 4, 1, "id894", "save"], [97, 3, 1, "", "shape"], [97, 3, 1, "", "size"], [28, 4, 1, "id895", "slice_bits"], [95, 4, 1, "", "std"], [95, 4, 1, "", "sum"], [28, 4, 1, "id898", "to_csv"], [28, 4, 1, "id901", "to_cuda"], [28, 4, 1, "id902", "to_hdf"], [28, 4, 1, "id903", "to_list"], [97, 5, 1, "", "to_ndarray"], [28, 4, 1, "id905", "to_parquet"], [28, 4, 1, "id906", "transfer"], [28, 4, 1, "id907", "unregister"], [28, 4, 1, "id908", "update_hdf"], [28, 4, 1, "id909", "value_counts"], [95, 4, 1, "", "var"]], "arkouda.pdarrayclass": [[40, 7, 1, "", "RegistrationError"], [40, 5, 1, "", "all"], [40, 5, 1, "", "any"], [40, 5, 1, "", "argmax"], [40, 5, 1, "", "argmaxk"], [40, 5, 1, "", "argmin"], [40, 5, 1, "", "argmink"], [40, 5, 1, "", "attach_pdarray"], [40, 5, 1, "", "broadcast_to_shape"], [40, 5, 1, "", "clear"], [40, 5, 1, "", "clz"], [40, 5, 1, "", "corr"], [40, 5, 1, "", "cov"], [40, 5, 1, "", "ctz"], [40, 5, 1, "", "divmod"], [40, 5, 1, "", "dot"], [40, 5, 1, "", "fmod"], [40, 5, 1, "", "is_sorted"], [40, 5, 1, "", "max"], [40, 5, 1, "", "maxk"], [40, 5, 1, "", "mean"], [40, 5, 1, "", "min"], [40, 5, 1, "", "mink"], [40, 5, 1, "", "mod"], [40, 5, 1, "", "parity"], [40, 2, 1, "", "pdarray"], [40, 5, 1, "", "popcount"], [40, 5, 1, "", "power"], [40, 5, 1, "", "prod"], [40, 5, 1, "", "rotl"], [40, 5, 1, "", "rotr"], [40, 5, 1, "", "sqrt"], [40, 5, 1, "", "std"], [40, 5, 1, "", "sum"], [40, 5, 1, "", "unregister_pdarray_by_name"], [40, 5, 1, "", "var"]], "arkouda.pdarrayclass.pdarray": [[40, 3, 1, "", "BinOps"], [40, 3, 1, "", "OpEqOps"], [40, 4, 1, "", "all"], [40, 4, 1, "", "any"], [40, 4, 1, "", "argmax"], [40, 4, 1, "", "argmaxk"], [40, 4, 1, "", "argmin"], [40, 4, 1, "", "argmink"], [40, 4, 1, "", "astype"], [40, 4, 1, "", "attach"], [40, 4, 1, "", "bigint_to_uint_arrays"], [40, 4, 1, "", "clz"], [40, 4, 1, "", "corr"], [40, 4, 1, "", "cov"], [40, 4, 1, "", "ctz"], [40, 3, 1, "", "dtype"], [40, 4, 1, "", "fill"], [40, 4, 1, "", "format_other"], [40, 4, 1, "", "info"], [40, 4, 1, "", "is_registered"], [40, 4, 1, "", "is_sorted"], [40, 3, 1, "", "itemsize"], [40, 4, 1, "", "max"], [40, 6, 1, "", "max_bits"], [40, 4, 1, "", "maxk"], [40, 4, 1, "", "mean"], [40, 4, 1, "", "min"], [40, 4, 1, "", "mink"], [40, 3, 1, "", "name"], [40, 6, 1, "", "nbytes"], [40, 3, 1, "", "ndim"], [40, 3, 1, "", "objType"], [40, 4, 1, "", "opeq"], [40, 4, 1, "", "parity"], [40, 4, 1, "", "popcount"], [40, 4, 1, "", "pretty_print_info"], [40, 4, 1, "", "prod"], [40, 4, 1, "", "register"], [40, 4, 1, "", "reshape"], [40, 4, 1, "", "rotl"], [40, 4, 1, "", "rotr"], [40, 4, 1, "", "save"], [40, 3, 1, "", "shape"], [40, 3, 1, "", "size"], [40, 4, 1, "", "slice_bits"], [40, 4, 1, "", "std"], [40, 4, 1, "", "sum"], [40, 4, 1, "", "to_csv"], [40, 4, 1, "", "to_cuda"], [40, 4, 1, "", "to_hdf"], [40, 4, 1, "", "to_list"], [40, 4, 1, "", "to_ndarray"], [40, 4, 1, "", "to_parquet"], [40, 4, 1, "", "transfer"], [40, 4, 1, "", "unregister"], [40, 4, 1, "", "update_hdf"], [40, 4, 1, "", "value_counts"], [40, 4, 1, "", "var"]], "arkouda.pdarraycreation": [[41, 5, 1, "", "arange"], [41, 5, 1, "", "array"], [41, 5, 1, "", "bigint_from_uint_arrays"], [41, 5, 1, "", "from_series"], [41, 5, 1, "", "full"], [41, 5, 1, "", "full_like"], [41, 5, 1, "", "linspace"], [41, 5, 1, "", "ones"], [41, 5, 1, "", "ones_like"], [41, 5, 1, "", "randint"], [41, 5, 1, "", "random_strings_lognormal"], [41, 5, 1, "", "random_strings_uniform"], [41, 5, 1, "", "standard_normal"], [41, 5, 1, "", "uniform"], [41, 5, 1, "", "zeros"], [41, 5, 1, "", "zeros_like"]], "arkouda.pdarraysetops": [[42, 5, 1, "", "concatenate"], [42, 5, 1, "", "in1d"], [42, 5, 1, "", "indexof1d"], [42, 5, 1, "", "intersect1d"], [42, 5, 1, "", "setdiff1d"], [42, 5, 1, "", "setxor1d"], [42, 5, 1, "", "union1d"]], "arkouda.plotting": [[43, 5, 1, "", "hist_all"], [43, 5, 1, "", "plot_dist"]], "arkouda.random": [[98, 2, 1, "", "Generator"], [44, 0, 0, "-", "_generator"], [45, 0, 0, "-", "_legacy"], [98, 5, 1, "", "default_rng"], [46, 5, 1, "", "randint"], [46, 5, 1, "", "standard_normal"], [46, 5, 1, "", "uniform"]], "arkouda.random.Generator": [[98, 5, 1, "", "integers"], [98, 5, 1, "", "random"], [98, 5, 1, "", "standard_normal"], [98, 5, 1, "", "uniform"]], "arkouda.random._generator": [[44, 2, 1, "", "Generator"], [44, 5, 1, "", "default_rng"]], "arkouda.random._generator.Generator": [[44, 4, 1, "", "integers"], [44, 4, 1, "", "random"], [44, 4, 1, "", "standard_normal"], [44, 4, 1, "", "uniform"]], "arkouda.random._legacy": [[45, 5, 1, "", "randint"], [45, 5, 1, "", "standard_normal"], [45, 5, 1, "", "uniform"]], "arkouda.row": [[47, 2, 1, "", "Row"]], "arkouda.scipy": [[49, 2, 1, "", "Power_divergenceResult"], [48, 0, 0, "-", "_stats_py"], [49, 5, 1, "", "chisquare"], [49, 5, 1, "", "power_divergence"], [51, 0, 0, "-", "special"]], "arkouda.scipy.Power_divergenceResult": [[49, 3, 1, "", "pvalue"], [49, 3, 1, "", "statistic"]], "arkouda.scipy._stats_py": [[48, 2, 1, "", "Power_divergenceResult"], [48, 5, 1, "", "chisquare"], [48, 5, 1, "", "power_divergence"]], "arkouda.scipy._stats_py.Power_divergenceResult": [[48, 3, 1, "", "pvalue"], [48, 3, 1, "", "statistic"]], "arkouda.scipy.special": [[50, 0, 0, "-", "_math"], [51, 5, 1, "", "xlogy"]], "arkouda.scipy.special._math": [[50, 5, 1, "", "xlogy"]], "arkouda.security": [[52, 5, 1, "", "generate_token"], [52, 5, 1, "", "generate_username_token_json"], [52, 5, 1, "", "get_arkouda_client_directory"], [52, 5, 1, "", "get_home_directory"], [52, 5, 1, "", "get_username"], [52, 1, 1, "", "username_tokenizer"]], "arkouda.segarray": [[53, 1, 1, "", "LEN_SUFFIX"], [53, 1, 1, "", "SEG_SUFFIX"], [53, 2, 1, "", "SegArray"], [53, 1, 1, "", "VAL_SUFFIX"], [53, 5, 1, "", "segarray"]], "arkouda.segarray.SegArray": [[53, 4, 1, "", "AND"], [53, 4, 1, "", "OR"], [53, 4, 1, "", "XOR"], [53, 4, 1, "", "aggregate"], [53, 4, 1, "", "all"], [53, 4, 1, "", "any"], [53, 4, 1, "", "append"], [53, 4, 1, "", "append_single"], [53, 4, 1, "", "argmax"], [53, 4, 1, "", "argmin"], [53, 4, 1, "", "attach"], [53, 4, 1, "", "concat"], [53, 4, 1, "", "copy"], [53, 4, 1, "", "filter"], [53, 4, 1, "", "from_multi_array"], [53, 4, 1, "", "from_parts"], [53, 4, 1, "", "from_return_msg"], [53, 4, 1, "", "get_jth"], [53, 4, 1, "", "get_length_n"], [53, 4, 1, "", "get_ngrams"], [53, 4, 1, "", "get_prefixes"], [53, 4, 1, "", "get_suffixes"], [53, 6, 1, "", "grouping"], [53, 4, 1, "", "hash"], [53, 4, 1, "", "intersect"], [53, 4, 1, "", "is_registered"], [53, 4, 1, "", "load"], [53, 4, 1, "", "max"], [53, 4, 1, "", "mean"], [53, 4, 1, "", "min"], [53, 6, 1, "", "non_empty"], [53, 4, 1, "", "nunique"], [53, 3, 1, "", "objType"], [53, 4, 1, "", "prepend_single"], [53, 4, 1, "", "prod"], [53, 4, 1, "", "read_hdf"], [53, 4, 1, "", "register"], [53, 4, 1, "", "remove_repeats"], [53, 4, 1, "", "save"], [53, 4, 1, "", "set_jth"], [53, 4, 1, "", "setdiff"], [53, 4, 1, "", "setxor"], [53, 4, 1, "", "sum"], [53, 4, 1, "", "to_hdf"], [53, 4, 1, "", "to_list"], [53, 4, 1, "", "to_ndarray"], [53, 4, 1, "", "to_parquet"], [53, 4, 1, "", "transfer"], [53, 4, 1, "", "union"], [53, 4, 1, "", "unique"], [53, 4, 1, "", "unregister"], [53, 4, 1, "", "unregister_segarray_by_name"], [53, 4, 1, "", "update_hdf"]], "arkouda.series": [[54, 2, 1, "", "Series"]], "arkouda.series.Series": [[54, 4, 1, "", "add"], [54, 6, 1, "", "at"], [54, 4, 1, "", "attach"], [54, 4, 1, "", "concat"], [54, 4, 1, "", "diff"], [54, 3, 1, "", "dt"], [54, 4, 1, "", "fillna"], [54, 4, 1, "", "from_return_msg"], [54, 4, 1, "", "has_repeat_labels"], [54, 4, 1, "", "hasnans"], [54, 4, 1, "", "head"], [54, 6, 1, "", "iat"], [54, 6, 1, "", "iloc"], [54, 4, 1, "", "is_registered"], [54, 4, 1, "", "isin"], [54, 4, 1, "", "isna"], [54, 4, 1, "", "isnull"], [54, 6, 1, "", "loc"], [54, 4, 1, "", "locate"], [54, 4, 1, "", "map"], [54, 4, 1, "", "memory_usage"], [54, 4, 1, "", "notna"], [54, 4, 1, "", "notnull"], [54, 3, 1, "", "objType"], [54, 4, 1, "", "pdconcat"], [54, 4, 1, "", "register"], [54, 6, 1, "", "shape"], [54, 4, 1, "", "sort_index"], [54, 4, 1, "", "sort_values"], [54, 3, 1, "", "str_acc"], [54, 4, 1, "", "tail"], [54, 4, 1, "", "to_dataframe"], [54, 4, 1, "", "to_list"], [54, 4, 1, "", "to_markdown"], [54, 4, 1, "", "to_pandas"], [54, 4, 1, "", "topn"], [54, 4, 1, "", "unregister"], [54, 4, 1, "", "validate_key"], [54, 4, 1, "", "validate_val"], [54, 4, 1, "", "value_counts"]], "arkouda.sorting": [[55, 5, 1, "", "argsort"], [55, 5, 1, "", "coargsort"], [55, 5, 1, "", "sort"]], "arkouda.strings": [[56, 2, 1, "", "Strings"]], "arkouda.strings.Strings": [[56, 3, 1, "", "BinOps"], [56, 4, 1, "", "astype"], [56, 4, 1, "", "attach"], [56, 4, 1, "", "cached_regex_patterns"], [56, 4, 1, "", "capitalize"], [56, 4, 1, "", "contains"], [56, 4, 1, "", "decode"], [56, 3, 1, "", "dtype"], [56, 4, 1, "", "encode"], [56, 4, 1, "", "endswith"], [56, 3, 1, "", "entry"], [56, 4, 1, "", "find_locations"], [56, 4, 1, "", "findall"], [56, 4, 1, "", "flatten"], [56, 4, 1, "", "from_parts"], [56, 4, 1, "", "from_return_msg"], [56, 4, 1, "", "fullmatch"], [56, 4, 1, "", "get_bytes"], [56, 4, 1, "", "get_lengths"], [56, 4, 1, "", "get_offsets"], [56, 4, 1, "", "get_prefixes"], [56, 4, 1, "", "get_suffixes"], [56, 4, 1, "", "group"], [56, 4, 1, "", "hash"], [56, 4, 1, "", "info"], [56, 4, 1, "", "is_registered"], [56, 4, 1, "", "isalnum"], [56, 4, 1, "", "isalpha"], [56, 4, 1, "", "isdecimal"], [56, 4, 1, "", "isdigit"], [56, 4, 1, "", "isempty"], [56, 4, 1, "", "islower"], [56, 4, 1, "", "isspace"], [56, 4, 1, "", "istitle"], [56, 4, 1, "", "isupper"], [56, 3, 1, "", "logger"], [56, 4, 1, "", "lower"], [56, 4, 1, "", "lstick"], [56, 4, 1, "", "match"], [56, 3, 1, "", "nbytes"], [56, 3, 1, "", "ndim"], [56, 3, 1, "", "objType"], [56, 4, 1, "", "peel"], [56, 4, 1, "", "pretty_print_info"], [56, 4, 1, "", "purge_cached_regex_patterns"], [56, 4, 1, "", "register"], [56, 4, 1, "", "rpeel"], [56, 4, 1, "", "save"], [56, 4, 1, "", "search"], [56, 3, 1, "", "shape"], [56, 3, 1, "", "size"], [56, 4, 1, "", "split"], [56, 4, 1, "", "startswith"], [56, 4, 1, "", "stick"], [56, 4, 1, "", "strip"], [56, 4, 1, "", "sub"], [56, 4, 1, "", "subn"], [56, 4, 1, "", "title"], [56, 4, 1, "", "to_csv"], [56, 4, 1, "", "to_hdf"], [56, 4, 1, "", "to_list"], [56, 4, 1, "", "to_ndarray"], [56, 4, 1, "", "to_parquet"], [56, 4, 1, "", "transfer"], [56, 4, 1, "", "unregister"], [56, 4, 1, "", "unregister_strings_by_name"], [56, 4, 1, "", "update_hdf"], [56, 4, 1, "", "upper"]], "arkouda.timeclass": [[57, 2, 1, "", "Datetime"], [57, 2, 1, "", "Timedelta"], [57, 5, 1, "", "date_range"], [57, 5, 1, "", "timedelta_range"]], "arkouda.timeclass.Datetime": [[57, 6, 1, "", "date"], [57, 6, 1, "", "day"], [57, 6, 1, "", "day_of_week"], [57, 6, 1, "", "day_of_year"], [57, 6, 1, "", "dayofweek"], [57, 6, 1, "", "dayofyear"], [57, 6, 1, "", "hour"], [57, 6, 1, "", "is_leap_year"], [57, 4, 1, "", "is_registered"], [57, 4, 1, "", "isocalendar"], [57, 6, 1, "", "microsecond"], [57, 6, 1, "", "millisecond"], [57, 6, 1, "", "minute"], [57, 6, 1, "", "month"], [57, 6, 1, "", "nanosecond"], [57, 4, 1, "", "register"], [57, 6, 1, "", "second"], [57, 3, 1, "", "special_objType"], [57, 4, 1, "", "sum"], [57, 3, 1, "", "supported_opeq"], [57, 3, 1, "", "supported_with_datetime"], [57, 3, 1, "", "supported_with_pdarray"], [57, 3, 1, "", "supported_with_r_datetime"], [57, 3, 1, "", "supported_with_r_pdarray"], [57, 3, 1, "", "supported_with_r_timedelta"], [57, 3, 1, "", "supported_with_timedelta"], [57, 4, 1, "", "to_pandas"], [57, 4, 1, "", "unregister"], [57, 6, 1, "", "week"], [57, 6, 1, "", "weekday"], [57, 6, 1, "", "weekofyear"], [57, 6, 1, "", "year"]], "arkouda.timeclass.Timedelta": [[57, 4, 1, "", "abs"], [57, 6, 1, "", "components"], [57, 6, 1, "", "days"], [57, 4, 1, "", "is_registered"], [57, 6, 1, "", "microseconds"], [57, 6, 1, "", "nanoseconds"], [57, 4, 1, "", "register"], [57, 6, 1, "", "seconds"], [57, 3, 1, "", "special_objType"], [57, 4, 1, "", "std"], [57, 4, 1, "", "sum"], [57, 3, 1, "", "supported_opeq"], [57, 3, 1, "", "supported_with_datetime"], [57, 3, 1, "", "supported_with_pdarray"], [57, 3, 1, "", "supported_with_r_datetime"], [57, 3, 1, "", "supported_with_r_pdarray"], [57, 3, 1, "", "supported_with_r_timedelta"], [57, 3, 1, "", "supported_with_timedelta"], [57, 4, 1, "", "to_pandas"], [57, 4, 1, "", "total_seconds"], [57, 4, 1, "", "unregister"]], "arkouda.util": [[58, 5, 1, "", "attach"], [58, 5, 1, "", "attach_all"], [58, 5, 1, "", "broadcast_dims"], [58, 5, 1, "", "concatenate"], [58, 5, 1, "", "convert_bytes"], [58, 5, 1, "", "convert_if_categorical"], [58, 5, 1, "", "enrich_inplace"], [58, 5, 1, "", "expand"], [58, 5, 1, "", "generic_concat"], [58, 5, 1, "", "get_callback"], [58, 5, 1, "", "identity"], [58, 5, 1, "", "invert_permutation"], [58, 5, 1, "", "is_float"], [58, 5, 1, "", "is_int"], [58, 5, 1, "", "is_numeric"], [58, 5, 1, "", "is_registered"], [58, 5, 1, "", "map"], [58, 5, 1, "", "most_common"], [58, 5, 1, "", "register"], [58, 5, 1, "", "register_all"], [58, 5, 1, "", "report_mem"], [58, 5, 1, "", "sparse_sum_help"], [58, 5, 1, "", "unregister"], [58, 5, 1, "", "unregister_all"]]}, "objtypes": {"0": "py:module", "1": "py:data", "2": "py:class", "3": "py:attribute", "4": "py:method", "5": "py:function", "6": "py:property", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "data", "Python data"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "method", "Python method"], "5": ["py", "function", "Python function"], "6": ["py", "property", "Python property"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"contribut": 0, "ad": [0, 1, 60, 80], "issu": 0, "bug": [0, 66], "report": 0, "featur": [0, 60, 87, 93, 98, 100], "request": 0, "develop": [0, 62, 67, 81], "arkouda": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 63, 65, 68, 69, 70, 72, 74, 75, 77, 78, 79, 80, 87, 90, 93, 98, 99, 100, 102, 103], "code": 0, "convent": 0, "lint": 0, "python3": 0, "chapel": [0, 1, 62, 76, 78, 79], "test": [0, 1, 61, 84], "run": [0, 1, 61, 62, 80], "python": [0, 1, 60, 68, 75, 78, 79, 81, 102], "write": [0, 70, 72, 73], "pull": 0, "review": 0, "core": 0, "team": 0, "onli": 0, "merg": 0, "releas": [0, 64], "process": [0, 64, 80], "environ": [1, 62, 65, 77, 78, 79], "variabl": [1, 65, 77], "compil": [1, 65], "makefil": 1, "flag": 1, "depend": [1, 75, 77, 81], "path": 1, "modul": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 80], "from": [1, 79, 86], "outsid": 1, "src": 1, "directori": 1, "client": [1, 22, 60, 75, 86, 102], "accessor": 2, "content": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "class": [2, 4, 7, 13, 16, 20, 21, 23, 24, 26, 27, 28, 29, 34, 35, 36, 37, 40, 44, 46, 47, 48, 49, 53, 54, 56, 57, 97], "function": [2, 3, 4, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 19, 22, 23, 24, 25, 26, 28, 30, 31, 32, 33, 34, 37, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 57, 58, 60, 73, 89], "align": 3, "array_api": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "_array_object": 4, "attribut": [4, 16, 25, 26, 28, 30, 52, 53, 70], "_constant": 5, "_creation_funct": 6, "_data_type_funct": 7, "_dtype": 8, "_elementwise_funct": 9, "_indexing_funct": 10, "_manipulation_funct": 11, "_searching_funct": 12, "_set_funct": 13, "_sorting_funct": 14, "_statistical_funct": 15, "_type": 16, "_utility_funct": 17, "submodul": [18, 28], "packag": [18, 28, 46, 49, 51, 77], "linalg": 19, "array_view": 20, "categor": [21, 70, 72, 91], "client_dtyp": 23, "datafram": [24, 68, 69, 70, 72, 93], "dtype": [25, 87], "groupbyclass": 26, "histori": 27, "subpackag": [28, 39, 49], "input": [28, 54], "return": [28, 42, 101], "type": [28, 42, 69, 70, 72, 93, 97, 101], "index": [29, 69, 70, 72, 87, 90, 93, 96], "infoclass": 30, "io": 31, "io_util": 32, "join": [33, 103], "logger": 34, "match": [35, 103], "matcher": 36, "numer": [37, 89], "numpi": [38, 39], "char": 38, "pdarrayclass": 40, "pdarraycr": 41, "pdarraysetop": 42, "plot": 43, "random": [44, 45, 46, 92, 98], "_gener": 44, "_legaci": 45, "row": 47, "scipi": [48, 49, 50, 51], "_stats_pi": 48, "special": [50, 51], "_math": 50, "secur": 52, "segarrai": [53, 70, 72, 99], "seri": [54, 100], "sort": [55, 88, 93, 100], "string": [56, 69, 70, 72, 103], "timeclass": 57, "util": 58, "api": [59, 69, 70, 71, 72, 73, 76], "refer": [59, 69, 70, 71, 72, 76], "your": 60, "first": 60, "interfac": 60, "exampl": [60, 68, 69], "server": [60, 75, 77, 80, 86, 102], "pytest": 61, "benchmark": 61, "The": [61, 97], "full": [61, 66], "suit": 61, "argument": [61, 84], "singl": 61, "file": [61, 69, 70, 73, 80, 86], "read": [61, 73, 86], "json": 61, "output": 61, "gasnet": 62, "configur": [62, 70, 77, 80], "build": [62, 63, 65, 66, 77, 79, 80], "reduc": [63, 84], "memori": 63, "usag": [63, 85], "step": [64, 78, 79], "instruct": 64, "gener": [64, 73], "note": 64, "diff": 64, "git": 64, "log": 64, "speed": 65, "up": 65, "alwai": 65, "set": [65, 68, 99, 101], "us": [65, 68, 75, 77, 80, 81], "modular": [65, 77, 80], "system": 65, "tip": 66, "reproduc": 66, "user": 66, "save": [66, 80], "effici": 66, "document": [67, 74, 77], "arrai": [68, 92, 99, 101], "pdarrai": [68, 69, 70, 72, 96, 97], "creation": [68, 90, 98], "export": [68, 71, 73, 86], "object": [68, 103], "oper": [68, 89, 91, 97, 99, 101, 103], "creat": [68, 92], "import": [68, 71, 73, 86], "panda": [68, 100], "map": 68, "basic": 68, "interact": 68, "groupbi": [68, 70, 93, 94], "csv": 69, "support": [69, 70, 72, 73, 86], "data": [69, 70, 72, 86, 93, 95, 97], "format": [69, 73, 86], "without": 69, "header": 69, "hdf5": 70, "metadata": 70, "schema": 70, "arrayview": [70, 90], "mode": [70, 72], "distribut": [70, 77], "legaci": 70, "parquet": 72, "compress": 72, "i": [73, 86, 103], "o": [73, 86, 103], "l": 73, "quickstart": 75, "instal": [75, 77, 78, 79, 81, 83], "launch": [75, 102], "connect": [75, 102], "3": [75, 102], "shutdown": 75, "disconnect": 75, "get": 77, "start": 77, "recommend": [77, 79], "manual": 77, "all": 77, "individu": 77, "arrow": 77, "troubleshoot": 77, "linux": 78, "updat": [78, 79, 81], "kernel": 78, "clone": [78, 79], "repositori": [78, 79], "anaconda": [78, 79, 81], "ubuntu": 78, "rhel": 78, "next": [78, 79], "maco": 79, "sourc": 79, "homebrew": 79, "specifi": 80, "custom": 80, "new": 80, "an": 80, "requir": [81, 83], "list": 81, "specif": [81, 99, 103], "pip": 81, "window": 82, "wsl2": 82, "overview": 83, "guid": [83, 85], "perform": [84, 99, 103], "argsort": [84, 87], "posit": 84, "name": [84, 97], "gather": [84, 96], "scan": [84, 89], "scatter": [84, 96], "stream": 84, "between": 86, "larg": 86, "dataset": 86, "preprocess": 86, "disk": 86, "chang": 87, "lookup": [87, 100], "concat": 87, "arithmet": 89, "vector": 89, "scalar": 89, "element": [89, 99], "wise": 89, "reduct": 89, "where": 89, "iter": [90, 91, 93, 97, 99, 103], "construct": 91, "constant": 92, "regular": [92, 103], "concaten": [92, 93], "drop": 93, "copi": 93, "filter": 93, "permut": 93, "tail": [93, 100], "head": [93, 100], "renam": 93, "column": 93, "append": [93, 99], "reset": 93, "dedupl": [93, 99], "summar": 95, "descript": 95, "statist": 95, "histogram": 95, "valu": [95, 100], "count": [95, 100], "assign": 96, "integ": [96, 98], "slice": 96, "logic": 96, "rank": 97, "cast": 97, "reshap": 97, "standard_norm": 98, "uniform": 98, "method": [99, 103], "prefix": 99, "suffix": 99, "ngram": 99, "sub": 99, "size": 99, "access": 99, "prepend": 99, "setop": 99, "union": 99, "intersect": 99, "differ": 99, "symmetr": 99, "integr": 100, "startup": 102, "substr": 103, "search": 103, "split": 103, "flatten": 103, "express": 103}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"Contributing": [[0, "contributing"]], "Adding Issues": [[0, "adding-issues"]], "Bug Reports": [[0, "bug-reports"]], "Feature Requests": [[0, "feature-requests"]], "Developing Arkouda": [[0, "developing-arkouda"]], "Coding Conventions and Linting": [[0, "coding-conventions-and-linting"]], "Python3": [[0, "python3"]], "Chapel": [[0, "chapel"]], "Testing": [[0, "testing"], [1, "testing"]], "Running python tests": [[0, "running-python-tests"]], "Running chapel tests": [[0, "running-chapel-tests"]], "Writing Pull Requests": [[0, "writing-pull-requests"]], "Reviewing Pull Requests": [[0, "reviewing-pull-requests"]], "Core Development Team Only": [[0, "core-development-team-only"]], "Merging Pull Requests": [[0, "merging-pull-requests"]], "Release Process": [[0, "release-process"], [64, "release-process"]], "Environment Variables": [[1, "environment-variables"], [77, "environment-variables"]], "Running": [[1, "running"]], "Compilation / Makefile": [[1, "compilation-makefile"]], "Chapel Compiler Flags": [[1, "chapel-compiler-flags"]], "Dependency Paths": [[1, "dependency-paths"]], "Adding a Module from Outside the Arkouda src Directory": [[1, "adding-a-module-from-outside-the-arkouda-src-directory"]], "Python Client": [[1, "python-client"]], "arkouda.accessor": [[2, "module-arkouda.accessor"]], "Module Contents": [[2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [47, "module-contents"], [48, "module-contents"], [50, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"]], "Classes": [[2, "classes"], [4, "classes"], [7, "classes"], [13, "classes"], [16, "classes"], [20, "classes"], [21, "classes"], [23, "classes"], [24, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [40, "classes"], [44, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [53, "classes"], [54, "classes"], [56, "classes"], [57, "classes"]], "Functions": [[2, "functions"], [3, "functions"], [4, "functions"], [6, "functions"], [7, "functions"], [9, "functions"], [10, "functions"], [11, "functions"], [12, "functions"], [13, "functions"], [14, "functions"], [15, "functions"], [17, "functions"], [19, "functions"], [22, "functions"], [23, "functions"], [24, "functions"], [25, "functions"], [26, "functions"], [28, "functions"], [30, "functions"], [31, "functions"], [32, "functions"], [33, "functions"], [34, "functions"], [37, "functions"], [40, "functions"], [41, "functions"], [42, "functions"], [43, "functions"], [44, "functions"], [45, "functions"], [46, "functions"], [48, "functions"], [49, "functions"], [50, "functions"], [51, "functions"], [52, "functions"], [53, "functions"], [55, "functions"], [57, "functions"], [58, "functions"]], "arkouda.alignment": [[3, "module-arkouda.alignment"]], "arkouda.array_api._array_object": [[4, "module-arkouda.array_api._array_object"]], "Attributes": [[4, "attributes"], [16, "attributes"], [25, "attributes"], [26, "attributes"], [28, "attributes"], [30, "attributes"], [52, "attributes"], [53, "attributes"]], "arkouda.array_api._constants": [[5, "module-arkouda.array_api._constants"]], "arkouda.array_api._creation_functions": [[6, "module-arkouda.array_api._creation_functions"]], "arkouda.array_api._data_type_functions": [[7, "module-arkouda.array_api._data_type_functions"]], "arkouda.array_api._dtypes": [[8, "module-arkouda.array_api._dtypes"]], "arkouda.array_api._elementwise_functions": [[9, "module-arkouda.array_api._elementwise_functions"]], "arkouda.array_api._indexing_functions": [[10, "module-arkouda.array_api._indexing_functions"]], "arkouda.array_api._manipulation_functions": [[11, "module-arkouda.array_api._manipulation_functions"]], "arkouda.array_api._searching_functions": [[12, "module-arkouda.array_api._searching_functions"]], "arkouda.array_api._set_functions": [[13, "module-arkouda.array_api._set_functions"]], "arkouda.array_api._sorting_functions": [[14, "module-arkouda.array_api._sorting_functions"]], "arkouda.array_api._statistical_functions": [[15, "module-arkouda.array_api._statistical_functions"]], "arkouda.array_api._typing": [[16, "module-arkouda.array_api._typing"]], "arkouda.array_api._utility_functions": [[17, "module-arkouda.array_api._utility_functions"]], "arkouda.array_api": [[18, "module-arkouda.array_api"]], "Submodules": [[18, "submodules"], [28, "submodules"]], "Package Contents": [[18, "package-contents"], [28, "package-contents"], [46, "package-contents"], [49, "package-contents"], [51, "package-contents"]], "arkouda.array_api.linalg": [[19, "module-arkouda.array_api.linalg"]], "arkouda.array_view": [[20, "module-arkouda.array_view"]], "arkouda.categorical": [[21, "module-arkouda.categorical"]], "arkouda.client": [[22, "module-arkouda.client"]], "arkouda.client_dtypes": [[23, "module-arkouda.client_dtypes"]], "arkouda.dataframe": [[24, "module-arkouda.dataframe"]], "arkouda.dtypes": [[25, "module-arkouda.dtypes"]], "arkouda.groupbyclass": [[26, "module-arkouda.groupbyclass"]], "arkouda.history": [[27, "module-arkouda.history"]], "arkouda": [[28, "module-arkouda"]], "Subpackages": [[28, "subpackages"], [39, "subpackages"], [49, "subpackages"]], "Input": [[28, "input"], [54, "input"]], "Return Type": [[28, "return-type"], [28, "id654"], [28, "id656"], [42, "return-type"], [101, "return-type"]], "arkouda.index": [[29, "module-arkouda.index"]], "arkouda.infoclass": [[30, "module-arkouda.infoclass"]], "arkouda.io": [[31, "module-arkouda.io"]], "arkouda.io_util": [[32, "module-arkouda.io_util"]], "arkouda.join": [[33, "module-arkouda.join"]], "arkouda.logger": [[34, "module-arkouda.logger"]], "arkouda.match": [[35, "module-arkouda.match"]], "arkouda.matcher": [[36, "module-arkouda.matcher"]], "arkouda.numeric": [[37, "module-arkouda.numeric"]], "arkouda.numpy.char": [[38, "module-arkouda.numpy.char"]], "arkouda.numpy": [[39, "module-arkouda.numpy"]], "arkouda.pdarrayclass": [[40, "module-arkouda.pdarrayclass"]], "arkouda.pdarraycreation": [[41, "module-arkouda.pdarraycreation"]], "arkouda.pdarraysetops": [[42, "module-arkouda.pdarraysetops"]], "arkouda.plotting": [[43, "module-arkouda.plotting"]], "arkouda.random._generator": [[44, "module-arkouda.random._generator"]], "arkouda.random._legacy": [[45, "module-arkouda.random._legacy"]], "arkouda.random": [[46, "module-arkouda.random"]], "arkouda.row": [[47, "module-arkouda.row"]], "arkouda.scipy._stats_py": [[48, "module-arkouda.scipy._stats_py"]], "arkouda.scipy": [[49, "module-arkouda.scipy"]], "arkouda.scipy.special._math": [[50, "module-arkouda.scipy.special._math"]], "arkouda.scipy.special": [[51, "module-arkouda.scipy.special"]], "arkouda.security": [[52, "module-arkouda.security"]], "arkouda.segarray": [[53, "module-arkouda.segarray"]], "arkouda.series": [[54, "module-arkouda.series"]], "arkouda.sorting": [[55, "module-arkouda.sorting"]], "arkouda.strings": [[56, "module-arkouda.strings"]], "arkouda.timeclass": [[57, "module-arkouda.timeclass"]], "arkouda.util": [[58, "module-arkouda.util"]], "API Reference": [[59, "api-reference"], [69, "api-reference"], [70, "api-reference"], [71, "api-reference"], [72, "api-reference"]], "Adding Your First Feature": [[60, "adding-your-first-feature"]], "Adding Python Functionality (Client Interface)": [[60, "adding-python-functionality-client-interface"]], "Example": [[60, "example"], [60, "id1"]], "Adding Functionality to the Arkouda Server": [[60, "adding-functionality-to-the-arkouda-server"]], "PyTest Benchmarks": [[61, "pytest-benchmarks"]], "Running The Full Suite": [[61, "running-the-full-suite"]], "Benchmark Arguments": [[61, "benchmark-arguments"]], "Running Single Files or Tests": [[61, "running-single-files-or-tests"]], "Reading the JSON Output": [[61, "reading-the-json-output"]], "GASNet Development": [[62, "gasnet-development"]], "Environment Configuration": [[62, "environment-configuration"]], "Build Chapel with GASNet": [[62, "build-chapel-with-gasnet"]], "Build Arkouda": [[62, "build-arkouda"]], "Run Arkouda": [[62, "run-arkouda"]], "Reducing Memory Usage of Arkouda Builds": [[63, "reducing-memory-usage-of-arkouda-builds"]], "Step-by-step instructions": [[64, "step-by-step-instructions"]], "Generating release notes": [[64, "generating-release-notes"]], "Diff the git logs": [[64, "diff-the-git-logs"]], "Speeding up Arkouda Compilation": [[65, "speeding-up-arkouda-compilation"]], "Environment Variables to Always Set": [[65, "environment-variables-to-always-set"]], "Using the Modular Build System": [[65, "using-the-modular-build-system"]], "Tips for Reproducing User Bugs": [[66, "tips-for-reproducing-user-bugs"]], "Saving Full Builds": [[66, "saving-full-builds"]], "Reproducing User Bugs Efficiently": [[66, "reproducing-user-bugs-efficiently"]], "Developer Documentation": [[67, "developer-documentation"]], "Examples": [[68, "examples"]], "Arkouda Arrays": [[68, "arkouda-arrays"]], "pdarray Creation": [[68, "pdarray-creation"]], "Exporting pdarray Objects": [[68, "exporting-pdarray-objects"]], "pdarray Set operations": [[68, "pdarray-set-operations"]], "Arkouda DataFrames": [[68, "arkouda-dataframes"]], "Creating & Using a DataFrame": [[68, "creating-using-a-dataframe"]], "Importing Pandas DataFrame": [[68, "importing-pandas-dataframe"]], "Python Mapping": [[68, "python-mapping"]], "Basic Interaction": [[68, "basic-interaction"]], "Exporting to Pandas": [[68, "exporting-to-pandas"]], "GroupBy": [[68, "groupby"], [70, "groupby"], [70, "id5"], [93, "groupby"], [94, "groupby"]], "pdarrays": [[68, "pdarrays"]], "DataFrames": [[68, "dataframes"]], "CSV": [[69, "csv"]], "Support Arkouda Data Types": [[69, "support-arkouda-data-types"]], "File Formatting": [[69, "file-formatting"]], "Example Files": [[69, "example-files"]], "Arkouda Formatted File": [[69, "arkouda-formatted-file"]], "File Without Header": [[69, "file-without-header"]], "Data Formatting": [[69, "data-formatting"]], "pdarray": [[69, "pdarray"], [70, "pdarray"], [70, "id1"], [72, "pdarray"]], "Strings": [[69, "strings"], [70, "strings"], [70, "id2"], [72, "strings"]], "Index": [[69, "index"], [70, "index"], [72, "index"]], "DataFrame": [[69, "dataframe"], [70, "dataframe"], [72, "dataframe"]], "HDF5": [[70, "hdf5"]], "File Configuration": [[70, "file-configuration"]], "Supported Arkouda Data Types": [[70, "supported-arkouda-data-types"], [72, "supported-arkouda-data-types"]], "MetaData Attributes": [[70, "metadata-attributes"]], "Data Schema": [[70, "data-schema"]], "ArrayView": [[70, "arrayview"]], "SegArray": [[70, "segarray"], [70, "id4"], [72, "segarray"]], "Categorical": [[70, "categorical"], [70, "id3"], [72, "categorical"]], "Supported Write Modes": [[70, "supported-write-modes"], [72, "supported-write-modes"]], "Data Distribution": [[70, "data-distribution"]], "Legacy File Support": [[70, "legacy-file-support"]], "Import/Export": [[71, "import-export"], [86, "import-export"]], "Export": [[71, "export"]], "Import": [[71, "import"]], "Parquet": [[72, "parquet"]], "Compression": [[72, "compression"]], "File I/O": [[73, "file-i-o"]], "Supported File Formats:": [[73, null]], "Import/Export Support": [[73, "import-export-support"]], "General I/O API": [[73, "general-i-o-api"]], "Write": [[73, "write"]], "Read": [[73, "read"]], "ls Functionality": [[73, "ls-functionality"]], "Arkouda Documentation": [[74, "arkouda-documentation"]], "Quickstart": [[75, "quickstart"]], "Install Dependencies": [[75, "install-dependencies"]], "Install Arkouda": [[75, "install-arkouda"]], "Launching the Server": [[75, "launching-the-server"]], "Connect the Python 3 Client": [[75, "connect-the-python-3-client"]], "Shutdown/Disconnect": [[75, "shutdown-disconnect"]], "Using Arkouda": [[75, "using-arkouda"]], "Chapel API Reference": [[76, "chapel-api-reference"]], "Building the Server": [[77, "building-the-server"]], "Getting Started": [[77, "getting-started"]], "Dependency Configuration": [[77, "dependency-configuration"]], "Using Environment Installed Dependencies (Recommended)": [[77, "using-environment-installed-dependencies-recommended"]], "Installing Dependencies Manually": [[77, "installing-dependencies-manually"]], "Dependencies": [[77, "dependencies"]], "All Dependencies": [[77, "all-dependencies"]], "Individual Installs": [[77, "individual-installs"]], "Arrow Install Troubleshooting": [[77, "arrow-install-troubleshooting"]], "Distributable Package": [[77, "distributable-package"]], "Build the Server": [[77, "build-the-server"]], "Building the Arkouda Documentation": [[77, "building-the-arkouda-documentation"]], "Modular Building": [[77, "modular-building"]], "Linux": [[78, "linux"]], "Update Kernel": [[78, "update-kernel"]], "Clone Arkouda Repository": [[78, "clone-arkouda-repository"], [79, "clone-arkouda-repository"]], "Python Environment - Anaconda (Linux)": [[78, "python-environment-anaconda-linux"]], "Chapel Installation": [[78, "chapel-installation"]], "Install Chapel (Ubuntu)": [[78, "install-chapel-ubuntu"]], "Install Chapel (RHEL)": [[78, "install-chapel-rhel"]], "Next Steps": [[78, "next-steps"], [79, "next-steps"]], "MacOS": [[79, "macos"]], "Python Environment - Anaconda": [[79, "python-environment-anaconda"]], "Updating Environment": [[79, "updating-environment"]], "Anaconda": [[79, "anaconda"]], "Install Chapel": [[79, "install-chapel"]], "Build from Source (Recommended)": [[79, "build-from-source-recommended"]], "Homebrew": [[79, "homebrew"]], "Modular Server Builds": [[80, "modular-server-builds"]], "Specifying a custom configuration file": [[80, "specifying-a-custom-configuration-file"]], "Adding new modules into the build process": [[80, "adding-new-modules-into-the-build-process"]], "Saving modules used in an Arkouda server run": [[80, "saving-modules-used-in-an-arkouda-server-run"]], "Requirements": [[81, "requirements"], [83, "requirements"]], "Dependency List": [[81, "dependency-list"]], "Python Dependencies": [[81, "python-dependencies"]], "Developer Specific": [[81, "developer-specific"]], "Installing/Updating Python Dependencies": [[81, "installing-updating-python-dependencies"]], "Using Anaconda": [[81, "using-anaconda"]], "Using Pip": [[81, "using-pip"]], "Windows (WSL2)": [[82, "windows-wsl2"]], "Installation": [[83, "installation"]], "Overview": [[83, "overview"]], "Install Guides": [[83, "install-guides"]], "Performance Testing": [[84, "performance-testing"]], "Argsort": [[84, "argsort"]], "Positional Arguments": [[84, "positional-arguments"], [84, "positional-arguments"], [84, "positional-arguments"], [84, "positional-arguments"], [84, "positional-arguments"], [84, "positional-arguments"]], "Named Arguments": [[84, "named-arguments"], [84, "named-arguments"], [84, "named-arguments"], [84, "named-arguments"], [84, "named-arguments"], [84, "named-arguments"]], "Gather": [[84, "gather"]], "Reduce": [[84, "reduce"]], "Scan": [[84, "scan"]], "Scatter": [[84, "scatter"]], "Stream": [[84, "stream"]], "Usage Guide": [[85, "usage-guide"]], "Data I/O": [[86, "data-i-o"]], "Between client and server": [[86, "between-client-and-server"]], "Large Datasets": [[86, "large-datasets"]], "Supported File Formats": [[86, "supported-file-formats"]], "Data Preprocessing": [[86, "data-preprocessing"]], "Reading data from disk": [[86, "reading-data-from-disk"]], "Indexs in Arkouda": [[87, "indexs-in-arkouda"]], "Features": [[87, "features"], [93, "features"], [98, "features"], [100, "features"]], "Change Dtype": [[87, "change-dtype"]], "ArgSort": [[87, "argsort"]], "Lookup": [[87, "lookup"], [100, "lookup"], [100, "id1"]], "Concat": [[87, "concat"]], "Sorting": [[88, "sorting"], [93, "sorting"], [100, "sorting"]], "Arithmetic and Numeric Operations": [[89, "arithmetic-and-numeric-operations"]], "Vector and Scalar Arithmetic": [[89, "vector-and-scalar-arithmetic"]], "Element-wise Functions": [[89, "element-wise-functions"]], "Scans": [[89, "scans"]], "Reductions": [[89, "reductions"]], "Where": [[89, "where"]], "ArrayView in Arkouda": [[90, "arrayview-in-arkouda"]], "Creation": [[90, "creation"], [98, "creation"]], "Indexing": [[90, "indexing"]], "Iteration": [[90, "iteration"], [91, "iteration"], [93, "iteration"], [97, "iteration"], [99, "iteration"], [103, "iteration"]], "Categoricals": [[91, "categoricals"]], "Construction": [[91, "construction"]], "Operations": [[91, "operations"], [103, "operations"]], "Creating Arrays": [[92, "creating-arrays"]], "Constant": [[92, "constant"]], "Regular": [[92, "regular"]], "Random": [[92, "random"]], "Concatenation": [[92, "concatenation"]], "DataFrames in Arkouda": [[93, "dataframes-in-arkouda"]], "Data Types": [[93, "data-types"]], "Drop": [[93, "drop"]], "Copy": [[93, "copy"]], "Filter": [[93, "filter"]], "Permutations": [[93, "permutations"]], "Tail/Head of Data": [[93, "tail-head-of-data"]], "Rename Columns": [[93, "rename-columns"]], "Append": [[93, "append"]], "Concatenate": [[93, "concatenate"]], "Reset Indexes": [[93, "reset-indexes"]], "Deduplication": [[93, "deduplication"], [99, "deduplication"]], "Summarizing Data": [[95, "summarizing-data"]], "Descriptive Statistics": [[95, "descriptive-statistics"]], "Histogram": [[95, "histogram"]], "Value Counts": [[95, "value-counts"], [100, "value-counts"]], "Indexing and Assignment": [[96, "indexing-and-assignment"]], "Integer": [[96, "integer"]], "Slice": [[96, "slice"]], "Gather/Scatter (pdarray)": [[96, "gather-scatter-pdarray"]], "Integer pdarray index": [[96, "integer-pdarray-index"]], "Logical indexing": [[96, "logical-indexing"]], "The pdarray class": [[97, "the-pdarray-class"]], "Data Type": [[97, "data-type"]], "Rank": [[97, "rank"]], "Name": [[97, "name"]], "Operators": [[97, "operators"]], "Type Casting": [[97, "type-casting"]], "Reshape": [[97, "reshape"]], "Random in Arkouda": [[98, "random-in-arkouda"]], "integers": [[98, "integers"]], "random": [[98, "random"]], "standard_normal": [[98, "standard-normal"]], "uniform": [[98, "uniform"]], "SegArrays in Arkouda": [[99, "segarrays-in-arkouda"]], "Performance": [[99, "performance"], [103, "performance"]], "Operation": [[99, "operation"]], "SegArray Specific Methods": [[99, "segarray-specific-methods"]], "Prefix & Suffix": [[99, "prefix-suffix"]], "NGrams": [[99, "ngrams"]], "Sub-array of Size": [[99, "sub-array-of-size"]], "Access/Set Specific Elements in Sub-Array": [[99, "access-set-specific-elements-in-sub-array"]], "Append & Prepend": [[99, "append-prepend"]], "SegArray SetOps": [[99, "segarray-setops"]], "Union": [[99, "union"]], "Intersect": [[99, "intersect"]], "Set Difference": [[99, "set-difference"]], "Symmetric Difference": [[99, "symmetric-difference"]], "Series in Arkouda": [[100, "series-in-arkouda"]], "Head/Tail": [[100, "head-tail"]], "Pandas Integration": [[100, "pandas-integration"]], "Array Set Operations": [[101, "array-set-operations"]], "Startup": [[102, "startup"]], "Launch arkouda server": [[102, "launch-arkouda-server"]], "Connect a Python 3 client": [[102, "connect-a-python-3-client"]], "Strings in Arkouda": [[103, "strings-in-arkouda"]], "I/O": [[103, "i-o"]], "String-Specific Methods": [[103, "string-specific-methods"]], "Substring search": [[103, "substring-search"]], "Splitting and joining": [[103, "splitting-and-joining"]], "Flattening": [[103, "flattening"]], "Regular Expressions": [[103, "regular-expressions"]], "Match Object": [[103, "match-object"]]}, "indexentries": {"cachedaccessor (class in arkouda.accessor)": [[2, "arkouda.accessor.CachedAccessor"]], "datetimeaccessor (class in arkouda.accessor)": [[2, "arkouda.accessor.DatetimeAccessor"]], "properties (class in arkouda.accessor)": [[2, "arkouda.accessor.Properties"]], "stringaccessor (class in arkouda.accessor)": [[2, "arkouda.accessor.StringAccessor"]], "arkouda.accessor": [[2, "module-arkouda.accessor"]], "date_operators() (in module arkouda.accessor)": [[2, "arkouda.accessor.date_operators"]], "module": [[2, "module-arkouda.accessor"], [3, "module-arkouda.alignment"], [4, "module-arkouda.array_api._array_object"], [5, "module-arkouda.array_api._constants"], [6, "module-arkouda.array_api._creation_functions"], [7, "module-arkouda.array_api._data_type_functions"], [8, "module-arkouda.array_api._dtypes"], [9, "module-arkouda.array_api._elementwise_functions"], [10, "module-arkouda.array_api._indexing_functions"], [11, "module-arkouda.array_api._manipulation_functions"], [12, "module-arkouda.array_api._searching_functions"], [13, "module-arkouda.array_api._set_functions"], [14, "module-arkouda.array_api._sorting_functions"], [15, "module-arkouda.array_api._statistical_functions"], [16, "module-arkouda.array_api._typing"], [17, "module-arkouda.array_api._utility_functions"], [18, "module-arkouda.array_api"], [19, "module-arkouda.array_api.linalg"], [20, "module-arkouda.array_view"], [21, "module-arkouda.categorical"], [22, "module-arkouda.client"], [23, "module-arkouda.client_dtypes"], [24, "module-arkouda.dataframe"], [25, "module-arkouda.dtypes"], [26, "module-arkouda.groupbyclass"], [27, "module-arkouda.history"], [28, "module-arkouda"], [29, "module-arkouda.index"], [30, "module-arkouda.infoclass"], [31, "module-arkouda.io"], [32, "module-arkouda.io_util"], [33, "module-arkouda.join"], [34, "module-arkouda.logger"], [35, "module-arkouda.match"], [36, "module-arkouda.matcher"], [37, "module-arkouda.numeric"], [38, "module-arkouda.numpy.char"], [39, "module-arkouda.numpy"], [40, "module-arkouda.pdarrayclass"], [41, "module-arkouda.pdarraycreation"], [42, "module-arkouda.pdarraysetops"], [43, "module-arkouda.plotting"], [44, "module-arkouda.random._generator"], [45, "module-arkouda.random._legacy"], [46, "module-arkouda.random"], [47, "module-arkouda.row"], [48, "module-arkouda.scipy._stats_py"], [49, "module-arkouda.scipy"], [50, "module-arkouda.scipy.special._math"], [51, "module-arkouda.scipy.special"], [52, "module-arkouda.security"], [53, "module-arkouda.segarray"], [54, "module-arkouda.series"], [55, "module-arkouda.sorting"], [56, "module-arkouda.strings"], [57, "module-arkouda.timeclass"], [58, "module-arkouda.util"]], "string_operators() (in module arkouda.accessor)": [[2, "arkouda.accessor.string_operators"]], "nonuniqueerror": [[3, "arkouda.alignment.NonUniqueError"], [28, "arkouda.NonUniqueError"]], "align() (in module arkouda.alignment)": [[3, "arkouda.alignment.align"]], "arkouda.alignment": [[3, "module-arkouda.alignment"]], "find() (in module arkouda.alignment)": [[3, "arkouda.alignment.find"]], "in1d_intervals() (in module arkouda.alignment)": [[3, "arkouda.alignment.in1d_intervals"]], "interval_lookup() (in module arkouda.alignment)": [[3, "arkouda.alignment.interval_lookup"]], "is_cosorted() (in module arkouda.alignment)": [[3, "arkouda.alignment.is_cosorted"]], "left_align() (in module arkouda.alignment)": [[3, "arkouda.alignment.left_align"]], "lookup() (in module arkouda.alignment)": [[3, "arkouda.alignment.lookup"]], "right_align() (in module arkouda.alignment)": [[3, "arkouda.alignment.right_align"]], "search_intervals() (in module arkouda.alignment)": [[3, "arkouda.alignment.search_intervals"]], "unsqueeze() (in module arkouda.alignment)": [[3, "arkouda.alignment.unsqueeze"]], "zero_up() (in module arkouda.alignment)": [[3, "arkouda.alignment.zero_up"]], "array (class in arkouda.array_api._array_object)": [[4, "arkouda.array_api._array_object.Array"]], "handled_functions (in module arkouda.array_api._array_object)": [[4, "arkouda.array_api._array_object.HANDLED_FUNCTIONS"]], "t (arkouda.array_api._array_object.array property)": [[4, "arkouda.array_api._array_object.Array.T"]], "arkouda.array_api._array_object": [[4, "module-arkouda.array_api._array_object"]], "device (arkouda.array_api._array_object.array property)": [[4, "arkouda.array_api._array_object.Array.device"]], "dtype (arkouda.array_api._array_object.array property)": [[4, "arkouda.array_api._array_object.Array.dtype"]], "implements_numpy() (in module arkouda.array_api._array_object)": [[4, "arkouda.array_api._array_object.implements_numpy"]], "item() (arkouda.array_api._array_object.array method)": [[4, "arkouda.array_api._array_object.Array.item"]], "mt (arkouda.array_api._array_object.array property)": [[4, "arkouda.array_api._array_object.Array.mT"]], "ndim (arkouda.array_api._array_object.array property)": [[4, "arkouda.array_api._array_object.Array.ndim"]], "shape (arkouda.array_api._array_object.array property)": [[4, "arkouda.array_api._array_object.Array.shape"]], "size (arkouda.array_api._array_object.array property)": [[4, "arkouda.array_api._array_object.Array.size"]], "to_device() (arkouda.array_api._array_object.array method)": [[4, "arkouda.array_api._array_object.Array.to_device"]], "to_ndarray() (arkouda.array_api._array_object.array method)": [[4, "arkouda.array_api._array_object.Array.to_ndarray"]], "tolist() (arkouda.array_api._array_object.array method)": [[4, "arkouda.array_api._array_object.Array.tolist"]], "transpose() (arkouda.array_api._array_object.array method)": [[4, "arkouda.array_api._array_object.Array.transpose"]], "arkouda.array_api._constants": [[5, "module-arkouda.array_api._constants"]], "e (in module arkouda.array_api._constants)": [[5, "arkouda.array_api._constants.e"]], "inf (in module arkouda.array_api._constants)": [[5, "arkouda.array_api._constants.inf"]], "nan (in module arkouda.array_api._constants)": [[5, "arkouda.array_api._constants.nan"]], "pi (in module arkouda.array_api._constants)": [[5, "arkouda.array_api._constants.pi"]], "arange() (in module arkouda.array_api._creation_functions)": [[6, "arkouda.array_api._creation_functions.arange"]], "arkouda.array_api._creation_functions": [[6, "module-arkouda.array_api._creation_functions"]], "asarray() (in module arkouda.array_api._creation_functions)": [[6, "arkouda.array_api._creation_functions.asarray"]], "empty() (in module arkouda.array_api._creation_functions)": [[6, "arkouda.array_api._creation_functions.empty"]], "empty_like() (in module arkouda.array_api._creation_functions)": [[6, "arkouda.array_api._creation_functions.empty_like"]], "eye() (in module arkouda.array_api._creation_functions)": [[6, "arkouda.array_api._creation_functions.eye"]], "from_dlpack() (in module arkouda.array_api._creation_functions)": [[6, "arkouda.array_api._creation_functions.from_dlpack"]], "full() (in module arkouda.array_api._creation_functions)": [[6, "arkouda.array_api._creation_functions.full"]], "full_like() (in module arkouda.array_api._creation_functions)": [[6, "arkouda.array_api._creation_functions.full_like"]], "linspace() (in module arkouda.array_api._creation_functions)": [[6, "arkouda.array_api._creation_functions.linspace"]], "meshgrid() (in module arkouda.array_api._creation_functions)": [[6, "arkouda.array_api._creation_functions.meshgrid"]], "ones() (in module arkouda.array_api._creation_functions)": [[6, "arkouda.array_api._creation_functions.ones"]], "ones_like() (in module arkouda.array_api._creation_functions)": [[6, "arkouda.array_api._creation_functions.ones_like"]], "tril() (in module arkouda.array_api._creation_functions)": [[6, "arkouda.array_api._creation_functions.tril"]], "triu() (in module arkouda.array_api._creation_functions)": [[6, "arkouda.array_api._creation_functions.triu"]], "zeros() (in module arkouda.array_api._creation_functions)": [[6, "arkouda.array_api._creation_functions.zeros"]], "zeros_like() (in module arkouda.array_api._creation_functions)": [[6, "arkouda.array_api._creation_functions.zeros_like"]], "arkouda.array_api._data_type_functions": [[7, "module-arkouda.array_api._data_type_functions"]], "astype() (in module arkouda.array_api._data_type_functions)": [[7, "arkouda.array_api._data_type_functions.astype"]], "bits (arkouda.array_api._data_type_functions.finfo_object attribute)": [[7, "arkouda.array_api._data_type_functions.finfo_object.bits"]], "bits (arkouda.array_api._data_type_functions.iinfo_object attribute)": [[7, "arkouda.array_api._data_type_functions.iinfo_object.bits"]], "can_cast() (in module arkouda.array_api._data_type_functions)": [[7, "arkouda.array_api._data_type_functions.can_cast"]], "dtype (arkouda.array_api._data_type_functions.finfo_object attribute)": [[7, "arkouda.array_api._data_type_functions.finfo_object.dtype"]], "dtype (arkouda.array_api._data_type_functions.iinfo_object attribute)": [[7, "arkouda.array_api._data_type_functions.iinfo_object.dtype"]], "eps (arkouda.array_api._data_type_functions.finfo_object attribute)": [[7, "arkouda.array_api._data_type_functions.finfo_object.eps"]], "finfo_object (class in arkouda.array_api._data_type_functions)": [[7, "arkouda.array_api._data_type_functions.finfo_object"]], "iinfo_object (class in arkouda.array_api._data_type_functions)": [[7, "arkouda.array_api._data_type_functions.iinfo_object"]], "isdtype() (in module arkouda.array_api._data_type_functions)": [[7, "arkouda.array_api._data_type_functions.isdtype"]], "max (arkouda.array_api._data_type_functions.finfo_object attribute)": [[7, "arkouda.array_api._data_type_functions.finfo_object.max"]], "max (arkouda.array_api._data_type_functions.iinfo_object attribute)": [[7, "arkouda.array_api._data_type_functions.iinfo_object.max"]], "min (arkouda.array_api._data_type_functions.finfo_object attribute)": [[7, "arkouda.array_api._data_type_functions.finfo_object.min"]], "min (arkouda.array_api._data_type_functions.iinfo_object attribute)": [[7, "arkouda.array_api._data_type_functions.iinfo_object.min"]], "result_type() (in module arkouda.array_api._data_type_functions)": [[7, "arkouda.array_api._data_type_functions.result_type"]], "smallest_normal (arkouda.array_api._data_type_functions.finfo_object attribute)": [[7, "arkouda.array_api._data_type_functions.finfo_object.smallest_normal"]], "arkouda.array_api._dtypes": [[8, "module-arkouda.array_api._dtypes"]], "bool (in module arkouda.array_api._dtypes)": [[8, "arkouda.array_api._dtypes.bool"]], "complex128 (in module arkouda.array_api._dtypes)": [[8, "arkouda.array_api._dtypes.complex128"]], "complex64 (in module arkouda.array_api._dtypes)": [[8, "arkouda.array_api._dtypes.complex64"]], "float32 (in module arkouda.array_api._dtypes)": [[8, "arkouda.array_api._dtypes.float32"]], "float64 (in module arkouda.array_api._dtypes)": [[8, "arkouda.array_api._dtypes.float64"]], "int16 (in module arkouda.array_api._dtypes)": [[8, "arkouda.array_api._dtypes.int16"]], "int32 (in module arkouda.array_api._dtypes)": [[8, "arkouda.array_api._dtypes.int32"]], "int64 (in module arkouda.array_api._dtypes)": [[8, "arkouda.array_api._dtypes.int64"]], "int8 (in module arkouda.array_api._dtypes)": [[8, "arkouda.array_api._dtypes.int8"]], "uint16 (in module arkouda.array_api._dtypes)": [[8, "arkouda.array_api._dtypes.uint16"]], "uint32 (in module arkouda.array_api._dtypes)": [[8, "arkouda.array_api._dtypes.uint32"]], "uint64 (in module arkouda.array_api._dtypes)": [[8, "arkouda.array_api._dtypes.uint64"]], "uint8 (in module arkouda.array_api._dtypes)": [[8, "arkouda.array_api._dtypes.uint8"]], "abs() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.abs"]], "acos() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.acos"]], "acosh() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.acosh"]], "add() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.add"]], "arkouda.array_api._elementwise_functions": [[9, "module-arkouda.array_api._elementwise_functions"]], "asin() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.asin"]], "asinh() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.asinh"]], "atan() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.atan"]], "atan2() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.atan2"]], "atanh() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.atanh"]], "bitwise_and() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.bitwise_and"]], "bitwise_invert() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.bitwise_invert"]], "bitwise_left_shift() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.bitwise_left_shift"]], "bitwise_or() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.bitwise_or"]], "bitwise_right_shift() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.bitwise_right_shift"]], "bitwise_xor() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.bitwise_xor"]], "ceil() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.ceil"]], "conj() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.conj"]], "cos() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.cos"]], "cosh() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.cosh"]], "divide() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.divide"]], "equal() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.equal"]], "exp() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.exp"]], "expm1() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.expm1"]], "floor() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.floor"]], "floor_divide() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.floor_divide"]], "greater() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.greater"]], "greater_equal() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.greater_equal"]], "imag() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.imag"]], "isfinite() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.isfinite"]], "isinf() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.isinf"]], "isnan() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.isnan"]], "less() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.less"]], "less_equal() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.less_equal"]], "log() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.log"]], "log10() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.log10"]], "log1p() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.log1p"]], "log2() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.log2"]], "logaddexp() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.logaddexp"]], "logical_and() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.logical_and"]], "logical_not() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.logical_not"]], "logical_or() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.logical_or"]], "logical_xor() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.logical_xor"]], "multiply() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.multiply"]], "negative() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.negative"]], "not_equal() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.not_equal"]], "positive() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.positive"]], "pow() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.pow"]], "real() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.real"]], "remainder() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.remainder"]], "round() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.round"]], "sign() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.sign"]], "sin() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.sin"]], "sinh() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.sinh"]], "sqrt() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.sqrt"]], "square() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.square"]], "subtract() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.subtract"]], "tan() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.tan"]], "tanh() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.tanh"]], "trunc() (in module arkouda.array_api._elementwise_functions)": [[9, "arkouda.array_api._elementwise_functions.trunc"]], "arkouda.array_api._indexing_functions": [[10, "module-arkouda.array_api._indexing_functions"]], "take() (in module arkouda.array_api._indexing_functions)": [[10, "arkouda.array_api._indexing_functions.take"]], "arkouda.array_api._manipulation_functions": [[11, "module-arkouda.array_api._manipulation_functions"]], "broadcast_arrays() (in module arkouda.array_api._manipulation_functions)": [[11, "arkouda.array_api._manipulation_functions.broadcast_arrays"]], "broadcast_to() (in module arkouda.array_api._manipulation_functions)": [[11, "arkouda.array_api._manipulation_functions.broadcast_to"]], "concat() (in module arkouda.array_api._manipulation_functions)": [[11, "arkouda.array_api._manipulation_functions.concat"]], "expand_dims() (in module arkouda.array_api._manipulation_functions)": [[11, "arkouda.array_api._manipulation_functions.expand_dims"]], "flip() (in module arkouda.array_api._manipulation_functions)": [[11, "arkouda.array_api._manipulation_functions.flip"]], "moveaxis() (in module arkouda.array_api._manipulation_functions)": [[11, "arkouda.array_api._manipulation_functions.moveaxis"]], "permute_dims() (in module arkouda.array_api._manipulation_functions)": [[11, "arkouda.array_api._manipulation_functions.permute_dims"]], "repeat() (in module arkouda.array_api._manipulation_functions)": [[11, "arkouda.array_api._manipulation_functions.repeat"]], "reshape() (in module arkouda.array_api._manipulation_functions)": [[11, "arkouda.array_api._manipulation_functions.reshape"]], "roll() (in module arkouda.array_api._manipulation_functions)": [[11, "arkouda.array_api._manipulation_functions.roll"]], "squeeze() (in module arkouda.array_api._manipulation_functions)": [[11, "arkouda.array_api._manipulation_functions.squeeze"]], "stack() (in module arkouda.array_api._manipulation_functions)": [[11, "arkouda.array_api._manipulation_functions.stack"]], "tile() (in module arkouda.array_api._manipulation_functions)": [[11, "arkouda.array_api._manipulation_functions.tile"]], "unstack() (in module arkouda.array_api._manipulation_functions)": [[11, "arkouda.array_api._manipulation_functions.unstack"]], "argmax() (in module arkouda.array_api._searching_functions)": [[12, "arkouda.array_api._searching_functions.argmax"]], "argmin() (in module arkouda.array_api._searching_functions)": [[12, "arkouda.array_api._searching_functions.argmin"]], "arkouda.array_api._searching_functions": [[12, "module-arkouda.array_api._searching_functions"]], "nonzero() (in module arkouda.array_api._searching_functions)": [[12, "arkouda.array_api._searching_functions.nonzero"]], "searchsorted() (in module arkouda.array_api._searching_functions)": [[12, "arkouda.array_api._searching_functions.searchsorted"]], "where() (in module arkouda.array_api._searching_functions)": [[12, "arkouda.array_api._searching_functions.where"]], "uniqueallresult (class in arkouda.array_api._set_functions)": [[13, "arkouda.array_api._set_functions.UniqueAllResult"]], "uniquecountsresult (class in arkouda.array_api._set_functions)": [[13, "arkouda.array_api._set_functions.UniqueCountsResult"]], "uniqueinverseresult (class in arkouda.array_api._set_functions)": [[13, "arkouda.array_api._set_functions.UniqueInverseResult"]], "arkouda.array_api._set_functions": [[13, "module-arkouda.array_api._set_functions"]], "counts (arkouda.array_api._set_functions.uniqueallresult attribute)": [[13, "arkouda.array_api._set_functions.UniqueAllResult.counts"]], "counts (arkouda.array_api._set_functions.uniquecountsresult attribute)": [[13, "arkouda.array_api._set_functions.UniqueCountsResult.counts"]], "indices (arkouda.array_api._set_functions.uniqueallresult attribute)": [[13, "arkouda.array_api._set_functions.UniqueAllResult.indices"]], "inverse_indices (arkouda.array_api._set_functions.uniqueallresult attribute)": [[13, "arkouda.array_api._set_functions.UniqueAllResult.inverse_indices"]], "inverse_indices (arkouda.array_api._set_functions.uniqueinverseresult attribute)": [[13, "arkouda.array_api._set_functions.UniqueInverseResult.inverse_indices"]], "unique_all() (in module arkouda.array_api._set_functions)": [[13, "arkouda.array_api._set_functions.unique_all"]], "unique_counts() (in module arkouda.array_api._set_functions)": [[13, "arkouda.array_api._set_functions.unique_counts"]], "unique_inverse() (in module arkouda.array_api._set_functions)": [[13, "arkouda.array_api._set_functions.unique_inverse"]], "unique_values() (in module arkouda.array_api._set_functions)": [[13, "arkouda.array_api._set_functions.unique_values"]], "values (arkouda.array_api._set_functions.uniqueallresult attribute)": [[13, "arkouda.array_api._set_functions.UniqueAllResult.values"]], "values (arkouda.array_api._set_functions.uniquecountsresult attribute)": [[13, "arkouda.array_api._set_functions.UniqueCountsResult.values"]], "values (arkouda.array_api._set_functions.uniqueinverseresult attribute)": [[13, "arkouda.array_api._set_functions.UniqueInverseResult.values"]], "argsort() (in module arkouda.array_api._sorting_functions)": [[14, "arkouda.array_api._sorting_functions.argsort"]], "arkouda.array_api._sorting_functions": [[14, "module-arkouda.array_api._sorting_functions"]], "sort() (in module arkouda.array_api._sorting_functions)": [[14, "arkouda.array_api._sorting_functions.sort"]], "arkouda.array_api._statistical_functions": [[15, "module-arkouda.array_api._statistical_functions"]], "max() (in module arkouda.array_api._statistical_functions)": [[15, "arkouda.array_api._statistical_functions.max"]], "mean() (in module arkouda.array_api._statistical_functions)": [[15, "arkouda.array_api._statistical_functions.mean"]], "mean_shim() (in module arkouda.array_api._statistical_functions)": [[15, "arkouda.array_api._statistical_functions.mean_shim"]], "min() (in module arkouda.array_api._statistical_functions)": [[15, "arkouda.array_api._statistical_functions.min"]], "prod() (in module arkouda.array_api._statistical_functions)": [[15, "arkouda.array_api._statistical_functions.prod"]], "prod_sum_dtype() (in module arkouda.array_api._statistical_functions)": [[15, "arkouda.array_api._statistical_functions.prod_sum_dtype"]], "std() (in module arkouda.array_api._statistical_functions)": [[15, "arkouda.array_api._statistical_functions.std"]], "sum() (in module arkouda.array_api._statistical_functions)": [[15, "arkouda.array_api._statistical_functions.sum"]], "var() (in module arkouda.array_api._statistical_functions)": [[15, "arkouda.array_api._statistical_functions.var"]], "array (class in arkouda.array_api._typing)": [[16, "arkouda.array_api._typing.Array"]], "device (in module arkouda.array_api._typing)": [[16, "arkouda.array_api._typing.Device"]], "dtype (in module arkouda.array_api._typing)": [[16, "arkouda.array_api._typing.Dtype"]], "pycapsule (in module arkouda.array_api._typing)": [[16, "arkouda.array_api._typing.PyCapsule"]], "supportsbufferprotocol (in module arkouda.array_api._typing)": [[16, "arkouda.array_api._typing.SupportsBufferProtocol"]], "supportsdlpack (class in arkouda.array_api._typing)": [[16, "arkouda.array_api._typing.SupportsDLPack"]], "t (arkouda.array_api._typing.array property)": [[16, "arkouda.array_api._typing.Array.T"]], "arkouda.array_api._typing": [[16, "module-arkouda.array_api._typing"]], "device (arkouda.array_api._typing.array property)": [[16, "arkouda.array_api._typing.Array.device"]], "dtype (arkouda.array_api._typing.array property)": [[16, "arkouda.array_api._typing.Array.dtype"]], "item() (arkouda.array_api._typing.array method)": [[16, "arkouda.array_api._typing.Array.item"]], "mt (arkouda.array_api._typing.array property)": [[16, "arkouda.array_api._typing.Array.mT"]], "ndim (arkouda.array_api._typing.array property)": [[16, "arkouda.array_api._typing.Array.ndim"]], "shape (arkouda.array_api._typing.array property)": [[16, "arkouda.array_api._typing.Array.shape"]], "size (arkouda.array_api._typing.array property)": [[16, "arkouda.array_api._typing.Array.size"]], "to_device() (arkouda.array_api._typing.array method)": [[16, "arkouda.array_api._typing.Array.to_device"]], "to_ndarray() (arkouda.array_api._typing.array method)": [[16, "arkouda.array_api._typing.Array.to_ndarray"]], "tolist() (arkouda.array_api._typing.array method)": [[16, "arkouda.array_api._typing.Array.tolist"]], "transpose() (arkouda.array_api._typing.array method)": [[16, "arkouda.array_api._typing.Array.transpose"]], "all() (in module arkouda.array_api._utility_functions)": [[17, "arkouda.array_api._utility_functions.all"]], "any() (in module arkouda.array_api._utility_functions)": [[17, "arkouda.array_api._utility_functions.any"]], "arkouda.array_api._utility_functions": [[17, "module-arkouda.array_api._utility_functions"]], "arkouda.array_api": [[18, "module-arkouda.array_api"]], "arkouda.array_api.linalg": [[19, "module-arkouda.array_api.linalg"]], "matmul() (in module arkouda.array_api.linalg)": [[19, "arkouda.array_api.linalg.matmul"]], "matrix_transpose() (in module arkouda.array_api.linalg)": [[19, "arkouda.array_api.linalg.matrix_transpose"]], "tensordot() (in module arkouda.array_api.linalg)": [[19, "arkouda.array_api.linalg.tensordot"]], "vecdot() (in module arkouda.array_api.linalg)": [[19, "arkouda.array_api.linalg.vecdot"]], "arrayview (class in arkouda.array_view)": [[20, "arkouda.array_view.ArrayView"]], "arkouda.array_view": [[20, "module-arkouda.array_view"]], "base (arkouda.array_view.arrayview attribute)": [[20, "arkouda.array_view.ArrayView.base"]], "dtype (arkouda.array_view.arrayview attribute)": [[20, "arkouda.array_view.ArrayView.dtype"]], "itemsize (arkouda.array_view.arrayview attribute)": [[20, "arkouda.array_view.ArrayView.itemsize"]], "ndim (arkouda.array_view.arrayview attribute)": [[20, "arkouda.array_view.ArrayView.ndim"]], "objtype (arkouda.array_view.arrayview attribute)": [[20, "arkouda.array_view.ArrayView.objType"]], "order (arkouda.array_view.arrayview attribute)": [[20, "arkouda.array_view.ArrayView.order"]], "shape (arkouda.array_view.arrayview attribute)": [[20, "arkouda.array_view.ArrayView.shape"]], "size (arkouda.array_view.arrayview attribute)": [[20, "arkouda.array_view.ArrayView.size"]], "to_hdf() (arkouda.array_view.arrayview method)": [[20, "arkouda.array_view.ArrayView.to_hdf"]], "to_list() (arkouda.array_view.arrayview method)": [[20, "arkouda.array_view.ArrayView.to_list"]], "to_ndarray() (arkouda.array_view.arrayview method)": [[20, "arkouda.array_view.ArrayView.to_ndarray"]], "update_hdf() (arkouda.array_view.arrayview method)": [[20, "arkouda.array_view.ArrayView.update_hdf"]], "binops (arkouda.categorical.categorical attribute)": [[21, "arkouda.categorical.Categorical.BinOps"]], "categorical (class in arkouda.categorical)": [[21, "arkouda.categorical.Categorical"]], "registerablepieces (arkouda.categorical.categorical attribute)": [[21, "arkouda.categorical.Categorical.RegisterablePieces"]], "requiredpieces (arkouda.categorical.categorical attribute)": [[21, "arkouda.categorical.Categorical.RequiredPieces"]], "argsort() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.argsort"]], "arkouda.categorical": [[21, "module-arkouda.categorical"]], "attach() (arkouda.categorical.categorical static method)": [[21, "arkouda.categorical.Categorical.attach"]], "categories (arkouda.categorical.categorical attribute)": [[21, "arkouda.categorical.Categorical.categories"]], "codes (arkouda.categorical.categorical attribute)": [[21, "arkouda.categorical.Categorical.codes"]], "concatenate() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.concatenate"]], "contains() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.contains"]], "dtype (arkouda.categorical.categorical attribute)": [[21, "arkouda.categorical.Categorical.dtype"]], "endswith() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.endswith"]], "from_codes() (arkouda.categorical.categorical class method)": [[21, "arkouda.categorical.Categorical.from_codes"]], "from_return_msg() (arkouda.categorical.categorical class method)": [[21, "arkouda.categorical.Categorical.from_return_msg"]], "group() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.group"]], "hash() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.hash"]], "in1d() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.in1d"]], "info() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.info"]], "is_registered() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.is_registered"]], "isna() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.isna"]], "nbytes (arkouda.categorical.categorical property)": [[21, "arkouda.categorical.Categorical.nbytes"]], "ndim (arkouda.categorical.categorical attribute)": [[21, "arkouda.categorical.Categorical.ndim"]], "nlevels (arkouda.categorical.categorical attribute)": [[21, "arkouda.categorical.Categorical.nlevels"]], "objtype (arkouda.categorical.categorical attribute)": [[21, "arkouda.categorical.Categorical.objType"]], "parse_hdf_categoricals() (arkouda.categorical.categorical static method)": [[21, "arkouda.categorical.Categorical.parse_hdf_categoricals"]], "permutation (arkouda.categorical.categorical attribute)": [[21, "arkouda.categorical.Categorical.permutation"], [21, "id0"]], "pretty_print_info() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.pretty_print_info"]], "register() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.register"]], "reset_categories() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.reset_categories"]], "save() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.save"]], "segments (arkouda.categorical.categorical attribute)": [[21, "arkouda.categorical.Categorical.segments"], [21, "id1"]], "set_categories() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.set_categories"]], "shape (arkouda.categorical.categorical attribute)": [[21, "arkouda.categorical.Categorical.shape"]], "size (arkouda.categorical.categorical attribute)": [[21, "arkouda.categorical.Categorical.size"]], "sort() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.sort"]], "standardize_categories() (arkouda.categorical.categorical class method)": [[21, "arkouda.categorical.Categorical.standardize_categories"]], "startswith() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.startswith"]], "to_hdf() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.to_hdf"]], "to_list() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.to_list"]], "to_ndarray() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.to_ndarray"]], "to_parquet() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.to_parquet"]], "to_strings() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.to_strings"]], "transfer() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.transfer"]], "unique() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.unique"]], "unregister() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.unregister"]], "unregister_categorical_by_name() (arkouda.categorical.categorical static method)": [[21, "arkouda.categorical.Categorical.unregister_categorical_by_name"]], "update_hdf() (arkouda.categorical.categorical method)": [[21, "arkouda.categorical.Categorical.update_hdf"]], "arkouda.client": [[22, "module-arkouda.client"]], "connect() (in module arkouda.client)": [[22, "arkouda.client.connect"]], "disconnect() (in module arkouda.client)": [[22, "arkouda.client.disconnect"]], "generate_history() (in module arkouda.client)": [[22, "arkouda.client.generate_history"]], "get_config() (in module arkouda.client)": [[22, "arkouda.client.get_config"]], "get_mem_avail() (in module arkouda.client)": [[22, "arkouda.client.get_mem_avail"]], "get_mem_status() (in module arkouda.client)": [[22, "arkouda.client.get_mem_status"]], "get_mem_used() (in module arkouda.client)": [[22, "arkouda.client.get_mem_used"]], "get_server_commands() (in module arkouda.client)": [[22, "arkouda.client.get_server_commands"]], "print_server_commands() (in module arkouda.client)": [[22, "arkouda.client.print_server_commands"]], "ruok() (in module arkouda.client)": [[22, "arkouda.client.ruok"]], "shutdown() (in module arkouda.client)": [[22, "arkouda.client.shutdown"]], "bitvector (class in arkouda.client_dtypes)": [[23, "arkouda.client_dtypes.BitVector"]], "bitvectorizer() (in module arkouda.client_dtypes)": [[23, "arkouda.client_dtypes.BitVectorizer"]], "fields (class in arkouda.client_dtypes)": [[23, "arkouda.client_dtypes.Fields"]], "ipv4 (class in arkouda.client_dtypes)": [[23, "arkouda.client_dtypes.IPv4"]], "arkouda.client_dtypes": [[23, "module-arkouda.client_dtypes"]], "conserves (arkouda.client_dtypes.bitvector attribute)": [[23, "arkouda.client_dtypes.BitVector.conserves"]], "export_uint() (arkouda.client_dtypes.ipv4 method)": [[23, "arkouda.client_dtypes.IPv4.export_uint"]], "format() (arkouda.client_dtypes.bitvector method)": [[23, "arkouda.client_dtypes.BitVector.format"]], "format() (arkouda.client_dtypes.fields method)": [[23, "arkouda.client_dtypes.Fields.format"]], "format() (arkouda.client_dtypes.ipv4 method)": [[23, "arkouda.client_dtypes.IPv4.format"]], "from_return_msg() (arkouda.client_dtypes.bitvector class method)": [[23, "arkouda.client_dtypes.BitVector.from_return_msg"]], "ip_address() (in module arkouda.client_dtypes)": [[23, "arkouda.client_dtypes.ip_address"]], "is_ipv4() (in module arkouda.client_dtypes)": [[23, "arkouda.client_dtypes.is_ipv4"]], "is_ipv6() (in module arkouda.client_dtypes)": [[23, "arkouda.client_dtypes.is_ipv6"]], "normalize() (arkouda.client_dtypes.ipv4 method)": [[23, "arkouda.client_dtypes.IPv4.normalize"]], "opeq() (arkouda.client_dtypes.bitvector method)": [[23, "arkouda.client_dtypes.BitVector.opeq"]], "opeq() (arkouda.client_dtypes.fields method)": [[23, "arkouda.client_dtypes.Fields.opeq"]], "opeq() (arkouda.client_dtypes.ipv4 method)": [[23, "arkouda.client_dtypes.IPv4.opeq"]], "register() (arkouda.client_dtypes.bitvector method)": [[23, "arkouda.client_dtypes.BitVector.register"]], "register() (arkouda.client_dtypes.ipv4 method)": [[23, "arkouda.client_dtypes.IPv4.register"]], "special_objtype (arkouda.client_dtypes.bitvector attribute)": [[23, "arkouda.client_dtypes.BitVector.special_objType"]], "special_objtype (arkouda.client_dtypes.ipv4 attribute)": [[23, "arkouda.client_dtypes.IPv4.special_objType"]], "to_hdf() (arkouda.client_dtypes.ipv4 method)": [[23, "arkouda.client_dtypes.IPv4.to_hdf"]], "to_list() (arkouda.client_dtypes.bitvector method)": [[23, "arkouda.client_dtypes.BitVector.to_list"]], "to_list() (arkouda.client_dtypes.ipv4 method)": [[23, "arkouda.client_dtypes.IPv4.to_list"]], "to_ndarray() (arkouda.client_dtypes.bitvector method)": [[23, "arkouda.client_dtypes.BitVector.to_ndarray"]], "to_ndarray() (arkouda.client_dtypes.ipv4 method)": [[23, "arkouda.client_dtypes.IPv4.to_ndarray"]], "update_hdf() (arkouda.client_dtypes.ipv4 method)": [[23, "arkouda.client_dtypes.IPv4.update_hdf"]], "dataframe (class in arkouda.dataframe)": [[24, "arkouda.dataframe.DataFrame"]], "diffaggregate (class in arkouda.dataframe)": [[24, "arkouda.dataframe.DiffAggregate"]], "groupby() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.GroupBy"], [24, "arkouda.dataframe.DataFrame.groupby"]], "append() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.append"]], "apply_permutation() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.apply_permutation"]], "argsort() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.argsort"]], "arkouda.dataframe": [[24, "module-arkouda.dataframe"]], "attach() (arkouda.dataframe.dataframe static method)": [[24, "arkouda.dataframe.DataFrame.attach"]], "coargsort() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.coargsort"]], "columns (arkouda.dataframe.dataframe property)": [[24, "arkouda.dataframe.DataFrame.columns"]], "concat() (arkouda.dataframe.dataframe class method)": [[24, "arkouda.dataframe.DataFrame.concat"]], "copy() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.copy"]], "corr() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.corr"]], "drop() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.drop"]], "drop_duplicates() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.drop_duplicates"]], "dtypes (arkouda.dataframe.dataframe property)": [[24, "arkouda.dataframe.DataFrame.dtypes"]], "empty (arkouda.dataframe.dataframe property)": [[24, "arkouda.dataframe.DataFrame.empty"]], "filter_by_range() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.filter_by_range"]], "from_pandas() (arkouda.dataframe.dataframe class method)": [[24, "arkouda.dataframe.DataFrame.from_pandas"]], "from_return_msg() (arkouda.dataframe.dataframe class method)": [[24, "arkouda.dataframe.DataFrame.from_return_msg"]], "gb (arkouda.dataframe.diffaggregate attribute)": [[24, "arkouda.dataframe.DiffAggregate.gb"]], "head() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.head"]], "index (arkouda.dataframe.dataframe property)": [[24, "arkouda.dataframe.DataFrame.index"]], "info (arkouda.dataframe.dataframe property)": [[24, "arkouda.dataframe.DataFrame.info"]], "intersect() (in module arkouda.dataframe)": [[24, "arkouda.dataframe.intersect"]], "intx() (in module arkouda.dataframe)": [[24, "arkouda.dataframe.intx"]], "invert_permutation() (in module arkouda.dataframe)": [[24, "arkouda.dataframe.invert_permutation"]], "is_registered() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.is_registered"]], "isin() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.isin"]], "load() (arkouda.dataframe.dataframe class method)": [[24, "arkouda.dataframe.DataFrame.load"]], "memory_usage() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.memory_usage"]], "memory_usage_info() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.memory_usage_info"]], "merge() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.merge"]], "merge() (in module arkouda.dataframe)": [[24, "arkouda.dataframe.merge"]], "objtype (arkouda.dataframe.dataframe attribute)": [[24, "arkouda.dataframe.DataFrame.objType"]], "read_csv() (arkouda.dataframe.dataframe class method)": [[24, "arkouda.dataframe.DataFrame.read_csv"]], "register() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.register"]], "rename() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.rename"]], "reset_index() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.reset_index"]], "sample() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.sample"]], "save() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.save"]], "shape (arkouda.dataframe.dataframe property)": [[24, "arkouda.dataframe.DataFrame.shape"]], "size (arkouda.dataframe.dataframe property)": [[24, "arkouda.dataframe.DataFrame.size"]], "sort_index() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.sort_index"]], "sort_values() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.sort_values"]], "tail() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.tail"]], "to_csv() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.to_csv"]], "to_hdf() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.to_hdf"]], "to_markdown() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.to_markdown"]], "to_pandas() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.to_pandas"]], "to_parquet() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.to_parquet"]], "transfer() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.transfer"]], "unregister() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.unregister"]], "unregister_dataframe_by_name() (arkouda.dataframe.dataframe static method)": [[24, "arkouda.dataframe.DataFrame.unregister_dataframe_by_name"]], "update_hdf() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.update_hdf"]], "update_nrows() (arkouda.dataframe.dataframe method)": [[24, "arkouda.dataframe.DataFrame.update_nrows"]], "values (arkouda.dataframe.diffaggregate attribute)": [[24, "arkouda.dataframe.DiffAggregate.values"]], "arkouda_supported_dtypes (in module arkouda.dtypes)": [[25, "arkouda.dtypes.ARKOUDA_SUPPORTED_DTYPES"]], "dtypeobjects (in module arkouda.dtypes)": [[25, "arkouda.dtypes.DTypeObjects"]], "dtypes (in module arkouda.dtypes)": [[25, "arkouda.dtypes.DTypes"]], "scalardtypes (in module arkouda.dtypes)": [[25, "arkouda.dtypes.ScalarDTypes"]], "all_scalars (in module arkouda.dtypes)": [[25, "arkouda.dtypes.all_scalars"]], "arkouda.dtypes": [[25, "module-arkouda.dtypes"]], "bigint (in module arkouda.dtypes)": [[25, "arkouda.dtypes.bigint"]], "bittype (in module arkouda.dtypes)": [[25, "arkouda.dtypes.bitType"]], "bool (in module arkouda.dtypes)": [[25, "arkouda.dtypes.bool"]], "bool_scalars (in module arkouda.dtypes)": [[25, "arkouda.dtypes.bool_scalars"]], "check_np_dtype() (in module arkouda.dtypes)": [[25, "arkouda.dtypes.check_np_dtype"]], "complex128 (in module arkouda.dtypes)": [[25, "arkouda.dtypes.complex128"]], "complex64 (in module arkouda.dtypes)": [[25, "arkouda.dtypes.complex64"]], "dtype() (in module arkouda.dtypes)": [[25, "arkouda.dtypes.dtype"]], "float32 (in module arkouda.dtypes)": [[25, "arkouda.dtypes.float32"]], "float64 (in module arkouda.dtypes)": [[25, "arkouda.dtypes.float64"]], "float_scalars (in module arkouda.dtypes)": [[25, "arkouda.dtypes.float_scalars"]], "get_byteorder() (in module arkouda.dtypes)": [[25, "arkouda.dtypes.get_byteorder"]], "get_server_byteorder() (in module arkouda.dtypes)": [[25, "arkouda.dtypes.get_server_byteorder"]], "int16 (in module arkouda.dtypes)": [[25, "arkouda.dtypes.int16"]], "int32 (in module arkouda.dtypes)": [[25, "arkouda.dtypes.int32"]], "int64 (in module arkouda.dtypes)": [[25, "arkouda.dtypes.int64"]], "int8 (in module arkouda.dtypes)": [[25, "arkouda.dtypes.int8"]], "inttypes (in module arkouda.dtypes)": [[25, "arkouda.dtypes.intTypes"]], "int_scalars (in module arkouda.dtypes)": [[25, "arkouda.dtypes.int_scalars"]], "issupportednumber() (in module arkouda.dtypes)": [[25, "arkouda.dtypes.isSupportedNumber"]], "numeric_scalars (in module arkouda.dtypes)": [[25, "arkouda.dtypes.numeric_scalars"]], "numpy_scalars (in module arkouda.dtypes)": [[25, "arkouda.dtypes.numpy_scalars"]], "resolve_scalar_dtype() (in module arkouda.dtypes)": [[25, "arkouda.dtypes.resolve_scalar_dtype"]], "str_ (in module arkouda.dtypes)": [[25, "arkouda.dtypes.str_"]], "str_scalars (in module arkouda.dtypes)": [[25, "arkouda.dtypes.str_scalars"]], "translate_np_dtype() (in module arkouda.dtypes)": [[25, "arkouda.dtypes.translate_np_dtype"]], "uint16 (in module arkouda.dtypes)": [[25, "arkouda.dtypes.uint16"]], "uint32 (in module arkouda.dtypes)": [[25, "arkouda.dtypes.uint32"]], "uint64 (in module arkouda.dtypes)": [[25, "arkouda.dtypes.uint64"]], "uint8 (in module arkouda.dtypes)": [[25, "arkouda.dtypes.uint8"]], "and() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.AND"]], "groupby_reduction_types (in module arkouda.groupbyclass)": [[26, "arkouda.groupbyclass.GROUPBY_REDUCTION_TYPES"]], "groupby (class in arkouda.groupbyclass)": [[26, "arkouda.groupbyclass.GroupBy"]], "or() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.OR"]], "reductions (arkouda.groupbyclass.groupby attribute)": [[26, "arkouda.groupbyclass.GroupBy.Reductions"]], "xor() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.XOR"]], "aggregate() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.aggregate"]], "all() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.all"]], "any() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.any"]], "argmax() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.argmax"]], "argmin() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.argmin"]], "arkouda.groupbyclass": [[26, "module-arkouda.groupbyclass"]], "attach() (arkouda.groupbyclass.groupby static method)": [[26, "arkouda.groupbyclass.GroupBy.attach"]], "broadcast() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.broadcast"]], "broadcast() (in module arkouda.groupbyclass)": [[26, "arkouda.groupbyclass.broadcast"]], "build_from_components() (arkouda.groupbyclass.groupby static method)": [[26, "arkouda.groupbyclass.GroupBy.build_from_components"]], "count() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.count"]], "dropna (arkouda.groupbyclass.groupby attribute)": [[26, "arkouda.groupbyclass.GroupBy.dropna"]], "first() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.first"]], "from_return_msg() (arkouda.groupbyclass.groupby static method)": [[26, "arkouda.groupbyclass.GroupBy.from_return_msg"]], "is_registered() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.is_registered"]], "logger (arkouda.groupbyclass.groupby attribute)": [[26, "arkouda.groupbyclass.GroupBy.logger"]], "max() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.max"]], "mean() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.mean"]], "median() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.median"]], "min() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.min"]], "mode() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.mode"]], "most_common() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.most_common"]], "ngroups (arkouda.groupbyclass.groupby attribute)": [[26, "arkouda.groupbyclass.GroupBy.ngroups"]], "nkeys (arkouda.groupbyclass.groupby attribute)": [[26, "arkouda.groupbyclass.GroupBy.nkeys"]], "nunique() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.nunique"]], "objtype (arkouda.groupbyclass.groupby attribute)": [[26, "arkouda.groupbyclass.GroupBy.objType"]], "permutation (arkouda.groupbyclass.groupby attribute)": [[26, "arkouda.groupbyclass.GroupBy.permutation"]], "prod() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.prod"]], "register() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.register"]], "segments (arkouda.groupbyclass.groupby attribute)": [[26, "arkouda.groupbyclass.GroupBy.segments"]], "size (arkouda.groupbyclass.groupby attribute)": [[26, "arkouda.groupbyclass.GroupBy.size"]], "size() (arkouda.groupbyclass.groupby method)": [[26, "id0"]], "std() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.std"]], "sum() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.sum"]], "to_hdf() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.to_hdf"]], "unique() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.unique"]], "unique() (in module arkouda.groupbyclass)": [[26, "arkouda.groupbyclass.unique"]], "unique_keys (arkouda.groupbyclass.groupby attribute)": [[26, "arkouda.groupbyclass.GroupBy.unique_keys"]], "unregister() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.unregister"]], "unregister_groupby_by_name() (arkouda.groupbyclass.groupby static method)": [[26, "arkouda.groupbyclass.GroupBy.unregister_groupby_by_name"]], "update_hdf() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.update_hdf"]], "var() (arkouda.groupbyclass.groupby method)": [[26, "arkouda.groupbyclass.GroupBy.var"]], "historyretriever (class in arkouda.history)": [[27, "arkouda.history.HistoryRetriever"]], "notebookhistoryretriever (class in arkouda.history)": [[27, "arkouda.history.NotebookHistoryRetriever"]], "shellhistoryretriever (class in arkouda.history)": [[27, "arkouda.history.ShellHistoryRetriever"]], "arkouda.history": [[27, "module-arkouda.history"]], "retrieve() (arkouda.history.historyretriever method)": [[27, "arkouda.history.HistoryRetriever.retrieve"]], "retrieve() (arkouda.history.notebookhistoryretriever method)": [[27, "arkouda.history.NotebookHistoryRetriever.retrieve"]], "retrieve() (arkouda.history.shellhistoryretriever method)": [[27, "arkouda.history.ShellHistoryRetriever.retrieve"]], "and() (arkouda.groupby method)": [[28, "arkouda.GroupBy.AND"], [28, "id228"], [28, "id272"], [28, "id316"], [28, "id360"], [94, "arkouda.GroupBy.AND"]], "arkouda_supported_dtypes (in module arkouda)": [[28, "arkouda.ARKOUDA_SUPPORTED_DTYPES"]], "allsymbols (in module arkouda)": [[28, "arkouda.AllSymbols"]], "arrayview (class in arkouda)": [[28, "arkouda.ArrayView"], [90, "arkouda.ArrayView"]], "binops (arkouda.categorical attribute)": [[28, "arkouda.Categorical.BinOps"], [28, "id12"], [28, "id61"]], "binops (arkouda.strings attribute)": [[28, "arkouda.Strings.BinOps"], [28, "id406"], [28, "id475"], [28, "id544"]], "binops (arkouda.pdarray attribute)": [[28, "arkouda.pdarray.BinOps"], [28, "id676"], [28, "id737"], [28, "id798"], [28, "id859"]], "bitvector (class in arkouda)": [[28, "arkouda.BitVector"]], "bitvectorizer() (in module arkouda)": [[28, "arkouda.BitVectorizer"]], "critical (arkouda.loglevel attribute)": [[28, "arkouda.LogLevel.CRITICAL"]], "cachedaccessor (class in arkouda)": [[28, "arkouda.CachedAccessor"]], "categorical (class in arkouda)": [[28, "arkouda.Categorical"], [28, "id2"], [28, "id51"], [91, "arkouda.Categorical"]], "debug (arkouda.loglevel attribute)": [[28, "arkouda.LogLevel.DEBUG"]], "dtypeobjects (in module arkouda)": [[28, "arkouda.DTypeObjects"]], "dtypes (in module arkouda)": [[28, "arkouda.DTypes"]], "dataframe (class in arkouda)": [[28, "arkouda.DataFrame"], [28, "id100"], [93, "arkouda.DataFrame"]], "datetime (class in arkouda)": [[28, "arkouda.Datetime"], [28, "id150"], [28, "id183"]], "datetimeaccessor (class in arkouda)": [[28, "arkouda.DatetimeAccessor"]], "diffaggregate (class in arkouda)": [[28, "arkouda.DiffAggregate"]], "error (arkouda.loglevel attribute)": [[28, "arkouda.LogLevel.ERROR"]], "errormode (class in arkouda)": [[28, "arkouda.ErrorMode"]], "fields (class in arkouda)": [[28, "arkouda.Fields"]], "groupby_reduction_types (in module arkouda)": [[28, "arkouda.GROUPBY_REDUCTION_TYPES"]], "generator (class in arkouda)": [[28, "arkouda.Generator"]], "groupby (class in arkouda)": [[28, "arkouda.GroupBy"], [28, "id217"], [28, "id261"], [28, "id305"], [28, "id349"], [94, "arkouda.GroupBy"]], "groupby() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.GroupBy"], [28, "id109"], [28, "arkouda.DataFrame.groupby"], [28, "id123"]], "info (arkouda.loglevel attribute)": [[28, "arkouda.LogLevel.INFO"]], "ipv4 (class in arkouda)": [[28, "arkouda.IPv4"]], "index (class in arkouda)": [[28, "arkouda.Index"], [87, "arkouda.Index"]], "loglevel (class in arkouda)": [[28, "arkouda.LogLevel"]], "multiindex (class in arkouda)": [[28, "arkouda.MultiIndex"]], "or() (arkouda.groupby method)": [[28, "arkouda.GroupBy.OR"], [28, "id229"], [28, "id273"], [28, "id317"], [28, "id361"], [94, "arkouda.GroupBy.OR"]], "opeqops (arkouda.pdarray attribute)": [[28, "arkouda.pdarray.OpEqOps"], [28, "id677"], [28, "id738"], [28, "id799"], [28, "id860"]], "power_divergenceresult (class in arkouda)": [[28, "arkouda.Power_divergenceResult"]], "properties (class in arkouda)": [[28, "arkouda.Properties"]], "reductions (arkouda.groupby attribute)": [[28, "arkouda.GroupBy.Reductions"], [28, "id226"], [28, "id270"], [28, "id314"], [28, "id358"]], "registerablepieces (arkouda.categorical attribute)": [[28, "arkouda.Categorical.RegisterablePieces"], [28, "id13"], [28, "id62"]], "registeredsymbols (in module arkouda)": [[28, "arkouda.RegisteredSymbols"]], "registrationerror": [[28, "arkouda.RegistrationError"], [28, "id395"], [28, "id396"], [28, "id397"], [40, "arkouda.pdarrayclass.RegistrationError"]], "requiredpieces (arkouda.categorical attribute)": [[28, "arkouda.Categorical.RequiredPieces"], [28, "id14"], [28, "id63"]], "row (class in arkouda)": [[28, "arkouda.Row"]], "scalardtypes (in module arkouda)": [[28, "arkouda.ScalarDTypes"]], "series (class in arkouda)": [[28, "arkouda.Series"], [100, "arkouda.Series"]], "stringaccessor (class in arkouda)": [[28, "arkouda.StringAccessor"]], "strings (class in arkouda)": [[28, "arkouda.Strings"], [28, "id398"], [28, "id467"], [28, "id536"]], "timedelta (class in arkouda)": [[28, "arkouda.Timedelta"], [28, "id605"]], "warn (arkouda.loglevel attribute)": [[28, "arkouda.LogLevel.WARN"]], "xor() (arkouda.groupby method)": [[28, "arkouda.GroupBy.XOR"], [28, "id230"], [28, "id274"], [28, "id318"], [28, "id362"], [94, "arkouda.GroupBy.XOR"]], "abs() (arkouda.timedelta method)": [[28, "arkouda.Timedelta.abs"], [28, "id619"]], "abs() (in module arkouda)": [[28, "arkouda.abs"], [89, "arkouda.abs"]], "add() (arkouda.series method)": [[28, "arkouda.Series.add"]], "aggregate() (arkouda.groupby method)": [[28, "arkouda.GroupBy.aggregate"], [28, "id231"], [28, "id275"], [28, "id319"], [28, "id363"], [94, "arkouda.GroupBy.aggregate"]], "akabs() (in module arkouda)": [[28, "arkouda.akabs"]], "akbool (in module arkouda)": [[28, "arkouda.akbool"]], "akcast() (in module arkouda)": [[28, "arkouda.akcast"], [28, "id627"]], "akfloat64 (in module arkouda)": [[28, "arkouda.akfloat64"], [28, "id628"]], "akint64 (in module arkouda)": [[28, "arkouda.akint64"], [28, "id629"]], "akuint64 (in module arkouda)": [[28, "arkouda.akuint64"], [28, "id630"]], "align() (in module arkouda)": [[28, "arkouda.align"]], "all() (arkouda.groupby method)": [[28, "arkouda.GroupBy.all"], [28, "id232"], [28, "id276"], [28, "id320"], [28, "id364"], [94, "arkouda.GroupBy.all"]], "all() (arkouda.pdarray method)": [[28, "arkouda.pdarray.all"], [28, "id679"], [28, "id740"], [28, "id801"], [28, "id862"], [95, "arkouda.pdarray.all"]], "all() (in module arkouda)": [[28, "arkouda.all"], [89, "arkouda.all"]], "all_scalars (in module arkouda)": [[28, "arkouda.all_scalars"]], "any() (arkouda.groupby method)": [[28, "arkouda.GroupBy.any"], [28, "id233"], [28, "id277"], [28, "id321"], [28, "id365"], [94, "arkouda.GroupBy.any"]], "any() (arkouda.pdarray method)": [[28, "arkouda.pdarray.any"], [28, "id680"], [28, "id741"], [28, "id802"], [28, "id863"], [95, "arkouda.pdarray.any"]], "any() (in module arkouda)": [[28, "arkouda.any"], [89, "arkouda.any"]], "append() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.append"], [28, "id110"]], "apply_permutation() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.apply_permutation"], [28, "id111"]], "arange() (in module arkouda)": [[28, "arkouda.arange"], [28, "id631"], [28, "id632"], [28, "id633"], [28, "id634"], [92, "arkouda.arange"]], "arccos() (in module arkouda)": [[28, "arkouda.arccos"]], "arccosh() (in module arkouda)": [[28, "arkouda.arccosh"]], "arcsin() (in module arkouda)": [[28, "arkouda.arcsin"]], "arcsinh() (in module arkouda)": [[28, "arkouda.arcsinh"]], "arctan() (in module arkouda)": [[28, "arkouda.arctan"]], "arctan2() (in module arkouda)": [[28, "arkouda.arctan2"]], "arctanh() (in module arkouda)": [[28, "arkouda.arctanh"]], "argmax() (arkouda.groupby method)": [[28, "arkouda.GroupBy.argmax"], [28, "id234"], [28, "id278"], [28, "id322"], [28, "id366"], [94, "arkouda.GroupBy.argmax"]], "argmax() (arkouda.pdarray method)": [[28, "arkouda.pdarray.argmax"], [28, "id681"], [28, "id742"], [28, "id803"], [28, "id864"], [95, "arkouda.pdarray.argmax"]], "argmax() (in module arkouda)": [[28, "arkouda.argmax"], [89, "arkouda.argmax"]], "argmaxk() (arkouda.pdarray method)": [[28, "arkouda.pdarray.argmaxk"], [28, "id682"], [28, "id743"], [28, "id804"], [28, "id865"], [95, "arkouda.pdarray.argmaxk"]], "argmaxk() (in module arkouda)": [[28, "arkouda.argmaxk"], [89, "arkouda.argmaxk"]], "argmin() (arkouda.groupby method)": [[28, "arkouda.GroupBy.argmin"], [28, "id235"], [28, "id279"], [28, "id323"], [28, "id367"], [94, "arkouda.GroupBy.argmin"]], "argmin() (arkouda.pdarray method)": [[28, "arkouda.pdarray.argmin"], [28, "id683"], [28, "id744"], [28, "id805"], [28, "id866"], [95, "arkouda.pdarray.argmin"]], "argmin() (in module arkouda)": [[28, "arkouda.argmin"], [89, "arkouda.argmin"]], "argmink() (arkouda.pdarray method)": [[28, "arkouda.pdarray.argmink"], [28, "id684"], [28, "id745"], [28, "id806"], [28, "id867"], [95, "arkouda.pdarray.argmink"]], "argmink() (in module arkouda)": [[28, "arkouda.argmink"], [89, "arkouda.argmink"]], "argsort() (arkouda.categorical method)": [[28, "arkouda.Categorical.argsort"], [28, "id19"], [28, "id68"]], "argsort() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.argsort"], [28, "id112"]], "argsort() (arkouda.index method)": [[28, "arkouda.Index.argsort"]], "argsort() (arkouda.multiindex method)": [[28, "arkouda.MultiIndex.argsort"]], "argsort() (in module arkouda)": [[28, "arkouda.argsort"], [28, "id635"], [28, "id636"], [88, "arkouda.argsort"]], "arkouda": [[28, "module-arkouda"]], "array() (in module arkouda)": [[28, "arkouda.array"], [28, "id637"], [28, "id638"], [86, "arkouda.array"]], "astype() (arkouda.strings method)": [[28, "arkouda.Strings.astype"], [28, "id408"], [28, "id477"], [28, "id546"]], "astype() (arkouda.pdarray method)": [[28, "arkouda.pdarray.astype"], [28, "id685"], [28, "id746"], [28, "id807"], [28, "id868"]], "at (arkouda.series property)": [[28, "arkouda.Series.at"]], "attach() (arkouda.categorical static method)": [[28, "arkouda.Categorical.attach"], [28, "id20"], [28, "id69"]], "attach() (arkouda.dataframe static method)": [[28, "arkouda.DataFrame.attach"], [28, "id113"]], "attach() (arkouda.groupby static method)": [[28, "arkouda.GroupBy.attach"], [28, "id236"], [28, "id280"], [28, "id324"], [28, "id368"], [94, "arkouda.GroupBy.attach"]], "attach() (arkouda.series static method)": [[28, "arkouda.Series.attach"]], "attach() (arkouda.strings static method)": [[28, "arkouda.Strings.attach"], [28, "id409"], [28, "id478"], [28, "id547"]], "attach() (arkouda.pdarray static method)": [[28, "arkouda.pdarray.attach"], [28, "id686"], [28, "id747"], [28, "id808"], [28, "id869"]], "attach() (in module arkouda)": [[28, "arkouda.attach"]], "attach_all() (in module arkouda)": [[28, "arkouda.attach_all"]], "attach_pdarray() (in module arkouda)": [[28, "arkouda.attach_pdarray"]], "base (arkouda.arrayview attribute)": [[28, "arkouda.ArrayView.base"], [90, "arkouda.ArrayView.base"]], "bigint (in module arkouda)": [[28, "arkouda.bigint"], [28, "id639"]], "bigint_from_uint_arrays() (in module arkouda)": [[28, "arkouda.bigint_from_uint_arrays"]], "bigint_to_uint_arrays() (arkouda.pdarray method)": [[28, "arkouda.pdarray.bigint_to_uint_arrays"], [28, "id687"], [28, "id748"], [28, "id809"], [28, "id870"]], "bittype (in module arkouda)": [[28, "arkouda.bitType"], [28, "id640"]], "bool (in module arkouda)": [[28, "arkouda.bool"]], "bool_scalars (in module arkouda)": [[28, "arkouda.bool_scalars"]], "broadcast() (arkouda.groupby method)": [[28, "arkouda.GroupBy.broadcast"], [28, "id237"], [28, "id281"], [28, "id325"], [28, "id369"], [94, "arkouda.GroupBy.broadcast"]], "broadcast() (in module arkouda)": [[28, "arkouda.broadcast"], [28, "id641"], [28, "id642"]], "broadcast_dims() (in module arkouda)": [[28, "arkouda.broadcast_dims"]], "broadcast_to_shape() (in module arkouda)": [[28, "arkouda.broadcast_to_shape"]], "build_from_components() (arkouda.groupby static method)": [[28, "arkouda.GroupBy.build_from_components"], [28, "id238"], [28, "id282"], [28, "id326"], [28, "id370"], [94, "arkouda.GroupBy.build_from_components"]], "cached_regex_patterns() (arkouda.strings method)": [[28, "arkouda.Strings.cached_regex_patterns"], [28, "id410"], [28, "id479"], [28, "id548"]], "capitalize() (arkouda.strings method)": [[28, "arkouda.Strings.capitalize"], [28, "id411"], [28, "id480"], [28, "id549"]], "cast() (in module arkouda)": [[28, "arkouda.cast"], [28, "id643"], [97, "arkouda.cast"]], "categories (arkouda.categorical attribute)": [[28, "arkouda.Categorical.categories"], [28, "id3"], [28, "id52"], [91, "arkouda.Categorical.categories"]], "ceil() (in module arkouda)": [[28, "arkouda.ceil"]], "check_np_dtype() (in module arkouda)": [[28, "arkouda.check_np_dtype"]], "chisquare() (in module arkouda)": [[28, "arkouda.chisquare"]], "clear() (in module arkouda)": [[28, "arkouda.clear"]], "clz() (arkouda.pdarray method)": [[28, "arkouda.pdarray.clz"], [28, "id688"], [28, "id749"], [28, "id810"], [28, "id871"]], "clz() (in module arkouda)": [[28, "arkouda.clz"]], "coargsort() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.coargsort"], [28, "id114"]], "coargsort() (in module arkouda)": [[28, "arkouda.coargsort"], [28, "id644"], [28, "id645"], [88, "arkouda.coargsort"]], "codes (arkouda.categorical attribute)": [[28, "arkouda.Categorical.codes"], [28, "id4"], [28, "id53"], [91, "arkouda.Categorical.codes"]], "columns (arkouda.dataframe property)": [[28, "arkouda.DataFrame.columns"], [28, "id101"]], "complex128 (in module arkouda)": [[28, "arkouda.complex128"]], "complex64 (in module arkouda)": [[28, "arkouda.complex64"]], "components (arkouda.timedelta property)": [[28, "arkouda.Timedelta.components"], [28, "id606"]], "compute_join_size() (in module arkouda)": [[28, "arkouda.compute_join_size"]], "concat() (arkouda.dataframe class method)": [[28, "arkouda.DataFrame.concat"], [28, "id115"]], "concat() (arkouda.index method)": [[28, "arkouda.Index.concat"]], "concat() (arkouda.multiindex method)": [[28, "arkouda.MultiIndex.concat"]], "concat() (arkouda.series static method)": [[28, "arkouda.Series.concat"]], "concatenate() (arkouda.categorical method)": [[28, "arkouda.Categorical.concatenate"], [28, "id21"], [28, "id70"]], "concatenate() (in module arkouda)": [[28, "arkouda.concatenate"], [28, "id646"], [92, "arkouda.concatenate"]], "conserves (arkouda.bitvector attribute)": [[28, "arkouda.BitVector.conserves"]], "contains() (arkouda.categorical method)": [[28, "arkouda.Categorical.contains"], [28, "id22"], [28, "id71"], [91, "arkouda.Categorical.contains"]], "contains() (arkouda.strings method)": [[28, "arkouda.Strings.contains"], [28, "id412"], [28, "id481"], [28, "id550"], [103, "arkouda.Strings.contains"]], "convert_if_categorical() (in module arkouda)": [[28, "arkouda.convert_if_categorical"]], "copy() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.copy"], [28, "id116"]], "corr() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.corr"], [28, "id117"]], "corr() (arkouda.pdarray method)": [[28, "arkouda.pdarray.corr"], [28, "id689"], [28, "id750"], [28, "id811"], [28, "id872"]], "corr() (in module arkouda)": [[28, "arkouda.corr"]], "cos() (in module arkouda)": [[28, "arkouda.cos"], [89, "arkouda.cos"]], "cosh() (in module arkouda)": [[28, "arkouda.cosh"]], "count() (arkouda.groupby method)": [[28, "arkouda.GroupBy.count"], [28, "id239"], [28, "id283"], [28, "id327"], [28, "id371"], [94, "arkouda.GroupBy.count"]], "cov() (arkouda.pdarray method)": [[28, "arkouda.pdarray.cov"], [28, "id690"], [28, "id751"], [28, "id812"], [28, "id873"]], "cov() (in module arkouda)": [[28, "arkouda.cov"]], "create_pdarray() (in module arkouda)": [[28, "arkouda.create_pdarray"], [28, "id647"], [28, "id648"]], "ctz() (arkouda.pdarray method)": [[28, "arkouda.pdarray.ctz"], [28, "id691"], [28, "id752"], [28, "id813"], [28, "id874"]], "ctz() (in module arkouda)": [[28, "arkouda.ctz"]], "cumprod() (in module arkouda)": [[28, "arkouda.cumprod"], [89, "arkouda.cumprod"]], "cumsum() (in module arkouda)": [[28, "arkouda.cumsum"], [89, "arkouda.cumsum"]], "date (arkouda.datetime property)": [[28, "arkouda.Datetime.date"], [28, "id151"], [28, "id184"]], "date_operators() (in module arkouda)": [[28, "arkouda.date_operators"]], "date_range() (in module arkouda)": [[28, "arkouda.date_range"], [28, "id649"]], "day (arkouda.datetime property)": [[28, "arkouda.Datetime.day"], [28, "id152"], [28, "id185"]], "day_of_week (arkouda.datetime property)": [[28, "arkouda.Datetime.day_of_week"], [28, "id153"], [28, "id186"]], "day_of_year (arkouda.datetime property)": [[28, "arkouda.Datetime.day_of_year"], [28, "id154"], [28, "id187"]], "dayofweek (arkouda.datetime property)": [[28, "arkouda.Datetime.dayofweek"], [28, "id155"], [28, "id188"]], "dayofyear (arkouda.datetime property)": [[28, "arkouda.Datetime.dayofyear"], [28, "id156"], [28, "id189"]], "days (arkouda.timedelta property)": [[28, "arkouda.Timedelta.days"], [28, "id607"]], "decode() (arkouda.strings method)": [[28, "arkouda.Strings.decode"], [28, "id413"], [28, "id482"], [28, "id551"]], "deg2rad() (in module arkouda)": [[28, "arkouda.deg2rad"]], "diff() (arkouda.series method)": [[28, "arkouda.Series.diff"]], "disableverbose() (in module arkouda)": [[28, "arkouda.disableVerbose"]], "divmod() (in module arkouda)": [[28, "arkouda.divmod"]], "dot() (in module arkouda)": [[28, "arkouda.dot"]], "drop() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.drop"], [28, "id118"]], "drop_duplicates() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.drop_duplicates"], [28, "id119"]], "dropna (arkouda.groupby attribute)": [[28, "arkouda.GroupBy.dropna"], [28, "id225"], [28, "id269"], [28, "id313"], [28, "id357"], [94, "arkouda.GroupBy.dropna"]], "dt (arkouda.series attribute)": [[28, "arkouda.Series.dt"]], "dtype (arkouda.arrayview attribute)": [[28, "arkouda.ArrayView.dtype"], [90, "arkouda.ArrayView.dtype"]], "dtype (arkouda.categorical attribute)": [[28, "arkouda.Categorical.dtype"], [28, "id15"], [28, "id64"]], "dtype (arkouda.strings attribute)": [[28, "arkouda.Strings.dtype"], [28, "id404"], [28, "id473"], [28, "id542"]], "dtype (arkouda.pdarray attribute)": [[28, "arkouda.pdarray.dtype"], [28, "id669"], [28, "id730"], [28, "id791"], [28, "id852"], [97, "arkouda.pdarray.dtype"]], "dtype() (in module arkouda)": [[28, "arkouda.dtype"]], "dtypes (arkouda.dataframe property)": [[28, "arkouda.DataFrame.dtypes"], [28, "id102"]], "empty (arkouda.dataframe property)": [[28, "arkouda.DataFrame.empty"], [28, "id103"]], "enableverbose() (in module arkouda)": [[28, "arkouda.enableVerbose"]], "encode() (arkouda.strings method)": [[28, "arkouda.Strings.encode"], [28, "id414"], [28, "id483"], [28, "id552"]], "endswith() (arkouda.categorical method)": [[28, "arkouda.Categorical.endswith"], [28, "id23"], [28, "id72"], [91, "arkouda.Categorical.endswith"]], "endswith() (arkouda.strings method)": [[28, "arkouda.Strings.endswith"], [28, "id415"], [28, "id484"], [28, "id553"], [103, "arkouda.Strings.endswith"]], "entry (arkouda.strings attribute)": [[28, "arkouda.Strings.entry"], [28, "id399"], [28, "id468"], [28, "id537"]], "exp() (in module arkouda)": [[28, "arkouda.exp"], [89, "arkouda.exp"]], "expm1() (in module arkouda)": [[28, "arkouda.expm1"]], "export() (in module arkouda)": [[28, "arkouda.export"], [86, "arkouda.export"]], "export_uint() (arkouda.ipv4 method)": [[28, "arkouda.IPv4.export_uint"]], "factory() (arkouda.index static method)": [[28, "arkouda.Index.factory"]], "fill() (arkouda.pdarray method)": [[28, "arkouda.pdarray.fill"], [28, "id692"], [28, "id753"], [28, "id814"], [28, "id875"]], "fillna() (arkouda.series method)": [[28, "arkouda.Series.fillna"]], "filter_by_range() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.filter_by_range"], [28, "id120"]], "find() (in module arkouda)": [[28, "arkouda.find"]], "find_locations() (arkouda.strings method)": [[28, "arkouda.Strings.find_locations"], [28, "id416"], [28, "id485"], [28, "id554"], [103, "arkouda.Strings.find_locations"]], "findall() (arkouda.strings method)": [[28, "arkouda.Strings.findall"], [28, "id417"], [28, "id486"], [28, "id555"], [103, "arkouda.Strings.findall"]], "first() (arkouda.groupby method)": [[28, "arkouda.GroupBy.first"], [28, "id240"], [28, "id284"], [28, "id328"], [28, "id372"], [94, "arkouda.GroupBy.first"]], "flatten() (arkouda.strings method)": [[28, "arkouda.Strings.flatten"], [28, "id418"], [28, "id487"], [28, "id556"], [103, "arkouda.Strings.flatten"]], "float32 (in module arkouda)": [[28, "arkouda.float32"]], "float64 (in module arkouda)": [[28, "arkouda.float64"]], "float_scalars (in module arkouda)": [[28, "arkouda.float_scalars"]], "floor() (in module arkouda)": [[28, "arkouda.floor"]], "fmod() (in module arkouda)": [[28, "arkouda.fmod"]], "format() (arkouda.bitvector method)": [[28, "arkouda.BitVector.format"]], "format() (arkouda.fields method)": [[28, "arkouda.Fields.format"]], "format() (arkouda.ipv4 method)": [[28, "arkouda.IPv4.format"]], "format_other() (arkouda.pdarray method)": [[28, "arkouda.pdarray.format_other"], [28, "id693"], [28, "id754"], [28, "id815"], [28, "id876"]], "from_codes() (arkouda.categorical class method)": [[28, "arkouda.Categorical.from_codes"], [28, "id24"], [28, "id73"], [91, "arkouda.Categorical.from_codes"]], "from_pandas() (arkouda.dataframe class method)": [[28, "arkouda.DataFrame.from_pandas"], [28, "id121"]], "from_parts() (arkouda.strings static method)": [[28, "arkouda.Strings.from_parts"], [28, "id419"], [28, "id488"], [28, "id557"]], "from_return_msg() (arkouda.bitvector class method)": [[28, "arkouda.BitVector.from_return_msg"]], "from_return_msg() (arkouda.categorical class method)": [[28, "arkouda.Categorical.from_return_msg"], [28, "id25"], [28, "id74"]], "from_return_msg() (arkouda.dataframe class method)": [[28, "arkouda.DataFrame.from_return_msg"], [28, "id122"]], "from_return_msg() (arkouda.groupby static method)": [[28, "arkouda.GroupBy.from_return_msg"], [28, "id241"], [28, "id285"], [28, "id329"], [28, "id373"]], "from_return_msg() (arkouda.index class method)": [[28, "arkouda.Index.from_return_msg"]], "from_return_msg() (arkouda.series class method)": [[28, "arkouda.Series.from_return_msg"]], "from_return_msg() (arkouda.strings static method)": [[28, "arkouda.Strings.from_return_msg"], [28, "id420"], [28, "id489"], [28, "id558"]], "from_series() (in module arkouda)": [[28, "arkouda.from_series"], [28, "id650"]], "full() (in module arkouda)": [[28, "arkouda.full"], [28, "id651"]], "full_like() (in module arkouda)": [[28, "arkouda.full_like"]], "fullmatch() (arkouda.strings method)": [[28, "arkouda.Strings.fullmatch"], [28, "id421"], [28, "id490"], [28, "id559"], [103, "arkouda.Strings.fullmatch"]], "gb (arkouda.diffaggregate attribute)": [[28, "arkouda.DiffAggregate.gb"]], "gen_ranges() (in module arkouda)": [[28, "arkouda.gen_ranges"]], "generic_concat() (in module arkouda)": [[28, "arkouda.generic_concat"]], "get_byteorder() (in module arkouda)": [[28, "arkouda.get_byteorder"]], "get_bytes() (arkouda.strings method)": [[28, "arkouda.Strings.get_bytes"], [28, "id422"], [28, "id491"], [28, "id560"]], "get_callback() (in module arkouda)": [[28, "arkouda.get_callback"]], "get_columns() (in module arkouda)": [[28, "arkouda.get_columns"]], "get_datasets() (in module arkouda)": [[28, "arkouda.get_datasets"], [86, "arkouda.get_datasets"]], "get_filetype() (in module arkouda)": [[28, "arkouda.get_filetype"]], "get_lengths() (arkouda.strings method)": [[28, "arkouda.Strings.get_lengths"], [28, "id423"], [28, "id492"], [28, "id561"]], "get_null_indices() (in module arkouda)": [[28, "arkouda.get_null_indices"]], "get_offsets() (arkouda.strings method)": [[28, "arkouda.Strings.get_offsets"], [28, "id424"], [28, "id493"], [28, "id562"]], "get_prefixes() (arkouda.strings method)": [[28, "arkouda.Strings.get_prefixes"], [28, "id425"], [28, "id494"], [28, "id563"]], "get_server_byteorder() (in module arkouda)": [[28, "arkouda.get_server_byteorder"]], "get_suffixes() (arkouda.strings method)": [[28, "arkouda.Strings.get_suffixes"], [28, "id426"], [28, "id495"], [28, "id564"]], "group() (arkouda.categorical method)": [[28, "arkouda.Categorical.group"], [28, "id26"], [28, "id75"]], "group() (arkouda.strings method)": [[28, "arkouda.Strings.group"], [28, "id427"], [28, "id496"], [28, "id565"]], "has_repeat_labels() (arkouda.series method)": [[28, "arkouda.Series.has_repeat_labels"]], "hash() (arkouda.categorical method)": [[28, "arkouda.Categorical.hash"], [28, "id27"], [28, "id76"]], "hash() (arkouda.strings method)": [[28, "arkouda.Strings.hash"], [28, "id428"], [28, "id497"], [28, "id566"]], "hash() (in module arkouda)": [[28, "arkouda.hash"]], "hasnans() (arkouda.series method)": [[28, "arkouda.Series.hasnans"]], "head() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.head"], [28, "id124"]], "head() (arkouda.series method)": [[28, "arkouda.Series.head"]], "hist_all() (in module arkouda)": [[28, "arkouda.hist_all"]], "histogram() (in module arkouda)": [[28, "arkouda.histogram"], [28, "id652"], [95, "arkouda.histogram"]], "histogram2d() (in module arkouda)": [[28, "arkouda.histogram2d"]], "histogramdd() (in module arkouda)": [[28, "arkouda.histogramdd"]], "hour (arkouda.datetime property)": [[28, "arkouda.Datetime.hour"], [28, "id157"], [28, "id190"]], "iat (arkouda.series property)": [[28, "arkouda.Series.iat"]], "ignore (arkouda.errormode attribute)": [[28, "arkouda.ErrorMode.ignore"]], "iloc (arkouda.series property)": [[28, "arkouda.Series.iloc"]], "import_data() (in module arkouda)": [[28, "arkouda.import_data"], [86, "arkouda.import_data"]], "in1d() (arkouda.categorical method)": [[28, "arkouda.Categorical.in1d"], [28, "id28"], [28, "id77"]], "in1d() (in module arkouda)": [[28, "arkouda.in1d"], [28, "id653"], [28, "id655"], [101, "arkouda.in1d"]], "in1d_intervals() (in module arkouda)": [[28, "arkouda.in1d_intervals"]], "index (arkouda.dataframe property)": [[28, "arkouda.DataFrame.index"], [28, "id104"]], "index (arkouda.index property)": [[28, "arkouda.Index.index"]], "index (arkouda.multiindex property)": [[28, "arkouda.MultiIndex.index"]], "indexof1d() (in module arkouda)": [[28, "arkouda.indexof1d"]], "info (arkouda.dataframe property)": [[28, "arkouda.DataFrame.info"], [28, "id105"]], "info() (arkouda.categorical method)": [[28, "arkouda.Categorical.info"], [28, "id29"], [28, "id78"]], "info() (arkouda.strings method)": [[28, "arkouda.Strings.info"], [28, "id429"], [28, "id498"], [28, "id567"]], "info() (arkouda.pdarray method)": [[28, "arkouda.pdarray.info"], [28, "id694"], [28, "id755"], [28, "id816"], [28, "id877"]], "information() (in module arkouda)": [[28, "arkouda.information"]], "int16 (in module arkouda)": [[28, "arkouda.int16"]], "int32 (in module arkouda)": [[28, "arkouda.int32"]], "int64 (in module arkouda)": [[28, "arkouda.int64"], [28, "id657"]], "int8 (in module arkouda)": [[28, "arkouda.int8"]], "inttypes (in module arkouda)": [[28, "arkouda.intTypes"], [28, "id658"], [28, "id659"]], "int_scalars (in module arkouda)": [[28, "arkouda.int_scalars"], [28, "id660"]], "integers() (arkouda.generator method)": [[28, "arkouda.Generator.integers"]], "intersect() (in module arkouda)": [[28, "arkouda.intersect"]], "intersect1d() (in module arkouda)": [[28, "arkouda.intersect1d"], [101, "arkouda.intersect1d"]], "interval_lookup() (in module arkouda)": [[28, "arkouda.interval_lookup"]], "intx() (in module arkouda)": [[28, "arkouda.intx"]], "invert_permutation() (in module arkouda)": [[28, "arkouda.invert_permutation"]], "ip_address() (in module arkouda)": [[28, "arkouda.ip_address"]], "issupportedint() (in module arkouda)": [[28, "arkouda.isSupportedInt"], [28, "id661"]], "issupportednumber() (in module arkouda)": [[28, "arkouda.isSupportedNumber"]], "is_cosorted() (in module arkouda)": [[28, "arkouda.is_cosorted"]], "is_ipv4() (in module arkouda)": [[28, "arkouda.is_ipv4"]], "is_ipv6() (in module arkouda)": [[28, "arkouda.is_ipv6"]], "is_leap_year (arkouda.datetime property)": [[28, "arkouda.Datetime.is_leap_year"], [28, "id158"], [28, "id191"]], "is_registered() (arkouda.categorical method)": [[28, "arkouda.Categorical.is_registered"], [28, "id30"], [28, "id79"]], "is_registered() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.is_registered"], [28, "id125"]], "is_registered() (arkouda.datetime method)": [[28, "arkouda.Datetime.is_registered"], [28, "id177"], [28, "id210"]], "is_registered() (arkouda.groupby method)": [[28, "arkouda.GroupBy.is_registered"], [28, "id242"], [28, "id286"], [28, "id330"], [28, "id374"], [94, "arkouda.GroupBy.is_registered"]], "is_registered() (arkouda.index method)": [[28, "arkouda.Index.is_registered"]], "is_registered() (arkouda.multiindex method)": [[28, "arkouda.MultiIndex.is_registered"]], "is_registered() (arkouda.series method)": [[28, "arkouda.Series.is_registered"]], "is_registered() (arkouda.strings method)": [[28, "arkouda.Strings.is_registered"], [28, "id430"], [28, "id499"], [28, "id568"]], "is_registered() (arkouda.timedelta method)": [[28, "arkouda.Timedelta.is_registered"], [28, "id620"]], "is_registered() (arkouda.pdarray method)": [[28, "arkouda.pdarray.is_registered"], [28, "id695"], [28, "id756"], [28, "id817"], [28, "id878"]], "is_registered() (in module arkouda)": [[28, "arkouda.is_registered"]], "is_sorted() (arkouda.pdarray method)": [[28, "arkouda.pdarray.is_sorted"], [28, "id696"], [28, "id757"], [28, "id818"], [28, "id879"], [95, "arkouda.pdarray.is_sorted"]], "is_sorted() (in module arkouda)": [[28, "arkouda.is_sorted"], [89, "arkouda.is_sorted"]], "is_unique (arkouda.index property)": [[28, "arkouda.Index.is_unique"]], "isalnum() (arkouda.strings method)": [[28, "arkouda.Strings.isalnum"], [28, "id431"], [28, "id500"], [28, "id569"]], "isalpha() (arkouda.strings method)": [[28, "arkouda.Strings.isalpha"], [28, "id432"], [28, "id501"], [28, "id570"]], "isdecimal() (arkouda.strings method)": [[28, "arkouda.Strings.isdecimal"], [28, "id433"], [28, "id502"], [28, "id571"]], "isdigit() (arkouda.strings method)": [[28, "arkouda.Strings.isdigit"], [28, "id434"], [28, "id503"], [28, "id572"]], "isempty() (arkouda.strings method)": [[28, "arkouda.Strings.isempty"], [28, "id435"], [28, "id504"], [28, "id573"]], "isfinite() (in module arkouda)": [[28, "arkouda.isfinite"]], "isin() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.isin"], [28, "id126"]], "isin() (arkouda.series method)": [[28, "arkouda.Series.isin"]], "isinf() (in module arkouda)": [[28, "arkouda.isinf"]], "islower() (arkouda.strings method)": [[28, "arkouda.Strings.islower"], [28, "id436"], [28, "id505"], [28, "id574"]], "isna() (arkouda.categorical method)": [[28, "arkouda.Categorical.isna"], [28, "id31"], [28, "id80"]], "isna() (arkouda.series method)": [[28, "arkouda.Series.isna"]], "isnan() (in module arkouda)": [[28, "arkouda.isnan"], [28, "id662"]], "isnull() (arkouda.series method)": [[28, "arkouda.Series.isnull"]], "isocalendar() (arkouda.datetime method)": [[28, "arkouda.Datetime.isocalendar"], [28, "id178"], [28, "id211"]], "isspace() (arkouda.strings method)": [[28, "arkouda.Strings.isspace"], [28, "id437"], [28, "id506"], [28, "id575"]], "istitle() (arkouda.strings method)": [[28, "arkouda.Strings.istitle"], [28, "id438"], [28, "id507"], [28, "id576"]], "isupper() (arkouda.strings method)": [[28, "arkouda.Strings.isupper"], [28, "id439"], [28, "id508"], [28, "id577"]], "itemsize (arkouda.arrayview attribute)": [[28, "arkouda.ArrayView.itemsize"], [90, "arkouda.ArrayView.itemsize"]], "itemsize (arkouda.pdarray attribute)": [[28, "arkouda.pdarray.itemsize"], [28, "id673"], [28, "id734"], [28, "id795"], [28, "id856"], [97, "arkouda.pdarray.itemsize"]], "join_on_eq_with_dt() (in module arkouda)": [[28, "arkouda.join_on_eq_with_dt"]], "left_align() (in module arkouda)": [[28, "arkouda.left_align"]], "linspace() (in module arkouda)": [[28, "arkouda.linspace"], [92, "arkouda.linspace"]], "list_registry() (in module arkouda)": [[28, "arkouda.list_registry"]], "list_symbol_table() (in module arkouda)": [[28, "arkouda.list_symbol_table"]], "load() (arkouda.dataframe class method)": [[28, "arkouda.DataFrame.load"], [28, "id127"]], "load() (in module arkouda)": [[28, "arkouda.load"]], "load_all() (in module arkouda)": [[28, "arkouda.load_all"]], "loc (arkouda.series property)": [[28, "arkouda.Series.loc"]], "locate() (arkouda.series method)": [[28, "arkouda.Series.locate"]], "log() (in module arkouda)": [[28, "arkouda.log"], [89, "arkouda.log"]], "log10() (in module arkouda)": [[28, "arkouda.log10"]], "log1p() (in module arkouda)": [[28, "arkouda.log1p"]], "log2() (in module arkouda)": [[28, "arkouda.log2"]], "logger (arkouda.groupby attribute)": [[28, "arkouda.GroupBy.logger"], [28, "id224"], [28, "id268"], [28, "id312"], [28, "id356"], [94, "arkouda.GroupBy.logger"]], "logger (arkouda.strings attribute)": [[28, "arkouda.Strings.logger"], [28, "id405"], [28, "id474"], [28, "id543"]], "lookup() (arkouda.index method)": [[28, "arkouda.Index.lookup"]], "lookup() (arkouda.multiindex method)": [[28, "arkouda.MultiIndex.lookup"]], "lookup() (in module arkouda)": [[28, "arkouda.lookup"]], "lower() (arkouda.strings method)": [[28, "arkouda.Strings.lower"], [28, "id440"], [28, "id509"], [28, "id578"]], "ls() (in module arkouda)": [[28, "arkouda.ls"]], "ls_csv() (in module arkouda)": [[28, "arkouda.ls_csv"]], "lstick() (arkouda.strings method)": [[28, "arkouda.Strings.lstick"], [28, "id441"], [28, "id510"], [28, "id579"], [103, "arkouda.Strings.lstick"]], "map() (arkouda.index method)": [[28, "arkouda.Index.map"]], "map() (arkouda.series method)": [[28, "arkouda.Series.map"]], "match() (arkouda.strings method)": [[28, "arkouda.Strings.match"], [28, "id442"], [28, "id511"], [28, "id580"], [103, "arkouda.Strings.match"]], "max() (arkouda.groupby method)": [[28, "arkouda.GroupBy.max"], [28, "id243"], [28, "id287"], [28, "id331"], [28, "id375"], [94, "arkouda.GroupBy.max"]], "max() (arkouda.pdarray method)": [[28, "arkouda.pdarray.max"], [28, "id697"], [28, "id758"], [28, "id819"], [28, "id880"], [95, "arkouda.pdarray.max"]], "max() (in module arkouda)": [[28, "arkouda.max"], [89, "arkouda.max"]], "max_bits (arkouda.pdarray property)": [[28, "arkouda.pdarray.max_bits"], [28, "id674"], [28, "id735"], [28, "id796"], [28, "id857"]], "maxk() (arkouda.pdarray method)": [[28, "arkouda.pdarray.maxk"], [28, "id698"], [28, "id759"], [28, "id820"], [28, "id881"], [95, "arkouda.pdarray.maxk"]], "maxk() (in module arkouda)": [[28, "arkouda.maxk"], [89, "arkouda.maxk"]], "mean() (arkouda.groupby method)": [[28, "arkouda.GroupBy.mean"], [28, "id244"], [28, "id288"], [28, "id332"], [28, "id376"], [94, "arkouda.GroupBy.mean"]], "mean() (arkouda.pdarray method)": [[28, "arkouda.pdarray.mean"], [28, "id699"], [28, "id760"], [28, "id821"], [28, "id882"], [95, "arkouda.pdarray.mean"]], "mean() (in module arkouda)": [[28, "arkouda.mean"], [89, "arkouda.mean"]], "median() (arkouda.groupby method)": [[28, "arkouda.GroupBy.median"], [28, "id245"], [28, "id289"], [28, "id333"], [28, "id377"], [94, "arkouda.GroupBy.median"]], "memory_usage() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.memory_usage"], [28, "id128"]], "memory_usage() (arkouda.index method)": [[28, "arkouda.Index.memory_usage"]], "memory_usage() (arkouda.multiindex method)": [[28, "arkouda.MultiIndex.memory_usage"]], "memory_usage() (arkouda.series method)": [[28, "arkouda.Series.memory_usage"]], "memory_usage_info() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.memory_usage_info"], [28, "id129"]], "merge() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.merge"], [28, "id130"]], "merge() (in module arkouda)": [[28, "arkouda.merge"]], "microsecond (arkouda.datetime property)": [[28, "arkouda.Datetime.microsecond"], [28, "id159"], [28, "id192"]], "microseconds (arkouda.timedelta property)": [[28, "arkouda.Timedelta.microseconds"], [28, "id608"]], "millisecond (arkouda.datetime property)": [[28, "arkouda.Datetime.millisecond"], [28, "id160"], [28, "id193"]], "min() (arkouda.groupby method)": [[28, "arkouda.GroupBy.min"], [28, "id246"], [28, "id290"], [28, "id334"], [28, "id378"], [94, "arkouda.GroupBy.min"]], "min() (arkouda.pdarray method)": [[28, "arkouda.pdarray.min"], [28, "id700"], [28, "id761"], [28, "id822"], [28, "id883"], [95, "arkouda.pdarray.min"]], "min() (in module arkouda)": [[28, "arkouda.min"], [89, "arkouda.min"]], "mink() (arkouda.pdarray method)": [[28, "arkouda.pdarray.mink"], [28, "id701"], [28, "id762"], [28, "id823"], [28, "id884"], [95, "arkouda.pdarray.mink"]], "mink() (in module arkouda)": [[28, "arkouda.mink"], [89, "arkouda.mink"]], "minute (arkouda.datetime property)": [[28, "arkouda.Datetime.minute"], [28, "id161"], [28, "id194"]], "mod() (in module arkouda)": [[28, "arkouda.mod"]], "mode() (arkouda.groupby method)": [[28, "arkouda.GroupBy.mode"], [28, "id247"], [28, "id291"], [28, "id335"], [28, "id379"], [94, "arkouda.GroupBy.mode"]], "month (arkouda.datetime property)": [[28, "arkouda.Datetime.month"], [28, "id162"], [28, "id195"]], "most_common() (arkouda.groupby method)": [[28, "arkouda.GroupBy.most_common"], [28, "id248"], [28, "id292"], [28, "id336"], [28, "id380"], [94, "arkouda.GroupBy.most_common"]], "name (arkouda.pdarray attribute)": [[28, "arkouda.pdarray.name"], [28, "id668"], [28, "id729"], [28, "id790"], [28, "id851"], [97, "arkouda.pdarray.name"]], "nanosecond (arkouda.datetime property)": [[28, "arkouda.Datetime.nanosecond"], [28, "id163"], [28, "id196"]], "nanoseconds (arkouda.timedelta property)": [[28, "arkouda.Timedelta.nanoseconds"], [28, "id609"]], "nbytes (arkouda.categorical property)": [[28, "arkouda.Categorical.nbytes"], [28, "id11"], [28, "id60"]], "nbytes (arkouda.strings attribute)": [[28, "arkouda.Strings.nbytes"], [28, "id401"], [28, "id470"], [28, "id539"]], "nbytes (arkouda.pdarray property)": [[28, "arkouda.pdarray.nbytes"], [28, "id675"], [28, "id736"], [28, "id797"], [28, "id858"]], "ndim (arkouda.arrayview attribute)": [[28, "arkouda.ArrayView.ndim"], [90, "arkouda.ArrayView.ndim"]], "ndim (arkouda.categorical attribute)": [[28, "arkouda.Categorical.ndim"], [28, "id58"], [28, "id9"], [91, "arkouda.Categorical.ndim"]], "ndim (arkouda.strings attribute)": [[28, "arkouda.Strings.ndim"], [28, "id402"], [28, "id471"], [28, "id540"]], "ndim (arkouda.pdarray attribute)": [[28, "arkouda.pdarray.ndim"], [28, "id671"], [28, "id732"], [28, "id793"], [28, "id854"], [97, "arkouda.pdarray.ndim"]], "ngroups (arkouda.groupby attribute)": [[28, "arkouda.GroupBy.ngroups"], [28, "id222"], [28, "id266"], [28, "id310"], [28, "id354"], [94, "arkouda.GroupBy.ngroups"]], "nkeys (arkouda.groupby attribute)": [[28, "arkouda.GroupBy.nkeys"], [28, "id218"], [28, "id262"], [28, "id306"], [28, "id350"], [94, "arkouda.GroupBy.nkeys"]], "nlevels (arkouda.categorical attribute)": [[28, "arkouda.Categorical.nlevels"], [28, "id57"], [28, "id8"], [91, "arkouda.Categorical.nlevels"]], "normalize() (arkouda.ipv4 method)": [[28, "arkouda.IPv4.normalize"]], "notna() (arkouda.series method)": [[28, "arkouda.Series.notna"]], "notnull() (arkouda.series method)": [[28, "arkouda.Series.notnull"]], "numeric_scalars (in module arkouda)": [[28, "arkouda.numeric_scalars"]], "numpy_scalars (in module arkouda)": [[28, "arkouda.numpy_scalars"]], "nunique() (arkouda.groupby method)": [[28, "arkouda.GroupBy.nunique"], [28, "id249"], [28, "id293"], [28, "id337"], [28, "id381"], [94, "arkouda.GroupBy.nunique"]], "objtype (arkouda.arrayview attribute)": [[28, "arkouda.ArrayView.objType"]], "objtype (arkouda.categorical attribute)": [[28, "arkouda.Categorical.objType"], [28, "id16"], [28, "id65"]], "objtype (arkouda.dataframe attribute)": [[28, "arkouda.DataFrame.objType"], [28, "id108"]], "objtype (arkouda.groupby attribute)": [[28, "arkouda.GroupBy.objType"], [28, "id227"], [28, "id271"], [28, "id315"], [28, "id359"]], "objtype (arkouda.index attribute)": [[28, "arkouda.Index.objType"]], "objtype (arkouda.multiindex attribute)": [[28, "arkouda.MultiIndex.objType"]], "objtype (arkouda.series attribute)": [[28, "arkouda.Series.objType"]], "objtype (arkouda.strings attribute)": [[28, "arkouda.Strings.objType"], [28, "id407"], [28, "id476"], [28, "id545"]], "objtype (arkouda.pdarray attribute)": [[28, "arkouda.pdarray.objType"], [28, "id678"], [28, "id739"], [28, "id800"], [28, "id861"]], "ones() (in module arkouda)": [[28, "arkouda.ones"], [28, "id663"], [28, "id664"], [92, "arkouda.ones"]], "ones_like() (in module arkouda)": [[28, "arkouda.ones_like"], [92, "arkouda.ones_like"]], "opeq() (arkouda.bitvector method)": [[28, "arkouda.BitVector.opeq"]], "opeq() (arkouda.fields method)": [[28, "arkouda.Fields.opeq"]], "opeq() (arkouda.ipv4 method)": [[28, "arkouda.IPv4.opeq"]], "opeq() (arkouda.pdarray method)": [[28, "arkouda.pdarray.opeq"], [28, "id702"], [28, "id763"], [28, "id824"], [28, "id885"]], "order (arkouda.arrayview attribute)": [[28, "arkouda.ArrayView.order"], [90, "arkouda.ArrayView.order"]], "parity() (arkouda.pdarray method)": [[28, "arkouda.pdarray.parity"], [28, "id703"], [28, "id764"], [28, "id825"], [28, "id886"]], "parity() (in module arkouda)": [[28, "arkouda.parity"]], "parse_hdf_categoricals() (arkouda.categorical static method)": [[28, "arkouda.Categorical.parse_hdf_categoricals"], [28, "id32"], [28, "id81"]], "pdarray (class in arkouda)": [[28, "arkouda.pdarray"], [28, "id667"], [28, "id728"], [28, "id789"], [28, "id850"], [97, "arkouda.pdarray"]], "pdconcat() (arkouda.series static method)": [[28, "arkouda.Series.pdconcat"]], "peel() (arkouda.strings method)": [[28, "arkouda.Strings.peel"], [28, "id443"], [28, "id512"], [28, "id581"], [103, "arkouda.Strings.peel"]], "permutation (arkouda.categorical attribute)": [[28, "arkouda.Categorical.permutation"], [28, "id0"], [28, "id17"], [28, "id5"], [28, "id54"], [28, "id66"], [91, "arkouda.Categorical.permutation"]], "permutation (arkouda.groupby attribute)": [[28, "arkouda.GroupBy.permutation"], [28, "id220"], [28, "id264"], [28, "id308"], [28, "id352"], [94, "arkouda.GroupBy.permutation"]], "plot_dist() (in module arkouda)": [[28, "arkouda.plot_dist"]], "popcount() (arkouda.pdarray method)": [[28, "arkouda.pdarray.popcount"], [28, "id704"], [28, "id765"], [28, "id826"], [28, "id887"]], "popcount() (in module arkouda)": [[28, "arkouda.popcount"]], "power() (in module arkouda)": [[28, "arkouda.power"]], "power_divergence() (in module arkouda)": [[28, "arkouda.power_divergence"]], "pretty_print_info() (arkouda.categorical method)": [[28, "arkouda.Categorical.pretty_print_info"], [28, "id33"], [28, "id82"]], "pretty_print_info() (arkouda.strings method)": [[28, "arkouda.Strings.pretty_print_info"], [28, "id444"], [28, "id513"], [28, "id582"]], "pretty_print_info() (arkouda.pdarray method)": [[28, "arkouda.pdarray.pretty_print_info"], [28, "id705"], [28, "id766"], [28, "id827"], [28, "id888"]], "pretty_print_information() (in module arkouda)": [[28, "arkouda.pretty_print_information"]], "prod() (arkouda.groupby method)": [[28, "arkouda.GroupBy.prod"], [28, "id250"], [28, "id294"], [28, "id338"], [28, "id382"], [94, "arkouda.GroupBy.prod"]], "prod() (arkouda.pdarray method)": [[28, "arkouda.pdarray.prod"], [28, "id706"], [28, "id767"], [28, "id828"], [28, "id889"], [95, "arkouda.pdarray.prod"]], "prod() (in module arkouda)": [[28, "arkouda.prod"], [89, "arkouda.prod"]], "purge_cached_regex_patterns() (arkouda.strings method)": [[28, "arkouda.Strings.purge_cached_regex_patterns"], [28, "id445"], [28, "id514"], [28, "id583"]], "pvalue (arkouda.power_divergenceresult attribute)": [[28, "arkouda.Power_divergenceResult.pvalue"]], "rad2deg() (in module arkouda)": [[28, "arkouda.rad2deg"]], "randint() (in module arkouda)": [[28, "arkouda.randint"], [28, "id911"], [92, "arkouda.randint"]], "random() (arkouda.generator method)": [[28, "arkouda.Generator.random"]], "random_strings_lognormal() (in module arkouda)": [[28, "arkouda.random_strings_lognormal"]], "random_strings_uniform() (in module arkouda)": [[28, "arkouda.random_strings_uniform"]], "read() (in module arkouda)": [[28, "arkouda.read"], [86, "arkouda.read"]], "read_csv() (arkouda.dataframe class method)": [[28, "arkouda.DataFrame.read_csv"], [28, "id131"]], "read_csv() (in module arkouda)": [[28, "arkouda.read_csv"]], "read_hdf() (in module arkouda)": [[28, "arkouda.read_hdf"]], "read_parquet() (in module arkouda)": [[28, "arkouda.read_parquet"]], "read_tagged_data() (in module arkouda)": [[28, "arkouda.read_tagged_data"]], "receive() (in module arkouda)": [[28, "arkouda.receive"]], "receive_dataframe() (in module arkouda)": [[28, "arkouda.receive_dataframe"]], "register() (arkouda.bitvector method)": [[28, "arkouda.BitVector.register"]], "register() (arkouda.categorical method)": [[28, "arkouda.Categorical.register"], [28, "id34"], [28, "id83"]], "register() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.register"], [28, "id132"]], "register() (arkouda.datetime method)": [[28, "arkouda.Datetime.register"], [28, "id179"], [28, "id212"]], "register() (arkouda.groupby method)": [[28, "arkouda.GroupBy.register"], [28, "id251"], [28, "id295"], [28, "id339"], [28, "id383"], [94, "arkouda.GroupBy.register"]], "register() (arkouda.ipv4 method)": [[28, "arkouda.IPv4.register"]], "register() (arkouda.index method)": [[28, "arkouda.Index.register"]], "register() (arkouda.multiindex method)": [[28, "arkouda.MultiIndex.register"]], "register() (arkouda.series method)": [[28, "arkouda.Series.register"]], "register() (arkouda.strings method)": [[28, "arkouda.Strings.register"], [28, "id446"], [28, "id515"], [28, "id584"]], "register() (arkouda.timedelta method)": [[28, "arkouda.Timedelta.register"], [28, "id621"]], "register() (arkouda.pdarray method)": [[28, "arkouda.pdarray.register"], [28, "id707"], [28, "id768"], [28, "id829"], [28, "id890"]], "register_all() (in module arkouda)": [[28, "arkouda.register_all"]], "rename() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.rename"], [28, "id133"]], "reset_categories() (arkouda.categorical method)": [[28, "arkouda.Categorical.reset_categories"], [28, "id35"], [28, "id84"]], "reset_index() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.reset_index"], [28, "id134"]], "reshape() (arkouda.pdarray method)": [[28, "arkouda.pdarray.reshape"], [28, "id708"], [28, "id769"], [28, "id830"], [28, "id891"]], "resolve_scalar_dtype() (in module arkouda)": [[28, "arkouda.resolve_scalar_dtype"]], "restore() (in module arkouda)": [[28, "arkouda.restore"]], "return_validity (arkouda.errormode attribute)": [[28, "arkouda.ErrorMode.return_validity"]], "right_align() (in module arkouda)": [[28, "arkouda.right_align"]], "rotl() (arkouda.pdarray method)": [[28, "arkouda.pdarray.rotl"], [28, "id709"], [28, "id770"], [28, "id831"], [28, "id892"]], "rotl() (in module arkouda)": [[28, "arkouda.rotl"]], "rotr() (arkouda.pdarray method)": [[28, "arkouda.pdarray.rotr"], [28, "id710"], [28, "id771"], [28, "id832"], [28, "id893"]], "rotr() (in module arkouda)": [[28, "arkouda.rotr"]], "round() (in module arkouda)": [[28, "arkouda.round"]], "rpeel() (arkouda.strings method)": [[28, "arkouda.Strings.rpeel"], [28, "id447"], [28, "id516"], [28, "id585"], [103, "arkouda.Strings.rpeel"]], "sample() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.sample"], [28, "id135"]], "save() (arkouda.categorical method)": [[28, "arkouda.Categorical.save"], [28, "id36"], [28, "id85"]], "save() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.save"], [28, "id136"]], "save() (arkouda.index method)": [[28, "arkouda.Index.save"]], "save() (arkouda.strings method)": [[28, "arkouda.Strings.save"], [28, "id448"], [28, "id517"], [28, "id586"]], "save() (arkouda.pdarray method)": [[28, "arkouda.pdarray.save"], [28, "id711"], [28, "id772"], [28, "id833"], [28, "id894"]], "save_all() (in module arkouda)": [[28, "arkouda.save_all"]], "search() (arkouda.strings method)": [[28, "arkouda.Strings.search"], [28, "id449"], [28, "id518"], [28, "id587"], [103, "arkouda.Strings.search"]], "search_intervals() (in module arkouda)": [[28, "arkouda.search_intervals"]], "second (arkouda.datetime property)": [[28, "arkouda.Datetime.second"], [28, "id164"], [28, "id197"]], "seconds (arkouda.timedelta property)": [[28, "arkouda.Timedelta.seconds"], [28, "id610"]], "segments (arkouda.categorical attribute)": [[28, "arkouda.Categorical.segments"], [28, "id1"], [28, "id18"], [28, "id55"], [28, "id6"], [28, "id67"], [91, "arkouda.Categorical.segments"]], "segments (arkouda.groupby attribute)": [[28, "arkouda.GroupBy.segments"], [28, "id223"], [28, "id267"], [28, "id311"], [28, "id355"], [94, "arkouda.GroupBy.segments"]], "set_categories() (arkouda.categorical method)": [[28, "arkouda.Categorical.set_categories"], [28, "id37"], [28, "id86"]], "set_dtype() (arkouda.index method)": [[28, "arkouda.Index.set_dtype"]], "set_dtype() (arkouda.multiindex method)": [[28, "arkouda.MultiIndex.set_dtype"]], "setdiff1d() (in module arkouda)": [[28, "arkouda.setdiff1d"], [101, "arkouda.setdiff1d"]], "setxor1d() (in module arkouda)": [[28, "arkouda.setxor1d"], [101, "arkouda.setxor1d"]], "shape (arkouda.arrayview attribute)": [[28, "arkouda.ArrayView.shape"], [90, "arkouda.ArrayView.shape"]], "shape (arkouda.categorical attribute)": [[28, "arkouda.Categorical.shape"], [28, "id10"], [28, "id59"], [91, "arkouda.Categorical.shape"]], "shape (arkouda.dataframe property)": [[28, "arkouda.DataFrame.shape"], [28, "id106"]], "shape (arkouda.index property)": [[28, "arkouda.Index.shape"]], "shape (arkouda.series property)": [[28, "arkouda.Series.shape"]], "shape (arkouda.strings attribute)": [[28, "arkouda.Strings.shape"], [28, "id403"], [28, "id472"], [28, "id541"]], "shape (arkouda.pdarray attribute)": [[28, "arkouda.pdarray.shape"], [28, "id672"], [28, "id733"], [28, "id794"], [28, "id855"], [97, "arkouda.pdarray.shape"]], "sign() (in module arkouda)": [[28, "arkouda.sign"]], "sin() (in module arkouda)": [[28, "arkouda.sin"], [89, "arkouda.sin"]], "sinh() (in module arkouda)": [[28, "arkouda.sinh"]], "size (arkouda.arrayview attribute)": [[28, "arkouda.ArrayView.size"], [90, "arkouda.ArrayView.size"]], "size (arkouda.categorical attribute)": [[28, "arkouda.Categorical.size"], [28, "id56"], [28, "id7"], [91, "arkouda.Categorical.size"]], "size (arkouda.dataframe property)": [[28, "arkouda.DataFrame.size"], [28, "id107"]], "size (arkouda.groupby attribute)": [[28, "arkouda.GroupBy.size"], [28, "id219"], [28, "id263"], [28, "id307"], [28, "id351"], [94, "arkouda.GroupBy.size"]], "size (arkouda.strings attribute)": [[28, "arkouda.Strings.size"], [28, "id400"], [28, "id469"], [28, "id538"]], "size (arkouda.pdarray attribute)": [[28, "arkouda.pdarray.size"], [28, "id670"], [28, "id731"], [28, "id792"], [28, "id853"], [97, "arkouda.pdarray.size"]], "size() (arkouda.groupby method)": [[28, "id216"], [28, "id252"], [28, "id296"], [28, "id340"], [28, "id384"], [94, "id0"]], "skew() (in module arkouda)": [[28, "arkouda.skew"]], "slice_bits() (arkouda.pdarray method)": [[28, "arkouda.pdarray.slice_bits"], [28, "id712"], [28, "id773"], [28, "id834"], [28, "id895"]], "snapshot() (in module arkouda)": [[28, "arkouda.snapshot"]], "sort() (arkouda.categorical method)": [[28, "arkouda.Categorical.sort"], [28, "id38"], [28, "id87"]], "sort() (in module arkouda)": [[28, "arkouda.sort"]], "sort_index() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.sort_index"], [28, "id137"]], "sort_index() (arkouda.series method)": [[28, "arkouda.Series.sort_index"]], "sort_values() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.sort_values"], [28, "id138"]], "sort_values() (arkouda.series method)": [[28, "arkouda.Series.sort_values"]], "special_objtype (arkouda.bitvector attribute)": [[28, "arkouda.BitVector.special_objType"]], "special_objtype (arkouda.datetime attribute)": [[28, "arkouda.Datetime.special_objType"], [28, "id169"], [28, "id202"]], "special_objtype (arkouda.ipv4 attribute)": [[28, "arkouda.IPv4.special_objType"]], "special_objtype (arkouda.timedelta attribute)": [[28, "arkouda.Timedelta.special_objType"], [28, "id611"]], "split() (arkouda.strings method)": [[28, "arkouda.Strings.split"], [28, "id450"], [28, "id519"], [28, "id588"], [103, "arkouda.Strings.split"]], "sqrt() (in module arkouda)": [[28, "arkouda.sqrt"]], "square() (in module arkouda)": [[28, "arkouda.square"]], "standard_normal() (arkouda.generator method)": [[28, "arkouda.Generator.standard_normal"]], "standard_normal() (in module arkouda)": [[28, "arkouda.standard_normal"], [28, "id912"]], "standardize_categories() (arkouda.categorical class method)": [[28, "arkouda.Categorical.standardize_categories"], [28, "id39"], [28, "id88"]], "startswith() (arkouda.categorical method)": [[28, "arkouda.Categorical.startswith"], [28, "id40"], [28, "id89"], [91, "arkouda.Categorical.startswith"]], "startswith() (arkouda.strings method)": [[28, "arkouda.Strings.startswith"], [28, "id451"], [28, "id520"], [28, "id589"], [103, "arkouda.Strings.startswith"]], "statistic (arkouda.power_divergenceresult attribute)": [[28, "arkouda.Power_divergenceResult.statistic"]], "std() (arkouda.groupby method)": [[28, "arkouda.GroupBy.std"], [28, "id253"], [28, "id297"], [28, "id341"], [28, "id385"], [94, "arkouda.GroupBy.std"]], "std() (arkouda.timedelta method)": [[28, "arkouda.Timedelta.std"], [28, "id622"]], "std() (arkouda.pdarray method)": [[28, "arkouda.pdarray.std"], [28, "id713"], [28, "id774"], [28, "id835"], [28, "id896"], [95, "arkouda.pdarray.std"]], "std() (in module arkouda)": [[28, "arkouda.std"], [89, "arkouda.std"]], "stick() (arkouda.strings method)": [[28, "arkouda.Strings.stick"], [28, "id452"], [28, "id521"], [28, "id590"], [103, "arkouda.Strings.stick"]], "str_ (in module arkouda)": [[28, "arkouda.str_"]], "str_acc (arkouda.series attribute)": [[28, "arkouda.Series.str_acc"]], "str_scalars (in module arkouda)": [[28, "arkouda.str_scalars"]], "strict (arkouda.errormode attribute)": [[28, "arkouda.ErrorMode.strict"]], "string_operators() (in module arkouda)": [[28, "arkouda.string_operators"]], "strip() (arkouda.strings method)": [[28, "arkouda.Strings.strip"], [28, "id453"], [28, "id522"], [28, "id591"]], "sub() (arkouda.strings method)": [[28, "arkouda.Strings.sub"], [28, "id454"], [28, "id523"], [28, "id592"], [103, "arkouda.Strings.sub"]], "subn() (arkouda.strings method)": [[28, "arkouda.Strings.subn"], [28, "id455"], [28, "id524"], [28, "id593"], [103, "arkouda.Strings.subn"]], "sum() (arkouda.datetime method)": [[28, "arkouda.Datetime.sum"], [28, "id180"], [28, "id213"]], "sum() (arkouda.groupby method)": [[28, "arkouda.GroupBy.sum"], [28, "id254"], [28, "id298"], [28, "id342"], [28, "id386"], [94, "arkouda.GroupBy.sum"]], "sum() (arkouda.timedelta method)": [[28, "arkouda.Timedelta.sum"], [28, "id623"]], "sum() (arkouda.pdarray method)": [[28, "arkouda.pdarray.sum"], [28, "id714"], [28, "id775"], [28, "id836"], [28, "id897"], [95, "arkouda.pdarray.sum"]], "sum() (in module arkouda)": [[28, "arkouda.sum"], [89, "arkouda.sum"]], "supported_opeq (arkouda.datetime attribute)": [[28, "arkouda.Datetime.supported_opeq"], [28, "id170"], [28, "id203"]], "supported_opeq (arkouda.timedelta attribute)": [[28, "arkouda.Timedelta.supported_opeq"], [28, "id612"]], "supported_with_datetime (arkouda.datetime attribute)": [[28, "arkouda.Datetime.supported_with_datetime"], [28, "id171"], [28, "id204"]], "supported_with_datetime (arkouda.timedelta attribute)": [[28, "arkouda.Timedelta.supported_with_datetime"], [28, "id613"]], "supported_with_pdarray (arkouda.datetime attribute)": [[28, "arkouda.Datetime.supported_with_pdarray"], [28, "id172"], [28, "id205"]], "supported_with_pdarray (arkouda.timedelta attribute)": [[28, "arkouda.Timedelta.supported_with_pdarray"], [28, "id614"]], "supported_with_r_datetime (arkouda.datetime attribute)": [[28, "arkouda.Datetime.supported_with_r_datetime"], [28, "id173"], [28, "id206"]], "supported_with_r_datetime (arkouda.timedelta attribute)": [[28, "arkouda.Timedelta.supported_with_r_datetime"], [28, "id615"]], "supported_with_r_pdarray (arkouda.datetime attribute)": [[28, "arkouda.Datetime.supported_with_r_pdarray"], [28, "id174"], [28, "id207"]], "supported_with_r_pdarray (arkouda.timedelta attribute)": [[28, "arkouda.Timedelta.supported_with_r_pdarray"], [28, "id616"]], "supported_with_r_timedelta (arkouda.datetime attribute)": [[28, "arkouda.Datetime.supported_with_r_timedelta"], [28, "id175"], [28, "id208"]], "supported_with_r_timedelta (arkouda.timedelta attribute)": [[28, "arkouda.Timedelta.supported_with_r_timedelta"], [28, "id617"]], "supported_with_timedelta (arkouda.datetime attribute)": [[28, "arkouda.Datetime.supported_with_timedelta"], [28, "id176"], [28, "id209"]], "supported_with_timedelta (arkouda.timedelta attribute)": [[28, "arkouda.Timedelta.supported_with_timedelta"], [28, "id618"]], "tail() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.tail"], [28, "id139"]], "tail() (arkouda.series method)": [[28, "arkouda.Series.tail"]], "tan() (in module arkouda)": [[28, "arkouda.tan"]], "tanh() (in module arkouda)": [[28, "arkouda.tanh"]], "timedelta_range() (in module arkouda)": [[28, "arkouda.timedelta_range"], [28, "id913"]], "title() (arkouda.strings method)": [[28, "arkouda.Strings.title"], [28, "id456"], [28, "id525"], [28, "id594"]], "to_csv() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.to_csv"], [28, "id140"]], "to_csv() (arkouda.index method)": [[28, "arkouda.Index.to_csv"]], "to_csv() (arkouda.strings method)": [[28, "arkouda.Strings.to_csv"], [28, "id457"], [28, "id526"], [28, "id595"]], "to_csv() (arkouda.pdarray method)": [[28, "arkouda.pdarray.to_csv"], [28, "id715"], [28, "id776"], [28, "id837"], [28, "id898"]], "to_csv() (in module arkouda)": [[28, "arkouda.to_csv"]], "to_cuda() (arkouda.pdarray method)": [[28, "arkouda.pdarray.to_cuda"], [28, "id718"], [28, "id779"], [28, "id840"], [28, "id901"]], "to_dataframe() (arkouda.series method)": [[28, "arkouda.Series.to_dataframe"]], "to_dict() (arkouda.index method)": [[28, "arkouda.Index.to_dict"]], "to_dict() (arkouda.multiindex method)": [[28, "arkouda.MultiIndex.to_dict"]], "to_hdf() (arkouda.arrayview method)": [[28, "arkouda.ArrayView.to_hdf"]], "to_hdf() (arkouda.categorical method)": [[28, "arkouda.Categorical.to_hdf"], [28, "id41"], [28, "id90"]], "to_hdf() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.to_hdf"], [28, "id141"]], "to_hdf() (arkouda.groupby method)": [[28, "arkouda.GroupBy.to_hdf"], [28, "id255"], [28, "id299"], [28, "id343"], [28, "id387"], [94, "arkouda.GroupBy.to_hdf"]], "to_hdf() (arkouda.ipv4 method)": [[28, "arkouda.IPv4.to_hdf"]], "to_hdf() (arkouda.index method)": [[28, "arkouda.Index.to_hdf"]], "to_hdf() (arkouda.multiindex method)": [[28, "arkouda.MultiIndex.to_hdf"]], "to_hdf() (arkouda.strings method)": [[28, "arkouda.Strings.to_hdf"], [28, "id458"], [28, "id527"], [28, "id596"]], "to_hdf() (arkouda.pdarray method)": [[28, "arkouda.pdarray.to_hdf"], [28, "id719"], [28, "id780"], [28, "id841"], [28, "id902"]], "to_hdf() (in module arkouda)": [[28, "arkouda.to_hdf"]], "to_list() (arkouda.arrayview method)": [[28, "arkouda.ArrayView.to_list"]], "to_list() (arkouda.bitvector method)": [[28, "arkouda.BitVector.to_list"]], "to_list() (arkouda.categorical method)": [[28, "arkouda.Categorical.to_list"], [28, "id42"], [28, "id91"]], "to_list() (arkouda.ipv4 method)": [[28, "arkouda.IPv4.to_list"]], "to_list() (arkouda.index method)": [[28, "arkouda.Index.to_list"]], "to_list() (arkouda.multiindex method)": [[28, "arkouda.MultiIndex.to_list"]], "to_list() (arkouda.series method)": [[28, "arkouda.Series.to_list"]], "to_list() (arkouda.strings method)": [[28, "arkouda.Strings.to_list"], [28, "id459"], [28, "id528"], [28, "id597"]], "to_list() (arkouda.pdarray method)": [[28, "arkouda.pdarray.to_list"], [28, "id720"], [28, "id781"], [28, "id842"], [28, "id903"]], "to_markdown() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.to_markdown"], [28, "id142"]], "to_markdown() (arkouda.series method)": [[28, "arkouda.Series.to_markdown"]], "to_ndarray() (arkouda.arrayview method)": [[28, "arkouda.ArrayView.to_ndarray"]], "to_ndarray() (arkouda.bitvector method)": [[28, "arkouda.BitVector.to_ndarray"]], "to_ndarray() (arkouda.categorical method)": [[28, "arkouda.Categorical.to_ndarray"], [28, "id43"], [28, "id92"]], "to_ndarray() (arkouda.ipv4 method)": [[28, "arkouda.IPv4.to_ndarray"]], "to_ndarray() (arkouda.index method)": [[28, "arkouda.Index.to_ndarray"]], "to_ndarray() (arkouda.multiindex method)": [[28, "arkouda.MultiIndex.to_ndarray"]], "to_ndarray() (arkouda.strings method)": [[28, "arkouda.Strings.to_ndarray"], [28, "id460"], [28, "id529"], [28, "id598"]], "to_ndarray() (arkouda.pdarray method)": [[28, "arkouda.pdarray.to_ndarray"], [28, "id721"], [28, "id782"], [28, "id843"], [28, "id904"]], "to_pandas() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.to_pandas"], [28, "id143"]], "to_pandas() (arkouda.datetime method)": [[28, "arkouda.Datetime.to_pandas"], [28, "id181"], [28, "id214"]], "to_pandas() (arkouda.index method)": [[28, "arkouda.Index.to_pandas"]], "to_pandas() (arkouda.multiindex method)": [[28, "arkouda.MultiIndex.to_pandas"]], "to_pandas() (arkouda.series method)": [[28, "arkouda.Series.to_pandas"]], "to_pandas() (arkouda.timedelta method)": [[28, "arkouda.Timedelta.to_pandas"], [28, "id624"]], "to_parquet() (arkouda.categorical method)": [[28, "arkouda.Categorical.to_parquet"], [28, "id44"], [28, "id93"]], "to_parquet() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.to_parquet"], [28, "id144"]], "to_parquet() (arkouda.index method)": [[28, "arkouda.Index.to_parquet"]], "to_parquet() (arkouda.strings method)": [[28, "arkouda.Strings.to_parquet"], [28, "id461"], [28, "id530"], [28, "id599"]], "to_parquet() (arkouda.pdarray method)": [[28, "arkouda.pdarray.to_parquet"], [28, "id722"], [28, "id783"], [28, "id844"], [28, "id905"]], "to_parquet() (in module arkouda)": [[28, "arkouda.to_parquet"]], "to_strings() (arkouda.categorical method)": [[28, "arkouda.Categorical.to_strings"], [28, "id45"], [28, "id94"]], "topn() (arkouda.series method)": [[28, "arkouda.Series.topn"]], "total_seconds() (arkouda.timedelta method)": [[28, "arkouda.Timedelta.total_seconds"], [28, "id625"]], "transfer() (arkouda.categorical method)": [[28, "arkouda.Categorical.transfer"], [28, "id46"], [28, "id95"]], "transfer() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.transfer"], [28, "id145"]], "transfer() (arkouda.strings method)": [[28, "arkouda.Strings.transfer"], [28, "id462"], [28, "id531"], [28, "id600"]], "transfer() (arkouda.pdarray method)": [[28, "arkouda.pdarray.transfer"], [28, "id723"], [28, "id784"], [28, "id845"], [28, "id906"]], "translate_np_dtype() (in module arkouda)": [[28, "arkouda.translate_np_dtype"]], "trunc() (in module arkouda)": [[28, "arkouda.trunc"]], "uint16 (in module arkouda)": [[28, "arkouda.uint16"]], "uint32 (in module arkouda)": [[28, "arkouda.uint32"]], "uint64 (in module arkouda)": [[28, "arkouda.uint64"]], "uint8 (in module arkouda)": [[28, "arkouda.uint8"]], "uniform() (arkouda.generator method)": [[28, "arkouda.Generator.uniform"]], "uniform() (in module arkouda)": [[28, "arkouda.uniform"], [28, "id914"]], "union1d() (in module arkouda)": [[28, "arkouda.union1d"], [101, "arkouda.union1d"]], "unique() (arkouda.categorical method)": [[28, "arkouda.Categorical.unique"], [28, "id47"], [28, "id96"]], "unique() (arkouda.groupby method)": [[28, "arkouda.GroupBy.unique"], [28, "id256"], [28, "id300"], [28, "id344"], [28, "id388"], [94, "arkouda.GroupBy.unique"]], "unique() (in module arkouda)": [[28, "arkouda.unique"], [28, "id915"], [28, "id916"], [101, "arkouda.unique"]], "unique_keys (arkouda.groupby attribute)": [[28, "arkouda.GroupBy.unique_keys"], [28, "id221"], [28, "id265"], [28, "id309"], [28, "id353"], [94, "arkouda.GroupBy.unique_keys"]], "unregister() (arkouda.categorical method)": [[28, "arkouda.Categorical.unregister"], [28, "id48"], [28, "id97"]], "unregister() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.unregister"], [28, "id146"]], "unregister() (arkouda.datetime method)": [[28, "arkouda.Datetime.unregister"], [28, "id182"], [28, "id215"]], "unregister() (arkouda.groupby method)": [[28, "arkouda.GroupBy.unregister"], [28, "id257"], [28, "id301"], [28, "id345"], [28, "id389"], [94, "arkouda.GroupBy.unregister"]], "unregister() (arkouda.index method)": [[28, "arkouda.Index.unregister"]], "unregister() (arkouda.multiindex method)": [[28, "arkouda.MultiIndex.unregister"]], "unregister() (arkouda.series method)": [[28, "arkouda.Series.unregister"]], "unregister() (arkouda.strings method)": [[28, "arkouda.Strings.unregister"], [28, "id463"], [28, "id532"], [28, "id601"]], "unregister() (arkouda.timedelta method)": [[28, "arkouda.Timedelta.unregister"], [28, "id626"]], "unregister() (arkouda.pdarray method)": [[28, "arkouda.pdarray.unregister"], [28, "id724"], [28, "id785"], [28, "id846"], [28, "id907"]], "unregister() (in module arkouda)": [[28, "arkouda.unregister"]], "unregister_all() (in module arkouda)": [[28, "arkouda.unregister_all"]], "unregister_categorical_by_name() (arkouda.categorical static method)": [[28, "arkouda.Categorical.unregister_categorical_by_name"], [28, "id49"], [28, "id98"]], "unregister_dataframe_by_name() (arkouda.dataframe static method)": [[28, "arkouda.DataFrame.unregister_dataframe_by_name"], [28, "id147"]], "unregister_groupby_by_name() (arkouda.groupby static method)": [[28, "arkouda.GroupBy.unregister_groupby_by_name"], [28, "id258"], [28, "id302"], [28, "id346"], [28, "id390"], [94, "arkouda.GroupBy.unregister_groupby_by_name"]], "unregister_pdarray_by_name() (in module arkouda)": [[28, "arkouda.unregister_pdarray_by_name"]], "unregister_strings_by_name() (arkouda.strings static method)": [[28, "arkouda.Strings.unregister_strings_by_name"], [28, "id464"], [28, "id533"], [28, "id602"]], "unsqueeze() (in module arkouda)": [[28, "arkouda.unsqueeze"]], "update_hdf() (arkouda.arrayview method)": [[28, "arkouda.ArrayView.update_hdf"]], "update_hdf() (arkouda.categorical method)": [[28, "arkouda.Categorical.update_hdf"], [28, "id50"], [28, "id99"]], "update_hdf() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.update_hdf"], [28, "id148"]], "update_hdf() (arkouda.groupby method)": [[28, "arkouda.GroupBy.update_hdf"], [28, "id259"], [28, "id303"], [28, "id347"], [28, "id391"]], "update_hdf() (arkouda.ipv4 method)": [[28, "arkouda.IPv4.update_hdf"]], "update_hdf() (arkouda.index method)": [[28, "arkouda.Index.update_hdf"]], "update_hdf() (arkouda.multiindex method)": [[28, "arkouda.MultiIndex.update_hdf"]], "update_hdf() (arkouda.strings method)": [[28, "arkouda.Strings.update_hdf"], [28, "id465"], [28, "id534"], [28, "id603"]], "update_hdf() (arkouda.pdarray method)": [[28, "arkouda.pdarray.update_hdf"], [28, "id725"], [28, "id786"], [28, "id847"], [28, "id908"]], "update_hdf() (in module arkouda)": [[28, "arkouda.update_hdf"]], "update_nrows() (arkouda.dataframe method)": [[28, "arkouda.DataFrame.update_nrows"], [28, "id149"]], "upper() (arkouda.strings method)": [[28, "arkouda.Strings.upper"], [28, "id466"], [28, "id535"], [28, "id604"]], "validate_key() (arkouda.series method)": [[28, "arkouda.Series.validate_key"]], "validate_val() (arkouda.series method)": [[28, "arkouda.Series.validate_val"]], "value_counts() (arkouda.series method)": [[28, "arkouda.Series.value_counts"]], "value_counts() (arkouda.pdarray method)": [[28, "arkouda.pdarray.value_counts"], [28, "id726"], [28, "id787"], [28, "id848"], [28, "id909"]], "value_counts() (in module arkouda)": [[28, "arkouda.value_counts"], [95, "arkouda.value_counts"]], "values (arkouda.diffaggregate attribute)": [[28, "arkouda.DiffAggregate.values"]], "var() (arkouda.groupby method)": [[28, "arkouda.GroupBy.var"], [28, "id260"], [28, "id304"], [28, "id348"], [28, "id392"], [94, "arkouda.GroupBy.var"]], "var() (arkouda.pdarray method)": [[28, "arkouda.pdarray.var"], [28, "id727"], [28, "id788"], [28, "id849"], [28, "id910"], [95, "arkouda.pdarray.var"]], "var() (in module arkouda)": [[28, "arkouda.var"], [89, "arkouda.var"]], "week (arkouda.datetime property)": [[28, "arkouda.Datetime.week"], [28, "id165"], [28, "id198"]], "weekday (arkouda.datetime property)": [[28, "arkouda.Datetime.weekday"], [28, "id166"], [28, "id199"]], "weekofyear (arkouda.datetime property)": [[28, "arkouda.Datetime.weekofyear"], [28, "id167"], [28, "id200"]], "where() (in module arkouda)": [[28, "arkouda.where"], [28, "id917"], [28, "id918"], [89, "arkouda.where"]], "write_log() (in module arkouda)": [[28, "arkouda.write_log"]], "xlogy() (in module arkouda)": [[28, "arkouda.xlogy"]], "year (arkouda.datetime property)": [[28, "arkouda.Datetime.year"], [28, "id168"], [28, "id201"]], "zero_up() (in module arkouda)": [[28, "arkouda.zero_up"]], "zeros() (in module arkouda)": [[28, "arkouda.zeros"], [28, "id919"], [28, "id920"], [92, "arkouda.zeros"]], "zeros_like() (in module arkouda)": [[28, "arkouda.zeros_like"], [92, "arkouda.zeros_like"]], "index (class in arkouda.index)": [[29, "arkouda.index.Index"]], "multiindex (class in arkouda.index)": [[29, "arkouda.index.MultiIndex"]], "argsort() (arkouda.index.index method)": [[29, "arkouda.index.Index.argsort"]], "argsort() (arkouda.index.multiindex method)": [[29, "arkouda.index.MultiIndex.argsort"]], "arkouda.index": [[29, "module-arkouda.index"]], "concat() (arkouda.index.index method)": [[29, "arkouda.index.Index.concat"]], "concat() (arkouda.index.multiindex method)": [[29, "arkouda.index.MultiIndex.concat"]], "factory() (arkouda.index.index static method)": [[29, "arkouda.index.Index.factory"]], "from_return_msg() (arkouda.index.index class method)": [[29, "arkouda.index.Index.from_return_msg"]], "index (arkouda.index.index property)": [[29, "arkouda.index.Index.index"]], "index (arkouda.index.multiindex property)": [[29, "arkouda.index.MultiIndex.index"]], "is_registered() (arkouda.index.index method)": [[29, "arkouda.index.Index.is_registered"]], "is_registered() (arkouda.index.multiindex method)": [[29, "arkouda.index.MultiIndex.is_registered"]], "is_unique (arkouda.index.index property)": [[29, "arkouda.index.Index.is_unique"]], "lookup() (arkouda.index.index method)": [[29, "arkouda.index.Index.lookup"]], "lookup() (arkouda.index.multiindex method)": [[29, "arkouda.index.MultiIndex.lookup"]], "map() (arkouda.index.index method)": [[29, "arkouda.index.Index.map"]], "memory_usage() (arkouda.index.index method)": [[29, "arkouda.index.Index.memory_usage"]], "memory_usage() (arkouda.index.multiindex method)": [[29, "arkouda.index.MultiIndex.memory_usage"]], "objtype (arkouda.index.index attribute)": [[29, "arkouda.index.Index.objType"]], "objtype (arkouda.index.multiindex attribute)": [[29, "arkouda.index.MultiIndex.objType"]], "register() (arkouda.index.index method)": [[29, "arkouda.index.Index.register"]], "register() (arkouda.index.multiindex method)": [[29, "arkouda.index.MultiIndex.register"]], "save() (arkouda.index.index method)": [[29, "arkouda.index.Index.save"]], "set_dtype() (arkouda.index.index method)": [[29, "arkouda.index.Index.set_dtype"]], "set_dtype() (arkouda.index.multiindex method)": [[29, "arkouda.index.MultiIndex.set_dtype"]], "shape (arkouda.index.index property)": [[29, "arkouda.index.Index.shape"]], "to_csv() (arkouda.index.index method)": [[29, "arkouda.index.Index.to_csv"]], "to_dict() (arkouda.index.index method)": [[29, "arkouda.index.Index.to_dict"]], "to_dict() (arkouda.index.multiindex method)": [[29, "arkouda.index.MultiIndex.to_dict"]], "to_hdf() (arkouda.index.index method)": [[29, "arkouda.index.Index.to_hdf"]], "to_hdf() (arkouda.index.multiindex method)": [[29, "arkouda.index.MultiIndex.to_hdf"]], "to_list() (arkouda.index.index method)": [[29, "arkouda.index.Index.to_list"]], "to_list() (arkouda.index.multiindex method)": [[29, "arkouda.index.MultiIndex.to_list"]], "to_ndarray() (arkouda.index.index method)": [[29, "arkouda.index.Index.to_ndarray"]], "to_ndarray() (arkouda.index.multiindex method)": [[29, "arkouda.index.MultiIndex.to_ndarray"]], "to_pandas() (arkouda.index.index method)": [[29, "arkouda.index.Index.to_pandas"]], "to_pandas() (arkouda.index.multiindex method)": [[29, "arkouda.index.MultiIndex.to_pandas"]], "to_parquet() (arkouda.index.index method)": [[29, "arkouda.index.Index.to_parquet"]], "unregister() (arkouda.index.index method)": [[29, "arkouda.index.Index.unregister"]], "unregister() (arkouda.index.multiindex method)": [[29, "arkouda.index.MultiIndex.unregister"]], "update_hdf() (arkouda.index.index method)": [[29, "arkouda.index.Index.update_hdf"]], "update_hdf() (arkouda.index.multiindex method)": [[29, "arkouda.index.MultiIndex.update_hdf"]], "allsymbols (in module arkouda.infoclass)": [[30, "arkouda.infoclass.AllSymbols"]], "registeredsymbols (in module arkouda.infoclass)": [[30, "arkouda.infoclass.RegisteredSymbols"]], "arkouda.infoclass": [[30, "module-arkouda.infoclass"]], "information() (in module arkouda.infoclass)": [[30, "arkouda.infoclass.information"]], "list_registry() (in module arkouda.infoclass)": [[30, "arkouda.infoclass.list_registry"]], "list_symbol_table() (in module arkouda.infoclass)": [[30, "arkouda.infoclass.list_symbol_table"]], "pretty_print_information() (in module arkouda.infoclass)": [[30, "arkouda.infoclass.pretty_print_information"]], "arkouda.io": [[31, "module-arkouda.io"]], "export() (in module arkouda.io)": [[31, "arkouda.io.export"]], "get_columns() (in module arkouda.io)": [[31, "arkouda.io.get_columns"]], "get_datasets() (in module arkouda.io)": [[31, "arkouda.io.get_datasets"]], "get_filetype() (in module arkouda.io)": [[31, "arkouda.io.get_filetype"]], "get_null_indices() (in module arkouda.io)": [[31, "arkouda.io.get_null_indices"]], "import_data() (in module arkouda.io)": [[31, "arkouda.io.import_data"]], "load() (in module arkouda.io)": [[31, "arkouda.io.load"]], "load_all() (in module arkouda.io)": [[31, "arkouda.io.load_all"]], "ls() (in module arkouda.io)": [[31, "arkouda.io.ls"]], "ls_csv() (in module arkouda.io)": [[31, "arkouda.io.ls_csv"]], "read() (in module arkouda.io)": [[31, "arkouda.io.read"]], "read_csv() (in module arkouda.io)": [[31, "arkouda.io.read_csv"]], "read_hdf() (in module arkouda.io)": [[31, "arkouda.io.read_hdf"]], "read_parquet() (in module arkouda.io)": [[31, "arkouda.io.read_parquet"]], "read_tagged_data() (in module arkouda.io)": [[31, "arkouda.io.read_tagged_data"]], "receive() (in module arkouda.io)": [[31, "arkouda.io.receive"]], "receive_dataframe() (in module arkouda.io)": [[31, "arkouda.io.receive_dataframe"]], "restore() (in module arkouda.io)": [[31, "arkouda.io.restore"]], "save_all() (in module arkouda.io)": [[31, "arkouda.io.save_all"]], "snapshot() (in module arkouda.io)": [[31, "arkouda.io.snapshot"]], "to_csv() (in module arkouda.io)": [[31, "arkouda.io.to_csv"]], "to_hdf() (in module arkouda.io)": [[31, "arkouda.io.to_hdf"]], "to_parquet() (in module arkouda.io)": [[31, "arkouda.io.to_parquet"]], "update_hdf() (in module arkouda.io)": [[31, "arkouda.io.update_hdf"]], "arkouda.io_util": [[32, "module-arkouda.io_util"]], "delimited_file_to_dict() (in module arkouda.io_util)": [[32, "arkouda.io_util.delimited_file_to_dict"]], "dict_to_delimited_file() (in module arkouda.io_util)": [[32, "arkouda.io_util.dict_to_delimited_file"]], "get_directory() (in module arkouda.io_util)": [[32, "arkouda.io_util.get_directory"]], "write_line_to_file() (in module arkouda.io_util)": [[32, "arkouda.io_util.write_line_to_file"]], "arkouda.join": [[33, "module-arkouda.join"]], "compute_join_size() (in module arkouda.join)": [[33, "arkouda.join.compute_join_size"]], "gen_ranges() (in module arkouda.join)": [[33, "arkouda.join.gen_ranges"]], "join_on_eq_with_dt() (in module arkouda.join)": [[33, "arkouda.join.join_on_eq_with_dt"]], "critical (arkouda.logger.loglevel attribute)": [[34, "arkouda.logger.LogLevel.CRITICAL"]], "debug (arkouda.logger.loglevel attribute)": [[34, "arkouda.logger.LogLevel.DEBUG"]], "error (arkouda.logger.loglevel attribute)": [[34, "arkouda.logger.LogLevel.ERROR"]], "info (arkouda.logger.loglevel attribute)": [[34, "arkouda.logger.LogLevel.INFO"]], "loglevel (class in arkouda.logger)": [[34, "arkouda.logger.LogLevel"]], "warn (arkouda.logger.loglevel attribute)": [[34, "arkouda.logger.LogLevel.WARN"]], "arkouda.logger": [[34, "module-arkouda.logger"]], "disableverbose() (in module arkouda.logger)": [[34, "arkouda.logger.disableVerbose"]], "enableverbose() (in module arkouda.logger)": [[34, "arkouda.logger.enableVerbose"]], "write_log() (in module arkouda.logger)": [[34, "arkouda.logger.write_log"]], "match (class in arkouda.match)": [[35, "arkouda.match.Match"]], "arkouda.match": [[35, "module-arkouda.match"]], "end() (arkouda.match.match method)": [[35, "arkouda.match.Match.end"], [103, "arkouda.match.Match.end"]], "find_matches() (arkouda.match.match method)": [[35, "arkouda.match.Match.find_matches"], [103, "arkouda.match.Match.find_matches"]], "group() (arkouda.match.match method)": [[35, "arkouda.match.Match.group"], [103, "arkouda.match.Match.group"]], "match_type() (arkouda.match.match method)": [[35, "arkouda.match.Match.match_type"], [103, "arkouda.match.Match.match_type"]], "matched() (arkouda.match.match method)": [[35, "arkouda.match.Match.matched"], [103, "arkouda.match.Match.matched"]], "start() (arkouda.match.match method)": [[35, "arkouda.match.Match.start"], [103, "arkouda.match.Match.start"]], "locationsinfo (arkouda.matcher.matcher attribute)": [[36, "arkouda.matcher.Matcher.LocationsInfo"]], "matcher (class in arkouda.matcher)": [[36, "arkouda.matcher.Matcher"]], "arkouda.matcher": [[36, "module-arkouda.matcher"]], "find_locations() (arkouda.matcher.matcher method)": [[36, "arkouda.matcher.Matcher.find_locations"]], "findall() (arkouda.matcher.matcher method)": [[36, "arkouda.matcher.Matcher.findall"]], "get_match() (arkouda.matcher.matcher method)": [[36, "arkouda.matcher.Matcher.get_match"]], "split() (arkouda.matcher.matcher method)": [[36, "arkouda.matcher.Matcher.split"]], "sub() (arkouda.matcher.matcher method)": [[36, "arkouda.matcher.Matcher.sub"]], "errormode (class in arkouda.numeric)": [[37, "arkouda.numeric.ErrorMode"]], "abs() (in module arkouda.numeric)": [[37, "arkouda.numeric.abs"]], "arccos() (in module arkouda.numeric)": [[37, "arkouda.numeric.arccos"]], "arccosh() (in module arkouda.numeric)": [[37, "arkouda.numeric.arccosh"]], "arcsin() (in module arkouda.numeric)": [[37, "arkouda.numeric.arcsin"]], "arcsinh() (in module arkouda.numeric)": [[37, "arkouda.numeric.arcsinh"]], "arctan() (in module arkouda.numeric)": [[37, "arkouda.numeric.arctan"]], "arctan2() (in module arkouda.numeric)": [[37, "arkouda.numeric.arctan2"]], "arctanh() (in module arkouda.numeric)": [[37, "arkouda.numeric.arctanh"]], "arkouda.numeric": [[37, "module-arkouda.numeric"]], "cast() (in module arkouda.numeric)": [[37, "arkouda.numeric.cast"]], "ceil() (in module arkouda.numeric)": [[37, "arkouda.numeric.ceil"]], "cos() (in module arkouda.numeric)": [[37, "arkouda.numeric.cos"]], "cosh() (in module arkouda.numeric)": [[37, "arkouda.numeric.cosh"]], "cumprod() (in module arkouda.numeric)": [[37, "arkouda.numeric.cumprod"]], "cumsum() (in module arkouda.numeric)": [[37, "arkouda.numeric.cumsum"]], "deg2rad() (in module arkouda.numeric)": [[37, "arkouda.numeric.deg2rad"]], "exp() (in module arkouda.numeric)": [[37, "arkouda.numeric.exp"]], "expm1() (in module arkouda.numeric)": [[37, "arkouda.numeric.expm1"]], "floor() (in module arkouda.numeric)": [[37, "arkouda.numeric.floor"]], "hash() (in module arkouda.numeric)": [[37, "arkouda.numeric.hash"]], "histogram() (in module arkouda.numeric)": [[37, "arkouda.numeric.histogram"]], "histogram2d() (in module arkouda.numeric)": [[37, "arkouda.numeric.histogram2d"]], "histogramdd() (in module arkouda.numeric)": [[37, "arkouda.numeric.histogramdd"]], "ignore (arkouda.numeric.errormode attribute)": [[37, "arkouda.numeric.ErrorMode.ignore"]], "isfinite() (in module arkouda.numeric)": [[37, "arkouda.numeric.isfinite"]], "isinf() (in module arkouda.numeric)": [[37, "arkouda.numeric.isinf"]], "isnan() (in module arkouda.numeric)": [[37, "arkouda.numeric.isnan"]], "log() (in module arkouda.numeric)": [[37, "arkouda.numeric.log"]], "log10() (in module arkouda.numeric)": [[37, "arkouda.numeric.log10"]], "log1p() (in module arkouda.numeric)": [[37, "arkouda.numeric.log1p"]], "log2() (in module arkouda.numeric)": [[37, "arkouda.numeric.log2"]], "rad2deg() (in module arkouda.numeric)": [[37, "arkouda.numeric.rad2deg"]], "return_validity (arkouda.numeric.errormode attribute)": [[37, "arkouda.numeric.ErrorMode.return_validity"]], "round() (in module arkouda.numeric)": [[37, "arkouda.numeric.round"]], "sign() (in module arkouda.numeric)": [[37, "arkouda.numeric.sign"]], "sin() (in module arkouda.numeric)": [[37, "arkouda.numeric.sin"]], "sinh() (in module arkouda.numeric)": [[37, "arkouda.numeric.sinh"]], "square() (in module arkouda.numeric)": [[37, "arkouda.numeric.square"]], "strict (arkouda.numeric.errormode attribute)": [[37, "arkouda.numeric.ErrorMode.strict"]], "tan() (in module arkouda.numeric)": [[37, "arkouda.numeric.tan"]], "tanh() (in module arkouda.numeric)": [[37, "arkouda.numeric.tanh"]], "trunc() (in module arkouda.numeric)": [[37, "arkouda.numeric.trunc"]], "value_counts() (in module arkouda.numeric)": [[37, "arkouda.numeric.value_counts"]], "where() (in module arkouda.numeric)": [[37, "arkouda.numeric.where"]], "arkouda.numpy.char": [[38, "module-arkouda.numpy.char"]], "arkouda.numpy": [[39, "module-arkouda.numpy"]], "binops (arkouda.pdarrayclass.pdarray attribute)": [[40, "arkouda.pdarrayclass.pdarray.BinOps"]], "opeqops (arkouda.pdarrayclass.pdarray attribute)": [[40, "arkouda.pdarrayclass.pdarray.OpEqOps"]], "all() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.all"]], "all() (in module arkouda.pdarrayclass)": [[40, "arkouda.pdarrayclass.all"]], "any() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.any"]], "any() (in module arkouda.pdarrayclass)": [[40, "arkouda.pdarrayclass.any"]], "argmax() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.argmax"]], "argmax() (in module arkouda.pdarrayclass)": [[40, "arkouda.pdarrayclass.argmax"]], "argmaxk() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.argmaxk"]], "argmaxk() (in module arkouda.pdarrayclass)": [[40, "arkouda.pdarrayclass.argmaxk"]], "argmin() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.argmin"]], "argmin() (in module arkouda.pdarrayclass)": [[40, "arkouda.pdarrayclass.argmin"]], "argmink() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.argmink"]], "argmink() (in module arkouda.pdarrayclass)": [[40, "arkouda.pdarrayclass.argmink"]], "arkouda.pdarrayclass": [[40, "module-arkouda.pdarrayclass"]], "astype() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.astype"]], "attach() (arkouda.pdarrayclass.pdarray static method)": [[40, "arkouda.pdarrayclass.pdarray.attach"]], "attach_pdarray() (in module arkouda.pdarrayclass)": [[40, "arkouda.pdarrayclass.attach_pdarray"]], "bigint_to_uint_arrays() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.bigint_to_uint_arrays"]], "broadcast_to_shape() (in module arkouda.pdarrayclass)": [[40, "arkouda.pdarrayclass.broadcast_to_shape"]], "clear() (in module arkouda.pdarrayclass)": [[40, "arkouda.pdarrayclass.clear"]], "clz() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.clz"]], "clz() (in module arkouda.pdarrayclass)": [[40, "arkouda.pdarrayclass.clz"]], "corr() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.corr"]], "corr() (in module arkouda.pdarrayclass)": [[40, "arkouda.pdarrayclass.corr"]], "cov() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.cov"]], "cov() (in module arkouda.pdarrayclass)": [[40, "arkouda.pdarrayclass.cov"]], "ctz() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.ctz"]], "ctz() (in module arkouda.pdarrayclass)": [[40, "arkouda.pdarrayclass.ctz"]], "divmod() (in module arkouda.pdarrayclass)": [[40, "arkouda.pdarrayclass.divmod"]], "dot() (in module arkouda.pdarrayclass)": [[40, "arkouda.pdarrayclass.dot"]], "dtype (arkouda.pdarrayclass.pdarray attribute)": [[40, "arkouda.pdarrayclass.pdarray.dtype"]], "fill() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.fill"]], "fmod() (in module arkouda.pdarrayclass)": [[40, "arkouda.pdarrayclass.fmod"]], "format_other() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.format_other"]], "info() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.info"]], "is_registered() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.is_registered"]], "is_sorted() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.is_sorted"]], "is_sorted() (in module arkouda.pdarrayclass)": [[40, "arkouda.pdarrayclass.is_sorted"]], "itemsize (arkouda.pdarrayclass.pdarray attribute)": [[40, "arkouda.pdarrayclass.pdarray.itemsize"]], "max() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.max"]], "max() (in module arkouda.pdarrayclass)": [[40, "arkouda.pdarrayclass.max"]], "max_bits (arkouda.pdarrayclass.pdarray property)": [[40, "arkouda.pdarrayclass.pdarray.max_bits"]], "maxk() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.maxk"]], "maxk() (in module arkouda.pdarrayclass)": [[40, "arkouda.pdarrayclass.maxk"]], "mean() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.mean"]], "mean() (in module arkouda.pdarrayclass)": [[40, "arkouda.pdarrayclass.mean"]], "min() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.min"]], "min() (in module arkouda.pdarrayclass)": [[40, "arkouda.pdarrayclass.min"]], "mink() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.mink"]], "mink() (in module arkouda.pdarrayclass)": [[40, "arkouda.pdarrayclass.mink"]], "mod() (in module arkouda.pdarrayclass)": [[40, "arkouda.pdarrayclass.mod"]], "name (arkouda.pdarrayclass.pdarray attribute)": [[40, "arkouda.pdarrayclass.pdarray.name"]], "nbytes (arkouda.pdarrayclass.pdarray property)": [[40, "arkouda.pdarrayclass.pdarray.nbytes"]], "ndim (arkouda.pdarrayclass.pdarray attribute)": [[40, "arkouda.pdarrayclass.pdarray.ndim"]], "objtype (arkouda.pdarrayclass.pdarray attribute)": [[40, "arkouda.pdarrayclass.pdarray.objType"]], "opeq() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.opeq"]], "parity() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.parity"]], "parity() (in module arkouda.pdarrayclass)": [[40, "arkouda.pdarrayclass.parity"]], "pdarray (class in arkouda.pdarrayclass)": [[40, "arkouda.pdarrayclass.pdarray"]], "popcount() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.popcount"]], "popcount() (in module arkouda.pdarrayclass)": [[40, "arkouda.pdarrayclass.popcount"]], "power() (in module arkouda.pdarrayclass)": [[40, "arkouda.pdarrayclass.power"]], "pretty_print_info() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.pretty_print_info"]], "prod() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.prod"]], "prod() (in module arkouda.pdarrayclass)": [[40, "arkouda.pdarrayclass.prod"]], "register() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.register"]], "reshape() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.reshape"]], "rotl() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.rotl"]], "rotl() (in module arkouda.pdarrayclass)": [[40, "arkouda.pdarrayclass.rotl"]], "rotr() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.rotr"]], "rotr() (in module arkouda.pdarrayclass)": [[40, "arkouda.pdarrayclass.rotr"]], "save() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.save"]], "shape (arkouda.pdarrayclass.pdarray attribute)": [[40, "arkouda.pdarrayclass.pdarray.shape"]], "size (arkouda.pdarrayclass.pdarray attribute)": [[40, "arkouda.pdarrayclass.pdarray.size"]], "slice_bits() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.slice_bits"]], "sqrt() (in module arkouda.pdarrayclass)": [[40, "arkouda.pdarrayclass.sqrt"]], "std() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.std"]], "std() (in module arkouda.pdarrayclass)": [[40, "arkouda.pdarrayclass.std"]], "sum() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.sum"]], "sum() (in module arkouda.pdarrayclass)": [[40, "arkouda.pdarrayclass.sum"]], "to_csv() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.to_csv"]], "to_cuda() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.to_cuda"]], "to_hdf() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.to_hdf"]], "to_list() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.to_list"]], "to_ndarray() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.to_ndarray"]], "to_parquet() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.to_parquet"]], "transfer() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.transfer"]], "unregister() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.unregister"]], "unregister_pdarray_by_name() (in module arkouda.pdarrayclass)": [[40, "arkouda.pdarrayclass.unregister_pdarray_by_name"]], "update_hdf() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.update_hdf"]], "value_counts() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.value_counts"]], "var() (arkouda.pdarrayclass.pdarray method)": [[40, "arkouda.pdarrayclass.pdarray.var"]], "var() (in module arkouda.pdarrayclass)": [[40, "arkouda.pdarrayclass.var"]], "arange() (in module arkouda.pdarraycreation)": [[41, "arkouda.pdarraycreation.arange"]], "arkouda.pdarraycreation": [[41, "module-arkouda.pdarraycreation"]], "array() (in module arkouda.pdarraycreation)": [[41, "arkouda.pdarraycreation.array"]], "bigint_from_uint_arrays() (in module arkouda.pdarraycreation)": [[41, "arkouda.pdarraycreation.bigint_from_uint_arrays"]], "from_series() (in module arkouda.pdarraycreation)": [[41, "arkouda.pdarraycreation.from_series"]], "full() (in module arkouda.pdarraycreation)": [[41, "arkouda.pdarraycreation.full"]], "full_like() (in module arkouda.pdarraycreation)": [[41, "arkouda.pdarraycreation.full_like"]], "linspace() (in module arkouda.pdarraycreation)": [[41, "arkouda.pdarraycreation.linspace"]], "ones() (in module arkouda.pdarraycreation)": [[41, "arkouda.pdarraycreation.ones"]], "ones_like() (in module arkouda.pdarraycreation)": [[41, "arkouda.pdarraycreation.ones_like"]], "randint() (in module arkouda.pdarraycreation)": [[41, "arkouda.pdarraycreation.randint"]], "random_strings_lognormal() (in module arkouda.pdarraycreation)": [[41, "arkouda.pdarraycreation.random_strings_lognormal"]], "random_strings_uniform() (in module arkouda.pdarraycreation)": [[41, "arkouda.pdarraycreation.random_strings_uniform"]], "standard_normal() (in module arkouda.pdarraycreation)": [[41, "arkouda.pdarraycreation.standard_normal"]], "uniform() (in module arkouda.pdarraycreation)": [[41, "arkouda.pdarraycreation.uniform"]], "zeros() (in module arkouda.pdarraycreation)": [[41, "arkouda.pdarraycreation.zeros"]], "zeros_like() (in module arkouda.pdarraycreation)": [[41, "arkouda.pdarraycreation.zeros_like"]], "arkouda.pdarraysetops": [[42, "module-arkouda.pdarraysetops"]], "concatenate() (in module arkouda.pdarraysetops)": [[42, "arkouda.pdarraysetops.concatenate"]], "in1d() (in module arkouda.pdarraysetops)": [[42, "arkouda.pdarraysetops.in1d"]], "indexof1d() (in module arkouda.pdarraysetops)": [[42, "arkouda.pdarraysetops.indexof1d"]], "intersect1d() (in module arkouda.pdarraysetops)": [[42, "arkouda.pdarraysetops.intersect1d"]], "setdiff1d() (in module arkouda.pdarraysetops)": [[42, "arkouda.pdarraysetops.setdiff1d"]], "setxor1d() (in module arkouda.pdarraysetops)": [[42, "arkouda.pdarraysetops.setxor1d"]], "union1d() (in module arkouda.pdarraysetops)": [[42, "arkouda.pdarraysetops.union1d"]], "arkouda.plotting": [[43, "module-arkouda.plotting"]], "hist_all() (in module arkouda.plotting)": [[43, "arkouda.plotting.hist_all"]], "plot_dist() (in module arkouda.plotting)": [[43, "arkouda.plotting.plot_dist"]], "generator (class in arkouda.random._generator)": [[44, "arkouda.random._generator.Generator"]], "arkouda.random._generator": [[44, "module-arkouda.random._generator"]], "default_rng() (in module arkouda.random._generator)": [[44, "arkouda.random._generator.default_rng"]], "integers() (arkouda.random._generator.generator method)": [[44, "arkouda.random._generator.Generator.integers"]], "random() (arkouda.random._generator.generator method)": [[44, "arkouda.random._generator.Generator.random"]], "standard_normal() (arkouda.random._generator.generator method)": [[44, "arkouda.random._generator.Generator.standard_normal"]], "uniform() (arkouda.random._generator.generator method)": [[44, "arkouda.random._generator.Generator.uniform"]], "arkouda.random._legacy": [[45, "module-arkouda.random._legacy"]], "randint() (in module arkouda.random._legacy)": [[45, "arkouda.random._legacy.randint"]], "standard_normal() (in module arkouda.random._legacy)": [[45, "arkouda.random._legacy.standard_normal"]], "uniform() (in module arkouda.random._legacy)": [[45, "arkouda.random._legacy.uniform"]], "generator (class in arkouda.random)": [[46, "arkouda.random.Generator"], [98, "arkouda.random.Generator"]], "arkouda.random": [[46, "module-arkouda.random"]], "integers() (arkouda.random.generator method)": [[46, "arkouda.random.Generator.integers"]], "randint() (in module arkouda.random)": [[46, "arkouda.random.randint"]], "random() (arkouda.random.generator method)": [[46, "arkouda.random.Generator.random"]], "standard_normal() (arkouda.random.generator method)": [[46, "arkouda.random.Generator.standard_normal"]], "standard_normal() (in module arkouda.random)": [[46, "arkouda.random.standard_normal"]], "uniform() (arkouda.random.generator method)": [[46, "arkouda.random.Generator.uniform"]], "uniform() (in module arkouda.random)": [[46, "arkouda.random.uniform"]], "row (class in arkouda.row)": [[47, "arkouda.row.Row"]], "arkouda.row": [[47, "module-arkouda.row"]], "power_divergenceresult (class in arkouda.scipy._stats_py)": [[48, "arkouda.scipy._stats_py.Power_divergenceResult"]], "arkouda.scipy._stats_py": [[48, "module-arkouda.scipy._stats_py"]], "chisquare() (in module arkouda.scipy._stats_py)": [[48, "arkouda.scipy._stats_py.chisquare"]], "power_divergence() (in module arkouda.scipy._stats_py)": [[48, "arkouda.scipy._stats_py.power_divergence"]], "pvalue (arkouda.scipy._stats_py.power_divergenceresult attribute)": [[48, "arkouda.scipy._stats_py.Power_divergenceResult.pvalue"]], "statistic (arkouda.scipy._stats_py.power_divergenceresult attribute)": [[48, "arkouda.scipy._stats_py.Power_divergenceResult.statistic"]], "power_divergenceresult (class in arkouda.scipy)": [[49, "arkouda.scipy.Power_divergenceResult"]], "arkouda.scipy": [[49, "module-arkouda.scipy"]], "chisquare() (in module arkouda.scipy)": [[49, "arkouda.scipy.chisquare"]], "power_divergence() (in module arkouda.scipy)": [[49, "arkouda.scipy.power_divergence"]], "pvalue (arkouda.scipy.power_divergenceresult attribute)": [[49, "arkouda.scipy.Power_divergenceResult.pvalue"]], "statistic (arkouda.scipy.power_divergenceresult attribute)": [[49, "arkouda.scipy.Power_divergenceResult.statistic"]], "arkouda.scipy.special._math": [[50, "module-arkouda.scipy.special._math"]], "xlogy() (in module arkouda.scipy.special._math)": [[50, "arkouda.scipy.special._math.xlogy"]], "arkouda.scipy.special": [[51, "module-arkouda.scipy.special"]], "xlogy() (in module arkouda.scipy.special)": [[51, "arkouda.scipy.special.xlogy"]], "arkouda.security": [[52, "module-arkouda.security"]], "generate_token() (in module arkouda.security)": [[52, "arkouda.security.generate_token"]], "generate_username_token_json() (in module arkouda.security)": [[52, "arkouda.security.generate_username_token_json"]], "get_arkouda_client_directory() (in module arkouda.security)": [[52, "arkouda.security.get_arkouda_client_directory"]], "get_home_directory() (in module arkouda.security)": [[52, "arkouda.security.get_home_directory"]], "get_username() (in module arkouda.security)": [[52, "arkouda.security.get_username"]], "username_tokenizer (in module arkouda.security)": [[52, "arkouda.security.username_tokenizer"]], "and() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.AND"]], "len_suffix (in module arkouda.segarray)": [[53, "arkouda.segarray.LEN_SUFFIX"]], "or() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.OR"]], "seg_suffix (in module arkouda.segarray)": [[53, "arkouda.segarray.SEG_SUFFIX"]], "segarray (class in arkouda.segarray)": [[53, "arkouda.segarray.SegArray"]], "val_suffix (in module arkouda.segarray)": [[53, "arkouda.segarray.VAL_SUFFIX"]], "xor() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.XOR"]], "aggregate() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.aggregate"]], "all() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.all"]], "any() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.any"]], "append() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.append"]], "append_single() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.append_single"]], "argmax() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.argmax"]], "argmin() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.argmin"]], "arkouda.segarray": [[53, "module-arkouda.segarray"]], "attach() (arkouda.segarray.segarray class method)": [[53, "arkouda.segarray.SegArray.attach"]], "concat() (arkouda.segarray.segarray class method)": [[53, "arkouda.segarray.SegArray.concat"]], "copy() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.copy"]], "filter() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.filter"]], "from_multi_array() (arkouda.segarray.segarray class method)": [[53, "arkouda.segarray.SegArray.from_multi_array"]], "from_parts() (arkouda.segarray.segarray class method)": [[53, "arkouda.segarray.SegArray.from_parts"]], "from_return_msg() (arkouda.segarray.segarray class method)": [[53, "arkouda.segarray.SegArray.from_return_msg"]], "get_jth() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.get_jth"]], "get_length_n() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.get_length_n"]], "get_ngrams() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.get_ngrams"]], "get_prefixes() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.get_prefixes"]], "get_suffixes() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.get_suffixes"]], "grouping (arkouda.segarray.segarray property)": [[53, "arkouda.segarray.SegArray.grouping"]], "hash() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.hash"]], "intersect() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.intersect"]], "is_registered() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.is_registered"]], "load() (arkouda.segarray.segarray class method)": [[53, "arkouda.segarray.SegArray.load"]], "max() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.max"]], "mean() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.mean"]], "min() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.min"]], "non_empty (arkouda.segarray.segarray property)": [[53, "arkouda.segarray.SegArray.non_empty"]], "nunique() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.nunique"]], "objtype (arkouda.segarray.segarray attribute)": [[53, "arkouda.segarray.SegArray.objType"]], "prepend_single() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.prepend_single"]], "prod() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.prod"]], "read_hdf() (arkouda.segarray.segarray class method)": [[53, "arkouda.segarray.SegArray.read_hdf"]], "register() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.register"]], "remove_repeats() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.remove_repeats"]], "save() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.save"]], "segarray() (in module arkouda.segarray)": [[53, "arkouda.segarray.segarray"]], "set_jth() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.set_jth"]], "setdiff() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.setdiff"]], "setxor() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.setxor"]], "sum() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.sum"]], "to_hdf() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.to_hdf"]], "to_list() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.to_list"]], "to_ndarray() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.to_ndarray"]], "to_parquet() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.to_parquet"]], "transfer() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.transfer"]], "union() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.union"]], "unique() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.unique"]], "unregister() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.unregister"]], "unregister_segarray_by_name() (arkouda.segarray.segarray static method)": [[53, "arkouda.segarray.SegArray.unregister_segarray_by_name"]], "update_hdf() (arkouda.segarray.segarray method)": [[53, "arkouda.segarray.SegArray.update_hdf"]], "series (class in arkouda.series)": [[54, "arkouda.series.Series"]], "add() (arkouda.series.series method)": [[54, "arkouda.series.Series.add"]], "arkouda.series": [[54, "module-arkouda.series"]], "at (arkouda.series.series property)": [[54, "arkouda.series.Series.at"]], "attach() (arkouda.series.series static method)": [[54, "arkouda.series.Series.attach"]], "concat() (arkouda.series.series static method)": [[54, "arkouda.series.Series.concat"]], "diff() (arkouda.series.series method)": [[54, "arkouda.series.Series.diff"]], "dt (arkouda.series.series attribute)": [[54, "arkouda.series.Series.dt"]], "fillna() (arkouda.series.series method)": [[54, "arkouda.series.Series.fillna"]], "from_return_msg() (arkouda.series.series class method)": [[54, "arkouda.series.Series.from_return_msg"]], "has_repeat_labels() (arkouda.series.series method)": [[54, "arkouda.series.Series.has_repeat_labels"]], "hasnans() (arkouda.series.series method)": [[54, "arkouda.series.Series.hasnans"]], "head() (arkouda.series.series method)": [[54, "arkouda.series.Series.head"]], "iat (arkouda.series.series property)": [[54, "arkouda.series.Series.iat"]], "iloc (arkouda.series.series property)": [[54, "arkouda.series.Series.iloc"]], "is_registered() (arkouda.series.series method)": [[54, "arkouda.series.Series.is_registered"]], "isin() (arkouda.series.series method)": [[54, "arkouda.series.Series.isin"]], "isna() (arkouda.series.series method)": [[54, "arkouda.series.Series.isna"]], "isnull() (arkouda.series.series method)": [[54, "arkouda.series.Series.isnull"]], "loc (arkouda.series.series property)": [[54, "arkouda.series.Series.loc"]], "locate() (arkouda.series.series method)": [[54, "arkouda.series.Series.locate"]], "map() (arkouda.series.series method)": [[54, "arkouda.series.Series.map"]], "memory_usage() (arkouda.series.series method)": [[54, "arkouda.series.Series.memory_usage"]], "notna() (arkouda.series.series method)": [[54, "arkouda.series.Series.notna"]], "notnull() (arkouda.series.series method)": [[54, "arkouda.series.Series.notnull"]], "objtype (arkouda.series.series attribute)": [[54, "arkouda.series.Series.objType"]], "pdconcat() (arkouda.series.series static method)": [[54, "arkouda.series.Series.pdconcat"]], "register() (arkouda.series.series method)": [[54, "arkouda.series.Series.register"]], "shape (arkouda.series.series property)": [[54, "arkouda.series.Series.shape"]], "sort_index() (arkouda.series.series method)": [[54, "arkouda.series.Series.sort_index"]], "sort_values() (arkouda.series.series method)": [[54, "arkouda.series.Series.sort_values"]], "str_acc (arkouda.series.series attribute)": [[54, "arkouda.series.Series.str_acc"]], "tail() (arkouda.series.series method)": [[54, "arkouda.series.Series.tail"]], "to_dataframe() (arkouda.series.series method)": [[54, "arkouda.series.Series.to_dataframe"]], "to_list() (arkouda.series.series method)": [[54, "arkouda.series.Series.to_list"]], "to_markdown() (arkouda.series.series method)": [[54, "arkouda.series.Series.to_markdown"]], "to_pandas() (arkouda.series.series method)": [[54, "arkouda.series.Series.to_pandas"]], "topn() (arkouda.series.series method)": [[54, "arkouda.series.Series.topn"]], "unregister() (arkouda.series.series method)": [[54, "arkouda.series.Series.unregister"]], "validate_key() (arkouda.series.series method)": [[54, "arkouda.series.Series.validate_key"]], "validate_val() (arkouda.series.series method)": [[54, "arkouda.series.Series.validate_val"]], "value_counts() (arkouda.series.series method)": [[54, "arkouda.series.Series.value_counts"]], "argsort() (in module arkouda.sorting)": [[55, "arkouda.sorting.argsort"]], "arkouda.sorting": [[55, "module-arkouda.sorting"]], "coargsort() (in module arkouda.sorting)": [[55, "arkouda.sorting.coargsort"]], "sort() (in module arkouda.sorting)": [[55, "arkouda.sorting.sort"]], "binops (arkouda.strings.strings attribute)": [[56, "arkouda.strings.Strings.BinOps"]], "strings (class in arkouda.strings)": [[56, "arkouda.strings.Strings"]], "arkouda.strings": [[56, "module-arkouda.strings"]], "astype() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.astype"]], "attach() (arkouda.strings.strings static method)": [[56, "arkouda.strings.Strings.attach"]], "cached_regex_patterns() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.cached_regex_patterns"]], "capitalize() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.capitalize"]], "contains() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.contains"]], "decode() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.decode"]], "dtype (arkouda.strings.strings attribute)": [[56, "arkouda.strings.Strings.dtype"]], "encode() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.encode"]], "endswith() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.endswith"]], "entry (arkouda.strings.strings attribute)": [[56, "arkouda.strings.Strings.entry"]], "find_locations() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.find_locations"]], "findall() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.findall"]], "flatten() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.flatten"]], "from_parts() (arkouda.strings.strings static method)": [[56, "arkouda.strings.Strings.from_parts"]], "from_return_msg() (arkouda.strings.strings static method)": [[56, "arkouda.strings.Strings.from_return_msg"]], "fullmatch() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.fullmatch"]], "get_bytes() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.get_bytes"]], "get_lengths() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.get_lengths"]], "get_offsets() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.get_offsets"]], "get_prefixes() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.get_prefixes"]], "get_suffixes() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.get_suffixes"]], "group() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.group"]], "hash() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.hash"]], "info() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.info"]], "is_registered() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.is_registered"]], "isalnum() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.isalnum"]], "isalpha() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.isalpha"]], "isdecimal() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.isdecimal"]], "isdigit() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.isdigit"]], "isempty() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.isempty"]], "islower() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.islower"]], "isspace() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.isspace"]], "istitle() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.istitle"]], "isupper() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.isupper"]], "logger (arkouda.strings.strings attribute)": [[56, "arkouda.strings.Strings.logger"]], "lower() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.lower"]], "lstick() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.lstick"]], "match() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.match"]], "nbytes (arkouda.strings.strings attribute)": [[56, "arkouda.strings.Strings.nbytes"]], "ndim (arkouda.strings.strings attribute)": [[56, "arkouda.strings.Strings.ndim"]], "objtype (arkouda.strings.strings attribute)": [[56, "arkouda.strings.Strings.objType"]], "peel() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.peel"]], "pretty_print_info() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.pretty_print_info"]], "purge_cached_regex_patterns() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.purge_cached_regex_patterns"]], "register() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.register"]], "rpeel() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.rpeel"]], "save() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.save"]], "search() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.search"]], "shape (arkouda.strings.strings attribute)": [[56, "arkouda.strings.Strings.shape"]], "size (arkouda.strings.strings attribute)": [[56, "arkouda.strings.Strings.size"]], "split() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.split"]], "startswith() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.startswith"]], "stick() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.stick"]], "strip() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.strip"]], "sub() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.sub"]], "subn() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.subn"]], "title() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.title"]], "to_csv() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.to_csv"]], "to_hdf() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.to_hdf"]], "to_list() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.to_list"]], "to_ndarray() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.to_ndarray"]], "to_parquet() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.to_parquet"]], "transfer() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.transfer"]], "unregister() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.unregister"]], "unregister_strings_by_name() (arkouda.strings.strings static method)": [[56, "arkouda.strings.Strings.unregister_strings_by_name"]], "update_hdf() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.update_hdf"]], "upper() (arkouda.strings.strings method)": [[56, "arkouda.strings.Strings.upper"]], "datetime (class in arkouda.timeclass)": [[57, "arkouda.timeclass.Datetime"]], "timedelta (class in arkouda.timeclass)": [[57, "arkouda.timeclass.Timedelta"]], "abs() (arkouda.timeclass.timedelta method)": [[57, "arkouda.timeclass.Timedelta.abs"]], "arkouda.timeclass": [[57, "module-arkouda.timeclass"]], "components (arkouda.timeclass.timedelta property)": [[57, "arkouda.timeclass.Timedelta.components"]], "date (arkouda.timeclass.datetime property)": [[57, "arkouda.timeclass.Datetime.date"]], "date_range() (in module arkouda.timeclass)": [[57, "arkouda.timeclass.date_range"]], "day (arkouda.timeclass.datetime property)": [[57, "arkouda.timeclass.Datetime.day"]], "day_of_week (arkouda.timeclass.datetime property)": [[57, "arkouda.timeclass.Datetime.day_of_week"]], "day_of_year (arkouda.timeclass.datetime property)": [[57, "arkouda.timeclass.Datetime.day_of_year"]], "dayofweek (arkouda.timeclass.datetime property)": [[57, "arkouda.timeclass.Datetime.dayofweek"]], "dayofyear (arkouda.timeclass.datetime property)": [[57, "arkouda.timeclass.Datetime.dayofyear"]], "days (arkouda.timeclass.timedelta property)": [[57, "arkouda.timeclass.Timedelta.days"]], "hour (arkouda.timeclass.datetime property)": [[57, "arkouda.timeclass.Datetime.hour"]], "is_leap_year (arkouda.timeclass.datetime property)": [[57, "arkouda.timeclass.Datetime.is_leap_year"]], "is_registered() (arkouda.timeclass.datetime method)": [[57, "arkouda.timeclass.Datetime.is_registered"]], "is_registered() (arkouda.timeclass.timedelta method)": [[57, "arkouda.timeclass.Timedelta.is_registered"]], "isocalendar() (arkouda.timeclass.datetime method)": [[57, "arkouda.timeclass.Datetime.isocalendar"]], "microsecond (arkouda.timeclass.datetime property)": [[57, "arkouda.timeclass.Datetime.microsecond"]], "microseconds (arkouda.timeclass.timedelta property)": [[57, "arkouda.timeclass.Timedelta.microseconds"]], "millisecond (arkouda.timeclass.datetime property)": [[57, "arkouda.timeclass.Datetime.millisecond"]], "minute (arkouda.timeclass.datetime property)": [[57, "arkouda.timeclass.Datetime.minute"]], "month (arkouda.timeclass.datetime property)": [[57, "arkouda.timeclass.Datetime.month"]], "nanosecond (arkouda.timeclass.datetime property)": [[57, "arkouda.timeclass.Datetime.nanosecond"]], "nanoseconds (arkouda.timeclass.timedelta property)": [[57, "arkouda.timeclass.Timedelta.nanoseconds"]], "register() (arkouda.timeclass.datetime method)": [[57, "arkouda.timeclass.Datetime.register"]], "register() (arkouda.timeclass.timedelta method)": [[57, "arkouda.timeclass.Timedelta.register"]], "second (arkouda.timeclass.datetime property)": [[57, "arkouda.timeclass.Datetime.second"]], "seconds (arkouda.timeclass.timedelta property)": [[57, "arkouda.timeclass.Timedelta.seconds"]], "special_objtype (arkouda.timeclass.datetime attribute)": [[57, "arkouda.timeclass.Datetime.special_objType"]], "special_objtype (arkouda.timeclass.timedelta attribute)": [[57, "arkouda.timeclass.Timedelta.special_objType"]], "std() (arkouda.timeclass.timedelta method)": [[57, "arkouda.timeclass.Timedelta.std"]], "sum() (arkouda.timeclass.datetime method)": [[57, "arkouda.timeclass.Datetime.sum"]], "sum() (arkouda.timeclass.timedelta method)": [[57, "arkouda.timeclass.Timedelta.sum"]], "supported_opeq (arkouda.timeclass.datetime attribute)": [[57, "arkouda.timeclass.Datetime.supported_opeq"]], "supported_opeq (arkouda.timeclass.timedelta attribute)": [[57, "arkouda.timeclass.Timedelta.supported_opeq"]], "supported_with_datetime (arkouda.timeclass.datetime attribute)": [[57, "arkouda.timeclass.Datetime.supported_with_datetime"]], "supported_with_datetime (arkouda.timeclass.timedelta attribute)": [[57, "arkouda.timeclass.Timedelta.supported_with_datetime"]], "supported_with_pdarray (arkouda.timeclass.datetime attribute)": [[57, "arkouda.timeclass.Datetime.supported_with_pdarray"]], "supported_with_pdarray (arkouda.timeclass.timedelta attribute)": [[57, "arkouda.timeclass.Timedelta.supported_with_pdarray"]], "supported_with_r_datetime (arkouda.timeclass.datetime attribute)": [[57, "arkouda.timeclass.Datetime.supported_with_r_datetime"]], "supported_with_r_datetime (arkouda.timeclass.timedelta attribute)": [[57, "arkouda.timeclass.Timedelta.supported_with_r_datetime"]], "supported_with_r_pdarray (arkouda.timeclass.datetime attribute)": [[57, "arkouda.timeclass.Datetime.supported_with_r_pdarray"]], "supported_with_r_pdarray (arkouda.timeclass.timedelta attribute)": [[57, "arkouda.timeclass.Timedelta.supported_with_r_pdarray"]], "supported_with_r_timedelta (arkouda.timeclass.datetime attribute)": [[57, "arkouda.timeclass.Datetime.supported_with_r_timedelta"]], "supported_with_r_timedelta (arkouda.timeclass.timedelta attribute)": [[57, "arkouda.timeclass.Timedelta.supported_with_r_timedelta"]], "supported_with_timedelta (arkouda.timeclass.datetime attribute)": [[57, "arkouda.timeclass.Datetime.supported_with_timedelta"]], "supported_with_timedelta (arkouda.timeclass.timedelta attribute)": [[57, "arkouda.timeclass.Timedelta.supported_with_timedelta"]], "timedelta_range() (in module arkouda.timeclass)": [[57, "arkouda.timeclass.timedelta_range"]], "to_pandas() (arkouda.timeclass.datetime method)": [[57, "arkouda.timeclass.Datetime.to_pandas"]], "to_pandas() (arkouda.timeclass.timedelta method)": [[57, "arkouda.timeclass.Timedelta.to_pandas"]], "total_seconds() (arkouda.timeclass.timedelta method)": [[57, "arkouda.timeclass.Timedelta.total_seconds"]], "unregister() (arkouda.timeclass.datetime method)": [[57, "arkouda.timeclass.Datetime.unregister"]], "unregister() (arkouda.timeclass.timedelta method)": [[57, "arkouda.timeclass.Timedelta.unregister"]], "week (arkouda.timeclass.datetime property)": [[57, "arkouda.timeclass.Datetime.week"]], "weekday (arkouda.timeclass.datetime property)": [[57, "arkouda.timeclass.Datetime.weekday"]], "weekofyear (arkouda.timeclass.datetime property)": [[57, "arkouda.timeclass.Datetime.weekofyear"]], "year (arkouda.timeclass.datetime property)": [[57, "arkouda.timeclass.Datetime.year"]], "arkouda.util": [[58, "module-arkouda.util"]], "attach() (in module arkouda.util)": [[58, "arkouda.util.attach"]], "attach_all() (in module arkouda.util)": [[58, "arkouda.util.attach_all"]], "broadcast_dims() (in module arkouda.util)": [[58, "arkouda.util.broadcast_dims"]], "concatenate() (in module arkouda.util)": [[58, "arkouda.util.concatenate"]], "convert_bytes() (in module arkouda.util)": [[58, "arkouda.util.convert_bytes"]], "convert_if_categorical() (in module arkouda.util)": [[58, "arkouda.util.convert_if_categorical"]], "enrich_inplace() (in module arkouda.util)": [[58, "arkouda.util.enrich_inplace"]], "expand() (in module arkouda.util)": [[58, "arkouda.util.expand"]], "generic_concat() (in module arkouda.util)": [[58, "arkouda.util.generic_concat"]], "get_callback() (in module arkouda.util)": [[58, "arkouda.util.get_callback"]], "identity() (in module arkouda.util)": [[58, "arkouda.util.identity"]], "invert_permutation() (in module arkouda.util)": [[58, "arkouda.util.invert_permutation"]], "is_float() (in module arkouda.util)": [[58, "arkouda.util.is_float"]], "is_int() (in module arkouda.util)": [[58, "arkouda.util.is_int"]], "is_numeric() (in module arkouda.util)": [[58, "arkouda.util.is_numeric"]], "is_registered() (in module arkouda.util)": [[58, "arkouda.util.is_registered"]], "map() (in module arkouda.util)": [[58, "arkouda.util.map"]], "most_common() (in module arkouda.util)": [[58, "arkouda.util.most_common"]], "register() (in module arkouda.util)": [[58, "arkouda.util.register"]], "register_all() (in module arkouda.util)": [[58, "arkouda.util.register_all"]], "report_mem() (in module arkouda.util)": [[58, "arkouda.util.report_mem"]], "sparse_sum_help() (in module arkouda.util)": [[58, "arkouda.util.sparse_sum_help"]], "unregister() (in module arkouda.util)": [[58, "arkouda.util.unregister"]], "unregister_all() (in module arkouda.util)": [[58, "arkouda.util.unregister_all"]], "to_ndarray() (in module arkouda.strings)": [[86, "arkouda.Strings.to_ndarray"], [103, "arkouda.Strings.to_ndarray"]], "to_ndarray() (in module arkouda.pdarray)": [[86, "arkouda.pdarray.to_ndarray"], [97, "arkouda.pdarray.to_ndarray"]], "argsort() (in module arkouda.index)": [[87, "arkouda.Index.argsort"]], "argsort() (in module arkouda.multiindex)": [[87, "arkouda.MultiIndex.argsort"]], "concat() (in module arkouda.index)": [[87, "arkouda.Index.concat"]], "concat() (in module arkouda.multiindex)": [[87, "arkouda.MultiIndex.concat"]], "lookup() (in module arkouda.index)": [[87, "arkouda.Index.lookup"]], "lookup() (in module arkouda.multiindex)": [[87, "arkouda.MultiIndex.lookup"]], "set_dtype() (in module arkouda.index)": [[87, "arkouda.Index.set_dtype"]], "set_dtype() (in module arkouda.multiindex)": [[87, "arkouda.MultiIndex.set_dtype"]], "to_ndarray() (in module arkouda.arrayview)": [[90, "arkouda.ArrayView.to_ndarray"]], "to_ndarray() (in module arkouda.categorical)": [[91, "arkouda.Categorical.to_ndarray"]], "apply_permutation() (in module arkouda.dataframe)": [[93, "arkouda.DataFrame.apply_permutation"]], "argsort() (in module arkouda.dataframe)": [[93, "arkouda.DataFrame.argsort"]], "coargsort() (in module arkouda.dataframe)": [[93, "arkouda.DataFrame.coargsort"]], "concat() (in module arkouda.dataframe)": [[93, "arkouda.DataFrame.concat"]], "copy() (in module arkouda.dataframe)": [[93, "arkouda.DataFrame.copy"]], "drop() (in module arkouda.dataframe)": [[93, "arkouda.DataFrame.drop"]], "drop_duplicates() (in module arkouda.dataframe)": [[93, "arkouda.DataFrame.drop_duplicates"]], "groupby() (in module arkouda.dataframe)": [[93, "arkouda.DataFrame.groupby"]], "head() (in module arkouda.dataframe)": [[93, "arkouda.DataFrame.head"]], "rename() (in module arkouda.dataframe)": [[93, "arkouda.DataFrame.rename"]], "reset_index() (in module arkouda.dataframe)": [[93, "arkouda.DataFrame.reset_index"]], "sort_values() (in module arkouda.dataframe)": [[93, "arkouda.DataFrame.sort_values"]], "tail() (in module arkouda.dataframe)": [[93, "arkouda.DataFrame.tail"]], "to_pandas() (in module arkouda.dataframe)": [[93, "arkouda.DataFrame.to_pandas"]], "default_rng() (in module arkouda.random)": [[98, "arkouda.random.default_rng"]], "integers() (in module arkouda.random.generator)": [[98, "arkouda.random.Generator.integers"]], "random() (in module arkouda.random.generator)": [[98, "arkouda.random.Generator.random"]], "standard_normal() (in module arkouda.random.generator)": [[98, "arkouda.random.Generator.standard_normal"]], "uniform() (in module arkouda.random.generator)": [[98, "arkouda.random.Generator.uniform"]], "append() (in module arkouda.segarray)": [[99, "arkouda.SegArray.append"]], "append_single() (in module arkouda.segarray)": [[99, "arkouda.SegArray.append_single"]], "get_jth() (in module arkouda.segarray)": [[99, "arkouda.SegArray.get_jth"]], "get_length_n() (in module arkouda.segarray)": [[99, "arkouda.SegArray.get_length_n"]], "get_ngrams() (in module arkouda.segarray)": [[99, "arkouda.SegArray.get_ngrams"]], "get_prefixes() (in module arkouda.segarray)": [[99, "arkouda.SegArray.get_prefixes"]], "get_suffixes() (in module arkouda.segarray)": [[99, "arkouda.SegArray.get_suffixes"]], "intersect() (in module arkouda.segarray)": [[99, "arkouda.SegArray.intersect"]], "prepend_single() (in module arkouda.segarray)": [[99, "arkouda.SegArray.prepend_single"]], "remove_repeats() (in module arkouda.segarray)": [[99, "arkouda.SegArray.remove_repeats"]], "set_jth() (in module arkouda.segarray)": [[99, "arkouda.SegArray.set_jth"]], "setdiff() (in module arkouda.segarray)": [[99, "arkouda.SegArray.setdiff"]], "setxor() (in module arkouda.segarray)": [[99, "arkouda.SegArray.setxor"]], "to_ndarray() (in module arkouda.segarray)": [[99, "arkouda.SegArray.to_ndarray"]], "union() (in module arkouda.segarray)": [[99, "arkouda.SegArray.union"]], "head() (in module arkouda.series)": [[100, "arkouda.Series.head"]], "locate() (in module arkouda.series)": [[100, "arkouda.Series.locate"], [100, "id0"]], "pdconcat() (in module arkouda.series)": [[100, "arkouda.Series.pdconcat"]], "sort_index() (in module arkouda.series)": [[100, "arkouda.Series.sort_index"]], "sort_values() (in module arkouda.series)": [[100, "arkouda.Series.sort_values"]], "tail() (in module arkouda.series)": [[100, "arkouda.Series.tail"]], "to_pandas() (in module arkouda.series)": [[100, "arkouda.Series.to_pandas"]], "topn() (in module arkouda.series)": [[100, "arkouda.Series.topn"]], "value_counts() (in module arkouda.series)": [[100, "arkouda.Series.value_counts"]], "connect() (in module arkouda)": [[102, "arkouda.connect"]]}})