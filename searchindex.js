Search.setIndex({"docnames": ["autoapi/arkouda/_version/index", "autoapi/arkouda/accessor/index", "autoapi/arkouda/alignment/index", "autoapi/arkouda/array_view/index", "autoapi/arkouda/categorical/index", "autoapi/arkouda/client/index", "autoapi/arkouda/client_dtypes/index", "autoapi/arkouda/dataframe/index", "autoapi/arkouda/decorators/index", "autoapi/arkouda/dtypes/index", "autoapi/arkouda/groupbyclass/index", "autoapi/arkouda/index", "autoapi/arkouda/index/index", "autoapi/arkouda/infoclass/index", "autoapi/arkouda/io_util/index", "autoapi/arkouda/join/index", "autoapi/arkouda/logger/index", "autoapi/arkouda/match/index", "autoapi/arkouda/matcher/index", "autoapi/arkouda/message/index", "autoapi/arkouda/numeric/index", "autoapi/arkouda/pdarrayIO/index", "autoapi/arkouda/pdarrayclass/index", "autoapi/arkouda/pdarraycreation/index", "autoapi/arkouda/pdarraysetops/index", "autoapi/arkouda/plotting/index", "autoapi/arkouda/row/index", "autoapi/arkouda/security/index", "autoapi/arkouda/segarray/index", "autoapi/arkouda/series/index", "autoapi/arkouda/sorting/index", "autoapi/arkouda/strings/index", "autoapi/arkouda/timeclass/index", "autoapi/arkouda/util/index", "autoapi/index", "contributing", "examples", "index", "server/index", "setup/installation", "setup/prerequisites", "setup/quickstart", "setup/testing", "usage", "usage/IO", "usage/Index", "usage/argsort", "usage/arithmetic", "usage/arrayview", "usage/categorical", "usage/creation", "usage/dataframe", "usage/groupby", "usage/histogram", "usage/indexing", "usage/pdarray", "usage/segarray", "usage/series", "usage/setops", "usage/startup", "usage/strings"], "filenames": ["autoapi/arkouda/_version/index.rst", "autoapi/arkouda/accessor/index.rst", "autoapi/arkouda/alignment/index.rst", "autoapi/arkouda/array_view/index.rst", "autoapi/arkouda/categorical/index.rst", "autoapi/arkouda/client/index.rst", "autoapi/arkouda/client_dtypes/index.rst", "autoapi/arkouda/dataframe/index.rst", "autoapi/arkouda/decorators/index.rst", "autoapi/arkouda/dtypes/index.rst", "autoapi/arkouda/groupbyclass/index.rst", "autoapi/arkouda/index.rst", "autoapi/arkouda/index/index.rst", "autoapi/arkouda/infoclass/index.rst", "autoapi/arkouda/io_util/index.rst", "autoapi/arkouda/join/index.rst", "autoapi/arkouda/logger/index.rst", "autoapi/arkouda/match/index.rst", "autoapi/arkouda/matcher/index.rst", "autoapi/arkouda/message/index.rst", "autoapi/arkouda/numeric/index.rst", "autoapi/arkouda/pdarrayIO/index.rst", "autoapi/arkouda/pdarrayclass/index.rst", "autoapi/arkouda/pdarraycreation/index.rst", "autoapi/arkouda/pdarraysetops/index.rst", "autoapi/arkouda/plotting/index.rst", "autoapi/arkouda/row/index.rst", "autoapi/arkouda/security/index.rst", "autoapi/arkouda/segarray/index.rst", "autoapi/arkouda/series/index.rst", "autoapi/arkouda/sorting/index.rst", "autoapi/arkouda/strings/index.rst", "autoapi/arkouda/timeclass/index.rst", "autoapi/arkouda/util/index.rst", "autoapi/index.rst", "contributing.rst", "examples.rst", "index.rst", "server/index.rst", "setup/installation.rst", "setup/prerequisites.rst", "setup/quickstart.rst", "setup/testing.rst", "usage.rst", "usage/IO.rst", "usage/Index.rst", "usage/argsort.rst", "usage/arithmetic.rst", "usage/arrayview.rst", "usage/categorical.rst", "usage/creation.rst", "usage/dataframe.rst", "usage/groupby.rst", "usage/histogram.rst", "usage/indexing.rst", "usage/pdarray.rst", "usage/segarray.rst", "usage/series.rst", "usage/setops.rst", "usage/startup.rst", "usage/strings.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda._version</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.accessor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.alignment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_view</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.categorical</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.client</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.client_dtypes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.dataframe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.decorators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.dtypes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.groupbyclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.index</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.infoclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.io_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.join</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.match</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.message</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.numeric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.pdarrayIO</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.pdarrayclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.pdarraycreation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.pdarraysetops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.plotting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.row</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.security</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.segarray</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.series</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.sorting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.strings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.timeclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.util</span></code>", "API Reference", "Contributing", "Examples", "Welcome to arkouda\u2019s documentation!", "Chapel API Reference", "Installation", "Prerequisites", "Quickstart", "Performance Testing", "Usage", "Data I/O", "Indexs in Arkouda", "Sorting", "Arithmetic and Numeric Operations", "ArrayView in Arkouda", "Categoricals", "Creating Arrays", "DataFrames in Arkouda", "GroupBy", "Summarizing Data", "Indexing and Assignment", "The <code class=\"docutils literal notranslate\"><span class=\"pre\">pdarray</span></code> class", "SegArrays in Arkouda", "Series in Arkouda", "Array Set Operations", "Startup", "Strings in Arkouda"], "terms": {"git": 0, "implement": [0, 4, 7, 11, 19, 20, 21, 22, 24, 27, 31, 36, 40, 41, 47, 50, 51, 60], "py": [0, 35, 36, 42], "get_keyword": 0, "get": [0, 5, 7, 9, 11, 20, 21, 28, 35, 36, 39, 40, 41, 44, 48, 55, 56], "keyword": [0, 4, 11, 28, 29, 50, 57], "need": [0, 7, 11, 21, 28, 29, 31, 39, 40, 44, 51, 57], "look": [0, 35, 36, 44, 59], "up": [0, 2, 4, 5, 10, 11, 20, 21, 22, 24, 31, 32, 35, 39, 44, 47, 48, 49, 50, 58, 60], "version": [0, 4, 7, 11, 26, 29, 33, 39, 40, 41], "inform": [0, 4, 5, 10, 11, 13, 22, 31, 49, 56, 58, 60], "versioneerconfig": 0, "contain": [0, 2, 4, 6, 7, 10, 11, 12, 13, 14, 17, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 34, 35, 39, 41, 42, 43, 44, 46, 47, 49, 50, 52, 55, 56, 57, 58, 60], "configur": [0, 11, 28, 35, 40, 45, 51, 57], "paramet": [0, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60], "get_config": [0, 5], "creat": [0, 4, 6, 7, 10, 11, 12, 14, 18, 19, 21, 22, 23, 28, 29, 31, 32, 34, 35, 36, 37, 39, 43, 44, 48, 49, 51, 52, 53, 55], "popul": [0, 10, 11, 14, 18, 22, 47, 52], "return": [0, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 41, 44, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60], "object": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 36, 41, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "except": [0, 2, 7, 11, 22, 35, 51, 60], "notthismethod": 0, "base": [0, 1, 2, 3, 4, 6, 7, 11, 12, 19, 20, 21, 22, 26, 30, 32, 33, 36, 43, 44, 45, 46, 47, 48, 49, 51, 55, 57, 60], "rais": [0, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 35, 44, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60], "method": [0, 1, 4, 5, 6, 7, 10, 11, 19, 20, 22, 23, 27, 28, 31, 43, 44, 49, 50, 52, 53, 55], "i": [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "valid": [0, 2, 11, 20, 21, 23, 31, 39, 44, 55, 60], "current": [0, 3, 4, 5, 7, 11, 12, 20, 21, 22, 23, 27, 28, 31, 36, 39, 40, 41, 44, 45, 47, 49, 50, 51, 53, 55, 56, 59, 60], "scenario": 0, "long_version_pi": 0, "handler": [0, 11], "register_vcs_handl": 0, "vc": 0, "decor": [0, 11, 34], "mark": 0, "run_command": 0, "command": [0, 5, 11, 22, 35, 41, 59], "arg": [0, 2, 11, 19, 23, 28, 32, 35, 50, 52], "cwd": [0, 11, 21, 22, 44], "none": [0, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 16, 18, 19, 21, 22, 23, 25, 26, 28, 29, 31, 32, 40, 44, 45, 49, 50, 51, 52, 53, 57, 59], "verbos": [0, 11, 13, 16, 35], "fals": [0, 2, 4, 6, 7, 10, 11, 12, 17, 18, 20, 21, 22, 23, 24, 28, 29, 31, 32, 36, 42, 44, 47, 49, 50, 51, 52, 55, 56, 58, 60], "hide_stderr": 0, "env": [0, 11], "call": [0, 4, 5, 6, 7, 10, 11, 21, 22, 23, 28, 29, 31, 39, 41, 44, 47, 48, 50, 51, 52, 55, 59], "given": [0, 2, 4, 7, 10, 11, 19, 21, 23, 24, 31, 32, 33, 44, 49, 50, 51, 52, 60], "": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 20, 21, 22, 27, 28, 29, 31, 32, 33, 35, 39, 40, 41, 42, 44, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 60], "versions_from_parentdir": 0, "parentdir_prefix": 0, "root": [0, 4, 7, 10, 11, 22, 39, 40, 41, 44, 47, 52], "try": [0, 9, 11, 12, 21, 22, 33, 35, 39, 44], "determin": [0, 4, 7, 10, 11, 12, 21, 22, 44, 49, 51, 52], "from": [0, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14, 17, 19, 20, 21, 22, 23, 25, 28, 31, 32, 33, 35, 36, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60], "parent": [0, 18], "directori": [0, 4, 11, 12, 14, 21, 22, 27, 28, 31, 39, 40, 41, 42, 44], "name": [0, 1, 2, 3, 4, 6, 7, 10, 11, 12, 13, 21, 22, 23, 28, 29, 31, 32, 33, 35, 36, 43, 44, 45, 49, 50, 51, 52, 57], "sourc": 0, "tarbal": 0, "convention": 0, "unpack": [0, 11, 31, 60], "includ": [0, 2, 4, 7, 11, 20, 21, 32, 35, 37, 39, 41, 44, 47, 55, 56], "both": [0, 5, 7, 11, 21, 24, 32, 36, 40, 41, 44, 49, 58, 60], "project": 0, "string": [0, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 32, 33, 34, 35, 37, 43, 44, 45, 46, 49, 50, 51, 52, 53, 55, 56, 57, 58], "we": [0, 7, 11, 21, 28, 31, 33, 36, 39, 40, 41, 44, 53, 55], "also": [0, 2, 4, 6, 10, 11, 15, 20, 23, 24, 28, 31, 40, 41, 44, 50, 54, 55, 56, 58, 60], "support": [0, 4, 6, 7, 9, 10, 11, 12, 14, 20, 21, 22, 23, 24, 27, 28, 31, 32, 33, 36, 40, 41, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60], "search": [0, 2, 4, 11, 17, 31, 36, 37, 43, 49], "two": [0, 2, 4, 7, 10, 11, 15, 20, 22, 23, 24, 28, 31, 32, 40, 41, 44, 47, 50, 52, 58, 60], "level": [0, 11, 16, 24, 28, 29, 44, 57, 58], "an": [0, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 33, 35, 36, 39, 40, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60], "appropri": [0, 35, 39, 41, 44], "git_get_keyword": 0, "versionfile_ab": 0, "extract": [0, 52], "file": [0, 3, 4, 7, 11, 12, 14, 21, 22, 27, 28, 31, 35, 39, 40, 43, 60], "git_versions_from_keyword": 0, "tag_prefix": 0, "git_pieces_from_vc": 0, "describ": [0, 35], "tree": 0, "thi": [0, 3, 4, 5, 6, 7, 10, 11, 12, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 44, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60], "onli": [0, 4, 7, 10, 11, 12, 17, 20, 21, 22, 23, 24, 28, 29, 30, 31, 39, 41, 42, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 60], "archiv": 0, "subst": 0, "were": [0, 3, 10, 11, 12, 21, 22, 28, 31, 35, 44, 48, 52, 56, 60], "expand": [0, 11, 21, 33, 44], "hasn": 0, "t": [0, 4, 6, 11, 22, 31, 32, 42, 60], "alreadi": [0, 4, 7, 10, 11, 12, 21, 22, 36, 44, 49, 52, 58], "been": [0, 4, 7, 11, 21, 22, 24, 31, 44, 47, 49, 50], "rewritten": 0, "short": 0, "mean": [0, 5, 7, 10, 11, 21, 22, 23, 27, 28, 43, 44, 47, 52, 53], "re": [0, 4, 5, 7, 10, 11, 40, 52, 59, 60], "insid": 0, "check": [0, 4, 7, 10, 11, 21, 28, 29, 31, 35, 40, 41, 42, 44, 49, 58, 59, 60], "out": [0, 5, 7, 11, 20, 28, 35, 36, 53, 54, 56], "plus_or_dot": 0, "piec": 0, "don": [0, 4, 6, 11, 22, 31, 32], "have": [0, 2, 4, 7, 10, 11, 12, 20, 21, 22, 23, 24, 25, 28, 29, 31, 32, 35, 36, 39, 40, 41, 44, 47, 49, 50, 51, 52, 55, 56, 57], "one": [0, 1, 2, 4, 7, 9, 10, 11, 12, 14, 20, 21, 22, 23, 24, 28, 31, 35, 36, 39, 41, 44, 47, 49, 50, 51, 52, 56, 58, 60], "els": [0, 35], "render_pep440": 0, "build": [0, 10, 19, 35, 37, 40, 41, 52, 59], "post": 0, "releas": 0, "local": [0, 3, 4, 5, 7, 11, 12, 21, 22, 28, 29, 31, 32, 39, 41, 44, 50, 57, 59], "identifi": [0, 2, 4, 11, 22, 33, 55], "our": [0, 44], "goal": 0, "tag": 0, "distanc": 0, "ghex": 0, "dirti": 0, "note": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 36, 39, 44, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60], "you": [0, 4, 7, 10, 11, 12, 21, 22, 31, 39, 40, 41, 44, 51, 52, 54], "ll": 0, "0": [0, 2, 3, 4, 5, 7, 10, 11, 12, 15, 17, 18, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 36, 40, 41, 42, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60], "1": [0, 2, 3, 4, 7, 10, 11, 17, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 34, 36, 40, 41, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60], "git_describ": 0, "wa": [0, 4, 7, 10, 11, 20, 21, 22, 28, 29, 31, 39, 44, 52, 55, 56], "just": [0, 55], "hex": 0, "untag": [0, 41], "render_pep440_pr": 0, "post0": 0, "devdist": 0, "No": 0, "render_pep440_post": 0, "postdist": 0, "dev0": 0, "The": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14, 16, 17, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60], "sort": [0, 4, 7, 10, 11, 20, 22, 24, 28, 29, 31, 34, 36, 37, 42, 43, 47, 49, 50, 52, 53, 58, 60], "backward": [0, 11, 28, 33, 56], "appear": [0, 2, 4, 7, 10, 11, 39, 52, 53], "older": [0, 11, 12, 22, 44], "than": [0, 2, 3, 4, 7, 10, 11, 12, 20, 22, 23, 24, 30, 31, 32, 33, 36, 44, 46, 48, 49, 50, 51, 52, 55, 58, 60], "correspond": [0, 2, 4, 6, 7, 10, 11, 12, 14, 15, 17, 19, 20, 21, 22, 23, 27, 28, 29, 31, 33, 35, 44, 47, 49, 52, 53, 54, 56, 57, 60], "clean": 0, "shouldn": 0, "softwar": 0, "anywai": [0, 50], "render_pep440_old": 0, "render_git_describ": 0, "like": [0, 1, 2, 6, 7, 10, 11, 22, 32, 37, 41, 44, 45, 51, 52, 54, 57, 59, 60], "alwai": [0, 4, 10, 11, 21, 22, 32, 44, 47, 49, 51, 52, 53, 55, 60], "g": [0, 1, 6, 10, 11, 20, 22, 31, 32, 33, 36, 40, 44, 47, 49, 50, 52, 56, 59, 60], "prefix": [0, 4, 7, 11, 12, 21, 22, 28, 31, 32, 33, 43, 44, 60], "render_git_describe_long": 0, "long": [0, 11, 28, 31, 36, 56], "hash": [0, 4, 11, 20, 30, 31, 46], "uncondit": 0, "render": 0, "style": [0, 4, 7, 10, 11, 22, 31, 51, 52, 55], "request": [0, 4, 7, 10, 11, 14, 22, 23, 31, 35, 50, 51, 52], "get_vers": [0, 11], "default": [0, 2, 3, 4, 5, 6, 7, 10, 11, 12, 17, 20, 21, 22, 23, 24, 27, 28, 29, 31, 32, 36, 40, 41, 42, 44, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60], "unabl": [0, 4, 7, 10, 11, 22, 31, 52], "do": [0, 2, 5, 7, 10, 11, 20, 21, 29, 35, 36, 39, 40, 44, 47, 48, 51, 52, 57], "so": [0, 4, 7, 10, 11, 21, 22, 29, 31, 32, 39, 44, 47, 48, 51, 52, 57, 58], "cachedaccessor": [1, 11], "str": [1, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 31, 32, 33, 44, 45, 48, 49, 50, 51, 52, 55, 59, 60], "custom": [1, 11, 39, 53], "properti": [1, 4, 7, 11, 12, 19, 28, 29, 32, 35], "A": [1, 3, 4, 5, 6, 7, 10, 11, 19, 20, 21, 22, 23, 25, 27, 28, 29, 31, 32, 33, 41, 42, 44, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 60], "descriptor": [1, 11, 31], "cach": [1, 4, 11, 28, 31], "param": [1, 11], "namespac": [1, 11], "access": [1, 5, 11, 21, 27, 43, 44, 59], "under": [1, 3, 4, 7, 10, 11, 21, 22, 23, 28, 31, 32, 44, 48, 49, 52, 55, 60], "e": [1, 6, 10, 11, 20, 22, 23, 28, 31, 32, 35, 36, 39, 40, 44, 47, 49, 50, 52, 56, 59, 60], "df": [1, 7, 11, 36, 51], "foo": [1, 11, 35], "type": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 35, 40, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60], "extens": [1, 11, 12, 21, 22, 44], "cl": [1, 11], "For": [1, 2, 10, 11, 17, 21, 23, 30, 31, 32, 36, 40, 44, 46, 50, 52, 53, 54, 55, 56, 58, 60], "__init__": [1, 11], "assum": [1, 7, 10, 11, 21, 23, 24, 29, 36, 41, 44, 51, 52, 57, 58], "seri": [1, 7, 11, 23, 32, 33, 34], "datafram": [1, 11, 21, 26, 29, 34, 37, 43, 57], "index": [1, 2, 3, 4, 6, 7, 10, 11, 17, 21, 22, 23, 28, 29, 31, 34, 37, 42, 43, 44, 47, 49, 50, 52, 53, 56, 57, 60], "singl": [1, 3, 4, 6, 7, 10, 11, 12, 19, 20, 21, 22, 24, 28, 31, 40, 42, 44, 50, 51, 52, 54, 56, 58], "argument": [1, 2, 6, 7, 10, 11, 28, 29, 31, 33, 35, 57], "data": [1, 3, 4, 6, 7, 9, 10, 11, 12, 19, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 35, 36, 37, 40, 43, 45, 46, 48, 49, 50, 52, 56, 57, 59, 60], "__get__": [1, 11], "obj": [1, 7, 11, 21, 44], "string_oper": [1, 11], "date_oper": [1, 11], "classmethod": [1, 4, 7, 11, 19, 28, 29, 32, 49], "_make_op": [1, 11], "datetimeaccessor": [1, 11], "stringaccessor": [1, 11], "unsqueez": 2, "p": [2, 11, 23, 36], "zero_up": 2, "val": [2, 9, 10, 11, 19, 28, 33, 52, 56], "map": [2, 4, 5, 6, 7, 11, 14, 19, 21, 31, 33, 35, 44, 51, 60], "arrai": [2, 3, 4, 6, 7, 10, 11, 12, 15, 17, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 35, 36, 37, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 57, 60], "spars": [2, 10, 52, 55], "valu": [2, 3, 4, 5, 6, 7, 10, 11, 12, 14, 19, 20, 21, 22, 23, 24, 28, 29, 31, 32, 33, 35, 36, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60], "indic": [2, 3, 4, 5, 6, 7, 10, 11, 12, 15, 17, 20, 21, 22, 28, 29, 30, 31, 33, 44, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 60], "pdarrai": [2, 3, 4, 6, 7, 10, 11, 12, 15, 17, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 35, 36, 37, 40, 41, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60], "dens": [2, 4, 10, 52], "replac": [2, 7, 11, 18, 21, 22, 28, 31, 44, 56, 60], "multipl": [2, 7, 11, 20, 21, 28, 32, 35, 42, 44, 45, 47, 51, 56], "common": [2, 10, 11, 24, 35, 44, 52, 58, 60], "list": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 19, 21, 22, 23, 24, 28, 29, 31, 32, 35, 36, 41, 44, 45, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60], "right_align": 2, "left": [2, 6, 11, 20, 22, 30, 31, 32, 46, 53, 60], "right": [2, 6, 7, 11, 22, 28, 30, 31, 32, 46, 51, 54, 59, 60], "set": [2, 3, 4, 6, 7, 10, 11, 12, 16, 19, 20, 21, 22, 23, 24, 27, 28, 29, 31, 32, 35, 36, 37, 39, 40, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 60], "impli": [2, 54], "discard": [2, 4, 49], "hand": [2, 54], "defin": [2, 4, 6, 7, 9, 10, 11, 19, 20, 21, 22, 23, 31, 35, 44, 48, 49, 50, 51, 52, 53, 55], "keep": [2, 7, 11, 44, 51], "bool": [2, 4, 6, 7, 9, 10, 11, 12, 17, 18, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 41, 42, 44, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60], "logic": [2, 3, 4, 11, 20, 23, 28, 31, 35, 41, 43, 48, 50, 53, 56], "surviv": 2, "left_align": 2, "nonuniqueerror": 2, "valueerror": [2, 4, 5, 6, 10, 11, 12, 14, 15, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 44, 46, 47, 50, 52, 53, 56, 57, 59, 60], "inappropri": 2, "correct": [2, 7, 11, 21, 35, 40, 42, 44, 51], "find": [2, 4, 7, 10, 11, 18, 22, 24, 27, 29, 31, 33, 36, 47, 52, 53, 58, 60], "queri": [2, 44], "space": [2, 11, 19, 20, 23, 32, 50, 53, 60], "item": [2, 4, 7, 11, 17, 24, 29, 33, 36, 49, 51, 57, 58], "found": [2, 7, 11, 12, 22, 35, 40, 44], "sequenc": [2, 4, 6, 11, 22, 24, 28, 30, 46, 50, 55, 56, 58, 60], "If": [2, 3, 4, 5, 6, 7, 10, 11, 12, 14, 17, 18, 20, 21, 22, 23, 24, 28, 29, 31, 32, 33, 35, 39, 40, 41, 44, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 59, 60], "each": [2, 3, 4, 7, 10, 11, 12, 13, 14, 16, 17, 20, 21, 22, 24, 28, 29, 31, 32, 33, 35, 36, 44, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 60], "row": [2, 7, 10, 11, 21, 24, 28, 30, 34, 44, 46, 51, 52, 56, 58], "which": [2, 3, 4, 6, 7, 10, 11, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 35, 36, 40, 41, 42, 44, 46, 47, 48, 49, 50, 51, 52, 55, 56, 58, 59, 60], "must": [2, 4, 5, 6, 7, 10, 11, 12, 20, 21, 22, 23, 24, 25, 28, 29, 31, 32, 35, 39, 40, 41, 44, 47, 50, 52, 54, 55, 56, 57, 59, 60], "same": [2, 3, 4, 6, 7, 10, 11, 12, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 36, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60], "shape": [2, 3, 4, 7, 11, 12, 20, 22, 28, 29, 31, 43, 47, 48, 49, 55], "dtype": [2, 3, 4, 6, 7, 10, 11, 12, 15, 18, 19, 20, 21, 22, 23, 24, 28, 30, 31, 32, 33, 34, 35, 36, 42, 43, 44, 47, 48, 50, 52, 53, 54, 55, 58, 60], "its": [2, 4, 9, 11, 12, 22, 28, 29, 31, 44, 55, 56, 57, 60], "int64": [2, 4, 6, 7, 9, 10, 11, 15, 17, 20, 21, 22, 23, 24, 28, 30, 31, 32, 35, 36, 42, 44, 46, 47, 49, 50, 51, 52, 53, 55, 56, 58, 60], "lookup": [2, 11, 12, 29, 35], "kei": [2, 3, 4, 6, 7, 10, 11, 12, 14, 19, 20, 21, 22, 29, 31, 32, 36, 44, 45, 51, 52, 57], "fillvalu": 2, "appli": [2, 7, 10, 11, 20, 47, 51, 52, 60], "domain": 2, "entri": [2, 11, 31, 35], "uniqu": [2, 4, 7, 10, 11, 12, 20, 24, 28, 29, 31, 36, 43, 44, 49, 52, 53, 54, 56, 57, 58, 60], "treat": [2, 3, 6, 9, 11, 30, 44, 46, 48], "tupl": [2, 4, 6, 7, 9, 10, 11, 15, 20, 22, 23, 24, 29, 31, 44, 49, 50, 51, 52, 53, 55, 57, 58, 60], "rang": [2, 4, 7, 11, 12, 20, 22, 23, 28, 29, 31, 32, 36, 42, 44, 50, 51, 53, 57, 60], "length": [2, 4, 10, 11, 17, 21, 23, 24, 27, 28, 29, 31, 42, 44, 47, 50, 52, 56, 57, 58, 60], "evalu": [2, 11, 22, 47, 53], "scalar": [2, 4, 11, 22, 28, 29, 32, 35, 41, 42, 43, 49, 53, 54, 56, 57], "result": [2, 4, 6, 7, 10, 11, 12, 15, 20, 21, 22, 23, 24, 25, 28, 29, 31, 32, 35, 41, 44, 47, 50, 51, 52, 55, 56, 57, 60], "over": [2, 11, 20, 31, 42, 47, 48, 49, 51, 53, 55, 56, 60], "while": [2, 4, 11, 21, 30, 31, 36, 39, 40, 44, 46], "cannot": [2, 3, 4, 7, 10, 11, 20, 21, 22, 23, 31, 32, 39, 44, 48, 49, 52, 55, 60], "other": [2, 4, 6, 7, 10, 11, 12, 20, 22, 28, 30, 31, 32, 41, 44, 45, 46, 47, 49, 52, 56, 60], "complex": [2, 41], "can": [2, 3, 4, 6, 7, 10, 11, 12, 20, 21, 22, 23, 24, 27, 29, 31, 32, 35, 36, 39, 40, 41, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60], "achiev": 2, "pass": [2, 6, 7, 10, 11, 21, 29, 33, 44, 51, 52, 57], "arang": [2, 3, 7, 10, 11, 20, 21, 22, 23, 24, 25, 28, 32, 41, 43, 44, 47, 48, 50, 52, 53, 54, 55, 56, 58], "us": [2, 3, 4, 5, 6, 7, 10, 11, 12, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 33, 35, 36, 40, 41, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60], "desir": [2, 6, 11, 20, 22, 23, 27, 32, 41, 47, 50, 53, 55, 60], "exampl": [2, 3, 4, 7, 10, 11, 17, 20, 21, 22, 23, 24, 25, 28, 30, 31, 32, 37, 40, 41, 44, 46, 47, 48, 50, 51, 52, 53, 55, 56, 58, 59, 60], "number": [2, 3, 4, 5, 6, 7, 10, 11, 12, 18, 20, 21, 22, 23, 28, 29, 31, 32, 36, 42, 44, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60], "word": 2, "keys1": 2, "ak": [2, 3, 4, 6, 7, 10, 11, 12, 13, 17, 20, 21, 22, 23, 24, 25, 28, 30, 31, 32, 33, 36, 41, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60], "twenti": 2, "_": [2, 11, 17, 31, 60], "5": [2, 3, 4, 7, 10, 11, 20, 22, 23, 24, 28, 30, 31, 32, 36, 44, 46, 47, 48, 50, 51, 52, 54, 55, 56, 58, 60], "keys2": 2, "three": [2, 11, 23, 24, 31, 32, 50, 54, 55, 60], "four": [2, 11, 24, 31, 32, 50, 60], "five": [2, 11, 24, 31, 50, 60], "21": [2, 48], "22": [2, 47, 48], "23": [2, 48], "24": [2, 11, 20, 22, 47, 48], "25": [2, 10, 11, 21, 22, 23, 44, 48, 50, 52], "args1": 2, "thirti": 2, "args2": 2, "aku": [2, 7, 11, 12, 26, 45, 51], "direct": 2, "requir": [2, 4, 5, 10, 11, 12, 19, 21, 22, 23, 39, 40, 41, 44, 50, 51, 52], "intermedi": 2, "revkei": 2, "revindic": 2, "size": [2, 3, 4, 6, 7, 9, 10, 11, 15, 19, 20, 22, 23, 28, 29, 30, 31, 32, 33, 35, 36, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 60], "revarg": 2, "idx": 2, "in1d_interv": 2, "interv": [2, 11, 20, 23, 32, 50, 53], "symmetr": [2, 11, 24, 28, 43, 58], "test": [2, 4, 7, 11, 20, 21, 24, 37, 40, 44, 51, 58], "membership": [2, 11, 24, 58], "ani": [2, 3, 4, 7, 10, 11, 12, 14, 20, 21, 22, 28, 31, 35, 40, 43, 44, 47, 51, 52, 53, 55, 56, 60], "half": 2, "open": [2, 11, 14, 21, 32, 44], "python": [2, 3, 4, 6, 7, 11, 22, 23, 24, 27, 29, 31, 32, 37, 39, 43, 44, 47, 48, 49, 50, 51, 54, 55, 60], "int": [2, 3, 4, 5, 6, 7, 9, 10, 11, 15, 17, 18, 19, 20, 22, 23, 27, 28, 29, 31, 32, 35, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60], "float": [2, 5, 7, 11, 19, 20, 22, 23, 47, 50, 51, 53, 55], "2": [2, 3, 4, 7, 10, 11, 17, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 35, 36, 41, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60], "non": [2, 4, 10, 11, 18, 19, 22, 23, 24, 30, 31, 41, 44, 46, 47, 50, 52, 53, 54, 60], "overlap": [2, 11, 18, 31, 60], "lower_bounds_inclus": 2, "upper_bounds_exclus": 2, "true": [2, 4, 6, 7, 10, 11, 12, 15, 17, 18, 20, 21, 22, 23, 24, 25, 28, 29, 31, 33, 36, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60], "boolean": [2, 4, 7, 10, 11, 17, 24, 28, 29, 31, 49, 51, 52, 54, 55, 56, 57, 58, 60], "more": [2, 3, 4, 7, 11, 20, 21, 22, 31, 32, 35, 39, 44, 48, 49, 51, 55, 56, 60], "low": [2, 6, 7, 11, 20, 23, 44, 50], "high": [2, 6, 7, 11, 20, 23, 50], "inclus": [2, 7, 11, 20, 23, 32, 41, 47, 50, 54], "first": [2, 7, 10, 11, 14, 20, 21, 22, 23, 29, 31, 35, 36, 40, 41, 43, 44, 47, 50, 51, 52, 53, 57, 60], "equival": [2, 3, 4, 10, 11, 22, 23, 24, 30, 31, 32, 46, 47, 48, 50, 58], "follow": [2, 5, 11, 20, 22, 35, 36, 41, 47, 49, 52, 55, 56, 58, 59, 60], "But": 2, "much": [2, 3, 4, 11, 22, 31, 32, 44, 48, 49, 55, 60], "faster": [2, 4, 11, 24, 49, 58], "when": [2, 4, 6, 7, 10, 11, 12, 20, 21, 22, 24, 28, 31, 35, 44, 47, 49, 51, 52, 55, 56, 58], "mani": [2, 4, 36, 49, 52], "second": [2, 5, 11, 14, 20, 23, 24, 29, 31, 32, 36, 47, 50, 55, 57, 58, 59, 60], "option": [2, 4, 5, 6, 7, 10, 11, 12, 17, 20, 21, 23, 24, 28, 29, 31, 32, 35, 37, 40, 42, 44, 45, 50, 51, 52, 53, 57, 58, 59, 60], "trivial": 2, "search_interv": 2, "tiebreak": 2, "close": [2, 11, 23, 32, 50], "best": [2, 40], "see": [2, 10, 11, 20, 22, 25, 29, 31, 32, 35, 36, 41, 44, 47, 49, 52, 53, 55, 56, 57, 58, 60], "present": [2, 4, 6, 7, 11, 20, 21, 24, 28, 44, 53, 58], "uint": 2, "upper_bounds_inclus": 2, "numer": [2, 7, 11, 23, 29, 30, 34, 37, 40, 43, 44, 46, 49, 55, 57, 60], "lowest": [2, 7, 11], "chosen": [2, 11, 20, 47, 55, 56], "satisfi": [2, 39, 40, 41], "condit": [2, 11, 20, 36, 47], "all": [2, 4, 5, 7, 10, 11, 12, 13, 16, 17, 18, 20, 21, 22, 24, 28, 29, 31, 32, 33, 35, 36, 39, 41, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60], "interval_lookup": 2, "express": [2, 11, 21, 31, 43, 44, 49, 51, 54, 55], "ordertyp": [3, 11], "arrayview": [3, 11, 21, 22, 33, 37, 43, 44, 55], "pdarrayclass": [3, 4, 6, 7, 10, 11, 12, 15, 17, 20, 21, 23, 24, 28, 29, 30, 31, 32, 33, 34], "order": [3, 4, 6, 7, 10, 11, 20, 21, 22, 23, 24, 28, 29, 30, 31, 33, 36, 40, 41, 43, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 60], "row_major": [3, 11, 22, 48], "multi": [3, 6, 10, 11, 21, 24, 29, 45, 48, 50, 52, 55, 57, 58], "dimension": [3, 11, 21, 23, 29, 41, 44, 48, 55, 57], "view": [3, 11, 48, 55], "arraryview": [3, 11, 48], "behav": [3, 11, 48], "similarli": [3, 11, 48], "numpi": [3, 4, 6, 7, 9, 10, 11, 15, 20, 22, 23, 28, 31, 32, 33, 35, 37, 41, 42, 44, 47, 48, 49, 50, 51, 53, 54, 55, 56, 58, 60], "ndarrai": [3, 4, 11, 20, 22, 23, 25, 28, 31, 32, 33, 36, 40, 41, 44, 47, 48, 49, 53, 55, 56, 60], "store": [3, 10, 11, 21, 23, 27, 28, 31, 41, 44, 48, 49, 50, 52, 56, 60], "dimens": [3, 4, 11, 22, 31, 48, 49, 55, 56], "being": [3, 7, 11, 12, 21, 22, 29, 33, 44, 48, 51, 54, 57], "element": [3, 4, 7, 10, 11, 14, 17, 20, 22, 23, 24, 28, 29, 31, 32, 33, 41, 43, 48, 49, 50, 52, 53, 54, 55, 57, 58, 60], "int_scalar": [3, 9, 10, 11, 20, 22, 23, 31, 32, 47, 48, 50, 52, 53, 55], "specifi": [3, 6, 7, 10, 11, 14, 21, 22, 23, 28, 29, 31, 32, 33, 44, 47, 48, 50, 51, 52, 56], "ndim": [3, 4, 11, 22, 28, 31, 43, 48, 49, 55], "items": [3, 11, 22, 23, 28, 31, 43, 44, 48, 55], "byte": [3, 4, 7, 9, 11, 21, 22, 23, 31, 32, 41, 44, 48, 49, 51, 55, 60], "read": [3, 4, 11, 12, 14, 21, 22, 31, 43, 48, 60], "write": [3, 7, 11, 12, 14, 21, 22, 31, 44, 48], "By": [3, 4, 6, 7, 10, 11, 12, 20, 21, 22, 24, 28, 31, 32, 44, 48, 52, 58, 60], "c": [3, 7, 11, 22, 23, 24, 28, 31, 36, 41, 42, 48, 51, 55, 56, 58, 60], "f": [3, 4, 11, 22, 23, 31, 36, 44, 48, 60], "column_major": [3, 11, 22, 48], "__len__": [3, 4, 7, 11, 12, 22, 29, 31], "__repr__": [3, 4, 6, 7, 11, 12, 17, 19, 22, 26, 28, 29, 31, 32], "repr": [3, 4, 6, 11, 12, 17, 22, 26, 28, 31, 32], "self": [3, 4, 6, 7, 10, 11, 12, 17, 22, 26, 28, 31, 32, 36, 44, 45, 48, 49, 51, 55, 56, 57, 60], "__str__": [3, 4, 6, 7, 11, 17, 19, 22, 26, 28, 31, 32], "__getitem__": [3, 4, 6, 7, 11, 12, 17, 22, 28, 29, 31, 32], "__setitem__": [3, 6, 7, 11, 22, 32], "to_ndarrai": [3, 4, 6, 11, 12, 20, 22, 23, 25, 28, 31, 32, 36, 41, 43, 44, 48, 49, 53, 55, 56, 60], "convert": [3, 4, 6, 7, 11, 20, 22, 23, 28, 29, 31, 32, 33, 44, 48, 49, 51, 55, 56, 57, 58, 60], "np": [3, 4, 7, 9, 10, 11, 15, 20, 22, 23, 25, 28, 31, 32, 44, 47, 48, 49, 50, 51, 52, 53, 55, 56, 60], "transfer": [3, 4, 7, 11, 22, 31, 32, 41, 44, 48, 49, 51, 55, 56, 60], "server": [3, 4, 5, 7, 9, 10, 11, 12, 13, 17, 19, 21, 22, 23, 27, 28, 29, 31, 32, 33, 37, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 55, 56, 60], "client": [3, 4, 7, 11, 22, 23, 31, 32, 34, 35, 37, 40, 43, 48, 49, 51, 55, 56, 60], "side": [3, 4, 5, 7, 10, 11, 12, 13, 17, 22, 28, 29, 31, 32, 40, 41, 44, 47, 48, 52, 53, 54, 55, 56, 59, 60], "exce": [3, 4, 7, 11, 22, 23, 31, 32, 44, 48, 49, 50, 51, 55, 60], "maxtransferbyt": [3, 4, 7, 11, 22, 23, 31, 32, 36, 44, 48, 49, 51, 55, 60], "runtimeerror": [3, 4, 5, 7, 10, 11, 12, 13, 17, 20, 21, 22, 23, 24, 28, 29, 31, 32, 44, 47, 48, 49, 50, 52, 53, 55, 58, 59, 60], "error": [3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 17, 19, 20, 21, 22, 28, 29, 31, 32, 35, 39, 44, 47, 48, 49, 51, 52, 53, 55, 59, 60], "thrown": [3, 4, 7, 11, 12, 13, 17, 22, 28, 29, 31, 32, 44, 47, 48, 53, 55, 60], "built": [3, 4, 11, 22, 31, 32, 40, 44, 48, 49, 55, 60], "limit": [3, 4, 11, 15, 22, 23, 31, 32, 41, 44, 48, 49, 51, 55, 60], "receiv": [3, 5, 11, 21, 22, 31, 32, 44, 48, 55, 59], "doe": [3, 5, 7, 10, 11, 12, 14, 21, 22, 23, 25, 29, 31, 32, 36, 41, 44, 48, 50, 51, 52, 55, 57, 59, 60], "match": [3, 4, 6, 7, 10, 11, 18, 20, 21, 22, 23, 28, 29, 31, 32, 34, 36, 43, 44, 47, 48, 50, 52, 55, 57, 59], "expect": [3, 10, 11, 21, 22, 31, 32, 44, 48, 52, 55], "otherwis": [3, 4, 7, 9, 10, 11, 12, 17, 20, 21, 22, 23, 24, 28, 29, 31, 32, 33, 35, 44, 48, 49, 51, 52, 55, 56, 58, 60], "protect": [3, 4, 11, 22, 23, 31, 32, 44, 48, 49, 55, 60], "user": [3, 4, 6, 7, 10, 11, 12, 19, 20, 21, 22, 23, 25, 27, 28, 29, 31, 32, 33, 36, 40, 41, 44, 48, 49, 52, 55, 60], "overflow": [3, 4, 11, 20, 22, 31, 32, 44, 48, 49, 55, 60], "memori": [3, 4, 5, 11, 22, 31, 32, 41, 44, 48, 49, 55, 60], "system": [3, 4, 11, 22, 27, 31, 32, 39, 40, 44, 47, 48, 49, 55, 59, 60], "run": [3, 4, 5, 11, 20, 22, 28, 31, 32, 39, 40, 41, 42, 44, 48, 49, 55, 56, 59, 60], "assumpt": [3, 4, 11, 22, 23, 31, 32, 44, 48, 49, 55, 60], "distribut": [3, 4, 10, 11, 12, 21, 22, 23, 25, 28, 31, 32, 39, 40, 41, 44, 47, 48, 49, 50, 52, 55, 58, 60], "mai": [3, 4, 7, 11, 21, 22, 23, 24, 31, 32, 39, 44, 48, 49, 50, 51, 55, 60], "overrid": [3, 4, 11, 22, 23, 31, 32, 44, 48, 49, 55, 60], "larger": [3, 4, 11, 22, 23, 31, 32, 40, 44, 48, 49, 55, 60], "proce": [3, 4, 11, 22, 23, 31, 32, 44, 48, 49, 55, 60], "caution": [3, 4, 11, 22, 23, 31, 32, 44, 48, 49, 55, 60], "to_list": [3, 4, 6, 11, 12, 22, 28, 31, 32, 44, 48, 55, 56, 60], "6": [3, 7, 10, 11, 20, 22, 23, 24, 28, 31, 36, 40, 41, 42, 44, 47, 48, 50, 51, 52, 53, 54, 56, 58, 60], "reshap": [3, 11, 22, 43, 48], "3": [3, 7, 10, 11, 17, 20, 22, 23, 24, 25, 28, 30, 31, 32, 36, 37, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 60], "4": [3, 7, 10, 11, 17, 20, 22, 23, 24, 28, 30, 31, 32, 36, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 60], "save": [3, 4, 7, 10, 11, 12, 21, 22, 28, 31, 43, 44, 49, 58], "filepath": [3, 11], "dset": [3, 11, 21], "mode": [3, 4, 10, 11, 12, 21, 22, 28, 31, 40, 43, 44, 50, 52], "truncat": [3, 4, 11, 12, 21, 22, 28, 31, 44], "file_typ": [3, 4, 11, 12, 21, 22, 28, 31, 44], "hdf5": [3, 4, 7, 11, 12, 21, 22, 28, 31, 37, 44, 60], "path": [3, 7, 11, 12, 14, 21, 22, 27, 39, 41, 44], "dataset": [3, 4, 11, 12, 21, 22, 28, 31, 43, 52, 60], "append": [3, 4, 7, 11, 12, 21, 22, 24, 28, 31, 36, 43, 44, 50, 60], "overwrit": [3, 4, 11, 12, 21, 22, 28, 31, 33, 44, 55], "exist": [3, 4, 5, 7, 11, 12, 14, 21, 22, 23, 28, 31, 44, 50, 51, 59], "add": [3, 7, 11, 21, 28, 29, 35, 39, 44, 51], "format": [3, 4, 5, 6, 7, 11, 12, 13, 19, 21, 22, 26, 27, 28, 29, 31, 35, 43, 51, 59, 60], "date": [3, 11, 21, 32], "per": [3, 4, 5, 7, 10, 11, 12, 21, 22, 28, 31, 35, 44, 47, 52], "load": [3, 7, 11, 12, 19, 21, 22, 28, 31, 36, 43], "static": [3, 4, 7, 10, 11, 12, 19, 22, 29, 31, 32, 52], "deprec": [3, 10, 11, 21, 28, 32, 52], "function": [3, 4, 19, 29, 31, 37, 40, 41, 43, 44, 45, 48, 49, 51, 52, 53, 55, 56, 57, 58, 60], "mantain": [3, 11, 21], "allow": [3, 6, 7, 11, 21, 23, 28, 31, 44, 56], "written": [3, 4, 11, 12, 14, 21, 22, 28, 31, 40, 44, 55], "v2022": [3, 11, 21, 44], "10": [3, 10, 11, 20, 21, 22, 23, 25, 28, 29, 30, 31, 36, 39, 41, 44, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57], "13": [3, 11, 20, 21, 44, 47, 48, 53, 54], "earlier": [3, 11, 21, 33, 44], "updat": [3, 4, 7, 10, 11, 21, 22, 25, 31, 44, 52], "file_path": [3, 11, 21], "repres": [3, 4, 6, 7, 10, 11, 21, 28, 29, 31, 32, 36, 49, 52, 60], "kwarg": [4, 10, 11, 23, 26, 32, 33, 49, 52], "belong": [4, 49], "categori": [4, 11, 30, 43, 46, 49], "often": [4, 36, 41, 49, 53], "speed": [4, 11, 24, 49, 50, 58], "oper": [4, 5, 6, 7, 10, 11, 12, 22, 27, 29, 30, 31, 32, 35, 36, 37, 40, 41, 42, 43, 44, 46, 51, 52, 54, 59], "especi": [4, 7, 11, 49], "ar": [4, 6, 7, 10, 11, 12, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 36, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60], "repeat": [4, 11, 28, 49, 56], "cost": [4, 49], "some": [4, 7, 11, 36, 39, 40, 49, 51, 56, 60], "time": [4, 5, 10, 11, 15, 20, 22, 28, 31, 32, 41, 42, 49, 52, 53, 56, 58, 60], "work": [4, 7, 11, 21, 22, 24, 26, 31, 36, 44, 49, 51, 54, 58, 60], "initi": [4, 5, 11, 21, 22, 23, 32, 42, 49, 50, 55, 59], "navalu": [4, 49], "miss": [4, 19, 49], "null": [4, 11, 21, 31, 44, 49, 60], "label": [4, 7, 10, 11, 12, 25, 29, 49, 51, 52, 57], "automat": [4, 11, 29, 40, 41, 49, 57], "code": [4, 11, 12, 30, 35, 36, 41, 43, 46, 49], "n": [4, 7, 10, 11, 20, 22, 23, 24, 28, 29, 31, 32, 41, 42, 47, 48, 49, 50, 51, 52, 56, 57], "permut": [4, 7, 10, 11, 30, 31, 33, 36, 41, 43, 46, 49, 52, 58], "group": [4, 7, 10, 11, 17, 22, 28, 29, 30, 31, 43, 46, 49, 51, 52, 57, 58, 60], "segment": [4, 10, 11, 21, 28, 31, 33, 43, 44, 49, 52, 56, 58, 60], "start": [4, 10, 11, 12, 17, 22, 23, 28, 30, 31, 32, 36, 43, 44, 46, 49, 50, 52, 54, 56, 60], "offset": [4, 10, 11, 21, 23, 31, 44, 49, 58, 60], "union": [4, 5, 6, 7, 10, 11, 12, 13, 15, 20, 21, 22, 23, 24, 28, 29, 30, 31, 33, 36, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 55, 57, 58, 60], "nlevel": [4, 43, 49], "distinct": [4, 7, 11, 49], "rank": [4, 11, 22, 23, 31, 43, 44, 49, 50, 54], "objtyp": [4, 11, 19, 22, 28, 31], "binop": [4, 6, 11, 22, 31, 32], "registerablepiec": 4, "requiredpiec": 4, "from_cod": [4, 43, 49], "make": [4, 6, 7, 11, 20, 32, 36, 39, 40, 49, 51], "pre": [4, 33, 40, 49], "comput": [4, 5, 7, 10, 11, 20, 22, 28, 31, 32, 37, 44, 47, 49, 51, 52, 53, 55, 56, 58, 60], "constructor": [4, 44, 49], "pleas": [4, 7, 10, 11, 22, 31, 32, 49, 51, 52], "normal": [4, 5, 6, 7, 10, 11, 19, 22, 23, 32, 47, 49, 51, 52], "input": [4, 6, 7, 10, 20, 22, 23, 24, 28, 30, 32, 44, 46, 47, 49, 52, 55, 57, 58], "typeerror": [4, 6, 7, 9, 10, 11, 12, 15, 16, 20, 21, 22, 23, 24, 29, 30, 31, 32, 35, 44, 46, 47, 49, 50, 52, 53, 57, 58, 60], "standardize_categori": 4, "standard": [4, 10, 11, 22, 23, 32, 40, 47, 52, 53], "thei": [4, 5, 7, 10, 11, 12, 21, 22, 28, 29, 31, 41, 44, 48, 49, 52, 57], "share": [4, 11, 12, 22, 28, 31, 35, 44], "origin": [4, 7, 10, 11, 17, 20, 21, 22, 24, 28, 31, 44, 47, 49, 50, 51, 52, 56, 60], "remap": 4, "set_categori": 4, "new_categori": 4, "new": [4, 7, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 25, 28, 29, 31, 35, 36, 40, 41, 44, 51, 52, 55, 56, 57, 60], "old": 4, "unchang": 4, "assign": [4, 10, 19, 37, 41, 43, 49, 52, 56, 60], "na": 4, "from_return_msg": [4, 7, 11, 28, 29, 31], "repmsg": [4, 7, 11, 28, 29, 35], "instanc": [4, 6, 7, 10, 11, 19, 22, 23, 28, 29, 31, 44, 47, 51, 52, 53, 55, 60], "point": [4, 7, 11, 12, 22, 23, 28, 29, 44, 50, 51, 55], "compon": [4, 7, 10, 11, 22, 28, 29, 31, 32, 33, 39, 52], "should": [4, 7, 9, 10, 11, 20, 21, 22, 23, 28, 29, 31, 33, 35, 36, 39, 41, 44, 51, 52, 55, 59], "directli": [4, 11, 22, 28, 29, 30, 31, 46, 48, 49, 51, 55, 60], "delimit": [4, 7, 11, 14, 28, 29, 31, 60], "detail": [4, 11, 22, 28, 40, 53, 59, 60], "process": [4, 7, 11, 13, 19, 21, 28, 29, 35, 40, 41, 44, 56, 60], "convers": [4, 40, 44, 49, 55, 60], "produc": [4, 11, 31, 41, 49, 60], "abstract": [4, 11, 22, 31, 36], "__iter__": [4, 11, 22, 31], "_binop": [4, 6, 11, 22, 31, 32], "str_scalar": [4, 9, 11, 18, 31, 60], "op": [4, 6, 11, 22, 28, 31, 32], "execut": [4, 6, 11, 21, 22, 31, 32, 35, 40, 44, 49, 59], "within": [4, 6, 7, 10, 11, 19, 22, 23, 28, 31, 32, 40, 50, 51, 52, 56], "binari": [4, 6, 11, 19, 22, 23, 31, 32, 47], "perform": [4, 7, 10, 11, 15, 20, 21, 22, 24, 31, 36, 37, 40, 41, 43, 44, 47, 50, 51, 52, 55], "encapsul": [4, 6, 11, 19, 22, 23, 27, 31, 32], "_r_binop": [4, 6, 11, 22, 32], "revers": [4, 6, 10, 11, 22, 32], "__eq__": [4, 11, 12, 22, 28, 31], "__ne__": [4, 11, 22, 31], "isna": 4, "where": [4, 5, 7, 10, 11, 12, 14, 15, 20, 21, 22, 23, 24, 27, 28, 31, 33, 35, 39, 43, 44, 50, 52, 53, 54, 55, 56, 58, 59, 60], "reset_categori": 4, "recomput": [4, 11, 28], "unus": 4, "after": [4, 7, 11, 21, 31, 44, 51, 60], "slice": [4, 7, 11, 41, 43, 48, 49, 51, 56, 60], "subset": [4, 7, 11, 28, 36, 47, 51, 56], "In": [4, 7, 10, 11, 21, 22, 31, 35, 36, 40, 41, 44, 47, 52, 53, 54, 56, 59, 60], "case": [4, 5, 10, 11, 12, 20, 21, 22, 29, 31, 32, 44, 47, 57], "elimin": 4, "gener": [4, 7, 11, 12, 19, 20, 22, 23, 25, 27, 28, 29, 31, 32, 34, 35, 36, 41, 42, 44, 47, 50, 57], "substr": [4, 6, 11, 31, 43, 49], "whether": [4, 7, 10, 11, 17, 24, 28, 29, 31, 32, 49, 56, 57, 58, 60], "significantli": [4, 49], "becaus": [4, 7, 11, 21, 23, 28, 31, 36, 40, 41, 44, 49, 50, 51, 56, 60], "instead": [4, 6, 10, 11, 21, 22, 31, 42, 44, 47, 49, 52, 60], "full": [4, 7, 11, 17, 20, 23, 31, 32, 39, 41, 49, 60], "startswith": [4, 11, 31, 43, 49, 60], "endswith": [4, 11, 31, 43, 49, 60], "end": [4, 7, 11, 17, 23, 28, 31, 32, 43, 49, 50, 54, 56, 60], "in1d": [4, 11, 24, 36, 43, 49, 58, 60], "against": [4, 11, 28, 31, 44, 56, 60], "intersect1d": [4, 11, 24, 28, 43, 56, 58], "union1d": [4, 11, 24, 28, 36, 43, 56, 58], "consid": [4, 36, 39, 60], "wise": [4, 11, 20, 43, 48], "d": [4, 11, 23, 24, 28, 31, 32, 35, 36, 41, 42, 56, 58, 60], "b": [4, 7, 10, 11, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 36, 41, 42, 44, 46, 47, 51, 52, 53, 54, 55, 56, 58, 60], "scale": [4, 11, 25], "arbitrarili": 4, "larg": [4, 43, 47], "cat": 4, "9": [4, 7, 10, 11, 20, 22, 23, 28, 30, 31, 41, 44, 46, 47, 48, 50, 52, 54, 56, 60], "cattwo": 4, "place": [4, 7, 10, 11, 22, 27, 31, 33, 36, 39, 47, 52], "togeth": [4, 7, 10, 11, 31, 58], "guarante": [4, 11, 30, 31, 46, 60], "lie": [4, 11, 31], "contigu": [4, 11, 28, 31], "block": [4, 11, 24, 31, 50], "necessarili": [4, 11, 31], "groupbi": [4, 7, 10, 11, 22, 28, 31, 36, 37, 43, 49, 60], "simpli": [4, 5, 40, 50], "even": [4, 7, 10, 11, 22, 32, 41, 47, 51, 52, 59], "integ": [4, 6, 7, 10, 11, 15, 21, 22, 23, 32, 41, 43, 44, 47, 48, 49, 50, 51, 52, 55, 56, 58, 60], "rather": [4, 7, 11, 31, 33], "128": [4, 11, 20, 31], "bit": [4, 6, 11, 12, 20, 22, 31, 44, 48, 51, 55], "_get_grouping_kei": [4, 10, 11, 22, 31, 52], "privat": [4, 11, 22, 31], "api": [4, 10, 11, 22, 31, 35, 36, 37, 52, 55], "groupabl": [4, 10, 11, 22, 24, 31, 52, 58], "co": [4, 10, 11, 20, 22, 23, 31, 43, 47, 52], "argsort": [4, 7, 10, 11, 12, 22, 30, 31, 36, 37, 41, 43, 46, 47, 49, 51, 52, 60], "concaten": [4, 7, 11, 24, 28, 29, 31, 33, 43, 56, 57, 60], "merg": 4, "synchron": 4, "interleav": [4, 7, 11, 24, 50], "greatli": [4, 11, 24, 50], "improv": [4, 11, 24, 50], "determinist": [4, 11, 24, 50], "expens": 4, "slower": [4, 60], "prefix_path": [4, 7, 11, 12, 21, 22, 28, 31, 44], "categorical_arrai": 4, "file_format": [4, 7, 11, 12, 21, 22, 28, 31, 44], "collect": [4, 7, 11, 12, 21, 22, 26, 28, 31, 44], "filenam": [4, 11, 12, 21, 22, 28, 31, 44], "chunk": [4, 11, 12, 21, 22, 31, 44], "output": [4, 6, 10, 11, 12, 19, 20, 21, 22, 28, 31, 32, 44, 47, 53, 55, 58, 59], "impact": [4, 11, 12, 22, 28, 31, 44], "parquet": [4, 7, 11, 12, 21, 22, 28, 31, 44], "messag": [4, 5, 11, 12, 22, 23, 31, 34, 35, 39, 41, 44], "column": [4, 7, 10, 11, 21, 28, 29, 30, 31, 36, 44, 46, 52, 56, 57], "differ": [4, 7, 10, 11, 20, 21, 22, 23, 24, 27, 28, 31, 32, 33, 43, 44, 48, 50, 51, 52, 53, 58], "neither": [4, 11, 12, 22, 23, 31, 32, 44, 50, 60], "nor": [4, 11, 12, 22, 23, 31, 44, 50, 60], "pdarrayio": [4, 11, 31, 34], "load_al": [4, 11, 21, 43, 44], "import": [4, 6, 7, 11, 20, 21, 25, 27, 31, 40, 41, 43, 51, 53, 59], "state": [4, 11, 19, 31, 39], "charact": [4, 6, 11, 23, 31, 35, 60], "via": [4, 7, 10, 11, 22, 23, 31, 39, 40, 41, 44, 49, 52, 54, 55, 60], "regist": [4, 7, 10, 11, 12, 13, 22, 28, 29, 31, 33, 43, 52], "user_defined_nam": [4, 7, 10, 11, 22, 31, 52], "underli": [4, 7, 10, 11, 20, 52], "now": [4, 7, 10, 11, 20, 22, 28, 31, 33, 35, 36, 41, 52, 53], "ha": [4, 7, 10, 11, 20, 21, 22, 23, 24, 28, 29, 31, 32, 40, 44, 47, 49, 50, 51, 52, 54, 55, 56, 57], "modif": [4, 7, 10, 11, 22, 31, 51, 52], "fluid": [4, 7, 10, 11, 22, 31, 52], "program": [4, 7, 10, 11, 22, 31, 39, 40, 41, 52, 59], "registrationerror": [4, 7, 10, 11, 22, 31, 52], "unregist": [4, 7, 10, 11, 22, 28, 29, 31, 33, 43, 52], "attach": [4, 7, 10, 11, 22, 28, 29, 31, 33, 43, 52], "unregister_categorical_by_nam": 4, "is_regist": [4, 7, 10, 11, 12, 22, 28, 29, 31, 43, 52], "immun": [4, 7, 10, 11, 22, 31, 52], "delet": [4, 5, 7, 10, 11, 22, 31, 41, 52], "until": [4, 7, 10, 11, 22, 31, 52], "previous": [4, 7, 10, 11, 12, 21, 22, 31, 44, 52], "attempt": [4, 7, 10, 11, 12, 21, 22, 30, 31, 33, 44, 51, 52], "bool_": [4, 11, 22, 31, 47, 53], "iff": [4, 11, 22, 31, 47, 53], "registri": [4, 7, 10, 11, 12, 13, 22, 31, 52], "mi": 4, "_get_components_dict": 4, "dict": [4, 5, 7, 10, 11, 14, 19, 21, 26, 36, 44, 51, 52], "intern": [4, 10, 11, 22, 31], "dictionari": [4, 5, 7, 10, 11, 14, 19, 21, 31, 44, 51, 52], "components_dict": 4, "ve": 4, "_list_component_nam": [4, 11, 22, 31], "info": [4, 7, 11, 13, 16, 22, 31], "json": [4, 5, 11, 13, 19, 22, 27, 31], "about": [4, 5, 11, 13, 22, 31, 32, 36, 47, 48, 60], "pretty_print_info": [4, 11, 22, 31], "print": [4, 5, 7, 11, 13, 22, 26, 31, 35, 36, 41, 59], "human": [4, 11, 13, 22, 31], "readabl": [4, 11, 13, 21, 22, 31, 44], "issu": [4, 7, 10, 11, 35, 52, 56], "parse_hdf_categor": 4, "conjunct": [4, 44, 49, 60], "reconstitut": 4, "convent": 4, "structur": [4, 7, 11, 28, 44, 51, 52, 55, 56, 60], "construct": [4, 11, 28, 31, 32, 36, 43, 52, 54], "either": [4, 7, 10, 11, 13, 20, 21, 22, 23, 24, 28, 29, 40, 44, 56, 57, 58], "remov": [4, 7, 11, 22, 31, 36, 51, 56, 60], "connect": [5, 11, 23, 27, 37, 43, 44], "localhost": [5, 41, 59], "port": [5, 41, 42, 59], "5555": [5, 41, 59], "timeout": [5, 59], "access_token": [5, 59], "connect_url": [5, 41, 59], "hostnam": [5, 41, 42, 59], "visibl": [5, 11, 12, 21, 22, 44, 59], "machin": [5, 40, 59], "send": [5, 7, 11, 22, 23, 28, 35, 44, 51, 59], "whicn": [5, 59], "interpret": [5, 11, 21, 44, 59], "token": [5, 19, 27, 41, 59], "socket": [5, 33, 59], "enabl": [5, 11, 16, 22, 27, 40, 44, 59], "authent": [5, 27, 41, 59], "complet": [5, 35, 59, 60], "url": [5, 41, 59], "tcp": [5, 41, 59], "token_valu": [5, 59], "connectionerror": [5, 59], "pars": [5, 6, 7, 11, 12, 19, 22, 35, 44, 59], "On": [5, 59], "success": [5, 11, 20, 28, 55, 59], "address": [5, 6, 11, 59], "seen": [5, 59], "disconnect": [5, 11, 22], "shutdown": [5, 37], "symtabl": 5, "shut": 5, "down": [5, 11, 32], "stop": [5, 11, 23, 50, 54], "runtim": 5, "serverhostnam": 5, "serverport": 5, "numlocal": [5, 11, 12, 21, 22, 44, 59], "numpu": 5, "processor": [5, 39], "unit": [5, 7, 11, 32], "maxtaskpar": 5, "maximum": [5, 7, 10, 11, 22, 23, 32, 47, 50, 51, 52, 53], "task": 5, "physicalmemori": 5, "get_mem_us": 5, "amount": [5, 7, 11, 22, 36, 51, 60], "symbol": [5, 11, 13, 19, 22, 31, 33, 35, 55], "tabl": [5, 11, 13, 19, 22, 28, 31, 35, 55, 56], "alloc": 5, "get_server_command": 5, "avail": [5, 11, 21, 22, 44, 53], "retriev": [5, 11, 13, 22, 27, 29], "commandmap": [5, 35], "print_server_command": 5, "ruok": 5, "imok": 5, "arkouda_serv": [5, 9, 11, 41, 59], "imnotok": 5, "occur": [5, 7, 10, 11, 18, 20, 21, 29, 31, 35, 44, 52, 53, 57, 60], "basic": [5, 11, 22, 27, 36, 48, 55], "wai": [5, 39, 40, 41, 47, 49, 50, 51, 55, 60], "quick": 5, "healthcheck": 5, "handl": [5, 7, 11, 20, 21, 31, 32, 44, 51, 55, 60], "did": 5, "respons": [5, 11, 31, 35], "latter": [5, 60], "bitvector": [6, 11], "width": [6, 11, 60], "64": [6, 11, 20, 22, 23, 50, 51, 55], "callback": [6, 11], "field": [6, 11, 19, 23, 31, 35, 44, 60], "vector": [6, 10, 11, 41, 43, 52], "displai": [6, 11, 25, 33], "least": [6, 7, 11, 28, 30, 31, 46, 56], "signific": [6, 11, 20, 22, 30, 46, 47], "most": [6, 10, 11, 18, 29, 31, 36, 40, 41, 44, 50, 52, 55, 57, 60], "take": [6, 10, 11, 36, 39, 44, 52], "callabl": [6, 7, 11, 51], "flag": [6, 11, 25, 59], "thin": [6, 11], "wrapper": [6, 11, 55], "around": [6, 11], "mostli": [6, 11], "affect": [6, 11], "how": [6, 11, 20, 35, 48, 52, 55], "typic": [6, 11, 35, 40, 49], "uint64": [6, 9, 10, 11, 20, 22, 23, 30, 42, 46, 47, 50, 51, 53, 55, 60], "conserv": [6, 11], "x": [6, 7, 10, 11, 21, 22, 25, 28, 31, 32, 33, 44, 47, 48, 49, 51, 52, 55, 56, 60], "export": [6, 11, 20, 21, 40, 43, 53], "_cast": [6, 11], "upon": [6, 11, 20, 22, 31, 32, 47], "opeq": [6, 11, 22, 32], "msb_left": [6, 11], "pad": [6, 11], "separ": [6, 11, 14, 31, 44, 55, 60], "show_int": [6, 11], "back": [6, 10, 11, 22, 36, 44, 52], "represent": [6, 11, 22, 41], "u": [6, 11, 23, 32, 44], "accord": [6, 7, 11, 20, 40, 41, 51, 55], "control": [6, 11, 20, 55], "empti": [6, 7, 10, 11, 19, 20, 21, 22, 24, 29, 44, 47, 50, 51, 53, 57], "_convert_str": [6, 11], "_parse_scalar": [6, 11], "ip_address": [6, 11, 12, 45], "ip": [6, 11], "ipv4": [6, 11], "helper": [6, 7, 11, 31], "intend": [6, 11, 20, 45, 51, 57], "help": [6, 11], "futur": [6, 11, 21, 28, 31, 44, 53], "proof": [6, 11], "chang": [6, 7, 11, 12, 21, 22, 44, 47, 51], "made": [6, 7, 11, 31, 60], "accomod": [6, 11], "ipv6": [6, 11], "prevent": [6, 11, 21, 28, 56], "inadvert": [6, 11], "cast": [6, 11, 20, 22, 23, 31, 35, 43, 44, 50, 60], "It": [6, 7, 11, 27, 33, 51, 52, 56], "ipaddress": [6, 11], "_is_supported_scalar": [6, 11, 32], "is_ipv4": [6, 11], "ip2": [6, 11], "well": [6, 11, 36], "ad": [6, 10, 11, 37, 39, 52, 59], "deal": [6, 11], "is_ipv6": [6, 11], "initialdata": [7, 11, 51], "userdict": [7, 11, 26], "panda": [7, 10, 11, 12, 21, 23, 29, 32, 35, 37, 44, 45, 49, 51, 52], "pd": [7, 11, 21, 23, 32, 36, 44, 51], "usernam": [7, 11, 27, 36, 51], "alic": [7, 11, 36, 51], "bob": [7, 11, 36, 51], "carol": [7, 11, 36, 51], "userid": [7, 11, 36, 51, 52], "111": [7, 11, 36, 51], "222": [7, 11, 36, 51], "333": [7, 11, 36, 51], "dai": [7, 11, 32, 36, 51, 52], "224": [7, 11, 51], "slightli": [7, 11, 51], "7": [7, 10, 11, 20, 22, 23, 24, 28, 30, 44, 46, 47, 48, 50, 51, 52, 54, 56, 58], "stride": [7, 11, 23, 28, 50, 51, 54], "148": [7, 11, 51], "112": [7, 11, 51], "96": [7, 11, 22, 51], "summari": [7, 11], "column_class": [7, 11], "__getattr__": [7, 11], "__dir__": [7, 11], "dir": [7, 11], "__delitem__": [7, 11], "_ncol": [7, 11], "want": [7, 11, 40, 51], "util": [7, 11, 21, 34], "actual": [7, 11, 28, 36], "move": [7, 11, 28, 30, 40, 41, 46, 50, 56], "_get_head_tail": [7, 11], "_get_head_tail_serv": [7, 11], "_shape_str": [7, 11], "ascii": [7, 11, 26, 29], "_repr_html_": [7, 11, 26], "html": [7, 11, 26, 48], "_ipython_key_completions_": [7, 11], "from_panda": [7, 11], "pd_df": [7, 11], "_drop_column": [7, 11], "drop": [7, 11, 22, 47], "axi": [7, 11, 25, 28, 29, 51, 56, 57], "_drop_row": [7, 11], "inplac": [7, 11, 51], "datefram": [7, 11, 51], "col_nam": [7, 11, 51], "drop_dupl": [7, 11, 51], "duplcat": [7, 11, 51], "provid": [7, 10, 11, 19, 21, 22, 28, 31, 41, 44, 47, 51, 52, 56], "duplic": [7, 11, 51], "iter": [7, 11, 21, 23, 30, 43, 44, 46], "dedup": [7, 11, 51], "last": [7, 11, 22, 29, 30, 31, 41, 46, 51, 57, 59, 60], "_set_index": [7, 11], "reset_index": [7, 11, 51], "anoth": [7, 10, 11, 20, 21, 31, 41, 44, 51, 52, 54, 55, 56, 60], "longer": [7, 11, 23, 51], "caller": [7, 11, 51], "consist": [7, 11, 20, 47, 51], "correctli": [7, 11, 51], "behavior": [7, 11, 23, 47, 48, 50, 51, 60], "update_s": [7, 11], "_rename_column": [7, 11], "mapper": [7, 11, 51], "renam": [7, 11, 36], "nonexist": [7, 11, 51], "_rename_index": [7, 11], "exactli": [7, 11, 32], "here": [7, 11, 33, 36, 41, 59], "ignor": [7, 10, 11, 20, 21, 32, 44, 51, 55], "99": [7, 11, 51], "11": [7, 11, 20, 28, 47, 48, 51, 53, 54, 56], "lower": [7, 11, 31, 51], "onto": [7, 11, 31, 60], "explicitli": [7, 11, 24, 41, 58], "done": [7, 11, 21, 28, 35, 36, 44, 51], "sens": [7, 11], "whose": [7, 11, 28, 29, 31, 57], "better": [7, 11], "remain": [7, 11, 21, 40, 41, 44, 45, 51, 57], "compat": [7, 11, 22, 28, 32, 33, 51, 52], "concat": [7, 11, 12, 28, 29, 51, 57], "essenti": [7, 11, 22, 28, 31, 51, 56], "diffen": [7, 11, 51], "head": [7, 11, 29], "quickli": [7, 11, 51], "verifi": [7, 11, 44, 51], "select": [7, 11, 28, 35, 51, 56], "tail": [7, 11, 23, 29], "your": [7, 11, 35, 39, 40, 41, 51, 59, 60], "sampl": [7, 11, 23], "random": [7, 11, 23, 36, 41, 42, 43], "use_seri": [7, 11, 51], "oject": [7, 11], "memory_usag": [7, 11], "gb": [7, 11, 36], "One": [7, 10, 11, 22, 29, 52, 57], "kb": [7, 11], "mb": [7, 11], "to_panda": [7, 11, 12, 29, 32, 51, 57], "datalimit": [7, 11, 51], "retain_index": [7, 11, 51], "megabyt": [7, 11, 51], "estim": [7, 10, 11, 22, 47, 51, 52], "book": [7, 11, 51], "disk": [7, 11, 33, 43, 60], "preserv": [7, 11, 29, 57, 60], "suffix": [7, 11, 28, 31, 43, 60], "infer": [7, 9, 10, 11, 21, 23, 33, 44], "ascend": [7, 10, 11, 12, 20, 29, 45, 51, 53, 57], "coargsort": [7, 11, 30, 36, 43, 46, 49, 51, 60], "yield": [7, 11, 51, 54], "sort_valu": [7, 11, 29, 51, 57], "fail": [7, 11, 20, 21, 39, 44, 51, 55], "descend": [7, 11, 23, 29, 50, 51, 57], "apply_permut": [7, 11, 51], "perm": [7, 11, 30, 33, 36, 41, 46, 51], "entir": [7, 11, 28, 31, 51, 56], "unsort": [7, 11, 51], "arbitrari": [7, 11, 51], "invers": [7, 11, 33, 51], "veri": [7, 11, 36, 50, 51], "minim": [7, 11, 40, 50, 51], "ensur": [7, 11, 20, 39, 51, 55], "filter_by_rang": [7, 11], "count": [7, 10, 11, 18, 20, 22, 28, 29, 31, 32, 36, 43, 47, 52, 56, 60], "To": [7, 10, 11, 20, 32, 41, 48, 49, 51, 53, 55, 60], "filter": [7, 11, 36, 44], "specif": [7, 11, 21, 43, 44, 51], "highest": [7, 11], "unlimit": [7, 11], "qualifi": [7, 11], "filter_by_count": [7, 11], "copi": [7, 11, 28, 30, 39, 56], "deep": [7, 11, 28, 51], "reflect": [7, 11, 51, 56], "without": [7, 11, 21, 22, 44, 51], "shallow": [7, 11, 51], "vice": [7, 11, 44, 51], "versa": [7, 11, 44, 51], "alia": [7, 10, 11, 28, 32, 51, 52], "isin": [7, 11, 29], "show": [7, 11, 21, 25, 41, 44, 48, 52], "col_a": [7, 11], "col_b": [7, 11], "everi": [7, 11, 51, 60], "position": [7, 11], "other_df": [7, 11], "col_c": [7, 11], "corr": [7, 11, 22], "pairwis": [7, 11], "correl": [7, 11, 22], "matrix": [7, 10, 11, 52], "pearson": [7, 11, 22], "r": [7, 11, 42], "possibl": [7, 11, 20, 21, 28, 31, 32, 35, 36, 44, 56, 60], "unregister_dataframe_by_nam": [7, 11], "mismatch": [7, 10, 11, 52], "unregister_groupby_by_nam": [7, 10, 11, 43, 52], "_parse_col_nam": [7, 11], "entrynam": [7, 11], "dfname": [7, 11], "pull": [7, 11, 23, 33, 50], "columnnam": [7, 11], "columntyp": [7, 11], "analog": [7, 10, 11, 32, 36, 52], "intx": [7, 11], "ident": [7, 11, 33, 47, 55], "categor": [7, 10, 11, 20, 21, 24, 28, 29, 30, 33, 34, 37, 43, 44, 46, 50, 51, 52, 53, 57, 58], "intersect": [7, 11, 24, 28, 43, 58], "posit": [7, 11, 17, 18, 29, 31, 54, 57, 60], "equal": [7, 11, 15, 20, 53, 56], "effici": [7, 11, 56, 60], "onc": [7, 11, 22, 28, 31], "invert_permut": [7, 11, 33], "objtypedec": [8, 11], "orig_cl": [8, 11], "float64": [9, 10, 11, 20, 22, 23, 24, 30, 36, 42, 46, 47, 50, 51, 52, 53, 55, 58], "uint8": [9, 11, 20, 47, 50, 53, 55, 60], "str_": [9, 11, 47, 53, 60], "inttyp": [9, 11], "bittyp": [9, 11], "bool_scalar": [9, 11], "float_scalar": [9, 11, 23], "numeric_scalar": [9, 11, 20, 22, 23, 47, 50], "numpy_scalar": [9, 11, 22, 47], "all_scalar": [9, 11, 23, 50], "enum": [9, 11, 16, 19, 20], "form": [9, 11, 12, 22, 27, 28, 31, 39, 44, 60], "arkouda_supported_dtyp": [9, 11], "dtypeobject": [9, 11], "check_np_dtyp": [9, 11], "dt": [9, 11, 15, 20, 29, 55], "assert": [9, 11, 41], "translate_np_dtyp": [9, 11], "split": [9, 11, 18, 31, 35, 43], "kind": [9, 11], "unsupport": [9, 10, 11, 21, 27, 30, 44, 58], "resolve_scalar_dtyp": [9, 11], "what": [9, 11, 28, 35, 59], "get_byteord": [9, 11], "concret": [9, 11], "byteord": [9, 11], "turn": [9, 11, 29, 41, 57], "get_server_byteord": [9, 11], "pda": [10, 11, 20, 22, 23, 30, 32, 35, 46, 47, 50, 53, 55, 58], "return_group": [10, 58], "assume_sort": [10, 52, 58], "There": [10, 11, 21, 50, 58], "addit": [10, 11, 20, 25, 35, 39, 55, 58, 59], "come": [10, 11, 21, 40, 44, 50, 58], "skip": [10, 11, 21, 31, 44, 52, 58, 60], "step": [10, 58, 59], "consider": [10, 58, 60], "groupby_reduction_typ": 10, "usual": [10, 35, 52], "prepar": [10, 52], "aggreg": [10, 11, 28, 33, 36, 43, 44, 52], "nkei": [10, 11, 29, 43, 52], "unique_kei": [10, 43, 52], "ngroup": [10, 43, 52], "logger": [10, 11, 31, 34, 43, 52], "log": [10, 11, 16, 20, 23, 25, 31, 43, 47, 52], "arkoudalogg": [10, 11, 16, 31, 52], "integr": [10, 11, 22, 23, 44, 50, 52], "nativ": [10, 44, 52, 56], "inherit": [10, 52, 55], "overload": [10, 52], "reduct": [10, 11, 22, 42, 43, 52, 53], "conform": [10, 35, 36, 52], "randint": [10, 11, 20, 23, 30, 36, 41, 43, 46, 47, 50, 52, 53], "skipna": [10, 52], "ddof": [10, 11, 22, 32, 47, 52, 53], "reduc": [10, 37, 52], "nan": [10, 11, 20, 29, 52, 55], "delta": [10, 11, 15, 22, 47, 52, 53], "degre": [10, 11, 22, 36, 47, 52, 53], "freedom": [10, 11, 22, 47, 52, 53], "calcul": [10, 11, 21, 22, 24, 36, 44, 47, 52, 53, 58], "std": [10, 11, 22, 32, 43, 47, 52, 53], "linspac": [10, 11, 20, 23, 43, 47, 50, 52, 55], "sum": [10, 11, 20, 22, 28, 32, 36, 43, 47, 52, 53], "8": [10, 11, 22, 23, 28, 30, 44, 46, 47, 48, 50, 51, 52, 54, 55, 56], "77777777777777768": [10, 52], "55555555555555536": [10, 52], "33333333333333348": [10, 52], "11111111111111116": [10, 52], "min": [10, 11, 20, 22, 28, 32, 41, 43, 47, 52, 53], "77777777777777779": [10, 52], "55555555555555558": [10, 52], "33333333333333337": [10, 52], "33333333333333326": [10, 52], "group_sum": [10, 52], "14": [10, 47, 48, 52, 54], "prod": [10, 11, 22, 28, 43, 47, 52, 53], "product": [10, 11, 20, 22, 23, 40, 41, 44, 47, 48, 52, 53], "multipli": [10, 41, 52], "group_product": [10, 52], "12": [10, 11, 20, 28, 31, 47, 48, 52, 54, 56], "108": [10, 52], "00000000000003": [10, 52], "9999999999999982": [10, 52], "var": [10, 11, 22, 35, 43, 47, 52, 53], "varianc": [10, 11, 22, 47, 52, 53], "group_var": [10, 52], "averag": [10, 11, 22, 23, 47, 52], "squar": [10, 11, 22, 47, 52], "deviat": [10, 11, 22, 23, 32, 47, 52, 53], "len": [10, 11, 22, 28, 31, 47, 52, 54, 56, 60], "howev": [10, 11, 20, 22, 39, 40, 47, 49, 52], "divisor": [10, 11, 22, 47, 52], "statist": [10, 11, 22, 43, 47, 52], "practic": [10, 11, 22, 47, 52], "unbias": [10, 11, 22, 47, 52], "hypothet": [10, 11, 22, 47, 52], "infinit": [10, 11, 22, 47, 52], "likelihood": [10, 11, 22, 47, 52], "variabl": [10, 11, 21, 22, 27, 28, 31, 39, 40, 41, 44, 47, 52, 56, 60], "333333333333333": [10, 52], "group_std": [10, 52], "sqrt": [10, 11, 22, 47, 52], "se": [10, 11, 22, 47, 52], "5275252316519465": [10, 52], "0954451150103321": [10, 52], "group_mean": [10, 52], "6666666666666665": [10, 52], "7999999999999998": [10, 52], "median": [10, 43, 52], "group_median": [10, 52], "75": [10, 11, 23, 50, 52], "minimum": [10, 11, 22, 23, 32, 47, 52, 53], "minima": [10, 52], "group_minima": [10, 52], "max": [10, 11, 20, 22, 28, 31, 32, 41, 43, 47, 52, 53, 60], "maxima": [10, 52], "group_maxima": [10, 52], "argmin": [10, 11, 22, 28, 43, 47, 52, 53], "locat": [10, 11, 12, 22, 27, 29, 31, 35, 39, 44, 52, 57, 60], "group_argminima": [10, 52], "argmax": [10, 11, 22, 28, 43, 47, 52, 53], "refer": [10, 37, 52], "group_argmaxima": [10, 52], "_nested_grouping_help": 10, "nuniqu": [10, 11, 28, 36, 43, 52], "group_nuniqu": [10, 52], "group_ani": [10, 52], "OR": [10, 11, 28, 43, 52], "bitwis": [10, 52, 55], "AND": [10, 11, 28, 43, 52], "xor": [10, 11, 22, 28, 43, 52], "groupable_element_typ": [10, 11, 24, 29, 52, 57], "modal": [10, 52], "segarrai": [10, 11, 33, 34, 37, 43, 51, 52], "broadcast": [10, 33, 43, 52], "fill": [10, 11, 22, 23, 42, 50, 52], "constant": [10, 11, 22, 43, 52], "put": [10, 35, 52], "tensor": [10, 52], "replic": [10, 52], "zero": [10, 11, 20, 22, 23, 43, 50, 52, 54, 55], "With": [10, 48, 52, 54], "build_from_compon": [10, 43, 52], "init": [10, 36, 52], "rebuild": [10, 39, 52], "orig_kei": [10, 52], "_get_groupby_required_piec": 10, "most_common": [10, 33, 43, 52], "total": [10, 11, 21, 31, 36, 44], "nonzero": [10, 11, 18, 31, 60], "go": [10, 50], "invert": [10, 11, 24, 58], "suppli": [10, 11, 21, 23, 28, 44, 50, 51], "less": [10, 11, 12, 22, 32, 36, 44], "row_start": 10, "nnz": 10, "row_numb": 10, "_version": [11, 34], "accessor": [11, 34], "align": [11, 29, 34], "array_view": [11, 21, 33, 34, 48], "client_dtyp": [11, 34], "groupbyclass": [11, 24, 29, 34], "infoclass": [11, 34], "io_util": [11, 34], "join": [11, 28, 31, 34, 35, 43], "matcher": [11, 31, 34], "pdarraycr": [11, 34], "pdarraysetop": [11, 28, 34, 35, 56], "plot": [11, 20, 34, 44, 53], "secur": [11, 20, 34], "timeclass": [11, 34], "__version__": 11, "akcast": 11, "errormod": [11, 20, 55], "strict": [11, 20, 55], "target": [11, 14, 20, 23, 44, 50, 54, 55], "return_valid": [11, 20, 55], "never": [11, 20, 55], "uninterpret": [11, 20, 55], "63": [11, 20, 22, 55], "succeed": [11, 20, 55], "chapel": [11, 19, 20, 37, 55, 59, 60], "rule": [11, 20, 55], "NOT": [11, 20, 41, 44, 55], "safe": [11, 20, 55], "underflow": [11, 20, 55], "precis": [11, 20, 21, 44, 55], "capac": [11, 20, 55], "hold": [11, 20, 36, 55], "cumprod": [11, 20, 43, 47], "cumul": [11, 20, 25, 42, 47], "th": [11, 20, 28, 47, 56], "uniform": [11, 20, 23, 30, 44, 46, 47, 50], "5728783400481925": [11, 20, 47], "0472855509390593": [11, 20, 47], "33": [11, 20, 47], "78523998586553": [11, 20, 47], "134": [11, 20, 47], "05309592737584": [11, 20, 47], "450": [11, 20, 47], "21589865655358": [11, 20, 47], "As": [11, 20, 22, 29, 40, 44, 47, 55, 57, 60], "choos": [11, 20, 47, 59], "claus": [11, 20, 47], "section": [11, 20, 35, 41, 47], "unequ": [11, 20, 47], "a1": [11, 15, 20, 47], "a2": [11, 15, 20, 47], "ones": [11, 20, 23, 36, 42, 43, 47, 50], "cond": [11, 20, 47], "create_pdarrai": [11, 35], "datatyp": [11, 23], "gpu": [11, 22], "six": [11, 31, 60], "parse_single_valu": 11, "msg": [11, 19], "mydtyp": [11, 22, 55], "attributi": [11, 22, 55], "resid": [11, 22, 31, 41, 55], "opeqop": [11, 22], "__array_priority__": [11, 22], "1000": [11, 15, 22, 53], "__del__": [11, 22], "__bool__": [11, 22], "format_oth": [11, 22], "__add__": [11, 22, 31], "__radd__": [11, 22, 31], "__sub__": [11, 22], "__rsub__": [11, 22], "__mul__": [11, 22], "__rmul__": [11, 22], "__truediv__": [11, 22], "__rtruediv__": [11, 22], "__floordiv__": [11, 22], "__rfloordiv__": [11, 22], "__mod__": [11, 22], "__rmod__": [11, 22], "__lshift__": [11, 22], "__rlshift__": [11, 22], "__rshift__": [11, 22], "__rrshift__": [11, 22], "__and__": [11, 22], "__rand__": [11, 22], "__or__": [11, 22], "__ror__": [11, 22], "__xor__": [11, 22], "__rxor__": [11, 22], "__pow__": [11, 22], "__rpow__": [11, 22], "__lt__": [11, 22], "__gt__": [11, 22], "__le__": [11, 22], "__ge__": [11, 22], "__neg__": [11, 22], "__invert__": [11, 22], "__iadd__": [11, 22], "__isub__": [11, 22], "__imul__": [11, 22], "__itruediv__": [11, 22], "__ifloordiv__": [11, 22], "__ilshift__": [11, 22], "__irshift__": [11, 22], "__iand__": [11, 22], "__ior__": [11, 22], "__ixor__": [11, 22], "__ipow__": [11, 22], "is_sort": [11, 22, 43, 47, 53], "monoton": [11, 22, 41, 47, 53], "decreas": [11, 22, 23, 41, 47, 50, 53], "numeric_and_bool_scalar": [11, 22], "occurr": [11, 18, 20, 22, 31, 47, 53, 60], "cov": [11, 22], "y": [11, 22, 25], "covari": [11, 22], "between": [11, 15, 22, 23, 28, 31, 32, 40, 43, 50, 53, 55, 60], "coeffici": [11, 22], "mink": [11, 22, 32, 43, 47, 53], "k": [11, 22, 32, 47, 53], "maxk": [11, 22, 32, 43, 47, 53], "argmink": [11, 22, 43, 47, 53], "argmaxk": [11, 22, 43, 47, 53], "popcount": [11, 22], "pariti": [11, 22], "clz": [11, 22], "lead": [11, 22, 31], "ctz": [11, 22], "trail": [11, 22, 31], "rotl": [11, 22], "rotat": [11, 22], "rotr": [11, 22], "astyp": [11, 22, 31], "shorthand": [11, 22, 31], "give": [11, 22, 29, 57, 59], "fastest": [11, 22], "fortran": [11, 22, 55], "to_cuda": [11, 22], "numba": [11, 22], "devicend": [11, 22], "builtin": [11, 22], "devicendarrai": [11, 22], "importerror": [11, 22], "cuda": [11, 22], "modulenotfounderror": [11, 22], "instal": [11, 22, 37, 40, 41, 59], "cours": [11, 22], "compress": [11, 12, 22, 28, 31, 36, 44, 54, 56], "snappi": [11, 12, 22, 31, 44], "rle": [11, 12, 22, 31, 44], "pack": [11, 12, 22, 31, 44], "insensit": [11, 12, 21, 22, 31, 44], "save_al": [11, 12, 21, 22, 43, 44], "permiss": [11, 12, 22, 44], "_local": [11, 12, 22, 44], "overwritten": [11, 12, 21, 22, 44], "o": [11, 12, 22, 27, 37, 40, 43], "reli": [11, 12, 22, 44, 52], "name_prefix_local": [11, 21, 22, 44], "h5": [11, 21, 22, 44], "save_parquet": [11, 22, 31], "encod": [11, 22, 60], "100": [11, 20, 22, 47], "arkouda_rang": [11, 22], "arkouda_range_locale0000": [11, 22], "save_hdf": [11, 22, 31], "later": [11, 22, 31], "former": [11, 22, 31, 60], "free": [11, 22, 31], "registr": [11, 22, 31], "list_registri": [11, 13, 22], "unregister_pdarray_by_nam": [11, 22], "my_zero": [11, 22], "potenti": [11, 22], "reconnect": [11, 22], "attahc": [11, 22], "could": [11, 19, 22, 25, 31, 60], "bound": [11, 22, 23, 28, 32, 50, 56], "consecut": [11, 23, 29, 50], "third": [11, 23, 50], "exclus": [11, 23, 24, 50, 54, 58], "zerodivisionerror": [11, 23, 50], "neg": [11, 23, 28, 50, 54, 56], "compos": [11, 19, 23, 31, 41, 44], "dequ": [11, 23, 44], "nbyte": [11, 23, 31, 44], "malform": [11, 19, 23, 44], "overwhelm": [11, 23, 44], "bandwidth": [11, 23, 44], "pdrrai": [11, 23, 44], "twice": [11, 23, 44], "recurs": [11, 23, 44], "respect": [11, 20, 23, 24, 32, 44, 50], "Ones": [11, 23, 50], "parseabl": [11, 23, 50], "ones_lik": [11, 23, 43, 50], "zeros_lik": [11, 23, 43, 50], "read_hdf5_multi_dim": [11, 21], "write_hdf5_multi_dim": [11, 21], "soon": [11, 21], "glob": [11, 21, 44], "major": [11, 21, 45, 51, 57], "flatten": [11, 21, 28, 31, 43, 56], "regardless": [11, 21], "standalon": [11, 21], "issupportedint": 11, "num": 11, "strings_pdarrai": [11, 31], "bytes_s": [11, 31], "composit": [11, 31], "raw": [11, 31, 60], "rep_msg": [11, 28, 31], "factori": [11, 12, 19, 31], "1234": [11, 31], "realli": [11, 31], "probabl": [11, 31, 36], "from_part": [11, 28, 31], "offset_attrib": [11, 31], "bytes_attrib": [11, 31], "part": [11, 28, 31, 33, 60], "instruct": [11, 31, 40, 59], "assembl": [11, 31], "entiti": [11, 31], "get_length": [11, 31], "idna_encod": [11, 31], "idna_decod": [11, 31], "to_low": [11, 31], "uppercas": [11, 23, 31], "lowercas": [11, 23, 31], "to_upp": [11, 31], "to_titl": [11, 31], "titlecas": [11, 31], "is_low": [11, 31], "is_upp": [11, 31], "upper": [11, 31], "is_titl": [11, 31], "mix": [11, 31, 32, 48], "titl": [11, 31], "strip": [11, 31], "char": [11, 31], "omit": [11, 31, 32], "whitespac": [11, 21, 31, 44], "combin": [11, 31, 32], "1string": [11, 31], "cached_regex_pattern": [11, 31], "regex": [11, 31, 60], "pattern": [11, 17, 18, 31, 37, 52, 60], "purge_cached_regex_pattern": [11, 31], "purg": [11, 31], "_empty_pattern_verif": [11, 31], "_get_match": [11, 31], "fetch": [11, 31], "find_loc": [11, 18, 31, 43, 60], "postit": [11, 31, 60], "positon": [11, 31, 60], "findal": [11, 18, 31, 43, 60], "num_match": [11, 31, 60], "regular": [11, 31, 43], "1_2___": [11, 17, 31, 60], "____": [11, 17, 31, 60], "__4___5____6___7": [11, 17, 31, 60], "span": [11, 31, 60], "begin": [11, 31, 54, 60], "fullmatch": [11, 31, 43, 60], "whole": [11, 31, 60], "maxsplit": [11, 18, 31, 60], "return_seg": [11, 18, 31, 60], "5____6___7": [11, 31, 60], "return_match_origin": [11, 17, 18, 31, 60], "conta": [11, 31, 60], "___": [11, 31, 60], "__": [11, 17, 31, 60], "sub": [11, 18, 28, 31, 43, 60], "repl": [11, 18, 31, 60], "obtain": [11, 18, 31, 60], "substitut": [11, 18, 31, 41, 60], "substitu": [11, 31, 60], "subn": [11, 31, 43, 60], "new_str": [11, 31, 60], "number_of_substit": [11, 31, 60], "re2": [11, 31, 60], "lookahead": [11, 31, 60], "lookbehind": [11, 31, 60], "rasi": [11, 31, 60], "ior": [11, 31, 60], "strings_end": [11, 31, 60], "strings_start": [11, 31, 60], "ing": [11, 31, 60], "flat": [11, 31, 60], "peel": [11, 31, 43, 60], "rpeel": [11, 31, 43, 60], "orig": [11, 31, 60], "one_two": [11, 31, 60], "three_____four____f": [11, 31, 60], "under_flat": [11, 31, 60], "under_map": [11, 31, 60], "includedelimit": [11, 31, 60], "keepparti": [11, 31, 60], "fromright": [11, 31, 60], "off": [11, 21, 31, 44, 60], "similar": [11, 31, 32, 55, 56, 60], "partit": [11, 31, 60], "warn": [11, 19, 21, 31, 44, 60], "experiment": [11, 31, 60], "sought": [11, 31, 60], "prepend": [11, 28, 31, 43, 60], "unless": [11, 20, 21, 31, 41, 44, 60], "remaind": [11, 31, 60], "stick": [11, 31, 43, 60], "lstick": [11, 31, 43, 60], "rpartit": [11, 31, 60], "compar": [11, 31, 41, 42, 44, 60], "toleft": [11, 31, 60], "insert": [11, 31, 60], "get_prefix": [11, 28, 31, 43, 56], "return_origin": [11, 28, 31, 56], "proper": [11, 28, 31, 33, 56], "enough": [11, 28, 31, 56], "mask": [11, 28, 31, 56], "origin_indic": [11, 28, 31, 56], "get_suffix": [11, 28, 31, 43, 56], "ith": [11, 31], "siphash128": [11, 31], "fast": [11, 31], "balanc": [11, 31], "realist": [11, 31], "15": [11, 31, 48, 54], "collis": [11, 20, 31], "neglig": [11, 31], "compil": [11, 31, 39, 40], "ssegmentedstr": [11, 31], "usehash": [11, 31], "mere": [11, 31], "them": [11, 21, 24, 31, 36, 40, 41, 44, 58], "hello": [11, 31, 44, 60], "my": [11, 31, 44, 60], "world": [11, 31, 44, 60], "u5": [11, 31, 44, 60], "segstr": [11, 19, 31], "_comp_to_ndarrai": [11, 31], "comp": [11, 31], "strings_arrai": [11, 31], "save_offset": [11, 31], "deriv": [11, 14, 19, 20, 21, 31, 44, 55], "unregister_strings_by_nam": [11, 31], "clear": [11, 22], "smallest": [11, 22, 29, 47, 57], "outperform": [11, 22, 47], "grow": [11, 22, 47], "beyond": [11, 22, 47], "certain": [11, 22, 36, 47], "depend": [11, 22, 39, 40, 47, 56], "million": [11, 20, 22, 36, 47], "degred": [11, 22, 47], "observ": [11, 22, 40, 47], "largest": [11, 22, 29, 47, 57], "degrad": [11, 22, 47], "maxmum": [11, 22, 47], "odd": [11, 22], "lz": [11, 22], "62": [11, 22], "61": [11, 22], "60": [11, 22], "rot": [11, 22], "160": [11, 22], "384": [11, 22], "896": [11, 22], "2048": [11, 22], "4608": [11, 22], "1024": [11, 22], "512": [11, 22], "256": [11, 22], "56": [11, 22], "32": [11, 22, 27], "18": [11, 22, 47, 48, 54], "power": [11, 22, 54], "pwr": [11, 22], "attach_pdarrai": [11, 22], "algorithm": [11, 20, 30, 41, 46], "sortingalgorithm": [11, 30, 46], "radixsortlsd": [11, 30, 46], "digit": [11, 30, 46], "radix": [11, 30, 46], "stabl": [11, 30, 46, 48], "resili": [11, 30, 46], "commun": [11, 30, 40, 46, 50], "intens": [11, 30, 36, 46, 50], "forward": [11, 30, 46, 56], "thu": [11, 23, 30, 35, 46, 56], "lexicograph": [11, 30, 46], "those": [11, 30, 39, 46, 54], "pda1": [11, 24, 58], "pda2": [11, 24, 58], "assume_uniqu": [11, 24, 58], "1d": [11, 24, 28, 29, 56, 57, 58], "multia": [11, 24, 58], "multib": [11, 24, 58], "setdiff1d": [11, 24, 28, 36, 43, 56, 58], "setxor1d": [11, 24, 28, 43, 56, 58], "fill_valu": [11, 23], "deleg": [11, 20, 23, 50, 53], "accordingli": [11, 23, 50], "full_lik": [11, 23], "linearli": [11, 23, 32, 50], "evenli": [11, 20, 23, 50, 53], "along": [11, 23, 50], "greater": [11, 23, 40, 50], "seed": [11, 23, 36, 42, 50], "drawn": [11, 23, 50], "uniformli": [11, 23, 50], "undefin": [11, 23, 50], "92176432277231968": [11, 23, 50], "083130710959903542": [11, 23, 50], "68894208386667544": [11, 23, 50], "9160772326374946": [11, 23, 50], "353429832157099": [11, 23, 50], "5392023718621486": [11, 23, 50], "invok": [11, 19, 23], "30013431967121934": [11, 23], "47383036230759112": [11, 23], "0441791878997098": [11, 23], "standard_norm": [11, 23], "draw": [11, 23], "real": [11, 23], "mu": [11, 23], "sigma": [11, 23], "68586185091150265": [11, 23], "1723810583573375": [11, 23], "567584107142031": [11, 23], "random_strings_uniform": [11, 23], "minlen": [11, 23], "maxlen": [11, 23], "printabl": [11, 23], "random_strings_lognorm": [11, 23], "tvkj": [11, 23], "ewab": [11, 23], "hfmd": [11, 23], "4k": [11, 23], "hff": [11, 23], "logmean": [11, 23], "logstd": [11, 23], "lognorm": [11, 23], "exp": [11, 20, 23, 43, 47], "heavi": [11, 23], "toward": [11, 23], "tvkjte": [11, 23], "abocorhfm": [11, 23], "ludmmgtb": [11, 23], "kwoqnphz": [11, 23], "vsxrrl": [11, 23], "fp": [11, 23], "3q4kc": [11, 23], "hf": [11, 23], "ie": [11, 23], "djkba": [11, 23], "5oz1": [11, 23], "from_seri": [11, 23], "overridden": [11, 19, 23, 27], "unknown": [11, 21, 23, 44], "situat": [11, 23], "datetim": [11, 19, 23, 32], "timedelta": [11, 19, 23, 32], "57600036956445599": [11, 23], "41619265571741659": [11, 23], "6615356693784662": [11, 23], "choic": [11, 23], "to_datetim": [11, 23], "2018": [11, 23], "datetime64": [11, 23, 32], "01": [11, 23, 36], "1514764800000000000": [11, 23], "nanosecond": [11, 23, 32], "ab": [11, 20, 32, 36, 43, 47], "absolut": [11, 20, 32, 47], "natur": [11, 20, 47], "logarithm": [11, 20, 47], "3025850929940459": [11, 20, 47], "6051701859880918": [11, 20, 47], "3219280948873626": [11, 20, 47], "6438561897747253": [11, 20, 47], "exponenti": [11, 20, 47], "7182818284590451": [11, 20, 47], "3890560989306504": [11, 20, 47], "20": [11, 20, 36, 39, 47, 48, 54], "085536923187668": [11, 20, 47], "54": [11, 20, 47], "598150033144236": [11, 20, 47], "84010843172504": [11, 20, 47], "46": [11, 20, 47], "454368507659211": [11, 20, 47], "5571769623557188": [11, 20, 47], "494295836924771": [11, 20, 47], "478894913238722": [11, 20, 47], "cumsum": [11, 20, 43, 47], "1598310770203937": [11, 20, 47], "4110385860243131": [11, 20, 47], "1622479306453748": [11, 20, 47], "710615785506533": [11, 20, 47], "945880905466208": [11, 20, 47], "sin": [11, 20, 43, 47], "sine": [11, 20, 47], "cosin": [11, 20, 47], "siphash": [11, 20], "risk": [11, 20], "few": [11, 20], "known": [11, 20, 33], "small": [11, 20, 36, 40, 41, 44], "strongli": [11, 20], "recommend": [11, 20, 37, 39, 51, 56], "cryptograph": [11, 20], "applic": [11, 20, 40, 44, 50, 52], "Not": [11, 20, 32, 51], "emploi": [11, 20], "fix": [11, 20, 32, 60], "adversari": [11, 20], "engin": [11, 20], "histogram": [11, 20, 25, 36, 43], "bin": [11, 20, 25, 39, 40, 53], "edg": [11, 20, 25, 36, 53], "notimplementederror": [11, 20, 35, 53], "value_count": [11, 20, 29, 36, 43, 53, 57], "matplotlib": [11, 20, 25, 53], "pyplot": [11, 20, 25, 53], "plt": [11, 20, 25, 53], "nbin": [11, 20, 53], "h": [11, 20, 25, 32, 42, 53, 59], "unique_valu": [11, 20, 53], "leav": [11, 20, 53], "return_count": [11, 20, 53], "isnan": [11, 20], "enumer": [11, 19, 20], "l": [11, 21, 32, 36, 44], "h5l": [11, 21], "imit": [11, 21], "stricttyp": [11, 21, 44], "allow_error": [11, 21, 44], "calc_string_offset": [11, 21, 44], "legacyhdf5": [11, 21, 44], "shell": [11, 21, 44], "sign": [11, 21, 44, 51, 55], "across": [11, 21, 44], "uint32": [11, 21, 44, 47, 50, 53, 55, 60], "due": [11, 21, 44], "failur": [11, 21, 44], "tell": [11, 21, 39, 44], "versu": [11, 21, 44], "filetyp": [11, 21, 44], "trigger": [11, 21, 44], "befor": [11, 21, 32, 39, 40, 44], "again": [11, 21, 44], "datasetnam": [11, 21, 44], "arkouda_typ": [11, 21, 44], "get_dataset": [11, 21, 43, 44], "independ": [11, 21, 27, 44], "sequenti": [11, 21, 44], "name_prefix": [11, 21, 44], "path_prefix": [11, 21, 44], "detect": [11, 21, 44], "dure": [11, 21, 44], "termin": [11, 21, 41, 44, 59], "invalid": [11, 21, 44], "filenotfound": [11, 21, 44], "datsetnam": [11, 21, 44], "encount": [11, 21, 44], "wrong": [11, 21, 44, 59], "get_filetyp": [11, 21], "get_null_indic": [11, 21], "funciton": [11, 21], "import_data": [11, 21, 43, 44], "read_path": [11, 21, 44], "write_fil": [11, 21, 44], "return_obj": [11, 21, 44], "maintain": [11, 12, 21, 44], "runtimewarn": [11, 21, 44], "to_parquet": [11, 21, 44], "to_hdf": [11, 21, 44], "read_parquet": [11, 21, 44], "read_hdf": [11, 21, 44], "dataset_nam": [11, 21, 44], "ak_data": [11, 21, 44], "enableverbos": [11, 16], "debug": [11, 16], "disableverbos": [11, 16], "loglevel": [11, 16], "disabl": [11, 16], "defaultt": [11, 16], "akab": 11, "_base_unit": [11, 32], "_unit2normunit": [11, 32], "_unit2factor": [11, 32], "_get_factor": [11, 32], "_ident": [11, 32], "_timescalar": [11, 32], "_abstractbasetim": [11, 32], "face": [11, 28, 32, 55], "albeit": [11, 32], "rel": [11, 32, 36], "behind": [11, 32], "scene": [11, 32], "transpar": [11, 32], "_get_callback": [11, 32], "floor": [11, 32], "freq": [11, 32], "round": [11, 32], "nearest": [11, 32], "frequenc": [11, 32], "m": [11, 17, 28, 32, 60], "__class__": [11, 32], "ceil": [11, 32], "midpoint": [11, 32], "_is_datetime_scalar": [11, 32], "_is_timedelta_scalar": [11, 32], "_scalar_callback": [11, 32], "datetimeindex": [11, 32], "timeseri": [11, 32], "denot": [11, 32], "carri": [11, 32], "own": [11, 32, 56, 60], "sensit": [11, 32], "sec": [11, 32], "accept": [11, 29, 32, 57], "week": [11, 32, 52], "w": [11, 17, 32, 36, 60], "hour": [11, 32], "minut": [11, 32, 39], "millisecond": [11, 32], "microsecond": [11, 32], "unlik": [11, 28, 32], "month": [11, 32], "year": [11, 32], "day_of_year": [11, 32], "dayofyear": [11, 32], "day_of_week": [11, 32], "dayofweek": [11, 32, 52], "weekdai": [11, 32], "weekofyear": [11, 32], "is_leap_year": [11, 32], "supported_with_datetim": [11, 32], "supported_with_r_datetim": [11, 32], "supported_with_timedelta": [11, 32], "supported_with_r_timedelta": [11, 32], "supported_opeq": [11, 32], "supported_with_pdarrai": [11, 32], "supported_with_r_pdarrai": [11, 32], "_ensure_compon": [11, 32], "isocalendar": [11, 32], "otherclass": [11, 32], "durat": [11, 32], "timedeltaindex": [11, 32], "timedelta64": [11, 32], "total_second": [11, 32], "date_rang": [11, 32], "period": [11, 32], "tz": [11, 32], "subject": [11, 32], "impos": [11, 32], "dateoffset": [11, 32], "5h": [11, 32], "offset_alias": [11, 32], "alias": [11, 32], "tzinfo": [11, 32], "zone": [11, 32], "asia": [11, 32], "hong_kong": [11, 32], "timezon": [11, 32], "naiv": [11, 32], "midnight": [11, 32], "boundari": [11, 32], "effect": [11, 32, 58], "rng": [11, 32], "Of": [11, 32], "learn": [11, 32], "link": [11, 32, 39], "timedelta_rang": [11, 32], "allsymbol": [11, 13], "__allsymbols__": [11, 13], "registeredsymbol": [11, 13], "__registeredsymbols__": [11, 13], "list_symbol_t": [11, 13], "pretty_print_inform": [11, 13], "akbool": 11, "akint64": 11, "getarkoudalogg": 11, "logformat": 11, "default_log_format": 11, "conveni": [11, 44], "instanti": [11, 19], "arkouda_log_level": 11, "streamhandl": 11, "consol": 11, "line": [11, 14, 35, 39, 41, 48, 59], "lineno": 11, "levelnam": 11, "dynam": 11, "gen_rang": [11, 28], "pair": [11, 14, 19, 28, 36, 56], "_aggreg": [11, 28], "func": [11, 28], "non_empti": [11, 28], "non_empty_count": [11, 28], "valsiz": [11, 28], "sent": [11, 19, 28], "sinc": [11, 28, 49, 51, 55, 60], "_from_attach_return_msg": [11, 28], "from_multi_arrai": [11, 28], "transpos": [11, 28, 44], "_compute_non_empti": [11, 28], "vertic": [11, 28, 29, 36, 56], "horizont": [11, 28, 29, 56, 57], "unord": [11, 28], "yet": [11, 28, 36, 44, 48], "get_ngram": [11, 28, 43, 56], "gram": [11, 28, 56], "came": [11, 28, 56], "ngram": [11, 28, 43], "_normalize_index": [11, 28], "j": [11, 28, 56], "get_jth": [11, 28, 43, 56], "set_jth": [11, 28, 43, 56], "v": [11, 12, 28, 35, 36, 42, 56], "get_length_n": [11, 28, 43, 56], "increas": [11, 28, 56], "append_singl": [11, 28, 43, 56], "prepend_singl": [11, 28, 43, 56], "remove_repeat": [11, 28, 43, 56], "return_multipl": [11, 28, 56], "condens": [11, 28, 56], "norepeat": [11, 28, 56], "segarr": [11, 28, 56], "segment_suffix": [11, 28], "_segment": [11, 28], "value_suffix": [11, 28], "_valu": [11, 28], "top": [11, 28, 29, 57], "nest": [11, 28], "msut": [11, 28], "seg_a": [11, 28, 56], "seg_b": [11, 28, 56], "setdiff": [11, 28, 43, 56], "setxor": [11, 28, 43, 56], "length_suffix": [11, 28], "_length": [11, 28], "grouping_suffix": [11, 28], "_group": [11, 28], "individu": [11, 26, 40, 60], "akfloat64": 11, "convert_if_categor": [11, 33], "generic_concat": [11, 33], "get_callback": [11, 33], "is_uniqu": [11, 12], "rtype": [11, 12, 29], "set_dtyp": [11, 12, 45], "to_dict": [11, 12], "_check_typ": [11, 12], "_merg": [11, 12], "_merge_al": [11, 12], "idx_list": [11, 12], "_check_align": [11, 12], "multiindex": [11, 12, 29, 45, 57], "associ": [11, 29, 44, 56, 57], "enter": [11, 29, 44, 57], "str_acc": [11, 29], "lst": [11, 29], "scaler": [11, 29, 57], "special": [11, 29, 40, 55, 57], "_make_binop": [11, 29], "_make_unaryop": [11, 29], "_make_aggop": [11, 29], "topn": [11, 29, 57], "sort_index": [11, 29, 57], "frequent": [11, 29, 57], "diff": [11, 29], "to_datafram": [11, 29], "index_label": [11, 29], "value_label": [11, 29], "frame": [11, 29, 57], "registerd": [11, 29], "_all_align": [11, 29], "verticl": [11, 29, 57], "pdconcat": [11, 29, 57], "plot_dist": [11, 25], "xlabel": [11, 25], "newfig": [11, 25], "graph": [11, 25, 37, 52], "figur": [11, 25], "below": [11, 25, 40, 44, 51], "get_directori": 14, "pathlib": [14, 27], "write_line_to_fil": 14, "unsupportedopt": 14, "delimited_file_to_dict": 14, "unsupportedoper": 14, "dict_to_delimited_fil": 14, "oerror": 14, "join_on_eq_with_dt": 15, "t1": 15, "t2": 15, "pred": 15, "result_limit": 15, "inner": 15, "window": [15, 27, 41], "predic": 15, "timestamp": 15, "milli": 15, "result_array_on": 15, "true_dt": 15, "abs_dt": 15, "pos_dt": 15, "matchtyp": [17, 18, 60], "parent_entry_nam": [17, 18], "match_typ": [17, 18, 43, 60], "indici": [17, 60], "find_match": [17, 43, 60], "group_num": [17, 60], "return_group_origin": [17, 60], "captur": [17, 60], "isaac": [17, 60], "newton": [17, 60], "physic": [17, 60], "calculu": [17, 60], "gottfri": [17, 60], "leibniz": [17, 60], "math": [17, 60], "locationsinfo": 18, "get_match": 18, "return_num_sub": 18, "objecttyp": 19, "messagetyp": 19, "parameterobject": 19, "__slot": 19, "messageformat": 19, "_build_pdarray_param": 19, "ot": 19, "_build_strings_param": 19, "_build_list_param": 19, "_build_dict_param": 19, "_build_gen_param": 19, "singular": 19, "etc": 19, "generate_dispatch": 19, "dispatch": 19, "requestmessag": 19, "cmd": [19, 35], "asdict": 19, "attribut": [19, 22, 31, 35, 44, 48, 55], "replymessag": 19, "__slots__": 19, "msgtype": 19, "fromdict": 19, "metadata": 19, "repli": [19, 35], "class": [23, 35, 36, 37, 40, 43, 44, 45, 48, 49, 51, 52, 56, 57, 60], "username_token": 27, "generate_token": 27, "secret": 27, "token_hex": 27, "hexidecim": 27, "get_home_directori": 27, "platform": [27, 40], "home": 27, "expandus": 27, "get_arkouda_client_directori": 27, "artifact": 27, "arkouda_client_directori": 27, "environ": [27, 37, 40, 41], "get_usernam": 27, "host": 27, "environmenterror": 27, "linux": 27, "maco": 27, "aka": 27, "darwin": 27, "generate_username_token_json": 27, "report_mem": 33, "register_al": 33, "attach_al": 33, "unregister_al": 33, "enrich_inplac": 33, "keynam": 33, "seg": 33, "retain": 33, "arkouda_to_numpi": 33, "tmp_dir": 33, "numpy_to_arkouda": 33, "unregister_by_nam": 33, "page": [34, 37], "auto": 34, "document": [34, 40], "arkouda": [34, 36, 39, 40, 42, 43, 44, 46, 47, 49, 50, 52, 53, 54, 55, 58], "sphinx": 34, "autoapi": 34, "Be": [35, 39], "somewher": 35, "subdirectori": [35, 39, 40], "docstr": 35, "necessari": 35, "generic_msg": 35, "possibli": 35, "def": [35, 36], "isinst": 35, "machineri": 35, "coput": 35, "arg1": 35, "arg2": 35, "happen": 35, "chpl": 35, "foomsg": 35, "modul": [35, 37, 41, 44, 60], "gensymentri": 35, "st": 35, "nil": 35, "branch": 35, "tosymentri": 35, "symentri": 35, "addentri": 35, "creation": [35, 43], "servererrorstr": 35, "servermodul": 35, "cfg": 35, "arraysetopsmsg": 35, "kextrememsg": 35, "argsortmsg": 35, "next": [35, 59], "src": [35, 36], "manner": 35, "serverconfig": 35, "multitypesymentri": 35, "multitypesymbolt": 35, "proc": 35, "ret": 35, "respond": 35, "reqmsg": 35, "symtab": 35, "act": 35, "borrow": 35, "throw": 35, "splitmsgtotupl": 35, "rname": 35, "nextnam": 35, "gent": 35, "unknownsymbolerror": 35, "action": 35, "writeln": 35, "stdout": 35, "flush": 35, "attrib": 35, "Then": 35, "registerm": 35, "fcf": 35, "registerfunct": 35, "uncom": 35, "absent": 35, "comment": 35, "exclud": 35, "tabular": 36, "pseudo": 36, "let": 36, "transact": 36, "purchas": 36, "particular": 36, "monei": 36, "loc": 36, "syntax": [36, 41, 54], "emul": [36, 40], "involv": 36, "u1": 36, "col": 36, "59999999999999998": 36, "computation": 36, "who": 36, "bought": 36, "revenu": 36, "byitem": 36, "7000000000000002": 36, "2999999999999998": 36, "3000000000000007": 36, "bring": 36, "explor": 36, "further": 36, "analysi": 36, "toi": 36, "ak_rmat": 36, "rmat": 36, "gen_rmat_edg": 36, "lgnv": 36, "ne_per_v": 36, "nv": 36, "ne": 36, "ii": 36, "jj": 36, "quantit": 36, "loop": 36, "c_norm": 36, "a_norm": 36, "ib": 36, "ii_bit": 36, "jj_bit": 36, "iv": 36, "vertex": 36, "premut": 36, "ir": 36, "renumb": 36, "mayb": 36, "dst": 36, "bysrc": 36, "srcid": 36, "outdeg": 36, "breadth": 36, "straightforward": 36, "ak_bfs_conn_comp": 36, "bf": 36, "printlay": 36, "layer": [36, 44], "z": 36, "visit": 36, "frontier": 36, "fzv": 36, "subtract": 36, "2056": 36, "42584": 36, "410889": 36, "24146": 36, "479679": 36, "reachabl": [36, 59], "prerequisit": [37, 39, 41], "anaconda": [37, 39, 41], "zmq": 37, "download": [37, 40], "setup": 37, "troubleshoot": 37, "gather": [37, 43], "scan": [37, 43], "scatter": [37, 43], "stream": 37, "quickstart": 37, "launch": [37, 43], "simpl": [37, 53], "usag": [37, 41, 42, 56, 59], "startup": [37, 41, 43], "arithmet": [37, 43, 55], "summar": [37, 43, 44], "contribut": [37, 39], "sure": 39, "easiest": [39, 40], "clone": 39, "fork": 39, "github": 39, "repo": 39, "chpl_home": [39, 40], "rc": 39, "librari": [39, 40, 60], "modifi": 39, "makefil": 39, "eval": 39, "pip3": [39, 40], "plan": [39, 53, 55], "develop": [39, 40, 44], "wish": 39, "edit": 39, "dev": 39, "solut": 39, "abov": [39, 40, 41, 51, 60], "cd": 39, "extra": 39, "lzmq": 39, "lhdf5": 39, "lib": [39, 40, 58], "libzmq": 39, "libhdf5": 39, "reinstal": 39, "28": [40, 48], "parallel": [40, 44, 55, 58], "languag": 40, "tip": 40, "design": [40, 44], "portabl": 40, "reconfigur": 40, "laptop": 40, "supercomput": 40, "fact": 40, "workstat": 40, "cluster": 40, "massiv": 40, "architectur": 40, "multilocal": 40, "carefulli": 40, "node": [40, 42, 44], "machinebi": 40, "chpl_comm": 40, "gasnet": 40, "chpl_launcher": 40, "smp": 40, "happili": 40, "coexist": 40, "switch": [40, 48], "manual": 40, "acquir": 40, "packag": 40, "manag": 40, "altern": 40, "pypi": 40, "interoper": 40, "guid": 41, "pythonpath": 41, "nl": [41, 59], "listen": [41, 59], "your_machin": 41, "g582b418": 41, "15461882265": 41, "token_str": 41, "interact": 41, "session": 41, "ipython": 41, "jupyt": 41, "notebook": 41, "node01": [41, 59], "live": 41, "minval": 41, "maxval": 41, "evens1": 41, "evenind": 41, "evens2": 41, "ubiquit": 41, "reorder": 41, "still": [41, 60], "These": [41, 44], "quit": 41, "caus": 41, "exit": 41, "benchmark": 42, "script": 42, "measur": 42, "trial": 42, "problem": 42, "100000000": 42, "index_s": 42, "value_s": 42, "alpha": 42, "preprocess": 43, "persist": 43, "descript": 43, "dedupl": 43, "setop": 43, "smaller": 44, "workflow": 44, "inspect": 44, "pyarrow": 44, "primarili": 44, "columnar": 44, "spread": 44, "mpi": 44, "concurr": 44, "sever": [44, 47, 50], "pipelin": [44, 60], "strategi": 44, "csv": 44, "too": 44, "aggress": 44, "hundr": 44, "thousand": 44, "experi": 44, "text": 44, "accomplish": 44, "ingest": [44, 60], "h5py": 44, "idea": 44, "content": 44, "unfortun": 44, "reconstruct": 44, "customiz": 44, "schema": 44, "fit": 44, "abl": 44, "featur": [44, 52], "reformat": 44, "would": [44, 47, 52], "taht": 44, "purpos": [45, 51, 57], "addition": 45, "autoclass": 45, "offer": [45, 51, 57, 60], "16": [47, 48, 54], "mathemat": 47, "int8": [47, 50, 53, 55, 60], "int16": [47, 50, 53, 55, 60], "int32": [47, 50, 53, 55, 60], "uint16": [47, 50, 53, 55, 60], "multiplex": 47, "30": 48, "17": [48, 54], "19": [48, 54], "26": 48, "27": 48, "29": 48, "advanc": 48, "talk": 48, "http": 48, "org": 48, "doc": 48, "sometim": [48, 55], "cartesian": 48, "coordin": 48, "wherea": [48, 60], "discourag": [48, 49, 51, 55, 56, 60], "forc": [48, 49, 51, 55, 60], "concept": 49, "almost": [49, 51, 55, 60], "comparison": [49, 55, 56, 60], "liter": [49, 60], "alon": [49, 60], "orient": [49, 51, 55, 60], "unrel": 50, "movement": 50, "unsign": 51, "ieee": [51, 55], "1073741824": 51, "workhors": 52, "scienc": 52, "imagin": 52, "id": 52, "activ": 52, "bydayofweek": 52, "numid": 52, "013": 53, "36": 53, "934176000000015": 53, "07734942223993": 53, "assig": 54, "42": 54, "ind": 54, "matlab": 54, "outer": 54, "touch": 54, "expans": 54, "lim": 54, "backbon": 55, "And": 55, "expos": 55, "incorpor": 55, "implicit": 55, "explicit": 55, "approach": 56, "loss": 56, "functioanl": 56, "vari": 56, "strucutur": 56, "abil": 56, "arraysetop": 58, "shown": 59, "sai": 59, "someth": 59, "went": 59, "remot": 59, "wide": 60, "compris": 60, "whenev": 60, "threshold": 60, "guidelin": 60, "pipe": 60, "googl": 60, "sacrific": 60, "notabl": 60, "exchang": 60, "linear": 60, "stack": 60}, "objects": {"": [[11, 0, 0, "-", "arkouda"]], "arkouda": [[11, 1, 1, "", "ARKOUDA_SUPPORTED_DTYPES"], [11, 1, 1, "", "AllSymbols"], [48, 2, 1, "", "ArrayView"], [11, 2, 1, "", "BitVector"], [11, 5, 1, "", "BitVectorizer"], [11, 2, 1, "", "CachedAccessor"], [49, 2, 1, "", "Categorical"], [11, 1, 1, "", "DTypeObjects"], [11, 1, 1, "", "DTypes"], [51, 2, 1, "", "DataFrame"], [11, 2, 1, "id726", "Datetime"], [11, 2, 1, "", "DatetimeAccessor"], [11, 2, 1, "", "ErrorMode"], [11, 2, 1, "", "Fields"], [52, 2, 1, "", "GroupBy"], [11, 2, 1, "", "IPv4"], [45, 2, 1, "", "Index"], [11, 2, 1, "", "MultiIndex"], [11, 1, 1, "", "OrderType"], [11, 2, 1, "", "Properties"], [11, 1, 1, "", "RegisteredSymbols"], [11, 7, 1, "", "RegistrationError"], [11, 2, 1, "", "Row"], [11, 2, 1, "", "SegArray"], [57, 2, 1, "", "Series"], [11, 1, 1, "", "SortingAlgorithm"], [11, 2, 1, "", "StringAccessor"], [11, 2, 1, "id654", "Strings"], [11, 2, 1, "", "Timedelta"], [11, 2, 1, "", "_AbstractBaseTime"], [11, 1, 1, "", "_BASE_UNIT"], [11, 2, 1, "", "_Timescalar"], [11, 1, 1, "", "__version__"], [11, 5, 1, "", "_aggregator"], [11, 5, 1, "", "_get_factor"], [11, 5, 1, "", "_identity"], [11, 1, 1, "", "_unit2factor"], [11, 1, 1, "", "_unit2normunit"], [0, 0, 0, "-", "_version"], [47, 5, 1, "", "abs"], [1, 0, 0, "-", "accessor"], [11, 5, 1, "", "akabs"], [11, 1, 1, "id538", "akbool"], [11, 5, 1, "id0", "akcast"], [11, 1, 1, "", "akfloat64"], [11, 1, 1, "id539", "akint64"], [2, 0, 0, "-", "alignment"], [47, 5, 1, "", "all"], [11, 1, 1, "", "all_scalars"], [47, 5, 1, "", "any"], [50, 5, 1, "", "arange"], [47, 5, 1, "", "argmax"], [47, 5, 1, "", "argmaxk"], [47, 5, 1, "", "argmin"], [47, 5, 1, "", "argmink"], [46, 5, 1, "", "argsort"], [44, 5, 1, "", "array"], [3, 0, 0, "-", "array_view"], [11, 5, 1, "id422", "attach_pdarray"], [11, 1, 1, "id113", "bitType"], [11, 1, 1, "", "bool"], [11, 1, 1, "", "bool_scalars"], [55, 5, 1, "", "cast"], [4, 0, 0, "-", "categorical"], [11, 5, 1, "", "check_np_dtype"], [11, 5, 1, "", "clear"], [5, 0, 0, "-", "client"], [6, 0, 0, "-", "client_dtypes"], [11, 5, 1, "", "clz"], [46, 5, 1, "", "coargsort"], [50, 5, 1, "", "concatenate"], [59, 5, 1, "", "connect"], [11, 5, 1, "", "convert_if_categorical"], [11, 5, 1, "", "corr"], [47, 5, 1, "", "cos"], [11, 5, 1, "", "cov"], [11, 5, 1, "id423", "create_pdarray"], [11, 5, 1, "", "ctz"], [47, 5, 1, "", "cumprod"], [47, 5, 1, "", "cumsum"], [7, 0, 0, "-", "dataframe"], [11, 5, 1, "", "date_operators"], [11, 5, 1, "", "date_range"], [8, 0, 0, "-", "decorators"], [11, 5, 1, "", "disableVerbose"], [11, 1, 1, "", "dtype"], [9, 0, 0, "-", "dtypes"], [11, 5, 1, "", "enableVerbose"], [47, 5, 1, "", "exp"], [44, 5, 1, "", "export"], [11, 1, 1, "", "float64"], [11, 1, 1, "", "float_scalars"], [11, 5, 1, "id417", "from_series"], [11, 5, 1, "", "full"], [11, 5, 1, "", "full_like"], [11, 5, 1, "", "gen_ranges"], [11, 5, 1, "", "generic_concat"], [11, 5, 1, "", "getArkoudaLogger"], [11, 5, 1, "", "get_byteorder"], [11, 5, 1, "", "get_callback"], [44, 5, 1, "", "get_datasets"], [11, 5, 1, "", "get_filetype"], [11, 5, 1, "", "get_null_indices"], [11, 5, 1, "", "get_server_byteorder"], [11, 5, 1, "", "get_versions"], [10, 0, 0, "-", "groupbyclass"], [11, 5, 1, "", "hash"], [53, 5, 1, "", "histogram"], [44, 5, 1, "", "import_data"], [58, 5, 1, "", "in1d"], [12, 0, 0, "-", "index"], [13, 0, 0, "-", "infoclass"], [11, 5, 1, "", "information"], [11, 1, 1, "id304", "int64"], [11, 1, 1, "id306", "intTypes"], [11, 1, 1, "id305", "int_scalars"], [11, 5, 1, "", "intersect"], [58, 5, 1, "", "intersect1d"], [11, 5, 1, "", "intx"], [11, 5, 1, "", "invert_permutation"], [14, 0, 0, "-", "io_util"], [11, 5, 1, "", "ip_address"], [11, 5, 1, "id418", "isSupportedInt"], [11, 5, 1, "", "is_ipv4"], [11, 5, 1, "", "is_ipv6"], [47, 5, 1, "", "is_sorted"], [11, 5, 1, "", "isnan"], [15, 0, 0, "-", "join"], [50, 5, 1, "", "linspace"], [11, 5, 1, "id540", "list_registry"], [11, 5, 1, "", "list_symbol_table"], [44, 5, 1, "", "load"], [44, 5, 1, "", "load_all"], [47, 5, 1, "", "log"], [16, 0, 0, "-", "logger"], [11, 5, 1, "", "ls"], [17, 0, 0, "-", "match"], [18, 0, 0, "-", "matcher"], [47, 5, 1, "", "max"], [47, 5, 1, "", "maxk"], [47, 5, 1, "", "mean"], [19, 0, 0, "-", "message"], [47, 5, 1, "", "min"], [47, 5, 1, "", "mink"], [20, 0, 0, "-", "numeric"], [11, 1, 1, "", "numeric_scalars"], [11, 1, 1, "", "numpy_scalars"], [11, 5, 1, "", "objtypedec"], [50, 5, 1, "", "ones"], [50, 5, 1, "", "ones_like"], [11, 5, 1, "", "parity"], [11, 5, 1, "", "parse_single_value"], [55, 2, 1, "", "pdarray"], [21, 0, 0, "-", "pdarrayIO"], [22, 0, 0, "-", "pdarrayclass"], [23, 0, 0, "-", "pdarraycreation"], [24, 0, 0, "-", "pdarraysetops"], [11, 5, 1, "", "plot_dist"], [25, 0, 0, "-", "plotting"], [11, 5, 1, "", "popcount"], [11, 5, 1, "", "power"], [11, 5, 1, "", "pretty_print_information"], [47, 5, 1, "", "prod"], [50, 5, 1, "", "randint"], [11, 5, 1, "", "random_strings_lognormal"], [11, 5, 1, "", "random_strings_uniform"], [44, 5, 1, "", "read"], [11, 5, 1, "id230", "read_hdf5_multi_dim"], [11, 5, 1, "", "register"], [11, 5, 1, "id115", "resolve_scalar_dtype"], [11, 5, 1, "", "rotl"], [11, 5, 1, "", "rotr"], [26, 0, 0, "-", "row"], [44, 5, 1, "", "save_all"], [27, 0, 0, "-", "security"], [28, 0, 0, "-", "segarray"], [29, 0, 0, "-", "series"], [58, 5, 1, "", "setdiff1d"], [58, 5, 1, "", "setxor1d"], [47, 5, 1, "", "sin"], [11, 5, 1, "", "sort"], [11, 5, 1, "", "sorted"], [30, 0, 0, "-", "sorting"], [11, 5, 1, "", "sqrt"], [11, 5, 1, "", "standard_normal"], [47, 5, 1, "", "std"], [11, 1, 1, "id419", "str_"], [11, 1, 1, "", "str_scalars"], [11, 5, 1, "", "string_operators"], [31, 0, 0, "-", "strings"], [47, 5, 1, "", "sum"], [32, 0, 0, "-", "timeclass"], [11, 5, 1, "", "timedelta_range"], [11, 5, 1, "id420", "translate_np_dtype"], [11, 1, 1, "", "uint64"], [11, 1, 1, "", "uint8"], [11, 5, 1, "", "uniform"], [58, 5, 1, "", "union1d"], [58, 5, 1, "", "unique"], [11, 5, 1, "", "unregister_pdarray_by_name"], [33, 0, 0, "-", "util"], [53, 5, 1, "", "value_counts"], [47, 5, 1, "", "var"], [47, 5, 1, "", "where"], [11, 5, 1, "id231", "write_hdf5_multi_dim"], [50, 5, 1, "", "zeros"], [50, 5, 1, "", "zeros_like"]], "arkouda.ArrayView": [[11, 3, 1, "", "__getitem__"], [11, 3, 1, "", "__len__"], [11, 3, 1, "", "__repr__"], [11, 3, 1, "", "__setitem__"], [11, 3, 1, "", "__str__"], [48, 4, 1, "", "base"], [48, 4, 1, "", "dtype"], [48, 4, 1, "", "itemsize"], [11, 3, 1, "", "load"], [48, 4, 1, "", "ndim"], [48, 4, 1, "", "order"], [11, 3, 1, "", "save"], [48, 4, 1, "", "shape"], [48, 4, 1, "", "size"], [11, 3, 1, "", "to_list"], [48, 5, 1, "", "to_ndarray"]], "arkouda.BitVector": [[11, 3, 1, "", "__getitem__"], [11, 3, 1, "", "__repr__"], [11, 3, 1, "", "__setitem__"], [11, 3, 1, "", "__str__"], [11, 3, 1, "", "_binop"], [11, 3, 1, "", "_cast"], [11, 3, 1, "", "_r_binop"], [11, 4, 1, "", "conserves"], [11, 3, 1, "", "format"], [11, 3, 1, "", "opeq"], [11, 3, 1, "", "to_list"], [11, 3, 1, "", "to_ndarray"]], "arkouda.CachedAccessor": [[11, 3, 1, "", "__get__"]], "arkouda.Categorical": [[49, 4, 1, "", "categories"], [49, 4, 1, "", "codes"], [49, 3, 1, "", "contains"], [49, 3, 1, "", "endswith"], [49, 3, 1, "", "from_codes"], [49, 4, 1, "", "ndim"], [49, 4, 1, "", "nlevels"], [49, 4, 1, "", "permutation"], [49, 4, 1, "", "segments"], [49, 4, 1, "", "shape"], [49, 4, 1, "", "size"], [49, 3, 1, "", "startswith"], [49, 5, 1, "", "to_ndarray"]], "arkouda.DataFrame": [[11, 4, 1, "", "COLUMN_CLASSES"], [11, 3, 1, "", "GroupBy"], [11, 3, 1, "", "__delitem__"], [11, 3, 1, "", "__dir__"], [11, 3, 1, "", "__getattr__"], [11, 3, 1, "", "__getitem__"], [11, 3, 1, "", "__len__"], [11, 3, 1, "", "__repr__"], [11, 3, 1, "", "__setitem__"], [11, 3, 1, "", "__str__"], [11, 3, 1, "", "_drop_column"], [11, 3, 1, "", "_drop_row"], [11, 3, 1, "", "_get_head_tail"], [11, 3, 1, "", "_get_head_tail_server"], [11, 3, 1, "", "_ipython_key_completions_"], [11, 3, 1, "", "_ncols"], [11, 3, 1, "", "_parse_col_name"], [11, 3, 1, "", "_rename_column"], [11, 3, 1, "", "_rename_index"], [11, 3, 1, "", "_repr_html_"], [11, 3, 1, "", "_set_index"], [11, 3, 1, "", "_shape_str"], [11, 3, 1, "", "append"], [51, 5, 1, "", "apply_permutation"], [51, 5, 1, "", "argsort"], [11, 3, 1, "", "attach"], [51, 5, 1, "", "coargsort"], [11, 6, 1, "", "columns"], [51, 5, 1, "", "concat"], [51, 5, 1, "", "copy"], [11, 3, 1, "", "corr"], [51, 5, 1, "", "drop"], [51, 5, 1, "", "drop_duplicates"], [11, 6, 1, "", "dtypes"], [11, 6, 1, "", "empty"], [11, 3, 1, "", "filter_by_range"], [11, 3, 1, "", "from_pandas"], [11, 3, 1, "", "from_return_msg"], [51, 5, 1, "", "groupby"], [51, 5, 1, "", "head"], [11, 6, 1, "", "index"], [11, 6, 1, "", "info"], [11, 3, 1, "", "is_registered"], [11, 3, 1, "", "isin"], [11, 3, 1, "", "load"], [11, 3, 1, "", "memory_usage"], [11, 3, 1, "", "register"], [51, 5, 1, "", "rename"], [51, 5, 1, "", "reset_index"], [11, 3, 1, "", "sample"], [11, 3, 1, "", "save"], [11, 6, 1, "", "shape"], [11, 6, 1, "", "size"], [51, 5, 1, "", "sort_values"], [51, 5, 1, "", "tail"], [51, 5, 1, "", "to_pandas"], [11, 3, 1, "", "unregister"], [11, 3, 1, "", "unregister_dataframe_by_name"], [11, 3, 1, "", "update_size"]], "arkouda.Datetime": [[11, 3, 1, "id752", "_ensure_components"], [11, 3, 1, "id754", "_get_callback"], [11, 3, 1, "id756", "_is_supported_scalar"], [11, 3, 1, "id755", "_scalar_callback"], [11, 6, 1, "id743", "date"], [11, 6, 1, "id733", "day"], [11, 6, 1, "id738", "day_of_week"], [11, 6, 1, "id736", "day_of_year"], [11, 6, 1, "id739", "dayofweek"], [11, 6, 1, "id737", "dayofyear"], [11, 6, 1, "id732", "hour"], [11, 6, 1, "id744", "is_leap_year"], [11, 3, 1, "id753", "isocalendar"], [11, 6, 1, "id728", "microsecond"], [11, 6, 1, "id729", "millisecond"], [11, 6, 1, "id731", "minute"], [11, 6, 1, "id734", "month"], [11, 6, 1, "id727", "nanosecond"], [11, 6, 1, "id730", "second"], [11, 3, 1, "id758", "sum"], [11, 4, 1, "id749", "supported_opeq"], [11, 4, 1, "id745", "supported_with_datetime"], [11, 4, 1, "id750", "supported_with_pdarray"], [11, 4, 1, "id746", "supported_with_r_datetime"], [11, 4, 1, "id751", "supported_with_r_pdarray"], [11, 4, 1, "id748", "supported_with_r_timedelta"], [11, 4, 1, "id747", "supported_with_timedelta"], [11, 3, 1, "id757", "to_pandas"], [11, 6, 1, "id741", "week"], [11, 6, 1, "id740", "weekday"], [11, 6, 1, "id742", "weekofyear"], [11, 6, 1, "id735", "year"]], "arkouda.ErrorMode": [[11, 4, 1, "", "ignore"], [11, 4, 1, "", "return_validity"], [11, 4, 1, "", "strict"]], "arkouda.Fields": [[11, 3, 1, "", "__setitem__"], [11, 3, 1, "", "_binop"], [11, 3, 1, "", "_cast"], [11, 3, 1, "", "_convert_strings"], [11, 3, 1, "", "_parse_scalar"], [11, 3, 1, "", "_r_binop"], [11, 3, 1, "", "format"], [11, 3, 1, "", "opeq"]], "arkouda.GroupBy": [[52, 3, 1, "", "AND"], [52, 3, 1, "", "OR"], [52, 3, 1, "", "XOR"], [52, 3, 1, "", "aggregate"], [52, 3, 1, "", "all"], [52, 3, 1, "", "any"], [52, 3, 1, "", "argmax"], [52, 3, 1, "", "argmin"], [52, 3, 1, "", "attach"], [52, 3, 1, "", "broadcast"], [52, 3, 1, "", "build_from_components"], [52, 3, 1, "", "count"], [52, 3, 1, "", "first"], [52, 3, 1, "", "is_registered"], [52, 4, 1, "", "logger"], [52, 3, 1, "", "max"], [52, 3, 1, "", "mean"], [52, 3, 1, "", "median"], [52, 3, 1, "", "min"], [52, 3, 1, "", "mode"], [52, 3, 1, "", "most_common"], [52, 4, 1, "", "ngroups"], [52, 4, 1, "", "nkeys"], [52, 3, 1, "", "nunique"], [52, 4, 1, "", "permutation"], [52, 3, 1, "", "prod"], [52, 3, 1, "", "register"], [52, 4, 1, "", "segments"], [52, 3, 1, "id0", "size"], [52, 3, 1, "", "std"], [52, 3, 1, "", "sum"], [52, 3, 1, "", "unique"], [52, 4, 1, "", "unique_keys"], [52, 3, 1, "", "unregister"], [52, 3, 1, "", "unregister_groupby_by_name"], [52, 3, 1, "", "var"]], "arkouda.IPv4": [[11, 3, 1, "", "__getitem__"], [11, 3, 1, "", "__repr__"], [11, 3, 1, "", "__setitem__"], [11, 3, 1, "", "__str__"], [11, 3, 1, "", "_binop"], [11, 3, 1, "", "_is_supported_scalar"], [11, 3, 1, "", "_r_binop"], [11, 3, 1, "", "format"], [11, 3, 1, "", "normalize"], [11, 3, 1, "", "opeq"], [11, 3, 1, "", "to_list"], [11, 3, 1, "", "to_ndarray"]], "arkouda.Index": [[11, 3, 1, "", "__eq__"], [11, 3, 1, "", "__getitem__"], [11, 3, 1, "", "__len__"], [11, 3, 1, "", "__repr__"], [11, 3, 1, "", "_check_aligned"], [11, 3, 1, "", "_check_types"], [11, 3, 1, "", "_merge"], [11, 3, 1, "", "_merge_all"], [45, 5, 1, "", "argsort"], [45, 5, 1, "", "concat"], [11, 3, 1, "", "factory"], [11, 6, 1, "", "index"], [11, 3, 1, "", "is_registered"], [11, 6, 1, "", "is_unique"], [45, 5, 1, "", "lookup"], [11, 3, 1, "", "register"], [11, 3, 1, "", "save"], [45, 5, 1, "", "set_dtype"], [11, 6, 1, "", "shape"], [11, 3, 1, "", "to_dict"], [11, 3, 1, "", "to_list"], [11, 3, 1, "", "to_ndarray"], [11, 3, 1, "", "to_pandas"]], "arkouda.MultiIndex": [[11, 3, 1, "", "__eq__"], [11, 3, 1, "", "__getitem__"], [11, 3, 1, "", "__len__"], [11, 3, 1, "", "__repr__"], [11, 3, 1, "", "_merge"], [11, 3, 1, "", "_merge_all"], [45, 5, 1, "", "argsort"], [45, 5, 1, "", "concat"], [11, 6, 1, "", "index"], [45, 5, 1, "", "lookup"], [11, 3, 1, "", "register"], [45, 5, 1, "", "set_dtype"], [11, 3, 1, "", "to_dict"], [11, 3, 1, "", "to_pandas"]], "arkouda.Properties": [[11, 3, 1, "", "_make_op"]], "arkouda.Row": [[11, 3, 1, "", "__repr__"], [11, 3, 1, "", "__str__"], [11, 3, 1, "", "_repr_html_"]], "arkouda.SegArray": [[11, 3, 1, "", "AND"], [11, 3, 1, "", "OR"], [11, 3, 1, "", "XOR"], [11, 3, 1, "", "__eq__"], [11, 3, 1, "", "__getitem__"], [11, 3, 1, "", "__repr__"], [11, 3, 1, "", "__str__"], [11, 3, 1, "", "_compute_non_empty"], [11, 3, 1, "", "_from_attach_return_msg"], [11, 3, 1, "", "_normalize_index"], [11, 3, 1, "", "aggregate"], [11, 3, 1, "", "all"], [11, 3, 1, "", "any"], [56, 5, 1, "", "append"], [56, 5, 1, "", "append_single"], [11, 3, 1, "", "argmax"], [11, 3, 1, "", "argmin"], [11, 3, 1, "", "attach"], [11, 3, 1, "", "concat"], [11, 3, 1, "", "copy"], [11, 3, 1, "", "from_multi_array"], [11, 3, 1, "", "from_parts"], [11, 3, 1, "", "from_return_msg"], [56, 5, 1, "", "get_jth"], [56, 5, 1, "", "get_length_n"], [56, 5, 1, "", "get_ngrams"], [56, 5, 1, "", "get_prefixes"], [56, 5, 1, "", "get_suffixes"], [56, 5, 1, "", "intersect"], [11, 3, 1, "", "is_registered"], [11, 6, 1, "", "lengths"], [11, 3, 1, "", "load"], [11, 3, 1, "", "max"], [11, 3, 1, "", "mean"], [11, 3, 1, "", "min"], [11, 6, 1, "", "non_empty"], [11, 6, 1, "", "non_empty_count"], [11, 3, 1, "", "nunique"], [11, 6, 1, "", "objtype"], [56, 5, 1, "", "prepend_single"], [11, 3, 1, "", "prod"], [11, 3, 1, "", "register"], [56, 5, 1, "", "remove_repeats"], [11, 3, 1, "", "save"], [56, 5, 1, "", "set_jth"], [56, 5, 1, "", "setdiff"], [56, 5, 1, "", "setxor"], [11, 3, 1, "", "sum"], [11, 3, 1, "", "to_list"], [56, 5, 1, "", "to_ndarray"], [56, 5, 1, "", "union"], [11, 3, 1, "", "unique"], [11, 3, 1, "", "unregister"], [11, 4, 1, "", "valsize"]], "arkouda.Series": [[11, 3, 1, "", "__getitem__"], [11, 3, 1, "", "__len__"], [11, 3, 1, "", "__repr__"], [11, 3, 1, "", "_all_aligned"], [11, 3, 1, "", "_make_aggop"], [11, 3, 1, "", "_make_binop"], [11, 3, 1, "", "_make_unaryop"], [11, 3, 1, "", "add"], [11, 3, 1, "", "attach"], [11, 3, 1, "", "concat"], [11, 3, 1, "", "diff"], [11, 4, 1, "", "dt"], [11, 3, 1, "", "from_return_msg"], [57, 5, 1, "", "head"], [11, 3, 1, "", "is_registered"], [11, 3, 1, "", "isin"], [57, 5, 1, "id0", "locate"], [57, 5, 1, "", "pdconcat"], [11, 3, 1, "", "register"], [11, 6, 1, "", "shape"], [57, 5, 1, "", "sort_index"], [57, 5, 1, "", "sort_values"], [11, 4, 1, "", "str_acc"], [57, 5, 1, "", "tail"], [11, 3, 1, "", "to_dataframe"], [57, 5, 1, "", "to_pandas"], [57, 5, 1, "", "topn"], [57, 5, 1, "", "value_counts"]], "arkouda.Strings": [[11, 4, 1, "id662", "BinOps"], [11, 3, 1, "id703", "__add__"], [11, 3, 1, "id671", "__eq__"], [11, 3, 1, "id673", "__getitem__"], [11, 3, 1, "id666", "__iter__"], [11, 3, 1, "id667", "__len__"], [11, 3, 1, "id672", "__ne__"], [11, 3, 1, "id705", "__radd__"], [11, 3, 1, "id669", "__repr__"], [11, 3, 1, "id668", "__str__"], [11, 3, 1, "id670", "_binop"], [11, 3, 1, "id713", "_comp_to_ndarray"], [11, 3, 1, "id686", "_empty_pattern_verification"], [11, 3, 1, "id710", "_get_grouping_keys"], [11, 3, 1, "id687", "_get_matcher"], [11, 3, 1, "id719", "_list_component_names"], [11, 3, 1, "id714", "astype"], [11, 3, 1, "id724", "attach"], [11, 3, 1, "id684", "cached_regex_patterns"], [60, 3, 1, "", "contains"], [11, 4, 1, "id660", "dtype"], [60, 3, 1, "", "endswith"], [11, 4, 1, "id655", "entry"], [60, 3, 1, "", "find_locations"], [60, 3, 1, "", "findall"], [60, 3, 1, "", "flatten"], [11, 3, 1, "id665", "from_parts"], [11, 3, 1, "id664", "from_return_msg"], [60, 3, 1, "", "fullmatch"], [11, 3, 1, "id674", "get_lengths"], [11, 3, 1, "id706", "get_prefixes"], [11, 3, 1, "id707", "get_suffixes"], [11, 3, 1, "id709", "group"], [11, 3, 1, "id708", "hash"], [11, 3, 1, "id676", "idna_decode"], [11, 3, 1, "id675", "idna_encode"], [11, 3, 1, "id720", "info"], [11, 3, 1, "id680", "is_lower"], [11, 3, 1, "id718", "is_registered"], [11, 3, 1, "id682", "is_title"], [11, 3, 1, "id681", "is_upper"], [11, 4, 1, "id661", "logger"], [60, 3, 1, "", "lstick"], [60, 3, 1, "", "match"], [11, 4, 1, "id657", "nbytes"], [11, 4, 1, "id658", "ndim"], [11, 4, 1, "id663", "objtype"], [60, 3, 1, "", "peel"], [11, 3, 1, "id721", "pretty_print_info"], [11, 3, 1, "id685", "purge_cached_regex_patterns"], [11, 3, 1, "id722", "register"], [60, 3, 1, "", "rpeel"], [11, 3, 1, "id715", "save"], [11, 3, 1, "id717", "save_hdf"], [11, 3, 1, "id716", "save_parquet"], [60, 3, 1, "", "search"], [11, 4, 1, "id659", "shape"], [11, 4, 1, "id656", "size"], [60, 3, 1, "", "split"], [60, 3, 1, "", "startswith"], [60, 3, 1, "", "stick"], [11, 3, 1, "id683", "strip"], [60, 3, 1, "", "sub"], [60, 3, 1, "", "subn"], [11, 3, 1, "id712", "to_list"], [11, 3, 1, "id677", "to_lower"], [60, 5, 1, "", "to_ndarray"], [11, 3, 1, "id679", "to_title"], [11, 3, 1, "id678", "to_upper"], [11, 3, 1, "id723", "unregister"], [11, 3, 1, "id725", "unregister_strings_by_name"]], "arkouda.Timedelta": [[11, 3, 1, "", "_ensure_components"], [11, 3, 1, "", "_get_callback"], [11, 3, 1, "", "_is_supported_scalar"], [11, 3, 1, "", "_scalar_callback"], [11, 3, 1, "", "abs"], [11, 6, 1, "", "components"], [11, 6, 1, "", "days"], [11, 6, 1, "", "microseconds"], [11, 6, 1, "", "nanoseconds"], [11, 6, 1, "", "seconds"], [11, 3, 1, "", "std"], [11, 3, 1, "", "sum"], [11, 4, 1, "", "supported_opeq"], [11, 4, 1, "", "supported_with_datetime"], [11, 4, 1, "", "supported_with_pdarray"], [11, 4, 1, "", "supported_with_r_datetime"], [11, 4, 1, "", "supported_with_r_pdarray"], [11, 4, 1, "", "supported_with_r_timedelta"], [11, 4, 1, "", "supported_with_timedelta"], [11, 3, 1, "", "to_pandas"], [11, 3, 1, "", "total_seconds"]], "arkouda._AbstractBaseTime": [[11, 3, 1, "", "__getitem__"], [11, 3, 1, "", "__repr__"], [11, 3, 1, "", "__setitem__"], [11, 3, 1, "", "__str__"], [11, 3, 1, "", "_binop"], [11, 3, 1, "", "_get_callback"], [11, 3, 1, "", "_is_datetime_scalar"], [11, 3, 1, "", "_is_timedelta_scalar"], [11, 3, 1, "", "_r_binop"], [11, 3, 1, "", "_scalar_callback"], [11, 3, 1, "", "ceil"], [11, 3, 1, "", "floor"], [11, 3, 1, "", "max"], [11, 3, 1, "", "maxk"], [11, 3, 1, "", "min"], [11, 3, 1, "", "mink"], [11, 3, 1, "", "opeq"], [11, 3, 1, "", "round"], [11, 3, 1, "", "to_list"], [11, 3, 1, "", "to_ndarray"]], "arkouda._version": [[0, 1, 1, "", "HANDLERS"], [0, 1, 1, "", "LONG_VERSION_PY"], [0, 7, 1, "", "NotThisMethod"], [0, 2, 1, "", "VersioneerConfig"], [0, 5, 1, "", "get_config"], [0, 5, 1, "", "get_keywords"], [0, 5, 1, "", "get_versions"], [0, 5, 1, "", "git_get_keywords"], [0, 5, 1, "", "git_pieces_from_vcs"], [0, 5, 1, "", "git_versions_from_keywords"], [0, 5, 1, "", "plus_or_dot"], [0, 5, 1, "", "register_vcs_handler"], [0, 5, 1, "", "render"], [0, 5, 1, "", "render_git_describe"], [0, 5, 1, "", "render_git_describe_long"], [0, 5, 1, "", "render_pep440"], [0, 5, 1, "", "render_pep440_old"], [0, 5, 1, "", "render_pep440_post"], [0, 5, 1, "", "render_pep440_pre"], [0, 5, 1, "", "run_command"], [0, 5, 1, "", "versions_from_parentdir"]], "arkouda.accessor": [[1, 2, 1, "", "CachedAccessor"], [1, 2, 1, "", "DatetimeAccessor"], [1, 2, 1, "", "Properties"], [1, 2, 1, "", "StringAccessor"], [1, 5, 1, "", "date_operators"], [1, 5, 1, "", "string_operators"]], "arkouda.accessor.CachedAccessor": [[1, 3, 1, "", "__get__"]], "arkouda.accessor.Properties": [[1, 3, 1, "", "_make_op"]], "arkouda.alignment": [[2, 7, 1, "", "NonUniqueError"], [2, 5, 1, "", "align"], [2, 5, 1, "", "find"], [2, 5, 1, "", "in1d_intervals"], [2, 5, 1, "", "interval_lookup"], [2, 5, 1, "", "left_align"], [2, 5, 1, "", "lookup"], [2, 5, 1, "", "right_align"], [2, 5, 1, "", "search_intervals"], [2, 5, 1, "", "unsqueeze"], [2, 5, 1, "", "zero_up"]], "arkouda.array_view": [[3, 2, 1, "", "ArrayView"], [3, 1, 1, "", "OrderType"]], "arkouda.array_view.ArrayView": [[3, 3, 1, "", "__getitem__"], [3, 3, 1, "", "__len__"], [3, 3, 1, "", "__repr__"], [3, 3, 1, "", "__setitem__"], [3, 3, 1, "", "__str__"], [3, 4, 1, "", "base"], [3, 4, 1, "", "dtype"], [3, 4, 1, "", "itemsize"], [3, 3, 1, "", "load"], [3, 4, 1, "", "ndim"], [3, 4, 1, "", "order"], [3, 3, 1, "", "save"], [3, 4, 1, "", "shape"], [3, 4, 1, "", "size"], [3, 3, 1, "", "to_list"], [3, 3, 1, "", "to_ndarray"]], "arkouda.categorical": [[4, 2, 1, "", "Categorical"]], "arkouda.categorical.Categorical": [[4, 4, 1, "", "BinOps"], [4, 4, 1, "", "RegisterablePieces"], [4, 4, 1, "", "RequiredPieces"], [4, 3, 1, "", "__eq__"], [4, 3, 1, "", "__getitem__"], [4, 3, 1, "", "__iter__"], [4, 3, 1, "", "__len__"], [4, 3, 1, "", "__ne__"], [4, 3, 1, "", "__repr__"], [4, 3, 1, "", "__str__"], [4, 3, 1, "", "_binop"], [4, 3, 1, "", "_get_components_dict"], [4, 3, 1, "", "_get_grouping_keys"], [4, 3, 1, "", "_list_component_names"], [4, 3, 1, "", "_r_binop"], [4, 3, 1, "", "argsort"], [4, 3, 1, "", "attach"], [4, 4, 1, "", "categories"], [4, 4, 1, "", "codes"], [4, 3, 1, "", "concatenate"], [4, 3, 1, "", "contains"], [4, 3, 1, "", "endswith"], [4, 3, 1, "", "from_codes"], [4, 3, 1, "", "from_return_msg"], [4, 3, 1, "", "group"], [4, 3, 1, "", "in1d"], [4, 3, 1, "", "info"], [4, 3, 1, "", "is_registered"], [4, 3, 1, "", "isna"], [4, 4, 1, "", "ndim"], [4, 4, 1, "", "nlevels"], [4, 6, 1, "", "objtype"], [4, 3, 1, "", "parse_hdf_categoricals"], [4, 4, 1, "id0", "permutation"], [4, 3, 1, "", "pretty_print_info"], [4, 3, 1, "", "register"], [4, 3, 1, "", "reset_categories"], [4, 3, 1, "", "save"], [4, 4, 1, "id1", "segments"], [4, 3, 1, "", "set_categories"], [4, 4, 1, "", "shape"], [4, 4, 1, "", "size"], [4, 3, 1, "", "sort"], [4, 3, 1, "", "standardize_categories"], [4, 3, 1, "", "startswith"], [4, 3, 1, "", "to_list"], [4, 3, 1, "", "to_ndarray"], [4, 3, 1, "", "unique"], [4, 3, 1, "", "unregister"], [4, 3, 1, "", "unregister_categorical_by_name"]], "arkouda.client": [[5, 5, 1, "", "connect"], [5, 5, 1, "", "disconnect"], [5, 5, 1, "", "get_config"], [5, 5, 1, "", "get_mem_used"], [5, 5, 1, "", "get_server_commands"], [5, 5, 1, "", "print_server_commands"], [5, 5, 1, "", "ruok"], [5, 5, 1, "", "shutdown"]], "arkouda.client_dtypes": [[6, 2, 1, "", "BitVector"], [6, 5, 1, "", "BitVectorizer"], [6, 2, 1, "", "Fields"], [6, 2, 1, "", "IPv4"], [6, 5, 1, "", "ip_address"], [6, 5, 1, "", "is_ipv4"], [6, 5, 1, "", "is_ipv6"]], "arkouda.client_dtypes.BitVector": [[6, 3, 1, "", "__getitem__"], [6, 3, 1, "", "__repr__"], [6, 3, 1, "", "__setitem__"], [6, 3, 1, "", "__str__"], [6, 3, 1, "", "_binop"], [6, 3, 1, "", "_cast"], [6, 3, 1, "", "_r_binop"], [6, 4, 1, "", "conserves"], [6, 3, 1, "", "format"], [6, 3, 1, "", "opeq"], [6, 3, 1, "", "to_list"], [6, 3, 1, "", "to_ndarray"]], "arkouda.client_dtypes.Fields": [[6, 3, 1, "", "__setitem__"], [6, 3, 1, "", "_binop"], [6, 3, 1, "", "_cast"], [6, 3, 1, "", "_convert_strings"], [6, 3, 1, "", "_parse_scalar"], [6, 3, 1, "", "_r_binop"], [6, 3, 1, "", "format"], [6, 3, 1, "", "opeq"]], "arkouda.client_dtypes.IPv4": [[6, 3, 1, "", "__getitem__"], [6, 3, 1, "", "__repr__"], [6, 3, 1, "", "__setitem__"], [6, 3, 1, "", "__str__"], [6, 3, 1, "", "_binop"], [6, 3, 1, "", "_is_supported_scalar"], [6, 3, 1, "", "_r_binop"], [6, 3, 1, "", "format"], [6, 3, 1, "", "normalize"], [6, 3, 1, "", "opeq"], [6, 3, 1, "", "to_list"], [6, 3, 1, "", "to_ndarray"]], "arkouda.dataframe": [[7, 2, 1, "", "DataFrame"], [7, 5, 1, "", "intersect"], [7, 5, 1, "", "intx"], [7, 5, 1, "", "invert_permutation"], [7, 5, 1, "", "sorted"]], "arkouda.dataframe.DataFrame": [[7, 4, 1, "", "COLUMN_CLASSES"], [7, 3, 1, "", "GroupBy"], [7, 3, 1, "", "__delitem__"], [7, 3, 1, "", "__dir__"], [7, 3, 1, "", "__getattr__"], [7, 3, 1, "", "__getitem__"], [7, 3, 1, "", "__len__"], [7, 3, 1, "", "__repr__"], [7, 3, 1, "", "__setitem__"], [7, 3, 1, "", "__str__"], [7, 3, 1, "", "_drop_column"], [7, 3, 1, "", "_drop_row"], [7, 3, 1, "", "_get_head_tail"], [7, 3, 1, "", "_get_head_tail_server"], [7, 3, 1, "", "_ipython_key_completions_"], [7, 3, 1, "", "_ncols"], [7, 3, 1, "", "_parse_col_name"], [7, 3, 1, "", "_rename_column"], [7, 3, 1, "", "_rename_index"], [7, 3, 1, "", "_repr_html_"], [7, 3, 1, "", "_set_index"], [7, 3, 1, "", "_shape_str"], [7, 3, 1, "", "append"], [7, 3, 1, "", "apply_permutation"], [7, 3, 1, "", "argsort"], [7, 3, 1, "", "attach"], [7, 3, 1, "", "coargsort"], [7, 6, 1, "", "columns"], [7, 3, 1, "", "concat"], [7, 3, 1, "", "copy"], [7, 3, 1, "", "corr"], [7, 3, 1, "", "drop"], [7, 3, 1, "", "drop_duplicates"], [7, 6, 1, "", "dtypes"], [7, 6, 1, "", "empty"], [7, 3, 1, "", "filter_by_range"], [7, 3, 1, "", "from_pandas"], [7, 3, 1, "", "from_return_msg"], [7, 3, 1, "", "groupby"], [7, 3, 1, "", "head"], [7, 6, 1, "", "index"], [7, 6, 1, "", "info"], [7, 3, 1, "", "is_registered"], [7, 3, 1, "", "isin"], [7, 3, 1, "", "load"], [7, 3, 1, "", "memory_usage"], [7, 3, 1, "", "register"], [7, 3, 1, "", "rename"], [7, 3, 1, "", "reset_index"], [7, 3, 1, "", "sample"], [7, 3, 1, "", "save"], [7, 6, 1, "", "shape"], [7, 6, 1, "", "size"], [7, 3, 1, "", "sort_values"], [7, 3, 1, "", "tail"], [7, 3, 1, "", "to_pandas"], [7, 3, 1, "", "unregister"], [7, 3, 1, "", "unregister_dataframe_by_name"], [7, 3, 1, "", "update_size"]], "arkouda.decorators": [[8, 5, 1, "", "objtypedec"]], "arkouda.dtypes": [[9, 1, 1, "", "ARKOUDA_SUPPORTED_DTYPES"], [9, 1, 1, "", "DTypeObjects"], [9, 1, 1, "", "DTypes"], [9, 1, 1, "", "all_scalars"], [9, 1, 1, "", "bitType"], [9, 1, 1, "", "bool"], [9, 1, 1, "", "bool_scalars"], [9, 5, 1, "", "check_np_dtype"], [9, 1, 1, "", "dtype"], [9, 1, 1, "", "float64"], [9, 1, 1, "", "float_scalars"], [9, 5, 1, "", "get_byteorder"], [9, 5, 1, "", "get_server_byteorder"], [9, 1, 1, "", "int64"], [9, 1, 1, "", "intTypes"], [9, 1, 1, "", "int_scalars"], [9, 1, 1, "", "numeric_scalars"], [9, 1, 1, "", "numpy_scalars"], [9, 5, 1, "", "resolve_scalar_dtype"], [9, 1, 1, "", "str_"], [9, 1, 1, "", "str_scalars"], [9, 5, 1, "", "translate_np_dtype"], [9, 1, 1, "", "uint64"], [9, 1, 1, "", "uint8"]], "arkouda.groupbyclass": [[10, 1, 1, "", "GROUPBY_REDUCTION_TYPES"], [10, 2, 1, "", "GroupBy"], [10, 5, 1, "", "broadcast"], [10, 5, 1, "", "unique"]], "arkouda.groupbyclass.GroupBy": [[10, 3, 1, "", "AND"], [10, 3, 1, "", "OR"], [10, 4, 1, "", "Reductions"], [10, 3, 1, "", "XOR"], [10, 3, 1, "", "_get_groupby_required_pieces"], [10, 3, 1, "", "_nested_grouping_helper"], [10, 3, 1, "", "aggregate"], [10, 3, 1, "", "all"], [10, 3, 1, "", "any"], [10, 3, 1, "", "argmax"], [10, 3, 1, "", "argmin"], [10, 3, 1, "", "attach"], [10, 3, 1, "", "broadcast"], [10, 3, 1, "", "build_from_components"], [10, 3, 1, "", "count"], [10, 3, 1, "", "first"], [10, 3, 1, "", "is_registered"], [10, 4, 1, "", "logger"], [10, 3, 1, "", "max"], [10, 3, 1, "", "mean"], [10, 3, 1, "", "median"], [10, 3, 1, "", "min"], [10, 3, 1, "", "mode"], [10, 3, 1, "", "most_common"], [10, 4, 1, "", "ngroups"], [10, 4, 1, "", "nkeys"], [10, 3, 1, "", "nunique"], [10, 4, 1, "", "permutation"], [10, 3, 1, "", "prod"], [10, 3, 1, "", "register"], [10, 4, 1, "", "segments"], [10, 3, 1, "id0", "size"], [10, 3, 1, "", "std"], [10, 3, 1, "", "sum"], [10, 3, 1, "", "unique"], [10, 4, 1, "", "unique_keys"], [10, 3, 1, "", "unregister"], [10, 3, 1, "", "unregister_groupby_by_name"], [10, 3, 1, "", "var"]], "arkouda.index": [[12, 2, 1, "", "Index"], [12, 2, 1, "", "MultiIndex"]], "arkouda.index.Index": [[12, 3, 1, "", "__eq__"], [12, 3, 1, "", "__getitem__"], [12, 3, 1, "", "__len__"], [12, 3, 1, "", "__repr__"], [12, 3, 1, "", "_check_aligned"], [12, 3, 1, "", "_check_types"], [12, 3, 1, "", "_merge"], [12, 3, 1, "", "_merge_all"], [12, 3, 1, "", "argsort"], [12, 3, 1, "", "concat"], [12, 3, 1, "", "factory"], [12, 6, 1, "", "index"], [12, 3, 1, "", "is_registered"], [12, 6, 1, "", "is_unique"], [12, 3, 1, "", "lookup"], [12, 3, 1, "", "register"], [12, 3, 1, "", "save"], [12, 3, 1, "", "set_dtype"], [12, 6, 1, "", "shape"], [12, 3, 1, "", "to_dict"], [12, 3, 1, "", "to_list"], [12, 3, 1, "", "to_ndarray"], [12, 3, 1, "", "to_pandas"]], "arkouda.index.MultiIndex": [[12, 3, 1, "", "__eq__"], [12, 3, 1, "", "__getitem__"], [12, 3, 1, "", "__len__"], [12, 3, 1, "", "__repr__"], [12, 3, 1, "", "_merge"], [12, 3, 1, "", "_merge_all"], [12, 3, 1, "", "argsort"], [12, 3, 1, "", "concat"], [12, 6, 1, "", "index"], [12, 3, 1, "", "lookup"], [12, 3, 1, "", "register"], [12, 3, 1, "", "set_dtype"], [12, 3, 1, "", "to_dict"], [12, 3, 1, "", "to_pandas"]], "arkouda.infoclass": [[13, 1, 1, "", "AllSymbols"], [13, 1, 1, "", "RegisteredSymbols"], [13, 5, 1, "", "information"], [13, 5, 1, "", "list_registry"], [13, 5, 1, "", "list_symbol_table"], [13, 5, 1, "", "pretty_print_information"]], "arkouda.io_util": [[14, 5, 1, "", "delimited_file_to_dict"], [14, 5, 1, "", "dict_to_delimited_file"], [14, 5, 1, "", "get_directory"], [14, 5, 1, "", "write_line_to_file"]], "arkouda.join": [[15, 5, 1, "", "join_on_eq_with_dt"]], "arkouda.logger": [[16, 5, 1, "", "disableVerbose"], [16, 5, 1, "", "enableVerbose"]], "arkouda.match": [[17, 2, 1, "", "Match"], [17, 1, 1, "", "MatchType"]], "arkouda.match.Match": [[17, 3, 1, "", "__getitem__"], [17, 3, 1, "", "__repr__"], [17, 3, 1, "", "__str__"], [60, 3, 1, "", "end"], [60, 3, 1, "", "find_matches"], [60, 3, 1, "", "group"], [60, 3, 1, "", "match_type"], [60, 3, 1, "", "matched"], [60, 3, 1, "", "start"]], "arkouda.matcher": [[18, 2, 1, "", "Matcher"]], "arkouda.matcher.Matcher": [[18, 4, 1, "", "LocationsInfo"], [18, 3, 1, "", "find_locations"], [18, 3, 1, "", "findall"], [18, 3, 1, "", "get_match"], [18, 3, 1, "", "split"], [18, 3, 1, "", "sub"]], "arkouda.message": [[19, 2, 1, "", "MessageFormat"], [19, 2, 1, "", "MessageType"], [19, 2, 1, "", "ObjectType"], [19, 2, 1, "", "ParameterObject"], [19, 2, 1, "", "ReplyMessage"], [19, 2, 1, "", "RequestMessage"]], "arkouda.message.MessageFormat": [[19, 4, 1, "", "BINARY"], [19, 4, 1, "", "STRING"], [19, 3, 1, "", "__repr__"], [19, 3, 1, "", "__str__"]], "arkouda.message.MessageType": [[19, 4, 1, "", "ERROR"], [19, 4, 1, "", "NORMAL"], [19, 4, 1, "", "WARNING"], [19, 3, 1, "", "__repr__"], [19, 3, 1, "", "__str__"]], "arkouda.message.ObjectType": [[19, 4, 1, "", "DATETIME"], [19, 4, 1, "", "DICT"], [19, 4, 1, "", "LIST"], [19, 4, 1, "", "PDARRAY"], [19, 4, 1, "", "STRINGS"], [19, 4, 1, "", "TIMEDELTA"], [19, 4, 1, "", "VALUE"], [19, 3, 1, "", "__repr__"], [19, 3, 1, "", "__str__"]], "arkouda.message.ParameterObject": [[19, 4, 1, "", "__slots"], [19, 3, 1, "", "_build_dict_param"], [19, 3, 1, "", "_build_gen_param"], [19, 3, 1, "", "_build_list_param"], [19, 3, 1, "", "_build_pdarray_param"], [19, 3, 1, "", "_build_strings_param"], [19, 6, 1, "", "dict"], [19, 4, 1, "", "dtype"], [19, 3, 1, "", "factory"], [19, 3, 1, "", "generate_dispatch"], [19, 4, 1, "", "key"], [19, 4, 1, "", "objType"], [19, 4, 1, "", "val"]], "arkouda.message.ReplyMessage": [[19, 4, 1, "", "__slots__"], [19, 3, 1, "", "fromdict"], [19, 4, 1, "", "msg"], [19, 4, 1, "", "msgType"], [19, 4, 1, "", "user"]], "arkouda.message.RequestMessage": [[19, 4, 1, "", "__slots"], [19, 4, 1, "", "args"], [19, 3, 1, "", "asdict"], [19, 4, 1, "", "cmd"], [19, 4, 1, "", "format"], [19, 4, 1, "", "size"], [19, 4, 1, "", "token"], [19, 4, 1, "", "user"]], "arkouda.numeric": [[20, 2, 1, "", "ErrorMode"], [20, 5, 1, "", "abs"], [20, 5, 1, "", "cast"], [20, 5, 1, "", "cos"], [20, 5, 1, "", "cumprod"], [20, 5, 1, "", "cumsum"], [20, 5, 1, "", "exp"], [20, 5, 1, "", "hash"], [20, 5, 1, "", "histogram"], [20, 5, 1, "", "isnan"], [20, 5, 1, "", "log"], [20, 5, 1, "", "sin"], [20, 5, 1, "", "value_counts"], [20, 5, 1, "", "where"]], "arkouda.numeric.ErrorMode": [[20, 4, 1, "", "ignore"], [20, 4, 1, "", "return_validity"], [20, 4, 1, "", "strict"]], "arkouda.pdarray": [[11, 4, 1, "id548", "BinOps"], [11, 4, 1, "id549", "OpEqOps"], [11, 3, 1, "id560", "__add__"], [11, 3, 1, "id576", "__and__"], [11, 4, 1, "id551", "__array_priority__"], [11, 3, 1, "id553", "__bool__"], [11, 3, 1, "id552", "__del__"], [11, 3, 1, "id588", "__eq__"], [11, 3, 1, "id568", "__floordiv__"], [11, 3, 1, "id587", "__ge__"], [11, 3, 1, "id605", "__getitem__"], [11, 3, 1, "id585", "__gt__"], [11, 3, 1, "id593", "__iadd__"], [11, 3, 1, "id600", "__iand__"], [11, 3, 1, "id597", "__ifloordiv__"], [11, 3, 1, "id598", "__ilshift__"], [11, 3, 1, "id595", "__imul__"], [11, 3, 1, "id591", "__invert__"], [11, 3, 1, "id601", "__ior__"], [11, 3, 1, "id603", "__ipow__"], [11, 3, 1, "id599", "__irshift__"], [11, 3, 1, "id594", "__isub__"], [11, 3, 1, "id604", "__iter__"], [11, 3, 1, "id596", "__itruediv__"], [11, 3, 1, "id602", "__ixor__"], [11, 3, 1, "id586", "__le__"], [11, 3, 1, "id554", "__len__"], [11, 3, 1, "id572", "__lshift__"], [11, 3, 1, "id584", "__lt__"], [11, 3, 1, "id570", "__mod__"], [11, 3, 1, "id564", "__mul__"], [11, 3, 1, "id589", "__ne__"], [11, 3, 1, "id590", "__neg__"], [11, 3, 1, "id578", "__or__"], [11, 3, 1, "id582", "__pow__"], [11, 3, 1, "id561", "__radd__"], [11, 3, 1, "id577", "__rand__"], [11, 3, 1, "id556", "__repr__"], [11, 3, 1, "id569", "__rfloordiv__"], [11, 3, 1, "id573", "__rlshift__"], [11, 3, 1, "id571", "__rmod__"], [11, 3, 1, "id565", "__rmul__"], [11, 3, 1, "id579", "__ror__"], [11, 3, 1, "id583", "__rpow__"], [11, 3, 1, "id575", "__rrshift__"], [11, 3, 1, "id574", "__rshift__"], [11, 3, 1, "id563", "__rsub__"], [11, 3, 1, "id567", "__rtruediv__"], [11, 3, 1, "id581", "__rxor__"], [11, 3, 1, "id606", "__setitem__"], [11, 3, 1, "id555", "__str__"], [11, 3, 1, "id562", "__sub__"], [11, 3, 1, "id566", "__truediv__"], [11, 3, 1, "id580", "__xor__"], [11, 3, 1, "id558", "_binop"], [11, 3, 1, "id647", "_get_grouping_keys"], [11, 3, 1, "id611", "_list_component_names"], [11, 3, 1, "id559", "_r_binop"], [53, 3, 1, "", "all"], [53, 3, 1, "", "any"], [53, 3, 1, "", "argmax"], [53, 3, 1, "", "argmaxk"], [53, 3, 1, "", "argmin"], [53, 3, 1, "", "argmink"], [11, 3, 1, "id636", "astype"], [11, 3, 1, "id646", "attach"], [11, 3, 1, "id632", "clz"], [11, 3, 1, "id625", "corr"], [11, 3, 1, "id624", "cov"], [11, 3, 1, "id633", "ctz"], [55, 4, 1, "", "dtype"], [11, 3, 1, "id607", "fill"], [11, 3, 1, "id557", "format_other"], [11, 3, 1, "id612", "info"], [11, 3, 1, "id610", "is_registered"], [53, 3, 1, "", "is_sorted"], [55, 4, 1, "", "itemsize"], [53, 3, 1, "", "max"], [53, 3, 1, "", "maxk"], [53, 3, 1, "", "mean"], [53, 3, 1, "", "min"], [53, 3, 1, "", "mink"], [55, 4, 1, "", "name"], [55, 4, 1, "", "ndim"], [11, 4, 1, "id550", "objtype"], [11, 3, 1, "id592", "opeq"], [11, 3, 1, "id631", "parity"], [11, 3, 1, "id630", "popcount"], [11, 3, 1, "id613", "pretty_print_info"], [53, 3, 1, "", "prod"], [11, 3, 1, "id644", "register"], [11, 3, 1, "id637", "reshape"], [11, 3, 1, "id634", "rotl"], [11, 3, 1, "id635", "rotr"], [44, 5, 1, "", "save"], [11, 3, 1, "id643", "save_hdf"], [11, 3, 1, "id642", "save_parquet"], [55, 4, 1, "", "shape"], [55, 4, 1, "", "size"], [53, 3, 1, "", "std"], [53, 3, 1, "", "sum"], [11, 3, 1, "id640", "to_cuda"], [11, 3, 1, "id639", "to_list"], [55, 5, 1, "", "to_ndarray"], [11, 3, 1, "id645", "unregister"], [53, 3, 1, "", "var"]], "arkouda.pdarrayIO": [[21, 5, 1, "", "export"], [21, 5, 1, "", "get_datasets"], [21, 5, 1, "", "get_filetype"], [21, 5, 1, "", "get_null_indices"], [21, 5, 1, "", "import_data"], [21, 5, 1, "", "load"], [21, 5, 1, "", "load_all"], [21, 5, 1, "", "ls"], [21, 5, 1, "", "read"], [21, 5, 1, "", "read_hdf5_multi_dim"], [21, 5, 1, "", "save_all"], [21, 5, 1, "", "write_hdf5_multi_dim"]], "arkouda.pdarrayclass": [[22, 7, 1, "", "RegistrationError"], [22, 5, 1, "", "all"], [22, 5, 1, "", "any"], [22, 5, 1, "", "argmax"], [22, 5, 1, "", "argmaxk"], [22, 5, 1, "", "argmin"], [22, 5, 1, "", "argmink"], [22, 5, 1, "", "attach_pdarray"], [22, 5, 1, "", "clear"], [22, 5, 1, "", "clz"], [22, 5, 1, "", "corr"], [22, 5, 1, "", "cov"], [22, 5, 1, "", "ctz"], [22, 5, 1, "", "is_sorted"], [22, 5, 1, "", "max"], [22, 5, 1, "", "maxk"], [22, 5, 1, "", "mean"], [22, 5, 1, "", "min"], [22, 5, 1, "", "mink"], [22, 5, 1, "", "parity"], [22, 2, 1, "", "pdarray"], [22, 5, 1, "", "popcount"], [22, 5, 1, "", "power"], [22, 5, 1, "", "prod"], [22, 5, 1, "", "rotl"], [22, 5, 1, "", "rotr"], [22, 5, 1, "", "sqrt"], [22, 5, 1, "", "std"], [22, 5, 1, "", "sum"], [22, 5, 1, "", "unregister_pdarray_by_name"], [22, 5, 1, "", "var"]], "arkouda.pdarrayclass.pdarray": [[22, 4, 1, "", "BinOps"], [22, 4, 1, "", "OpEqOps"], [22, 3, 1, "", "__add__"], [22, 3, 1, "", "__and__"], [22, 4, 1, "", "__array_priority__"], [22, 3, 1, "", "__bool__"], [22, 3, 1, "", "__del__"], [22, 3, 1, "", "__eq__"], [22, 3, 1, "", "__floordiv__"], [22, 3, 1, "", "__ge__"], [22, 3, 1, "", "__getitem__"], [22, 3, 1, "", "__gt__"], [22, 3, 1, "", "__iadd__"], [22, 3, 1, "", "__iand__"], [22, 3, 1, "", "__ifloordiv__"], [22, 3, 1, "", "__ilshift__"], [22, 3, 1, "", "__imul__"], [22, 3, 1, "", "__invert__"], [22, 3, 1, "", "__ior__"], [22, 3, 1, "", "__ipow__"], [22, 3, 1, "", "__irshift__"], [22, 3, 1, "", "__isub__"], [22, 3, 1, "", "__iter__"], [22, 3, 1, "", "__itruediv__"], [22, 3, 1, "", "__ixor__"], [22, 3, 1, "", "__le__"], [22, 3, 1, "", "__len__"], [22, 3, 1, "", "__lshift__"], [22, 3, 1, "", "__lt__"], [22, 3, 1, "", "__mod__"], [22, 3, 1, "", "__mul__"], [22, 3, 1, "", "__ne__"], [22, 3, 1, "", "__neg__"], [22, 3, 1, "", "__or__"], [22, 3, 1, "", "__pow__"], [22, 3, 1, "", "__radd__"], [22, 3, 1, "", "__rand__"], [22, 3, 1, "", "__repr__"], [22, 3, 1, "", "__rfloordiv__"], [22, 3, 1, "", "__rlshift__"], [22, 3, 1, "", "__rmod__"], [22, 3, 1, "", "__rmul__"], [22, 3, 1, "", "__ror__"], [22, 3, 1, "", "__rpow__"], [22, 3, 1, "", "__rrshift__"], [22, 3, 1, "", "__rshift__"], [22, 3, 1, "", "__rsub__"], [22, 3, 1, "", "__rtruediv__"], [22, 3, 1, "", "__rxor__"], [22, 3, 1, "", "__setitem__"], [22, 3, 1, "", "__str__"], [22, 3, 1, "", "__sub__"], [22, 3, 1, "", "__truediv__"], [22, 3, 1, "", "__xor__"], [22, 3, 1, "", "_binop"], [22, 3, 1, "", "_get_grouping_keys"], [22, 3, 1, "", "_list_component_names"], [22, 3, 1, "", "_r_binop"], [22, 3, 1, "", "all"], [22, 3, 1, "", "any"], [22, 3, 1, "", "argmax"], [22, 3, 1, "", "argmaxk"], [22, 3, 1, "", "argmin"], [22, 3, 1, "", "argmink"], [22, 3, 1, "", "astype"], [22, 3, 1, "", "attach"], [22, 3, 1, "", "clz"], [22, 3, 1, "", "corr"], [22, 3, 1, "", "cov"], [22, 3, 1, "", "ctz"], [22, 4, 1, "", "dtype"], [22, 3, 1, "", "fill"], [22, 3, 1, "", "format_other"], [22, 3, 1, "", "info"], [22, 3, 1, "", "is_registered"], [22, 3, 1, "", "is_sorted"], [22, 4, 1, "", "itemsize"], [22, 3, 1, "", "max"], [22, 3, 1, "", "maxk"], [22, 3, 1, "", "mean"], [22, 3, 1, "", "min"], [22, 3, 1, "", "mink"], [22, 4, 1, "", "name"], [22, 4, 1, "", "ndim"], [22, 4, 1, "", "objtype"], [22, 3, 1, "", "opeq"], [22, 3, 1, "", "parity"], [22, 3, 1, "", "popcount"], [22, 3, 1, "", "pretty_print_info"], [22, 3, 1, "", "prod"], [22, 3, 1, "", "register"], [22, 3, 1, "", "reshape"], [22, 3, 1, "", "rotl"], [22, 3, 1, "", "rotr"], [22, 3, 1, "", "save"], [22, 3, 1, "", "save_hdf"], [22, 3, 1, "", "save_parquet"], [22, 4, 1, "", "shape"], [22, 4, 1, "", "size"], [22, 3, 1, "", "std"], [22, 3, 1, "", "sum"], [22, 3, 1, "", "to_cuda"], [22, 3, 1, "", "to_list"], [22, 3, 1, "", "to_ndarray"], [22, 3, 1, "", "unregister"], [22, 3, 1, "", "var"]], "arkouda.pdarraycreation": [[23, 5, 1, "", "arange"], [23, 5, 1, "", "array"], [23, 5, 1, "", "from_series"], [23, 5, 1, "", "full"], [23, 5, 1, "", "full_like"], [23, 5, 1, "", "linspace"], [23, 5, 1, "", "ones"], [23, 5, 1, "", "ones_like"], [23, 5, 1, "", "randint"], [23, 5, 1, "", "random_strings_lognormal"], [23, 5, 1, "", "random_strings_uniform"], [23, 5, 1, "", "standard_normal"], [23, 5, 1, "", "uniform"], [23, 5, 1, "", "zeros"], [23, 5, 1, "", "zeros_like"]], "arkouda.pdarraysetops": [[24, 5, 1, "", "concatenate"], [24, 5, 1, "", "in1d"], [24, 5, 1, "", "intersect1d"], [24, 5, 1, "", "setdiff1d"], [24, 5, 1, "", "setxor1d"], [24, 5, 1, "", "union1d"]], "arkouda.plotting": [[25, 5, 1, "", "plot_dist"]], "arkouda.row": [[26, 2, 1, "", "Row"]], "arkouda.row.Row": [[26, 3, 1, "", "__repr__"], [26, 3, 1, "", "__str__"], [26, 3, 1, "", "_repr_html_"]], "arkouda.security": [[27, 5, 1, "", "generate_token"], [27, 5, 1, "", "generate_username_token_json"], [27, 5, 1, "", "get_arkouda_client_directory"], [27, 5, 1, "", "get_home_directory"], [27, 5, 1, "", "get_username"], [27, 1, 1, "", "username_tokenizer"]], "arkouda.segarray": [[28, 2, 1, "", "SegArray"], [28, 5, 1, "", "_aggregator"], [28, 5, 1, "", "gen_ranges"], [28, 5, 1, "", "segarray"]], "arkouda.segarray.SegArray": [[28, 3, 1, "", "AND"], [28, 3, 1, "", "OR"], [28, 3, 1, "", "XOR"], [28, 3, 1, "", "__eq__"], [28, 3, 1, "", "__getitem__"], [28, 3, 1, "", "__repr__"], [28, 3, 1, "", "__str__"], [28, 3, 1, "", "_compute_non_empty"], [28, 3, 1, "", "_from_attach_return_msg"], [28, 3, 1, "", "_normalize_index"], [28, 3, 1, "", "aggregate"], [28, 3, 1, "", "all"], [28, 3, 1, "", "any"], [28, 3, 1, "", "append"], [28, 3, 1, "", "append_single"], [28, 3, 1, "", "argmax"], [28, 3, 1, "", "argmin"], [28, 3, 1, "", "attach"], [28, 3, 1, "", "concat"], [28, 3, 1, "", "copy"], [28, 3, 1, "", "from_multi_array"], [28, 3, 1, "", "from_parts"], [28, 3, 1, "", "from_return_msg"], [28, 3, 1, "", "get_jth"], [28, 3, 1, "", "get_length_n"], [28, 3, 1, "", "get_ngrams"], [28, 3, 1, "", "get_prefixes"], [28, 3, 1, "", "get_suffixes"], [28, 3, 1, "", "intersect"], [28, 3, 1, "", "is_registered"], [28, 6, 1, "", "lengths"], [28, 3, 1, "", "load"], [28, 3, 1, "", "max"], [28, 3, 1, "", "mean"], [28, 3, 1, "", "min"], [28, 6, 1, "", "non_empty"], [28, 6, 1, "", "non_empty_count"], [28, 3, 1, "", "nunique"], [28, 6, 1, "", "objtype"], [28, 3, 1, "", "prepend_single"], [28, 3, 1, "", "prod"], [28, 3, 1, "", "register"], [28, 3, 1, "", "remove_repeats"], [28, 3, 1, "", "save"], [28, 3, 1, "", "set_jth"], [28, 3, 1, "", "setdiff"], [28, 3, 1, "", "setxor"], [28, 3, 1, "", "sum"], [28, 3, 1, "", "to_list"], [28, 3, 1, "", "to_ndarray"], [28, 3, 1, "", "union"], [28, 3, 1, "", "unique"], [28, 3, 1, "", "unregister"], [28, 4, 1, "", "valsize"]], "arkouda.series": [[29, 2, 1, "", "Series"]], "arkouda.series.Series": [[29, 3, 1, "", "__getitem__"], [29, 3, 1, "", "__len__"], [29, 3, 1, "", "__repr__"], [29, 3, 1, "", "_all_aligned"], [29, 3, 1, "", "_make_aggop"], [29, 3, 1, "", "_make_binop"], [29, 3, 1, "", "_make_unaryop"], [29, 3, 1, "", "add"], [29, 3, 1, "", "attach"], [29, 3, 1, "", "concat"], [29, 3, 1, "", "diff"], [29, 4, 1, "", "dt"], [29, 3, 1, "", "from_return_msg"], [29, 3, 1, "", "head"], [29, 3, 1, "", "is_registered"], [29, 3, 1, "", "isin"], [29, 3, 1, "", "locate"], [29, 3, 1, "", "pdconcat"], [29, 3, 1, "", "register"], [29, 6, 1, "", "shape"], [29, 3, 1, "", "sort_index"], [29, 3, 1, "", "sort_values"], [29, 4, 1, "", "str_acc"], [29, 3, 1, "", "tail"], [29, 3, 1, "", "to_dataframe"], [29, 3, 1, "", "to_pandas"], [29, 3, 1, "", "topn"], [29, 3, 1, "", "value_counts"]], "arkouda.sorting": [[30, 1, 1, "", "SortingAlgorithm"], [30, 5, 1, "", "argsort"], [30, 5, 1, "", "coargsort"], [30, 5, 1, "", "sort"]], "arkouda.strings": [[31, 2, 1, "", "Strings"]], "arkouda.strings.Strings": [[31, 4, 1, "", "BinOps"], [31, 3, 1, "", "__add__"], [31, 3, 1, "", "__eq__"], [31, 3, 1, "", "__getitem__"], [31, 3, 1, "", "__iter__"], [31, 3, 1, "", "__len__"], [31, 3, 1, "", "__ne__"], [31, 3, 1, "", "__radd__"], [31, 3, 1, "", "__repr__"], [31, 3, 1, "", "__str__"], [31, 3, 1, "", "_binop"], [31, 3, 1, "", "_comp_to_ndarray"], [31, 3, 1, "", "_empty_pattern_verification"], [31, 3, 1, "", "_get_grouping_keys"], [31, 3, 1, "", "_get_matcher"], [31, 3, 1, "", "_list_component_names"], [31, 3, 1, "", "astype"], [31, 3, 1, "", "attach"], [31, 3, 1, "", "cached_regex_patterns"], [31, 3, 1, "", "contains"], [31, 4, 1, "", "dtype"], [31, 3, 1, "", "endswith"], [31, 4, 1, "", "entry"], [31, 3, 1, "", "find_locations"], [31, 3, 1, "", "findall"], [31, 3, 1, "", "flatten"], [31, 3, 1, "", "from_parts"], [31, 3, 1, "", "from_return_msg"], [31, 3, 1, "", "fullmatch"], [31, 3, 1, "", "get_lengths"], [31, 3, 1, "", "get_prefixes"], [31, 3, 1, "", "get_suffixes"], [31, 3, 1, "", "group"], [31, 3, 1, "", "hash"], [31, 3, 1, "", "idna_decode"], [31, 3, 1, "", "idna_encode"], [31, 3, 1, "", "info"], [31, 3, 1, "", "is_lower"], [31, 3, 1, "", "is_registered"], [31, 3, 1, "", "is_title"], [31, 3, 1, "", "is_upper"], [31, 4, 1, "", "logger"], [31, 3, 1, "", "lstick"], [31, 3, 1, "", "match"], [31, 4, 1, "", "nbytes"], [31, 4, 1, "", "ndim"], [31, 4, 1, "", "objtype"], [31, 3, 1, "", "peel"], [31, 3, 1, "", "pretty_print_info"], [31, 3, 1, "", "purge_cached_regex_patterns"], [31, 3, 1, "", "register"], [31, 3, 1, "", "rpeel"], [31, 3, 1, "", "save"], [31, 3, 1, "", "save_hdf"], [31, 3, 1, "", "save_parquet"], [31, 3, 1, "", "search"], [31, 4, 1, "", "shape"], [31, 4, 1, "", "size"], [31, 3, 1, "", "split"], [31, 3, 1, "", "startswith"], [31, 3, 1, "", "stick"], [31, 3, 1, "", "strip"], [31, 3, 1, "", "sub"], [31, 3, 1, "", "subn"], [31, 3, 1, "", "to_list"], [31, 3, 1, "", "to_lower"], [31, 3, 1, "", "to_ndarray"], [31, 3, 1, "", "to_title"], [31, 3, 1, "", "to_upper"], [31, 3, 1, "", "unregister"], [31, 3, 1, "", "unregister_strings_by_name"]], "arkouda.timeclass": [[32, 2, 1, "", "Datetime"], [32, 2, 1, "", "Timedelta"], [32, 2, 1, "", "_AbstractBaseTime"], [32, 1, 1, "", "_BASE_UNIT"], [32, 2, 1, "", "_Timescalar"], [32, 5, 1, "", "_get_factor"], [32, 5, 1, "", "_identity"], [32, 1, 1, "", "_unit2factor"], [32, 1, 1, "", "_unit2normunit"], [32, 5, 1, "", "date_range"], [32, 5, 1, "", "timedelta_range"]], "arkouda.timeclass.Datetime": [[32, 3, 1, "", "_ensure_components"], [32, 3, 1, "", "_get_callback"], [32, 3, 1, "", "_is_supported_scalar"], [32, 3, 1, "", "_scalar_callback"], [32, 6, 1, "", "date"], [32, 6, 1, "", "day"], [32, 6, 1, "", "day_of_week"], [32, 6, 1, "", "day_of_year"], [32, 6, 1, "", "dayofweek"], [32, 6, 1, "", "dayofyear"], [32, 6, 1, "", "hour"], [32, 6, 1, "", "is_leap_year"], [32, 3, 1, "", "isocalendar"], [32, 6, 1, "", "microsecond"], [32, 6, 1, "", "millisecond"], [32, 6, 1, "", "minute"], [32, 6, 1, "", "month"], [32, 6, 1, "", "nanosecond"], [32, 6, 1, "", "second"], [32, 3, 1, "", "sum"], [32, 4, 1, "", "supported_opeq"], [32, 4, 1, "", "supported_with_datetime"], [32, 4, 1, "", "supported_with_pdarray"], [32, 4, 1, "", "supported_with_r_datetime"], [32, 4, 1, "", "supported_with_r_pdarray"], [32, 4, 1, "", "supported_with_r_timedelta"], [32, 4, 1, "", "supported_with_timedelta"], [32, 3, 1, "", "to_pandas"], [32, 6, 1, "", "week"], [32, 6, 1, "", "weekday"], [32, 6, 1, "", "weekofyear"], [32, 6, 1, "", "year"]], "arkouda.timeclass.Timedelta": [[32, 3, 1, "", "_ensure_components"], [32, 3, 1, "", "_get_callback"], [32, 3, 1, "", "_is_supported_scalar"], [32, 3, 1, "", "_scalar_callback"], [32, 3, 1, "", "abs"], [32, 6, 1, "", "components"], [32, 6, 1, "", "days"], [32, 6, 1, "", "microseconds"], [32, 6, 1, "", "nanoseconds"], [32, 6, 1, "", "seconds"], [32, 3, 1, "", "std"], [32, 3, 1, "", "sum"], [32, 4, 1, "", "supported_opeq"], [32, 4, 1, "", "supported_with_datetime"], [32, 4, 1, "", "supported_with_pdarray"], [32, 4, 1, "", "supported_with_r_datetime"], [32, 4, 1, "", "supported_with_r_pdarray"], [32, 4, 1, "", "supported_with_r_timedelta"], [32, 4, 1, "", "supported_with_timedelta"], [32, 3, 1, "", "to_pandas"], [32, 3, 1, "", "total_seconds"]], "arkouda.timeclass._AbstractBaseTime": [[32, 3, 1, "", "__getitem__"], [32, 3, 1, "", "__repr__"], [32, 3, 1, "", "__setitem__"], [32, 3, 1, "", "__str__"], [32, 3, 1, "", "_binop"], [32, 3, 1, "", "_get_callback"], [32, 3, 1, "", "_is_datetime_scalar"], [32, 3, 1, "", "_is_timedelta_scalar"], [32, 3, 1, "", "_r_binop"], [32, 3, 1, "", "_scalar_callback"], [32, 3, 1, "", "ceil"], [32, 3, 1, "", "floor"], [32, 3, 1, "", "max"], [32, 3, 1, "", "maxk"], [32, 3, 1, "", "min"], [32, 3, 1, "", "mink"], [32, 3, 1, "", "opeq"], [32, 3, 1, "", "round"], [32, 3, 1, "", "to_list"], [32, 3, 1, "", "to_ndarray"]], "arkouda.util": [[33, 5, 1, "", "arkouda_to_numpy"], [33, 5, 1, "", "attach"], [33, 5, 1, "", "attach_all"], [33, 5, 1, "", "concatenate"], [33, 5, 1, "", "convert_if_categorical"], [33, 5, 1, "", "enrich_inplace"], [33, 5, 1, "", "expand"], [33, 5, 1, "", "generic_concat"], [33, 5, 1, "", "get_callback"], [33, 5, 1, "", "identity"], [33, 5, 1, "", "invert_permutation"], [33, 5, 1, "", "most_common"], [33, 5, 1, "", "numpy_to_arkouda"], [33, 5, 1, "", "register"], [33, 5, 1, "", "register_all"], [33, 5, 1, "", "report_mem"], [33, 5, 1, "", "unregister_all"], [33, 5, 1, "", "unregister_by_name"]]}, "objtypes": {"0": "py:module", "1": "py:data", "2": "py:class", "3": "py:method", "4": "py:attribute", "5": "py:function", "6": "py:property", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "data", "Python data"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"], "6": ["py", "property", "Python property"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"arkouda": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 41, 45, 48, 51, 56, 57, 59, 60], "_version": 0, "modul": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], "content": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37], "class": [0, 1, 3, 4, 6, 7, 10, 11, 12, 17, 18, 19, 20, 22, 26, 28, 29, 31, 32, 55], "function": [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 20, 21, 22, 23, 24, 25, 27, 28, 30, 32, 33, 35, 47], "attribut": [0, 3, 9, 10, 11, 13, 17, 27, 30, 32], "accessor": 1, "align": 2, "array_view": 3, "categor": [4, 49], "client": [5, 39, 41, 44, 59], "client_dtyp": 6, "datafram": [7, 36, 44, 51], "decor": 8, "dtype": [9, 45], "groupbyclass": 10, "submodul": 11, "packag": 11, "input": [11, 29], "index": [12, 41, 45, 48, 51, 54], "infoclass": 13, "io_util": 14, "join": [15, 60], "logger": 16, "match": [17, 60], "matcher": 18, "messag": 19, "numer": [20, 47], "pdarrayio": 21, "pdarrayclass": 22, "pdarraycr": 23, "pdarraysetop": 24, "plot": 25, "row": 26, "secur": 27, "segarrai": [28, 56], "seri": [29, 57], "sort": [30, 41, 46, 51, 57], "string": [31, 60], "timeclass": 32, "util": 33, "api": [34, 38], "refer": [34, 38], "contribut": 35, "ad": 35, "python": [35, 40, 41, 59], "exampl": [35, 36], "server": [35, 39, 41, 44, 59], "like": 36, "pattern": 36, "select": 36, "descript": [36, 53], "group": 36, "integr": [36, 57], "panda": [36, 40, 57], "graph": 36, "welcom": 37, "": 37, "document": 37, "indic": 37, "tabl": 37, "chapel": [38, 39, 40], "instal": 39, "download": 39, "environ": 39, "setup": 39, "build": 39, "troubleshoot": 39, "built": 39, "thi": 39, "configur": 39, "unabl": 39, "find": 39, "hdf5": [39, 40], "zmq": [39, 40], "prerequisit": 40, "multi": 40, "local": 40, "3": [40, 41, 59], "anaconda": 40, "recommend": 40, "includ": 40, "numpi": 40, "quickstart": 41, "launch": [41, 59], "connect": [41, 59], "simpl": 41, "comput": 41, "creat": [41, 50], "sum": 41, "an": 41, "arrai": [41, 44, 50, 56, 58], "arithmet": [41, 47], "And": 41, "more": 41, "shutdown": 41, "option": 41, "perform": [42, 56, 60], "test": 42, "argsort": [42, 45], "posit": 42, "argument": 42, "name": [42, 55], "gather": [42, 54], "reduc": 42, "scan": [42, 47], "scatter": [42, 54], "stream": 42, "usag": 43, "data": [44, 51, 53, 55], "i": [44, 60], "o": [44, 60], "between": 44, "larg": 44, "dataset": 44, "support": 44, "file": 44, "format": 44, "preprocess": 44, "read": 44, "from": 44, "disk": 44, "persist": 44, "pdarrai": [44, 54, 55], "load": 44, "import": 44, "export": 44, "featur": [45, 51, 57], "chang": 45, "lookup": [45, 57], "concat": 45, "oper": [47, 49, 55, 56, 58, 60], "vector": 47, "scalar": 47, "element": [47, 56], "wise": 47, "reduct": 47, "where": 47, "arrayview": 48, "creation": 48, "iter": [48, 49, 51, 55, 56, 60], "construct": 49, "constant": 50, "regular": [50, 60], "random": 50, "concaten": [50, 51], "type": [51, 55], "drop": 51, "groupbi": [51, 52], "copi": 51, "filter": 51, "permut": 51, "tail": [51, 57], "head": [51, 57], "renam": 51, "column": 51, "append": [51, 56], "reset": 51, "dedupl": [51, 56], "summar": 53, "statist": 53, "histogram": 53, "valu": [53, 57], "count": [53, 57], "assign": 54, "integ": 54, "slice": 54, "logic": 54, "The": 55, "rank": 55, "cast": 55, "reshap": 55, "specif": [56, 60], "method": [56, 60], "prefix": 56, "suffix": 56, "ngram": 56, "sub": 56, "size": 56, "access": 56, "set": [56, 58], "prepend": 56, "setop": 56, "union": 56, "intersect": 56, "differ": 56, "symmetr": 56, "startup": 59, "substr": 60, "search": 60, "split": 60, "flatten": 60, "express": 60, "object": 60}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"arkouda._version": [[0, "module-arkouda._version"]], "Module Contents": [[0, "module-contents"], [1, "module-contents"], [2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"]], "Classes": [[0, "classes"], [1, "classes"], [3, "classes"], [4, "classes"], [6, "classes"], [7, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [22, "classes"], [26, "classes"], [28, "classes"], [29, "classes"], [31, "classes"], [32, "classes"]], "Functions": [[0, "functions"], [1, "functions"], [2, "functions"], [5, "functions"], [6, "functions"], [7, "functions"], [8, "functions"], [9, "functions"], [10, "functions"], [11, "functions"], [13, "functions"], [14, "functions"], [15, "functions"], [16, "functions"], [20, "functions"], [21, "functions"], [22, "functions"], [23, "functions"], [24, "functions"], [25, "functions"], [27, "functions"], [28, "functions"], [30, "functions"], [32, "functions"], [33, "functions"]], "Attributes": [[0, "attributes"], [3, "attributes"], [9, "attributes"], [10, "attributes"], [11, "attributes"], [13, "attributes"], [17, "attributes"], [27, "attributes"], [30, "attributes"], [32, "attributes"]], "arkouda.accessor": [[1, "module-arkouda.accessor"]], "arkouda.alignment": [[2, "module-arkouda.alignment"]], "arkouda.array_view": [[3, "module-arkouda.array_view"]], "arkouda.categorical": [[4, "module-arkouda.categorical"]], "arkouda.client": [[5, "module-arkouda.client"]], "arkouda.client_dtypes": [[6, "module-arkouda.client_dtypes"]], "arkouda.dataframe": [[7, "module-arkouda.dataframe"]], "arkouda.decorators": [[8, "module-arkouda.decorators"]], "arkouda.dtypes": [[9, "module-arkouda.dtypes"]], "arkouda.groupbyclass": [[10, "module-arkouda.groupbyclass"]], "arkouda": [[11, "module-arkouda"]], "Submodules": [[11, "submodules"]], "Package Contents": [[11, "package-contents"]], "Input": [[11, "input"], [29, "input"]], "arkouda.index": [[12, "module-arkouda.index"]], "arkouda.infoclass": [[13, "module-arkouda.infoclass"]], "arkouda.io_util": [[14, "module-arkouda.io_util"]], "arkouda.join": [[15, "module-arkouda.join"]], "arkouda.logger": [[16, "module-arkouda.logger"]], "arkouda.match": [[17, "module-arkouda.match"]], "arkouda.matcher": [[18, "module-arkouda.matcher"]], "arkouda.message": [[19, "module-arkouda.message"]], "arkouda.numeric": [[20, "module-arkouda.numeric"]], "arkouda.pdarrayIO": [[21, "module-arkouda.pdarrayIO"]], "arkouda.pdarrayclass": [[22, "module-arkouda.pdarrayclass"]], "arkouda.pdarraycreation": [[23, "module-arkouda.pdarraycreation"]], "arkouda.pdarraysetops": [[24, "module-arkouda.pdarraysetops"]], "arkouda.plotting": [[25, "module-arkouda.plotting"]], "arkouda.row": [[26, "module-arkouda.row"]], "arkouda.security": [[27, "module-arkouda.security"]], "arkouda.segarray": [[28, "module-arkouda.segarray"]], "arkouda.series": [[29, "module-arkouda.series"]], "arkouda.sorting": [[30, "module-arkouda.sorting"]], "arkouda.strings": [[31, "module-arkouda.strings"]], "arkouda.timeclass": [[32, "module-arkouda.timeclass"]], "arkouda.util": [[33, "module-arkouda.util"]], "API Reference": [[34, "api-reference"]], "Contributing": [[35, "contributing"]], "Adding Python Functionality": [[35, "adding-python-functionality"]], "Example": [[35, "example"], [35, "id1"]], "Adding Functionality to the Arkouda Server": [[35, "adding-functionality-to-the-arkouda-server"]], "Examples": [[36, "examples"]], "DataFrame-like Patterns": [[36, "dataframe-like-patterns"]], "Selection": [[36, "selection"]], "Description": [[36, "description"]], "Grouping": [[36, "grouping"]], "Integration with Pandas": [[36, "integration-with-pandas"]], "Graphs": [[36, "graphs"]], "Welcome to arkouda\u2019s documentation!": [[37, "welcome-to-arkouda-s-documentation"]], "Contents:": [[37, null]], "Indices and tables": [[37, "indices-and-tables"]], "Chapel API Reference": [[38, "chapel-api-reference"]], "Installation": [[39, "installation"]], "Download": [[39, "download"]], "Environment Setup": [[39, "environment-setup"]], "Build the Server": [[39, "build-the-server"]], "Install the Client": [[39, "install-the-client"]], "Troubleshooting": [[39, "troubleshooting"]], "Chapel not built for this configuration": [[39, "chapel-not-built-for-this-configuration"]], "Unable to find HDF5 or ZMQ": [[39, "unable-to-find-hdf5-or-zmq"]], "Prerequisites": [[40, "prerequisites"]], "Chapel": [[40, "chapel"]], "Multi-Locale": [[40, "multi-locale"]], "Python 3 (Anaconda recommended)": [[40, "python-3-anaconda-recommended"]], "HDF5 and ZMQ (included with Anaconda)": [[40, "hdf5-and-zmq-included-with-anaconda"]], "Numpy (included with Anaconda)": [[40, "numpy-included-with-anaconda"]], "Pandas (recommended; included with Anaconda)": [[40, "pandas-recommended-included-with-anaconda"]], "Quickstart": [[41, "quickstart"]], "Launch Arkouda Server": [[41, "launch-arkouda-server"]], "Connect the Python 3 Client": [[41, "connect-the-python-3-client"]], "Simple Computations": [[41, "simple-computations"]], "Create and sum an array": [[41, "create-and-sum-an-array"]], "Array arithmetic": [[41, "array-arithmetic"]], "Indexing": [[41, "indexing"], [48, "indexing"]], "Sorting": [[41, "sorting"], [46, "sorting"], [51, "sorting"], [57, "sorting"]], "And More": [[41, "and-more"]], "Shutdown the server (optional)": [[41, "shutdown-the-server-optional"]], "Performance Testing": [[42, "performance-testing"]], "Argsort": [[42, "argsort"]], "Positional Arguments": [[42, "Positional Arguments"], [42, "Positional Arguments"], [42, "Positional Arguments"], [42, "Positional Arguments"], [42, "Positional Arguments"], [42, "Positional Arguments"]], "Named Arguments": [[42, "Named Arguments"], [42, "Named Arguments"], [42, "Named Arguments"], [42, "Named Arguments"], [42, "Named Arguments"], [42, "Named Arguments"]], "Gather": [[42, "gather"]], "Reduce": [[42, "reduce"]], "Scan": [[42, "scan"]], "Scatter": [[42, "scatter"]], "Stream": [[42, "stream"]], "Usage": [[43, "usage"]], "Data I/O": [[44, "data-i-o"]], "Between client and server": [[44, "between-client-and-server"]], "Large Datasets": [[44, "large-datasets"]], "Supported File Formats": [[44, "supported-file-formats"]], "Data Preprocessing": [[44, "data-preprocessing"]], "Reading data from disk": [[44, "reading-data-from-disk"]], "Persisting pdarray data to disk": [[44, "persisting-pdarray-data-to-disk"]], "Loading persisted arrays from disk": [[44, "loading-persisted-arrays-from-disk"]], "Persisting DataFrame data to disk": [[44, "persisting-dataframe-data-to-disk"]], "Loading persisted DataFrame data from disk": [[44, "loading-persisted-dataframe-data-from-disk"]], "Import/Export": [[44, "import-export"]], "Indexs in Arkouda": [[45, "indexs-in-arkouda"]], "Features": [[45, "features"], [51, "features"], [57, "features"]], "Change Dtype": [[45, "change-dtype"]], "ArgSort": [[45, "argsort"]], "Lookup": [[45, "lookup"], [57, "lookup"], [57, "id1"]], "Concat": [[45, "concat"]], "Arithmetic and Numeric Operations": [[47, "arithmetic-and-numeric-operations"]], "Vector and Scalar Arithmetic": [[47, "vector-and-scalar-arithmetic"]], "Element-wise Functions": [[47, "element-wise-functions"]], "Scans": [[47, "scans"]], "Reductions": [[47, "reductions"]], "Where": [[47, "where"]], "ArrayView in Arkouda": [[48, "arrayview-in-arkouda"]], "Creation": [[48, "creation"]], "Iteration": [[48, "iteration"], [49, "iteration"], [51, "iteration"], [55, "iteration"], [56, "iteration"], [60, "iteration"]], "Categoricals": [[49, "categoricals"]], "Construction": [[49, "construction"]], "Operations": [[49, "operations"], [60, "operations"]], "Creating Arrays": [[50, "creating-arrays"]], "Constant": [[50, "constant"]], "Regular": [[50, "regular"]], "Random": [[50, "random"]], "Concatenation": [[50, "concatenation"]], "DataFrames in Arkouda": [[51, "dataframes-in-arkouda"]], "Data Types": [[51, "data-types"]], "Drop": [[51, "drop"]], "GroupBy": [[51, "groupby"], [52, "groupby"]], "Copy": [[51, "copy"]], "Filter": [[51, "filter"]], "Permutations": [[51, "permutations"]], "Tail/Head of Data": [[51, "tail-head-of-data"]], "Rename Columns": [[51, "rename-columns"]], "Append": [[51, "append"]], "Concatenate": [[51, "concatenate"]], "Reset Indexes": [[51, "reset-indexes"]], "Deduplication": [[51, "deduplication"], [56, "deduplication"]], "Summarizing Data": [[53, "summarizing-data"]], "Descriptive Statistics": [[53, "descriptive-statistics"]], "Histogram": [[53, "histogram"]], "Value Counts": [[53, "value-counts"], [57, "value-counts"]], "Indexing and Assignment": [[54, "indexing-and-assignment"]], "Integer": [[54, "integer"]], "Slice": [[54, "slice"]], "Gather/Scatter (pdarray)": [[54, "gather-scatter-pdarray"]], "Integer pdarray index": [[54, "integer-pdarray-index"]], "Logical indexing": [[54, "logical-indexing"]], "The pdarray class": [[55, "the-pdarray-class"]], "Data Type": [[55, "data-type"]], "Rank": [[55, "rank"]], "Name": [[55, "name"]], "Operators": [[55, "operators"]], "Type Casting": [[55, "type-casting"]], "Reshape": [[55, "reshape"]], "SegArrays in Arkouda": [[56, "segarrays-in-arkouda"]], "Performance": [[56, "performance"], [60, "performance"]], "Operation": [[56, "operation"]], "SegArray Specific Methods": [[56, "segarray-specific-methods"]], "Prefix & Suffix": [[56, "prefix-suffix"]], "NGrams": [[56, "ngrams"]], "Sub-array of Size": [[56, "sub-array-of-size"]], "Access/Set Specific Elements in Sub-Array": [[56, "access-set-specific-elements-in-sub-array"]], "Append & Prepend": [[56, "append-prepend"]], "SegArray SetOps": [[56, "segarray-setops"]], "Union": [[56, "union"]], "Intersect": [[56, "intersect"]], "Set Difference": [[56, "set-difference"]], "Symmetric Difference": [[56, "symmetric-difference"]], "Series in Arkouda": [[57, "series-in-arkouda"]], "Head/Tail": [[57, "head-tail"]], "Pandas Integration": [[57, "pandas-integration"]], "Array Set Operations": [[58, "array-set-operations"]], "Startup": [[59, "startup"]], "Launch arkouda server": [[59, "launch-arkouda-server"]], "Connect a Python 3 client": [[59, "connect-a-python-3-client"]], "Strings in Arkouda": [[60, "strings-in-arkouda"]], "I/O": [[60, "i-o"]], "String-Specific Methods": [[60, "string-specific-methods"]], "Substring search": [[60, "substring-search"]], "Splitting and joining": [[60, "splitting-and-joining"]], "Flattening": [[60, "flattening"]], "Regular Expressions": [[60, "regular-expressions"]], "Match Object": [[60, "match-object"]]}, "indexentries": {"handlers (in module arkouda._version)": [[0, "arkouda._version.HANDLERS"]], "long_version_py (in module arkouda._version)": [[0, "arkouda._version.LONG_VERSION_PY"]], "notthismethod": [[0, "arkouda._version.NotThisMethod"]], "versioneerconfig (class in arkouda._version)": [[0, "arkouda._version.VersioneerConfig"]], "arkouda._version": [[0, "module-arkouda._version"]], "get_config() (in module arkouda._version)": [[0, "arkouda._version.get_config"]], "get_keywords() (in module arkouda._version)": [[0, "arkouda._version.get_keywords"]], "get_versions() (in module arkouda._version)": [[0, "arkouda._version.get_versions"]], "git_get_keywords() (in module arkouda._version)": [[0, "arkouda._version.git_get_keywords"]], "git_pieces_from_vcs() (in module arkouda._version)": [[0, "arkouda._version.git_pieces_from_vcs"]], "git_versions_from_keywords() (in module arkouda._version)": [[0, "arkouda._version.git_versions_from_keywords"]], "module": [[0, "module-arkouda._version"], [1, "module-arkouda.accessor"], [2, "module-arkouda.alignment"], [3, "module-arkouda.array_view"], [4, "module-arkouda.categorical"], [5, "module-arkouda.client"], [6, "module-arkouda.client_dtypes"], [7, "module-arkouda.dataframe"], [8, "module-arkouda.decorators"], [9, "module-arkouda.dtypes"], [10, "module-arkouda.groupbyclass"], [11, "module-arkouda"], [12, "module-arkouda.index"], [13, "module-arkouda.infoclass"], [14, "module-arkouda.io_util"], [15, "module-arkouda.join"], [16, "module-arkouda.logger"], [17, "module-arkouda.match"], [18, "module-arkouda.matcher"], [19, "module-arkouda.message"], [20, "module-arkouda.numeric"], [21, "module-arkouda.pdarrayIO"], [22, "module-arkouda.pdarrayclass"], [23, "module-arkouda.pdarraycreation"], [24, "module-arkouda.pdarraysetops"], [25, "module-arkouda.plotting"], [26, "module-arkouda.row"], [27, "module-arkouda.security"], [28, "module-arkouda.segarray"], [29, "module-arkouda.series"], [30, "module-arkouda.sorting"], [31, "module-arkouda.strings"], [32, "module-arkouda.timeclass"], [33, "module-arkouda.util"]], "plus_or_dot() (in module arkouda._version)": [[0, "arkouda._version.plus_or_dot"]], "register_vcs_handler() (in module arkouda._version)": [[0, "arkouda._version.register_vcs_handler"]], "render() (in module arkouda._version)": [[0, "arkouda._version.render"]], "render_git_describe() (in module arkouda._version)": [[0, "arkouda._version.render_git_describe"]], "render_git_describe_long() (in module arkouda._version)": [[0, "arkouda._version.render_git_describe_long"]], "render_pep440() (in module arkouda._version)": [[0, "arkouda._version.render_pep440"]], "render_pep440_old() (in module arkouda._version)": [[0, "arkouda._version.render_pep440_old"]], "render_pep440_post() (in module arkouda._version)": [[0, "arkouda._version.render_pep440_post"]], "render_pep440_pre() (in module arkouda._version)": [[0, "arkouda._version.render_pep440_pre"]], "run_command() (in module arkouda._version)": [[0, "arkouda._version.run_command"]], "versions_from_parentdir() (in module arkouda._version)": [[0, "arkouda._version.versions_from_parentdir"]], "cachedaccessor (class in arkouda.accessor)": [[1, "arkouda.accessor.CachedAccessor"]], "datetimeaccessor (class in arkouda.accessor)": [[1, "arkouda.accessor.DatetimeAccessor"]], "properties (class in arkouda.accessor)": [[1, "arkouda.accessor.Properties"]], "stringaccessor (class in arkouda.accessor)": [[1, "arkouda.accessor.StringAccessor"]], "__get__() (arkouda.accessor.cachedaccessor method)": [[1, "arkouda.accessor.CachedAccessor.__get__"]], "_make_op() (arkouda.accessor.properties class method)": [[1, "arkouda.accessor.Properties._make_op"]], "arkouda.accessor": [[1, "module-arkouda.accessor"]], "date_operators() (in module arkouda.accessor)": [[1, "arkouda.accessor.date_operators"]], "string_operators() (in module arkouda.accessor)": [[1, "arkouda.accessor.string_operators"]], "nonuniqueerror": [[2, "arkouda.alignment.NonUniqueError"]], "align() (in module arkouda.alignment)": [[2, "arkouda.alignment.align"]], "arkouda.alignment": [[2, "module-arkouda.alignment"]], "find() (in module arkouda.alignment)": [[2, "arkouda.alignment.find"]], "in1d_intervals() (in module arkouda.alignment)": [[2, "arkouda.alignment.in1d_intervals"]], "interval_lookup() (in module arkouda.alignment)": [[2, "arkouda.alignment.interval_lookup"]], "left_align() (in module arkouda.alignment)": [[2, "arkouda.alignment.left_align"]], "lookup() (in module arkouda.alignment)": [[2, "arkouda.alignment.lookup"]], "right_align() (in module arkouda.alignment)": [[2, "arkouda.alignment.right_align"]], "search_intervals() (in module arkouda.alignment)": [[2, "arkouda.alignment.search_intervals"]], "unsqueeze() (in module arkouda.alignment)": [[2, "arkouda.alignment.unsqueeze"]], "zero_up() (in module arkouda.alignment)": [[2, "arkouda.alignment.zero_up"]], "arrayview (class in arkouda.array_view)": [[3, "arkouda.array_view.ArrayView"]], "ordertype (in module arkouda.array_view)": [[3, "arkouda.array_view.OrderType"]], "__getitem__() (arkouda.array_view.arrayview method)": [[3, "arkouda.array_view.ArrayView.__getitem__"]], "__len__() (arkouda.array_view.arrayview method)": [[3, "arkouda.array_view.ArrayView.__len__"]], "__repr__() (arkouda.array_view.arrayview method)": [[3, "arkouda.array_view.ArrayView.__repr__"]], "__setitem__() (arkouda.array_view.arrayview method)": [[3, "arkouda.array_view.ArrayView.__setitem__"]], "__str__() (arkouda.array_view.arrayview method)": [[3, "arkouda.array_view.ArrayView.__str__"]], "arkouda.array_view": [[3, "module-arkouda.array_view"]], "base (arkouda.array_view.arrayview attribute)": [[3, "arkouda.array_view.ArrayView.base"]], "dtype (arkouda.array_view.arrayview attribute)": [[3, "arkouda.array_view.ArrayView.dtype"]], "itemsize (arkouda.array_view.arrayview attribute)": [[3, "arkouda.array_view.ArrayView.itemsize"]], "load() (arkouda.array_view.arrayview static method)": [[3, "arkouda.array_view.ArrayView.load"]], "ndim (arkouda.array_view.arrayview attribute)": [[3, "arkouda.array_view.ArrayView.ndim"]], "order (arkouda.array_view.arrayview attribute)": [[3, "arkouda.array_view.ArrayView.order"]], "save() (arkouda.array_view.arrayview method)": [[3, "arkouda.array_view.ArrayView.save"]], "shape (arkouda.array_view.arrayview attribute)": [[3, "arkouda.array_view.ArrayView.shape"]], "size (arkouda.array_view.arrayview attribute)": [[3, "arkouda.array_view.ArrayView.size"]], "to_list() (arkouda.array_view.arrayview method)": [[3, "arkouda.array_view.ArrayView.to_list"]], "to_ndarray() (arkouda.array_view.arrayview method)": [[3, "arkouda.array_view.ArrayView.to_ndarray"]], "binops (arkouda.categorical.categorical attribute)": [[4, "arkouda.categorical.Categorical.BinOps"]], "categorical (class in arkouda.categorical)": [[4, "arkouda.categorical.Categorical"]], "registerablepieces (arkouda.categorical.categorical attribute)": [[4, "arkouda.categorical.Categorical.RegisterablePieces"]], "requiredpieces (arkouda.categorical.categorical attribute)": [[4, "arkouda.categorical.Categorical.RequiredPieces"]], "__eq__() (arkouda.categorical.categorical method)": [[4, "arkouda.categorical.Categorical.__eq__"]], "__getitem__() (arkouda.categorical.categorical method)": [[4, "arkouda.categorical.Categorical.__getitem__"]], "__iter__() (arkouda.categorical.categorical method)": [[4, "arkouda.categorical.Categorical.__iter__"]], "__len__() (arkouda.categorical.categorical method)": [[4, "arkouda.categorical.Categorical.__len__"]], "__ne__() (arkouda.categorical.categorical method)": [[4, "arkouda.categorical.Categorical.__ne__"]], "__repr__() (arkouda.categorical.categorical method)": [[4, "arkouda.categorical.Categorical.__repr__"]], "__str__() (arkouda.categorical.categorical method)": [[4, "arkouda.categorical.Categorical.__str__"]], "_binop() (arkouda.categorical.categorical method)": [[4, "arkouda.categorical.Categorical._binop"]], "_get_components_dict() (arkouda.categorical.categorical method)": [[4, "arkouda.categorical.Categorical._get_components_dict"]], "_get_grouping_keys() (arkouda.categorical.categorical method)": [[4, "arkouda.categorical.Categorical._get_grouping_keys"]], "_list_component_names() (arkouda.categorical.categorical method)": [[4, "arkouda.categorical.Categorical._list_component_names"]], "_r_binop() (arkouda.categorical.categorical method)": [[4, "arkouda.categorical.Categorical._r_binop"]], "argsort() (arkouda.categorical.categorical method)": [[4, "arkouda.categorical.Categorical.argsort"]], "arkouda.categorical": [[4, "module-arkouda.categorical"]], "attach() (arkouda.categorical.categorical static method)": [[4, "arkouda.categorical.Categorical.attach"]], "categories (arkouda.categorical.categorical attribute)": [[4, "arkouda.categorical.Categorical.categories"]], "codes (arkouda.categorical.categorical attribute)": [[4, "arkouda.categorical.Categorical.codes"]], "concatenate() (arkouda.categorical.categorical method)": [[4, "arkouda.categorical.Categorical.concatenate"]], "contains() (arkouda.categorical.categorical method)": [[4, "arkouda.categorical.Categorical.contains"]], "endswith() (arkouda.categorical.categorical method)": [[4, "arkouda.categorical.Categorical.endswith"]], "from_codes() (arkouda.categorical.categorical class method)": [[4, "arkouda.categorical.Categorical.from_codes"]], "from_return_msg() (arkouda.categorical.categorical static method)": [[4, "arkouda.categorical.Categorical.from_return_msg"]], "group() (arkouda.categorical.categorical method)": [[4, "arkouda.categorical.Categorical.group"]], "in1d() (arkouda.categorical.categorical method)": [[4, "arkouda.categorical.Categorical.in1d"]], "info() (arkouda.categorical.categorical method)": [[4, "arkouda.categorical.Categorical.info"]], "is_registered() (arkouda.categorical.categorical method)": [[4, "arkouda.categorical.Categorical.is_registered"]], "isna() (arkouda.categorical.categorical method)": [[4, "arkouda.categorical.Categorical.isna"]], "ndim (arkouda.categorical.categorical attribute)": [[4, "arkouda.categorical.Categorical.ndim"]], "nlevels (arkouda.categorical.categorical attribute)": [[4, "arkouda.categorical.Categorical.nlevels"]], "objtype (arkouda.categorical.categorical property)": [[4, "arkouda.categorical.Categorical.objtype"]], "parse_hdf_categoricals() (arkouda.categorical.categorical static method)": [[4, "arkouda.categorical.Categorical.parse_hdf_categoricals"]], "permutation (arkouda.categorical.categorical attribute)": [[4, "arkouda.categorical.Categorical.permutation"], [4, "id0"]], "pretty_print_info() (arkouda.categorical.categorical method)": [[4, "arkouda.categorical.Categorical.pretty_print_info"]], "register() (arkouda.categorical.categorical method)": [[4, "arkouda.categorical.Categorical.register"]], "reset_categories() (arkouda.categorical.categorical method)": [[4, "arkouda.categorical.Categorical.reset_categories"]], "save() (arkouda.categorical.categorical method)": [[4, "arkouda.categorical.Categorical.save"]], "segments (arkouda.categorical.categorical attribute)": [[4, "arkouda.categorical.Categorical.segments"], [4, "id1"]], "set_categories() (arkouda.categorical.categorical method)": [[4, "arkouda.categorical.Categorical.set_categories"]], "shape (arkouda.categorical.categorical attribute)": [[4, "arkouda.categorical.Categorical.shape"]], "size (arkouda.categorical.categorical attribute)": [[4, "arkouda.categorical.Categorical.size"]], "sort() (arkouda.categorical.categorical method)": [[4, "arkouda.categorical.Categorical.sort"]], "standardize_categories() (arkouda.categorical.categorical class method)": [[4, "arkouda.categorical.Categorical.standardize_categories"]], "startswith() (arkouda.categorical.categorical method)": [[4, "arkouda.categorical.Categorical.startswith"]], "to_list() (arkouda.categorical.categorical method)": [[4, "arkouda.categorical.Categorical.to_list"]], "to_ndarray() (arkouda.categorical.categorical method)": [[4, "arkouda.categorical.Categorical.to_ndarray"]], "unique() (arkouda.categorical.categorical method)": [[4, "arkouda.categorical.Categorical.unique"]], "unregister() (arkouda.categorical.categorical method)": [[4, "arkouda.categorical.Categorical.unregister"]], "unregister_categorical_by_name() (arkouda.categorical.categorical static method)": [[4, "arkouda.categorical.Categorical.unregister_categorical_by_name"]], "arkouda.client": [[5, "module-arkouda.client"]], "connect() (in module arkouda.client)": [[5, "arkouda.client.connect"]], "disconnect() (in module arkouda.client)": [[5, "arkouda.client.disconnect"]], "get_config() (in module arkouda.client)": [[5, "arkouda.client.get_config"]], "get_mem_used() (in module arkouda.client)": [[5, "arkouda.client.get_mem_used"]], "get_server_commands() (in module arkouda.client)": [[5, "arkouda.client.get_server_commands"]], "print_server_commands() (in module arkouda.client)": [[5, "arkouda.client.print_server_commands"]], "ruok() (in module arkouda.client)": [[5, "arkouda.client.ruok"]], "shutdown() (in module arkouda.client)": [[5, "arkouda.client.shutdown"]], "bitvector (class in arkouda.client_dtypes)": [[6, "arkouda.client_dtypes.BitVector"]], "bitvectorizer() (in module arkouda.client_dtypes)": [[6, "arkouda.client_dtypes.BitVectorizer"]], "fields (class in arkouda.client_dtypes)": [[6, "arkouda.client_dtypes.Fields"]], "ipv4 (class in arkouda.client_dtypes)": [[6, "arkouda.client_dtypes.IPv4"]], "__getitem__() (arkouda.client_dtypes.bitvector method)": [[6, "arkouda.client_dtypes.BitVector.__getitem__"]], "__getitem__() (arkouda.client_dtypes.ipv4 method)": [[6, "arkouda.client_dtypes.IPv4.__getitem__"]], "__repr__() (arkouda.client_dtypes.bitvector method)": [[6, "arkouda.client_dtypes.BitVector.__repr__"]], "__repr__() (arkouda.client_dtypes.ipv4 method)": [[6, "arkouda.client_dtypes.IPv4.__repr__"]], "__setitem__() (arkouda.client_dtypes.bitvector method)": [[6, "arkouda.client_dtypes.BitVector.__setitem__"]], "__setitem__() (arkouda.client_dtypes.fields method)": [[6, "arkouda.client_dtypes.Fields.__setitem__"]], "__setitem__() (arkouda.client_dtypes.ipv4 method)": [[6, "arkouda.client_dtypes.IPv4.__setitem__"]], "__str__() (arkouda.client_dtypes.bitvector method)": [[6, "arkouda.client_dtypes.BitVector.__str__"]], "__str__() (arkouda.client_dtypes.ipv4 method)": [[6, "arkouda.client_dtypes.IPv4.__str__"]], "_binop() (arkouda.client_dtypes.bitvector method)": [[6, "arkouda.client_dtypes.BitVector._binop"]], "_binop() (arkouda.client_dtypes.fields method)": [[6, "arkouda.client_dtypes.Fields._binop"]], "_binop() (arkouda.client_dtypes.ipv4 method)": [[6, "arkouda.client_dtypes.IPv4._binop"]], "_cast() (arkouda.client_dtypes.bitvector method)": [[6, "arkouda.client_dtypes.BitVector._cast"]], "_cast() (arkouda.client_dtypes.fields method)": [[6, "arkouda.client_dtypes.Fields._cast"]], "_convert_strings() (arkouda.client_dtypes.fields method)": [[6, "arkouda.client_dtypes.Fields._convert_strings"]], "_is_supported_scalar() (arkouda.client_dtypes.ipv4 method)": [[6, "arkouda.client_dtypes.IPv4._is_supported_scalar"]], "_parse_scalar() (arkouda.client_dtypes.fields method)": [[6, "arkouda.client_dtypes.Fields._parse_scalar"]], "_r_binop() (arkouda.client_dtypes.bitvector method)": [[6, "arkouda.client_dtypes.BitVector._r_binop"]], "_r_binop() (arkouda.client_dtypes.fields method)": [[6, "arkouda.client_dtypes.Fields._r_binop"]], "_r_binop() (arkouda.client_dtypes.ipv4 method)": [[6, "arkouda.client_dtypes.IPv4._r_binop"]], "arkouda.client_dtypes": [[6, "module-arkouda.client_dtypes"]], "conserves (arkouda.client_dtypes.bitvector attribute)": [[6, "arkouda.client_dtypes.BitVector.conserves"]], "format() (arkouda.client_dtypes.bitvector method)": [[6, "arkouda.client_dtypes.BitVector.format"]], "format() (arkouda.client_dtypes.fields method)": [[6, "arkouda.client_dtypes.Fields.format"]], "format() (arkouda.client_dtypes.ipv4 method)": [[6, "arkouda.client_dtypes.IPv4.format"]], "ip_address() (in module arkouda.client_dtypes)": [[6, "arkouda.client_dtypes.ip_address"]], "is_ipv4() (in module arkouda.client_dtypes)": [[6, "arkouda.client_dtypes.is_ipv4"]], "is_ipv6() (in module arkouda.client_dtypes)": [[6, "arkouda.client_dtypes.is_ipv6"]], "normalize() (arkouda.client_dtypes.ipv4 method)": [[6, "arkouda.client_dtypes.IPv4.normalize"]], "opeq() (arkouda.client_dtypes.bitvector method)": [[6, "arkouda.client_dtypes.BitVector.opeq"]], "opeq() (arkouda.client_dtypes.fields method)": [[6, "arkouda.client_dtypes.Fields.opeq"]], "opeq() (arkouda.client_dtypes.ipv4 method)": [[6, "arkouda.client_dtypes.IPv4.opeq"]], "to_list() (arkouda.client_dtypes.bitvector method)": [[6, "arkouda.client_dtypes.BitVector.to_list"]], "to_list() (arkouda.client_dtypes.ipv4 method)": [[6, "arkouda.client_dtypes.IPv4.to_list"]], "to_ndarray() (arkouda.client_dtypes.bitvector method)": [[6, "arkouda.client_dtypes.BitVector.to_ndarray"]], "to_ndarray() (arkouda.client_dtypes.ipv4 method)": [[6, "arkouda.client_dtypes.IPv4.to_ndarray"]], "column_classes (arkouda.dataframe.dataframe attribute)": [[7, "arkouda.dataframe.DataFrame.COLUMN_CLASSES"]], "dataframe (class in arkouda.dataframe)": [[7, "arkouda.dataframe.DataFrame"]], "groupby() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame.GroupBy"], [7, "arkouda.dataframe.DataFrame.groupby"]], "__delitem__() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame.__delitem__"]], "__dir__() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame.__dir__"]], "__getattr__() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame.__getattr__"]], "__getitem__() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame.__getitem__"]], "__len__() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame.__len__"]], "__repr__() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame.__repr__"]], "__setitem__() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame.__setitem__"]], "__str__() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame.__str__"]], "_drop_column() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame._drop_column"]], "_drop_row() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame._drop_row"]], "_get_head_tail() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame._get_head_tail"]], "_get_head_tail_server() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame._get_head_tail_server"]], "_ipython_key_completions_() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame._ipython_key_completions_"]], "_ncols() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame._ncols"]], "_parse_col_name() (arkouda.dataframe.dataframe static method)": [[7, "arkouda.dataframe.DataFrame._parse_col_name"]], "_rename_column() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame._rename_column"]], "_rename_index() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame._rename_index"]], "_repr_html_() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame._repr_html_"]], "_set_index() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame._set_index"]], "_shape_str() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame._shape_str"]], "append() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame.append"]], "apply_permutation() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame.apply_permutation"]], "argsort() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame.argsort"]], "arkouda.dataframe": [[7, "module-arkouda.dataframe"]], "attach() (arkouda.dataframe.dataframe static method)": [[7, "arkouda.dataframe.DataFrame.attach"]], "coargsort() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame.coargsort"]], "columns (arkouda.dataframe.dataframe property)": [[7, "arkouda.dataframe.DataFrame.columns"]], "concat() (arkouda.dataframe.dataframe class method)": [[7, "arkouda.dataframe.DataFrame.concat"]], "copy() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame.copy"]], "corr() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame.corr"]], "drop() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame.drop"]], "drop_duplicates() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame.drop_duplicates"]], "dtypes (arkouda.dataframe.dataframe property)": [[7, "arkouda.dataframe.DataFrame.dtypes"]], "empty (arkouda.dataframe.dataframe property)": [[7, "arkouda.dataframe.DataFrame.empty"]], "filter_by_range() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame.filter_by_range"]], "from_pandas() (arkouda.dataframe.dataframe class method)": [[7, "arkouda.dataframe.DataFrame.from_pandas"]], "from_return_msg() (arkouda.dataframe.dataframe static method)": [[7, "arkouda.dataframe.DataFrame.from_return_msg"]], "head() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame.head"]], "index (arkouda.dataframe.dataframe property)": [[7, "arkouda.dataframe.DataFrame.index"]], "info (arkouda.dataframe.dataframe property)": [[7, "arkouda.dataframe.DataFrame.info"]], "intersect() (in module arkouda.dataframe)": [[7, "arkouda.dataframe.intersect"]], "intx() (in module arkouda.dataframe)": [[7, "arkouda.dataframe.intx"]], "invert_permutation() (in module arkouda.dataframe)": [[7, "arkouda.dataframe.invert_permutation"]], "is_registered() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame.is_registered"]], "isin() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame.isin"]], "load() (arkouda.dataframe.dataframe class method)": [[7, "arkouda.dataframe.DataFrame.load"]], "memory_usage() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame.memory_usage"]], "register() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame.register"]], "rename() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame.rename"]], "reset_index() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame.reset_index"]], "sample() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame.sample"]], "save() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame.save"]], "shape (arkouda.dataframe.dataframe property)": [[7, "arkouda.dataframe.DataFrame.shape"]], "size (arkouda.dataframe.dataframe property)": [[7, "arkouda.dataframe.DataFrame.size"]], "sort_values() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame.sort_values"]], "sorted() (in module arkouda.dataframe)": [[7, "arkouda.dataframe.sorted"]], "tail() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame.tail"]], "to_pandas() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame.to_pandas"]], "unregister() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame.unregister"]], "unregister_dataframe_by_name() (arkouda.dataframe.dataframe static method)": [[7, "arkouda.dataframe.DataFrame.unregister_dataframe_by_name"]], "update_size() (arkouda.dataframe.dataframe method)": [[7, "arkouda.dataframe.DataFrame.update_size"]], "arkouda.decorators": [[8, "module-arkouda.decorators"]], "objtypedec() (in module arkouda.decorators)": [[8, "arkouda.decorators.objtypedec"]], "arkouda_supported_dtypes (in module arkouda.dtypes)": [[9, "arkouda.dtypes.ARKOUDA_SUPPORTED_DTYPES"]], "dtypeobjects (in module arkouda.dtypes)": [[9, "arkouda.dtypes.DTypeObjects"]], "dtypes (in module arkouda.dtypes)": [[9, "arkouda.dtypes.DTypes"]], "all_scalars (in module arkouda.dtypes)": [[9, "arkouda.dtypes.all_scalars"]], "arkouda.dtypes": [[9, "module-arkouda.dtypes"]], "bittype (in module arkouda.dtypes)": [[9, "arkouda.dtypes.bitType"]], "bool (in module arkouda.dtypes)": [[9, "arkouda.dtypes.bool"]], "bool_scalars (in module arkouda.dtypes)": [[9, "arkouda.dtypes.bool_scalars"]], "check_np_dtype() (in module arkouda.dtypes)": [[9, "arkouda.dtypes.check_np_dtype"]], "dtype (in module arkouda.dtypes)": [[9, "arkouda.dtypes.dtype"]], "float64 (in module arkouda.dtypes)": [[9, "arkouda.dtypes.float64"]], "float_scalars (in module arkouda.dtypes)": [[9, "arkouda.dtypes.float_scalars"]], "get_byteorder() (in module arkouda.dtypes)": [[9, "arkouda.dtypes.get_byteorder"]], "get_server_byteorder() (in module arkouda.dtypes)": [[9, "arkouda.dtypes.get_server_byteorder"]], "int64 (in module arkouda.dtypes)": [[9, "arkouda.dtypes.int64"]], "inttypes (in module arkouda.dtypes)": [[9, "arkouda.dtypes.intTypes"]], "int_scalars (in module arkouda.dtypes)": [[9, "arkouda.dtypes.int_scalars"]], "numeric_scalars (in module arkouda.dtypes)": [[9, "arkouda.dtypes.numeric_scalars"]], "numpy_scalars (in module arkouda.dtypes)": [[9, "arkouda.dtypes.numpy_scalars"]], "resolve_scalar_dtype() (in module arkouda.dtypes)": [[9, "arkouda.dtypes.resolve_scalar_dtype"]], "str_ (in module arkouda.dtypes)": [[9, "arkouda.dtypes.str_"]], "str_scalars (in module arkouda.dtypes)": [[9, "arkouda.dtypes.str_scalars"]], "translate_np_dtype() (in module arkouda.dtypes)": [[9, "arkouda.dtypes.translate_np_dtype"]], "uint64 (in module arkouda.dtypes)": [[9, "arkouda.dtypes.uint64"]], "uint8 (in module arkouda.dtypes)": [[9, "arkouda.dtypes.uint8"]], "and() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.AND"]], "groupby_reduction_types (in module arkouda.groupbyclass)": [[10, "arkouda.groupbyclass.GROUPBY_REDUCTION_TYPES"]], "groupby (class in arkouda.groupbyclass)": [[10, "arkouda.groupbyclass.GroupBy"]], "or() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.OR"]], "reductions (arkouda.groupbyclass.groupby attribute)": [[10, "arkouda.groupbyclass.GroupBy.Reductions"]], "xor() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.XOR"]], "_get_groupby_required_pieces() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy._get_groupby_required_pieces"]], "_nested_grouping_helper() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy._nested_grouping_helper"]], "aggregate() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.aggregate"]], "all() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.all"]], "any() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.any"]], "argmax() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.argmax"]], "argmin() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.argmin"]], "arkouda.groupbyclass": [[10, "module-arkouda.groupbyclass"]], "attach() (arkouda.groupbyclass.groupby static method)": [[10, "arkouda.groupbyclass.GroupBy.attach"]], "broadcast() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.broadcast"]], "broadcast() (in module arkouda.groupbyclass)": [[10, "arkouda.groupbyclass.broadcast"]], "build_from_components() (arkouda.groupbyclass.groupby static method)": [[10, "arkouda.groupbyclass.GroupBy.build_from_components"]], "count() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.count"]], "first() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.first"]], "is_registered() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.is_registered"]], "logger (arkouda.groupbyclass.groupby attribute)": [[10, "arkouda.groupbyclass.GroupBy.logger"]], "max() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.max"]], "mean() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.mean"]], "median() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.median"]], "min() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.min"]], "mode() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.mode"]], "most_common() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.most_common"]], "ngroups (arkouda.groupbyclass.groupby attribute)": [[10, "arkouda.groupbyclass.GroupBy.ngroups"]], "nkeys (arkouda.groupbyclass.groupby attribute)": [[10, "arkouda.groupbyclass.GroupBy.nkeys"]], "nunique() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.nunique"]], "permutation (arkouda.groupbyclass.groupby attribute)": [[10, "arkouda.groupbyclass.GroupBy.permutation"]], "prod() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.prod"]], "register() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.register"]], "segments (arkouda.groupbyclass.groupby attribute)": [[10, "arkouda.groupbyclass.GroupBy.segments"]], "size (arkouda.groupbyclass.groupby attribute)": [[10, "arkouda.groupbyclass.GroupBy.size"]], "size() (arkouda.groupbyclass.groupby method)": [[10, "id0"]], "std() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.std"]], "sum() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.sum"]], "unique() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.unique"]], "unique() (in module arkouda.groupbyclass)": [[10, "arkouda.groupbyclass.unique"]], "unique_keys (arkouda.groupbyclass.groupby attribute)": [[10, "arkouda.groupbyclass.GroupBy.unique_keys"]], "unregister() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.unregister"]], "unregister_groupby_by_name() (arkouda.groupbyclass.groupby static method)": [[10, "arkouda.groupbyclass.GroupBy.unregister_groupby_by_name"]], "var() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.var"]], "and() (arkouda.segarray method)": [[11, "arkouda.SegArray.AND"]], "arkouda_supported_dtypes (in module arkouda)": [[11, "arkouda.ARKOUDA_SUPPORTED_DTYPES"]], "allsymbols (in module arkouda)": [[11, "arkouda.AllSymbols"]], "arrayview (class in arkouda)": [[11, "arkouda.ArrayView"], [48, "arkouda.ArrayView"]], "binops (arkouda.strings attribute)": [[11, "arkouda.Strings.BinOps"], [11, "id240"], [11, "id662"]], "binops (arkouda.pdarray attribute)": [[11, "arkouda.pdarray.BinOps"], [11, "id123"], [11, "id317"], [11, "id432"], [11, "id548"], [11, "id9"]], "bitvector (class in arkouda)": [[11, "arkouda.BitVector"]], "bitvectorizer() (in module arkouda)": [[11, "arkouda.BitVectorizer"]], "column_classes (arkouda.dataframe attribute)": [[11, "arkouda.DataFrame.COLUMN_CLASSES"]], "cachedaccessor (class in arkouda)": [[11, "arkouda.CachedAccessor"]], "dtypeobjects (in module arkouda)": [[11, "arkouda.DTypeObjects"]], "dtypes (in module arkouda)": [[11, "arkouda.DTypes"]], "dataframe (class in arkouda)": [[11, "arkouda.DataFrame"], [51, "arkouda.DataFrame"]], "datetime (class in arkouda)": [[11, "arkouda.Datetime"], [11, "id726"]], "datetimeaccessor (class in arkouda)": [[11, "arkouda.DatetimeAccessor"]], "errormode (class in arkouda)": [[11, "arkouda.ErrorMode"]], "fields (class in arkouda)": [[11, "arkouda.Fields"]], "groupby() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.GroupBy"], [11, "arkouda.DataFrame.groupby"]], "ipv4 (class in arkouda)": [[11, "arkouda.IPv4"]], "index (class in arkouda)": [[11, "arkouda.Index"], [45, "arkouda.Index"]], "multiindex (class in arkouda)": [[11, "arkouda.MultiIndex"]], "or() (arkouda.segarray method)": [[11, "arkouda.SegArray.OR"]], "opeqops (arkouda.pdarray attribute)": [[11, "arkouda.pdarray.OpEqOps"], [11, "id10"], [11, "id124"], [11, "id318"], [11, "id433"], [11, "id549"]], "ordertype (in module arkouda)": [[11, "arkouda.OrderType"]], "properties (class in arkouda)": [[11, "arkouda.Properties"]], "registeredsymbols (in module arkouda)": [[11, "arkouda.RegisteredSymbols"]], "registrationerror": [[11, "arkouda.RegistrationError"], [22, "arkouda.pdarrayclass.RegistrationError"]], "row (class in arkouda)": [[11, "arkouda.Row"]], "segarray (class in arkouda)": [[11, "arkouda.SegArray"]], "series (class in arkouda)": [[11, "arkouda.Series"], [57, "arkouda.Series"]], "sortingalgorithm (in module arkouda)": [[11, "arkouda.SortingAlgorithm"]], "stringaccessor (class in arkouda)": [[11, "arkouda.StringAccessor"]], "strings (class in arkouda)": [[11, "arkouda.Strings"], [11, "id232"], [11, "id654"]], "timedelta (class in arkouda)": [[11, "arkouda.Timedelta"]], "xor() (arkouda.segarray method)": [[11, "arkouda.SegArray.XOR"]], "_abstractbasetime (class in arkouda)": [[11, "arkouda._AbstractBaseTime"]], "_base_unit (in module arkouda)": [[11, "arkouda._BASE_UNIT"]], "_timescalar (class in arkouda)": [[11, "arkouda._Timescalar"]], "__add__() (arkouda.strings method)": [[11, "arkouda.Strings.__add__"], [11, "id281"], [11, "id703"]], "__add__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__add__"], [11, "id135"], [11, "id21"], [11, "id329"], [11, "id444"], [11, "id560"]], "__and__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__and__"], [11, "id151"], [11, "id345"], [11, "id37"], [11, "id460"], [11, "id576"]], "__array_priority__ (arkouda.pdarray attribute)": [[11, "arkouda.pdarray.__array_priority__"], [11, "id12"], [11, "id126"], [11, "id320"], [11, "id435"], [11, "id551"]], "__bool__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__bool__"], [11, "id128"], [11, "id14"], [11, "id322"], [11, "id437"], [11, "id553"]], "__del__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__del__"], [11, "id127"], [11, "id13"], [11, "id321"], [11, "id436"], [11, "id552"]], "__delitem__() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.__delitem__"]], "__dir__() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.__dir__"]], "__eq__() (arkouda.index method)": [[11, "arkouda.Index.__eq__"]], "__eq__() (arkouda.multiindex method)": [[11, "arkouda.MultiIndex.__eq__"]], "__eq__() (arkouda.segarray method)": [[11, "arkouda.SegArray.__eq__"]], "__eq__() (arkouda.strings method)": [[11, "arkouda.Strings.__eq__"], [11, "id249"], [11, "id671"]], "__eq__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__eq__"], [11, "id163"], [11, "id357"], [11, "id472"], [11, "id49"], [11, "id588"]], "__floordiv__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__floordiv__"], [11, "id143"], [11, "id29"], [11, "id337"], [11, "id452"], [11, "id568"]], "__ge__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__ge__"], [11, "id162"], [11, "id356"], [11, "id471"], [11, "id48"], [11, "id587"]], "__get__() (arkouda.cachedaccessor method)": [[11, "arkouda.CachedAccessor.__get__"]], "__getattr__() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.__getattr__"]], "__getitem__() (arkouda.arrayview method)": [[11, "arkouda.ArrayView.__getitem__"]], "__getitem__() (arkouda.bitvector method)": [[11, "arkouda.BitVector.__getitem__"]], "__getitem__() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.__getitem__"]], "__getitem__() (arkouda.ipv4 method)": [[11, "arkouda.IPv4.__getitem__"]], "__getitem__() (arkouda.index method)": [[11, "arkouda.Index.__getitem__"]], "__getitem__() (arkouda.multiindex method)": [[11, "arkouda.MultiIndex.__getitem__"]], "__getitem__() (arkouda.segarray method)": [[11, "arkouda.SegArray.__getitem__"]], "__getitem__() (arkouda.series method)": [[11, "arkouda.Series.__getitem__"]], "__getitem__() (arkouda.strings method)": [[11, "arkouda.Strings.__getitem__"], [11, "id251"], [11, "id673"]], "__getitem__() (arkouda._abstractbasetime method)": [[11, "arkouda._AbstractBaseTime.__getitem__"]], "__getitem__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__getitem__"], [11, "id180"], [11, "id374"], [11, "id489"], [11, "id605"], [11, "id66"]], "__gt__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__gt__"], [11, "id160"], [11, "id354"], [11, "id46"], [11, "id469"], [11, "id585"]], "__iadd__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__iadd__"], [11, "id168"], [11, "id362"], [11, "id477"], [11, "id54"], [11, "id593"]], "__iand__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__iand__"], [11, "id175"], [11, "id369"], [11, "id484"], [11, "id600"], [11, "id61"]], "__ifloordiv__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__ifloordiv__"], [11, "id172"], [11, "id366"], [11, "id481"], [11, "id58"], [11, "id597"]], "__ilshift__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__ilshift__"], [11, "id173"], [11, "id367"], [11, "id482"], [11, "id59"], [11, "id598"]], "__imul__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__imul__"], [11, "id170"], [11, "id364"], [11, "id479"], [11, "id56"], [11, "id595"]], "__invert__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__invert__"], [11, "id166"], [11, "id360"], [11, "id475"], [11, "id52"], [11, "id591"]], "__ior__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__ior__"], [11, "id176"], [11, "id370"], [11, "id485"], [11, "id601"], [11, "id62"]], "__ipow__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__ipow__"], [11, "id178"], [11, "id372"], [11, "id487"], [11, "id603"], [11, "id64"]], "__irshift__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__irshift__"], [11, "id174"], [11, "id368"], [11, "id483"], [11, "id599"], [11, "id60"]], "__isub__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__isub__"], [11, "id169"], [11, "id363"], [11, "id478"], [11, "id55"], [11, "id594"]], "__iter__() (arkouda.strings method)": [[11, "arkouda.Strings.__iter__"], [11, "id244"], [11, "id666"]], "__iter__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__iter__"], [11, "id179"], [11, "id373"], [11, "id488"], [11, "id604"], [11, "id65"]], "__itruediv__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__itruediv__"], [11, "id171"], [11, "id365"], [11, "id480"], [11, "id57"], [11, "id596"]], "__ixor__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__ixor__"], [11, "id177"], [11, "id371"], [11, "id486"], [11, "id602"], [11, "id63"]], "__le__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__le__"], [11, "id161"], [11, "id355"], [11, "id47"], [11, "id470"], [11, "id586"]], "__len__() (arkouda.arrayview method)": [[11, "arkouda.ArrayView.__len__"]], "__len__() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.__len__"]], "__len__() (arkouda.index method)": [[11, "arkouda.Index.__len__"]], "__len__() (arkouda.multiindex method)": [[11, "arkouda.MultiIndex.__len__"]], "__len__() (arkouda.series method)": [[11, "arkouda.Series.__len__"]], "__len__() (arkouda.strings method)": [[11, "arkouda.Strings.__len__"], [11, "id245"], [11, "id667"]], "__len__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__len__"], [11, "id129"], [11, "id15"], [11, "id323"], [11, "id438"], [11, "id554"]], "__lshift__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__lshift__"], [11, "id147"], [11, "id33"], [11, "id341"], [11, "id456"], [11, "id572"]], "__lt__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__lt__"], [11, "id159"], [11, "id353"], [11, "id45"], [11, "id468"], [11, "id584"]], "__mod__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__mod__"], [11, "id145"], [11, "id31"], [11, "id339"], [11, "id454"], [11, "id570"]], "__mul__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__mul__"], [11, "id139"], [11, "id25"], [11, "id333"], [11, "id448"], [11, "id564"]], "__ne__() (arkouda.strings method)": [[11, "arkouda.Strings.__ne__"], [11, "id250"], [11, "id672"]], "__ne__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__ne__"], [11, "id164"], [11, "id358"], [11, "id473"], [11, "id50"], [11, "id589"]], "__neg__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__neg__"], [11, "id165"], [11, "id359"], [11, "id474"], [11, "id51"], [11, "id590"]], "__or__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__or__"], [11, "id153"], [11, "id347"], [11, "id39"], [11, "id462"], [11, "id578"]], "__pow__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__pow__"], [11, "id157"], [11, "id351"], [11, "id43"], [11, "id466"], [11, "id582"]], "__radd__() (arkouda.strings method)": [[11, "arkouda.Strings.__radd__"], [11, "id283"], [11, "id705"]], "__radd__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__radd__"], [11, "id136"], [11, "id22"], [11, "id330"], [11, "id445"], [11, "id561"]], "__rand__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__rand__"], [11, "id152"], [11, "id346"], [11, "id38"], [11, "id461"], [11, "id577"]], "__repr__() (arkouda.arrayview method)": [[11, "arkouda.ArrayView.__repr__"]], "__repr__() (arkouda.bitvector method)": [[11, "arkouda.BitVector.__repr__"]], "__repr__() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.__repr__"]], "__repr__() (arkouda.ipv4 method)": [[11, "arkouda.IPv4.__repr__"]], "__repr__() (arkouda.index method)": [[11, "arkouda.Index.__repr__"]], "__repr__() (arkouda.multiindex method)": [[11, "arkouda.MultiIndex.__repr__"]], "__repr__() (arkouda.row method)": [[11, "arkouda.Row.__repr__"]], "__repr__() (arkouda.segarray method)": [[11, "arkouda.SegArray.__repr__"]], "__repr__() (arkouda.series method)": [[11, "arkouda.Series.__repr__"]], "__repr__() (arkouda.strings method)": [[11, "arkouda.Strings.__repr__"], [11, "id247"], [11, "id669"]], "__repr__() (arkouda._abstractbasetime method)": [[11, "arkouda._AbstractBaseTime.__repr__"]], "__repr__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__repr__"], [11, "id131"], [11, "id17"], [11, "id325"], [11, "id440"], [11, "id556"]], "__rfloordiv__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__rfloordiv__"], [11, "id144"], [11, "id30"], [11, "id338"], [11, "id453"], [11, "id569"]], "__rlshift__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__rlshift__"], [11, "id148"], [11, "id34"], [11, "id342"], [11, "id457"], [11, "id573"]], "__rmod__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__rmod__"], [11, "id146"], [11, "id32"], [11, "id340"], [11, "id455"], [11, "id571"]], "__rmul__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__rmul__"], [11, "id140"], [11, "id26"], [11, "id334"], [11, "id449"], [11, "id565"]], "__ror__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__ror__"], [11, "id154"], [11, "id348"], [11, "id40"], [11, "id463"], [11, "id579"]], "__rpow__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__rpow__"], [11, "id158"], [11, "id352"], [11, "id44"], [11, "id467"], [11, "id583"]], "__rrshift__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__rrshift__"], [11, "id150"], [11, "id344"], [11, "id36"], [11, "id459"], [11, "id575"]], "__rshift__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__rshift__"], [11, "id149"], [11, "id343"], [11, "id35"], [11, "id458"], [11, "id574"]], "__rsub__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__rsub__"], [11, "id138"], [11, "id24"], [11, "id332"], [11, "id447"], [11, "id563"]], "__rtruediv__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__rtruediv__"], [11, "id142"], [11, "id28"], [11, "id336"], [11, "id451"], [11, "id567"]], "__rxor__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__rxor__"], [11, "id156"], [11, "id350"], [11, "id42"], [11, "id465"], [11, "id581"]], "__setitem__() (arkouda.arrayview method)": [[11, "arkouda.ArrayView.__setitem__"]], "__setitem__() (arkouda.bitvector method)": [[11, "arkouda.BitVector.__setitem__"]], "__setitem__() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.__setitem__"]], "__setitem__() (arkouda.fields method)": [[11, "arkouda.Fields.__setitem__"]], "__setitem__() (arkouda.ipv4 method)": [[11, "arkouda.IPv4.__setitem__"]], "__setitem__() (arkouda._abstractbasetime method)": [[11, "arkouda._AbstractBaseTime.__setitem__"]], "__setitem__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__setitem__"], [11, "id181"], [11, "id375"], [11, "id490"], [11, "id606"], [11, "id67"]], "__str__() (arkouda.arrayview method)": [[11, "arkouda.ArrayView.__str__"]], "__str__() (arkouda.bitvector method)": [[11, "arkouda.BitVector.__str__"]], "__str__() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.__str__"]], "__str__() (arkouda.ipv4 method)": [[11, "arkouda.IPv4.__str__"]], "__str__() (arkouda.row method)": [[11, "arkouda.Row.__str__"]], "__str__() (arkouda.segarray method)": [[11, "arkouda.SegArray.__str__"]], "__str__() (arkouda.strings method)": [[11, "arkouda.Strings.__str__"], [11, "id246"], [11, "id668"]], "__str__() (arkouda._abstractbasetime method)": [[11, "arkouda._AbstractBaseTime.__str__"]], "__str__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__str__"], [11, "id130"], [11, "id16"], [11, "id324"], [11, "id439"], [11, "id555"]], "__sub__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__sub__"], [11, "id137"], [11, "id23"], [11, "id331"], [11, "id446"], [11, "id562"]], "__truediv__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__truediv__"], [11, "id141"], [11, "id27"], [11, "id335"], [11, "id450"], [11, "id566"]], "__version__ (in module arkouda)": [[11, "arkouda.__version__"]], "__xor__() (arkouda.pdarray method)": [[11, "arkouda.pdarray.__xor__"], [11, "id155"], [11, "id349"], [11, "id41"], [11, "id464"], [11, "id580"]], "_aggregator() (in module arkouda)": [[11, "arkouda._aggregator"]], "_all_aligned() (arkouda.series static method)": [[11, "arkouda.Series._all_aligned"]], "_binop() (arkouda.bitvector method)": [[11, "arkouda.BitVector._binop"]], "_binop() (arkouda.fields method)": [[11, "arkouda.Fields._binop"]], "_binop() (arkouda.ipv4 method)": [[11, "arkouda.IPv4._binop"]], "_binop() (arkouda.strings method)": [[11, "arkouda.Strings._binop"], [11, "id248"], [11, "id670"]], "_binop() (arkouda._abstractbasetime method)": [[11, "arkouda._AbstractBaseTime._binop"]], "_binop() (arkouda.pdarray method)": [[11, "arkouda.pdarray._binop"], [11, "id133"], [11, "id19"], [11, "id327"], [11, "id442"], [11, "id558"]], "_cast() (arkouda.bitvector method)": [[11, "arkouda.BitVector._cast"]], "_cast() (arkouda.fields method)": [[11, "arkouda.Fields._cast"]], "_check_aligned() (arkouda.index method)": [[11, "arkouda.Index._check_aligned"]], "_check_types() (arkouda.index method)": [[11, "arkouda.Index._check_types"]], "_comp_to_ndarray() (arkouda.strings method)": [[11, "arkouda.Strings._comp_to_ndarray"], [11, "id291"], [11, "id713"]], "_compute_non_empty() (arkouda.segarray method)": [[11, "arkouda.SegArray._compute_non_empty"]], "_convert_strings() (arkouda.fields method)": [[11, "arkouda.Fields._convert_strings"]], "_drop_column() (arkouda.dataframe method)": [[11, "arkouda.DataFrame._drop_column"]], "_drop_row() (arkouda.dataframe method)": [[11, "arkouda.DataFrame._drop_row"]], "_empty_pattern_verification() (arkouda.strings method)": [[11, "arkouda.Strings._empty_pattern_verification"], [11, "id264"], [11, "id686"]], "_ensure_components() (arkouda.datetime method)": [[11, "arkouda.Datetime._ensure_components"], [11, "id752"]], "_ensure_components() (arkouda.timedelta method)": [[11, "arkouda.Timedelta._ensure_components"]], "_from_attach_return_msg() (arkouda.segarray class method)": [[11, "arkouda.SegArray._from_attach_return_msg"]], "_get_callback() (arkouda.datetime class method)": [[11, "arkouda.Datetime._get_callback"], [11, "id754"]], "_get_callback() (arkouda.timedelta class method)": [[11, "arkouda.Timedelta._get_callback"]], "_get_callback() (arkouda._abstractbasetime class method)": [[11, "arkouda._AbstractBaseTime._get_callback"]], "_get_factor() (in module arkouda)": [[11, "arkouda._get_factor"]], "_get_grouping_keys() (arkouda.strings method)": [[11, "arkouda.Strings._get_grouping_keys"], [11, "id288"], [11, "id710"]], "_get_grouping_keys() (arkouda.pdarray method)": [[11, "arkouda.pdarray._get_grouping_keys"], [11, "id108"], [11, "id222"], [11, "id416"], [11, "id531"], [11, "id647"]], "_get_head_tail() (arkouda.dataframe method)": [[11, "arkouda.DataFrame._get_head_tail"]], "_get_head_tail_server() (arkouda.dataframe method)": [[11, "arkouda.DataFrame._get_head_tail_server"]], "_get_matcher() (arkouda.strings method)": [[11, "arkouda.Strings._get_matcher"], [11, "id265"], [11, "id687"]], "_identity() (in module arkouda)": [[11, "arkouda._identity"]], "_ipython_key_completions_() (arkouda.dataframe method)": [[11, "arkouda.DataFrame._ipython_key_completions_"]], "_is_datetime_scalar() (arkouda._abstractbasetime static method)": [[11, "arkouda._AbstractBaseTime._is_datetime_scalar"]], "_is_supported_scalar() (arkouda.datetime static method)": [[11, "arkouda.Datetime._is_supported_scalar"], [11, "id756"]], "_is_supported_scalar() (arkouda.ipv4 method)": [[11, "arkouda.IPv4._is_supported_scalar"]], "_is_supported_scalar() (arkouda.timedelta static method)": [[11, "arkouda.Timedelta._is_supported_scalar"]], "_is_timedelta_scalar() (arkouda._abstractbasetime static method)": [[11, "arkouda._AbstractBaseTime._is_timedelta_scalar"]], "_list_component_names() (arkouda.strings method)": [[11, "arkouda.Strings._list_component_names"], [11, "id297"], [11, "id719"]], "_list_component_names() (arkouda.pdarray method)": [[11, "arkouda.pdarray._list_component_names"], [11, "id186"], [11, "id380"], [11, "id495"], [11, "id611"], [11, "id72"]], "_make_aggop() (arkouda.series class method)": [[11, "arkouda.Series._make_aggop"]], "_make_binop() (arkouda.series class method)": [[11, "arkouda.Series._make_binop"]], "_make_op() (arkouda.properties class method)": [[11, "arkouda.Properties._make_op"]], "_make_unaryop() (arkouda.series class method)": [[11, "arkouda.Series._make_unaryop"]], "_merge() (arkouda.index method)": [[11, "arkouda.Index._merge"]], "_merge() (arkouda.multiindex method)": [[11, "arkouda.MultiIndex._merge"]], "_merge_all() (arkouda.index method)": [[11, "arkouda.Index._merge_all"]], "_merge_all() (arkouda.multiindex method)": [[11, "arkouda.MultiIndex._merge_all"]], "_ncols() (arkouda.dataframe method)": [[11, "arkouda.DataFrame._ncols"]], "_normalize_index() (arkouda.segarray method)": [[11, "arkouda.SegArray._normalize_index"]], "_parse_col_name() (arkouda.dataframe static method)": [[11, "arkouda.DataFrame._parse_col_name"]], "_parse_scalar() (arkouda.fields method)": [[11, "arkouda.Fields._parse_scalar"]], "_r_binop() (arkouda.bitvector method)": [[11, "arkouda.BitVector._r_binop"]], "_r_binop() (arkouda.fields method)": [[11, "arkouda.Fields._r_binop"]], "_r_binop() (arkouda.ipv4 method)": [[11, "arkouda.IPv4._r_binop"]], "_r_binop() (arkouda._abstractbasetime method)": [[11, "arkouda._AbstractBaseTime._r_binop"]], "_r_binop() (arkouda.pdarray method)": [[11, "arkouda.pdarray._r_binop"], [11, "id134"], [11, "id20"], [11, "id328"], [11, "id443"], [11, "id559"]], "_rename_column() (arkouda.dataframe method)": [[11, "arkouda.DataFrame._rename_column"]], "_rename_index() (arkouda.dataframe method)": [[11, "arkouda.DataFrame._rename_index"]], "_repr_html_() (arkouda.dataframe method)": [[11, "arkouda.DataFrame._repr_html_"]], "_repr_html_() (arkouda.row method)": [[11, "arkouda.Row._repr_html_"]], "_scalar_callback() (arkouda.datetime method)": [[11, "arkouda.Datetime._scalar_callback"], [11, "id755"]], "_scalar_callback() (arkouda.timedelta method)": [[11, "arkouda.Timedelta._scalar_callback"]], "_scalar_callback() (arkouda._abstractbasetime method)": [[11, "arkouda._AbstractBaseTime._scalar_callback"]], "_set_index() (arkouda.dataframe method)": [[11, "arkouda.DataFrame._set_index"]], "_shape_str() (arkouda.dataframe method)": [[11, "arkouda.DataFrame._shape_str"]], "_unit2factor (in module arkouda)": [[11, "arkouda._unit2factor"]], "_unit2normunit (in module arkouda)": [[11, "arkouda._unit2normunit"]], "abs() (arkouda.timedelta method)": [[11, "arkouda.Timedelta.abs"]], "abs() (in module arkouda)": [[11, "arkouda.abs"], [47, "arkouda.abs"]], "add() (arkouda.series method)": [[11, "arkouda.Series.add"]], "aggregate() (arkouda.segarray method)": [[11, "arkouda.SegArray.aggregate"]], "akabs() (in module arkouda)": [[11, "arkouda.akabs"]], "akbool (in module arkouda)": [[11, "arkouda.akbool"], [11, "id538"]], "akcast() (in module arkouda)": [[11, "arkouda.akcast"], [11, "id0"]], "akfloat64 (in module arkouda)": [[11, "arkouda.akfloat64"]], "akint64 (in module arkouda)": [[11, "arkouda.akint64"], [11, "id539"]], "all() (arkouda.segarray method)": [[11, "arkouda.SegArray.all"]], "all() (arkouda.pdarray method)": [[11, "arkouda.pdarray.all"], [11, "id184"], [11, "id378"], [11, "id493"], [11, "id609"], [11, "id70"], [53, "arkouda.pdarray.all"]], "all() (in module arkouda)": [[11, "arkouda.all"], [47, "arkouda.all"]], "all_scalars (in module arkouda)": [[11, "arkouda.all_scalars"]], "any() (arkouda.segarray method)": [[11, "arkouda.SegArray.any"]], "any() (arkouda.pdarray method)": [[11, "arkouda.pdarray.any"], [11, "id183"], [11, "id377"], [11, "id492"], [11, "id608"], [11, "id69"], [53, "arkouda.pdarray.any"]], "any() (in module arkouda)": [[11, "arkouda.any"], [47, "arkouda.any"]], "append() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.append"]], "append() (arkouda.segarray method)": [[11, "arkouda.SegArray.append"]], "append_single() (arkouda.segarray method)": [[11, "arkouda.SegArray.append_single"]], "apply_permutation() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.apply_permutation"]], "arange() (in module arkouda)": [[11, "arkouda.arange"], [11, "id109"], [11, "id227"], [11, "id532"], [11, "id648"], [50, "arkouda.arange"]], "argmax() (arkouda.segarray method)": [[11, "arkouda.SegArray.argmax"]], "argmax() (arkouda.pdarray method)": [[11, "arkouda.pdarray.argmax"], [11, "id195"], [11, "id389"], [11, "id504"], [11, "id620"], [11, "id81"], [53, "arkouda.pdarray.argmax"]], "argmax() (in module arkouda)": [[11, "arkouda.argmax"], [47, "arkouda.argmax"]], "argmaxk() (arkouda.pdarray method)": [[11, "arkouda.pdarray.argmaxk"], [11, "id204"], [11, "id398"], [11, "id513"], [11, "id629"], [11, "id90"], [53, "arkouda.pdarray.argmaxk"]], "argmaxk() (in module arkouda)": [[11, "arkouda.argmaxk"], [47, "arkouda.argmaxk"]], "argmin() (arkouda.segarray method)": [[11, "arkouda.SegArray.argmin"]], "argmin() (arkouda.pdarray method)": [[11, "arkouda.pdarray.argmin"], [11, "id194"], [11, "id388"], [11, "id503"], [11, "id619"], [11, "id80"], [53, "arkouda.pdarray.argmin"]], "argmin() (in module arkouda)": [[11, "arkouda.argmin"], [47, "arkouda.argmin"]], "argmink() (arkouda.pdarray method)": [[11, "arkouda.pdarray.argmink"], [11, "id203"], [11, "id397"], [11, "id512"], [11, "id628"], [11, "id89"], [53, "arkouda.pdarray.argmink"]], "argmink() (in module arkouda)": [[11, "arkouda.argmink"], [47, "arkouda.argmink"]], "argsort() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.argsort"]], "argsort() (arkouda.index method)": [[11, "arkouda.Index.argsort"]], "argsort() (arkouda.multiindex method)": [[11, "arkouda.MultiIndex.argsort"]], "argsort() (in module arkouda)": [[11, "arkouda.argsort"], [11, "id651"], [46, "arkouda.argsort"]], "arkouda": [[11, "module-arkouda"]], "array() (in module arkouda)": [[11, "arkouda.array"], [11, "id110"], [11, "id224"], [11, "id533"], [11, "id649"], [44, "arkouda.array"]], "astype() (arkouda.strings method)": [[11, "arkouda.Strings.astype"], [11, "id292"], [11, "id714"]], "astype() (arkouda.pdarray method)": [[11, "arkouda.pdarray.astype"], [11, "id211"], [11, "id405"], [11, "id520"], [11, "id636"], [11, "id97"]], "attach() (arkouda.dataframe static method)": [[11, "arkouda.DataFrame.attach"]], "attach() (arkouda.segarray class method)": [[11, "arkouda.SegArray.attach"]], "attach() (arkouda.series static method)": [[11, "arkouda.Series.attach"]], "attach() (arkouda.strings static method)": [[11, "arkouda.Strings.attach"], [11, "id302"], [11, "id724"]], "attach() (arkouda.pdarray static method)": [[11, "arkouda.pdarray.attach"], [11, "id107"], [11, "id221"], [11, "id415"], [11, "id530"], [11, "id646"]], "attach_pdarray() (in module arkouda)": [[11, "arkouda.attach_pdarray"], [11, "id422"]], "base (arkouda.arrayview attribute)": [[11, "arkouda.ArrayView.base"], [48, "arkouda.ArrayView.base"]], "bittype (in module arkouda)": [[11, "arkouda.bitType"], [11, "id113"]], "bool (in module arkouda)": [[11, "arkouda.bool"]], "bool_scalars (in module arkouda)": [[11, "arkouda.bool_scalars"]], "cached_regex_patterns() (arkouda.strings method)": [[11, "arkouda.Strings.cached_regex_patterns"], [11, "id262"], [11, "id684"]], "cast() (in module arkouda)": [[11, "arkouda.cast"], [11, "id308"], [55, "arkouda.cast"]], "ceil() (arkouda._abstractbasetime method)": [[11, "arkouda._AbstractBaseTime.ceil"]], "check_np_dtype() (in module arkouda)": [[11, "arkouda.check_np_dtype"]], "clear() (in module arkouda)": [[11, "arkouda.clear"]], "clz() (arkouda.pdarray method)": [[11, "arkouda.pdarray.clz"], [11, "id207"], [11, "id401"], [11, "id516"], [11, "id632"], [11, "id93"]], "clz() (in module arkouda)": [[11, "arkouda.clz"]], "coargsort() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.coargsort"]], "coargsort() (in module arkouda)": [[11, "arkouda.coargsort"], [11, "id653"], [46, "arkouda.coargsort"]], "columns (arkouda.dataframe property)": [[11, "arkouda.DataFrame.columns"]], "components (arkouda.timedelta property)": [[11, "arkouda.Timedelta.components"]], "concat() (arkouda.dataframe class method)": [[11, "arkouda.DataFrame.concat"]], "concat() (arkouda.index method)": [[11, "arkouda.Index.concat"]], "concat() (arkouda.multiindex method)": [[11, "arkouda.MultiIndex.concat"]], "concat() (arkouda.segarray class method)": [[11, "arkouda.SegArray.concat"]], "concat() (arkouda.series static method)": [[11, "arkouda.Series.concat"]], "concatenate() (in module arkouda)": [[11, "arkouda.concatenate"], [11, "id223"], [11, "id537"], [50, "arkouda.concatenate"]], "conserves (arkouda.bitvector attribute)": [[11, "arkouda.BitVector.conserves"]], "contains() (arkouda.strings method)": [[11, "arkouda.Strings.contains"], [11, "id274"], [11, "id696"], [60, "arkouda.Strings.contains"]], "convert_if_categorical() (in module arkouda)": [[11, "arkouda.convert_if_categorical"]], "copy() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.copy"]], "copy() (arkouda.segarray method)": [[11, "arkouda.SegArray.copy"]], "corr() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.corr"]], "corr() (arkouda.pdarray method)": [[11, "arkouda.pdarray.corr"], [11, "id200"], [11, "id394"], [11, "id509"], [11, "id625"], [11, "id86"]], "corr() (in module arkouda)": [[11, "arkouda.corr"]], "cos() (in module arkouda)": [[11, "arkouda.cos"], [47, "arkouda.cos"]], "cov() (arkouda.pdarray method)": [[11, "arkouda.pdarray.cov"], [11, "id199"], [11, "id393"], [11, "id508"], [11, "id624"], [11, "id85"]], "cov() (in module arkouda)": [[11, "arkouda.cov"]], "create_pdarray() (in module arkouda)": [[11, "arkouda.create_pdarray"], [11, "id309"], [11, "id423"]], "ctz() (arkouda.pdarray method)": [[11, "arkouda.pdarray.ctz"], [11, "id208"], [11, "id402"], [11, "id517"], [11, "id633"], [11, "id94"]], "ctz() (in module arkouda)": [[11, "arkouda.ctz"]], "cumprod() (in module arkouda)": [[11, "arkouda.cumprod"], [11, "id228"], [47, "arkouda.cumprod"]], "cumsum() (in module arkouda)": [[11, "arkouda.cumsum"], [11, "id421"], [47, "arkouda.cumsum"]], "date (arkouda.datetime property)": [[11, "arkouda.Datetime.date"], [11, "id743"]], "date_operators() (in module arkouda)": [[11, "arkouda.date_operators"]], "date_range() (in module arkouda)": [[11, "arkouda.date_range"]], "day (arkouda.datetime property)": [[11, "arkouda.Datetime.day"], [11, "id733"]], "day_of_week (arkouda.datetime property)": [[11, "arkouda.Datetime.day_of_week"], [11, "id738"]], "day_of_year (arkouda.datetime property)": [[11, "arkouda.Datetime.day_of_year"], [11, "id736"]], "dayofweek (arkouda.datetime property)": [[11, "arkouda.Datetime.dayofweek"], [11, "id739"]], "dayofyear (arkouda.datetime property)": [[11, "arkouda.Datetime.dayofyear"], [11, "id737"]], "days (arkouda.timedelta property)": [[11, "arkouda.Timedelta.days"]], "diff() (arkouda.series method)": [[11, "arkouda.Series.diff"]], "disableverbose() (in module arkouda)": [[11, "arkouda.disableVerbose"]], "drop() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.drop"]], "drop_duplicates() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.drop_duplicates"]], "dt (arkouda.series attribute)": [[11, "arkouda.Series.dt"]], "dtype (arkouda.arrayview attribute)": [[11, "arkouda.ArrayView.dtype"], [48, "arkouda.ArrayView.dtype"]], "dtype (arkouda.strings attribute)": [[11, "arkouda.Strings.dtype"], [11, "id238"], [11, "id660"]], "dtype (arkouda.pdarray attribute)": [[11, "arkouda.pdarray.dtype"], [11, "id118"], [11, "id312"], [11, "id4"], [11, "id427"], [11, "id543"], [55, "arkouda.pdarray.dtype"]], "dtype (in module arkouda)": [[11, "arkouda.dtype"]], "dtypes (arkouda.dataframe property)": [[11, "arkouda.DataFrame.dtypes"]], "empty (arkouda.dataframe property)": [[11, "arkouda.DataFrame.empty"]], "enableverbose() (in module arkouda)": [[11, "arkouda.enableVerbose"]], "endswith() (arkouda.strings method)": [[11, "arkouda.Strings.endswith"], [11, "id276"], [11, "id698"], [60, "arkouda.Strings.endswith"]], "entry (arkouda.strings attribute)": [[11, "arkouda.Strings.entry"], [11, "id233"], [11, "id655"]], "exp() (in module arkouda)": [[11, "arkouda.exp"], [47, "arkouda.exp"]], "export() (in module arkouda)": [[11, "arkouda.export"], [44, "arkouda.export"]], "factory() (arkouda.index static method)": [[11, "arkouda.Index.factory"]], "fill() (arkouda.pdarray method)": [[11, "arkouda.pdarray.fill"], [11, "id182"], [11, "id376"], [11, "id491"], [11, "id607"], [11, "id68"]], "filter_by_range() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.filter_by_range"]], "find_locations() (arkouda.strings method)": [[11, "arkouda.Strings.find_locations"], [11, "id266"], [11, "id688"], [60, "arkouda.Strings.find_locations"]], "findall() (arkouda.strings method)": [[11, "arkouda.Strings.findall"], [11, "id271"], [11, "id693"], [60, "arkouda.Strings.findall"]], "flatten() (arkouda.strings method)": [[11, "arkouda.Strings.flatten"], [11, "id277"], [11, "id699"], [60, "arkouda.Strings.flatten"]], "float64 (in module arkouda)": [[11, "arkouda.float64"]], "float_scalars (in module arkouda)": [[11, "arkouda.float_scalars"]], "floor() (arkouda._abstractbasetime method)": [[11, "arkouda._AbstractBaseTime.floor"]], "format() (arkouda.bitvector method)": [[11, "arkouda.BitVector.format"]], "format() (arkouda.fields method)": [[11, "arkouda.Fields.format"]], "format() (arkouda.ipv4 method)": [[11, "arkouda.IPv4.format"]], "format_other() (arkouda.pdarray method)": [[11, "arkouda.pdarray.format_other"], [11, "id132"], [11, "id18"], [11, "id326"], [11, "id441"], [11, "id557"]], "from_multi_array() (arkouda.segarray class method)": [[11, "arkouda.SegArray.from_multi_array"]], "from_pandas() (arkouda.dataframe class method)": [[11, "arkouda.DataFrame.from_pandas"]], "from_parts() (arkouda.segarray class method)": [[11, "arkouda.SegArray.from_parts"]], "from_parts() (arkouda.strings static method)": [[11, "arkouda.Strings.from_parts"], [11, "id243"], [11, "id665"]], "from_return_msg() (arkouda.dataframe static method)": [[11, "arkouda.DataFrame.from_return_msg"]], "from_return_msg() (arkouda.segarray class method)": [[11, "arkouda.SegArray.from_return_msg"]], "from_return_msg() (arkouda.series static method)": [[11, "arkouda.Series.from_return_msg"]], "from_return_msg() (arkouda.strings static method)": [[11, "arkouda.Strings.from_return_msg"], [11, "id242"], [11, "id664"]], "from_series() (in module arkouda)": [[11, "arkouda.from_series"], [11, "id417"]], "full() (in module arkouda)": [[11, "arkouda.full"]], "full_like() (in module arkouda)": [[11, "arkouda.full_like"]], "fullmatch() (arkouda.strings method)": [[11, "arkouda.Strings.fullmatch"], [11, "id269"], [11, "id691"], [60, "arkouda.Strings.fullmatch"]], "gen_ranges() (in module arkouda)": [[11, "arkouda.gen_ranges"]], "generic_concat() (in module arkouda)": [[11, "arkouda.generic_concat"]], "getarkoudalogger() (in module arkouda)": [[11, "arkouda.getArkoudaLogger"]], "get_byteorder() (in module arkouda)": [[11, "arkouda.get_byteorder"]], "get_callback() (in module arkouda)": [[11, "arkouda.get_callback"]], "get_datasets() (in module arkouda)": [[11, "arkouda.get_datasets"], [44, "arkouda.get_datasets"]], "get_filetype() (in module arkouda)": [[11, "arkouda.get_filetype"]], "get_jth() (arkouda.segarray method)": [[11, "arkouda.SegArray.get_jth"]], "get_length_n() (arkouda.segarray method)": [[11, "arkouda.SegArray.get_length_n"]], "get_lengths() (arkouda.strings method)": [[11, "arkouda.Strings.get_lengths"], [11, "id252"], [11, "id674"]], "get_ngrams() (arkouda.segarray method)": [[11, "arkouda.SegArray.get_ngrams"]], "get_null_indices() (in module arkouda)": [[11, "arkouda.get_null_indices"]], "get_prefixes() (arkouda.segarray method)": [[11, "arkouda.SegArray.get_prefixes"]], "get_prefixes() (arkouda.strings method)": [[11, "arkouda.Strings.get_prefixes"], [11, "id284"], [11, "id706"]], "get_server_byteorder() (in module arkouda)": [[11, "arkouda.get_server_byteorder"]], "get_suffixes() (arkouda.segarray method)": [[11, "arkouda.SegArray.get_suffixes"]], "get_suffixes() (arkouda.strings method)": [[11, "arkouda.Strings.get_suffixes"], [11, "id285"], [11, "id707"]], "get_versions() (in module arkouda)": [[11, "arkouda.get_versions"]], "group() (arkouda.strings method)": [[11, "arkouda.Strings.group"], [11, "id287"], [11, "id709"]], "hash() (arkouda.strings method)": [[11, "arkouda.Strings.hash"], [11, "id286"], [11, "id708"]], "hash() (in module arkouda)": [[11, "arkouda.hash"]], "head() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.head"]], "head() (arkouda.series method)": [[11, "arkouda.Series.head"]], "histogram() (in module arkouda)": [[11, "arkouda.histogram"], [53, "arkouda.histogram"]], "hour (arkouda.datetime property)": [[11, "arkouda.Datetime.hour"], [11, "id732"]], "idna_decode() (arkouda.strings method)": [[11, "arkouda.Strings.idna_decode"], [11, "id254"], [11, "id676"]], "idna_encode() (arkouda.strings method)": [[11, "arkouda.Strings.idna_encode"], [11, "id253"], [11, "id675"]], "ignore (arkouda.errormode attribute)": [[11, "arkouda.ErrorMode.ignore"]], "import_data() (in module arkouda)": [[11, "arkouda.import_data"], [44, "arkouda.import_data"]], "in1d() (in module arkouda)": [[11, "arkouda.in1d"], [11, "id652"], [58, "arkouda.in1d"]], "index (arkouda.dataframe property)": [[11, "arkouda.DataFrame.index"]], "index (arkouda.index property)": [[11, "arkouda.Index.index"]], "index (arkouda.multiindex property)": [[11, "arkouda.MultiIndex.index"]], "info (arkouda.dataframe property)": [[11, "arkouda.DataFrame.info"]], "info() (arkouda.strings method)": [[11, "arkouda.Strings.info"], [11, "id298"], [11, "id720"]], "info() (arkouda.pdarray method)": [[11, "arkouda.pdarray.info"], [11, "id187"], [11, "id381"], [11, "id496"], [11, "id612"], [11, "id73"]], "information() (in module arkouda)": [[11, "arkouda.information"]], "int64 (in module arkouda)": [[11, "arkouda.int64"], [11, "id304"]], "inttypes (in module arkouda)": [[11, "arkouda.intTypes"], [11, "id112"], [11, "id306"]], "int_scalars (in module arkouda)": [[11, "arkouda.int_scalars"], [11, "id305"]], "intersect() (arkouda.segarray method)": [[11, "arkouda.SegArray.intersect"]], "intersect() (in module arkouda)": [[11, "arkouda.intersect"]], "intersect1d() (in module arkouda)": [[11, "arkouda.intersect1d"], [58, "arkouda.intersect1d"]], "intx() (in module arkouda)": [[11, "arkouda.intx"]], "invert_permutation() (in module arkouda)": [[11, "arkouda.invert_permutation"]], "ip_address() (in module arkouda)": [[11, "arkouda.ip_address"]], "issupportedint() (in module arkouda)": [[11, "arkouda.isSupportedInt"], [11, "id307"], [11, "id418"]], "is_ipv4() (in module arkouda)": [[11, "arkouda.is_ipv4"]], "is_ipv6() (in module arkouda)": [[11, "arkouda.is_ipv6"]], "is_leap_year (arkouda.datetime property)": [[11, "arkouda.Datetime.is_leap_year"], [11, "id744"]], "is_lower() (arkouda.strings method)": [[11, "arkouda.Strings.is_lower"], [11, "id258"], [11, "id680"]], "is_registered() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.is_registered"]], "is_registered() (arkouda.index method)": [[11, "arkouda.Index.is_registered"]], "is_registered() (arkouda.segarray method)": [[11, "arkouda.SegArray.is_registered"]], "is_registered() (arkouda.series method)": [[11, "arkouda.Series.is_registered"]], "is_registered() (arkouda.strings method)": [[11, "arkouda.Strings.is_registered"], [11, "id296"], [11, "id718"]], "is_registered() (arkouda.pdarray method)": [[11, "arkouda.pdarray.is_registered"], [11, "id185"], [11, "id379"], [11, "id494"], [11, "id610"], [11, "id71"]], "is_sorted() (arkouda.pdarray method)": [[11, "arkouda.pdarray.is_sorted"], [11, "id189"], [11, "id383"], [11, "id498"], [11, "id614"], [11, "id75"], [53, "arkouda.pdarray.is_sorted"]], "is_sorted() (in module arkouda)": [[11, "arkouda.is_sorted"], [11, "id424"], [47, "arkouda.is_sorted"]], "is_title() (arkouda.strings method)": [[11, "arkouda.Strings.is_title"], [11, "id260"], [11, "id682"]], "is_unique (arkouda.index property)": [[11, "arkouda.Index.is_unique"]], "is_upper() (arkouda.strings method)": [[11, "arkouda.Strings.is_upper"], [11, "id259"], [11, "id681"]], "isin() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.isin"]], "isin() (arkouda.series method)": [[11, "arkouda.Series.isin"]], "isnan() (in module arkouda)": [[11, "arkouda.isnan"]], "isocalendar() (arkouda.datetime method)": [[11, "arkouda.Datetime.isocalendar"], [11, "id753"]], "itemsize (arkouda.arrayview attribute)": [[11, "arkouda.ArrayView.itemsize"], [48, "arkouda.ArrayView.itemsize"]], "itemsize (arkouda.pdarray attribute)": [[11, "arkouda.pdarray.itemsize"], [11, "id122"], [11, "id316"], [11, "id431"], [11, "id547"], [11, "id8"], [55, "arkouda.pdarray.itemsize"]], "lengths (arkouda.segarray property)": [[11, "arkouda.SegArray.lengths"]], "linspace() (in module arkouda)": [[11, "arkouda.linspace"], [50, "arkouda.linspace"]], "list_registry() (in module arkouda)": [[11, "arkouda.list_registry"], [11, "id540"]], "list_symbol_table() (in module arkouda)": [[11, "arkouda.list_symbol_table"]], "load() (arkouda.arrayview static method)": [[11, "arkouda.ArrayView.load"]], "load() (arkouda.dataframe class method)": [[11, "arkouda.DataFrame.load"]], "load() (arkouda.segarray class method)": [[11, "arkouda.SegArray.load"]], "load() (in module arkouda)": [[11, "arkouda.load"], [11, "id536"], [44, "arkouda.load"]], "load_all() (in module arkouda)": [[11, "arkouda.load_all"], [44, "arkouda.load_all"]], "locate() (arkouda.series method)": [[11, "arkouda.Series.locate"]], "log() (in module arkouda)": [[11, "arkouda.log"], [47, "arkouda.log"]], "logger (arkouda.strings attribute)": [[11, "arkouda.Strings.logger"], [11, "id239"], [11, "id661"]], "lookup() (arkouda.index method)": [[11, "arkouda.Index.lookup"]], "lookup() (arkouda.multiindex method)": [[11, "arkouda.MultiIndex.lookup"]], "ls() (in module arkouda)": [[11, "arkouda.ls"]], "lstick() (arkouda.strings method)": [[11, "arkouda.Strings.lstick"], [11, "id282"], [11, "id704"], [60, "arkouda.Strings.lstick"]], "match() (arkouda.strings method)": [[11, "arkouda.Strings.match"], [11, "id268"], [11, "id690"], [60, "arkouda.Strings.match"]], "max() (arkouda.segarray method)": [[11, "arkouda.SegArray.max"]], "max() (arkouda._abstractbasetime method)": [[11, "arkouda._AbstractBaseTime.max"]], "max() (arkouda.pdarray method)": [[11, "arkouda.pdarray.max"], [11, "id193"], [11, "id387"], [11, "id502"], [11, "id618"], [11, "id79"], [53, "arkouda.pdarray.max"]], "max() (in module arkouda)": [[11, "arkouda.max"], [47, "arkouda.max"]], "maxk() (arkouda._abstractbasetime method)": [[11, "arkouda._AbstractBaseTime.maxk"]], "maxk() (arkouda.pdarray method)": [[11, "arkouda.pdarray.maxk"], [11, "id202"], [11, "id396"], [11, "id511"], [11, "id627"], [11, "id88"], [53, "arkouda.pdarray.maxk"]], "maxk() (in module arkouda)": [[11, "arkouda.maxk"], [47, "arkouda.maxk"]], "mean() (arkouda.segarray method)": [[11, "arkouda.SegArray.mean"]], "mean() (arkouda.pdarray method)": [[11, "arkouda.pdarray.mean"], [11, "id196"], [11, "id390"], [11, "id505"], [11, "id621"], [11, "id82"], [53, "arkouda.pdarray.mean"]], "mean() (in module arkouda)": [[11, "arkouda.mean"], [47, "arkouda.mean"]], "memory_usage() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.memory_usage"]], "microsecond (arkouda.datetime property)": [[11, "arkouda.Datetime.microsecond"], [11, "id728"]], "microseconds (arkouda.timedelta property)": [[11, "arkouda.Timedelta.microseconds"]], "millisecond (arkouda.datetime property)": [[11, "arkouda.Datetime.millisecond"], [11, "id729"]], "min() (arkouda.segarray method)": [[11, "arkouda.SegArray.min"]], "min() (arkouda._abstractbasetime method)": [[11, "arkouda._AbstractBaseTime.min"]], "min() (arkouda.pdarray method)": [[11, "arkouda.pdarray.min"], [11, "id192"], [11, "id386"], [11, "id501"], [11, "id617"], [11, "id78"], [53, "arkouda.pdarray.min"]], "min() (in module arkouda)": [[11, "arkouda.min"], [47, "arkouda.min"]], "mink() (arkouda._abstractbasetime method)": [[11, "arkouda._AbstractBaseTime.mink"]], "mink() (arkouda.pdarray method)": [[11, "arkouda.pdarray.mink"], [11, "id201"], [11, "id395"], [11, "id510"], [11, "id626"], [11, "id87"], [53, "arkouda.pdarray.mink"]], "mink() (in module arkouda)": [[11, "arkouda.mink"], [47, "arkouda.mink"]], "minute (arkouda.datetime property)": [[11, "arkouda.Datetime.minute"], [11, "id731"]], "month (arkouda.datetime property)": [[11, "arkouda.Datetime.month"], [11, "id734"]], "name (arkouda.pdarray attribute)": [[11, "arkouda.pdarray.name"], [11, "id117"], [11, "id3"], [11, "id311"], [11, "id426"], [11, "id542"], [55, "arkouda.pdarray.name"]], "nanosecond (arkouda.datetime property)": [[11, "arkouda.Datetime.nanosecond"], [11, "id727"]], "nanoseconds (arkouda.timedelta property)": [[11, "arkouda.Timedelta.nanoseconds"]], "nbytes (arkouda.strings attribute)": [[11, "arkouda.Strings.nbytes"], [11, "id235"], [11, "id657"]], "ndim (arkouda.arrayview attribute)": [[11, "arkouda.ArrayView.ndim"], [48, "arkouda.ArrayView.ndim"]], "ndim (arkouda.strings attribute)": [[11, "arkouda.Strings.ndim"], [11, "id236"], [11, "id658"]], "ndim (arkouda.pdarray attribute)": [[11, "arkouda.pdarray.ndim"], [11, "id120"], [11, "id314"], [11, "id429"], [11, "id545"], [11, "id6"], [55, "arkouda.pdarray.ndim"]], "non_empty (arkouda.segarray property)": [[11, "arkouda.SegArray.non_empty"]], "non_empty_count (arkouda.segarray property)": [[11, "arkouda.SegArray.non_empty_count"]], "normalize() (arkouda.ipv4 method)": [[11, "arkouda.IPv4.normalize"]], "numeric_scalars (in module arkouda)": [[11, "arkouda.numeric_scalars"]], "numpy_scalars (in module arkouda)": [[11, "arkouda.numpy_scalars"]], "nunique() (arkouda.segarray method)": [[11, "arkouda.SegArray.nunique"]], "objtype (arkouda.segarray property)": [[11, "arkouda.SegArray.objtype"]], "objtype (arkouda.strings attribute)": [[11, "arkouda.Strings.objtype"], [11, "id241"], [11, "id663"]], "objtype (arkouda.pdarray attribute)": [[11, "arkouda.pdarray.objtype"], [11, "id11"], [11, "id125"], [11, "id319"], [11, "id434"], [11, "id550"]], "objtypedec() (in module arkouda)": [[11, "arkouda.objtypedec"]], "ones() (in module arkouda)": [[11, "arkouda.ones"], [11, "id226"], [11, "id534"], [11, "id650"], [50, "arkouda.ones"]], "ones_like() (in module arkouda)": [[11, "arkouda.ones_like"], [50, "arkouda.ones_like"]], "opeq() (arkouda.bitvector method)": [[11, "arkouda.BitVector.opeq"]], "opeq() (arkouda.fields method)": [[11, "arkouda.Fields.opeq"]], "opeq() (arkouda.ipv4 method)": [[11, "arkouda.IPv4.opeq"]], "opeq() (arkouda._abstractbasetime method)": [[11, "arkouda._AbstractBaseTime.opeq"]], "opeq() (arkouda.pdarray method)": [[11, "arkouda.pdarray.opeq"], [11, "id167"], [11, "id361"], [11, "id476"], [11, "id53"], [11, "id592"]], "order (arkouda.arrayview attribute)": [[11, "arkouda.ArrayView.order"], [48, "arkouda.ArrayView.order"]], "parity() (arkouda.pdarray method)": [[11, "arkouda.pdarray.parity"], [11, "id206"], [11, "id400"], [11, "id515"], [11, "id631"], [11, "id92"]], "parity() (in module arkouda)": [[11, "arkouda.parity"]], "parse_single_value() (in module arkouda)": [[11, "arkouda.parse_single_value"]], "pdarray (class in arkouda)": [[11, "arkouda.pdarray"], [11, "id116"], [11, "id2"], [11, "id310"], [11, "id425"], [11, "id541"], [55, "arkouda.pdarray"]], "pdconcat() (arkouda.series static method)": [[11, "arkouda.Series.pdconcat"]], "peel() (arkouda.strings method)": [[11, "arkouda.Strings.peel"], [11, "id278"], [11, "id700"], [60, "arkouda.Strings.peel"]], "plot_dist() (in module arkouda)": [[11, "arkouda.plot_dist"]], "popcount() (arkouda.pdarray method)": [[11, "arkouda.pdarray.popcount"], [11, "id205"], [11, "id399"], [11, "id514"], [11, "id630"], [11, "id91"]], "popcount() (in module arkouda)": [[11, "arkouda.popcount"]], "power() (in module arkouda)": [[11, "arkouda.power"]], "prepend_single() (arkouda.segarray method)": [[11, "arkouda.SegArray.prepend_single"]], "pretty_print_info() (arkouda.strings method)": [[11, "arkouda.Strings.pretty_print_info"], [11, "id299"], [11, "id721"]], "pretty_print_info() (arkouda.pdarray method)": [[11, "arkouda.pdarray.pretty_print_info"], [11, "id188"], [11, "id382"], [11, "id497"], [11, "id613"], [11, "id74"]], "pretty_print_information() (in module arkouda)": [[11, "arkouda.pretty_print_information"]], "prod() (arkouda.segarray method)": [[11, "arkouda.SegArray.prod"]], "prod() (arkouda.pdarray method)": [[11, "arkouda.pdarray.prod"], [11, "id191"], [11, "id385"], [11, "id500"], [11, "id616"], [11, "id77"], [53, "arkouda.pdarray.prod"]], "prod() (in module arkouda)": [[11, "arkouda.prod"], [47, "arkouda.prod"]], "purge_cached_regex_patterns() (arkouda.strings method)": [[11, "arkouda.Strings.purge_cached_regex_patterns"], [11, "id263"], [11, "id685"]], "randint() (in module arkouda)": [[11, "arkouda.randint"], [50, "arkouda.randint"]], "random_strings_lognormal() (in module arkouda)": [[11, "arkouda.random_strings_lognormal"]], "random_strings_uniform() (in module arkouda)": [[11, "arkouda.random_strings_uniform"]], "read() (in module arkouda)": [[11, "arkouda.read"], [44, "arkouda.read"]], "read_hdf5_multi_dim() (in module arkouda)": [[11, "arkouda.read_hdf5_multi_dim"], [11, "id230"]], "register() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.register"]], "register() (arkouda.index method)": [[11, "arkouda.Index.register"]], "register() (arkouda.multiindex method)": [[11, "arkouda.MultiIndex.register"]], "register() (arkouda.segarray method)": [[11, "arkouda.SegArray.register"]], "register() (arkouda.series method)": [[11, "arkouda.Series.register"]], "register() (arkouda.strings method)": [[11, "arkouda.Strings.register"], [11, "id300"], [11, "id722"]], "register() (arkouda.pdarray method)": [[11, "arkouda.pdarray.register"], [11, "id105"], [11, "id219"], [11, "id413"], [11, "id528"], [11, "id644"]], "register() (in module arkouda)": [[11, "arkouda.register"]], "remove_repeats() (arkouda.segarray method)": [[11, "arkouda.SegArray.remove_repeats"]], "rename() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.rename"]], "reset_index() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.reset_index"]], "reshape() (arkouda.pdarray method)": [[11, "arkouda.pdarray.reshape"], [11, "id212"], [11, "id406"], [11, "id521"], [11, "id637"], [11, "id98"]], "resolve_scalar_dtype() (in module arkouda)": [[11, "arkouda.resolve_scalar_dtype"], [11, "id115"]], "return_validity (arkouda.errormode attribute)": [[11, "arkouda.ErrorMode.return_validity"]], "rotl() (arkouda.pdarray method)": [[11, "arkouda.pdarray.rotl"], [11, "id209"], [11, "id403"], [11, "id518"], [11, "id634"], [11, "id95"]], "rotl() (in module arkouda)": [[11, "arkouda.rotl"]], "rotr() (arkouda.pdarray method)": [[11, "arkouda.pdarray.rotr"], [11, "id210"], [11, "id404"], [11, "id519"], [11, "id635"], [11, "id96"]], "rotr() (in module arkouda)": [[11, "arkouda.rotr"]], "round() (arkouda._abstractbasetime method)": [[11, "arkouda._AbstractBaseTime.round"]], "rpeel() (arkouda.strings method)": [[11, "arkouda.Strings.rpeel"], [11, "id279"], [11, "id701"], [60, "arkouda.Strings.rpeel"]], "sample() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.sample"]], "save() (arkouda.arrayview method)": [[11, "arkouda.ArrayView.save"]], "save() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.save"]], "save() (arkouda.index method)": [[11, "arkouda.Index.save"]], "save() (arkouda.segarray method)": [[11, "arkouda.SegArray.save"]], "save() (arkouda.strings method)": [[11, "arkouda.Strings.save"], [11, "id293"], [11, "id715"]], "save() (arkouda.pdarray method)": [[11, "arkouda.pdarray.save"], [11, "id102"], [11, "id216"], [11, "id410"], [11, "id525"], [11, "id641"]], "save_all() (in module arkouda)": [[11, "arkouda.save_all"], [44, "arkouda.save_all"]], "save_hdf() (arkouda.strings method)": [[11, "arkouda.Strings.save_hdf"], [11, "id295"], [11, "id717"]], "save_hdf() (arkouda.pdarray method)": [[11, "arkouda.pdarray.save_hdf"], [11, "id104"], [11, "id218"], [11, "id412"], [11, "id527"], [11, "id643"]], "save_parquet() (arkouda.strings method)": [[11, "arkouda.Strings.save_parquet"], [11, "id294"], [11, "id716"]], "save_parquet() (arkouda.pdarray method)": [[11, "arkouda.pdarray.save_parquet"], [11, "id103"], [11, "id217"], [11, "id411"], [11, "id526"], [11, "id642"]], "search() (arkouda.strings method)": [[11, "arkouda.Strings.search"], [11, "id267"], [11, "id689"], [60, "arkouda.Strings.search"]], "second (arkouda.datetime property)": [[11, "arkouda.Datetime.second"], [11, "id730"]], "seconds (arkouda.timedelta property)": [[11, "arkouda.Timedelta.seconds"]], "segarray() (in module arkouda)": [[11, "arkouda.segarray"]], "set_dtype() (arkouda.index method)": [[11, "arkouda.Index.set_dtype"]], "set_dtype() (arkouda.multiindex method)": [[11, "arkouda.MultiIndex.set_dtype"]], "set_jth() (arkouda.segarray method)": [[11, "arkouda.SegArray.set_jth"]], "setdiff() (arkouda.segarray method)": [[11, "arkouda.SegArray.setdiff"]], "setdiff1d() (in module arkouda)": [[11, "arkouda.setdiff1d"], [58, "arkouda.setdiff1d"]], "setxor() (arkouda.segarray method)": [[11, "arkouda.SegArray.setxor"]], "setxor1d() (in module arkouda)": [[11, "arkouda.setxor1d"], [58, "arkouda.setxor1d"]], "shape (arkouda.arrayview attribute)": [[11, "arkouda.ArrayView.shape"], [48, "arkouda.ArrayView.shape"]], "shape (arkouda.dataframe property)": [[11, "arkouda.DataFrame.shape"]], "shape (arkouda.index property)": [[11, "arkouda.Index.shape"]], "shape (arkouda.series property)": [[11, "arkouda.Series.shape"]], "shape (arkouda.strings attribute)": [[11, "arkouda.Strings.shape"], [11, "id237"], [11, "id659"]], "shape (arkouda.pdarray attribute)": [[11, "arkouda.pdarray.shape"], [11, "id121"], [11, "id315"], [11, "id430"], [11, "id546"], [11, "id7"], [55, "arkouda.pdarray.shape"]], "sin() (in module arkouda)": [[11, "arkouda.sin"], [47, "arkouda.sin"]], "size (arkouda.arrayview attribute)": [[11, "arkouda.ArrayView.size"], [48, "arkouda.ArrayView.size"]], "size (arkouda.dataframe property)": [[11, "arkouda.DataFrame.size"]], "size (arkouda.strings attribute)": [[11, "arkouda.Strings.size"], [11, "id234"], [11, "id656"]], "size (arkouda.pdarray attribute)": [[11, "arkouda.pdarray.size"], [11, "id119"], [11, "id313"], [11, "id428"], [11, "id5"], [11, "id544"], [55, "arkouda.pdarray.size"]], "sort() (in module arkouda)": [[11, "arkouda.sort"]], "sort_index() (arkouda.series method)": [[11, "arkouda.Series.sort_index"]], "sort_values() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.sort_values"]], "sort_values() (arkouda.series method)": [[11, "arkouda.Series.sort_values"]], "sorted() (in module arkouda)": [[11, "arkouda.sorted"]], "split() (arkouda.strings method)": [[11, "arkouda.Strings.split"], [11, "id270"], [11, "id692"], [60, "arkouda.Strings.split"]], "sqrt() (in module arkouda)": [[11, "arkouda.sqrt"]], "standard_normal() (in module arkouda)": [[11, "arkouda.standard_normal"]], "startswith() (arkouda.strings method)": [[11, "arkouda.Strings.startswith"], [11, "id275"], [11, "id697"], [60, "arkouda.Strings.startswith"]], "std() (arkouda.timedelta method)": [[11, "arkouda.Timedelta.std"]], "std() (arkouda.pdarray method)": [[11, "arkouda.pdarray.std"], [11, "id198"], [11, "id392"], [11, "id507"], [11, "id623"], [11, "id84"], [53, "arkouda.pdarray.std"]], "std() (in module arkouda)": [[11, "arkouda.std"], [47, "arkouda.std"]], "stick() (arkouda.strings method)": [[11, "arkouda.Strings.stick"], [11, "id280"], [11, "id702"], [60, "arkouda.Strings.stick"]], "str_ (in module arkouda)": [[11, "arkouda.str_"], [11, "id419"]], "str_acc (arkouda.series attribute)": [[11, "arkouda.Series.str_acc"]], "str_scalars (in module arkouda)": [[11, "arkouda.str_scalars"]], "strict (arkouda.errormode attribute)": [[11, "arkouda.ErrorMode.strict"]], "string_operators() (in module arkouda)": [[11, "arkouda.string_operators"]], "strip() (arkouda.strings method)": [[11, "arkouda.Strings.strip"], [11, "id261"], [11, "id683"]], "sub() (arkouda.strings method)": [[11, "arkouda.Strings.sub"], [11, "id272"], [11, "id694"], [60, "arkouda.Strings.sub"]], "subn() (arkouda.strings method)": [[11, "arkouda.Strings.subn"], [11, "id273"], [11, "id695"], [60, "arkouda.Strings.subn"]], "sum() (arkouda.datetime method)": [[11, "arkouda.Datetime.sum"], [11, "id758"]], "sum() (arkouda.segarray method)": [[11, "arkouda.SegArray.sum"]], "sum() (arkouda.timedelta method)": [[11, "arkouda.Timedelta.sum"]], "sum() (arkouda.pdarray method)": [[11, "arkouda.pdarray.sum"], [11, "id190"], [11, "id384"], [11, "id499"], [11, "id615"], [11, "id76"], [53, "arkouda.pdarray.sum"]], "sum() (in module arkouda)": [[11, "arkouda.sum"], [47, "arkouda.sum"]], "supported_opeq (arkouda.datetime attribute)": [[11, "arkouda.Datetime.supported_opeq"], [11, "id749"]], "supported_opeq (arkouda.timedelta attribute)": [[11, "arkouda.Timedelta.supported_opeq"]], "supported_with_datetime (arkouda.datetime attribute)": [[11, "arkouda.Datetime.supported_with_datetime"], [11, "id745"]], "supported_with_datetime (arkouda.timedelta attribute)": [[11, "arkouda.Timedelta.supported_with_datetime"]], "supported_with_pdarray (arkouda.datetime attribute)": [[11, "arkouda.Datetime.supported_with_pdarray"], [11, "id750"]], "supported_with_pdarray (arkouda.timedelta attribute)": [[11, "arkouda.Timedelta.supported_with_pdarray"]], "supported_with_r_datetime (arkouda.datetime attribute)": [[11, "arkouda.Datetime.supported_with_r_datetime"], [11, "id746"]], "supported_with_r_datetime (arkouda.timedelta attribute)": [[11, "arkouda.Timedelta.supported_with_r_datetime"]], "supported_with_r_pdarray (arkouda.datetime attribute)": [[11, "arkouda.Datetime.supported_with_r_pdarray"], [11, "id751"]], "supported_with_r_pdarray (arkouda.timedelta attribute)": [[11, "arkouda.Timedelta.supported_with_r_pdarray"]], "supported_with_r_timedelta (arkouda.datetime attribute)": [[11, "arkouda.Datetime.supported_with_r_timedelta"], [11, "id748"]], "supported_with_r_timedelta (arkouda.timedelta attribute)": [[11, "arkouda.Timedelta.supported_with_r_timedelta"]], "supported_with_timedelta (arkouda.datetime attribute)": [[11, "arkouda.Datetime.supported_with_timedelta"], [11, "id747"]], "supported_with_timedelta (arkouda.timedelta attribute)": [[11, "arkouda.Timedelta.supported_with_timedelta"]], "tail() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.tail"]], "tail() (arkouda.series method)": [[11, "arkouda.Series.tail"]], "timedelta_range() (in module arkouda)": [[11, "arkouda.timedelta_range"]], "to_cuda() (arkouda.pdarray method)": [[11, "arkouda.pdarray.to_cuda"], [11, "id101"], [11, "id215"], [11, "id409"], [11, "id524"], [11, "id640"]], "to_dataframe() (arkouda.series method)": [[11, "arkouda.Series.to_dataframe"]], "to_dict() (arkouda.index method)": [[11, "arkouda.Index.to_dict"]], "to_dict() (arkouda.multiindex method)": [[11, "arkouda.MultiIndex.to_dict"]], "to_list() (arkouda.arrayview method)": [[11, "arkouda.ArrayView.to_list"]], "to_list() (arkouda.bitvector method)": [[11, "arkouda.BitVector.to_list"]], "to_list() (arkouda.ipv4 method)": [[11, "arkouda.IPv4.to_list"]], "to_list() (arkouda.index method)": [[11, "arkouda.Index.to_list"]], "to_list() (arkouda.segarray method)": [[11, "arkouda.SegArray.to_list"]], "to_list() (arkouda.strings method)": [[11, "arkouda.Strings.to_list"], [11, "id290"], [11, "id712"]], "to_list() (arkouda._abstractbasetime method)": [[11, "arkouda._AbstractBaseTime.to_list"]], "to_list() (arkouda.pdarray method)": [[11, "arkouda.pdarray.to_list"], [11, "id100"], [11, "id214"], [11, "id408"], [11, "id523"], [11, "id639"]], "to_lower() (arkouda.strings method)": [[11, "arkouda.Strings.to_lower"], [11, "id255"], [11, "id677"]], "to_ndarray() (arkouda.arrayview method)": [[11, "arkouda.ArrayView.to_ndarray"]], "to_ndarray() (arkouda.bitvector method)": [[11, "arkouda.BitVector.to_ndarray"]], "to_ndarray() (arkouda.ipv4 method)": [[11, "arkouda.IPv4.to_ndarray"]], "to_ndarray() (arkouda.index method)": [[11, "arkouda.Index.to_ndarray"]], "to_ndarray() (arkouda.segarray method)": [[11, "arkouda.SegArray.to_ndarray"]], "to_ndarray() (arkouda.strings method)": [[11, "arkouda.Strings.to_ndarray"], [11, "id289"], [11, "id711"]], "to_ndarray() (arkouda._abstractbasetime method)": [[11, "arkouda._AbstractBaseTime.to_ndarray"]], "to_ndarray() (arkouda.pdarray method)": [[11, "arkouda.pdarray.to_ndarray"], [11, "id213"], [11, "id407"], [11, "id522"], [11, "id638"], [11, "id99"]], "to_pandas() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.to_pandas"]], "to_pandas() (arkouda.datetime method)": [[11, "arkouda.Datetime.to_pandas"], [11, "id757"]], "to_pandas() (arkouda.index method)": [[11, "arkouda.Index.to_pandas"]], "to_pandas() (arkouda.multiindex method)": [[11, "arkouda.MultiIndex.to_pandas"]], "to_pandas() (arkouda.series method)": [[11, "arkouda.Series.to_pandas"]], "to_pandas() (arkouda.timedelta method)": [[11, "arkouda.Timedelta.to_pandas"]], "to_title() (arkouda.strings method)": [[11, "arkouda.Strings.to_title"], [11, "id257"], [11, "id679"]], "to_upper() (arkouda.strings method)": [[11, "arkouda.Strings.to_upper"], [11, "id256"], [11, "id678"]], "topn() (arkouda.series method)": [[11, "arkouda.Series.topn"]], "total_seconds() (arkouda.timedelta method)": [[11, "arkouda.Timedelta.total_seconds"]], "translate_np_dtype() (in module arkouda)": [[11, "arkouda.translate_np_dtype"], [11, "id114"], [11, "id420"]], "uint64 (in module arkouda)": [[11, "arkouda.uint64"]], "uint8 (in module arkouda)": [[11, "arkouda.uint8"]], "uniform() (in module arkouda)": [[11, "arkouda.uniform"]], "union() (arkouda.segarray method)": [[11, "arkouda.SegArray.union"]], "union1d() (in module arkouda)": [[11, "arkouda.union1d"], [58, "arkouda.union1d"]], "unique() (arkouda.segarray method)": [[11, "arkouda.SegArray.unique"]], "unregister() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.unregister"]], "unregister() (arkouda.segarray method)": [[11, "arkouda.SegArray.unregister"]], "unregister() (arkouda.strings method)": [[11, "arkouda.Strings.unregister"], [11, "id301"], [11, "id723"]], "unregister() (arkouda.pdarray method)": [[11, "arkouda.pdarray.unregister"], [11, "id106"], [11, "id220"], [11, "id414"], [11, "id529"], [11, "id645"]], "unregister_dataframe_by_name() (arkouda.dataframe static method)": [[11, "arkouda.DataFrame.unregister_dataframe_by_name"]], "unregister_pdarray_by_name() (in module arkouda)": [[11, "arkouda.unregister_pdarray_by_name"]], "unregister_strings_by_name() (arkouda.strings static method)": [[11, "arkouda.Strings.unregister_strings_by_name"], [11, "id303"], [11, "id725"]], "update_size() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.update_size"]], "valsize (arkouda.segarray attribute)": [[11, "arkouda.SegArray.valsize"]], "value_counts() (arkouda.series method)": [[11, "arkouda.Series.value_counts"]], "value_counts() (in module arkouda)": [[11, "arkouda.value_counts"], [53, "arkouda.value_counts"]], "var() (arkouda.pdarray method)": [[11, "arkouda.pdarray.var"], [11, "id197"], [11, "id391"], [11, "id506"], [11, "id622"], [11, "id83"], [53, "arkouda.pdarray.var"]], "var() (in module arkouda)": [[11, "arkouda.var"], [47, "arkouda.var"]], "week (arkouda.datetime property)": [[11, "arkouda.Datetime.week"], [11, "id741"]], "weekday (arkouda.datetime property)": [[11, "arkouda.Datetime.weekday"], [11, "id740"]], "weekofyear (arkouda.datetime property)": [[11, "arkouda.Datetime.weekofyear"], [11, "id742"]], "where() (in module arkouda)": [[11, "arkouda.where"], [11, "id1"], [11, "id229"], [47, "arkouda.where"]], "write_hdf5_multi_dim() (in module arkouda)": [[11, "arkouda.write_hdf5_multi_dim"], [11, "id231"]], "year (arkouda.datetime property)": [[11, "arkouda.Datetime.year"], [11, "id735"]], "zeros() (in module arkouda)": [[11, "arkouda.zeros"], [11, "id111"], [11, "id225"], [11, "id535"], [50, "arkouda.zeros"]], "zeros_like() (in module arkouda)": [[11, "arkouda.zeros_like"], [50, "arkouda.zeros_like"]], "index (class in arkouda.index)": [[12, "arkouda.index.Index"]], "multiindex (class in arkouda.index)": [[12, "arkouda.index.MultiIndex"]], "__eq__() (arkouda.index.index method)": [[12, "arkouda.index.Index.__eq__"]], "__eq__() (arkouda.index.multiindex method)": [[12, "arkouda.index.MultiIndex.__eq__"]], "__getitem__() (arkouda.index.index method)": [[12, "arkouda.index.Index.__getitem__"]], "__getitem__() (arkouda.index.multiindex method)": [[12, "arkouda.index.MultiIndex.__getitem__"]], "__len__() (arkouda.index.index method)": [[12, "arkouda.index.Index.__len__"]], "__len__() (arkouda.index.multiindex method)": [[12, "arkouda.index.MultiIndex.__len__"]], "__repr__() (arkouda.index.index method)": [[12, "arkouda.index.Index.__repr__"]], "__repr__() (arkouda.index.multiindex method)": [[12, "arkouda.index.MultiIndex.__repr__"]], "_check_aligned() (arkouda.index.index method)": [[12, "arkouda.index.Index._check_aligned"]], "_check_types() (arkouda.index.index method)": [[12, "arkouda.index.Index._check_types"]], "_merge() (arkouda.index.index method)": [[12, "arkouda.index.Index._merge"]], "_merge() (arkouda.index.multiindex method)": [[12, "arkouda.index.MultiIndex._merge"]], "_merge_all() (arkouda.index.index method)": [[12, "arkouda.index.Index._merge_all"]], "_merge_all() (arkouda.index.multiindex method)": [[12, "arkouda.index.MultiIndex._merge_all"]], "argsort() (arkouda.index.index method)": [[12, "arkouda.index.Index.argsort"]], "argsort() (arkouda.index.multiindex method)": [[12, "arkouda.index.MultiIndex.argsort"]], "arkouda.index": [[12, "module-arkouda.index"]], "concat() (arkouda.index.index method)": [[12, "arkouda.index.Index.concat"]], "concat() (arkouda.index.multiindex method)": [[12, "arkouda.index.MultiIndex.concat"]], "factory() (arkouda.index.index static method)": [[12, "arkouda.index.Index.factory"]], "index (arkouda.index.index property)": [[12, "arkouda.index.Index.index"]], "index (arkouda.index.multiindex property)": [[12, "arkouda.index.MultiIndex.index"]], "is_registered() (arkouda.index.index method)": [[12, "arkouda.index.Index.is_registered"]], "is_unique (arkouda.index.index property)": [[12, "arkouda.index.Index.is_unique"]], "lookup() (arkouda.index.index method)": [[12, "arkouda.index.Index.lookup"]], "lookup() (arkouda.index.multiindex method)": [[12, "arkouda.index.MultiIndex.lookup"]], "register() (arkouda.index.index method)": [[12, "arkouda.index.Index.register"]], "register() (arkouda.index.multiindex method)": [[12, "arkouda.index.MultiIndex.register"]], "save() (arkouda.index.index method)": [[12, "arkouda.index.Index.save"]], "set_dtype() (arkouda.index.index method)": [[12, "arkouda.index.Index.set_dtype"]], "set_dtype() (arkouda.index.multiindex method)": [[12, "arkouda.index.MultiIndex.set_dtype"]], "shape (arkouda.index.index property)": [[12, "arkouda.index.Index.shape"]], "to_dict() (arkouda.index.index method)": [[12, "arkouda.index.Index.to_dict"]], "to_dict() (arkouda.index.multiindex method)": [[12, "arkouda.index.MultiIndex.to_dict"]], "to_list() (arkouda.index.index method)": [[12, "arkouda.index.Index.to_list"]], "to_ndarray() (arkouda.index.index method)": [[12, "arkouda.index.Index.to_ndarray"]], "to_pandas() (arkouda.index.index method)": [[12, "arkouda.index.Index.to_pandas"]], "to_pandas() (arkouda.index.multiindex method)": [[12, "arkouda.index.MultiIndex.to_pandas"]], "allsymbols (in module arkouda.infoclass)": [[13, "arkouda.infoclass.AllSymbols"]], "registeredsymbols (in module arkouda.infoclass)": [[13, "arkouda.infoclass.RegisteredSymbols"]], "arkouda.infoclass": [[13, "module-arkouda.infoclass"]], "information() (in module arkouda.infoclass)": [[13, "arkouda.infoclass.information"]], "list_registry() (in module arkouda.infoclass)": [[13, "arkouda.infoclass.list_registry"]], "list_symbol_table() (in module arkouda.infoclass)": [[13, "arkouda.infoclass.list_symbol_table"]], "pretty_print_information() (in module arkouda.infoclass)": [[13, "arkouda.infoclass.pretty_print_information"]], "arkouda.io_util": [[14, "module-arkouda.io_util"]], "delimited_file_to_dict() (in module arkouda.io_util)": [[14, "arkouda.io_util.delimited_file_to_dict"]], "dict_to_delimited_file() (in module arkouda.io_util)": [[14, "arkouda.io_util.dict_to_delimited_file"]], "get_directory() (in module arkouda.io_util)": [[14, "arkouda.io_util.get_directory"]], "write_line_to_file() (in module arkouda.io_util)": [[14, "arkouda.io_util.write_line_to_file"]], "arkouda.join": [[15, "module-arkouda.join"]], "join_on_eq_with_dt() (in module arkouda.join)": [[15, "arkouda.join.join_on_eq_with_dt"]], "arkouda.logger": [[16, "module-arkouda.logger"]], "disableverbose() (in module arkouda.logger)": [[16, "arkouda.logger.disableVerbose"]], "enableverbose() (in module arkouda.logger)": [[16, "arkouda.logger.enableVerbose"]], "match (class in arkouda.match)": [[17, "arkouda.match.Match"]], "matchtype (in module arkouda.match)": [[17, "arkouda.match.MatchType"]], "__getitem__() (arkouda.match.match method)": [[17, "arkouda.match.Match.__getitem__"]], "__repr__() (arkouda.match.match method)": [[17, "arkouda.match.Match.__repr__"]], "__str__() (arkouda.match.match method)": [[17, "arkouda.match.Match.__str__"]], "arkouda.match": [[17, "module-arkouda.match"]], "end() (arkouda.match.match method)": [[17, "arkouda.match.Match.end"], [60, "arkouda.match.Match.end"]], "find_matches() (arkouda.match.match method)": [[17, "arkouda.match.Match.find_matches"], [60, "arkouda.match.Match.find_matches"]], "group() (arkouda.match.match method)": [[17, "arkouda.match.Match.group"], [60, "arkouda.match.Match.group"]], "match_type() (arkouda.match.match method)": [[17, "arkouda.match.Match.match_type"], [60, "arkouda.match.Match.match_type"]], "matched() (arkouda.match.match method)": [[17, "arkouda.match.Match.matched"], [60, "arkouda.match.Match.matched"]], "start() (arkouda.match.match method)": [[17, "arkouda.match.Match.start"], [60, "arkouda.match.Match.start"]], "locationsinfo (arkouda.matcher.matcher attribute)": [[18, "arkouda.matcher.Matcher.LocationsInfo"]], "matcher (class in arkouda.matcher)": [[18, "arkouda.matcher.Matcher"]], "arkouda.matcher": [[18, "module-arkouda.matcher"]], "find_locations() (arkouda.matcher.matcher method)": [[18, "arkouda.matcher.Matcher.find_locations"]], "findall() (arkouda.matcher.matcher method)": [[18, "arkouda.matcher.Matcher.findall"]], "get_match() (arkouda.matcher.matcher method)": [[18, "arkouda.matcher.Matcher.get_match"]], "split() (arkouda.matcher.matcher method)": [[18, "arkouda.matcher.Matcher.split"]], "sub() (arkouda.matcher.matcher method)": [[18, "arkouda.matcher.Matcher.sub"]], "binary (arkouda.message.messageformat attribute)": [[19, "arkouda.message.MessageFormat.BINARY"]], "datetime (arkouda.message.objecttype attribute)": [[19, "arkouda.message.ObjectType.DATETIME"]], "dict (arkouda.message.objecttype attribute)": [[19, "arkouda.message.ObjectType.DICT"]], "error (arkouda.message.messagetype attribute)": [[19, "arkouda.message.MessageType.ERROR"]], "list (arkouda.message.objecttype attribute)": [[19, "arkouda.message.ObjectType.LIST"]], "messageformat (class in arkouda.message)": [[19, "arkouda.message.MessageFormat"]], "messagetype (class in arkouda.message)": [[19, "arkouda.message.MessageType"]], "normal (arkouda.message.messagetype attribute)": [[19, "arkouda.message.MessageType.NORMAL"]], "objecttype (class in arkouda.message)": [[19, "arkouda.message.ObjectType"]], "pdarray (arkouda.message.objecttype attribute)": [[19, "arkouda.message.ObjectType.PDARRAY"]], "parameterobject (class in arkouda.message)": [[19, "arkouda.message.ParameterObject"]], "replymessage (class in arkouda.message)": [[19, "arkouda.message.ReplyMessage"]], "requestmessage (class in arkouda.message)": [[19, "arkouda.message.RequestMessage"]], "string (arkouda.message.messageformat attribute)": [[19, "arkouda.message.MessageFormat.STRING"]], "strings (arkouda.message.objecttype attribute)": [[19, "arkouda.message.ObjectType.STRINGS"]], "timedelta (arkouda.message.objecttype attribute)": [[19, "arkouda.message.ObjectType.TIMEDELTA"]], "value (arkouda.message.objecttype attribute)": [[19, "arkouda.message.ObjectType.VALUE"]], "warning (arkouda.message.messagetype attribute)": [[19, "arkouda.message.MessageType.WARNING"]], "__repr__() (arkouda.message.messageformat method)": [[19, "arkouda.message.MessageFormat.__repr__"]], "__repr__() (arkouda.message.messagetype method)": [[19, "arkouda.message.MessageType.__repr__"]], "__repr__() (arkouda.message.objecttype method)": [[19, "arkouda.message.ObjectType.__repr__"]], "__slots (arkouda.message.parameterobject attribute)": [[19, "arkouda.message.ParameterObject.__slots"]], "__slots (arkouda.message.requestmessage attribute)": [[19, "arkouda.message.RequestMessage.__slots"]], "__slots__ (arkouda.message.replymessage attribute)": [[19, "arkouda.message.ReplyMessage.__slots__"]], "__str__() (arkouda.message.messageformat method)": [[19, "arkouda.message.MessageFormat.__str__"]], "__str__() (arkouda.message.messagetype method)": [[19, "arkouda.message.MessageType.__str__"]], "__str__() (arkouda.message.objecttype method)": [[19, "arkouda.message.ObjectType.__str__"]], "_build_dict_param() (arkouda.message.parameterobject static method)": [[19, "arkouda.message.ParameterObject._build_dict_param"]], "_build_gen_param() (arkouda.message.parameterobject static method)": [[19, "arkouda.message.ParameterObject._build_gen_param"]], "_build_list_param() (arkouda.message.parameterobject static method)": [[19, "arkouda.message.ParameterObject._build_list_param"]], "_build_pdarray_param() (arkouda.message.parameterobject static method)": [[19, "arkouda.message.ParameterObject._build_pdarray_param"]], "_build_strings_param() (arkouda.message.parameterobject static method)": [[19, "arkouda.message.ParameterObject._build_strings_param"]], "args (arkouda.message.requestmessage attribute)": [[19, "arkouda.message.RequestMessage.args"]], "arkouda.message": [[19, "module-arkouda.message"]], "asdict() (arkouda.message.requestmessage method)": [[19, "arkouda.message.RequestMessage.asdict"]], "cmd (arkouda.message.requestmessage attribute)": [[19, "arkouda.message.RequestMessage.cmd"]], "dict (arkouda.message.parameterobject property)": [[19, "arkouda.message.ParameterObject.dict"]], "dtype (arkouda.message.parameterobject attribute)": [[19, "arkouda.message.ParameterObject.dtype"]], "factory() (arkouda.message.parameterobject class method)": [[19, "arkouda.message.ParameterObject.factory"]], "format (arkouda.message.requestmessage attribute)": [[19, "arkouda.message.RequestMessage.format"]], "fromdict() (arkouda.message.replymessage static method)": [[19, "arkouda.message.ReplyMessage.fromdict"]], "generate_dispatch() (arkouda.message.parameterobject static method)": [[19, "arkouda.message.ParameterObject.generate_dispatch"]], "key (arkouda.message.parameterobject attribute)": [[19, "arkouda.message.ParameterObject.key"]], "msg (arkouda.message.replymessage attribute)": [[19, "arkouda.message.ReplyMessage.msg"]], "msgtype (arkouda.message.replymessage attribute)": [[19, "arkouda.message.ReplyMessage.msgType"]], "objtype (arkouda.message.parameterobject attribute)": [[19, "arkouda.message.ParameterObject.objType"]], "size (arkouda.message.requestmessage attribute)": [[19, "arkouda.message.RequestMessage.size"]], "token (arkouda.message.requestmessage attribute)": [[19, "arkouda.message.RequestMessage.token"]], "user (arkouda.message.replymessage attribute)": [[19, "arkouda.message.ReplyMessage.user"]], "user (arkouda.message.requestmessage attribute)": [[19, "arkouda.message.RequestMessage.user"]], "val (arkouda.message.parameterobject attribute)": [[19, "arkouda.message.ParameterObject.val"]], "errormode (class in arkouda.numeric)": [[20, "arkouda.numeric.ErrorMode"]], "abs() (in module arkouda.numeric)": [[20, "arkouda.numeric.abs"]], "arkouda.numeric": [[20, "module-arkouda.numeric"]], "cast() (in module arkouda.numeric)": [[20, "arkouda.numeric.cast"]], "cos() (in module arkouda.numeric)": [[20, "arkouda.numeric.cos"]], "cumprod() (in module arkouda.numeric)": [[20, "arkouda.numeric.cumprod"]], "cumsum() (in module arkouda.numeric)": [[20, "arkouda.numeric.cumsum"]], "exp() (in module arkouda.numeric)": [[20, "arkouda.numeric.exp"]], "hash() (in module arkouda.numeric)": [[20, "arkouda.numeric.hash"]], "histogram() (in module arkouda.numeric)": [[20, "arkouda.numeric.histogram"]], "ignore (arkouda.numeric.errormode attribute)": [[20, "arkouda.numeric.ErrorMode.ignore"]], "isnan() (in module arkouda.numeric)": [[20, "arkouda.numeric.isnan"]], "log() (in module arkouda.numeric)": [[20, "arkouda.numeric.log"]], "return_validity (arkouda.numeric.errormode attribute)": [[20, "arkouda.numeric.ErrorMode.return_validity"]], "sin() (in module arkouda.numeric)": [[20, "arkouda.numeric.sin"]], "strict (arkouda.numeric.errormode attribute)": [[20, "arkouda.numeric.ErrorMode.strict"]], "value_counts() (in module arkouda.numeric)": [[20, "arkouda.numeric.value_counts"]], "where() (in module arkouda.numeric)": [[20, "arkouda.numeric.where"]], "arkouda.pdarrayio": [[21, "module-arkouda.pdarrayIO"]], "export() (in module arkouda.pdarrayio)": [[21, "arkouda.pdarrayIO.export"]], "get_datasets() (in module arkouda.pdarrayio)": [[21, "arkouda.pdarrayIO.get_datasets"]], "get_filetype() (in module arkouda.pdarrayio)": [[21, "arkouda.pdarrayIO.get_filetype"]], "get_null_indices() (in module arkouda.pdarrayio)": [[21, "arkouda.pdarrayIO.get_null_indices"]], "import_data() (in module arkouda.pdarrayio)": [[21, "arkouda.pdarrayIO.import_data"]], "load() (in module arkouda.pdarrayio)": [[21, "arkouda.pdarrayIO.load"]], "load_all() (in module arkouda.pdarrayio)": [[21, "arkouda.pdarrayIO.load_all"]], "ls() (in module arkouda.pdarrayio)": [[21, "arkouda.pdarrayIO.ls"]], "read() (in module arkouda.pdarrayio)": [[21, "arkouda.pdarrayIO.read"]], "read_hdf5_multi_dim() (in module arkouda.pdarrayio)": [[21, "arkouda.pdarrayIO.read_hdf5_multi_dim"]], "save_all() (in module arkouda.pdarrayio)": [[21, "arkouda.pdarrayIO.save_all"]], "write_hdf5_multi_dim() (in module arkouda.pdarrayio)": [[21, "arkouda.pdarrayIO.write_hdf5_multi_dim"]], "binops (arkouda.pdarrayclass.pdarray attribute)": [[22, "arkouda.pdarrayclass.pdarray.BinOps"]], "opeqops (arkouda.pdarrayclass.pdarray attribute)": [[22, "arkouda.pdarrayclass.pdarray.OpEqOps"]], "__add__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__add__"]], "__and__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__and__"]], "__array_priority__ (arkouda.pdarrayclass.pdarray attribute)": [[22, "arkouda.pdarrayclass.pdarray.__array_priority__"]], "__bool__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__bool__"]], "__del__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__del__"]], "__eq__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__eq__"]], "__floordiv__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__floordiv__"]], "__ge__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__ge__"]], "__getitem__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__getitem__"]], "__gt__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__gt__"]], "__iadd__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__iadd__"]], "__iand__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__iand__"]], "__ifloordiv__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__ifloordiv__"]], "__ilshift__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__ilshift__"]], "__imul__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__imul__"]], "__invert__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__invert__"]], "__ior__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__ior__"]], "__ipow__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__ipow__"]], "__irshift__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__irshift__"]], "__isub__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__isub__"]], "__iter__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__iter__"]], "__itruediv__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__itruediv__"]], "__ixor__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__ixor__"]], "__le__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__le__"]], "__len__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__len__"]], "__lshift__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__lshift__"]], "__lt__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__lt__"]], "__mod__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__mod__"]], "__mul__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__mul__"]], "__ne__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__ne__"]], "__neg__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__neg__"]], "__or__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__or__"]], "__pow__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__pow__"]], "__radd__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__radd__"]], "__rand__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__rand__"]], "__repr__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__repr__"]], "__rfloordiv__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__rfloordiv__"]], "__rlshift__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__rlshift__"]], "__rmod__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__rmod__"]], "__rmul__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__rmul__"]], "__ror__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__ror__"]], "__rpow__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__rpow__"]], "__rrshift__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__rrshift__"]], "__rshift__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__rshift__"]], "__rsub__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__rsub__"]], "__rtruediv__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__rtruediv__"]], "__rxor__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__rxor__"]], "__setitem__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__setitem__"]], "__str__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__str__"]], "__sub__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__sub__"]], "__truediv__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__truediv__"]], "__xor__() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.__xor__"]], "_binop() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray._binop"]], "_get_grouping_keys() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray._get_grouping_keys"]], "_list_component_names() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray._list_component_names"]], "_r_binop() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray._r_binop"]], "all() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.all"]], "all() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.all"]], "any() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.any"]], "any() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.any"]], "argmax() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.argmax"]], "argmax() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.argmax"]], "argmaxk() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.argmaxk"]], "argmaxk() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.argmaxk"]], "argmin() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.argmin"]], "argmin() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.argmin"]], "argmink() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.argmink"]], "argmink() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.argmink"]], "arkouda.pdarrayclass": [[22, "module-arkouda.pdarrayclass"]], "astype() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.astype"]], "attach() (arkouda.pdarrayclass.pdarray static method)": [[22, "arkouda.pdarrayclass.pdarray.attach"]], "attach_pdarray() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.attach_pdarray"]], "clear() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.clear"]], "clz() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.clz"]], "clz() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.clz"]], "corr() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.corr"]], "corr() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.corr"]], "cov() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.cov"]], "cov() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.cov"]], "ctz() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.ctz"]], "ctz() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.ctz"]], "dtype (arkouda.pdarrayclass.pdarray attribute)": [[22, "arkouda.pdarrayclass.pdarray.dtype"]], "fill() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.fill"]], "format_other() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.format_other"]], "info() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.info"]], "is_registered() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.is_registered"]], "is_sorted() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.is_sorted"]], "is_sorted() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.is_sorted"]], "itemsize (arkouda.pdarrayclass.pdarray attribute)": [[22, "arkouda.pdarrayclass.pdarray.itemsize"]], "max() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.max"]], "max() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.max"]], "maxk() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.maxk"]], "maxk() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.maxk"]], "mean() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.mean"]], "mean() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.mean"]], "min() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.min"]], "min() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.min"]], "mink() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.mink"]], "mink() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.mink"]], "name (arkouda.pdarrayclass.pdarray attribute)": [[22, "arkouda.pdarrayclass.pdarray.name"]], "ndim (arkouda.pdarrayclass.pdarray attribute)": [[22, "arkouda.pdarrayclass.pdarray.ndim"]], "objtype (arkouda.pdarrayclass.pdarray attribute)": [[22, "arkouda.pdarrayclass.pdarray.objtype"]], "opeq() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.opeq"]], "parity() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.parity"]], "parity() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.parity"]], "pdarray (class in arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.pdarray"]], "popcount() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.popcount"]], "popcount() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.popcount"]], "power() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.power"]], "pretty_print_info() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.pretty_print_info"]], "prod() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.prod"]], "prod() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.prod"]], "register() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.register"]], "reshape() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.reshape"]], "rotl() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.rotl"]], "rotl() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.rotl"]], "rotr() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.rotr"]], "rotr() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.rotr"]], "save() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.save"]], "save_hdf() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.save_hdf"]], "save_parquet() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.save_parquet"]], "shape (arkouda.pdarrayclass.pdarray attribute)": [[22, "arkouda.pdarrayclass.pdarray.shape"]], "size (arkouda.pdarrayclass.pdarray attribute)": [[22, "arkouda.pdarrayclass.pdarray.size"]], "sqrt() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.sqrt"]], "std() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.std"]], "std() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.std"]], "sum() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.sum"]], "sum() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.sum"]], "to_cuda() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.to_cuda"]], "to_list() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.to_list"]], "to_ndarray() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.to_ndarray"]], "unregister() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.unregister"]], "unregister_pdarray_by_name() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.unregister_pdarray_by_name"]], "var() (arkouda.pdarrayclass.pdarray method)": [[22, "arkouda.pdarrayclass.pdarray.var"]], "var() (in module arkouda.pdarrayclass)": [[22, "arkouda.pdarrayclass.var"]], "arange() (in module arkouda.pdarraycreation)": [[23, "arkouda.pdarraycreation.arange"]], "arkouda.pdarraycreation": [[23, "module-arkouda.pdarraycreation"]], "array() (in module arkouda.pdarraycreation)": [[23, "arkouda.pdarraycreation.array"]], "from_series() (in module arkouda.pdarraycreation)": [[23, "arkouda.pdarraycreation.from_series"]], "full() (in module arkouda.pdarraycreation)": [[23, "arkouda.pdarraycreation.full"]], "full_like() (in module arkouda.pdarraycreation)": [[23, "arkouda.pdarraycreation.full_like"]], "linspace() (in module arkouda.pdarraycreation)": [[23, "arkouda.pdarraycreation.linspace"]], "ones() (in module arkouda.pdarraycreation)": [[23, "arkouda.pdarraycreation.ones"]], "ones_like() (in module arkouda.pdarraycreation)": [[23, "arkouda.pdarraycreation.ones_like"]], "randint() (in module arkouda.pdarraycreation)": [[23, "arkouda.pdarraycreation.randint"]], "random_strings_lognormal() (in module arkouda.pdarraycreation)": [[23, "arkouda.pdarraycreation.random_strings_lognormal"]], "random_strings_uniform() (in module arkouda.pdarraycreation)": [[23, "arkouda.pdarraycreation.random_strings_uniform"]], "standard_normal() (in module arkouda.pdarraycreation)": [[23, "arkouda.pdarraycreation.standard_normal"]], "uniform() (in module arkouda.pdarraycreation)": [[23, "arkouda.pdarraycreation.uniform"]], "zeros() (in module arkouda.pdarraycreation)": [[23, "arkouda.pdarraycreation.zeros"]], "zeros_like() (in module arkouda.pdarraycreation)": [[23, "arkouda.pdarraycreation.zeros_like"]], "arkouda.pdarraysetops": [[24, "module-arkouda.pdarraysetops"]], "concatenate() (in module arkouda.pdarraysetops)": [[24, "arkouda.pdarraysetops.concatenate"]], "in1d() (in module arkouda.pdarraysetops)": [[24, "arkouda.pdarraysetops.in1d"]], "intersect1d() (in module arkouda.pdarraysetops)": [[24, "arkouda.pdarraysetops.intersect1d"]], "setdiff1d() (in module arkouda.pdarraysetops)": [[24, "arkouda.pdarraysetops.setdiff1d"]], "setxor1d() (in module arkouda.pdarraysetops)": [[24, "arkouda.pdarraysetops.setxor1d"]], "union1d() (in module arkouda.pdarraysetops)": [[24, "arkouda.pdarraysetops.union1d"]], "arkouda.plotting": [[25, "module-arkouda.plotting"]], "plot_dist() (in module arkouda.plotting)": [[25, "arkouda.plotting.plot_dist"]], "row (class in arkouda.row)": [[26, "arkouda.row.Row"]], "__repr__() (arkouda.row.row method)": [[26, "arkouda.row.Row.__repr__"]], "__str__() (arkouda.row.row method)": [[26, "arkouda.row.Row.__str__"]], "_repr_html_() (arkouda.row.row method)": [[26, "arkouda.row.Row._repr_html_"]], "arkouda.row": [[26, "module-arkouda.row"]], "arkouda.security": [[27, "module-arkouda.security"]], "generate_token() (in module arkouda.security)": [[27, "arkouda.security.generate_token"]], "generate_username_token_json() (in module arkouda.security)": [[27, "arkouda.security.generate_username_token_json"]], "get_arkouda_client_directory() (in module arkouda.security)": [[27, "arkouda.security.get_arkouda_client_directory"]], "get_home_directory() (in module arkouda.security)": [[27, "arkouda.security.get_home_directory"]], "get_username() (in module arkouda.security)": [[27, "arkouda.security.get_username"]], "username_tokenizer (in module arkouda.security)": [[27, "arkouda.security.username_tokenizer"]], "and() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.AND"]], "or() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.OR"]], "segarray (class in arkouda.segarray)": [[28, "arkouda.segarray.SegArray"]], "xor() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.XOR"]], "__eq__() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.__eq__"]], "__getitem__() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.__getitem__"]], "__repr__() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.__repr__"]], "__str__() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.__str__"]], "_aggregator() (in module arkouda.segarray)": [[28, "arkouda.segarray._aggregator"]], "_compute_non_empty() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray._compute_non_empty"]], "_from_attach_return_msg() (arkouda.segarray.segarray class method)": [[28, "arkouda.segarray.SegArray._from_attach_return_msg"]], "_normalize_index() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray._normalize_index"]], "aggregate() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.aggregate"]], "all() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.all"]], "any() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.any"]], "append() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.append"]], "append_single() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.append_single"]], "argmax() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.argmax"]], "argmin() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.argmin"]], "arkouda.segarray": [[28, "module-arkouda.segarray"]], "attach() (arkouda.segarray.segarray class method)": [[28, "arkouda.segarray.SegArray.attach"]], "concat() (arkouda.segarray.segarray class method)": [[28, "arkouda.segarray.SegArray.concat"]], "copy() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.copy"]], "from_multi_array() (arkouda.segarray.segarray class method)": [[28, "arkouda.segarray.SegArray.from_multi_array"]], "from_parts() (arkouda.segarray.segarray class method)": [[28, "arkouda.segarray.SegArray.from_parts"]], "from_return_msg() (arkouda.segarray.segarray class method)": [[28, "arkouda.segarray.SegArray.from_return_msg"]], "gen_ranges() (in module arkouda.segarray)": [[28, "arkouda.segarray.gen_ranges"]], "get_jth() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.get_jth"]], "get_length_n() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.get_length_n"]], "get_ngrams() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.get_ngrams"]], "get_prefixes() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.get_prefixes"]], "get_suffixes() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.get_suffixes"]], "intersect() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.intersect"]], "is_registered() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.is_registered"]], "lengths (arkouda.segarray.segarray property)": [[28, "arkouda.segarray.SegArray.lengths"]], "load() (arkouda.segarray.segarray class method)": [[28, "arkouda.segarray.SegArray.load"]], "max() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.max"]], "mean() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.mean"]], "min() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.min"]], "non_empty (arkouda.segarray.segarray property)": [[28, "arkouda.segarray.SegArray.non_empty"]], "non_empty_count (arkouda.segarray.segarray property)": [[28, "arkouda.segarray.SegArray.non_empty_count"]], "nunique() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.nunique"]], "objtype (arkouda.segarray.segarray property)": [[28, "arkouda.segarray.SegArray.objtype"]], "prepend_single() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.prepend_single"]], "prod() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.prod"]], "register() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.register"]], "remove_repeats() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.remove_repeats"]], "save() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.save"]], "segarray() (in module arkouda.segarray)": [[28, "arkouda.segarray.segarray"]], "set_jth() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.set_jth"]], "setdiff() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.setdiff"]], "setxor() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.setxor"]], "sum() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.sum"]], "to_list() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.to_list"]], "to_ndarray() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.to_ndarray"]], "union() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.union"]], "unique() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.unique"]], "unregister() (arkouda.segarray.segarray method)": [[28, "arkouda.segarray.SegArray.unregister"]], "valsize (arkouda.segarray.segarray attribute)": [[28, "arkouda.segarray.SegArray.valsize"]], "series (class in arkouda.series)": [[29, "arkouda.series.Series"]], "__getitem__() (arkouda.series.series method)": [[29, "arkouda.series.Series.__getitem__"]], "__len__() (arkouda.series.series method)": [[29, "arkouda.series.Series.__len__"]], "__repr__() (arkouda.series.series method)": [[29, "arkouda.series.Series.__repr__"]], "_all_aligned() (arkouda.series.series static method)": [[29, "arkouda.series.Series._all_aligned"]], "_make_aggop() (arkouda.series.series class method)": [[29, "arkouda.series.Series._make_aggop"]], "_make_binop() (arkouda.series.series class method)": [[29, "arkouda.series.Series._make_binop"]], "_make_unaryop() (arkouda.series.series class method)": [[29, "arkouda.series.Series._make_unaryop"]], "add() (arkouda.series.series method)": [[29, "arkouda.series.Series.add"]], "arkouda.series": [[29, "module-arkouda.series"]], "attach() (arkouda.series.series static method)": [[29, "arkouda.series.Series.attach"]], "concat() (arkouda.series.series static method)": [[29, "arkouda.series.Series.concat"]], "diff() (arkouda.series.series method)": [[29, "arkouda.series.Series.diff"]], "dt (arkouda.series.series attribute)": [[29, "arkouda.series.Series.dt"]], "from_return_msg() (arkouda.series.series static method)": [[29, "arkouda.series.Series.from_return_msg"]], "head() (arkouda.series.series method)": [[29, "arkouda.series.Series.head"]], "is_registered() (arkouda.series.series method)": [[29, "arkouda.series.Series.is_registered"]], "isin() (arkouda.series.series method)": [[29, "arkouda.series.Series.isin"]], "locate() (arkouda.series.series method)": [[29, "arkouda.series.Series.locate"]], "pdconcat() (arkouda.series.series static method)": [[29, "arkouda.series.Series.pdconcat"]], "register() (arkouda.series.series method)": [[29, "arkouda.series.Series.register"]], "shape (arkouda.series.series property)": [[29, "arkouda.series.Series.shape"]], "sort_index() (arkouda.series.series method)": [[29, "arkouda.series.Series.sort_index"]], "sort_values() (arkouda.series.series method)": [[29, "arkouda.series.Series.sort_values"]], "str_acc (arkouda.series.series attribute)": [[29, "arkouda.series.Series.str_acc"]], "tail() (arkouda.series.series method)": [[29, "arkouda.series.Series.tail"]], "to_dataframe() (arkouda.series.series method)": [[29, "arkouda.series.Series.to_dataframe"]], "to_pandas() (arkouda.series.series method)": [[29, "arkouda.series.Series.to_pandas"]], "topn() (arkouda.series.series method)": [[29, "arkouda.series.Series.topn"]], "value_counts() (arkouda.series.series method)": [[29, "arkouda.series.Series.value_counts"]], "sortingalgorithm (in module arkouda.sorting)": [[30, "arkouda.sorting.SortingAlgorithm"]], "argsort() (in module arkouda.sorting)": [[30, "arkouda.sorting.argsort"]], "arkouda.sorting": [[30, "module-arkouda.sorting"]], "coargsort() (in module arkouda.sorting)": [[30, "arkouda.sorting.coargsort"]], "sort() (in module arkouda.sorting)": [[30, "arkouda.sorting.sort"]], "binops (arkouda.strings.strings attribute)": [[31, "arkouda.strings.Strings.BinOps"]], "strings (class in arkouda.strings)": [[31, "arkouda.strings.Strings"]], "__add__() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.__add__"]], "__eq__() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.__eq__"]], "__getitem__() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.__getitem__"]], "__iter__() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.__iter__"]], "__len__() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.__len__"]], "__ne__() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.__ne__"]], "__radd__() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.__radd__"]], "__repr__() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.__repr__"]], "__str__() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.__str__"]], "_binop() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings._binop"]], "_comp_to_ndarray() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings._comp_to_ndarray"]], "_empty_pattern_verification() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings._empty_pattern_verification"]], "_get_grouping_keys() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings._get_grouping_keys"]], "_get_matcher() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings._get_matcher"]], "_list_component_names() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings._list_component_names"]], "arkouda.strings": [[31, "module-arkouda.strings"]], "astype() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.astype"]], "attach() (arkouda.strings.strings static method)": [[31, "arkouda.strings.Strings.attach"]], "cached_regex_patterns() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.cached_regex_patterns"]], "contains() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.contains"]], "dtype (arkouda.strings.strings attribute)": [[31, "arkouda.strings.Strings.dtype"]], "endswith() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.endswith"]], "entry (arkouda.strings.strings attribute)": [[31, "arkouda.strings.Strings.entry"]], "find_locations() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.find_locations"]], "findall() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.findall"]], "flatten() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.flatten"]], "from_parts() (arkouda.strings.strings static method)": [[31, "arkouda.strings.Strings.from_parts"]], "from_return_msg() (arkouda.strings.strings static method)": [[31, "arkouda.strings.Strings.from_return_msg"]], "fullmatch() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.fullmatch"]], "get_lengths() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.get_lengths"]], "get_prefixes() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.get_prefixes"]], "get_suffixes() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.get_suffixes"]], "group() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.group"]], "hash() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.hash"]], "idna_decode() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.idna_decode"]], "idna_encode() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.idna_encode"]], "info() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.info"]], "is_lower() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.is_lower"]], "is_registered() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.is_registered"]], "is_title() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.is_title"]], "is_upper() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.is_upper"]], "logger (arkouda.strings.strings attribute)": [[31, "arkouda.strings.Strings.logger"]], "lstick() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.lstick"]], "match() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.match"]], "nbytes (arkouda.strings.strings attribute)": [[31, "arkouda.strings.Strings.nbytes"]], "ndim (arkouda.strings.strings attribute)": [[31, "arkouda.strings.Strings.ndim"]], "objtype (arkouda.strings.strings attribute)": [[31, "arkouda.strings.Strings.objtype"]], "peel() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.peel"]], "pretty_print_info() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.pretty_print_info"]], "purge_cached_regex_patterns() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.purge_cached_regex_patterns"]], "register() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.register"]], "rpeel() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.rpeel"]], "save() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.save"]], "save_hdf() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.save_hdf"]], "save_parquet() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.save_parquet"]], "search() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.search"]], "shape (arkouda.strings.strings attribute)": [[31, "arkouda.strings.Strings.shape"]], "size (arkouda.strings.strings attribute)": [[31, "arkouda.strings.Strings.size"]], "split() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.split"]], "startswith() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.startswith"]], "stick() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.stick"]], "strip() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.strip"]], "sub() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.sub"]], "subn() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.subn"]], "to_list() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.to_list"]], "to_lower() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.to_lower"]], "to_ndarray() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.to_ndarray"]], "to_title() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.to_title"]], "to_upper() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.to_upper"]], "unregister() (arkouda.strings.strings method)": [[31, "arkouda.strings.Strings.unregister"]], "unregister_strings_by_name() (arkouda.strings.strings static method)": [[31, "arkouda.strings.Strings.unregister_strings_by_name"]], "datetime (class in arkouda.timeclass)": [[32, "arkouda.timeclass.Datetime"]], "timedelta (class in arkouda.timeclass)": [[32, "arkouda.timeclass.Timedelta"]], "_abstractbasetime (class in arkouda.timeclass)": [[32, "arkouda.timeclass._AbstractBaseTime"]], "_base_unit (in module arkouda.timeclass)": [[32, "arkouda.timeclass._BASE_UNIT"]], "_timescalar (class in arkouda.timeclass)": [[32, "arkouda.timeclass._Timescalar"]], "__getitem__() (arkouda.timeclass._abstractbasetime method)": [[32, "arkouda.timeclass._AbstractBaseTime.__getitem__"]], "__repr__() (arkouda.timeclass._abstractbasetime method)": [[32, "arkouda.timeclass._AbstractBaseTime.__repr__"]], "__setitem__() (arkouda.timeclass._abstractbasetime method)": [[32, "arkouda.timeclass._AbstractBaseTime.__setitem__"]], "__str__() (arkouda.timeclass._abstractbasetime method)": [[32, "arkouda.timeclass._AbstractBaseTime.__str__"]], "_binop() (arkouda.timeclass._abstractbasetime method)": [[32, "arkouda.timeclass._AbstractBaseTime._binop"]], "_ensure_components() (arkouda.timeclass.datetime method)": [[32, "arkouda.timeclass.Datetime._ensure_components"]], "_ensure_components() (arkouda.timeclass.timedelta method)": [[32, "arkouda.timeclass.Timedelta._ensure_components"]], "_get_callback() (arkouda.timeclass.datetime class method)": [[32, "arkouda.timeclass.Datetime._get_callback"]], "_get_callback() (arkouda.timeclass.timedelta class method)": [[32, "arkouda.timeclass.Timedelta._get_callback"]], "_get_callback() (arkouda.timeclass._abstractbasetime class method)": [[32, "arkouda.timeclass._AbstractBaseTime._get_callback"]], "_get_factor() (in module arkouda.timeclass)": [[32, "arkouda.timeclass._get_factor"]], "_identity() (in module arkouda.timeclass)": [[32, "arkouda.timeclass._identity"]], "_is_datetime_scalar() (arkouda.timeclass._abstractbasetime static method)": [[32, "arkouda.timeclass._AbstractBaseTime._is_datetime_scalar"]], "_is_supported_scalar() (arkouda.timeclass.datetime static method)": [[32, "arkouda.timeclass.Datetime._is_supported_scalar"]], "_is_supported_scalar() (arkouda.timeclass.timedelta static method)": [[32, "arkouda.timeclass.Timedelta._is_supported_scalar"]], "_is_timedelta_scalar() (arkouda.timeclass._abstractbasetime static method)": [[32, "arkouda.timeclass._AbstractBaseTime._is_timedelta_scalar"]], "_r_binop() (arkouda.timeclass._abstractbasetime method)": [[32, "arkouda.timeclass._AbstractBaseTime._r_binop"]], "_scalar_callback() (arkouda.timeclass.datetime method)": [[32, "arkouda.timeclass.Datetime._scalar_callback"]], "_scalar_callback() (arkouda.timeclass.timedelta method)": [[32, "arkouda.timeclass.Timedelta._scalar_callback"]], "_scalar_callback() (arkouda.timeclass._abstractbasetime method)": [[32, "arkouda.timeclass._AbstractBaseTime._scalar_callback"]], "_unit2factor (in module arkouda.timeclass)": [[32, "arkouda.timeclass._unit2factor"]], "_unit2normunit (in module arkouda.timeclass)": [[32, "arkouda.timeclass._unit2normunit"]], "abs() (arkouda.timeclass.timedelta method)": [[32, "arkouda.timeclass.Timedelta.abs"]], "arkouda.timeclass": [[32, "module-arkouda.timeclass"]], "ceil() (arkouda.timeclass._abstractbasetime method)": [[32, "arkouda.timeclass._AbstractBaseTime.ceil"]], "components (arkouda.timeclass.timedelta property)": [[32, "arkouda.timeclass.Timedelta.components"]], "date (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.date"]], "date_range() (in module arkouda.timeclass)": [[32, "arkouda.timeclass.date_range"]], "day (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.day"]], "day_of_week (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.day_of_week"]], "day_of_year (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.day_of_year"]], "dayofweek (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.dayofweek"]], "dayofyear (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.dayofyear"]], "days (arkouda.timeclass.timedelta property)": [[32, "arkouda.timeclass.Timedelta.days"]], "floor() (arkouda.timeclass._abstractbasetime method)": [[32, "arkouda.timeclass._AbstractBaseTime.floor"]], "hour (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.hour"]], "is_leap_year (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.is_leap_year"]], "isocalendar() (arkouda.timeclass.datetime method)": [[32, "arkouda.timeclass.Datetime.isocalendar"]], "max() (arkouda.timeclass._abstractbasetime method)": [[32, "arkouda.timeclass._AbstractBaseTime.max"]], "maxk() (arkouda.timeclass._abstractbasetime method)": [[32, "arkouda.timeclass._AbstractBaseTime.maxk"]], "microsecond (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.microsecond"]], "microseconds (arkouda.timeclass.timedelta property)": [[32, "arkouda.timeclass.Timedelta.microseconds"]], "millisecond (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.millisecond"]], "min() (arkouda.timeclass._abstractbasetime method)": [[32, "arkouda.timeclass._AbstractBaseTime.min"]], "mink() (arkouda.timeclass._abstractbasetime method)": [[32, "arkouda.timeclass._AbstractBaseTime.mink"]], "minute (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.minute"]], "month (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.month"]], "nanosecond (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.nanosecond"]], "nanoseconds (arkouda.timeclass.timedelta property)": [[32, "arkouda.timeclass.Timedelta.nanoseconds"]], "opeq() (arkouda.timeclass._abstractbasetime method)": [[32, "arkouda.timeclass._AbstractBaseTime.opeq"]], "round() (arkouda.timeclass._abstractbasetime method)": [[32, "arkouda.timeclass._AbstractBaseTime.round"]], "second (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.second"]], "seconds (arkouda.timeclass.timedelta property)": [[32, "arkouda.timeclass.Timedelta.seconds"]], "std() (arkouda.timeclass.timedelta method)": [[32, "arkouda.timeclass.Timedelta.std"]], "sum() (arkouda.timeclass.datetime method)": [[32, "arkouda.timeclass.Datetime.sum"]], "sum() (arkouda.timeclass.timedelta method)": [[32, "arkouda.timeclass.Timedelta.sum"]], "supported_opeq (arkouda.timeclass.datetime attribute)": [[32, "arkouda.timeclass.Datetime.supported_opeq"]], "supported_opeq (arkouda.timeclass.timedelta attribute)": [[32, "arkouda.timeclass.Timedelta.supported_opeq"]], "supported_with_datetime (arkouda.timeclass.datetime attribute)": [[32, "arkouda.timeclass.Datetime.supported_with_datetime"]], "supported_with_datetime (arkouda.timeclass.timedelta attribute)": [[32, "arkouda.timeclass.Timedelta.supported_with_datetime"]], "supported_with_pdarray (arkouda.timeclass.datetime attribute)": [[32, "arkouda.timeclass.Datetime.supported_with_pdarray"]], "supported_with_pdarray (arkouda.timeclass.timedelta attribute)": [[32, "arkouda.timeclass.Timedelta.supported_with_pdarray"]], "supported_with_r_datetime (arkouda.timeclass.datetime attribute)": [[32, "arkouda.timeclass.Datetime.supported_with_r_datetime"]], "supported_with_r_datetime (arkouda.timeclass.timedelta attribute)": [[32, "arkouda.timeclass.Timedelta.supported_with_r_datetime"]], "supported_with_r_pdarray (arkouda.timeclass.datetime attribute)": [[32, "arkouda.timeclass.Datetime.supported_with_r_pdarray"]], "supported_with_r_pdarray (arkouda.timeclass.timedelta attribute)": [[32, "arkouda.timeclass.Timedelta.supported_with_r_pdarray"]], "supported_with_r_timedelta (arkouda.timeclass.datetime attribute)": [[32, "arkouda.timeclass.Datetime.supported_with_r_timedelta"]], "supported_with_r_timedelta (arkouda.timeclass.timedelta attribute)": [[32, "arkouda.timeclass.Timedelta.supported_with_r_timedelta"]], "supported_with_timedelta (arkouda.timeclass.datetime attribute)": [[32, "arkouda.timeclass.Datetime.supported_with_timedelta"]], "supported_with_timedelta (arkouda.timeclass.timedelta attribute)": [[32, "arkouda.timeclass.Timedelta.supported_with_timedelta"]], "timedelta_range() (in module arkouda.timeclass)": [[32, "arkouda.timeclass.timedelta_range"]], "to_list() (arkouda.timeclass._abstractbasetime method)": [[32, "arkouda.timeclass._AbstractBaseTime.to_list"]], "to_ndarray() (arkouda.timeclass._abstractbasetime method)": [[32, "arkouda.timeclass._AbstractBaseTime.to_ndarray"]], "to_pandas() (arkouda.timeclass.datetime method)": [[32, "arkouda.timeclass.Datetime.to_pandas"]], "to_pandas() (arkouda.timeclass.timedelta method)": [[32, "arkouda.timeclass.Timedelta.to_pandas"]], "total_seconds() (arkouda.timeclass.timedelta method)": [[32, "arkouda.timeclass.Timedelta.total_seconds"]], "week (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.week"]], "weekday (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.weekday"]], "weekofyear (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.weekofyear"]], "year (arkouda.timeclass.datetime property)": [[32, "arkouda.timeclass.Datetime.year"]], "arkouda.util": [[33, "module-arkouda.util"]], "arkouda_to_numpy() (in module arkouda.util)": [[33, "arkouda.util.arkouda_to_numpy"]], "attach() (in module arkouda.util)": [[33, "arkouda.util.attach"]], "attach_all() (in module arkouda.util)": [[33, "arkouda.util.attach_all"]], "concatenate() (in module arkouda.util)": [[33, "arkouda.util.concatenate"]], "convert_if_categorical() (in module arkouda.util)": [[33, "arkouda.util.convert_if_categorical"]], "enrich_inplace() (in module arkouda.util)": [[33, "arkouda.util.enrich_inplace"]], "expand() (in module arkouda.util)": [[33, "arkouda.util.expand"]], "generic_concat() (in module arkouda.util)": [[33, "arkouda.util.generic_concat"]], "get_callback() (in module arkouda.util)": [[33, "arkouda.util.get_callback"]], "identity() (in module arkouda.util)": [[33, "arkouda.util.identity"]], "invert_permutation() (in module arkouda.util)": [[33, "arkouda.util.invert_permutation"]], "most_common() (in module arkouda.util)": [[33, "arkouda.util.most_common"]], "numpy_to_arkouda() (in module arkouda.util)": [[33, "arkouda.util.numpy_to_arkouda"]], "register() (in module arkouda.util)": [[33, "arkouda.util.register"]], "register_all() (in module arkouda.util)": [[33, "arkouda.util.register_all"]], "report_mem() (in module arkouda.util)": [[33, "arkouda.util.report_mem"]], "unregister_all() (in module arkouda.util)": [[33, "arkouda.util.unregister_all"]], "unregister_by_name() (in module arkouda.util)": [[33, "arkouda.util.unregister_by_name"]], "save() (in module arkouda.pdarray)": [[44, "arkouda.pdarray.save"]], "to_ndarray() (in module arkouda.strings)": [[44, "arkouda.Strings.to_ndarray"], [60, "arkouda.Strings.to_ndarray"]], "to_ndarray() (in module arkouda.pdarray)": [[44, "arkouda.pdarray.to_ndarray"], [55, "arkouda.pdarray.to_ndarray"]], "argsort() (in module arkouda.index)": [[45, "arkouda.Index.argsort"]], "argsort() (in module arkouda.multiindex)": [[45, "arkouda.MultiIndex.argsort"]], "concat() (in module arkouda.index)": [[45, "arkouda.Index.concat"]], "concat() (in module arkouda.multiindex)": [[45, "arkouda.MultiIndex.concat"]], "lookup() (in module arkouda.index)": [[45, "arkouda.Index.lookup"]], "lookup() (in module arkouda.multiindex)": [[45, "arkouda.MultiIndex.lookup"]], "set_dtype() (in module arkouda.index)": [[45, "arkouda.Index.set_dtype"]], "set_dtype() (in module arkouda.multiindex)": [[45, "arkouda.MultiIndex.set_dtype"]], "to_ndarray() (in module arkouda.arrayview)": [[48, "arkouda.ArrayView.to_ndarray"]], "categorical (class in arkouda)": [[49, "arkouda.Categorical"]], "categories (arkouda.categorical attribute)": [[49, "arkouda.Categorical.categories"]], "codes (arkouda.categorical attribute)": [[49, "arkouda.Categorical.codes"]], "contains() (arkouda.categorical method)": [[49, "arkouda.Categorical.contains"]], "endswith() (arkouda.categorical method)": [[49, "arkouda.Categorical.endswith"]], "from_codes() (arkouda.categorical class method)": [[49, "arkouda.Categorical.from_codes"]], "ndim (arkouda.categorical attribute)": [[49, "arkouda.Categorical.ndim"]], "nlevels (arkouda.categorical attribute)": [[49, "arkouda.Categorical.nlevels"]], "permutation (arkouda.categorical attribute)": [[49, "arkouda.Categorical.permutation"]], "segments (arkouda.categorical attribute)": [[49, "arkouda.Categorical.segments"]], "shape (arkouda.categorical attribute)": [[49, "arkouda.Categorical.shape"]], "size (arkouda.categorical attribute)": [[49, "arkouda.Categorical.size"]], "startswith() (arkouda.categorical method)": [[49, "arkouda.Categorical.startswith"]], "to_ndarray() (in module arkouda.categorical)": [[49, "arkouda.Categorical.to_ndarray"]], "apply_permutation() (in module arkouda.dataframe)": [[51, "arkouda.DataFrame.apply_permutation"]], "argsort() (in module arkouda.dataframe)": [[51, "arkouda.DataFrame.argsort"]], "coargsort() (in module arkouda.dataframe)": [[51, "arkouda.DataFrame.coargsort"]], "concat() (in module arkouda.dataframe)": [[51, "arkouda.DataFrame.concat"]], "copy() (in module arkouda.dataframe)": [[51, "arkouda.DataFrame.copy"]], "drop() (in module arkouda.dataframe)": [[51, "arkouda.DataFrame.drop"]], "drop_duplicates() (in module arkouda.dataframe)": [[51, "arkouda.DataFrame.drop_duplicates"]], "groupby() (in module arkouda.dataframe)": [[51, "arkouda.DataFrame.groupby"]], "head() (in module arkouda.dataframe)": [[51, "arkouda.DataFrame.head"]], "rename() (in module arkouda.dataframe)": [[51, "arkouda.DataFrame.rename"]], "reset_index() (in module arkouda.dataframe)": [[51, "arkouda.DataFrame.reset_index"]], "sort_values() (in module arkouda.dataframe)": [[51, "arkouda.DataFrame.sort_values"]], "tail() (in module arkouda.dataframe)": [[51, "arkouda.DataFrame.tail"]], "to_pandas() (in module arkouda.dataframe)": [[51, "arkouda.DataFrame.to_pandas"]], "and() (arkouda.groupby method)": [[52, "arkouda.GroupBy.AND"]], "groupby (class in arkouda)": [[52, "arkouda.GroupBy"]], "or() (arkouda.groupby method)": [[52, "arkouda.GroupBy.OR"]], "xor() (arkouda.groupby method)": [[52, "arkouda.GroupBy.XOR"]], "aggregate() (arkouda.groupby method)": [[52, "arkouda.GroupBy.aggregate"]], "all() (arkouda.groupby method)": [[52, "arkouda.GroupBy.all"]], "any() (arkouda.groupby method)": [[52, "arkouda.GroupBy.any"]], "argmax() (arkouda.groupby method)": [[52, "arkouda.GroupBy.argmax"]], "argmin() (arkouda.groupby method)": [[52, "arkouda.GroupBy.argmin"]], "attach() (arkouda.groupby static method)": [[52, "arkouda.GroupBy.attach"]], "broadcast() (arkouda.groupby method)": [[52, "arkouda.GroupBy.broadcast"]], "build_from_components() (arkouda.groupby static method)": [[52, "arkouda.GroupBy.build_from_components"]], "count() (arkouda.groupby method)": [[52, "arkouda.GroupBy.count"]], "first() (arkouda.groupby method)": [[52, "arkouda.GroupBy.first"]], "is_registered() (arkouda.groupby method)": [[52, "arkouda.GroupBy.is_registered"]], "logger (arkouda.groupby attribute)": [[52, "arkouda.GroupBy.logger"]], "max() (arkouda.groupby method)": [[52, "arkouda.GroupBy.max"]], "mean() (arkouda.groupby method)": [[52, "arkouda.GroupBy.mean"]], "median() (arkouda.groupby method)": [[52, "arkouda.GroupBy.median"]], "min() (arkouda.groupby method)": [[52, "arkouda.GroupBy.min"]], "mode() (arkouda.groupby method)": [[52, "arkouda.GroupBy.mode"]], "most_common() (arkouda.groupby method)": [[52, "arkouda.GroupBy.most_common"]], "ngroups (arkouda.groupby attribute)": [[52, "arkouda.GroupBy.ngroups"]], "nkeys (arkouda.groupby attribute)": [[52, "arkouda.GroupBy.nkeys"]], "nunique() (arkouda.groupby method)": [[52, "arkouda.GroupBy.nunique"]], "permutation (arkouda.groupby attribute)": [[52, "arkouda.GroupBy.permutation"]], "prod() (arkouda.groupby method)": [[52, "arkouda.GroupBy.prod"]], "register() (arkouda.groupby method)": [[52, "arkouda.GroupBy.register"]], "segments (arkouda.groupby attribute)": [[52, "arkouda.GroupBy.segments"]], "size (arkouda.groupby attribute)": [[52, "arkouda.GroupBy.size"]], "size() (arkouda.groupby method)": [[52, "id0"]], "std() (arkouda.groupby method)": [[52, "arkouda.GroupBy.std"]], "sum() (arkouda.groupby method)": [[52, "arkouda.GroupBy.sum"]], "unique() (arkouda.groupby method)": [[52, "arkouda.GroupBy.unique"]], "unique_keys (arkouda.groupby attribute)": [[52, "arkouda.GroupBy.unique_keys"]], "unregister() (arkouda.groupby method)": [[52, "arkouda.GroupBy.unregister"]], "unregister_groupby_by_name() (arkouda.groupby static method)": [[52, "arkouda.GroupBy.unregister_groupby_by_name"]], "var() (arkouda.groupby method)": [[52, "arkouda.GroupBy.var"]], "append() (in module arkouda.segarray)": [[56, "arkouda.SegArray.append"]], "append_single() (in module arkouda.segarray)": [[56, "arkouda.SegArray.append_single"]], "get_jth() (in module arkouda.segarray)": [[56, "arkouda.SegArray.get_jth"]], "get_length_n() (in module arkouda.segarray)": [[56, "arkouda.SegArray.get_length_n"]], "get_ngrams() (in module arkouda.segarray)": [[56, "arkouda.SegArray.get_ngrams"]], "get_prefixes() (in module arkouda.segarray)": [[56, "arkouda.SegArray.get_prefixes"]], "get_suffixes() (in module arkouda.segarray)": [[56, "arkouda.SegArray.get_suffixes"]], "intersect() (in module arkouda.segarray)": [[56, "arkouda.SegArray.intersect"]], "prepend_single() (in module arkouda.segarray)": [[56, "arkouda.SegArray.prepend_single"]], "remove_repeats() (in module arkouda.segarray)": [[56, "arkouda.SegArray.remove_repeats"]], "set_jth() (in module arkouda.segarray)": [[56, "arkouda.SegArray.set_jth"]], "setdiff() (in module arkouda.segarray)": [[56, "arkouda.SegArray.setdiff"]], "setxor() (in module arkouda.segarray)": [[56, "arkouda.SegArray.setxor"]], "to_ndarray() (in module arkouda.segarray)": [[56, "arkouda.SegArray.to_ndarray"]], "union() (in module arkouda.segarray)": [[56, "arkouda.SegArray.union"]], "head() (in module arkouda.series)": [[57, "arkouda.Series.head"]], "locate() (in module arkouda.series)": [[57, "arkouda.Series.locate"], [57, "id0"]], "pdconcat() (in module arkouda.series)": [[57, "arkouda.Series.pdconcat"]], "sort_index() (in module arkouda.series)": [[57, "arkouda.Series.sort_index"]], "sort_values() (in module arkouda.series)": [[57, "arkouda.Series.sort_values"]], "tail() (in module arkouda.series)": [[57, "arkouda.Series.tail"]], "to_pandas() (in module arkouda.series)": [[57, "arkouda.Series.to_pandas"]], "topn() (in module arkouda.series)": [[57, "arkouda.Series.topn"]], "value_counts() (in module arkouda.series)": [[57, "arkouda.Series.value_counts"]], "unique() (in module arkouda)": [[58, "arkouda.unique"]], "connect() (in module arkouda)": [[59, "arkouda.connect"]]}})