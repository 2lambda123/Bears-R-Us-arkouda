Search.setIndex({"docnames": ["CONTRIBUTING_LINK", "ENVIRONMENT", "autoapi/arkouda/accessor/index", "autoapi/arkouda/alignment/index", "autoapi/arkouda/array_view/index", "autoapi/arkouda/categorical/index", "autoapi/arkouda/client/index", "autoapi/arkouda/client_dtypes/index", "autoapi/arkouda/dataframe/index", "autoapi/arkouda/dtypes/index", "autoapi/arkouda/groupbyclass/index", "autoapi/arkouda/index", "autoapi/arkouda/index/index", "autoapi/arkouda/infoclass/index", "autoapi/arkouda/io/index", "autoapi/arkouda/io_util/index", "autoapi/arkouda/join/index", "autoapi/arkouda/logger/index", "autoapi/arkouda/match/index", "autoapi/arkouda/matcher/index", "autoapi/arkouda/numeric/index", "autoapi/arkouda/pdarrayclass/index", "autoapi/arkouda/pdarraycreation/index", "autoapi/arkouda/pdarraysetops/index", "autoapi/arkouda/plotting/index", "autoapi/arkouda/row/index", "autoapi/arkouda/security/index", "autoapi/arkouda/segarray/index", "autoapi/arkouda/series/index", "autoapi/arkouda/sorting/index", "autoapi/arkouda/strings/index", "autoapi/arkouda/timeclass/index", "autoapi/arkouda/util/index", "autoapi/index", "developer/GASNET", "developer/MEMORY", "developer/RELEASE_PROCESS", "developer/TIPS", "developer/USER_BUGS", "developer/dev_menu", "examples", "file_io/CSV", "file_io/HDF5", "file_io/IMPORT_EXPORT", "file_io/PARQUET", "file_io/io_menu", "index", "quickstart", "server/index", "setup/BUILD", "setup/LINUX_INSTALL", "setup/MAC_INSTALL", "setup/MODULAR", "setup/REQUIREMENTS", "setup/WINDOWS_INSTALL", "setup/install_menu", "setup/testing", "usage", "usage/IO", "usage/Index", "usage/argsort", "usage/arithmetic", "usage/arrayview", "usage/categorical", "usage/creation", "usage/dataframe", "usage/groupby", "usage/histogram", "usage/indexing", "usage/pdarray", "usage/segarray", "usage/series", "usage/setops", "usage/startup", "usage/strings"], "filenames": ["CONTRIBUTING_LINK.md", "ENVIRONMENT.md", "autoapi/arkouda/accessor/index.rst", "autoapi/arkouda/alignment/index.rst", "autoapi/arkouda/array_view/index.rst", "autoapi/arkouda/categorical/index.rst", "autoapi/arkouda/client/index.rst", "autoapi/arkouda/client_dtypes/index.rst", "autoapi/arkouda/dataframe/index.rst", "autoapi/arkouda/dtypes/index.rst", "autoapi/arkouda/groupbyclass/index.rst", "autoapi/arkouda/index.rst", "autoapi/arkouda/index/index.rst", "autoapi/arkouda/infoclass/index.rst", "autoapi/arkouda/io/index.rst", "autoapi/arkouda/io_util/index.rst", "autoapi/arkouda/join/index.rst", "autoapi/arkouda/logger/index.rst", "autoapi/arkouda/match/index.rst", "autoapi/arkouda/matcher/index.rst", "autoapi/arkouda/numeric/index.rst", "autoapi/arkouda/pdarrayclass/index.rst", "autoapi/arkouda/pdarraycreation/index.rst", "autoapi/arkouda/pdarraysetops/index.rst", "autoapi/arkouda/plotting/index.rst", "autoapi/arkouda/row/index.rst", "autoapi/arkouda/security/index.rst", "autoapi/arkouda/segarray/index.rst", "autoapi/arkouda/series/index.rst", "autoapi/arkouda/sorting/index.rst", "autoapi/arkouda/strings/index.rst", "autoapi/arkouda/timeclass/index.rst", "autoapi/arkouda/util/index.rst", "autoapi/index.rst", "developer/GASNET.md", "developer/MEMORY.md", "developer/RELEASE_PROCESS.md", "developer/TIPS.md", "developer/USER_BUGS.md", "developer/dev_menu.rst", "examples.rst", "file_io/CSV.md", "file_io/HDF5.md", "file_io/IMPORT_EXPORT.md", "file_io/PARQUET.md", "file_io/io_menu.rst", "index.rst", "quickstart.rst", "server/index.rst", "setup/BUILD.md", "setup/LINUX_INSTALL.md", "setup/MAC_INSTALL.md", "setup/MODULAR.md", "setup/REQUIREMENTS.md", "setup/WINDOWS_INSTALL.md", "setup/install_menu.rst", "setup/testing.rst", "usage.rst", "usage/IO.rst", "usage/Index.rst", "usage/argsort.rst", "usage/arithmetic.rst", "usage/arrayview.rst", "usage/categorical.rst", "usage/creation.rst", "usage/dataframe.rst", "usage/groupby.rst", "usage/histogram.rst", "usage/indexing.rst", "usage/pdarray.rst", "usage/segarray.rst", "usage/series.rst", "usage/setops.rst", "usage/startup.rst", "usage/strings.rst"], "titles": ["Contributing", "Environment Variables", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.accessor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.alignment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.array_view</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.categorical</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.client</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.client_dtypes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.dataframe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.dtypes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.groupbyclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.index</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.infoclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.io</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.io_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.join</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.match</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.matcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.numeric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.pdarrayclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.pdarraycreation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.pdarraysetops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.plotting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.row</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.security</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.segarray</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.series</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.sorting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.strings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.timeclass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">arkouda.util</span></code>", "API Reference", "GASNet Development", "Reducing Memory Usage of Arkouda Builds", "Release Process", "Speeding up Arkouda Compilation", "Tips for Reproducing User Bugs", "Developer Documentation", "Examples", "CSV", "HDF5", "Import/Export", "Parquet", "File I/O", "Arkouda Documentation", "Quickstart", "Chapel API Reference", "Building the Server", "Linux", "MacOS", "Modular Server Builds", "Requirements", "Windows (WSL2)", "Installation", "Performance Testing", "Usage Guide", "Data I/O", "Indexs in Arkouda", "Sorting", "Arithmetic and Numeric Operations", "ArrayView in Arkouda", "Categoricals", "Creating Arrays", "DataFrames in Arkouda", "GroupBy", "Summarizing Data", "Indexing and Assignment", "The <code class=\"docutils literal notranslate\"><span class=\"pre\">pdarray</span></code> class", "SegArrays in Arkouda", "Series in Arkouda", "Array Set Operations", "Startup", "Strings in Arkouda"], "terms": {"i": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 47, 49, 50, 51, 52, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73], "an": [0, 1, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 32, 34, 36, 37, 38, 40, 41, 42, 43, 44, 47, 49, 54, 56, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74], "open": [0, 3, 8, 11, 12, 14, 15, 21, 30, 31, 54], "sourc": [0, 1, 34, 42, 47, 49, 50], "project": [0, 36, 49], "we": [0, 1, 8, 11, 12, 14, 21, 27, 30, 32, 34, 36, 38, 40, 41, 44, 49, 51, 53, 54, 67, 69], "love": 0, "see": [0, 1, 3, 10, 11, 20, 21, 24, 28, 30, 31, 36, 37, 38, 47, 49, 52, 58, 61, 63, 66, 67, 69, 70, 71, 72, 74], "new": [0, 5, 8, 10, 11, 12, 14, 15, 17, 18, 19, 20, 21, 24, 27, 28, 30, 36, 37, 38, 53, 65, 66, 69, 70, 71, 74], "contributor": 0, "welcom": 0, "via": [0, 1, 5, 8, 10, 11, 21, 22, 30, 49, 50, 51, 58, 63, 66, 68, 69, 74], "most": [0, 1, 7, 10, 11, 19, 28, 30, 35, 36, 40, 42, 47, 49, 54, 58, 64, 66, 69, 71, 74], "fall": 0, "under": [0, 2, 4, 5, 8, 10, 11, 12, 14, 21, 22, 27, 30, 36, 58, 62, 63, 66, 69, 74], "broad": 0, "categori": [0, 5, 11, 29, 36, 57, 60, 63], "If": [0, 1, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 34, 35, 36, 37, 41, 42, 44, 47, 49, 50, 51, 52, 54, 55, 58, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74], "your": [0, 1, 8, 11, 12, 14, 21, 30, 34, 35, 36, 38, 47, 49, 51, 52, 53, 54, 55, 65, 73, 74], "doesn": [0, 36], "t": [0, 11, 30, 31, 36, 37, 38, 54, 56, 74], "fit": [0, 36, 58], "either": [0, 5, 8, 10, 11, 13, 14, 20, 21, 22, 23, 27, 28, 52, 54, 58, 70, 71, 72], "pleas": [0, 5, 8, 10, 11, 12, 14, 21, 30, 31, 34, 36, 37, 40, 42, 44, 45, 49, 51, 52, 53, 63, 65, 66], "add": [0, 1, 4, 8, 11, 14, 27, 28, 36, 49, 50, 51, 52, 54, 65], "anywai": [0, 64], "provid": [0, 5, 8, 10, 11, 12, 14, 21, 27, 30, 35, 40, 41, 42, 44, 45, 49, 50, 51, 53, 58, 61, 65, 66, 70], "much": [0, 3, 4, 5, 11, 21, 30, 35, 40, 42, 58, 62, 63, 69, 74], "detail": [0, 5, 11, 21, 36, 49, 50, 51, 53, 67, 73, 74], "possibl": [0, 8, 11, 14, 20, 27, 30, 31, 36, 40, 49, 54, 58, 70, 74], "It": [0, 7, 8, 11, 26, 32, 34, 35, 38, 40, 41, 42, 44, 47, 49, 50, 51, 54, 65, 66, 70], "alwai": [0, 10, 11, 14, 21, 31, 41, 49, 58, 61, 63, 65, 66, 67, 69, 74], "good": [0, 36, 38], "idea": [0, 36, 38, 41, 58], "current": [0, 4, 5, 6, 8, 11, 12, 14, 20, 21, 22, 26, 27, 30, 35, 36, 37, 41, 42, 43, 44, 49, 51, 55, 58, 59, 61, 63, 64, 65, 67, 69, 70, 73, 74], "list": [0, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 21, 22, 23, 27, 28, 30, 31, 34, 36, 37, 38, 40, 41, 45, 47, 49, 51, 52, 55, 58, 59, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74], "make": [0, 1, 5, 7, 8, 11, 20, 31, 34, 35, 36, 38, 47, 49, 50, 51, 52, 54, 63, 65], "sure": [0, 8, 11, 12, 14, 21, 30, 36, 51, 54], "alreadi": [0, 1, 5, 8, 10, 11, 12, 14, 21, 27, 30, 37, 41, 42, 44, 63, 66, 72], "present": [0, 3, 5, 7, 8, 11, 12, 14, 20, 21, 23, 27, 30, 40, 58, 67, 72], "us": [0, 1, 3, 5, 6, 7, 8, 10, 11, 12, 14, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 39, 41, 42, 43, 44, 50, 51, 54, 55, 56, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74], "github": [0, 36, 38, 49, 50, 55], "markdown": 0, "especi": [0, 5, 8, 11, 38, 63], "block": [0, 5, 11, 23, 30, 40, 64], "veri": [0, 8, 11, 40, 64, 65], "appreci": 0, "when": [0, 1, 3, 5, 7, 8, 10, 11, 12, 14, 20, 21, 23, 27, 30, 36, 37, 38, 40, 42, 44, 49, 51, 52, 53, 54, 58, 61, 63, 65, 66, 69, 70, 72], "includ": [0, 1, 3, 8, 11, 12, 14, 20, 21, 30, 31, 36, 41, 42, 47, 49, 50, 51, 52, 58, 61, 69, 70], "follow": [0, 1, 3, 6, 11, 20, 34, 36, 47, 49, 50, 51, 52, 53, 54, 55, 61, 63, 66, 69, 70, 72, 73, 74], "inform": [0, 1, 5, 6, 10, 11, 13, 21, 30, 36, 37, 38, 40, 41, 42, 44, 45, 47, 49, 51, 52, 63, 70, 72, 74], "summari": [0, 8, 11], "problem": [0, 56], "what": [0, 9, 11, 27, 36, 37, 38, 50, 52, 73], "behavior": [0, 8, 11, 21, 22, 61, 62, 64, 65, 74], "did": [0, 6], "you": [0, 1, 5, 8, 10, 11, 12, 14, 21, 30, 34, 36, 37, 38, 39, 40, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 65, 66, 68], "observ": [0, 11, 21, 61], "encount": [0, 11, 14], "expect": [0, 4, 8, 10, 11, 12, 14, 21, 30, 42, 58, 62, 66, 69], "thi": [0, 1, 4, 5, 6, 7, 8, 10, 11, 12, 14, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 47, 49, 51, 52, 54, 55, 58, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74], "known": [0, 11, 20, 32], "work": [0, 5, 8, 11, 14, 21, 23, 25, 30, 37, 40, 42, 44, 49, 52, 58, 63, 65, 68, 72, 74], "around": [0, 7, 11, 36, 38], "step": [0, 10, 11, 34, 35, 38, 49, 50, 52, 55, 72, 73], "reproduc": [0, 39], "simplifi": 0, "program": [0, 5, 8, 10, 11, 21, 30, 47, 66, 73], "demonstr": 0, "configur": [0, 1, 11, 27, 40, 47, 51, 54, 59, 65, 71], "": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 26, 27, 28, 30, 31, 32, 35, 36, 40, 49, 54, 55, 56, 58, 61, 62, 63, 65, 66, 67, 69, 70, 71, 73, 74], "output": [0, 1, 5, 7, 10, 11, 12, 14, 20, 21, 27, 30, 36, 40, 44, 47, 58, 61, 67, 69, 72, 73], "ak": [0, 1, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 18, 20, 21, 22, 23, 24, 27, 29, 30, 31, 32, 37, 38, 40, 41, 47, 49, 52, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74], "get_config": [0, 6], "like": [0, 2, 3, 7, 8, 10, 11, 21, 31, 34, 36, 37, 38, 40, 43, 47, 52, 58, 59, 65, 66, 68, 71, 73, 74], "arkoudavers": 0, "version": [0, 5, 11, 32, 36, 42, 47, 49, 50, 51, 53, 54], "server": [0, 1, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 18, 21, 22, 26, 27, 28, 30, 32, 35, 37, 38, 51, 54, 56, 57, 61, 62, 63, 64, 65, 66, 67, 69, 70, 74], "wa": [0, 5, 8, 10, 11, 14, 20, 21, 27, 28, 30, 37, 42, 43, 49, 51, 58, 66, 69, 70], "built": [0, 4, 5, 11, 21, 30, 34, 36, 37, 38, 47, 49, 51, 52, 58, 62, 63, 69, 74], "Be": [0, 8, 11, 12, 14, 21, 30], "specif": [0, 8, 11, 14, 38, 41, 42, 43, 50, 52, 57, 58, 65], "exampl": [0, 3, 4, 5, 8, 10, 11, 14, 18, 20, 21, 22, 23, 24, 27, 29, 30, 31, 36, 42, 47, 49, 51, 52, 54, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 72, 73, 74], "appropri": [0, 8, 11, 14, 36, 43, 47, 49, 51, 53, 58], "base": [0, 1, 2, 3, 4, 5, 7, 8, 11, 12, 14, 20, 21, 25, 29, 31, 32, 36, 49, 51, 55, 57, 58, 59, 60, 61, 62, 63, 65, 69, 71, 74], "anoth": [0, 8, 10, 11, 14, 20, 30, 42, 47, 51, 54, 58, 65, 66, 68, 69, 70, 74], "librari": [0, 1, 54, 74], "e": [0, 1, 2, 3, 7, 10, 11, 20, 21, 22, 27, 30, 31, 36, 37, 38, 50, 51, 53, 58, 61, 63, 64, 66, 70, 73, 74], "numpi": [0, 4, 5, 7, 8, 9, 10, 11, 16, 20, 21, 22, 27, 30, 31, 40, 53, 56, 58, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 74], "panda": [0, 8, 10, 11, 12, 14, 22, 28, 31, 43, 45, 53, 58, 59, 63, 65, 66], "scipi": 0, "link": [0, 1, 31, 36, 49], "support": [0, 5, 7, 8, 9, 10, 11, 12, 14, 15, 20, 21, 22, 23, 26, 27, 30, 32, 40, 43, 47, 49, 50, 51, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74], "document": [0, 1, 33, 37, 38, 40, 45, 51, 52], "refer": [0, 10, 11, 37, 40, 49, 51, 66], "don": [0, 11, 30, 37, 38, 54], "have": [0, 1, 3, 5, 8, 10, 11, 12, 14, 20, 21, 22, 23, 24, 27, 28, 30, 31, 35, 36, 37, 38, 40, 41, 42, 44, 49, 50, 51, 52, 53, 58, 61, 63, 64, 65, 66, 69, 70, 71], "anyth": [0, 11, 21, 36], "mind": [0, 40, 54], "check": [0, 1, 3, 5, 8, 10, 11, 27, 28, 30, 36, 37, 38, 56, 63, 72, 73, 74], "out": [0, 6, 8, 11, 20, 27, 37, 38, 41, 42, 44, 49, 52, 67, 68, 70], "our": [0, 11, 21, 35, 36, 40, 42, 47, 49, 54, 55, 58], "outstand": 0, "filter": [0, 8, 11, 58], "label": [0, 5, 8, 10, 11, 12, 24, 28, 63, 65, 66, 71], "first": [0, 3, 8, 10, 11, 14, 15, 20, 21, 22, 28, 30, 34, 38, 40, 41, 42, 47, 49, 50, 52, 57, 58, 61, 64, 65, 66, 67, 71, 74], "identifi": [0, 3, 5, 11, 21, 32, 69], "befor": [0, 31, 49, 58], "start": [0, 3, 5, 10, 11, 12, 16, 18, 21, 22, 27, 29, 30, 31, 42, 57, 60, 63, 64, 66, 68, 70, 74], "onc": [0, 8, 11, 14, 21, 27, 30, 34, 35, 36, 38, 40, 41, 44, 49, 51, 54], "find": [0, 3, 5, 8, 10, 11, 19, 21, 23, 26, 28, 30, 32, 36, 39, 61, 66, 67, 72, 74], "creat": [0, 5, 7, 8, 10, 11, 12, 14, 15, 19, 21, 22, 27, 28, 30, 31, 33, 36, 38, 42, 44, 47, 50, 51, 52, 53, 54, 57, 58, 62, 63, 65, 66, 67, 69], "intend": [0, 7, 11, 20, 41, 47, 59, 65, 71], "leav": [0, 11, 20, 67], "comment": [0, 37, 52], "indic": [0, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 16, 18, 20, 21, 27, 28, 29, 30, 32, 40, 42, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 74], "mention": [0, 38], "bear": [0, 36], "r": [0, 8, 11, 36, 40, 56], "u": [0, 7, 11, 22, 31, 36, 58], "dev": [0, 50, 51, 53], "awar": 0, "assign": [0, 5, 8, 10, 11, 41, 42, 57, 63, 66, 70, 74], "avoid": [0, 35, 38], "anyon": 0, "duplic": [0, 8, 11, 65], "need": [0, 8, 11, 14, 27, 28, 30, 36, 37, 38, 41, 49, 50, 51, 52, 54, 58, 65, 71], "assist": [0, 52], "want": [0, 1, 8, 11, 47, 53, 65], "discuss": 0, "design": [0, 36, 58], "someon": [0, 36], "tag": [0, 36, 38], "reach": 0, "git": [0, 38, 50], "fork": [0, 49, 55], "workflow": [0, 11, 14, 36, 52, 58], "recommend": [0, 11, 20, 34, 38, 44, 50, 53, 54, 55, 65, 70], "simpl": [0, 40, 52, 67], "branch": [0, 36, 49], "own": [0, 1, 31, 70, 74], "standard": [0, 5, 10, 11, 21, 22, 31, 34, 61, 66, 67], "laid": 0, "pep8": 0, "continu": [0, 36], "integr": [0, 10, 11, 21, 22, 36, 58, 64, 66], "ha": [0, 5, 8, 10, 11, 14, 20, 21, 22, 23, 27, 28, 30, 31, 34, 36, 37, 41, 52, 54, 58, 61, 63, 64, 65, 66, 68, 69, 70, 71], "linter": 0, "flake8": [0, 53], "verifi": [0, 1, 8, 11, 43, 58, 65], "all": [0, 3, 5, 6, 8, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 36, 37, 38, 41, 42, 44, 47, 50, 51, 52, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 74], "meet": 0, "requir": [0, 3, 6, 10, 11, 12, 14, 16, 21, 22, 34, 35, 37, 38, 42, 43, 44, 47, 50, 51, 52, 58, 64, 65, 66], "isort": 0, "black": 0, "typic": [0, 7, 11, 37, 38, 63], "order": [0, 4, 5, 7, 8, 10, 11, 14, 20, 21, 22, 23, 27, 28, 29, 30, 32, 34, 42, 44, 49, 57, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 74], "ensur": [0, 8, 11, 20, 36, 42, 49, 51, 65, 69], "consist": [0, 8, 11, 20, 40, 61, 65], "util": [0, 8, 11, 14, 33, 36, 49, 50, 51], "line": [0, 11, 15, 37, 41, 47, 49, 52, 62, 73], "length": [0, 3, 5, 10, 11, 14, 16, 18, 22, 23, 26, 27, 28, 30, 42, 56, 61, 64, 66, 70, 71, 72, 74], "105": 0, "paramet": [0, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 51, 58, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74], "example_featur": 0, "py": [0, 1, 37, 49, 52, 53, 56], "fix": [0, 11, 20, 31, 36, 54, 74], "reformat": [0, 58], "done": [0, 8, 11, 27, 38, 49, 52, 65], "1": [0, 1, 3, 4, 5, 8, 10, 11, 14, 18, 20, 21, 22, 23, 27, 28, 29, 30, 33, 34, 36, 37, 40, 41, 42, 45, 47, 49, 50, 51, 52, 53, 54, 56, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74], "file": [0, 1, 4, 5, 8, 11, 12, 14, 15, 21, 26, 27, 30, 34, 37, 38, 43, 44, 47, 49, 50, 51, 53, 54, 74], "For": [0, 2, 3, 10, 11, 14, 18, 22, 29, 30, 31, 37, 40, 45, 47, 49, 50, 51, 52, 55, 58, 60, 64, 66, 67, 68, 69, 70, 72, 74], "user": [0, 1, 4, 5, 7, 8, 10, 11, 12, 14, 20, 21, 22, 24, 26, 27, 28, 30, 32, 36, 39, 40, 42, 43, 45, 47, 49, 50, 51, 52, 53, 54, 55, 58, 62, 63, 66, 69, 74], "pycharm": 0, "nice": [0, 50, 51], "interoper": 0, "tool": [0, 50, 51], "style": [0, 5, 8, 10, 11, 21, 30, 65, 66, 69], "doc": [0, 49, 50, 62], "string": [0, 1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 31, 32, 33, 36, 52, 57, 58, 59, 60, 63, 64, 65, 66, 67, 69, 70, 71, 72], "look": [0, 1, 36, 37, 40, 52, 58, 73], "similar": [0, 11, 14, 30, 40, 58, 69, 70, 74], "surround": 0, "function": [0, 1, 5, 28, 30, 36, 37, 40, 41, 43, 44, 47, 52, 57, 58, 59, 62, 63, 65, 66, 67, 69, 70, 71, 72, 74], "space": [0, 1, 3, 11, 20, 22, 31, 49, 52, 64, 67, 74], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 34, 36, 40, 41, 42, 43, 47, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74], "ci": 0, "fail": [0, 8, 11, 14, 20, 36, 58, 65, 69], "tab": [0, 36, 49], "ar": [0, 1, 3, 5, 7, 8, 10, 11, 12, 14, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 40, 41, 42, 44, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74], "lowercamelcas": 0, "variabl": [0, 10, 11, 14, 16, 21, 26, 27, 30, 34, 50, 51, 52, 61, 66, 70, 74], "name": [0, 1, 2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 21, 22, 27, 28, 30, 31, 32, 34, 36, 40, 41, 42, 44, 49, 51, 52, 53, 57, 58, 59, 63, 64, 65, 66, 71], "procedur": 0, "var": [0, 1, 10, 11, 21, 57, 61, 66, 67], "ax": 0, "0": [0, 3, 4, 5, 6, 8, 10, 11, 12, 14, 16, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 34, 40, 41, 42, 47, 49, 50, 51, 53, 54, 56, 58, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74], "real": [0, 11, 22, 36, 42], "proc": 0, "printit": 0, "x": [0, 7, 8, 9, 10, 11, 14, 21, 24, 27, 30, 32, 40, 54, 58, 61, 62, 63, 65, 66, 69, 70, 74], "writeln": 0, "uppercamelcas": 0, "class": [0, 22, 57, 58, 59, 62, 63, 65, 66, 70, 71, 74], "foo": [0, 2, 11], "foopar": 0, "re": [0, 5, 6, 8, 10, 11, 50, 66, 73, 74], "confirm": [0, 36], "again": [0, 38, 40, 41, 49, 50], "realli": [0, 11, 30], "behav": [0, 4, 11, 62], "properli": [0, 37, 42], "thing": [0, 40], "note": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 34, 38, 40, 42, 44, 49, 51, 52, 54, 58, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74], "test_": 0, "begin": [0, 11, 30, 68, 74], "otherwis": [0, 4, 5, 8, 9, 10, 11, 12, 14, 18, 20, 21, 22, 23, 27, 28, 30, 32, 55, 58, 62, 63, 65, 66, 69, 70, 72, 74], "pytest": [0, 53], "ini": 0, "so": [0, 1, 5, 8, 10, 11, 14, 21, 28, 30, 35, 36, 37, 38, 50, 52, 53, 54, 58, 61, 62, 65, 66, 71, 72], "dure": [0, 1, 11, 14, 38, 40, 42, 43, 52, 53], "wiki": 0, "more": [0, 1, 3, 4, 5, 8, 11, 12, 14, 20, 21, 30, 31, 34, 36, 37, 38, 40, 42, 44, 45, 47, 49, 51, 58, 62, 63, 65, 69, 70, 74], "info": [0, 1, 5, 8, 11, 13, 17, 21, 30], "how": [0, 7, 11, 20, 36, 41, 53, 62, 66, 69], "http": [0, 49, 50, 62], "com": [0, 49, 50], "unit": [0, 1, 6, 8, 11, 31], "categoricaltest": 0, "v": [0, 11, 27, 36, 49, 56, 70], "print": [0, 1, 5, 6, 8, 11, 13, 21, 25, 30, 54, 73], "m": [0, 11, 18, 27, 31, 49, 54, 74], "categorical_test": 0, "singl": [0, 2, 3, 4, 5, 7, 8, 10, 11, 12, 14, 16, 20, 21, 23, 27, 30, 37, 38, 40, 42, 49, 52, 56, 58, 64, 65, 66, 68, 70, 72], "from": [0, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 18, 20, 21, 22, 24, 27, 30, 34, 36, 37, 38, 40, 41, 42, 47, 49, 52, 54, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74], "foo_test": 0, "server_util": [0, 1], "parallel_start_test": 0, "d": [0, 5, 11, 22, 23, 27, 30, 31, 40, 56, 70, 72, 74], "post": [0, 36], "local": [0, 1, 4, 5, 6, 8, 11, 12, 14, 21, 27, 28, 30, 31, 34, 42, 47, 49, 50, 58, 64, 71, 73], "catch": 0, "common": [0, 3, 10, 11, 23, 54, 58, 66, 72, 74], "failur": [0, 11, 14, 49, 58], "earli": 0, "usual": [0, 10, 11, 66], "mypi": [0, 53], "everi": [0, 1, 8, 11, 65, 74], "should": [0, 1, 5, 8, 9, 10, 11, 14, 20, 21, 22, 28, 30, 32, 36, 37, 38, 40, 41, 42, 43, 47, 49, 53, 58, 65, 66, 69, 73], "least": [0, 7, 8, 11, 27, 29, 30, 60, 70], "one": [0, 1, 2, 3, 5, 8, 9, 10, 11, 12, 14, 15, 20, 21, 22, 23, 27, 30, 36, 38, 40, 41, 42, 44, 47, 51, 52, 53, 54, 58, 61, 63, 64, 65, 66, 70, 72, 74], "associ": [0, 1, 11, 28, 36, 58, 70, 71], "number": [0, 1, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 16, 19, 20, 21, 22, 27, 28, 30, 31, 34, 36, 37, 38, 40, 42, 49, 52, 54, 56, 58, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74], "titl": [0, 11, 30, 36], "bodi": 0, "close": [0, 3, 11, 22, 31, 40, 64], "keyword": [0, 5, 11, 27, 28, 64, 71], "doubt": [0, 36], "take": [0, 7, 10, 11, 21, 34, 35, 37, 38, 40, 43, 58, 66], "some": [0, 5, 8, 11, 34, 40, 44, 49, 63, 65, 70, 74], "99999": 0, "pr": [0, 36], "implement": [0, 5, 8, 11, 20, 21, 23, 26, 30, 41, 47, 61, 64, 65, 74], "arg": [0, 3, 11, 22, 27, 31, 52, 64, 66], "super": 0, "cool": 0, "help": [0, 7, 11, 52], "keep": [0, 3, 8, 11, 40, 51, 54, 58, 65], "part": [0, 11, 27, 30, 32, 54, 74], "those": [0, 11, 29, 40, 50, 52, 60, 68], "As": [0, 11, 20, 21, 28, 36, 41, 43, 50, 51, 58, 61, 69, 71, 74], "person": 0, "who": 0, "left": [0, 3, 7, 11, 20, 21, 29, 30, 31, 60, 67, 74], "feedback": 0, "resolv": [0, 35, 54], "convers": [0, 5, 11, 58, 63, 69, 74], "decid": 0, "author": 0, "address": [0, 6, 7, 11, 73], "try": [0, 9, 11, 12, 14, 21, 32, 54], "feel": 0, "readi": [0, 34, 36, 51], "necessari": [0, 36, 54], "track": [0, 37, 44], "ani": [0, 3, 4, 5, 8, 10, 11, 12, 14, 15, 20, 21, 22, 27, 30, 36, 38, 42, 44, 49, 57, 61, 65, 66, 67, 69, 70, 74], "which": [0, 3, 4, 5, 7, 8, 10, 11, 14, 20, 21, 22, 23, 27, 28, 29, 30, 31, 35, 36, 38, 40, 49, 51, 52, 56, 58, 60, 61, 62, 63, 64, 65, 66, 69, 70, 72, 73, 74], "outsid": [0, 41, 52], "scope": [0, 52], "member": 0, "quit": [0, 47], "bit": [0, 5, 7, 11, 20, 21, 22, 30, 37, 58, 62, 65, 69], "experi": [0, 58], "unsur": 0, "ask": 0, "2": [0, 3, 4, 5, 8, 10, 11, 14, 18, 20, 21, 22, 23, 27, 28, 29, 30, 34, 36, 40, 41, 42, 49, 50, 51, 52, 53, 54, 58, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74], "concurr": [0, 58], "approv": 0, "limit": [0, 4, 5, 11, 16, 21, 22, 30, 31, 41, 44, 47, 58, 62, 63, 65, 69, 74], "except": [0, 3, 8, 11, 21, 40, 50, 65, 74], "after": [0, 5, 8, 11, 30, 36, 38, 49, 65, 74], "pass": [0, 1, 3, 7, 8, 10, 11, 14, 28, 32, 36, 58, 65, 66, 71], "conflict": 0, "ideal": [0, 36], "rebas": 0, "master": [0, 36, 49], "prefer": [0, 51, 53, 55], "wrote": 0, "best": [0, 3, 11], "practic": [0, 10, 11, 21, 52, 61, 66], "els": [0, 36], "To": [0, 1, 8, 10, 11, 20, 31, 34, 38, 41, 47, 49, 52, 62, 63, 65, 67, 69, 74], "commit": [0, 36], "histori": [0, 36], "allow": [0, 7, 8, 11, 14, 22, 27, 30, 34, 40, 42, 43, 45, 52, 54, 58, 70], "easi": [0, 36, 40, 49], "manipul": 0, "squash": 0, "web": [0, 36], "interfac": [0, 36], "pierce314159": 0, "ethan": 0, "debandi99": 0, "consensu": [0, 36], "There": [1, 10, 11, 14, 40, 49, 50, 54, 64, 72], "can": [1, 3, 4, 5, 7, 8, 10, 11, 12, 14, 20, 21, 22, 23, 26, 27, 28, 30, 31, 35, 36, 37, 38, 40, 41, 42, 43, 44, 47, 49, 51, 52, 53, 54, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74], "role": 1, "develop": [1, 5, 11, 36, 37, 38, 50, 51, 52, 55, 58], "highlight": [1, 36, 40], "variou": [1, 41], "avail": [1, 6, 11, 14, 21, 38, 42, 54, 58, 67], "separ": [1, 7, 8, 11, 12, 14, 15, 21, 30, 41, 42, 52, 58, 69, 74], "section": [1, 11, 20, 35, 36, 37, 38, 40, 42, 47, 49, 53, 61], "These": [1, 40, 42, 45, 47, 50, 51, 58], "env": [1, 11, 37, 47, 49, 50, 51, 53], "arkouda_serv": [1, 6, 9, 11, 34, 37, 38, 47, 49, 52, 73], "arkouda_server_connection_info": 1, "set": [1, 3, 4, 5, 7, 8, 10, 11, 12, 14, 17, 20, 21, 22, 23, 26, 27, 28, 30, 31, 34, 36, 41, 42, 49, 50, 51, 52, 54, 57, 58, 62, 63, 64, 65, 66, 67, 68, 69, 74], "write": [1, 4, 5, 8, 11, 12, 14, 15, 21, 27, 30, 36, 41, 58, 62], "port": [1, 6, 37, 47, 56, 73], "startup": [1, 47, 57], "tune": 1, "buffer": 1, "messag": [1, 5, 6, 11, 12, 21, 22, 27, 30, 47, 58], "aggreg": [1, 10, 11, 27, 32, 40, 57, 58, 66], "sort": [1, 3, 5, 8, 10, 11, 20, 21, 23, 27, 28, 30, 33, 36, 56, 57, 61, 63, 64, 66, 67, 72, 74], "non": [1, 3, 5, 10, 11, 19, 21, 22, 23, 29, 30, 35, 58, 60, 61, 64, 66, 67, 68, 74], "crazi": 1, "system": [1, 4, 5, 11, 21, 26, 30, 51, 52, 53, 54, 55, 58, 61, 62, 63, 69, 73, 74], "thei": [1, 5, 6, 8, 10, 11, 12, 14, 21, 27, 28, 30, 34, 36, 41, 43, 58, 62, 63, 66, 71], "per": [1, 4, 5, 6, 8, 10, 11, 12, 14, 21, 27, 30, 38, 42, 52, 58, 61, 66], "task": [1, 6], "content": [1, 41, 58], "between": [1, 11, 16, 21, 22, 27, 30, 31, 40, 52, 64, 67, 69, 74], "compet": 1, "arkouda_server_aggregation_dst_buff_s": 1, "commun": [1, 11, 29, 36, 60, 64], "arkouda_server_aggregation_src_buff_s": 1, "arkouda_server_aggregation_yield_frequ": 1, "frequenc": [1, 31], "yield": [1, 8, 11, 65, 68], "default": [1, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 18, 20, 21, 22, 23, 26, 27, 28, 30, 31, 35, 41, 42, 47, 51, 52, 56, 58, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74], "1024": [1, 11, 21], "build": [1, 10, 11, 36, 39, 47, 50, 54, 66, 73], "chpl_flag": [1, 35], "A": [1, 2, 4, 5, 6, 7, 8, 10, 11, 14, 20, 21, 22, 24, 26, 27, 28, 30, 36, 40, 46, 51, 56, 58, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74], "automat": [1, 5, 11, 14, 28, 42, 58, 63, 71], "chpl": [1, 37, 49, 50, 51, 52], "addit": [1, 10, 11, 20, 24, 34, 42, 44, 50, 69, 72, 73], "ones": [1, 11, 20, 22, 37, 56, 57, 61, 64], "here": [1, 32, 34, 37, 38, 39, 40, 42, 44, 49, 51, 52, 53, 54, 55, 73], "smemtrack": 1, "true": [1, 3, 5, 6, 7, 8, 10, 11, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 27, 28, 30, 32, 40, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74], "lhdf5": 1, "lhdf5_hl": 1, "lzmq": 1, "liconv": 1, "lidn2": 1, "fast": [1, 11, 30], "unless": [1, 11, 14, 20, 30, 74], "arkouda_develop": [1, 37], "o1": 1, "mutual": 1, "exclus": [1, 11, 16, 22, 23, 27, 40, 49, 64, 68, 72], "arkouda_quick_compil": [1, 37], "loop": 1, "invari": 1, "code": [1, 5, 11, 12, 29, 36, 37, 40, 52, 57, 60, 63], "motion": 1, "ccflag": 1, "o0": 1, "arkouda_print_passes_fil": 1, "time": [1, 5, 6, 8, 10, 11, 12, 14, 16, 20, 21, 27, 30, 31, 35, 37, 38, 41, 42, 44, 50, 52, 56, 58, 63, 66, 67, 70, 72, 74], "specifi": [1, 3, 4, 7, 8, 10, 11, 12, 14, 15, 21, 22, 27, 28, 30, 31, 32, 37, 43, 58, 61, 62, 64, 65, 66, 70], "mainli": 1, "nightli": 1, "infrastructur": 1, "chpl_debug_flag": 1, "regex_max_captur": 1, "integ": [1, 5, 7, 8, 10, 11, 14, 16, 21, 22, 31, 42, 57, 61, 62, 63, 64, 65, 66, 69, 70, 72, 74], "chang": [1, 7, 8, 11, 12, 14, 21, 36, 38, 47, 51, 53, 58, 61, 65], "maximum": [1, 6, 8, 10, 11, 21, 22, 58, 61, 64, 65, 66, 67], "captur": [1, 18, 74], "group": [1, 5, 8, 10, 11, 18, 27, 28, 29, 30, 40, 42, 57, 60, 63, 65, 66, 71, 72, 74], "access": [1, 2, 6, 11, 14, 26, 40, 45, 51, 57, 58, 73], "match": [1, 4, 5, 8, 10, 11, 12, 14, 19, 20, 21, 22, 27, 28, 30, 33, 57, 58, 61, 62, 64, 66, 69, 71, 73], "20": [1, 3, 11, 20, 36, 40, 53, 54, 61, 62, 68], "folk": 1, "instal": [1, 11, 21, 37, 54, 73], "anaconda": [1, 47, 49, 54, 55], "through": [1, 34, 36, 47, 51], "instruct": [1, 11, 30, 47, 49, 50, 51, 53, 54, 55, 73], "altern": [1, 36, 37, 49, 51, 54], "setup": [1, 49, 54], "them": [1, 11, 14, 23, 30, 36, 50, 58, 72], "explicitli": [1, 8, 11, 23, 52, 72], "arkouda_zmq_path": 1, "zmq": [1, 49], "arkouda_hdf5_path": 1, "hdf5": [1, 4, 5, 8, 11, 12, 14, 21, 27, 30, 41, 43, 44, 45, 49, 53, 58, 74], "arkouda_arrow_path": 1, "arrow": [1, 53], "arkouda_iconv_path": 1, "iconv": [1, 49, 53], "arkouda_idn2_path": 1, "idn2": [1, 49, 53], "ld_library_path": 1, "lib": [1, 49, 54, 72], "arkouda_skip_check_dep": 1, "skip": [1, 10, 11, 14, 30, 49, 58, 66, 72, 74], "autom": [1, 36], "do": [1, 3, 6, 8, 10, 11, 12, 14, 20, 21, 28, 30, 37, 38, 50, 52, 53, 55, 61, 62, 65, 66, 71], "repeat": [1, 5, 11, 27, 63, 70], "sinc": [1, 11, 27, 38, 63, 65, 69, 74], "dep": [1, 49, 50, 51], "been": [1, 5, 6, 11, 14, 21, 23, 27, 30, 34, 35, 36, 49, 52, 61, 63, 64], "up": [1, 3, 5, 6, 10, 11, 14, 20, 21, 23, 30, 35, 38, 39, 49, 52, 54, 58, 61, 62, 63, 64, 72, 74], "arkouda_server_user_modul": [1, 52], "absolut": [1, 11, 20, 31, 52, 61], "must": [1, 3, 5, 6, 7, 8, 10, 11, 12, 14, 20, 21, 22, 23, 24, 27, 28, 30, 31, 34, 37, 40, 41, 47, 49, 50, 52, 61, 64, 66, 68, 69, 70, 71, 73, 74], "also": [1, 3, 5, 7, 10, 11, 16, 20, 22, 23, 27, 30, 35, 37, 40, 41, 43, 44, 45, 47, 49, 54, 58, 64, 68, 69, 70, 72, 74], "servermodul": [1, 37, 38, 52], "cfg": [1, 37, 38, 52], "regist": [1, 5, 8, 10, 11, 12, 13, 21, 27, 28, 30, 32, 57, 66], "readm": 1, "verbos": [1, 11, 13, 17], "arkouda_verbos": 1, "arkouda_server_host": 1, "hostnam": [1, 6, 37, 47, 56, 73], "arkouda_server_port": 1, "arkouda_client_timeout": 1, "control": [1, 7, 11, 20, 69], "timeout": [1, 6, 73], "arkouda_full_stack_test": 1, "option": [1, 3, 5, 6, 7, 8, 10, 11, 12, 14, 18, 20, 21, 22, 23, 27, 28, 30, 31, 36, 42, 49, 50, 53, 56, 58, 59, 64, 65, 66, 67, 71, 72, 73, 74], "test_data_url": 1, "readalltest": 1, "read_all_test": 1, "arkouda_numlocal": 1, "where": [1, 5, 6, 8, 10, 11, 12, 14, 15, 16, 20, 21, 22, 23, 26, 27, 30, 32, 34, 35, 42, 57, 58, 64, 66, 67, 68, 69, 70, 72, 73, 74], "found": [1, 3, 8, 11, 12, 14, 21, 30, 40, 44, 51, 52, 54], "arkouda_hom": 1, "locat": [1, 10, 11, 12, 21, 26, 28, 30, 36, 38, 49, 54, 66, 71, 74], "execut": [1, 11, 14, 21, 30, 34, 35, 37, 38, 41, 49, 50, 52, 63, 73], "warn": [1, 11, 14, 30, 58, 74], "subject": [1, 31], "futur": [1, 7, 11, 14, 27, 30, 58, 67], "intern": [1, 11, 16, 21, 30, 36], "arkouda_client_directori": [1, 26], "parent": [1, 19], "token": [1, 6, 26, 47, 73], "txt": 1, "arkouda_tunnel_serv": 1, "ssh": 1, "tunnel": 1, "url": [1, 6, 47, 49, 73], "arkouda_key_fil": 1, "keyfil": 1, "arkouda_password": 1, "password": [1, 54], "arkouda_log_level": [1, 11], "side": [1, 4, 5, 6, 8, 10, 11, 12, 13, 14, 18, 21, 22, 27, 28, 30, 31, 36, 37, 47, 52, 54, 58, 61, 62, 66, 67, 68, 69, 70, 73, 74], "log": [1, 10, 11, 17, 20, 22, 24, 30, 57, 61, 66], "level": [1, 11, 17, 23, 27, 28, 37, 41, 42, 49, 52, 55, 58, 71, 72], "arkouda_client_mod": 1, "mode": [1, 4, 5, 10, 11, 12, 14, 21, 27, 30, 57, 64, 66], "ui": 1, "api": [1, 10, 11, 46, 66, 69], "displai": [1, 7, 11, 24, 32, 49, 54], "splash": 1, "cachedaccessor": [2, 11], "str": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 24, 26, 27, 28, 30, 31, 32, 41, 58, 59, 62, 63, 64, 65, 66, 69, 73, 74], "custom": [2, 11, 41, 49, 67], "properti": [2, 5, 8, 11, 12, 27, 28, 31], "object": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 41, 42, 43, 44, 45, 54, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72], "descriptor": [2, 11, 30], "cach": [2, 5, 11, 27, 30], "param": [2, 5, 8, 11, 12, 14, 21, 27, 30], "namespac": [2, 11], "g": [2, 7, 10, 11, 20, 21, 30, 31, 32, 37, 38, 40, 50, 58, 61, 63, 64, 66, 70, 73, 74], "df": [2, 8, 11, 40, 65], "type": [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 43, 49, 53, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 70, 71, 73, 74], "extens": [2, 5, 11, 12, 14, 21, 27, 30, 49, 58], "method": [2, 5, 6, 7, 8, 10, 11, 14, 20, 21, 22, 26, 27, 30, 35, 40, 41, 51, 57, 58, 63, 64, 66, 67, 69], "cl": [2, 11], "__init__": [2, 11], "assum": [2, 8, 10, 11, 14, 22, 23, 28, 36, 41, 42, 43, 49, 51, 55, 58, 65, 66, 71, 72], "seri": [2, 8, 11, 22, 31, 32, 33], "datafram": [2, 11, 14, 25, 28, 33, 43, 58, 71], "index": [2, 3, 4, 5, 7, 8, 10, 11, 14, 16, 18, 21, 22, 27, 28, 30, 33, 40, 49, 56, 57, 58, 61, 63, 64, 66, 67, 70, 71, 74], "argument": [2, 3, 7, 8, 10, 11, 21, 27, 28, 30, 32, 52, 71], "data": [2, 4, 5, 7, 8, 9, 10, 11, 12, 14, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 40, 43, 45, 46, 57, 59, 60, 62, 63, 64, 66, 70, 71, 73, 74], "string_oper": [2, 11], "date_oper": [2, 11], "datetimeaccessor": [2, 11], "stringaccessor": [2, 11], "unsqueez": [3, 11], "p": [3, 11, 21, 22], "zero_up": [3, 11], "val": [3, 9, 10, 11, 27, 32, 66, 70], "map": [3, 5, 6, 7, 8, 11, 14, 15, 30, 58, 65, 74], "arrai": [3, 4, 5, 7, 8, 10, 11, 12, 14, 16, 18, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 41, 42, 47, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 74], "spars": [3, 10, 11, 66, 69], "valu": [3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 16, 20, 21, 22, 23, 27, 28, 30, 31, 32, 40, 42, 51, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74], "pdarrai": [3, 4, 5, 7, 8, 10, 11, 12, 14, 16, 18, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 74], "dens": [3, 5, 10, 11, 66], "return": [3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 41, 43, 49, 58, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 73, 74], "replac": [3, 8, 11, 14, 19, 21, 27, 30, 34, 36, 42, 51, 52, 53, 70, 74], "multipl": [3, 8, 11, 14, 20, 27, 31, 34, 40, 42, 44, 45, 52, 56, 58, 59, 61, 65, 70], "right_align": [3, 11], "right": [3, 7, 8, 11, 21, 27, 29, 30, 31, 36, 60, 65, 68, 73, 74], "two": [3, 5, 8, 10, 11, 16, 20, 21, 22, 23, 27, 30, 31, 40, 41, 50, 52, 58, 61, 64, 66, 72, 74], "impli": [3, 11, 68], "discard": [3, 5, 11, 63], "appear": [3, 5, 8, 10, 11, 12, 14, 21, 30, 36, 66, 67], "hand": [3, 11, 36, 68], "defin": [3, 5, 7, 8, 9, 10, 11, 14, 20, 21, 22, 27, 30, 36, 62, 63, 64, 65, 66, 67, 69], "bool": [3, 5, 6, 7, 8, 9, 10, 11, 12, 14, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 56, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74], "logic": [3, 4, 5, 11, 20, 22, 27, 30, 57, 62, 64, 67, 70], "surviv": [3, 11], "left_align": [3, 11], "nonuniqueerror": [3, 11], "valueerror": [3, 5, 6, 8, 10, 11, 12, 14, 15, 16, 20, 21, 22, 23, 27, 28, 29, 30, 58, 60, 61, 64, 66, 67, 70, 71, 73, 74], "inappropri": [3, 11], "correct": [3, 8, 11, 37, 54, 56, 65], "queri": [3, 11, 58], "item": [3, 5, 8, 11, 21, 22, 23, 28, 32, 63, 65, 71, 72], "search": [3, 5, 11, 18, 30, 57, 63], "sequenc": [3, 5, 7, 11, 21, 22, 23, 27, 29, 60, 64, 69, 70, 72, 74], "each": [3, 4, 5, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 27, 28, 30, 31, 32, 40, 42, 49, 52, 58, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 74], "row": [3, 8, 10, 11, 12, 14, 21, 23, 27, 29, 30, 33, 40, 41, 58, 60, 65, 66, 70, 72], "same": [3, 4, 5, 7, 8, 10, 11, 12, 14, 20, 21, 22, 23, 26, 27, 28, 29, 30, 36, 40, 41, 42, 44, 50, 51, 52, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74], "shape": [3, 4, 5, 8, 11, 12, 20, 21, 27, 28, 30, 42, 57, 61, 62, 63, 69], "dtype": [3, 4, 8, 10, 11, 12, 14, 16, 19, 20, 21, 22, 23, 27, 29, 30, 31, 32, 33, 40, 44, 56, 57, 58, 61, 62, 64, 66, 67, 68, 69, 72, 74], "its": [3, 5, 9, 11, 12, 21, 27, 28, 30, 36, 42, 51, 69, 70, 71, 74], "int64": [3, 5, 7, 8, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 27, 29, 30, 31, 40, 41, 42, 56, 58, 60, 61, 63, 64, 65, 66, 67, 69, 70, 72, 74], "lookup": [3, 11, 12, 28], "kei": [3, 5, 8, 10, 11, 12, 14, 15, 20, 28, 40, 52, 54, 59, 65, 66, 71], "fillvalu": [3, 11], "appli": [3, 8, 10, 11, 20, 61, 65, 66, 74], "domain": [3, 11], "entri": [3, 11, 30], "uniqu": [3, 5, 8, 10, 11, 12, 20, 23, 27, 28, 30, 40, 57, 58, 63, 66, 67, 68, 70, 71, 72, 74], "given": [3, 5, 8, 10, 11, 14, 21, 22, 23, 30, 31, 32, 53, 58, 63, 64, 65, 66, 74], "treat": [3, 4, 7, 9, 11, 29, 40, 60, 62], "tupl": [3, 5, 7, 8, 9, 10, 11, 16, 20, 21, 22, 23, 28, 30, 40, 58, 63, 64, 65, 66, 67, 69, 71, 72, 74], "rang": [3, 5, 8, 11, 12, 16, 20, 21, 22, 27, 28, 30, 31, 56, 58, 64, 65, 67, 71, 74], "evalu": [3, 11, 21, 61, 67], "scalar": [3, 5, 11, 21, 27, 28, 56, 57, 63, 67, 68, 70, 71], "result": [3, 5, 8, 10, 11, 12, 14, 16, 20, 21, 22, 23, 24, 27, 28, 30, 31, 40, 41, 42, 43, 51, 58, 61, 64, 65, 66, 69, 70, 71, 74], "over": [3, 11, 20, 21, 30, 56, 61, 62, 63, 65, 67, 69, 70, 74], "while": [3, 11, 14, 29, 38, 42, 44, 49, 54, 58, 60], "cannot": [3, 4, 5, 8, 10, 11, 12, 14, 20, 21, 22, 30, 31, 44, 54, 58, 62, 63, 66, 69, 74], "other": [3, 5, 7, 8, 10, 11, 12, 14, 20, 21, 22, 27, 29, 30, 31, 37, 38, 40, 58, 59, 60, 61, 63, 66, 70, 74], "complex": [3, 11, 47], "achiev": [3, 11, 49], "arang": [3, 4, 8, 10, 11, 14, 20, 21, 22, 23, 24, 27, 40, 57, 58, 61, 62, 64, 66, 67, 68, 69, 70, 72], "desir": [3, 7, 11, 20, 21, 22, 26, 34, 47, 52, 61, 64, 67, 69, 74], "word": [3, 11], "keys1": [3, 11], "twenti": [3, 11], "_": [3, 11, 18, 30, 74], "5": [3, 4, 5, 8, 10, 11, 20, 21, 22, 23, 27, 29, 30, 40, 41, 44, 51, 53, 58, 60, 61, 62, 64, 65, 66, 68, 69, 70, 72, 74], "keys2": [3, 11], "three": [3, 11, 22, 23, 30, 31, 49, 64, 68, 69, 74], "four": [3, 11, 23, 30, 31, 64, 74], "five": [3, 11, 23, 30, 64, 74], "21": [3, 11, 62], "22": [3, 11, 61, 62], "23": [3, 11, 62], "24": [3, 11, 20, 21, 53, 61, 62], "25": [3, 10, 11, 14, 21, 22, 62, 64, 66], "args1": [3, 11], "thirti": [3, 11], "args2": [3, 11], "aku": [3, 8, 11, 12, 25, 59, 65], "direct": [3, 11, 36, 42, 49], "intermedi": [3, 11], "revkei": [3, 11], "revindic": [3, 11], "size": [3, 4, 5, 8, 9, 10, 11, 16, 20, 21, 22, 27, 28, 29, 30, 31, 32, 40, 42, 43, 44, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74], "revarg": [3, 11], "idx": [3, 11, 40], "in1d_interv": [3, 11], "interv": [3, 11, 20, 22, 31, 64, 67], "symmetr": [3, 11, 23, 27, 40, 57, 72], "fals": [3, 5, 6, 7, 8, 10, 11, 12, 14, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 40, 56, 58, 61, 63, 64, 65, 66, 69, 70, 72, 74], "test": [3, 5, 8, 11, 14, 20, 23, 34, 36, 37, 38, 40, 47, 49, 52, 65, 72], "membership": [3, 11, 23, 72], "half": [3, 11], "python": [3, 4, 5, 7, 8, 11, 21, 22, 23, 26, 28, 30, 46, 49, 54, 55, 57, 58, 61, 62, 63, 64, 65, 68, 69, 74], "int": [3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 18, 19, 20, 21, 22, 26, 27, 28, 30, 31, 42, 58, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74], "float": [3, 6, 8, 11, 20, 21, 22, 61, 64, 65, 67, 69], "overlap": [3, 11, 19, 30, 74], "lower_bounds_inclus": [3, 11], "upper_bounds_exclus": [3, 11], "boolean": [3, 5, 8, 10, 11, 18, 21, 23, 27, 28, 30, 40, 42, 63, 65, 66, 68, 69, 70, 71, 72, 74], "contain": [3, 5, 7, 8, 10, 11, 12, 13, 14, 15, 18, 20, 21, 22, 23, 27, 28, 29, 30, 33, 37, 38, 40, 41, 42, 47, 52, 56, 57, 58, 60, 61, 63, 64, 66, 69, 70, 71, 72, 74], "correspond": [3, 5, 7, 8, 10, 11, 12, 14, 15, 16, 18, 20, 21, 22, 26, 27, 28, 30, 32, 42, 44, 58, 61, 63, 66, 67, 68, 70, 71, 74], "low": [3, 7, 8, 11, 20, 21, 22, 40, 58, 64], "high": [3, 7, 8, 11, 20, 21, 22, 40, 64], "inclus": [3, 8, 11, 20, 21, 22, 31, 61, 64, 68], "equival": [3, 4, 5, 10, 11, 21, 22, 23, 29, 30, 31, 37, 40, 60, 61, 62, 64, 72], "But": [3, 11], "faster": [3, 5, 11, 23, 37, 63, 72], "mani": [3, 5, 11, 63, 66], "second": [3, 6, 11, 15, 20, 22, 23, 28, 30, 31, 37, 40, 61, 64, 69, 71, 72, 73, 74], "trivial": [3, 11], "search_interv": [3, 11], "tiebreak": [3, 11], "none": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 21, 22, 24, 25, 27, 28, 30, 31, 50, 58, 59, 63, 64, 65, 66, 67, 71, 73], "hierarch": [3, 11], "uint": [3, 8, 11, 14, 21, 22, 30, 41], "numer": [3, 8, 11, 22, 28, 29, 33, 57, 58, 60, 63, 69, 71, 74], "than": [3, 4, 5, 8, 10, 11, 12, 14, 20, 21, 22, 23, 27, 29, 30, 34, 36, 37, 44, 58, 60, 62, 63, 64, 65, 66, 69, 72, 74], "lowest": [3, 8, 11, 21, 22], "chosen": [3, 11, 20, 21, 61, 69, 70], "compon": [3, 5, 8, 10, 11, 21, 28, 30, 31, 32, 42, 44, 66], "dimens": [3, 4, 5, 11, 21, 30, 40, 42, 62, 63, 69, 70], "multi": [3, 4, 7, 10, 11, 14, 23, 28, 40, 59, 62, 64, 66, 69, 71, 72], "dimension": [3, 4, 11, 22, 28, 58, 62, 69, 71], "satisfi": [3, 11], "condit": [3, 11, 20, 21, 61], "11": [3, 8, 11, 20, 27, 38, 40, 41, 49, 53, 61, 62, 65, 67, 68, 70], "end": [3, 5, 8, 11, 16, 18, 21, 22, 27, 30, 31, 35, 57, 63, 64, 68, 70, 74], "9": [3, 5, 8, 10, 11, 20, 21, 22, 27, 29, 30, 40, 50, 58, 60, 61, 62, 64, 66, 68, 70, 74], "10": [3, 10, 11, 14, 20, 21, 22, 24, 27, 28, 29, 30, 40, 49, 51, 53, 58, 60, 61, 62, 64, 66, 67, 68, 69, 70, 71], "6": [3, 4, 8, 10, 11, 20, 21, 22, 23, 27, 30, 40, 50, 51, 53, 54, 56, 58, 61, 62, 64, 65, 66, 67, 68, 70, 72, 74], "15": [3, 11, 30, 62, 68], "12": [3, 10, 11, 20, 27, 30, 49, 50, 61, 62, 66, 68, 70], "30": [3, 11, 37, 62], "bi_start": [3, 11], "bigint_from_uint_arrai": [3, 11, 21, 22], "cast": [3, 7, 11, 20, 21, 22, 30, 57, 58, 64, 74], "uint64": [3, 7, 9, 10, 11, 20, 21, 22, 29, 56, 60, 61, 64, 65, 67, 69, 74], "bi_end": [3, 11], "bi_val": [3, 11], "92233720368547758091": [3, 11], "92233720368547758090": [3, 11], "166020696663385964564": [3, 11], "36893488147419103233": [3, 11], "92233720368547758085": [3, 11], "92233720368547758095": [3, 11], "110680464442257309696": [3, 11], "110680464442257309708": [3, 11], "166020696663385964574": [3, 11], "is_cosort": [3, 11], "iff": [3, 5, 11, 21, 30, 61, 67], "cosort": [3, 11], "were": [3, 4, 10, 11, 12, 14, 21, 27, 30, 37, 52, 62, 66, 70, 74], "column": [3, 5, 8, 10, 11, 12, 14, 21, 27, 28, 29, 30, 40, 41, 44, 45, 58, 60, 66, 70, 71], "tabl": [3, 6, 11, 13, 21, 27, 30, 53, 69, 70], "cosorted": [3, 11], "rais": [3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 58, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74], "typeerror": [3, 5, 8, 9, 10, 11, 12, 14, 16, 17, 20, 21, 22, 23, 28, 29, 30, 58, 60, 61, 63, 64, 66, 67, 71, 72, 74], "interval_lookup": [3, 11], "express": [3, 11, 14, 30, 57, 58, 63, 65, 68, 69], "upper_bounds_inclus": [3, 11], "valid": [3, 11, 14, 20, 22, 30, 58, 69, 74], "arrayview": [4, 11, 14, 21, 57, 58, 69], "pdarrayclass": [4, 5, 7, 8, 10, 11, 12, 14, 16, 18, 20, 22, 23, 27, 28, 29, 30, 33], "row_major": [4, 11, 21, 62], "view": [4, 11, 36, 40, 45, 49, 55, 62, 69], "arraryview": [4, 11, 62], "similarli": [4, 11, 40, 62], "ndarrai": [4, 5, 11, 20, 21, 22, 24, 27, 30, 40, 58, 61, 62, 63, 67, 69, 70, 74], "store": [4, 8, 10, 11, 14, 22, 26, 30, 41, 42, 45, 54, 58, 62, 63, 64, 66, 70, 74], "being": [4, 8, 11, 12, 14, 21, 28, 32, 40, 42, 43, 44, 51, 52, 58, 62, 65, 68, 71], "element": [4, 5, 8, 10, 11, 15, 16, 18, 20, 21, 22, 23, 27, 28, 30, 31, 32, 40, 52, 57, 62, 63, 64, 66, 67, 68, 69, 71, 72, 74], "int_scalar": [4, 9, 10, 11, 20, 21, 22, 30, 31, 61, 62, 64, 66, 67, 69], "ndim": [4, 5, 11, 21, 27, 30, 57, 62, 63, 69], "items": [4, 11, 21, 22, 27, 30, 57, 58, 62, 69], "byte": [4, 5, 8, 9, 11, 14, 16, 21, 22, 30, 42, 47, 58, 62, 63, 65, 69, 74], "read": [4, 5, 8, 11, 12, 14, 15, 21, 30, 41, 42, 43, 44, 62, 74], "By": [4, 5, 7, 8, 10, 11, 12, 14, 20, 21, 23, 27, 30, 31, 62, 66, 72, 74], "c": [4, 8, 11, 21, 22, 23, 27, 30, 35, 37, 50, 56, 62, 65, 69, 70, 72, 74], "f": [4, 5, 11, 21, 22, 30, 47, 50, 51, 53, 58, 62, 74], "column_major": [4, 11, 21, 62], "to_ndarrai": [4, 5, 7, 11, 12, 20, 21, 22, 24, 27, 30, 31, 40, 57, 58, 62, 63, 67, 69, 70, 74], "convert": [4, 5, 7, 8, 11, 20, 21, 22, 27, 28, 30, 31, 32, 41, 58, 62, 63, 65, 69, 70, 71, 72, 74], "np": [4, 5, 8, 9, 10, 11, 16, 20, 21, 22, 24, 27, 30, 31, 40, 58, 61, 62, 63, 64, 65, 66, 67, 69, 70, 74], "transfer": [4, 5, 8, 11, 21, 30, 58, 62, 63, 65, 69, 70, 74], "client": [4, 5, 8, 11, 21, 22, 30, 31, 33, 43, 49, 50, 51, 52, 53, 54, 57, 62, 63, 65, 69, 70, 74], "exce": [4, 5, 8, 11, 21, 22, 30, 31, 58, 62, 63, 64, 65, 69, 74], "maxtransferbyt": [4, 5, 8, 11, 21, 22, 30, 31, 58, 62, 63, 65, 69, 74], "runtimeerror": [4, 5, 6, 8, 10, 11, 12, 13, 14, 18, 20, 21, 22, 23, 27, 28, 30, 31, 58, 61, 62, 63, 64, 66, 67, 69, 72, 73, 74], "attribut": [4, 21, 31, 58, 62, 69], "error": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 20, 21, 22, 27, 28, 30, 42, 44, 54, 58, 61, 62, 63, 65, 66, 67, 69, 73, 74], "thrown": [4, 5, 8, 11, 12, 13, 14, 18, 21, 22, 27, 28, 30, 58, 61, 62, 67, 69, 74], "receiv": [4, 6, 8, 11, 12, 14, 21, 30, 58, 62, 69, 73], "doe": [4, 5, 6, 8, 10, 11, 12, 14, 15, 21, 22, 24, 27, 28, 30, 37, 40, 42, 44, 58, 62, 64, 65, 66, 69, 71, 73, 74], "protect": [4, 5, 11, 21, 22, 30, 58, 62, 63, 69, 74], "overflow": [4, 5, 11, 20, 21, 30, 58, 62, 63, 69, 74], "memori": [4, 5, 6, 11, 21, 30, 38, 39, 42, 47, 58, 62, 63, 69, 74], "run": [4, 5, 6, 11, 20, 21, 27, 30, 37, 38, 40, 47, 49, 50, 51, 53, 54, 56, 58, 62, 63, 69, 70, 73, 74], "assumpt": [4, 5, 11, 21, 22, 30, 58, 62, 63, 69, 74], "distribut": [4, 5, 8, 10, 11, 12, 14, 21, 22, 24, 27, 30, 47, 58, 61, 62, 63, 64, 66, 69, 72, 74], "mai": [4, 5, 8, 11, 12, 14, 21, 22, 23, 30, 40, 49, 51, 53, 54, 58, 62, 63, 64, 65, 69, 74], "overrid": [4, 5, 11, 21, 22, 30, 37, 58, 62, 63, 69, 74], "larger": [4, 5, 11, 21, 22, 30, 36, 40, 58, 62, 63, 69, 74], "proce": [4, 5, 11, 21, 22, 30, 58, 62, 63, 69, 74], "caution": [4, 5, 11, 21, 22, 30, 58, 62, 63, 69, 74], "to_list": [4, 5, 7, 11, 12, 21, 27, 30, 40, 58, 62, 69, 70, 74], "reshap": [4, 11, 21, 57, 62], "3": [4, 8, 10, 11, 18, 20, 21, 22, 23, 24, 27, 29, 30, 40, 41, 42, 49, 51, 53, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 74], "4": [4, 8, 10, 11, 18, 20, 21, 22, 23, 27, 29, 30, 40, 51, 53, 58, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 74], "to_hdf": [4, 5, 8, 11, 12, 14, 21, 27, 30, 42, 45, 58], "filepath": [4, 11], "dset": [4, 11], "truncat": [4, 5, 11, 12, 14, 21, 27, 30, 42, 44], "file_typ": [4, 5, 8, 11, 12, 14, 21, 27, 30], "save": [4, 5, 8, 10, 11, 12, 14, 21, 27, 30, 34, 36, 37, 42, 43, 44, 58, 63, 72], "path": [4, 8, 11, 12, 14, 15, 21, 26, 38, 49, 50, 51, 52, 54, 58], "dataset": [4, 5, 8, 11, 12, 14, 21, 27, 30, 41, 42, 44, 45, 66, 74], "append": [4, 5, 8, 11, 12, 14, 21, 23, 27, 30, 42, 44, 57, 64, 74], "overwrit": [4, 5, 8, 11, 12, 14, 21, 27, 30, 32, 69], "exist": [4, 5, 6, 8, 11, 12, 14, 15, 21, 22, 27, 30, 42, 44, 64, 65, 73], "format": [4, 5, 6, 7, 8, 11, 12, 13, 14, 21, 26, 27, 30, 40, 42, 43, 44, 52, 65, 73, 74], "date": [4, 11, 31, 36], "kwarg": [5, 10, 11, 22, 25, 31, 32, 63, 66], "repres": [5, 7, 8, 10, 11, 27, 28, 30, 31, 42, 63, 66, 74], "belong": [5, 11, 63], "often": [5, 11, 63, 67], "speed": [5, 11, 23, 35, 39, 52, 63, 64, 72], "oper": [5, 6, 7, 8, 10, 11, 12, 14, 21, 26, 27, 29, 30, 36, 43, 47, 53, 55, 56, 57, 60, 65, 66, 68, 73], "cost": [5, 11, 63], "initi": [5, 6, 11, 21, 22, 51, 56, 63, 64, 69, 73], "navalu": [5, 11, 63], "miss": [5, 11, 63], "null": [5, 11, 14, 30, 42, 63, 74], "determin": [5, 8, 10, 11, 12, 14, 21, 27, 30, 36, 42, 52, 58, 63, 65, 66], "n": [5, 8, 10, 11, 14, 20, 21, 22, 23, 27, 28, 30, 31, 41, 51, 53, 56, 61, 62, 63, 64, 65, 66, 70, 71], "permut": [5, 8, 10, 11, 29, 30, 32, 57, 60, 63, 66, 72], "segment": [5, 10, 11, 14, 16, 27, 30, 32, 42, 57, 58, 63, 66, 70, 72, 74], "offset": [5, 10, 11, 14, 22, 30, 42, 58, 63, 72, 74], "union": [5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 20, 21, 22, 23, 27, 28, 29, 30, 40, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 71, 72, 74], "nlevel": [5, 11, 57, 63], "distinct": [5, 8, 11, 63], "rank": [5, 11, 21, 22, 30, 42, 57, 58, 63, 64, 68], "onli": [5, 8, 10, 11, 12, 14, 18, 20, 21, 22, 23, 27, 28, 29, 30, 35, 37, 38, 40, 42, 44, 49, 50, 52, 53, 55, 56, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 74], "objtyp": [5, 11, 21, 27, 30, 42], "binop": [5, 11, 21, 30], "registerablepiec": [5, 11], "requiredpiec": [5, 11], "classmethod": [5, 8, 11, 27, 63], "from_cod": [5, 11, 57, 63], "pre": [5, 11, 32, 63], "comput": [5, 6, 8, 10, 11, 16, 20, 21, 27, 30, 40, 58, 61, 63, 65, 66, 67, 69, 70, 72, 74], "constructor": [5, 11, 40, 63], "normal": [5, 6, 7, 8, 10, 11, 21, 22, 31, 61, 63, 65, 66], "input": [5, 7, 8, 10, 20, 21, 22, 23, 27, 29, 31, 36, 58, 60, 61, 63, 66, 69, 71, 72], "standardize_categori": [5, 11], "share": [5, 11, 12, 21, 27, 30, 36, 54], "origin": [5, 8, 10, 11, 14, 18, 20, 21, 23, 27, 30, 61, 63, 64, 65, 66, 70, 74], "remap": [5, 11], "set_categori": [5, 11], "new_categori": [5, 11], "old": [5, 11, 36], "unchang": [5, 11], "na": [5, 11], "static": [5, 8, 10, 11, 12, 21, 27, 28, 30, 66], "from_return_msg": [5, 8, 11, 27, 28, 30], "repmsg": [5, 8, 11, 28], "instanc": [5, 7, 8, 10, 11, 21, 22, 28, 30, 49, 52, 58, 61, 65, 66, 67, 69, 74], "point": [5, 8, 11, 12, 16, 21, 22, 27, 28, 54, 64, 65, 69], "call": [5, 6, 7, 8, 10, 11, 14, 21, 22, 27, 28, 30, 40, 44, 47, 49, 51, 52, 58, 61, 62, 64, 65, 66, 69, 73], "directli": [5, 11, 21, 28, 29, 30, 40, 60, 62, 63, 65, 69, 74], "delimit": [5, 8, 11, 12, 14, 15, 21, 28, 30, 36, 41, 74], "process": [5, 8, 11, 13, 14, 28, 39, 42, 47, 51, 54, 58, 70, 74], "produc": [5, 11, 30, 63, 74], "isna": [5, 11], "self": [5, 8, 11, 21, 27, 30, 58, 59, 62, 63, 65, 69, 70, 71, 74], "reset_categori": [5, 11], "recomput": [5, 11, 14, 27], "unus": [5, 11], "slice": [5, 8, 11, 21, 40, 57, 62, 63, 65, 70, 74], "subset": [5, 8, 11, 27, 52, 61, 65, 70], "In": [5, 8, 10, 11, 14, 21, 30, 34, 36, 37, 40, 47, 49, 50, 52, 54, 58, 61, 66, 67, 68, 70, 73, 74], "case": [5, 6, 10, 11, 12, 14, 20, 21, 28, 30, 31, 35, 40, 41, 42, 49, 50, 52, 54, 61, 71], "elimin": [5, 11, 44], "gener": [5, 8, 11, 16, 20, 21, 22, 24, 26, 27, 28, 31, 33, 37, 38, 40, 41, 42, 44, 49, 50, 54, 56, 58, 61, 64, 71], "substr": [5, 7, 11, 30, 57, 63], "whether": [5, 8, 10, 11, 14, 18, 23, 27, 28, 30, 31, 40, 58, 63, 70, 71, 72, 74], "significantli": [5, 11, 37, 63], "becaus": [5, 8, 11, 14, 22, 27, 30, 37, 40, 41, 42, 43, 47, 58, 63, 64, 65, 70, 74], "instead": [5, 7, 8, 10, 11, 14, 21, 30, 50, 56, 58, 61, 63, 66, 74], "full": [5, 11, 18, 20, 22, 30, 31, 35, 37, 47, 49, 51, 55, 63, 74], "startswith": [5, 11, 30, 57, 63, 74], "endswith": [5, 11, 30, 57, 63, 74], "in1d": [5, 11, 23, 40, 57, 63, 72, 74], "against": [5, 11, 27, 30, 40, 58, 70, 74], "intersect1d": [5, 11, 23, 27, 40, 57, 70, 72], "union1d": [5, 11, 23, 27, 40, 57, 70, 72], "consid": [5, 11, 36, 74], "wise": [5, 11, 20, 57, 62], "b": [5, 6, 8, 10, 11, 14, 16, 20, 21, 22, 23, 24, 27, 28, 29, 30, 40, 56, 60, 61, 65, 66, 67, 68, 69, 70, 72, 74], "scale": [5, 11, 24, 35, 40, 46], "arbitrarili": [5, 11], "larg": [5, 11, 61], "cat": [5, 11, 54], "cattwo": [5, 11], "place": [5, 8, 10, 11, 21, 26, 30, 32, 34, 38, 61, 66], "togeth": [5, 8, 10, 11, 30, 72], "guarante": [5, 11, 29, 30, 60, 74], "lie": [5, 11, 30], "contigu": [5, 11, 16, 27, 30], "necessarili": [5, 11, 30], "groupbi": [5, 8, 10, 11, 27, 30, 57, 63, 74], "simpli": [5, 6, 11, 64], "even": [5, 8, 10, 11, 21, 42, 61, 65, 66, 73], "rather": [5, 8, 11, 30], "128": [5, 11, 20, 30], "hash": [5, 11, 20, 29, 30, 60], "argsort": [5, 8, 10, 11, 12, 21, 29, 57, 60, 61, 63, 65, 66, 74], "concaten": [5, 8, 11, 23, 27, 28, 30, 32, 57, 70, 71, 74], "merg": [5, 11, 36], "synchron": [5, 11], "interleav": [5, 8, 11, 23, 64], "greatli": [5, 11, 23, 64], "improv": [5, 11, 23, 36, 37, 50, 52, 64], "perform": [5, 8, 10, 11, 14, 16, 20, 21, 23, 30, 35, 36, 37, 40, 41, 43, 49, 57, 58, 61, 64, 65, 66, 69], "determinist": [5, 11, 23, 64], "expens": [5, 11], "slower": [5, 11, 74], "prefix_path": [5, 8, 11, 12, 14, 21, 27, 30], "categorical_arrai": [5, 11], "collect": [5, 8, 11, 12, 14, 21, 25, 27, 30, 50], "directori": [5, 11, 12, 14, 15, 21, 26, 27, 30, 34, 37, 38, 47, 49, 50, 51, 52, 53, 54, 55, 56], "filenam": [5, 8, 11, 12, 14, 21, 27, 30, 58], "prefix": [5, 8, 11, 12, 14, 21, 27, 30, 31, 32, 57, 74], "within": [5, 8, 10, 11, 12, 14, 21, 22, 27, 30, 42, 44, 64, 65, 66, 70], "written": [5, 8, 11, 12, 14, 15, 21, 27, 30, 41, 42, 43, 44, 45, 49, 58, 69], "impact": [5, 11, 12, 21, 27, 35, 36, 38], "parquet": [5, 8, 11, 12, 14, 21, 27, 30, 41, 43, 45, 58], "visibl": [5, 6, 11, 12, 14, 21, 27, 30, 73], "permiss": [5, 11, 12, 21, 27, 30], "form": [5, 9, 11, 12, 21, 26, 27, 30, 36, 52, 74], "_local": [5, 8, 11, 12, 14, 21, 27, 30, 42], "numlocal": [5, 6, 11, 12, 14, 21, 27, 30, 73], "overwritten": [5, 8, 11, 12, 14, 21, 27, 30, 42, 44], "less": [5, 10, 11, 12, 21, 27, 30], "o": [5, 11, 12, 21, 26, 27, 30, 55, 57], "reli": [5, 11, 12, 21, 27, 30, 66], "to_parquet": [5, 8, 11, 12, 14, 21, 30, 44, 45, 58], "compress": [5, 8, 11, 12, 14, 21, 27, 30, 68, 70], "chunk": [5, 11, 12, 14, 21, 30], "snappi": [5, 8, 11, 12, 14, 21, 30, 44, 49], "gzip": [5, 8, 11, 12, 14, 21, 30, 44], "brotli": [5, 8, 11, 12, 14, 21, 30, 44], "zstd": [5, 8, 11, 12, 14, 21, 30, 44], "lz4": [5, 8, 11, 12, 14, 21, 30, 44], "On": [5, 6, 11, 73], "due": [5, 11, 14, 41, 44, 58], "compat": [5, 8, 11, 21, 27, 31, 32, 65, 66], "issu": [5, 8, 10, 11, 36, 49, 54, 66, 70], "effici": [5, 8, 11, 12, 21, 30, 70, 74], "file_format": [5, 8, 11, 12, 14, 21, 30], "deprec": [5, 8, 10, 11, 12, 14, 21, 27, 30, 31, 36, 58, 66], "differ": [5, 8, 10, 11, 14, 20, 21, 22, 23, 26, 27, 30, 31, 32, 38, 40, 41, 42, 44, 50, 51, 57, 58, 62, 64, 65, 66, 67, 72], "neither": [5, 11, 12, 21, 22, 30, 31, 64, 74], "nor": [5, 11, 12, 21, 22, 30, 64, 74], "import": [5, 7, 8, 11, 14, 20, 24, 26, 30, 36, 42, 47, 49, 52, 65, 67, 73], "state": [5, 11, 30, 36], "charact": [5, 7, 11, 22, 30, 52, 74], "user_defined_nam": [5, 8, 10, 11, 21, 27, 30, 66], "underli": [5, 8, 10, 11, 20, 66], "root": [5, 8, 10, 11, 21, 42, 50, 58, 61, 66], "now": [5, 8, 10, 11, 20, 21, 27, 30, 32, 37, 38, 41, 44, 49, 51, 66, 67], "updat": [5, 8, 10, 11, 14, 21, 24, 30, 50, 54, 58, 66], "modif": [5, 8, 10, 11, 21, 30, 52, 65, 66], "fluid": [5, 8, 10, 11, 21, 30, 66], "registrationerror": [5, 8, 10, 11, 21, 27, 30, 66], "unabl": [5, 8, 10, 11, 21, 30, 66], "unregist": [5, 8, 10, 11, 21, 27, 28, 30, 32, 57, 66], "attach": [5, 8, 10, 11, 21, 27, 28, 30, 32, 57, 66], "unregister_categorical_by_nam": [5, 11], "is_regist": [5, 8, 10, 11, 12, 21, 27, 28, 30, 57, 66], "immun": [5, 8, 10, 11, 21, 30, 66], "delet": [5, 6, 8, 10, 11, 21, 30, 38, 47, 66], "until": [5, 8, 10, 11, 21, 30, 38, 66], "previous": [5, 8, 10, 11, 12, 14, 21, 30, 66], "attempt": [5, 8, 10, 11, 12, 14, 21, 27, 29, 30, 32, 49, 58, 65, 66], "bool_": [5, 11, 21, 30, 61, 67], "registri": [5, 8, 10, 11, 12, 13, 21, 30, 66], "mi": [5, 11], "json": [5, 6, 11, 13, 21, 26, 30], "about": [5, 6, 11, 13, 21, 30, 31, 37, 47, 52, 61, 62, 74], "pretty_print_info": [5, 11, 21, 30], "human": [5, 11, 13, 21, 30], "readabl": [5, 11, 13, 14, 21, 30, 42, 58], "parse_hdf_categor": [5, 11], "dict": [5, 6, 8, 10, 11, 14, 15, 25, 65, 66], "conjunct": [5, 11, 58, 63, 74], "load_al": [5, 8, 11, 12, 14, 21, 30, 45], "reconstitut": [5, 11], "convent": [5, 11], "structur": [5, 8, 11, 27, 40, 44, 65, 66, 69, 70, 74], "construct": [5, 11, 22, 27, 30, 40, 57, 66, 68], "dictionari": [5, 6, 8, 10, 11, 14, 15, 30, 52, 58, 65, 66], "remov": [5, 8, 11, 21, 27, 30, 37, 53, 65, 70, 74], "connect": [6, 11, 22, 26, 37, 54, 57, 58], "localhost": [6, 47, 73], "5555": [6, 47, 73], "access_token": [6, 73], "connect_url": [6, 47, 73], "machin": [6, 34, 37, 51, 73], "send": [6, 8, 11, 21, 22, 27, 58, 65, 73], "whicn": [6, 73], "interpret": [6, 11, 14, 58, 73], "socket": [6, 73], "enabl": [6, 11, 17, 21, 26, 37, 49, 50, 52, 58, 73], "authent": [6, 26, 47, 73], "complet": [6, 34, 36, 49, 51, 73, 74], "tcp": [6, 47, 73], "token_valu": [6, 73], "connectionerror": [6, 73], "pars": [6, 7, 8, 11, 12, 21, 73], "success": [6, 11, 20, 27, 69, 73], "seen": [6, 73], "disconnect": [6, 11, 21], "shutdown": [6, 37, 38, 52], "symtabl": 6, "shut": [6, 47, 52], "down": [6, 35, 36, 38, 47, 49, 52], "stop": [6, 11, 22, 64, 68], "get": [6, 8, 9, 11, 14, 20, 27, 36, 37, 38, 50, 54, 58, 62, 69, 70], "runtim": [6, 35], "serverhostnam": 6, "serverport": 6, "numpu": 6, "processor": 6, "maxtaskpar": 6, "physicalmemori": 6, "get_mem_us": 6, "as_perc": 6, "amount": [6, 8, 11, 21, 52, 65, 74], "symbol": [6, 11, 13, 21, 27, 30, 32, 69], "kb": [6, 8, 11], "mb": [6, 8, 11], "gb": [6, 8, 11], "tb": 6, "pb": 6, "percent": 6, "alloc": 6, "get_mem_avail": 6, "get_server_command": 6, "command": [6, 11, 21, 34, 36, 38, 47, 49, 51, 52, 53, 54, 73], "retriev": [6, 11, 13, 21, 26, 28, 36], "commandmap": [6, 52], "print_server_command": 6, "ruok": 6, "imok": 6, "mean": [6, 8, 10, 11, 14, 21, 22, 26, 27, 57, 58, 61, 66, 67], "imnotok": 6, "occur": [6, 8, 10, 11, 14, 19, 20, 21, 28, 30, 49, 66, 67, 71, 74], "basic": [6, 11, 21, 26, 36, 54, 62, 69], "wai": [6, 37, 42, 47, 52, 61, 63, 64, 65, 69, 74], "quick": [6, 37], "healthcheck": 6, "handl": [6, 8, 11, 20, 30, 43, 58, 65, 69, 74], "respons": [6, 11, 30], "both": [6, 8, 11, 14, 16, 21, 23, 31, 37, 40, 42, 43, 47, 49, 51, 58, 63, 72, 74], "latter": [6, 74], "bitvector": [7, 11], "width": [7, 11, 74], "64": [7, 11, 20, 21, 22, 64, 65, 69], "revers": [7, 10, 11], "callback": [7, 11], "field": [7, 11, 22, 30, 36, 58, 74], "vector": [7, 10, 11, 57, 66], "signific": [7, 11, 20, 21, 29, 36, 52, 60, 61], "callabl": [7, 8, 11, 65], "flag": [7, 11, 14, 24, 38, 52, 73], "binari": [7, 11, 22, 49, 61], "thin": [7, 11], "wrapper": [7, 11, 69], "mostli": [7, 11], "affect": [7, 11], "conserv": [7, 11], "export": [7, 11, 14, 20, 34, 37, 49, 50, 51, 54, 67], "opeq": [7, 11, 21], "op": [7, 11, 21, 27], "msb_left": [7, 11], "pad": [7, 11, 36], "show_int": [7, 11], "back": [7, 10, 11, 35, 38, 58, 66], "represent": [7, 11, 21], "accord": [7, 8, 11, 20, 65, 69], "empti": [7, 8, 10, 11, 14, 20, 21, 23, 28, 49, 61, 64, 65, 67, 71], "ip_address": [7, 11, 12, 59], "ip": [7, 11], "ipv4": [7, 11], "helper": [7, 11], "proof": [7, 11], "made": [7, 8, 11, 30, 74], "accomod": [7, 11], "ipv6": [7, 11], "prevent": [7, 11, 27, 41, 42, 50, 70], "inadvert": [7, 11], "ipaddress": [7, 11], "is_ipv4": [7, 11], "ip2": [7, 11], "well": [7, 11, 40, 53], "ad": [7, 10, 11, 14, 37, 40, 44, 49, 58, 66, 73], "deal": [7, 11], "is_ipv6": [7, 11], "initialdata": [8, 11, 65], "userdict": [8, 11, 25], "pd": [8, 11, 14, 22, 31, 40, 58, 65], "usernam": [8, 11, 26, 65], "alic": [8, 11, 65], "bob": [8, 11, 65], "carol": [8, 11, 65], "userid": [8, 11, 65, 66], "111": [8, 11, 65], "222": [8, 11, 65], "333": [8, 11, 65], "dai": [8, 11, 31, 36, 65, 66], "224": [8, 11, 65], "slightli": [8, 11, 65], "7": [8, 10, 11, 20, 21, 22, 23, 27, 29, 40, 49, 50, 51, 53, 58, 60, 61, 62, 64, 65, 66, 68, 70, 72], "stride": [8, 11, 22, 27, 64, 65, 68], "148": [8, 11, 65], "112": [8, 11, 65], "96": [8, 11, 21, 65], "column_class": [8, 11], "from_panda": [8, 11], "pd_df": [8, 11, 40], "drop": [8, 11, 21, 36, 61], "axi": [8, 11, 24, 27, 28, 65, 70, 71], "inplac": [8, 11, 65], "datefram": [8, 11, 65], "col_nam": [8, 11, 65], "drop_dupl": [8, 11, 65], "duplcat": [8, 11, 65], "iter": [8, 11, 14, 22, 29, 57, 58, 60], "dedup": [8, 11, 65], "last": [8, 11, 21, 22, 28, 29, 30, 36, 52, 60, 65, 71, 73, 74], "reset_index": [8, 11, 65], "longer": [8, 11, 22, 42, 53, 65], "caller": [8, 11, 65], "correctli": [8, 11, 54, 65], "update_s": [8, 11], "renam": [8, 11], "mapper": [8, 11, 65], "nonexist": [8, 11, 65], "ignor": [8, 10, 11, 14, 20, 31, 65, 69], "99": [8, 11, 65], "lower": [8, 11, 30, 42, 65], "onto": [8, 11, 30, 74], "sens": [8, 11], "whose": [8, 11, 27, 28, 30, 71], "better": [8, 11], "remain": [8, 11, 14, 50, 58, 59, 65, 71], "concat": [8, 11, 12, 27, 28, 65, 71], "essenti": [8, 11, 21, 27, 30, 65, 70], "diffen": [8, 11, 65], "head": [8, 11, 28, 36], "quickli": [8, 11, 34, 65], "select": [8, 11, 14, 27, 36, 49, 55, 65, 70], "tail": [8, 11, 22, 28], "sampl": [8, 11, 22], "random": [8, 11, 22, 56, 57], "use_seri": [8, 11, 65], "oject": [8, 11], "memory_usag": [8, 11], "One": [8, 10, 11, 21, 28, 40, 66, 71], "to_panda": [8, 11, 12, 28, 31, 40, 65, 71], "datalimit": [8, 11, 65], "retain_index": [8, 11, 65], "megabyt": [8, 11, 65], "request": [8, 10, 11, 15, 21, 22, 30, 36, 64, 65, 66], "estim": [8, 10, 11, 21, 61, 65, 66], "book": [8, 11, 65], "disk": [8, 11, 12, 14, 21, 30, 74], "preserv": [8, 11, 28, 71, 74], "across": [8, 11, 14, 42, 58], "suffix": [8, 11, 27, 30, 42, 57, 74], "load": [8, 11, 12, 14, 21, 27, 30, 41, 42, 44, 45, 54, 58], "to_csv": [8, 11, 12, 14, 21, 30, 41, 45], "col_delim": [8, 11, 12, 14, 21, 30], "csv": [8, 11, 12, 14, 21, 30, 45, 58], "header": [8, 11, 12, 14, 21, 30], "denot": [8, 11, 12, 14, 21, 30, 31], "unlik": [8, 11, 14, 27, 30, 31], "utf": [8, 11, 14, 30], "8": [8, 10, 11, 14, 21, 22, 27, 29, 30, 40, 41, 51, 53, 58, 60, 61, 62, 64, 65, 66, 68, 69, 70], "NOT": [8, 11, 12, 14, 20, 21, 30, 49, 58, 69], "allow_error": [8, 11, 12, 14, 21, 30, 58], "unknown": [8, 11, 12, 14, 21, 22, 30], "arkouda_typ": [8, 11, 12, 14, 21, 30], "newlin": [8, 11, 12, 14, 21, 30, 41], "read_csv": [8, 11, 14, 41, 45], "infer": [8, 9, 10, 11, 14, 22, 32, 42, 58], "ascend": [8, 10, 11, 12, 20, 28, 59, 65, 67, 71], "coargsort": [8, 11, 29, 57, 60, 63, 65, 74], "sort_valu": [8, 11, 28, 65, 71], "descend": [8, 11, 22, 28, 64, 65, 71], "apply_permut": [8, 11, 65], "perm": [8, 11, 29, 32, 60, 65], "entir": [8, 11, 27, 30, 38, 65, 70], "unsort": [8, 11, 65], "arbitrari": [8, 11, 65], "invers": [8, 11, 32, 65], "minim": [8, 11, 37, 38, 64, 65], "filter_by_rang": [8, 11], "count": [8, 10, 11, 19, 20, 21, 27, 28, 30, 40, 57, 61, 66, 70, 74], "highest": [8, 11, 21, 22], "unlimit": [8, 11], "qualifi": [8, 11], "filter_by_count": [8, 11], "copi": [8, 11, 27, 29, 70], "deep": [8, 11, 27, 65], "reflect": [8, 11, 65, 70], "without": [8, 11, 14, 21, 38, 49, 58, 65], "shallow": [8, 11, 65], "vice": [8, 11, 58, 65], "versa": [8, 11, 58, 65], "alia": [8, 10, 11, 27, 31, 65, 66], "isin": [8, 11, 28], "show": [8, 11, 14, 24, 49, 58, 62, 66], "col_a": [8, 11], "col_b": [8, 11], "position": [8, 11], "other_df": [8, 11], "col_c": [8, 11], "corr": [8, 11, 21], "pairwis": [8, 11], "correl": [8, 11, 21], "matrix": [8, 10, 11, 66], "pearson": [8, 11, 21], "unregister_dataframe_by_nam": [8, 11], "mismatch": [8, 10, 11, 49, 66], "unregister_groupby_by_nam": [8, 10, 11, 57, 66], "analog": [8, 10, 11, 31, 66], "obj": [8, 11, 14], "intx": [8, 11], "ident": [8, 11, 32, 61, 69], "categor": [8, 10, 11, 12, 14, 20, 23, 28, 29, 32, 33, 57, 59, 60, 64, 65, 66, 67, 71, 72], "intersect": [8, 11, 23, 27, 40, 57, 72], "posit": [8, 11, 18, 19, 21, 28, 30, 68, 71, 74], "equal": [8, 11, 16, 20, 42, 44, 67, 70], "invert_permut": [8, 11, 32], "float64": [9, 10, 11, 20, 21, 22, 23, 29, 41, 56, 60, 61, 64, 65, 66, 67, 69, 72], "uint8": [9, 11, 20, 42, 61, 64, 67, 69, 74], "str_": [9, 11, 61, 67, 74], "bigint": [9, 11, 20, 21, 22, 58, 64, 69], "inttyp": [9, 11], "bittyp": [9, 11], "bool_scalar": [9, 11], "float_scalar": [9, 11, 22], "numeric_scalar": [9, 11, 20, 21, 22, 61, 64], "numpy_scalar": [9, 11, 21, 61], "str_scalar": [9, 11, 19, 30, 74], "all_scalar": [9, 11, 22, 64], "enum": [9, 11, 17, 20, 42], "arkouda_supported_dtyp": [9, 11], "dtypeobject": [9, 11], "check_np_dtyp": [9, 11], "dt": [9, 11, 16, 20, 28, 69], "assert": [9, 11], "translate_np_dtyp": [9, 11], "split": [9, 11, 19, 30, 36, 57], "kind": [9, 11], "unsupport": [9, 10, 11, 14, 26, 29, 58, 72], "resolve_scalar_dtyp": [9, 11], "get_byteord": [9, 11], "concret": [9, 11], "byteord": [9, 11], "turn": [9, 11, 28, 37, 47, 71], "get_server_byteord": [9, 11], "pda": [10, 11, 20, 21, 22, 29, 31, 60, 61, 64, 67, 69, 72], "groupabl": [10, 11, 23, 66, 72], "return_group": [10, 11, 72], "assume_sort": [10, 11, 66, 72], "come": [10, 11, 38, 44, 58, 64, 72], "consider": [10, 11, 72, 74], "groupby_reduction_typ": [10, 11], "prepar": [10, 11, 49, 66], "nkei": [10, 11, 28, 57, 66], "unique_kei": [10, 11, 57, 66], "ngroup": [10, 11, 57, 66], "logger": [10, 11, 30, 33, 57, 66], "arkoudalogg": [10, 11, 17, 30, 66], "nativ": [10, 11, 43, 44, 50, 58, 66, 70], "inherit": [10, 11, 66, 69], "overload": [10, 11, 66], "_get_grouping_kei": [10, 11, 66], "co": [10, 11, 20, 22, 57, 61, 66], "reduct": [10, 11, 21, 56, 57, 66, 67], "conform": [10, 11, 66], "randint": [10, 11, 20, 22, 29, 40, 57, 60, 61, 64, 66, 67], "skipna": [10, 11, 66], "ddof": [10, 11, 21, 31, 61, 66, 67], "reduc": [10, 11, 37, 39, 66], "nan": [10, 11, 20, 28, 66, 69], "delta": [10, 11, 16, 21, 61, 66, 67], "degre": [10, 11, 21, 61, 66, 67], "freedom": [10, 11, 21, 61, 66, 67], "calcul": [10, 11, 14, 21, 23, 42, 58, 61, 66, 67, 72], "std": [10, 11, 21, 31, 57, 61, 66, 67], "linspac": [10, 11, 20, 22, 57, 61, 64, 66, 69], "sum": [10, 11, 20, 21, 27, 31, 57, 61, 66, 67], "77777777777777768": [10, 11, 66], "55555555555555536": [10, 11, 66], "33333333333333348": [10, 11, 66], "11111111111111116": [10, 11, 66], "min": [10, 11, 20, 21, 27, 57, 61, 66, 67], "77777777777777779": [10, 11, 66], "55555555555555558": [10, 11, 66], "33333333333333337": [10, 11, 66], "33333333333333326": [10, 11, 66], "group_sum": [10, 11, 66], "14": [10, 11, 40, 41, 51, 61, 62, 66, 68], "prod": [10, 11, 21, 27, 57, 61, 66, 67], "product": [10, 11, 20, 21, 22, 58, 61, 62, 66, 67], "multipli": [10, 11, 66], "group_product": [10, 11, 66], "108": [10, 11, 66], "00000000000003": [10, 11, 66], "9999999999999982": [10, 11, 66], "varianc": [10, 11, 21, 51, 61, 66, 67], "group_var": [10, 11, 66], "averag": [10, 11, 21, 22, 61, 66], "squar": [10, 11, 21, 61, 66], "deviat": [10, 11, 21, 22, 31, 61, 66, 67], "len": [10, 11, 21, 27, 30, 61, 66, 68, 70, 74], "howev": [10, 11, 20, 21, 42, 49, 53, 54, 61, 63, 66], "divisor": [10, 11, 21, 61, 66], "statist": [10, 11, 21, 57, 61, 66], "unbias": [10, 11, 21, 61, 66], "hypothet": [10, 11, 16, 21, 61, 66], "infinit": [10, 11, 21, 61, 66], "popul": [10, 11, 15, 19, 21, 61, 66], "likelihood": [10, 11, 21, 61, 66], "333333333333333": [10, 11, 66], "group_std": [10, 11, 66], "sqrt": [10, 11, 21, 61, 66], "se": [10, 11, 21, 61, 66], "5275252316519465": [10, 11, 66], "0954451150103321": [10, 11, 66], "group_mean": [10, 11, 66], "6666666666666665": [10, 11, 66], "7999999999999998": [10, 11, 66], "median": [10, 11, 57, 66], "group_median": [10, 11, 66], "75": [10, 11, 22, 64, 66], "minimum": [10, 11, 21, 22, 49, 61, 66, 67], "minima": [10, 11, 66], "group_minima": [10, 11, 66], "max": [10, 11, 20, 21, 27, 30, 57, 61, 66, 67, 74], "maxima": [10, 11, 66], "group_maxima": [10, 11, 66], "argmin": [10, 11, 21, 27, 57, 61, 66, 67], "group_argminima": [10, 11, 66], "argmax": [10, 11, 21, 27, 57, 61, 66, 67], "group_argmaxima": [10, 11, 66], "nuniqu": [10, 11, 27, 57, 66], "group_nuniqu": [10, 11, 66], "group_ani": [10, 11, 66], "OR": [10, 11, 27, 36, 57, 66], "bitwis": [10, 11, 66, 69], "AND": [10, 11, 27, 57, 66], "xor": [10, 11, 21, 27, 57, 66], "groupable_element_typ": [10, 11, 23, 28, 66, 71], "modal": [10, 11, 66], "segarrai": [10, 11, 14, 32, 33, 44, 57, 58, 65, 66], "broadcast": [10, 11, 21, 32, 57, 66], "fill": [10, 11, 21, 22, 56, 64, 66], "constant": [10, 11, 21, 57, 66], "put": [10, 11, 38, 66], "tensor": [10, 11, 66], "replic": [10, 11, 66], "zero": [10, 11, 20, 21, 22, 36, 57, 64, 66, 68, 69], "With": [10, 11, 52, 62, 66, 68], "build_from_compon": [10, 11, 57, 66], "init": [10, 11, 51, 66], "rebuild": [10, 11, 35, 37, 38, 66], "orig_kei": [10, 11, 66], "most_common": [10, 11, 32, 57, 66], "total": [10, 11, 14, 30, 58], "nonzero": [10, 11, 19, 30, 74], "go": [10, 11, 36, 38, 50, 54, 64], "invert": [10, 11, 23, 72], "suppli": [10, 11, 14, 22, 27, 42, 44, 45, 64, 65], "row_start": [10, 11], "nnz": [10, 11], "row_numb": [10, 11], "accessor": [11, 33], "align": [11, 33], "array_view": [11, 14, 33, 62], "client_dtyp": [11, 33], "groupbyclass": [11, 23, 28, 33, 72], "infoclass": [11, 33], "io": [11, 33, 43, 44, 45], "io_util": [11, 33], "join": [11, 27, 30, 33, 57], "matcher": [11, 33], "pdarraycr": [11, 21, 33], "pdarraysetop": [11, 27, 33, 70], "plot": [11, 20, 33, 58, 67], "secur": [11, 20, 33], "timeclass": [11, 33], "issupportedint": 11, "num": 11, "akcast": 11, "errormod": [11, 20, 69], "strict": [11, 20, 69], "target": [11, 15, 20, 22, 35, 36, 49, 58, 64, 68, 69], "return_valid": [11, 20, 69], "never": [11, 20, 69], "uninterpret": [11, 20, 69], "63": [11, 20, 21, 69], "succeed": [11, 20, 69], "chapel": [11, 20, 35, 37, 42, 46, 47, 49, 52, 53, 54, 55, 69, 73, 74], "rule": [11, 20, 69], "safe": [11, 20, 36, 69], "underflow": [11, 20, 69], "precis": [11, 14, 20, 58, 69], "capac": [11, 20, 69], "hold": [11, 20, 69], "upon": [11, 20, 30, 51, 52, 53, 55, 61], "choos": [11, 20, 36, 51, 54, 61, 73], "claus": [11, 20, 61], "unequ": [11, 20, 61], "a1": [11, 16, 20, 61], "a2": [11, 16, 20, 61], "cond": [11, 20, 61], "mydtyp": [11, 21, 69], "attributi": [11, 21, 69], "resid": [11, 21, 30, 69], "opeqop": [11, 21], "format_oth": [11, 21], "is_sort": [11, 21, 57, 61, 67], "monoton": [11, 21, 61, 67], "decreas": [11, 21, 22, 37, 61, 64, 67], "numeric_and_bool_scalar": [11, 21], "occurr": [11, 19, 20, 21, 30, 61, 67, 74], "cov": [11, 21], "y": [11, 21, 24, 34, 50], "covari": [11, 21], "coeffici": [11, 21], "mink": [11, 21, 52, 57, 61, 67], "k": [11, 21, 61, 67], "maxk": [11, 21, 52, 57, 61, 67], "argmink": [11, 21, 57, 61, 67], "argmaxk": [11, 21, 57, 61, 67], "popcount": [11, 21], "pariti": [11, 21], "clz": [11, 21], "lead": [11, 21, 30], "ctz": [11, 21], "trail": [11, 21, 30], "rotl": [11, 21], "rotat": [11, 21], "rotr": [11, 21], "astyp": [11, 21, 30], "shorthand": [11, 21, 30], "slice_bit": [11, 21], "bottom": [11, 21, 36], "65": [11, 21], "bin": [11, 20, 21, 24, 49, 50, 54, 67], "0b101111111111111111111111111111111111111111111111111111111111111111": [11, 21], "0b10": [11, 21], "bigint_to_uint_arrai": [11, 21, 22], "18446744073709551616": [11, 21, 22], "18446744073709551617": [11, 21, 22], "18446744073709551618": [11, 21, 22], "18446744073709551619": [11, 21, 22], "18446744073709551620": [11, 21, 22], "give": [11, 21, 28, 41, 49, 53, 71, 73], "fastest": [11, 21], "fortran": [11, 21, 69], "to_cuda": [11, 21], "numba": [11, 21], "devicend": [11, 21], "builtin": [11, 21], "gpu": [11, 21], "devicendarrai": [11, 21], "importerror": [11, 21], "cuda": [11, 21], "modulenotfounderror": [11, 21], "cours": [11, 21], "cwd": [11, 14, 21], "name_prefix_local": [11, 14, 21], "to_parqet": [11, 21], "h5": [11, 14, 21, 58], "node": [11, 21, 42, 56, 58], "name_prefix": [11, 14, 21, 58], "repons": [11, 12, 21, 30], "insensit": [11, 12, 21, 30], "save_al": [11, 12, 14, 21, 45], "older": [11, 12, 21, 42, 49, 50], "later": [11, 21, 30, 53], "former": [11, 21, 30, 74], "free": [11, 21, 30], "registr": [11, 21, 30], "list_registri": [11, 13, 21], "unregister_pdarray_by_nam": [11, 21], "100": [11, 20, 21, 40, 61], "my_zero": [11, 21], "potenti": [11, 21], "reconnect": [11, 21], "attahc": [11, 21], "could": [11, 21, 24, 27, 30, 37, 52, 74], "bound": [11, 21, 22, 27, 31, 64, 70], "consecut": [11, 22, 28, 64], "third": [11, 22, 36, 64], "zerodivisionerror": [11, 22, 64], "neg": [11, 22, 27, 35, 64, 68, 70], "max_bit": [11, 22, 58], "compos": [11, 22, 30, 47, 58], "dequ": [11, 22, 58], "nbyte": [11, 22, 30, 58], "malform": [11, 22, 58], "overwhelm": [11, 22, 58], "bandwidth": [11, 22, 58], "pdrrai": [11, 22, 58], "twice": [11, 22, 58], "recurs": [11, 22, 58], "respect": [11, 20, 21, 22, 23, 31, 36, 58, 64], "parseabl": [11, 22, 64], "zeros_lik": [11, 22, 57, 64], "strings_pdarrai": [11, 30], "bytes_s": [11, 30], "encapsul": [11, 22, 26, 30], "composit": [11, 30], "raw": [11, 30, 74], "rep_msg": [11, 27, 30, 52], "factori": [11, 12, 30], "1234": [11, 30, 36], "probabl": [11, 30], "from_part": [11, 27, 30], "offset_attrib": [11, 30], "bytes_attrib": [11, 30], "assembl": [11, 30], "entiti": [11, 30], "get_length": [11, 30], "encod": [11, 30, 74], "toencod": [11, 30], "fromencod": [11, 30], "decod": [11, 30], "to_low": [11, 30], "uppercas": [11, 22, 30], "lowercas": [11, 22, 30], "to_upp": [11, 30], "to_titl": [11, 30], "titlecas": [11, 30], "is_low": [11, 30], "is_upp": [11, 30], "upper": [11, 30, 36], "is_titl": [11, 30], "mix": [11, 30, 31, 62], "strip": [11, 30], "char": [11, 30], "omit": [11, 30, 31, 42], "whitespac": [11, 14, 30], "combin": [11, 30, 31, 38], "1string": [11, 30], "cached_regex_pattern": [11, 30], "regex": [11, 30, 74], "pattern": [11, 18, 19, 30, 36, 40, 66, 74], "purge_cached_regex_pattern": [11, 30], "purg": [11, 30], "find_loc": [11, 19, 30, 57, 74], "postit": [11, 30, 74], "positon": [11, 30, 74], "findal": [11, 19, 30, 57, 74], "num_match": [11, 30, 74], "regular": [11, 30, 57], "1_2___": [11, 18, 30, 74], "____": [11, 18, 30, 74], "__4___5____6___7": [11, 18, 30, 74], "span": [11, 30, 74], "fullmatch": [11, 30, 57, 74], "whole": [11, 30, 36, 74], "maxsplit": [11, 19, 30, 74], "return_seg": [11, 19, 30, 74], "5____6___7": [11, 30, 74], "return_match_origin": [11, 18, 19, 30, 74], "conta": [11, 30, 74], "___": [11, 30, 74], "__": [11, 18, 30, 74], "sub": [11, 19, 27, 30, 57, 74], "repl": [11, 19, 30, 74], "obtain": [11, 19, 30, 74], "substitut": [11, 19, 30, 47, 49, 74], "substitu": [11, 30, 74], "subn": [11, 30, 57, 74], "new_str": [11, 30, 74], "number_of_substit": [11, 30, 74], "re2": [11, 30, 49, 74], "lookahead": [11, 30, 74], "lookbehind": [11, 30, 74], "rasi": [11, 30, 74], "ior": [11, 30, 74], "strings_end": [11, 30, 74], "strings_start": [11, 30, 74], "ing": [11, 30, 74], "flatten": [11, 16, 27, 30, 42, 57, 70], "unpack": [11, 30, 47, 51, 74], "flat": [11, 30, 74], "peel": [11, 30, 57, 74], "rpeel": [11, 30, 57, 74], "orig": [11, 30, 74], "six": [11, 30, 74], "one_two": [11, 30, 74], "three_____four____f": [11, 30, 74], "under_flat": [11, 30, 74], "under_map": [11, 30, 74], "includedelimit": [11, 30, 74], "keepparti": [11, 30, 74], "fromright": [11, 30, 74], "off": [11, 30, 37, 74], "partit": [11, 30, 74], "experiment": [11, 30, 74], "sought": [11, 30, 74], "prepend": [11, 27, 30, 57, 74], "remaind": [11, 30, 74], "stick": [11, 30, 38, 57, 74], "lstick": [11, 30, 57, 74], "rpartit": [11, 30, 74], "compar": [11, 30, 36, 56, 58, 74], "toleft": [11, 30, 74], "insert": [11, 30, 74], "get_prefix": [11, 27, 30, 57, 70], "return_origin": [11, 27, 30, 70], "proper": [11, 27, 30, 32, 70], "long": [11, 27, 30, 38, 70], "enough": [11, 27, 30, 42, 70], "mask": [11, 27, 30, 70], "origin_indic": [11, 27, 30, 70], "get_suffix": [11, 27, 30, 57, 70], "ith": [11, 30], "siphash128": [11, 30], "balanc": [11, 30], "realist": [11, 30], "collis": [11, 20, 30], "neglig": [11, 30], "compil": [11, 30, 35, 38, 39, 49, 50, 51, 52, 54], "ssegmentedstr": [11, 30], "usehash": [11, 30], "mere": [11, 30], "hello": [11, 30, 58, 74], "my": [11, 30, 37, 58, 74], "world": [11, 30, 58, 74], "u5": [11, 30, 58, 74], "segstr": [11, 30], "strings_arrai": [11, 30, 42], "save_offset": [11, 30], "deriv": [11, 14, 15, 20, 30, 69], "unregister_strings_by_nam": [11, 30], "clear": [11, 21], "smallest": [11, 21, 28, 61, 71], "outperform": [11, 21, 61], "grow": [11, 21, 61], "beyond": [11, 21, 40, 61], "certain": [11, 21, 34, 52, 61], "depend": [11, 21, 50, 51, 54, 55, 61, 70], "million": [11, 20, 21, 61], "degred": [11, 21, 61], "largest": [11, 21, 28, 61, 71], "degrad": [11, 21, 61], "maxmum": [11, 21, 61], "odd": [11, 21], "lz": [11, 21], "62": [11, 21], "61": [11, 21], "60": [11, 21], "rot": [11, 21], "160": [11, 21], "384": [11, 21], "896": [11, 21], "2048": [11, 21], "4608": [11, 21], "512": [11, 21], "256": [11, 21], "56": [11, 21, 41], "32": [11, 21, 26, 40, 42], "18": [11, 21, 61, 62, 68], "pdarri": [11, 21], "pdaarrai": [11, 21], "At": [11, 21], "elsewher": [11, 21], "retain": [11, 21, 32], "4142135623730951": [11, 21], "7320508075688772": [11, 21], "power": [11, 21, 46, 68], "pwr": [11, 21], "uniniti": [11, 21], "vari": [11, 21, 40, 49, 51, 53, 55, 70], "27": [11, 21, 40, 62], "attach_pdarrai": [11, 21], "algorithm": [11, 20, 29, 47, 60], "sortingalgorithm": [11, 29, 60], "radixsortlsd": [11, 29, 60], "digit": [11, 29, 60], "radix": [11, 29, 60], "stabl": [11, 29, 60, 62], "resili": [11, 29, 60], "uniform": [11, 20, 22, 29, 58, 60, 61, 64], "intens": [11, 29, 40, 60, 64], "move": [11, 27, 29, 38, 40, 60, 64, 70], "forward": [11, 29, 54, 60, 70], "thu": [11, 22, 29, 42, 43, 60, 70], "lexicograph": [11, 29, 36, 60], "pda1": [11, 23, 72], "pda2": [11, 23, 72], "assume_uniqu": [11, 23, 72], "1d": [11, 23, 27, 28, 70, 71, 72], "multia": [11, 23, 72], "multib": [11, 23, 72], "setdiff1d": [11, 23, 27, 40, 57, 70, 72], "setxor1d": [11, 23, 27, 40, 57, 70, 72], "Ones": [11, 22, 64], "ones_lik": [11, 22, 57, 64], "fill_valu": [11, 22], "deleg": [11, 20, 22, 64, 67], "accordingli": [11, 22, 64], "full_lik": [11, 22], "linearli": [11, 22, 31, 64], "evenli": [11, 20, 22, 64, 67], "along": [11, 22, 64], "greater": [11, 22, 64], "seed": [11, 22, 56, 64], "pull": [11, 22, 32, 36, 42, 64], "drawn": [11, 22, 64], "uniformli": [11, 22, 64], "undefin": [11, 22, 64], "92176432277231968": [11, 22, 64], "083130710959903542": [11, 22, 64], "68894208386667544": [11, 22, 64], "9160772326374946": [11, 22, 64], "353429832157099": [11, 22, 64], "5392023718621486": [11, 22, 64], "invok": [11, 22], "30013431967121934": [11, 22], "47383036230759112": [11, 22], "0441791878997098": [11, 22], "standard_norm": [11, 22], "draw": [11, 22], "mu": [11, 22], "sigma": [11, 22], "68586185091150265": [11, 22], "1723810583573375": [11, 22], "567584107142031": [11, 22], "random_strings_uniform": [11, 22], "minlen": [11, 22], "maxlen": [11, 22], "printabl": [11, 22], "random_strings_lognorm": [11, 22], "tvkj": [11, 22], "ewab": [11, 22], "hfmd": [11, 22], "4k": [11, 22], "hff": [11, 22], "logmean": [11, 22], "logstd": [11, 22], "lognorm": [11, 22], "exp": [11, 20, 22, 57, 61], "heavi": [11, 22], "toward": [11, 22], "tvkjte": [11, 22], "abocorhfm": [11, 22], "ludmmgtb": [11, 22], "kwoqnphz": [11, 22], "vsxrrl": [11, 22], "fp": [11, 22], "3q4kc": [11, 22], "hf": [11, 22], "ie": [11, 22], "djkba": [11, 22], "5oz1": [11, 22], "from_seri": [11, 22], "overridden": [11, 22, 26], "situat": [11, 22], "datetim": [11, 22, 31], "timedelta": [11, 22, 31], "57600036956445599": [11, 22], "41619265571741659": [11, 22], "6615356693784662": [11, 22], "choic": [11, 22, 49], "to_datetim": [11, 22], "2018": [11, 22], "datetime64": [11, 22, 31], "01": [11, 22, 36, 38], "1514764800000000000": [11, 22], "datatyp": [11, 22, 42], "nanosecond": [11, 22, 31], "ab": [11, 20, 31, 57, 61], "natur": [11, 20, 61], "logarithm": [11, 20, 61], "3025850929940459": [11, 20, 61], "6051701859880918": [11, 20, 61], "3219280948873626": [11, 20, 61], "6438561897747253": [11, 20, 61], "exponenti": [11, 20, 61], "7182818284590451": [11, 20, 61], "3890560989306504": [11, 20, 61], "085536923187668": [11, 20, 61], "54": [11, 20, 61], "598150033144236": [11, 20, 61], "84010843172504": [11, 20, 61], "46": [11, 20, 61], "454368507659211": [11, 20, 61], "5571769623557188": [11, 20, 61], "33": [11, 20, 61], "494295836924771": [11, 20, 61], "13": [11, 20, 61, 62, 67, 68], "478894913238722": [11, 20, 61], "cumsum": [11, 20, 57, 61], "cumul": [11, 20, 24, 56, 61], "th": [11, 20, 27, 61, 70], "1598310770203937": [11, 20, 61], "4110385860243131": [11, 20, 61], "1622479306453748": [11, 20, 61], "710615785506533": [11, 20, 61], "945880905466208": [11, 20, 61], "cumprod": [11, 20, 57, 61], "5728783400481925": [11, 20, 61], "0472855509390593": [11, 20, 61], "78523998586553": [11, 20, 61], "134": [11, 20, 61], "05309592737584": [11, 20, 61], "450": [11, 20, 61], "21589865655358": [11, 20, 61], "sin": [11, 20, 57, 61], "sine": [11, 20, 61], "cosin": [11, 20, 61], "siphash": [11, 20], "risk": [11, 20, 42], "few": [11, 20, 40], "small": [11, 20, 42, 58], "strongli": [11, 20], "cryptograph": [11, 20], "applic": [11, 20, 58, 64, 66], "Not": [11, 20, 31, 65], "emploi": [11, 20], "adversari": [11, 20], "engin": [11, 20], "histogram": [11, 20, 24, 57], "edg": [11, 20, 24, 67], "notimplementederror": [11, 20, 67], "value_count": [11, 20, 28, 57, 67, 71], "matplotlib": [11, 20, 24, 53, 67], "pyplot": [11, 20, 24, 67], "plt": [11, 20, 24, 67], "nbin": [11, 20, 67], "h": [11, 20, 24, 31, 56, 67, 73], "unique_valu": [11, 20, 67], "return_count": [11, 20, 67], "isnan": [11, 20], "enumer": [11, 20], "join_on_eq_with_dt": [11, 16], "t1": [11, 16], "t2": [11, 16], "pred": [11, 16], "result_limit": [11, 16], "1000": [11, 16, 67], "inner": [11, 16], "window": [11, 16, 26, 47, 55], "predic": [11, 16], "timestamp": [11, 16], "milli": [11, 16], "result_array_on": [11, 16], "true_dt": [11, 16], "abs_dt": [11, 16], "pos_dt": [11, 16], "gen_rang": [11, 16, 27], "pair": [11, 15, 16, 27, 70], "actual": [11, 16, 27, 41], "compute_join_s": [11, 16], "enableverbos": [11, 17], "debug": [11, 17, 34, 38], "disableverbos": [11, 17], "loglevel": [11, 17], "disabl": [11, 17, 34], "defaultt": [11, 17], "allsymbol": [11, 13], "__allsymbols__": [11, 13], "registeredsymbol": [11, 13], "__registeredsymbols__": [11, 13], "list_symbol_t": [11, 13], "pretty_print_inform": [11, 13], "akbool": 11, "akint64": 11, "getarkoudalogg": 11, "handler": 11, "logformat": 11, "default_log_format": 11, "conveni": [11, 51, 58], "instanti": 11, "streamhandl": 11, "consol": 11, "lineno": 11, "levelnam": 11, "dynam": 11, "create_pdarrai": 11, "non_empti": [11, 27], "non_empty_count": [11, 27], "valsiz": [11, 27], "sent": [11, 27, 43], "face": [11, 27, 36, 69], "from_multi_arrai": [11, 27], "transpos": [11, 27, 58], "vertic": [11, 27, 28, 70], "horizont": [11, 27, 28, 70, 71], "unord": [11, 27], "yet": [11, 27, 44, 58, 62], "get_ngram": [11, 27, 57, 70], "gram": [11, 27, 70], "came": [11, 27, 70], "ngram": [11, 27, 57], "get_jth": [11, 27, 57, 70], "j": [11, 27, 34, 35, 51, 70], "backward": [11, 27, 32, 70], "set_jth": [11, 27, 57, 70], "get_length_n": [11, 27, 57, 70], "increas": [11, 27, 70], "append_singl": [11, 27, 57, 70], "prepend_singl": [11, 27, 57, 70], "remove_repeat": [11, 27, 57, 70], "return_multipl": [11, 27, 70], "condens": [11, 27, 70], "norepeat": [11, 27, 70], "segarr": [11, 27, 70], "segment_suffix": [11, 27], "_segment": [11, 27, 42], "value_suffix": [11, 27], "_valu": [11, 27, 42], "top": [11, 27, 28, 37, 42, 49, 55, 71], "nest": [11, 27, 42], "seg_a": [11, 27, 70], "seg_b": [11, 27, 70], "setdiff": [11, 27, 57, 70], "setxor": [11, 27, 57, 70], "unregister_segarray_by_nam": [11, 27], "individu": [11, 25, 34, 74], "akfloat64": 11, "convert_if_categor": [11, 32], "generic_concat": [11, 32], "get_callback": [11, 32], "earlier": [11, 32, 40], "maintain": [11, 12, 14, 43, 58], "is_uniqu": [11, 12], "rtype": [11, 12, 28], "set_dtyp": [11, 12, 59], "to_dict": [11, 12], "multiindex": [11, 12, 28, 59, 71], "accept": [11, 28, 31, 71], "enter": [11, 28, 58, 71], "str_acc": [11, 28], "lst": [11, 28], "scaler": [11, 28, 71], "special": [11, 28, 69, 71], "topn": [11, 28, 71], "sort_index": [11, 28, 71], "frequent": [11, 28, 52, 71], "diff": [11, 28], "to_datafram": [11, 28], "index_label": [11, 28], "value_label": [11, 28], "frame": [11, 28, 71], "registerd": [11, 28], "verticl": [11, 28, 71], "pdconcat": [11, 28, 71], "akuint64": 11, "plot_dist": [11, 24], "xlabel": [11, 24], "newfig": [11, 24], "graph": [11, 24, 66], "figur": [11, 24, 38], "below": [11, 24, 34, 40, 49, 53, 58, 65], "get_filetyp": [11, 14], "read_parquet": [11, 14, 45, 58], "read_hdf": [11, 14, 45, 58], "l": [11, 14, 31, 34, 36, 40, 41, 49, 58], "h5l": [11, 14], "imit": [11, 14], "technic": [11, 14], "ls_csv": [11, 14, 41, 45], "get_null_indic": [11, 14], "shell": [11, 14, 51, 58], "funciton": [11, 14], "datasetnam": [11, 14, 58], "get_dataset": [11, 14, 41, 45, 58], "get_column": [11, 14, 41, 45], "strict_typ": [11, 14], "calc_string_offset": [11, 14, 58], "sign": [11, 14, 58, 65, 69], "uint32": [11, 14, 58, 61, 64, 67, 69, 74], "tell": [11, 14, 58], "versu": [11, 14, 58], "expand": [11, 14, 32, 58], "glob": [11, 14, 58], "independ": [11, 14, 26, 58], "sequenti": [11, 14, 58], "column_delim": [11, 14], "dset_nam": [11, 14], "stricttyp": [11, 14, 58], "invalid": [11, 14, 58], "filetyp": [11, 14, 58], "detect": [11, 14, 42, 58], "import_data": [11, 14, 43, 58], "read_path": [11, 14, 58], "write_fil": [11, 14, 58], "return_obj": [11, 14, 58], "runtimewarn": [11, 14, 58], "dataset_nam": [11, 14, 58], "ak_data": [11, 14, 58], "path_prefix": [11, 14], "wrong": [11, 14, 73], "termin": [11, 14, 42, 47, 54, 73], "filenotfound": [11, 14], "read_": [11, 14], "datsetnam": [11, 14], "get_directori": 15, "pathlib": [15, 26], "write_line_to_fil": 15, "unsupportedopt": 15, "delimited_file_to_dict": 15, "unsupportedoper": 15, "dict_to_delimited_fil": 15, "oerror": 15, "parent_entry_nam": [18, 19], "match_typ": [18, 19, 57, 74], "matchtyp": [18, 19, 74], "indici": [18, 74], "find_match": [18, 57, 74], "group_num": [18, 74], "return_group_origin": [18, 74], "isaac": [18, 74], "newton": [18, 74], "physic": [18, 74], "calculu": [18, 74], "gottfri": [18, 74], "leibniz": [18, 74], "math": [18, 74], "w": [18, 31, 74], "locationsinfo": 19, "get_match": 19, "return_num_sub": 19, "username_token": 26, "generate_token": 26, "secret": 26, "token_hex": 26, "hexidecim": 26, "get_home_directori": 26, "platform": 26, "home": [26, 49, 52], "expandus": 26, "get_arkouda_client_directori": 26, "artifact": 26, "environ": [26, 47, 52, 53], "get_usernam": 26, "host": [26, 49], "environmenterror": 26, "linux": [26, 49, 54, 55], "maco": [26, 50, 55], "aka": 26, "darwin": 26, "generate_username_token_json": 26, "_base_unit": 31, "_abstractbasetim": 31, "datetimeindex": 31, "timeseri": 31, "carri": 31, "sensit": 31, "sec": 31, "week": [31, 66], "hour": 31, "minut": 31, "millisecond": 31, "microsecond": 31, "month": [31, 36], "year": 31, "day_of_year": 31, "dayofyear": 31, "day_of_week": 31, "dayofweek": [31, 66], "weekdai": 31, "weekofyear": 31, "is_leap_year": 31, "supported_with_datetim": 31, "supported_with_r_datetim": 31, "supported_with_timedelta": 31, "supported_with_r_timedelta": 31, "supported_opeq": 31, "supported_with_pdarrai": 31, "supported_with_r_pdarrai": 31, "isocalendar": 31, "durat": 31, "timedeltaindex": 31, "timedelta64": 31, "total_second": 31, "date_rang": 31, "period": 31, "freq": 31, "tz": 31, "impos": 31, "dateoffset": 31, "5h": 31, "offset_alias": 31, "alias": 31, "tzinfo": 31, "zone": 31, "asia": 31, "hong_kong": 31, "timezon": 31, "naiv": 31, "midnight": 31, "boundari": 31, "effect": [31, 38, 72], "rng": 31, "Of": 31, "exactli": 31, "learn": [31, 47], "timedelta_rang": 31, "report_mem": 32, "register_al": 32, "attach_al": 32, "unregister_al": 32, "enrich_inplac": 32, "keynam": 32, "seg": 32, "unregister_by_nam": 32, "page": [33, 36, 49], "auto": [33, 36], "arkouda": [33, 36, 38, 39, 43, 45, 50, 51, 53, 54, 55, 56, 57, 58, 60, 61, 63, 64, 66, 67, 68, 69, 72], "sphinx": [33, 49, 53], "autoapi": [33, 53], "featur": [34, 35, 36, 37, 49, 52, 58, 66], "walk": [34, 47], "chpl_comm": [34, 50], "gasnet_spawnfn": 34, "gasnet_route_output": 34, "chpl_gasnet_cfg_opt": 34, "ibv": 34, "gasnet_quiet": [34, 50], "gasnet_masterip": 34, "127": 34, "gasnet_workerip": 34, "chpl_test_timeout": 34, "500": [34, 37], "chpl_rt_oversubscrib": [34, 50], "ye": [34, 50], "gasnetsetup": 34, "cd": [34, 47, 50, 51, 53], "chpl_home": [34, 50], "16": [34, 35, 51, 61, 62, 68], "nl": [34, 47, 73], "would": [34, 38, 43, 58, 61, 66], "too": [35, 58], "backend": [35, 49], "parallel": [35, 58, 69, 72], "leverag": [35, 50], "increment": [35, 36], "everyth": [35, 36], "cut": [35, 36, 38], "somewhat": 35, "heroic": 35, "acceler": 35, "makebinari": 35, "bottleneck": 35, "tend": 35, "chpl_target_compil": 35, "clang": [35, 50], "gnu": [35, 51, 54], "j16": 35, "purpos": [36, 59, 65, 71], "outlin": [36, 42], "taken": [36, 52], "evolv": 36, "gain": 36, "core": 36, "team": 36, "main": [36, 42], "action": 36, "navig": [36, 49, 50, 53], "click": [36, 49, 55], "draft": 36, "button": 36, "bring": 36, "text": [36, 41, 58], "box": 36, "final": [36, 49], "publish": 36, "scheme": 36, "yyyi": 36, "mm": 36, "dd": 36, "v2022": 36, "31": 36, "dot": 36, "hei": 36, "mistak": 36, "happen": 36, "ok": 36, "dash": 36, "etc": [36, 50, 54], "underneath": 36, "excel": 36, "describ": 36, "next": [36, 38, 49, 52, 73], "major": [36, 41, 59, 65, 71], "minor": 36, "review": 36, "Or": 36, "straight": 36, "green": 36, "believ": 36, "loos": 36, "itself": 36, "remot": [36, 73], "upstream": 36, "someth": [36, 37, 73], "fetch": [36, 38], "previou": [36, 38], "recent": 36, "ellips": 36, "prev": 36, "onlin": [36, 54], "concis": 36, "onelin": 36, "graphic": 36, "gitk": 36, "push": [36, 49], "abl": [36, 42, 43, 51, 58], "descript": [36, 40, 57], "strive": 36, "relat": [36, 40], "hyperlink": 36, "creation": [36, 57], "reason": [36, 38], "guidelin": [36, 74], "substanti": 36, "bug": [36, 39], "smaller": [36, 41, 58], "coupl": 37, "unset": [37, 51], "optim": 37, "wors": 37, "matter": 37, "hit": 37, "chpl_develop": [37, 51], "rebuilt": 37, "homebrew": [37, 49], "shouldn": [37, 38], "worri": 37, "biggest": 37, "involv": [37, 55], "modul": [37, 38, 47, 58, 74], "focus": 37, "just": [37, 38, 69], "crucial": 37, "saveusedmodul": [37, 38, 52], "piec": 37, "modifi": 37, "stream": 37, "benchmark": [37, 52, 56], "python3": [37, 49, 50], "interact": [37, 41, 45, 46, 47, 51, 53], "ran": 37, "script": [37, 51, 52, 56], "session": [37, 47], "usedmodul": [37, 38, 52], "ctrl": 37, "easiest": 37, "mv": [37, 38], "arkouda_config_fil": [37, 52], "know": 37, "ll": [37, 38, 49], "suggest": [38, 54], "gasnet": [38, 39, 50], "report": 38, "releas": [38, 39, 49, 50, 51], "pretti": 38, "frustrat": 38, "past": 38, "recompil": 38, "checkout": 38, "v2023": [38, 47], "isn": 38, "mine": 38, "wherev": 38, "rememb": [38, 40], "won": 38, "overnight": 38, "hog": 38, "modular": 38, "ve": 38, "got": 38, "forget": [38, 54], "techniqu": 38, "abov": [38, 40, 49, 50, 65, 74], "unnecessari": 38, "tip": [39, 49], "usag": [39, 47, 56, 70, 73], "aim": 40, "introduct": 40, "commonli": 40, "exhaust": [40, 42], "ak_arr": 40, "easili": 40, "np_arr": 40, "52": 40, "84": 40, "80": 40, "71": 40, "aid": [40, 42], "transit": 40, "toolset": 40, "IN": 40, "ak_in1d": 40, "ak_int": 40, "m1": 40, "m2": 40, "ak_in1dmult": 40, "ak_in1dmulti": 40, "ak_intmult": 40, "though": 40, "extrem": [40, 42, 44], "let": 40, "sever": [40, 42, 58, 61, 64], "column_nam": 40, "column_data": 40, "fname": 40, "john": 40, "jane": 40, "jake": 40, "lname": 40, "smith": 40, "brown": 40, "ag": 40, "37": 40, "35": 40, "50": 40, "salari": 40, "75000": 40, "77000": 40, "100000": 40, "35000": 40, "f_name": 40, "l_name": 40, "notic": 40, "demo": 40, "computation": 40, "interest": 40, "17": [40, 62, 68], "comma": [41, 49], "cola": 41, "colb": 41, "colc": 41, "abc": 41, "def": [41, 52], "ghi": 41, "comparison": [41, 63, 69, 70, 74], "arkodua": [41, 42], "flexibl": 42, "adher": 42, "portion": 42, "isbool": 42, "file_vers": 42, "arkouda_vers": 42, "c_string": 42, "mark": 42, "therefor": 42, "unflatten": 42, "reconstruct": 42, "number_of_dimens": 42, "array_of_size_rank": 42, "current_arkouda_vers": 42, "subsequ": 42, "notifi": 42, "elect": [42, 43], "ONE": 42, "explicit": [42, 69], "still": [42, 74], "orient": [44, 63, 65, 69, 74], "benefici": 44, "soon": 44, "progress": [44, 51], "writ": 44, "paruqet": 44, "ineffiec": 44, "fact": 44, "analyt": 46, "supercomput": 46, "guid": [47, 51], "visit": [47, 51], "installt": 47, "conda": [47, 49, 50, 51, 53], "yml": [47, 50, 51, 53], "download": [47, 49, 50, 51, 55], "02": 47, "08": 47, "tar": [47, 49, 50, 51], "xzf": [47, 51], "2023": 47, "gz": [47, 49, 50, 51], "listen": [47, 73], "your_machin": 47, "chapel_vers": 47, "15461882265": 47, "token_str": 47, "ipython": 47, "jupyt": [47, 50, 51], "notebook": 47, "node01": [47, 73], "caus": [47, 49], "exit": [47, 54], "prerequisit": [49, 51], "proceed": 49, "clone": [49, 55], "repo": [49, 50, 55], "further": [49, 55], "manag": [49, 50, 51, 53, 55], "md": [49, 51], "makefil": 49, "manual": [49, 51], "zeromq": [49, 53], "eval": 49, "anaconda3": [49, 50, 51], "No": [49, 54], "pip": [49, 50, 51], "grep": [49, 54], "opt": [49, 50, 51], "caskroom": [49, 51], "miniforg": 49, "site": 49, "channel": 49, "nompi_hf9525e8_104": 49, "forg": 49, "rpath": 49, "cmake": [49, 50, 53], "rhel": 49, "cento": [49, 50], "cm_version": 49, "wget": [49, 50], "kitwar": 49, "x86_64": [49, 50, 54], "sh": [49, 50, 51], "licens": 49, "subdir": 49, "boost": 49, "cpp": 49, "thrift": 49, "utf8proc": 49, "virtual": 49, "venv": [49, 50], "activ": [49, 50, 51, 66], "upgrad": [49, 53], "wheel": 49, "clean": 49, "deactiv": 49, "rm": 49, "rf": 49, "dist": 49, "whl": 49, "chpldoc": [49, 50], "frontend": 49, "browser": 49, "html": [49, 62], "ghpage": 49, "scroll": 49, "folder": 49, "homepag": 49, "particularli": [50, 52], "regard": 50, "distro": 50, "gcc": 50, "consequ": 50, "newer": 50, "devtoolset": 50, "packag": [50, 51, 53, 55], "softwar": 50, "kernel": 50, "sudo": [50, 54], "apt": 50, "m4": 50, "perl": 50, "bash": [50, 51], "mawk": 50, "pkg": 50, "config": [50, 52], "llvm": [50, 51, 54], "libclang": 50, "cpp12": 50, "libedit": 50, "latest": [50, 51], "explod": 50, "archiv": 50, "lang": 50, "29": [50, 51, 53, 54, 62], "xvf": 50, "pwd": 50, "setchplenv": [50, 51], "chplconfig": 50, "chpl_comm_substr": 50, "smp": 50, "chpl_target_cpu": 50, "chpl_re2": [50, 51], "bundl": [50, 51], "chpl_llvm": [50, 51], "chpl_gmp": [50, 51], "linux64": 50, "yum": 50, "devel": 50, "gawk": 50, "curl": 50, "incompat": 50, "el7": 50, "scl": 50, "rh": 50, "highli": 50, "2020": 50, "07": 50, "bashrc": [50, 54], "account": [51, 54], "chipset": 51, "quickstart": [51, 55], "zsh": 51, "brew": 51, "gmp": 51, "rc": 51, "successfulli": 51, "hello3": 51, "datapar": 51, "exact": 51, "2022": 51, "macosx": 51, "arm64": 51, "life": [51, 53], "cycl": [51, 53], "sync": 51, "funcion": 52, "prior": 52, "exclud": 52, "valuabl": 52, "switch": [52, 62], "src": 52, "totestmsg": 52, "testmsg": 52, "addition": [52, 59], "might": 52, "kextrememsg": 52, "registerfunct": 52, "minkmsg": 52, "getmodulenam": 52, "maxkmsg": 52, "accomplish": [52, 58], "approach": [52, 70], "generic_msg": 52, "test_command": 52, "cmd": 52, "__dict__": 52, "sometim": [52, 62, 69], "difficult": 52, "discov": 52, "particular": 52, "inspect": [52, 58], "wish": 52, "pyzmq": 53, "typeguard": 53, "tabul": 53, "pyfiglet": 53, "h5py": [53, 58], "pyarrow": [53, 58], "pexpect": 53, "argpars": 53, "furo": 53, "myst": 53, "parser": 53, "linkifi": 53, "ast": 53, "931": 53, "990": 53, "yaml": 53, "env_nam": 53, "yaml_fil": 53, "prune": 53, "path_to_arkouda": 53, "strategi": [53, 54, 58], "eager": 53, "subsystem": 54, "wsl": 54, "launch": [54, 57], "rout": 54, "ubuntu": 54, "04": 54, "lt": 54, "tutori": 54, "microsoft": 54, "app": 54, "symlink": 54, "tblgen": 54, "libtinfow": 54, "ln": 54, "libtic": 54, "plan": [54, 55, 67, 69], "powershel": 54, "id": [54, 66], "vcxsrv": 54, "x410": 54, "whichev": 54, "firewal": 54, "xserver": 54, "hous": 54, "conf": 54, "nameserv": 54, "awk": 54, "serv": 55, "wsl2": 55, "measur": 56, "trial": 56, "100000000": 56, "index_s": 56, "value_s": 56, "alpha": 56, "arithmet": [57, 69], "scan": 57, "gather": 57, "scatter": 57, "summar": [57, 58], "dedupl": 57, "setop": 57, "primarili": 58, "columnar": 58, "spread": 58, "mpi": 58, "layer": 58, "pipelin": [58, 74], "aggress": 58, "hundr": 58, "thousand": 58, "ingest": [58, 74], "customiz": 58, "schema": 58, "taht": 58, "autoclass": 59, "offer": [59, 65, 71, 74], "mathemat": 61, "int8": [61, 64, 67, 69, 74], "int16": [61, 64, 67, 69, 74], "int32": [61, 64, 67, 69, 74], "uint16": [61, 64, 67, 69, 74], "multiplex": 61, "19": [62, 68], "26": 62, "28": 62, "advanc": 62, "talk": 62, "org": 62, "cartesian": 62, "coordin": 62, "wherea": [62, 74], "discourag": [62, 63, 65, 69, 70, 74], "forc": [62, 63, 65, 69, 74], "concept": 63, "almost": [63, 65, 69, 74], "liter": [63, 74], "alon": [63, 74], "unrel": 64, "movement": 64, "unsign": 65, "ieee": [65, 69], "1073741824": 65, "workhors": 66, "scienc": 66, "extract": 66, "imagin": 66, "bydayofweek": 66, "numid": 66, "013": 67, "36": 67, "934176000000015": 67, "07734942223993": 67, "syntax": 68, "assig": 68, "42": 68, "ind": 68, "matlab": 68, "outer": 68, "touch": 68, "expans": 68, "lim": 68, "backbon": 69, "And": 69, "expos": 69, "incorpor": 69, "implicit": 69, "loss": 70, "functioanl": 70, "strucutur": 70, "abil": 70, "arraysetop": 72, "shown": 73, "sai": 73, "went": 73, "reachabl": 73, "wide": 74, "compris": 74, "whenev": 74, "threshold": 74, "pipe": 74, "googl": 74, "sacrific": 74, "notabl": 74, "exchang": 74, "linear": 74, "stack": 74}, "objects": {"": [[11, 0, 0, "-", "arkouda"]], "arkouda": [[11, 1, 1, "", "ARKOUDA_SUPPORTED_DTYPES"], [11, 1, 1, "", "AllSymbols"], [62, 2, 1, "", "ArrayView"], [11, 2, 1, "", "BitVector"], [11, 5, 1, "", "BitVectorizer"], [11, 2, 1, "", "CachedAccessor"], [63, 2, 1, "", "Categorical"], [11, 1, 1, "", "DTypeObjects"], [11, 1, 1, "", "DTypes"], [65, 2, 1, "", "DataFrame"], [11, 2, 1, "", "DatetimeAccessor"], [11, 2, 1, "", "ErrorMode"], [11, 2, 1, "", "Fields"], [11, 1, 1, "", "GROUPBY_REDUCTION_TYPES"], [66, 2, 1, "", "GroupBy"], [11, 2, 1, "", "IPv4"], [59, 2, 1, "", "Index"], [11, 2, 1, "", "MultiIndex"], [11, 7, 1, "", "NonUniqueError"], [11, 2, 1, "", "Properties"], [11, 1, 1, "", "RegisteredSymbols"], [11, 7, 1, "id210", "RegistrationError"], [11, 2, 1, "", "Row"], [11, 2, 1, "", "SegArray"], [71, 2, 1, "", "Series"], [11, 2, 1, "", "StringAccessor"], [11, 2, 1, "id640", "Strings"], [61, 5, 1, "", "abs"], [2, 0, 0, "-", "accessor"], [11, 1, 1, "id278", "akbool"], [11, 5, 1, "", "akcast"], [11, 1, 1, "id430", "akfloat64"], [11, 1, 1, "id431", "akint64"], [11, 1, 1, "", "akuint64"], [11, 5, 1, "", "align"], [3, 0, 0, "-", "alignment"], [61, 5, 1, "", "all"], [11, 1, 1, "", "all_scalars"], [61, 5, 1, "", "any"], [64, 5, 1, "", "arange"], [61, 5, 1, "", "argmax"], [61, 5, 1, "", "argmaxk"], [61, 5, 1, "", "argmin"], [61, 5, 1, "", "argmink"], [60, 5, 1, "", "argsort"], [58, 5, 1, "", "array"], [4, 0, 0, "-", "array_view"], [11, 5, 1, "", "attach_pdarray"], [11, 1, 1, "id429", "bigint"], [11, 5, 1, "", "bigint_from_uint_arrays"], [11, 1, 1, "id4", "bitType"], [11, 1, 1, "", "bool"], [11, 1, 1, "", "bool_scalars"], [11, 5, 1, "id471", "broadcast"], [69, 5, 1, "", "cast"], [5, 0, 0, "-", "categorical"], [11, 5, 1, "", "check_np_dtype"], [11, 5, 1, "", "clear"], [6, 0, 0, "-", "client"], [7, 0, 0, "-", "client_dtypes"], [11, 5, 1, "", "clz"], [60, 5, 1, "", "coargsort"], [11, 5, 1, "", "compute_join_size"], [64, 5, 1, "", "concatenate"], [73, 5, 1, "", "connect"], [11, 5, 1, "", "convert_if_categorical"], [11, 5, 1, "", "corr"], [61, 5, 1, "", "cos"], [11, 5, 1, "", "cov"], [11, 5, 1, "", "create_pdarray"], [11, 5, 1, "", "ctz"], [61, 5, 1, "", "cumprod"], [61, 5, 1, "", "cumsum"], [8, 0, 0, "-", "dataframe"], [11, 5, 1, "", "date_operators"], [11, 5, 1, "", "disableVerbose"], [11, 5, 1, "", "dtype"], [9, 0, 0, "-", "dtypes"], [11, 5, 1, "", "enableVerbose"], [61, 5, 1, "", "exp"], [58, 5, 1, "", "export"], [11, 5, 1, "", "find"], [11, 1, 1, "", "float64"], [11, 1, 1, "", "float_scalars"], [11, 5, 1, "", "from_series"], [11, 5, 1, "id531", "full"], [11, 5, 1, "", "full_like"], [11, 5, 1, "id273", "gen_ranges"], [11, 5, 1, "", "generic_concat"], [11, 5, 1, "", "getArkoudaLogger"], [11, 5, 1, "", "get_byteorder"], [11, 5, 1, "", "get_callback"], [11, 5, 1, "", "get_columns"], [58, 5, 1, "", "get_datasets"], [11, 5, 1, "", "get_filetype"], [11, 5, 1, "", "get_null_indices"], [11, 5, 1, "", "get_server_byteorder"], [10, 0, 0, "-", "groupbyclass"], [11, 5, 1, "", "hash"], [67, 5, 1, "", "histogram"], [58, 5, 1, "", "import_data"], [72, 5, 1, "", "in1d"], [11, 5, 1, "", "in1d_intervals"], [12, 0, 0, "-", "index"], [13, 0, 0, "-", "infoclass"], [11, 5, 1, "", "information"], [11, 1, 1, "", "int64"], [11, 1, 1, "id3", "intTypes"], [11, 1, 1, "", "int_scalars"], [11, 5, 1, "", "intersect"], [72, 5, 1, "", "intersect1d"], [11, 5, 1, "", "interval_lookup"], [11, 5, 1, "", "intx"], [11, 5, 1, "", "invert_permutation"], [14, 0, 0, "-", "io"], [15, 0, 0, "-", "io_util"], [11, 5, 1, "", "ip_address"], [11, 5, 1, "id165", "isSupportedInt"], [11, 5, 1, "", "is_cosorted"], [11, 5, 1, "", "is_ipv4"], [11, 5, 1, "", "is_ipv6"], [61, 5, 1, "", "is_sorted"], [11, 5, 1, "", "isnan"], [16, 0, 0, "-", "join"], [11, 5, 1, "", "join_on_eq_with_dt"], [11, 5, 1, "", "left_align"], [64, 5, 1, "", "linspace"], [11, 5, 1, "id320", "list_registry"], [11, 5, 1, "", "list_symbol_table"], [11, 5, 1, "", "load"], [11, 5, 1, "", "load_all"], [61, 5, 1, "", "log"], [17, 0, 0, "-", "logger"], [11, 5, 1, "", "lookup"], [11, 5, 1, "", "ls"], [11, 5, 1, "", "ls_csv"], [18, 0, 0, "-", "match"], [19, 0, 0, "-", "matcher"], [61, 5, 1, "", "max"], [61, 5, 1, "", "maxk"], [61, 5, 1, "", "mean"], [61, 5, 1, "", "min"], [61, 5, 1, "", "mink"], [20, 0, 0, "-", "numeric"], [11, 1, 1, "", "numeric_scalars"], [11, 1, 1, "", "numpy_scalars"], [64, 5, 1, "", "ones"], [64, 5, 1, "", "ones_like"], [11, 5, 1, "", "parity"], [69, 2, 1, "", "pdarray"], [21, 0, 0, "-", "pdarrayclass"], [22, 0, 0, "-", "pdarraycreation"], [23, 0, 0, "-", "pdarraysetops"], [11, 5, 1, "", "plot_dist"], [24, 0, 0, "-", "plotting"], [11, 5, 1, "", "popcount"], [11, 5, 1, "", "power"], [11, 5, 1, "", "pretty_print_information"], [61, 5, 1, "", "prod"], [64, 5, 1, "", "randint"], [11, 5, 1, "", "random_strings_lognormal"], [11, 5, 1, "", "random_strings_uniform"], [58, 5, 1, "", "read"], [11, 5, 1, "", "read_csv"], [11, 5, 1, "", "read_hdf"], [11, 5, 1, "", "read_parquet"], [11, 5, 1, "", "register"], [11, 5, 1, "", "resolve_scalar_dtype"], [11, 5, 1, "", "right_align"], [11, 5, 1, "", "rotl"], [11, 5, 1, "", "rotr"], [25, 0, 0, "-", "row"], [11, 5, 1, "", "save_all"], [11, 5, 1, "", "search_intervals"], [26, 0, 0, "-", "security"], [27, 0, 0, "-", "segarray"], [28, 0, 0, "-", "series"], [72, 5, 1, "", "setdiff1d"], [72, 5, 1, "", "setxor1d"], [61, 5, 1, "", "sin"], [11, 5, 1, "", "sort"], [11, 5, 1, "", "sorted"], [29, 0, 0, "-", "sorting"], [11, 5, 1, "", "sqrt"], [11, 5, 1, "", "standard_normal"], [61, 5, 1, "", "std"], [11, 1, 1, "id166", "str_"], [11, 1, 1, "", "str_scalars"], [11, 5, 1, "", "string_operators"], [30, 0, 0, "-", "strings"], [61, 5, 1, "", "sum"], [31, 0, 0, "-", "timeclass"], [11, 5, 1, "", "to_csv"], [11, 5, 1, "", "to_hdf"], [11, 5, 1, "", "to_parquet"], [11, 5, 1, "id167", "translate_np_dtype"], [11, 1, 1, "", "uint64"], [11, 1, 1, "", "uint8"], [11, 5, 1, "", "uniform"], [72, 5, 1, "", "union1d"], [72, 5, 1, "", "unique"], [11, 5, 1, "", "unregister_pdarray_by_name"], [11, 5, 1, "", "unsqueeze"], [32, 0, 0, "-", "util"], [67, 5, 1, "", "value_counts"], [61, 5, 1, "", "var"], [61, 5, 1, "", "where"], [11, 5, 1, "", "zero_up"], [64, 5, 1, "", "zeros"], [64, 5, 1, "", "zeros_like"]], "arkouda.ArrayView": [[62, 3, 1, "", "base"], [62, 3, 1, "", "dtype"], [62, 3, 1, "", "itemsize"], [62, 3, 1, "", "ndim"], [62, 3, 1, "", "order"], [62, 3, 1, "", "shape"], [62, 3, 1, "", "size"], [11, 4, 1, "", "to_hdf"], [11, 4, 1, "", "to_list"], [62, 5, 1, "", "to_ndarray"]], "arkouda.BitVector": [[11, 3, 1, "", "conserves"], [11, 4, 1, "", "format"], [11, 4, 1, "", "opeq"], [11, 4, 1, "", "to_list"], [11, 4, 1, "", "to_ndarray"]], "arkouda.Categorical": [[11, 3, 1, "id607", "BinOps"], [11, 3, 1, "id608", "RegisterablePieces"], [11, 3, 1, "id609", "RequiredPieces"], [11, 4, 1, "id626", "argsort"], [11, 4, 1, "id637", "attach"], [63, 3, 1, "", "categories"], [63, 3, 1, "", "codes"], [11, 4, 1, "id628", "concatenate"], [63, 4, 1, "", "contains"], [63, 4, 1, "", "endswith"], [63, 4, 1, "", "from_codes"], [11, 4, 1, "id615", "from_return_msg"], [11, 4, 1, "id625", "group"], [11, 4, 1, "id623", "in1d"], [11, 4, 1, "id635", "info"], [11, 4, 1, "id634", "is_registered"], [11, 4, 1, "id618", "isna"], [63, 3, 1, "", "ndim"], [63, 3, 1, "", "nlevels"], [11, 6, 1, "id606", "objtype"], [11, 4, 1, "id639", "parse_hdf_categoricals"], [63, 3, 1, "", "permutation"], [11, 4, 1, "id636", "pretty_print_info"], [11, 4, 1, "id632", "register"], [11, 4, 1, "id619", "reset_categories"], [11, 4, 1, "id631", "save"], [63, 3, 1, "", "segments"], [11, 4, 1, "id614", "set_categories"], [63, 3, 1, "", "shape"], [63, 3, 1, "", "size"], [11, 4, 1, "id627", "sort"], [11, 4, 1, "id613", "standardize_categories"], [63, 4, 1, "", "startswith"], [11, 4, 1, "id629", "to_hdf"], [11, 4, 1, "id617", "to_list"], [63, 5, 1, "", "to_ndarray"], [11, 4, 1, "id630", "to_parquet"], [11, 4, 1, "id624", "unique"], [11, 4, 1, "id633", "unregister"], [11, 4, 1, "id638", "unregister_categorical_by_name"]], "arkouda.DataFrame": [[11, 3, 1, "", "COLUMN_CLASSES"], [11, 4, 1, "", "GroupBy"], [11, 4, 1, "", "append"], [65, 5, 1, "", "apply_permutation"], [65, 5, 1, "", "argsort"], [11, 4, 1, "", "attach"], [65, 5, 1, "", "coargsort"], [11, 6, 1, "", "columns"], [65, 5, 1, "", "concat"], [65, 5, 1, "", "copy"], [11, 4, 1, "", "corr"], [65, 5, 1, "", "drop"], [65, 5, 1, "", "drop_duplicates"], [11, 6, 1, "", "dtypes"], [11, 6, 1, "", "empty"], [11, 4, 1, "", "filter_by_range"], [11, 4, 1, "", "from_pandas"], [11, 4, 1, "", "from_return_msg"], [65, 5, 1, "", "groupby"], [65, 5, 1, "", "head"], [11, 6, 1, "", "index"], [11, 6, 1, "", "info"], [11, 4, 1, "", "is_registered"], [11, 4, 1, "", "isin"], [11, 4, 1, "", "load"], [11, 4, 1, "", "memory_usage"], [11, 4, 1, "", "read_csv"], [11, 4, 1, "", "register"], [65, 5, 1, "", "rename"], [65, 5, 1, "", "reset_index"], [11, 4, 1, "", "sample"], [11, 4, 1, "", "save"], [11, 6, 1, "", "shape"], [11, 6, 1, "", "size"], [65, 5, 1, "", "sort_values"], [65, 5, 1, "", "tail"], [11, 4, 1, "", "to_csv"], [11, 4, 1, "", "to_hdf"], [65, 5, 1, "", "to_pandas"], [11, 4, 1, "", "to_parquet"], [11, 4, 1, "", "unregister"], [11, 4, 1, "", "unregister_dataframe_by_name"], [11, 4, 1, "", "update_size"]], "arkouda.ErrorMode": [[11, 3, 1, "", "ignore"], [11, 3, 1, "", "return_validity"], [11, 3, 1, "", "strict"]], "arkouda.Fields": [[11, 4, 1, "", "format"], [11, 4, 1, "", "opeq"]], "arkouda.GroupBy": [[66, 4, 1, "", "AND"], [66, 4, 1, "", "OR"], [11, 3, 1, "id440", "Reductions"], [66, 4, 1, "", "XOR"], [66, 4, 1, "", "aggregate"], [66, 4, 1, "", "all"], [66, 4, 1, "", "any"], [66, 4, 1, "", "argmax"], [66, 4, 1, "", "argmin"], [66, 4, 1, "", "attach"], [66, 4, 1, "", "broadcast"], [66, 4, 1, "", "build_from_components"], [66, 4, 1, "", "count"], [66, 4, 1, "", "first"], [66, 4, 1, "", "is_registered"], [66, 3, 1, "", "logger"], [66, 4, 1, "", "max"], [66, 4, 1, "", "mean"], [66, 4, 1, "", "median"], [66, 4, 1, "", "min"], [66, 4, 1, "", "mode"], [66, 4, 1, "", "most_common"], [66, 3, 1, "", "ngroups"], [66, 3, 1, "", "nkeys"], [66, 4, 1, "", "nunique"], [66, 3, 1, "", "permutation"], [66, 4, 1, "", "prod"], [66, 4, 1, "", "register"], [66, 3, 1, "", "segments"], [66, 4, 1, "id0", "size"], [66, 4, 1, "", "std"], [66, 4, 1, "", "sum"], [66, 4, 1, "", "unique"], [66, 3, 1, "", "unique_keys"], [66, 4, 1, "", "unregister"], [66, 4, 1, "", "unregister_groupby_by_name"], [66, 4, 1, "", "var"]], "arkouda.IPv4": [[11, 4, 1, "", "format"], [11, 4, 1, "", "normalize"], [11, 4, 1, "", "opeq"], [11, 4, 1, "", "to_list"], [11, 4, 1, "", "to_ndarray"]], "arkouda.Index": [[59, 5, 1, "", "argsort"], [59, 5, 1, "", "concat"], [11, 4, 1, "", "factory"], [11, 6, 1, "", "index"], [11, 4, 1, "", "is_registered"], [11, 6, 1, "", "is_unique"], [59, 5, 1, "", "lookup"], [11, 4, 1, "", "register"], [11, 4, 1, "", "save"], [59, 5, 1, "", "set_dtype"], [11, 6, 1, "", "shape"], [11, 4, 1, "", "to_csv"], [11, 4, 1, "", "to_dict"], [11, 4, 1, "", "to_hdf"], [11, 4, 1, "", "to_list"], [11, 4, 1, "", "to_ndarray"], [11, 4, 1, "", "to_pandas"], [11, 4, 1, "", "to_parquet"]], "arkouda.MultiIndex": [[59, 5, 1, "", "argsort"], [59, 5, 1, "", "concat"], [11, 6, 1, "", "index"], [59, 5, 1, "", "lookup"], [11, 4, 1, "", "register"], [59, 5, 1, "", "set_dtype"], [11, 4, 1, "", "to_dict"], [11, 4, 1, "", "to_pandas"]], "arkouda.SegArray": [[11, 4, 1, "", "AND"], [11, 4, 1, "", "OR"], [11, 4, 1, "", "XOR"], [11, 4, 1, "", "aggregate"], [11, 4, 1, "", "all"], [11, 4, 1, "", "any"], [70, 5, 1, "", "append"], [70, 5, 1, "", "append_single"], [11, 4, 1, "", "argmax"], [11, 4, 1, "", "argmin"], [11, 4, 1, "", "attach"], [11, 4, 1, "", "concat"], [11, 4, 1, "", "copy"], [11, 4, 1, "", "from_multi_array"], [11, 4, 1, "", "from_parts"], [11, 4, 1, "", "from_return_msg"], [70, 5, 1, "", "get_jth"], [70, 5, 1, "", "get_length_n"], [70, 5, 1, "", "get_ngrams"], [70, 5, 1, "", "get_prefixes"], [70, 5, 1, "", "get_suffixes"], [70, 5, 1, "", "intersect"], [11, 4, 1, "", "is_registered"], [11, 6, 1, "", "lengths"], [11, 4, 1, "", "load"], [11, 4, 1, "", "max"], [11, 4, 1, "", "mean"], [11, 4, 1, "", "min"], [11, 6, 1, "", "non_empty"], [11, 6, 1, "", "non_empty_count"], [11, 4, 1, "", "nunique"], [11, 6, 1, "", "objtype"], [70, 5, 1, "", "prepend_single"], [11, 4, 1, "", "prod"], [11, 4, 1, "", "register"], [70, 5, 1, "", "remove_repeats"], [11, 4, 1, "", "save"], [70, 5, 1, "", "set_jth"], [70, 5, 1, "", "setdiff"], [70, 5, 1, "", "setxor"], [11, 4, 1, "", "sum"], [11, 4, 1, "", "to_hdf"], [11, 4, 1, "", "to_list"], [70, 5, 1, "", "to_ndarray"], [70, 5, 1, "", "union"], [11, 4, 1, "", "unique"], [11, 4, 1, "", "unregister"], [11, 4, 1, "", "unregister_segarray_by_name"], [11, 3, 1, "", "valsize"]], "arkouda.Series": [[11, 4, 1, "", "add"], [11, 4, 1, "", "attach"], [11, 4, 1, "", "concat"], [11, 4, 1, "", "diff"], [11, 3, 1, "", "dt"], [11, 4, 1, "", "from_return_msg"], [71, 5, 1, "", "head"], [11, 4, 1, "", "is_registered"], [11, 4, 1, "", "isin"], [71, 5, 1, "id0", "locate"], [71, 5, 1, "", "pdconcat"], [11, 4, 1, "", "register"], [11, 6, 1, "", "shape"], [71, 5, 1, "", "sort_index"], [71, 5, 1, "", "sort_values"], [11, 3, 1, "", "str_acc"], [71, 5, 1, "", "tail"], [11, 4, 1, "", "to_dataframe"], [71, 5, 1, "", "to_pandas"], [71, 5, 1, "", "topn"], [71, 5, 1, "", "value_counts"]], "arkouda.Strings": [[11, 3, 1, "id648", "BinOps"], [11, 4, 1, "id686", "astype"], [11, 4, 1, "id696", "attach"], [11, 4, 1, "id662", "cached_regex_patterns"], [74, 4, 1, "", "contains"], [11, 4, 1, "id654", "decode"], [11, 3, 1, "id646", "dtype"], [11, 4, 1, "id653", "encode"], [74, 4, 1, "", "endswith"], [11, 3, 1, "id641", "entry"], [74, 4, 1, "", "find_locations"], [74, 4, 1, "", "findall"], [74, 4, 1, "", "flatten"], [11, 4, 1, "id651", "from_parts"], [11, 4, 1, "id650", "from_return_msg"], [74, 4, 1, "", "fullmatch"], [11, 4, 1, "id652", "get_lengths"], [11, 4, 1, "id680", "get_prefixes"], [11, 4, 1, "id681", "get_suffixes"], [11, 4, 1, "id683", "group"], [11, 4, 1, "id682", "hash"], [11, 4, 1, "id692", "info"], [11, 4, 1, "id658", "is_lower"], [11, 4, 1, "id691", "is_registered"], [11, 4, 1, "id660", "is_title"], [11, 4, 1, "id659", "is_upper"], [11, 3, 1, "id647", "logger"], [74, 4, 1, "", "lstick"], [74, 4, 1, "", "match"], [11, 3, 1, "id643", "nbytes"], [11, 3, 1, "id644", "ndim"], [11, 3, 1, "id649", "objtype"], [74, 4, 1, "", "peel"], [11, 4, 1, "id693", "pretty_print_info"], [11, 4, 1, "id663", "purge_cached_regex_patterns"], [11, 4, 1, "id694", "register"], [74, 4, 1, "", "rpeel"], [11, 4, 1, "id690", "save"], [74, 4, 1, "", "search"], [11, 3, 1, "id645", "shape"], [11, 3, 1, "id642", "size"], [74, 4, 1, "", "split"], [74, 4, 1, "", "startswith"], [74, 4, 1, "", "stick"], [11, 4, 1, "id661", "strip"], [74, 4, 1, "", "sub"], [74, 4, 1, "", "subn"], [11, 4, 1, "id689", "to_csv"], [11, 4, 1, "id688", "to_hdf"], [11, 4, 1, "id685", "to_list"], [11, 4, 1, "id655", "to_lower"], [74, 5, 1, "", "to_ndarray"], [11, 4, 1, "id687", "to_parquet"], [11, 4, 1, "id657", "to_title"], [11, 4, 1, "id656", "to_upper"], [11, 4, 1, "id695", "unregister"], [11, 4, 1, "id697", "unregister_strings_by_name"]], "arkouda.accessor": [[2, 2, 1, "", "CachedAccessor"], [2, 2, 1, "", "DatetimeAccessor"], [2, 2, 1, "", "Properties"], [2, 2, 1, "", "StringAccessor"], [2, 5, 1, "", "date_operators"], [2, 5, 1, "", "string_operators"]], "arkouda.alignment": [[3, 7, 1, "", "NonUniqueError"], [3, 5, 1, "", "align"], [3, 5, 1, "", "find"], [3, 5, 1, "", "in1d_intervals"], [3, 5, 1, "", "interval_lookup"], [3, 5, 1, "", "is_cosorted"], [3, 5, 1, "", "left_align"], [3, 5, 1, "", "lookup"], [3, 5, 1, "", "right_align"], [3, 5, 1, "", "search_intervals"], [3, 5, 1, "", "unsqueeze"], [3, 5, 1, "", "zero_up"]], "arkouda.array_view": [[4, 2, 1, "", "ArrayView"]], "arkouda.array_view.ArrayView": [[4, 3, 1, "", "base"], [4, 3, 1, "", "dtype"], [4, 3, 1, "", "itemsize"], [4, 3, 1, "", "ndim"], [4, 3, 1, "", "order"], [4, 3, 1, "", "shape"], [4, 3, 1, "", "size"], [4, 4, 1, "", "to_hdf"], [4, 4, 1, "", "to_list"], [4, 4, 1, "", "to_ndarray"]], "arkouda.categorical": [[5, 2, 1, "", "Categorical"]], "arkouda.categorical.Categorical": [[5, 3, 1, "", "BinOps"], [5, 3, 1, "", "RegisterablePieces"], [5, 3, 1, "", "RequiredPieces"], [5, 4, 1, "", "argsort"], [5, 4, 1, "", "attach"], [5, 3, 1, "", "categories"], [5, 3, 1, "", "codes"], [5, 4, 1, "", "concatenate"], [5, 4, 1, "", "contains"], [5, 4, 1, "", "endswith"], [5, 4, 1, "", "from_codes"], [5, 4, 1, "", "from_return_msg"], [5, 4, 1, "", "group"], [5, 4, 1, "", "in1d"], [5, 4, 1, "", "info"], [5, 4, 1, "", "is_registered"], [5, 4, 1, "", "isna"], [5, 3, 1, "", "ndim"], [5, 3, 1, "", "nlevels"], [5, 6, 1, "", "objtype"], [5, 4, 1, "", "parse_hdf_categoricals"], [5, 3, 1, "id0", "permutation"], [5, 4, 1, "", "pretty_print_info"], [5, 4, 1, "", "register"], [5, 4, 1, "", "reset_categories"], [5, 4, 1, "", "save"], [5, 3, 1, "id1", "segments"], [5, 4, 1, "", "set_categories"], [5, 3, 1, "", "shape"], [5, 3, 1, "", "size"], [5, 4, 1, "", "sort"], [5, 4, 1, "", "standardize_categories"], [5, 4, 1, "", "startswith"], [5, 4, 1, "", "to_hdf"], [5, 4, 1, "", "to_list"], [5, 4, 1, "", "to_ndarray"], [5, 4, 1, "", "to_parquet"], [5, 4, 1, "", "unique"], [5, 4, 1, "", "unregister"], [5, 4, 1, "", "unregister_categorical_by_name"]], "arkouda.client": [[6, 5, 1, "", "connect"], [6, 5, 1, "", "disconnect"], [6, 5, 1, "", "get_config"], [6, 5, 1, "", "get_mem_avail"], [6, 5, 1, "", "get_mem_used"], [6, 5, 1, "", "get_server_commands"], [6, 5, 1, "", "print_server_commands"], [6, 5, 1, "", "ruok"], [6, 5, 1, "", "shutdown"]], "arkouda.client_dtypes": [[7, 2, 1, "", "BitVector"], [7, 5, 1, "", "BitVectorizer"], [7, 2, 1, "", "Fields"], [7, 2, 1, "", "IPv4"], [7, 5, 1, "", "ip_address"], [7, 5, 1, "", "is_ipv4"], [7, 5, 1, "", "is_ipv6"]], "arkouda.client_dtypes.BitVector": [[7, 3, 1, "", "conserves"], [7, 4, 1, "", "format"], [7, 4, 1, "", "opeq"], [7, 4, 1, "", "to_list"], [7, 4, 1, "", "to_ndarray"]], "arkouda.client_dtypes.Fields": [[7, 4, 1, "", "format"], [7, 4, 1, "", "opeq"]], "arkouda.client_dtypes.IPv4": [[7, 4, 1, "", "format"], [7, 4, 1, "", "normalize"], [7, 4, 1, "", "opeq"], [7, 4, 1, "", "to_list"], [7, 4, 1, "", "to_ndarray"]], "arkouda.dataframe": [[8, 2, 1, "", "DataFrame"], [8, 5, 1, "", "intersect"], [8, 5, 1, "", "intx"], [8, 5, 1, "", "invert_permutation"], [8, 5, 1, "", "sorted"]], "arkouda.dataframe.DataFrame": [[8, 3, 1, "", "COLUMN_CLASSES"], [8, 4, 1, "", "GroupBy"], [8, 4, 1, "", "append"], [8, 4, 1, "", "apply_permutation"], [8, 4, 1, "", "argsort"], [8, 4, 1, "", "attach"], [8, 4, 1, "", "coargsort"], [8, 6, 1, "", "columns"], [8, 4, 1, "", "concat"], [8, 4, 1, "", "copy"], [8, 4, 1, "", "corr"], [8, 4, 1, "", "drop"], [8, 4, 1, "", "drop_duplicates"], [8, 6, 1, "", "dtypes"], [8, 6, 1, "", "empty"], [8, 4, 1, "", "filter_by_range"], [8, 4, 1, "", "from_pandas"], [8, 4, 1, "", "from_return_msg"], [8, 4, 1, "", "groupby"], [8, 4, 1, "", "head"], [8, 6, 1, "", "index"], [8, 6, 1, "", "info"], [8, 4, 1, "", "is_registered"], [8, 4, 1, "", "isin"], [8, 4, 1, "", "load"], [8, 4, 1, "", "memory_usage"], [8, 4, 1, "", "read_csv"], [8, 4, 1, "", "register"], [8, 4, 1, "", "rename"], [8, 4, 1, "", "reset_index"], [8, 4, 1, "", "sample"], [8, 4, 1, "", "save"], [8, 6, 1, "", "shape"], [8, 6, 1, "", "size"], [8, 4, 1, "", "sort_values"], [8, 4, 1, "", "tail"], [8, 4, 1, "", "to_csv"], [8, 4, 1, "", "to_hdf"], [8, 4, 1, "", "to_pandas"], [8, 4, 1, "", "to_parquet"], [8, 4, 1, "", "unregister"], [8, 4, 1, "", "unregister_dataframe_by_name"], [8, 4, 1, "", "update_size"]], "arkouda.dtypes": [[9, 1, 1, "", "ARKOUDA_SUPPORTED_DTYPES"], [9, 1, 1, "", "DTypeObjects"], [9, 1, 1, "", "DTypes"], [9, 1, 1, "", "all_scalars"], [9, 1, 1, "", "bigint"], [9, 1, 1, "", "bitType"], [9, 1, 1, "", "bool"], [9, 1, 1, "", "bool_scalars"], [9, 5, 1, "", "check_np_dtype"], [9, 5, 1, "", "dtype"], [9, 1, 1, "", "float64"], [9, 1, 1, "", "float_scalars"], [9, 5, 1, "", "get_byteorder"], [9, 5, 1, "", "get_server_byteorder"], [9, 1, 1, "", "int64"], [9, 1, 1, "", "intTypes"], [9, 1, 1, "", "int_scalars"], [9, 1, 1, "", "numeric_scalars"], [9, 1, 1, "", "numpy_scalars"], [9, 5, 1, "", "resolve_scalar_dtype"], [9, 1, 1, "", "str_"], [9, 1, 1, "", "str_scalars"], [9, 5, 1, "", "translate_np_dtype"], [9, 1, 1, "", "uint64"], [9, 1, 1, "", "uint8"]], "arkouda.groupbyclass": [[10, 1, 1, "", "GROUPBY_REDUCTION_TYPES"], [10, 2, 1, "", "GroupBy"], [10, 5, 1, "", "broadcast"], [10, 5, 1, "", "unique"]], "arkouda.groupbyclass.GroupBy": [[10, 4, 1, "", "AND"], [10, 4, 1, "", "OR"], [10, 3, 1, "", "Reductions"], [10, 4, 1, "", "XOR"], [10, 4, 1, "", "aggregate"], [10, 4, 1, "", "all"], [10, 4, 1, "", "any"], [10, 4, 1, "", "argmax"], [10, 4, 1, "", "argmin"], [10, 4, 1, "", "attach"], [10, 4, 1, "", "broadcast"], [10, 4, 1, "", "build_from_components"], [10, 4, 1, "", "count"], [10, 4, 1, "", "first"], [10, 4, 1, "", "is_registered"], [10, 3, 1, "", "logger"], [10, 4, 1, "", "max"], [10, 4, 1, "", "mean"], [10, 4, 1, "", "median"], [10, 4, 1, "", "min"], [10, 4, 1, "", "mode"], [10, 4, 1, "", "most_common"], [10, 3, 1, "", "ngroups"], [10, 3, 1, "", "nkeys"], [10, 4, 1, "", "nunique"], [10, 3, 1, "", "permutation"], [10, 4, 1, "", "prod"], [10, 4, 1, "", "register"], [10, 3, 1, "", "segments"], [10, 4, 1, "id0", "size"], [10, 4, 1, "", "std"], [10, 4, 1, "", "sum"], [10, 4, 1, "", "unique"], [10, 3, 1, "", "unique_keys"], [10, 4, 1, "", "unregister"], [10, 4, 1, "", "unregister_groupby_by_name"], [10, 4, 1, "", "var"]], "arkouda.index": [[12, 2, 1, "", "Index"], [12, 2, 1, "", "MultiIndex"]], "arkouda.index.Index": [[12, 4, 1, "", "argsort"], [12, 4, 1, "", "concat"], [12, 4, 1, "", "factory"], [12, 6, 1, "", "index"], [12, 4, 1, "", "is_registered"], [12, 6, 1, "", "is_unique"], [12, 4, 1, "", "lookup"], [12, 4, 1, "", "register"], [12, 4, 1, "", "save"], [12, 4, 1, "", "set_dtype"], [12, 6, 1, "", "shape"], [12, 4, 1, "", "to_csv"], [12, 4, 1, "", "to_dict"], [12, 4, 1, "", "to_hdf"], [12, 4, 1, "", "to_list"], [12, 4, 1, "", "to_ndarray"], [12, 4, 1, "", "to_pandas"], [12, 4, 1, "", "to_parquet"]], "arkouda.index.MultiIndex": [[12, 4, 1, "", "argsort"], [12, 4, 1, "", "concat"], [12, 6, 1, "", "index"], [12, 4, 1, "", "lookup"], [12, 4, 1, "", "register"], [12, 4, 1, "", "set_dtype"], [12, 4, 1, "", "to_dict"], [12, 4, 1, "", "to_pandas"]], "arkouda.infoclass": [[13, 1, 1, "", "AllSymbols"], [13, 1, 1, "", "RegisteredSymbols"], [13, 5, 1, "", "information"], [13, 5, 1, "", "list_registry"], [13, 5, 1, "", "list_symbol_table"], [13, 5, 1, "", "pretty_print_information"]], "arkouda.io": [[14, 5, 1, "", "export"], [14, 5, 1, "", "get_columns"], [14, 5, 1, "", "get_datasets"], [14, 5, 1, "", "get_filetype"], [14, 5, 1, "", "get_null_indices"], [14, 5, 1, "", "import_data"], [14, 5, 1, "", "load"], [14, 5, 1, "", "load_all"], [14, 5, 1, "", "ls"], [14, 5, 1, "", "ls_csv"], [14, 5, 1, "", "read"], [14, 5, 1, "", "read_csv"], [14, 5, 1, "", "read_hdf"], [14, 5, 1, "", "read_parquet"], [14, 5, 1, "", "save_all"], [14, 5, 1, "", "to_csv"], [14, 5, 1, "", "to_hdf"], [14, 5, 1, "", "to_parquet"]], "arkouda.io_util": [[15, 5, 1, "", "delimited_file_to_dict"], [15, 5, 1, "", "dict_to_delimited_file"], [15, 5, 1, "", "get_directory"], [15, 5, 1, "", "write_line_to_file"]], "arkouda.join": [[16, 5, 1, "", "compute_join_size"], [16, 5, 1, "", "gen_ranges"], [16, 5, 1, "", "join_on_eq_with_dt"]], "arkouda.logger": [[17, 5, 1, "", "disableVerbose"], [17, 5, 1, "", "enableVerbose"]], "arkouda.match": [[18, 2, 1, "", "Match"]], "arkouda.match.Match": [[74, 4, 1, "", "end"], [74, 4, 1, "", "find_matches"], [74, 4, 1, "", "group"], [74, 4, 1, "", "match_type"], [74, 4, 1, "", "matched"], [74, 4, 1, "", "start"]], "arkouda.matcher": [[19, 2, 1, "", "Matcher"]], "arkouda.matcher.Matcher": [[19, 3, 1, "", "LocationsInfo"], [19, 4, 1, "", "find_locations"], [19, 4, 1, "", "findall"], [19, 4, 1, "", "get_match"], [19, 4, 1, "", "split"], [19, 4, 1, "", "sub"]], "arkouda.numeric": [[20, 2, 1, "", "ErrorMode"], [20, 5, 1, "", "abs"], [20, 5, 1, "", "cast"], [20, 5, 1, "", "cos"], [20, 5, 1, "", "cumprod"], [20, 5, 1, "", "cumsum"], [20, 5, 1, "", "exp"], [20, 5, 1, "", "hash"], [20, 5, 1, "", "histogram"], [20, 5, 1, "", "isnan"], [20, 5, 1, "", "log"], [20, 5, 1, "", "sin"], [20, 5, 1, "", "value_counts"], [20, 5, 1, "", "where"]], "arkouda.numeric.ErrorMode": [[20, 3, 1, "", "ignore"], [20, 3, 1, "", "return_validity"], [20, 3, 1, "", "strict"]], "arkouda.pdarray": [[11, 3, 1, "id481", "BinOps"], [11, 3, 1, "id482", "OpEqOps"], [67, 4, 1, "", "all"], [67, 4, 1, "", "any"], [67, 4, 1, "", "argmax"], [67, 4, 1, "", "argmaxk"], [67, 4, 1, "", "argmin"], [67, 4, 1, "", "argmink"], [11, 4, 1, "id514", "astype"], [11, 4, 1, "id529", "attach"], [11, 4, 1, "id516", "bigint_to_uint_arrays"], [11, 4, 1, "id510", "clz"], [11, 4, 1, "id503", "corr"], [11, 4, 1, "id502", "cov"], [11, 4, 1, "id511", "ctz"], [69, 3, 1, "", "dtype"], [11, 4, 1, "id486", "fill"], [11, 4, 1, "id484", "format_other"], [11, 4, 1, "id490", "info"], [11, 4, 1, "id489", "is_registered"], [67, 4, 1, "", "is_sorted"], [69, 3, 1, "", "itemsize"], [67, 4, 1, "", "max"], [67, 4, 1, "", "maxk"], [67, 4, 1, "", "mean"], [67, 4, 1, "", "min"], [67, 4, 1, "", "mink"], [69, 3, 1, "", "name"], [69, 3, 1, "", "ndim"], [11, 3, 1, "id483", "objtype"], [11, 4, 1, "id485", "opeq"], [11, 4, 1, "id509", "parity"], [11, 4, 1, "id508", "popcount"], [11, 4, 1, "id491", "pretty_print_info"], [67, 4, 1, "", "prod"], [11, 4, 1, "id527", "register"], [11, 4, 1, "id517", "reshape"], [11, 4, 1, "id512", "rotl"], [11, 4, 1, "id513", "rotr"], [11, 4, 1, "id526", "save"], [69, 3, 1, "", "shape"], [69, 3, 1, "", "size"], [11, 4, 1, "id515", "slice_bits"], [67, 4, 1, "", "std"], [67, 4, 1, "", "sum"], [11, 4, 1, "id523", "to_csv"], [11, 4, 1, "id520", "to_cuda"], [11, 4, 1, "id522", "to_hdf"], [11, 4, 1, "id519", "to_list"], [69, 5, 1, "", "to_ndarray"], [11, 4, 1, "id521", "to_parquet"], [11, 4, 1, "id528", "unregister"], [67, 4, 1, "", "var"]], "arkouda.pdarrayclass": [[21, 7, 1, "", "RegistrationError"], [21, 5, 1, "", "all"], [21, 5, 1, "", "any"], [21, 5, 1, "", "argmax"], [21, 5, 1, "", "argmaxk"], [21, 5, 1, "", "argmin"], [21, 5, 1, "", "argmink"], [21, 5, 1, "", "attach_pdarray"], [21, 5, 1, "", "clear"], [21, 5, 1, "", "clz"], [21, 5, 1, "", "corr"], [21, 5, 1, "", "cov"], [21, 5, 1, "", "ctz"], [21, 5, 1, "", "is_sorted"], [21, 5, 1, "", "max"], [21, 5, 1, "", "maxk"], [21, 5, 1, "", "mean"], [21, 5, 1, "", "min"], [21, 5, 1, "", "mink"], [21, 5, 1, "", "parity"], [21, 2, 1, "", "pdarray"], [21, 5, 1, "", "popcount"], [21, 5, 1, "", "power"], [21, 5, 1, "", "prod"], [21, 5, 1, "", "rotl"], [21, 5, 1, "", "rotr"], [21, 5, 1, "", "sqrt"], [21, 5, 1, "", "std"], [21, 5, 1, "", "sum"], [21, 5, 1, "", "unregister_pdarray_by_name"], [21, 5, 1, "", "var"]], "arkouda.pdarrayclass.pdarray": [[21, 3, 1, "", "BinOps"], [21, 3, 1, "", "OpEqOps"], [21, 4, 1, "", "all"], [21, 4, 1, "", "any"], [21, 4, 1, "", "argmax"], [21, 4, 1, "", "argmaxk"], [21, 4, 1, "", "argmin"], [21, 4, 1, "", "argmink"], [21, 4, 1, "", "astype"], [21, 4, 1, "", "attach"], [21, 4, 1, "", "bigint_to_uint_arrays"], [21, 4, 1, "", "clz"], [21, 4, 1, "", "corr"], [21, 4, 1, "", "cov"], [21, 4, 1, "", "ctz"], [21, 3, 1, "", "dtype"], [21, 4, 1, "", "fill"], [21, 4, 1, "", "format_other"], [21, 4, 1, "", "info"], [21, 4, 1, "", "is_registered"], [21, 4, 1, "", "is_sorted"], [21, 3, 1, "", "itemsize"], [21, 4, 1, "", "max"], [21, 4, 1, "", "maxk"], [21, 4, 1, "", "mean"], [21, 4, 1, "", "min"], [21, 4, 1, "", "mink"], [21, 3, 1, "", "name"], [21, 3, 1, "", "ndim"], [21, 3, 1, "", "objtype"], [21, 4, 1, "", "opeq"], [21, 4, 1, "", "parity"], [21, 4, 1, "", "popcount"], [21, 4, 1, "", "pretty_print_info"], [21, 4, 1, "", "prod"], [21, 4, 1, "", "register"], [21, 4, 1, "", "reshape"], [21, 4, 1, "", "rotl"], [21, 4, 1, "", "rotr"], [21, 4, 1, "", "save"], [21, 3, 1, "", "shape"], [21, 3, 1, "", "size"], [21, 4, 1, "", "slice_bits"], [21, 4, 1, "", "std"], [21, 4, 1, "", "sum"], [21, 4, 1, "", "to_csv"], [21, 4, 1, "", "to_cuda"], [21, 4, 1, "", "to_hdf"], [21, 4, 1, "", "to_list"], [21, 4, 1, "", "to_ndarray"], [21, 4, 1, "", "to_parquet"], [21, 4, 1, "", "unregister"], [21, 4, 1, "", "var"]], "arkouda.pdarraycreation": [[22, 5, 1, "", "arange"], [22, 5, 1, "", "array"], [22, 5, 1, "", "bigint_from_uint_arrays"], [22, 5, 1, "", "from_series"], [22, 5, 1, "", "full"], [22, 5, 1, "", "full_like"], [22, 5, 1, "", "linspace"], [22, 5, 1, "", "ones"], [22, 5, 1, "", "ones_like"], [22, 5, 1, "", "randint"], [22, 5, 1, "", "random_strings_lognormal"], [22, 5, 1, "", "random_strings_uniform"], [22, 5, 1, "", "standard_normal"], [22, 5, 1, "", "uniform"], [22, 5, 1, "", "zeros"], [22, 5, 1, "", "zeros_like"]], "arkouda.pdarraysetops": [[23, 5, 1, "", "concatenate"], [23, 5, 1, "", "in1d"], [23, 5, 1, "", "intersect1d"], [23, 5, 1, "", "setdiff1d"], [23, 5, 1, "", "setxor1d"], [23, 5, 1, "", "union1d"]], "arkouda.plotting": [[24, 5, 1, "", "plot_dist"]], "arkouda.row": [[25, 2, 1, "", "Row"]], "arkouda.security": [[26, 5, 1, "", "generate_token"], [26, 5, 1, "", "generate_username_token_json"], [26, 5, 1, "", "get_arkouda_client_directory"], [26, 5, 1, "", "get_home_directory"], [26, 5, 1, "", "get_username"], [26, 1, 1, "", "username_tokenizer"]], "arkouda.segarray": [[27, 2, 1, "", "SegArray"], [27, 5, 1, "", "gen_ranges"], [27, 5, 1, "", "segarray"]], "arkouda.segarray.SegArray": [[27, 4, 1, "", "AND"], [27, 4, 1, "", "OR"], [27, 4, 1, "", "XOR"], [27, 4, 1, "", "aggregate"], [27, 4, 1, "", "all"], [27, 4, 1, "", "any"], [27, 4, 1, "", "append"], [27, 4, 1, "", "append_single"], [27, 4, 1, "", "argmax"], [27, 4, 1, "", "argmin"], [27, 4, 1, "", "attach"], [27, 4, 1, "", "concat"], [27, 4, 1, "", "copy"], [27, 4, 1, "", "from_multi_array"], [27, 4, 1, "", "from_parts"], [27, 4, 1, "", "from_return_msg"], [27, 4, 1, "", "get_jth"], [27, 4, 1, "", "get_length_n"], [27, 4, 1, "", "get_ngrams"], [27, 4, 1, "", "get_prefixes"], [27, 4, 1, "", "get_suffixes"], [27, 4, 1, "", "intersect"], [27, 4, 1, "", "is_registered"], [27, 6, 1, "", "lengths"], [27, 4, 1, "", "load"], [27, 4, 1, "", "max"], [27, 4, 1, "", "mean"], [27, 4, 1, "", "min"], [27, 6, 1, "", "non_empty"], [27, 6, 1, "", "non_empty_count"], [27, 4, 1, "", "nunique"], [27, 6, 1, "", "objtype"], [27, 4, 1, "", "prepend_single"], [27, 4, 1, "", "prod"], [27, 4, 1, "", "register"], [27, 4, 1, "", "remove_repeats"], [27, 4, 1, "", "save"], [27, 4, 1, "", "set_jth"], [27, 4, 1, "", "setdiff"], [27, 4, 1, "", "setxor"], [27, 4, 1, "", "sum"], [27, 4, 1, "", "to_hdf"], [27, 4, 1, "", "to_list"], [27, 4, 1, "", "to_ndarray"], [27, 4, 1, "", "union"], [27, 4, 1, "", "unique"], [27, 4, 1, "", "unregister"], [27, 4, 1, "", "unregister_segarray_by_name"], [27, 3, 1, "", "valsize"]], "arkouda.series": [[28, 2, 1, "", "Series"]], "arkouda.series.Series": [[28, 4, 1, "", "add"], [28, 4, 1, "", "attach"], [28, 4, 1, "", "concat"], [28, 4, 1, "", "diff"], [28, 3, 1, "", "dt"], [28, 4, 1, "", "from_return_msg"], [28, 4, 1, "", "head"], [28, 4, 1, "", "is_registered"], [28, 4, 1, "", "isin"], [28, 4, 1, "", "locate"], [28, 4, 1, "", "pdconcat"], [28, 4, 1, "", "register"], [28, 6, 1, "", "shape"], [28, 4, 1, "", "sort_index"], [28, 4, 1, "", "sort_values"], [28, 3, 1, "", "str_acc"], [28, 4, 1, "", "tail"], [28, 4, 1, "", "to_dataframe"], [28, 4, 1, "", "to_pandas"], [28, 4, 1, "", "topn"], [28, 4, 1, "", "value_counts"]], "arkouda.sorting": [[29, 5, 1, "", "argsort"], [29, 5, 1, "", "coargsort"], [29, 5, 1, "", "sort"]], "arkouda.strings": [[30, 2, 1, "", "Strings"]], "arkouda.strings.Strings": [[30, 3, 1, "", "BinOps"], [30, 4, 1, "", "astype"], [30, 4, 1, "", "attach"], [30, 4, 1, "", "cached_regex_patterns"], [30, 4, 1, "", "contains"], [30, 4, 1, "", "decode"], [30, 3, 1, "", "dtype"], [30, 4, 1, "", "encode"], [30, 4, 1, "", "endswith"], [30, 3, 1, "", "entry"], [30, 4, 1, "", "find_locations"], [30, 4, 1, "", "findall"], [30, 4, 1, "", "flatten"], [30, 4, 1, "", "from_parts"], [30, 4, 1, "", "from_return_msg"], [30, 4, 1, "", "fullmatch"], [30, 4, 1, "", "get_lengths"], [30, 4, 1, "", "get_prefixes"], [30, 4, 1, "", "get_suffixes"], [30, 4, 1, "", "group"], [30, 4, 1, "", "hash"], [30, 4, 1, "", "info"], [30, 4, 1, "", "is_lower"], [30, 4, 1, "", "is_registered"], [30, 4, 1, "", "is_title"], [30, 4, 1, "", "is_upper"], [30, 3, 1, "", "logger"], [30, 4, 1, "", "lstick"], [30, 4, 1, "", "match"], [30, 3, 1, "", "nbytes"], [30, 3, 1, "", "ndim"], [30, 3, 1, "", "objtype"], [30, 4, 1, "", "peel"], [30, 4, 1, "", "pretty_print_info"], [30, 4, 1, "", "purge_cached_regex_patterns"], [30, 4, 1, "", "register"], [30, 4, 1, "", "rpeel"], [30, 4, 1, "", "save"], [30, 4, 1, "", "search"], [30, 3, 1, "", "shape"], [30, 3, 1, "", "size"], [30, 4, 1, "", "split"], [30, 4, 1, "", "startswith"], [30, 4, 1, "", "stick"], [30, 4, 1, "", "strip"], [30, 4, 1, "", "sub"], [30, 4, 1, "", "subn"], [30, 4, 1, "", "to_csv"], [30, 4, 1, "", "to_hdf"], [30, 4, 1, "", "to_list"], [30, 4, 1, "", "to_lower"], [30, 4, 1, "", "to_ndarray"], [30, 4, 1, "", "to_parquet"], [30, 4, 1, "", "to_title"], [30, 4, 1, "", "to_upper"], [30, 4, 1, "", "unregister"], [30, 4, 1, "", "unregister_strings_by_name"]], "arkouda.timeclass": [[31, 2, 1, "", "Datetime"], [31, 2, 1, "", "Timedelta"], [31, 5, 1, "", "date_range"], [31, 5, 1, "", "timedelta_range"]], "arkouda.timeclass.Datetime": [[31, 6, 1, "", "date"], [31, 6, 1, "", "day"], [31, 6, 1, "", "day_of_week"], [31, 6, 1, "", "day_of_year"], [31, 6, 1, "", "dayofweek"], [31, 6, 1, "", "dayofyear"], [31, 6, 1, "", "hour"], [31, 6, 1, "", "is_leap_year"], [31, 4, 1, "", "isocalendar"], [31, 6, 1, "", "microsecond"], [31, 6, 1, "", "millisecond"], [31, 6, 1, "", "minute"], [31, 6, 1, "", "month"], [31, 6, 1, "", "nanosecond"], [31, 6, 1, "", "second"], [31, 4, 1, "", "sum"], [31, 3, 1, "", "supported_opeq"], [31, 3, 1, "", "supported_with_datetime"], [31, 3, 1, "", "supported_with_pdarray"], [31, 3, 1, "", "supported_with_r_datetime"], [31, 3, 1, "", "supported_with_r_pdarray"], [31, 3, 1, "", "supported_with_r_timedelta"], [31, 3, 1, "", "supported_with_timedelta"], [31, 4, 1, "", "to_pandas"], [31, 6, 1, "", "week"], [31, 6, 1, "", "weekday"], [31, 6, 1, "", "weekofyear"], [31, 6, 1, "", "year"]], "arkouda.timeclass.Timedelta": [[31, 4, 1, "", "abs"], [31, 6, 1, "", "components"], [31, 6, 1, "", "days"], [31, 6, 1, "", "microseconds"], [31, 6, 1, "", "nanoseconds"], [31, 6, 1, "", "seconds"], [31, 4, 1, "", "std"], [31, 4, 1, "", "sum"], [31, 3, 1, "", "supported_opeq"], [31, 3, 1, "", "supported_with_datetime"], [31, 3, 1, "", "supported_with_pdarray"], [31, 3, 1, "", "supported_with_r_datetime"], [31, 3, 1, "", "supported_with_r_pdarray"], [31, 3, 1, "", "supported_with_r_timedelta"], [31, 3, 1, "", "supported_with_timedelta"], [31, 4, 1, "", "to_pandas"], [31, 4, 1, "", "total_seconds"]], "arkouda.util": [[32, 5, 1, "", "attach"], [32, 5, 1, "", "attach_all"], [32, 5, 1, "", "concatenate"], [32, 5, 1, "", "convert_if_categorical"], [32, 5, 1, "", "enrich_inplace"], [32, 5, 1, "", "expand"], [32, 5, 1, "", "generic_concat"], [32, 5, 1, "", "get_callback"], [32, 5, 1, "", "identity"], [32, 5, 1, "", "invert_permutation"], [32, 5, 1, "", "most_common"], [32, 5, 1, "", "register"], [32, 5, 1, "", "register_all"], [32, 5, 1, "", "report_mem"], [32, 5, 1, "", "unregister_all"], [32, 5, 1, "", "unregister_by_name"]]}, "objtypes": {"0": "py:module", "1": "py:data", "2": "py:class", "3": "py:attribute", "4": "py:method", "5": "py:function", "6": "py:property", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "data", "Python data"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "method", "Python method"], "5": ["py", "function", "Python function"], "6": ["py", "property", "Python property"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"contribut": 0, "ad": [0, 1, 52], "issu": 0, "bug": [0, 38], "report": 0, "featur": [0, 59, 65, 71], "request": 0, "develop": [0, 34, 39, 53], "arkouda": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 37, 40, 41, 42, 44, 46, 47, 49, 52, 59, 62, 65, 70, 71, 73, 74], "code": 0, "convent": 0, "lint": 0, "python3": 0, "chapel": [0, 1, 34, 48, 50, 51], "test": [0, 1, 56], "run": [0, 1, 34, 52], "python": [0, 1, 40, 47, 50, 51, 53, 73], "write": [0, 42, 44, 45], "pull": 0, "review": 0, "core": 0, "team": 0, "onli": 0, "merg": 0, "releas": [0, 36], "process": [0, 36, 52], "environ": [1, 34, 37, 49, 50, 51], "variabl": [1, 37, 49], "compil": [1, 37], "makefil": 1, "flag": 1, "depend": [1, 47, 49, 53], "path": 1, "modul": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 52], "from": [1, 51, 58], "outsid": 1, "src": 1, "directori": 1, "client": [1, 6, 47, 58, 73], "accessor": 2, "content": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "class": [2, 4, 5, 7, 8, 10, 11, 12, 18, 19, 20, 21, 25, 27, 28, 30, 31, 69], "function": [2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 26, 27, 29, 31, 32, 45, 61], "align": 3, "array_view": 4, "categor": [5, 42, 44, 63], "client_dtyp": 7, "datafram": [8, 40, 41, 42, 44, 65], "dtype": [9, 59], "attribut": [9, 10, 11, 13, 26, 42], "groupbyclass": 10, "submodul": 11, "packag": [11, 49], "return": [11, 23, 72], "type": [11, 23, 41, 42, 44, 65, 69, 72], "input": [11, 28], "index": [12, 41, 42, 44, 59, 62, 65, 68], "infoclass": 13, "io": 14, "io_util": 15, "join": [16, 74], "logger": 17, "match": [18, 74], "matcher": 19, "numer": [20, 61], "pdarrayclass": 21, "pdarraycr": 22, "pdarraysetop": 23, "plot": 24, "row": 25, "secur": 26, "segarrai": [27, 70], "seri": [28, 71], "sort": [29, 60, 65, 71], "string": [30, 41, 42, 44, 74], "timeclass": 31, "util": 32, "api": [33, 41, 42, 43, 44, 45, 48], "refer": [33, 41, 42, 43, 44, 48], "gasnet": 34, "configur": [34, 42, 49, 52], "build": [34, 35, 37, 38, 49, 51, 52], "reduc": [35, 56], "memori": 35, "usag": [35, 57], "step": [36, 51], "instruct": 36, "gener": [36, 45], "note": 36, "diff": 36, "git": 36, "log": 36, "speed": 37, "up": 37, "alwai": 37, "set": [37, 40, 70, 72], "us": [37, 40, 47, 49, 52, 53], "modular": [37, 49, 52], "system": 37, "tip": 38, "reproduc": 38, "user": 38, "save": [38, 52], "full": 38, "effici": 38, "document": [39, 46, 49], "exampl": [40, 41], "arrai": [40, 64, 70, 72], "pdarrai": [40, 41, 42, 44, 68, 69], "creation": [40, 62], "export": [40, 43, 45, 58], "object": [40, 74], "oper": [40, 61, 63, 69, 70, 72, 74], "creat": [40, 64], "import": [40, 43, 45, 58], "panda": [40, 71], "map": 40, "basic": 40, "interact": 40, "groupbi": [40, 65, 66], "csv": 41, "support": [41, 42, 44, 45, 58], "data": [41, 42, 44, 58, 65, 67, 69], "file": [41, 42, 45, 52, 58], "format": [41, 45, 58], "without": 41, "header": 41, "hdf5": 42, "metadata": 42, "schema": 42, "arrayview": [42, 62], "mode": [42, 44], "distribut": [42, 49], "legaci": 42, "parquet": 44, "compress": 44, "i": [45, 58, 74], "o": [45, 58, 74], "read": [45, 58], "l": 45, "quickstart": 47, "instal": [47, 49, 50, 51, 53, 55], "launch": [47, 73], "server": [47, 49, 52, 58, 73], "connect": [47, 73], "3": [47, 73], "shutdown": 47, "disconnect": 47, "get": 49, "start": 49, "recommend": [49, 51], "all": 49, "individu": 49, "arrow": 49, "troubleshoot": 49, "linux": 50, "ubuntu": 50, "rhel": 50, "anaconda": [50, 51, 53], "maco": 51, "sourc": 51, "homebrew": 51, "updat": [51, 53], "next": 51, "specifi": 52, "custom": 52, "new": 52, "an": 52, "requir": [53, 55], "list": 53, "specif": [53, 70, 74], "pip": 53, "window": 54, "wsl2": 54, "overview": 55, "guid": [55, 57], "perform": [56, 70, 74], "argsort": [56, 59], "posit": 56, "argument": 56, "name": [56, 69], "gather": [56, 68], "scan": [56, 61], "scatter": [56, 68], "stream": 56, "between": 58, "larg": 58, "dataset": 58, "preprocess": 58, "disk": 58, "chang": 59, "lookup": [59, 71], "concat": 59, "arithmet": 61, "vector": 61, "scalar": 61, "element": [61, 70], "wise": 61, "reduct": 61, "where": 61, "iter": [62, 63, 65, 69, 70, 74], "construct": 63, "constant": 64, "regular": [64, 74], "random": 64, "concaten": [64, 65], "drop": 65, "copi": 65, "filter": 65, "permut": 65, "tail": [65, 71], "head": [65, 71], "renam": 65, "column": 65, "append": [65, 70], "reset": 65, "dedupl": [65, 70], "summar": 67, "descript": 67, "statist": 67, "histogram": 67, "valu": [67, 71], "count": [67, 71], "assign": 68, "integ": 68, "slice": 68, "logic": 68, "The": 69, "rank": 69, "cast": 69, "reshap": 69, "method": [70, 74], "prefix": 70, "suffix": 70, "ngram": 70, "sub": 70, "size": 70, "access": 70, "prepend": 70, "setop": 70, "union": 70, "intersect": 70, "differ": 70, "symmetr": 70, "integr": 71, "startup": 73, "substr": 74, "search": 74, "split": 74, "flatten": 74, "express": 74}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Contributing": [[0, "contributing"]], "Adding Issues": [[0, "adding-issues"]], "Bug Reports": [[0, "bug-reports"]], "Feature Requests": [[0, "feature-requests"]], "Developing Arkouda": [[0, "developing-arkouda"]], "Coding Conventions and Linting": [[0, "coding-conventions-and-linting"]], "Python3": [[0, "python3"]], "Chapel": [[0, "chapel"]], "Testing": [[0, "testing"], [1, "testing"]], "Running python tests": [[0, "running-python-tests"]], "Running chapel tests": [[0, "running-chapel-tests"]], "Writing Pull Requests": [[0, "writing-pull-requests"]], "Reviewing Pull Requests": [[0, "reviewing-pull-requests"]], "Core Development Team Only": [[0, "core-development-team-only"]], "Merging Pull Requests": [[0, "merging-pull-requests"]], "Release Process": [[0, "release-process"], [36, "release-process"]], "Environment Variables": [[1, "environment-variables"], [49, "environment-variables"]], "Running": [[1, "running"]], "Compilation / Makefile": [[1, "compilation-makefile"]], "Chapel Compiler Flags": [[1, "chapel-compiler-flags"]], "Dependency Paths": [[1, "dependency-paths"]], "Adding a Module from Outside the Arkouda src Directory": [[1, "adding-a-module-from-outside-the-arkouda-src-directory"]], "Python Client": [[1, "python-client"]], "arkouda.accessor": [[2, "module-arkouda.accessor"]], "Module Contents": [[2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"]], "Classes": [[2, "classes"], [4, "classes"], [5, "classes"], [7, "classes"], [8, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [25, "classes"], [27, "classes"], [28, "classes"], [30, "classes"], [31, "classes"]], "Functions": [[2, "functions"], [3, "functions"], [6, "functions"], [7, "functions"], [8, "functions"], [9, "functions"], [10, "functions"], [11, "functions"], [13, "functions"], [14, "functions"], [15, "functions"], [16, "functions"], [17, "functions"], [20, "functions"], [21, "functions"], [22, "functions"], [23, "functions"], [24, "functions"], [26, "functions"], [27, "functions"], [29, "functions"], [31, "functions"], [32, "functions"]], "arkouda.alignment": [[3, "module-arkouda.alignment"]], "arkouda.array_view": [[4, "module-arkouda.array_view"]], "arkouda.categorical": [[5, "module-arkouda.categorical"]], "arkouda.client": [[6, "module-arkouda.client"]], "arkouda.client_dtypes": [[7, "module-arkouda.client_dtypes"]], "arkouda.dataframe": [[8, "module-arkouda.dataframe"]], "arkouda.dtypes": [[9, "module-arkouda.dtypes"]], "Attributes": [[9, "attributes"], [10, "attributes"], [11, "attributes"], [13, "attributes"], [26, "attributes"]], "arkouda.groupbyclass": [[10, "module-arkouda.groupbyclass"]], "arkouda": [[11, "module-arkouda"]], "Submodules": [[11, "submodules"]], "Package Contents": [[11, "package-contents"]], "Return Type": [[11, "return-type"], [11, "id382"], [11, "id536"], [23, "return-type"], [72, "return-type"]], "Input": [[11, "input"], [28, "input"]], "arkouda.index": [[12, "module-arkouda.index"]], "arkouda.infoclass": [[13, "module-arkouda.infoclass"]], "arkouda.io": [[14, "module-arkouda.io"]], "arkouda.io_util": [[15, "module-arkouda.io_util"]], "arkouda.join": [[16, "module-arkouda.join"]], "arkouda.logger": [[17, "module-arkouda.logger"]], "arkouda.match": [[18, "module-arkouda.match"]], "arkouda.matcher": [[19, "module-arkouda.matcher"]], "arkouda.numeric": [[20, "module-arkouda.numeric"]], "arkouda.pdarrayclass": [[21, "module-arkouda.pdarrayclass"]], "arkouda.pdarraycreation": [[22, "module-arkouda.pdarraycreation"]], "arkouda.pdarraysetops": [[23, "module-arkouda.pdarraysetops"]], "arkouda.plotting": [[24, "module-arkouda.plotting"]], "arkouda.row": [[25, "module-arkouda.row"]], "arkouda.security": [[26, "module-arkouda.security"]], "arkouda.segarray": [[27, "module-arkouda.segarray"]], "arkouda.series": [[28, "module-arkouda.series"]], "arkouda.sorting": [[29, "module-arkouda.sorting"]], "arkouda.strings": [[30, "module-arkouda.strings"]], "arkouda.timeclass": [[31, "module-arkouda.timeclass"]], "arkouda.util": [[32, "module-arkouda.util"]], "API Reference": [[33, "api-reference"], [41, "api-reference"], [42, "api-reference"], [43, "api-reference"], [44, "api-reference"]], "GASNet Development": [[34, "gasnet-development"]], "Environment Configuration": [[34, "environment-configuration"]], "Build Chapel with GASNet": [[34, "build-chapel-with-gasnet"]], "Build Arkouda": [[34, "build-arkouda"]], "Run Arkouda": [[34, "run-arkouda"]], "Reducing Memory Usage of Arkouda Builds": [[35, "reducing-memory-usage-of-arkouda-builds"]], "Step-by-step instructions": [[36, "step-by-step-instructions"]], "Generating release notes": [[36, "generating-release-notes"]], "Diff the git logs": [[36, "diff-the-git-logs"]], "Speeding up Arkouda Compilation": [[37, "speeding-up-arkouda-compilation"]], "Environment Variables to Always Set": [[37, "environment-variables-to-always-set"]], "Using the Modular Build System": [[37, "using-the-modular-build-system"]], "Tips for Reproducing User Bugs": [[38, "tips-for-reproducing-user-bugs"]], "Saving Full Builds": [[38, "saving-full-builds"]], "Reproducing User Bugs Efficiently": [[38, "reproducing-user-bugs-efficiently"]], "Developer Documentation": [[39, "developer-documentation"]], "Examples": [[40, "examples"]], "Arkouda Arrays": [[40, "arkouda-arrays"]], "pdarray Creation": [[40, "pdarray-creation"]], "Exporting pdarray Objects": [[40, "exporting-pdarray-objects"]], "pdarray Set operations": [[40, "pdarray-set-operations"]], "Arkouda DataFrames": [[40, "arkouda-dataframes"]], "Creating & Using a DataFrame": [[40, "creating-using-a-dataframe"]], "Importing Pandas DataFrame": [[40, "importing-pandas-dataframe"]], "Python Mapping": [[40, "python-mapping"]], "Basic Interaction": [[40, "basic-interaction"]], "Exporting to Pandas": [[40, "exporting-to-pandas"]], "GroupBy": [[40, "groupby"], [65, "groupby"], [66, "groupby"]], "pdarrays": [[40, "pdarrays"]], "DataFrames": [[40, "dataframes"]], "CSV": [[41, "csv"]], "Support Arkouda Data Types": [[41, "support-arkouda-data-types"]], "File Formatting": [[41, "file-formatting"]], "Example Files": [[41, "example-files"]], "Arkouda Formatted File": [[41, "arkouda-formatted-file"]], "File Without Header": [[41, "file-without-header"]], "Data Formatting": [[41, "data-formatting"]], "pdarray": [[41, "pdarray"], [42, "pdarray"], [42, "id1"], [44, "pdarray"]], "Strings": [[41, "strings"], [42, "strings"], [42, "id2"], [44, "strings"]], "Index": [[41, "index"], [42, "index"], [44, "index"]], "DataFrame": [[41, "dataframe"], [42, "dataframe"], [44, "dataframe"]], "HDF5": [[42, "hdf5"]], "File Configuration": [[42, "file-configuration"]], "Supported Arkouda Data Types": [[42, "supported-arkouda-data-types"], [44, "supported-arkouda-data-types"]], "MetaData Attributes": [[42, "metadata-attributes"]], "Data Schema": [[42, "data-schema"]], "ArrayView": [[42, "arrayview"]], "Supported Write Modes": [[42, "supported-write-modes"], [44, "supported-write-modes"]], "Data Distribution": [[42, "data-distribution"]], "Legacy File Support": [[42, "legacy-file-support"]], "Categorical": [[42, "categorical"], [44, "categorical"]], "Import/Export": [[43, "import-export"], [58, "import-export"]], "Export": [[43, "export"]], "Import": [[43, "import"]], "Parquet": [[44, "parquet"]], "Compression": [[44, "compression"]], "File I/O": [[45, "file-i-o"]], "Supported File Formats:": [[45, null]], "Import/Export Support": [[45, "import-export-support"]], "General I/O API": [[45, "general-i-o-api"]], "Write": [[45, "write"]], "Read": [[45, "read"]], "ls Functionality": [[45, "ls-functionality"]], "Arkouda Documentation": [[46, "arkouda-documentation"]], "Quickstart": [[47, "quickstart"]], "Install Dependencies": [[47, "install-dependencies"]], "Install Arkouda": [[47, "install-arkouda"]], "Launching the Server": [[47, "launching-the-server"]], "Connect the Python 3 Client": [[47, "connect-the-python-3-client"]], "Shutdown/Disconnect": [[47, "shutdown-disconnect"]], "Using Arkouda": [[47, "using-arkouda"]], "Chapel API Reference": [[48, "chapel-api-reference"]], "Building the Server": [[49, "building-the-server"]], "Getting Started": [[49, "getting-started"]], "Dependency Configuration": [[49, "dependency-configuration"]], "Using Environment Installed Dependencies (Recommended)": [[49, "using-environment-installed-dependencies-recommended"]], "Installing Dependencies": [[49, "installing-dependencies"]], "Dependencies": [[49, "dependencies"]], "All Dependencies": [[49, "all-dependencies"]], "Individual Installs": [[49, "individual-installs"]], "Arrow Install Troubleshooting": [[49, "arrow-install-troubleshooting"]], "Distributable Package": [[49, "distributable-package"]], "Build the Server": [[49, "build-the-server"]], "Building the Arkouda Documentation": [[49, "building-the-arkouda-documentation"]], "Modular Building": [[49, "modular-building"]], "Linux": [[50, "linux"]], "Install Chapel (Ubuntu)": [[50, "install-chapel-ubuntu"]], "Install Chapel (RHEL)": [[50, "install-chapel-rhel"]], "Python Environment - Anaconda (Linux)": [[50, "python-environment-anaconda-linux"]], "MacOS": [[51, "macos"]], "Install Chapel": [[51, "install-chapel"]], "Build from Source (Recommended)": [[51, "build-from-source-recommended"]], "Homebrew": [[51, "homebrew"]], "Python Environment - Anaconda": [[51, "python-environment-anaconda"]], "Updating Environment": [[51, "updating-environment"]], "Anaconda": [[51, "anaconda"]], "Next Steps": [[51, "next-steps"]], "Modular Server Builds": [[52, "modular-server-builds"]], "Specifying a custom configuration file": [[52, "specifying-a-custom-configuration-file"]], "Adding new modules into the build process": [[52, "adding-new-modules-into-the-build-process"]], "Saving modules used in an Arkouda server run": [[52, "saving-modules-used-in-an-arkouda-server-run"]], "Requirements": [[53, "requirements"], [55, "requirements"]], "Dependency List": [[53, "dependency-list"]], "Python Dependencies": [[53, "python-dependencies"]], "Developer Specific": [[53, "developer-specific"]], "Installing/Updating Python Dependencies": [[53, "installing-updating-python-dependencies"]], "Using Anaconda": [[53, "using-anaconda"]], "Using Pip": [[53, "using-pip"]], "Windows (WSL2)": [[54, "windows-wsl2"]], "Installation": [[55, "installation"]], "Overview": [[55, "overview"]], "Install Guides": [[55, "install-guides"]], "Performance Testing": [[56, "performance-testing"]], "Argsort": [[56, "argsort"]], "Positional Arguments": [[56, "positional-arguments"], [56, "positional-arguments"], [56, "positional-arguments"], [56, "positional-arguments"], [56, "positional-arguments"], [56, "positional-arguments"]], "Named Arguments": [[56, "named-arguments"], [56, "named-arguments"], [56, "named-arguments"], [56, "named-arguments"], [56, "named-arguments"], [56, "named-arguments"]], "Gather": [[56, "gather"]], "Reduce": [[56, "reduce"]], "Scan": [[56, "scan"]], "Scatter": [[56, "scatter"]], "Stream": [[56, "stream"]], "Usage Guide": [[57, "usage-guide"]], "Data I/O": [[58, "data-i-o"]], "Between client and server": [[58, "between-client-and-server"]], "Large Datasets": [[58, "large-datasets"]], "Supported File Formats": [[58, "supported-file-formats"]], "Data Preprocessing": [[58, "data-preprocessing"]], "Reading data from disk": [[58, "reading-data-from-disk"]], "Indexs in Arkouda": [[59, "indexs-in-arkouda"]], "Features": [[59, "features"], [65, "features"], [71, "features"]], "Change Dtype": [[59, "change-dtype"]], "ArgSort": [[59, "argsort"]], "Lookup": [[59, "lookup"], [71, "lookup"], [71, "id1"]], "Concat": [[59, "concat"]], "Sorting": [[60, "sorting"], [65, "sorting"], [71, "sorting"]], "Arithmetic and Numeric Operations": [[61, "arithmetic-and-numeric-operations"]], "Vector and Scalar Arithmetic": [[61, "vector-and-scalar-arithmetic"]], "Element-wise Functions": [[61, "element-wise-functions"]], "Scans": [[61, "scans"]], "Reductions": [[61, "reductions"]], "Where": [[61, "where"]], "ArrayView in Arkouda": [[62, "arrayview-in-arkouda"]], "Creation": [[62, "creation"]], "Indexing": [[62, "indexing"]], "Iteration": [[62, "iteration"], [63, "iteration"], [65, "iteration"], [69, "iteration"], [70, "iteration"], [74, "iteration"]], "Categoricals": [[63, "categoricals"]], "Construction": [[63, "construction"]], "Operations": [[63, "operations"], [74, "operations"]], "Creating Arrays": [[64, "creating-arrays"]], "Constant": [[64, "constant"]], "Regular": [[64, "regular"]], "Random": [[64, "random"]], "Concatenation": [[64, "concatenation"]], "DataFrames in Arkouda": [[65, "dataframes-in-arkouda"]], "Data Types": [[65, "data-types"]], "Drop": [[65, "drop"]], "Copy": [[65, "copy"]], "Filter": [[65, "filter"]], "Permutations": [[65, "permutations"]], "Tail/Head of Data": [[65, "tail-head-of-data"]], "Rename Columns": [[65, "rename-columns"]], "Append": [[65, "append"]], "Concatenate": [[65, "concatenate"]], "Reset Indexes": [[65, "reset-indexes"]], "Deduplication": [[65, "deduplication"], [70, "deduplication"]], "Summarizing Data": [[67, "summarizing-data"]], "Descriptive Statistics": [[67, "descriptive-statistics"]], "Histogram": [[67, "histogram"]], "Value Counts": [[67, "value-counts"], [71, "value-counts"]], "Indexing and Assignment": [[68, "indexing-and-assignment"]], "Integer": [[68, "integer"]], "Slice": [[68, "slice"]], "Gather/Scatter (pdarray)": [[68, "gather-scatter-pdarray"]], "Integer pdarray index": [[68, "integer-pdarray-index"]], "Logical indexing": [[68, "logical-indexing"]], "The pdarray class": [[69, "the-pdarray-class"]], "Data Type": [[69, "data-type"]], "Rank": [[69, "rank"]], "Name": [[69, "name"]], "Operators": [[69, "operators"]], "Type Casting": [[69, "type-casting"]], "Reshape": [[69, "reshape"]], "SegArrays in Arkouda": [[70, "segarrays-in-arkouda"]], "Performance": [[70, "performance"], [74, "performance"]], "Operation": [[70, "operation"]], "SegArray Specific Methods": [[70, "segarray-specific-methods"]], "Prefix & Suffix": [[70, "prefix-suffix"]], "NGrams": [[70, "ngrams"]], "Sub-array of Size": [[70, "sub-array-of-size"]], "Access/Set Specific Elements in Sub-Array": [[70, "access-set-specific-elements-in-sub-array"]], "Append & Prepend": [[70, "append-prepend"]], "SegArray SetOps": [[70, "segarray-setops"]], "Union": [[70, "union"]], "Intersect": [[70, "intersect"]], "Set Difference": [[70, "set-difference"]], "Symmetric Difference": [[70, "symmetric-difference"]], "Series in Arkouda": [[71, "series-in-arkouda"]], "Head/Tail": [[71, "head-tail"]], "Pandas Integration": [[71, "pandas-integration"]], "Array Set Operations": [[72, "array-set-operations"]], "Startup": [[73, "startup"]], "Launch arkouda server": [[73, "launch-arkouda-server"]], "Connect a Python 3 client": [[73, "connect-a-python-3-client"]], "Strings in Arkouda": [[74, "strings-in-arkouda"]], "I/O": [[74, "i-o"]], "String-Specific Methods": [[74, "string-specific-methods"]], "Substring search": [[74, "substring-search"]], "Splitting and joining": [[74, "splitting-and-joining"]], "Flattening": [[74, "flattening"]], "Regular Expressions": [[74, "regular-expressions"]], "Match Object": [[74, "match-object"]]}, "indexentries": {"cachedaccessor (class in arkouda.accessor)": [[2, "arkouda.accessor.CachedAccessor"]], "datetimeaccessor (class in arkouda.accessor)": [[2, "arkouda.accessor.DatetimeAccessor"]], "properties (class in arkouda.accessor)": [[2, "arkouda.accessor.Properties"]], "stringaccessor (class in arkouda.accessor)": [[2, "arkouda.accessor.StringAccessor"]], "arkouda.accessor": [[2, "module-arkouda.accessor"]], "date_operators() (in module arkouda.accessor)": [[2, "arkouda.accessor.date_operators"]], "module": [[2, "module-arkouda.accessor"], [3, "module-arkouda.alignment"], [4, "module-arkouda.array_view"], [5, "module-arkouda.categorical"], [6, "module-arkouda.client"], [7, "module-arkouda.client_dtypes"], [8, "module-arkouda.dataframe"], [9, "module-arkouda.dtypes"], [10, "module-arkouda.groupbyclass"], [11, "module-arkouda"], [12, "module-arkouda.index"], [13, "module-arkouda.infoclass"], [14, "module-arkouda.io"], [15, "module-arkouda.io_util"], [16, "module-arkouda.join"], [17, "module-arkouda.logger"], [18, "module-arkouda.match"], [19, "module-arkouda.matcher"], [20, "module-arkouda.numeric"], [21, "module-arkouda.pdarrayclass"], [22, "module-arkouda.pdarraycreation"], [23, "module-arkouda.pdarraysetops"], [24, "module-arkouda.plotting"], [25, "module-arkouda.row"], [26, "module-arkouda.security"], [27, "module-arkouda.segarray"], [28, "module-arkouda.series"], [29, "module-arkouda.sorting"], [30, "module-arkouda.strings"], [31, "module-arkouda.timeclass"], [32, "module-arkouda.util"]], "string_operators() (in module arkouda.accessor)": [[2, "arkouda.accessor.string_operators"]], "nonuniqueerror": [[3, "arkouda.alignment.NonUniqueError"], [11, "arkouda.NonUniqueError"]], "align() (in module arkouda.alignment)": [[3, "arkouda.alignment.align"]], "arkouda.alignment": [[3, "module-arkouda.alignment"]], "find() (in module arkouda.alignment)": [[3, "arkouda.alignment.find"]], "in1d_intervals() (in module arkouda.alignment)": [[3, "arkouda.alignment.in1d_intervals"]], "interval_lookup() (in module arkouda.alignment)": [[3, "arkouda.alignment.interval_lookup"]], "is_cosorted() (in module arkouda.alignment)": [[3, "arkouda.alignment.is_cosorted"]], "left_align() (in module arkouda.alignment)": [[3, "arkouda.alignment.left_align"]], "lookup() (in module arkouda.alignment)": [[3, "arkouda.alignment.lookup"]], "right_align() (in module arkouda.alignment)": [[3, "arkouda.alignment.right_align"]], "search_intervals() (in module arkouda.alignment)": [[3, "arkouda.alignment.search_intervals"]], "unsqueeze() (in module arkouda.alignment)": [[3, "arkouda.alignment.unsqueeze"]], "zero_up() (in module arkouda.alignment)": [[3, "arkouda.alignment.zero_up"]], "arrayview (class in arkouda.array_view)": [[4, "arkouda.array_view.ArrayView"]], "arkouda.array_view": [[4, "module-arkouda.array_view"]], "base (arkouda.array_view.arrayview attribute)": [[4, "arkouda.array_view.ArrayView.base"]], "dtype (arkouda.array_view.arrayview attribute)": [[4, "arkouda.array_view.ArrayView.dtype"]], "itemsize (arkouda.array_view.arrayview attribute)": [[4, "arkouda.array_view.ArrayView.itemsize"]], "ndim (arkouda.array_view.arrayview attribute)": [[4, "arkouda.array_view.ArrayView.ndim"]], "order (arkouda.array_view.arrayview attribute)": [[4, "arkouda.array_view.ArrayView.order"]], "shape (arkouda.array_view.arrayview attribute)": [[4, "arkouda.array_view.ArrayView.shape"]], "size (arkouda.array_view.arrayview attribute)": [[4, "arkouda.array_view.ArrayView.size"]], "to_hdf() (arkouda.array_view.arrayview method)": [[4, "arkouda.array_view.ArrayView.to_hdf"]], "to_list() (arkouda.array_view.arrayview method)": [[4, "arkouda.array_view.ArrayView.to_list"]], "to_ndarray() (arkouda.array_view.arrayview method)": [[4, "arkouda.array_view.ArrayView.to_ndarray"]], "binops (arkouda.categorical.categorical attribute)": [[5, "arkouda.categorical.Categorical.BinOps"]], "categorical (class in arkouda.categorical)": [[5, "arkouda.categorical.Categorical"]], "registerablepieces (arkouda.categorical.categorical attribute)": [[5, "arkouda.categorical.Categorical.RegisterablePieces"]], "requiredpieces (arkouda.categorical.categorical attribute)": [[5, "arkouda.categorical.Categorical.RequiredPieces"]], "argsort() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.argsort"]], "arkouda.categorical": [[5, "module-arkouda.categorical"]], "attach() (arkouda.categorical.categorical static method)": [[5, "arkouda.categorical.Categorical.attach"]], "categories (arkouda.categorical.categorical attribute)": [[5, "arkouda.categorical.Categorical.categories"]], "codes (arkouda.categorical.categorical attribute)": [[5, "arkouda.categorical.Categorical.codes"]], "concatenate() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.concatenate"]], "contains() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.contains"]], "endswith() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.endswith"]], "from_codes() (arkouda.categorical.categorical class method)": [[5, "arkouda.categorical.Categorical.from_codes"]], "from_return_msg() (arkouda.categorical.categorical static method)": [[5, "arkouda.categorical.Categorical.from_return_msg"]], "group() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.group"]], "in1d() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.in1d"]], "info() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.info"]], "is_registered() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.is_registered"]], "isna() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.isna"]], "ndim (arkouda.categorical.categorical attribute)": [[5, "arkouda.categorical.Categorical.ndim"]], "nlevels (arkouda.categorical.categorical attribute)": [[5, "arkouda.categorical.Categorical.nlevels"]], "objtype (arkouda.categorical.categorical property)": [[5, "arkouda.categorical.Categorical.objtype"]], "parse_hdf_categoricals() (arkouda.categorical.categorical static method)": [[5, "arkouda.categorical.Categorical.parse_hdf_categoricals"]], "permutation (arkouda.categorical.categorical attribute)": [[5, "arkouda.categorical.Categorical.permutation"], [5, "id0"]], "pretty_print_info() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.pretty_print_info"]], "register() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.register"]], "reset_categories() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.reset_categories"]], "save() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.save"]], "segments (arkouda.categorical.categorical attribute)": [[5, "arkouda.categorical.Categorical.segments"], [5, "id1"]], "set_categories() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.set_categories"]], "shape (arkouda.categorical.categorical attribute)": [[5, "arkouda.categorical.Categorical.shape"]], "size (arkouda.categorical.categorical attribute)": [[5, "arkouda.categorical.Categorical.size"]], "sort() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.sort"]], "standardize_categories() (arkouda.categorical.categorical class method)": [[5, "arkouda.categorical.Categorical.standardize_categories"]], "startswith() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.startswith"]], "to_hdf() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.to_hdf"]], "to_list() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.to_list"]], "to_ndarray() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.to_ndarray"]], "to_parquet() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.to_parquet"]], "unique() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.unique"]], "unregister() (arkouda.categorical.categorical method)": [[5, "arkouda.categorical.Categorical.unregister"]], "unregister_categorical_by_name() (arkouda.categorical.categorical static method)": [[5, "arkouda.categorical.Categorical.unregister_categorical_by_name"]], "arkouda.client": [[6, "module-arkouda.client"]], "connect() (in module arkouda.client)": [[6, "arkouda.client.connect"]], "disconnect() (in module arkouda.client)": [[6, "arkouda.client.disconnect"]], "get_config() (in module arkouda.client)": [[6, "arkouda.client.get_config"]], "get_mem_avail() (in module arkouda.client)": [[6, "arkouda.client.get_mem_avail"]], "get_mem_used() (in module arkouda.client)": [[6, "arkouda.client.get_mem_used"]], "get_server_commands() (in module arkouda.client)": [[6, "arkouda.client.get_server_commands"]], "print_server_commands() (in module arkouda.client)": [[6, "arkouda.client.print_server_commands"]], "ruok() (in module arkouda.client)": [[6, "arkouda.client.ruok"]], "shutdown() (in module arkouda.client)": [[6, "arkouda.client.shutdown"]], "bitvector (class in arkouda.client_dtypes)": [[7, "arkouda.client_dtypes.BitVector"]], "bitvectorizer() (in module arkouda.client_dtypes)": [[7, "arkouda.client_dtypes.BitVectorizer"]], "fields (class in arkouda.client_dtypes)": [[7, "arkouda.client_dtypes.Fields"]], "ipv4 (class in arkouda.client_dtypes)": [[7, "arkouda.client_dtypes.IPv4"]], "arkouda.client_dtypes": [[7, "module-arkouda.client_dtypes"]], "conserves (arkouda.client_dtypes.bitvector attribute)": [[7, "arkouda.client_dtypes.BitVector.conserves"]], "format() (arkouda.client_dtypes.bitvector method)": [[7, "arkouda.client_dtypes.BitVector.format"]], "format() (arkouda.client_dtypes.fields method)": [[7, "arkouda.client_dtypes.Fields.format"]], "format() (arkouda.client_dtypes.ipv4 method)": [[7, "arkouda.client_dtypes.IPv4.format"]], "ip_address() (in module arkouda.client_dtypes)": [[7, "arkouda.client_dtypes.ip_address"]], "is_ipv4() (in module arkouda.client_dtypes)": [[7, "arkouda.client_dtypes.is_ipv4"]], "is_ipv6() (in module arkouda.client_dtypes)": [[7, "arkouda.client_dtypes.is_ipv6"]], "normalize() (arkouda.client_dtypes.ipv4 method)": [[7, "arkouda.client_dtypes.IPv4.normalize"]], "opeq() (arkouda.client_dtypes.bitvector method)": [[7, "arkouda.client_dtypes.BitVector.opeq"]], "opeq() (arkouda.client_dtypes.fields method)": [[7, "arkouda.client_dtypes.Fields.opeq"]], "opeq() (arkouda.client_dtypes.ipv4 method)": [[7, "arkouda.client_dtypes.IPv4.opeq"]], "to_list() (arkouda.client_dtypes.bitvector method)": [[7, "arkouda.client_dtypes.BitVector.to_list"]], "to_list() (arkouda.client_dtypes.ipv4 method)": [[7, "arkouda.client_dtypes.IPv4.to_list"]], "to_ndarray() (arkouda.client_dtypes.bitvector method)": [[7, "arkouda.client_dtypes.BitVector.to_ndarray"]], "to_ndarray() (arkouda.client_dtypes.ipv4 method)": [[7, "arkouda.client_dtypes.IPv4.to_ndarray"]], "column_classes (arkouda.dataframe.dataframe attribute)": [[8, "arkouda.dataframe.DataFrame.COLUMN_CLASSES"]], "dataframe (class in arkouda.dataframe)": [[8, "arkouda.dataframe.DataFrame"]], "groupby() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.GroupBy"], [8, "arkouda.dataframe.DataFrame.groupby"]], "append() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.append"]], "apply_permutation() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.apply_permutation"]], "argsort() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.argsort"]], "arkouda.dataframe": [[8, "module-arkouda.dataframe"]], "attach() (arkouda.dataframe.dataframe static method)": [[8, "arkouda.dataframe.DataFrame.attach"]], "coargsort() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.coargsort"]], "columns (arkouda.dataframe.dataframe property)": [[8, "arkouda.dataframe.DataFrame.columns"]], "concat() (arkouda.dataframe.dataframe class method)": [[8, "arkouda.dataframe.DataFrame.concat"]], "copy() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.copy"]], "corr() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.corr"]], "drop() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.drop"]], "drop_duplicates() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.drop_duplicates"]], "dtypes (arkouda.dataframe.dataframe property)": [[8, "arkouda.dataframe.DataFrame.dtypes"]], "empty (arkouda.dataframe.dataframe property)": [[8, "arkouda.dataframe.DataFrame.empty"]], "filter_by_range() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.filter_by_range"]], "from_pandas() (arkouda.dataframe.dataframe class method)": [[8, "arkouda.dataframe.DataFrame.from_pandas"]], "from_return_msg() (arkouda.dataframe.dataframe static method)": [[8, "arkouda.dataframe.DataFrame.from_return_msg"]], "head() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.head"]], "index (arkouda.dataframe.dataframe property)": [[8, "arkouda.dataframe.DataFrame.index"]], "info (arkouda.dataframe.dataframe property)": [[8, "arkouda.dataframe.DataFrame.info"]], "intersect() (in module arkouda.dataframe)": [[8, "arkouda.dataframe.intersect"]], "intx() (in module arkouda.dataframe)": [[8, "arkouda.dataframe.intx"]], "invert_permutation() (in module arkouda.dataframe)": [[8, "arkouda.dataframe.invert_permutation"]], "is_registered() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.is_registered"]], "isin() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.isin"]], "load() (arkouda.dataframe.dataframe class method)": [[8, "arkouda.dataframe.DataFrame.load"]], "memory_usage() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.memory_usage"]], "read_csv() (arkouda.dataframe.dataframe class method)": [[8, "arkouda.dataframe.DataFrame.read_csv"]], "register() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.register"]], "rename() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.rename"]], "reset_index() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.reset_index"]], "sample() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.sample"]], "save() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.save"]], "shape (arkouda.dataframe.dataframe property)": [[8, "arkouda.dataframe.DataFrame.shape"]], "size (arkouda.dataframe.dataframe property)": [[8, "arkouda.dataframe.DataFrame.size"]], "sort_values() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.sort_values"]], "sorted() (in module arkouda.dataframe)": [[8, "arkouda.dataframe.sorted"]], "tail() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.tail"]], "to_csv() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.to_csv"]], "to_hdf() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.to_hdf"]], "to_pandas() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.to_pandas"]], "to_parquet() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.to_parquet"]], "unregister() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.unregister"]], "unregister_dataframe_by_name() (arkouda.dataframe.dataframe static method)": [[8, "arkouda.dataframe.DataFrame.unregister_dataframe_by_name"]], "update_size() (arkouda.dataframe.dataframe method)": [[8, "arkouda.dataframe.DataFrame.update_size"]], "arkouda_supported_dtypes (in module arkouda.dtypes)": [[9, "arkouda.dtypes.ARKOUDA_SUPPORTED_DTYPES"]], "dtypeobjects (in module arkouda.dtypes)": [[9, "arkouda.dtypes.DTypeObjects"]], "dtypes (in module arkouda.dtypes)": [[9, "arkouda.dtypes.DTypes"]], "all_scalars (in module arkouda.dtypes)": [[9, "arkouda.dtypes.all_scalars"]], "arkouda.dtypes": [[9, "module-arkouda.dtypes"]], "bigint (in module arkouda.dtypes)": [[9, "arkouda.dtypes.bigint"]], "bittype (in module arkouda.dtypes)": [[9, "arkouda.dtypes.bitType"]], "bool (in module arkouda.dtypes)": [[9, "arkouda.dtypes.bool"]], "bool_scalars (in module arkouda.dtypes)": [[9, "arkouda.dtypes.bool_scalars"]], "check_np_dtype() (in module arkouda.dtypes)": [[9, "arkouda.dtypes.check_np_dtype"]], "dtype() (in module arkouda.dtypes)": [[9, "arkouda.dtypes.dtype"]], "float64 (in module arkouda.dtypes)": [[9, "arkouda.dtypes.float64"]], "float_scalars (in module arkouda.dtypes)": [[9, "arkouda.dtypes.float_scalars"]], "get_byteorder() (in module arkouda.dtypes)": [[9, "arkouda.dtypes.get_byteorder"]], "get_server_byteorder() (in module arkouda.dtypes)": [[9, "arkouda.dtypes.get_server_byteorder"]], "int64 (in module arkouda.dtypes)": [[9, "arkouda.dtypes.int64"]], "inttypes (in module arkouda.dtypes)": [[9, "arkouda.dtypes.intTypes"]], "int_scalars (in module arkouda.dtypes)": [[9, "arkouda.dtypes.int_scalars"]], "numeric_scalars (in module arkouda.dtypes)": [[9, "arkouda.dtypes.numeric_scalars"]], "numpy_scalars (in module arkouda.dtypes)": [[9, "arkouda.dtypes.numpy_scalars"]], "resolve_scalar_dtype() (in module arkouda.dtypes)": [[9, "arkouda.dtypes.resolve_scalar_dtype"]], "str_ (in module arkouda.dtypes)": [[9, "arkouda.dtypes.str_"]], "str_scalars (in module arkouda.dtypes)": [[9, "arkouda.dtypes.str_scalars"]], "translate_np_dtype() (in module arkouda.dtypes)": [[9, "arkouda.dtypes.translate_np_dtype"]], "uint64 (in module arkouda.dtypes)": [[9, "arkouda.dtypes.uint64"]], "uint8 (in module arkouda.dtypes)": [[9, "arkouda.dtypes.uint8"]], "and() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.AND"]], "groupby_reduction_types (in module arkouda.groupbyclass)": [[10, "arkouda.groupbyclass.GROUPBY_REDUCTION_TYPES"]], "groupby (class in arkouda.groupbyclass)": [[10, "arkouda.groupbyclass.GroupBy"]], "or() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.OR"]], "reductions (arkouda.groupbyclass.groupby attribute)": [[10, "arkouda.groupbyclass.GroupBy.Reductions"]], "xor() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.XOR"]], "aggregate() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.aggregate"]], "all() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.all"]], "any() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.any"]], "argmax() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.argmax"]], "argmin() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.argmin"]], "arkouda.groupbyclass": [[10, "module-arkouda.groupbyclass"]], "attach() (arkouda.groupbyclass.groupby static method)": [[10, "arkouda.groupbyclass.GroupBy.attach"]], "broadcast() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.broadcast"]], "broadcast() (in module arkouda.groupbyclass)": [[10, "arkouda.groupbyclass.broadcast"]], "build_from_components() (arkouda.groupbyclass.groupby static method)": [[10, "arkouda.groupbyclass.GroupBy.build_from_components"]], "count() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.count"]], "first() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.first"]], "is_registered() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.is_registered"]], "logger (arkouda.groupbyclass.groupby attribute)": [[10, "arkouda.groupbyclass.GroupBy.logger"]], "max() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.max"]], "mean() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.mean"]], "median() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.median"]], "min() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.min"]], "mode() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.mode"]], "most_common() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.most_common"]], "ngroups (arkouda.groupbyclass.groupby attribute)": [[10, "arkouda.groupbyclass.GroupBy.ngroups"]], "nkeys (arkouda.groupbyclass.groupby attribute)": [[10, "arkouda.groupbyclass.GroupBy.nkeys"]], "nunique() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.nunique"]], "permutation (arkouda.groupbyclass.groupby attribute)": [[10, "arkouda.groupbyclass.GroupBy.permutation"]], "prod() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.prod"]], "register() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.register"]], "segments (arkouda.groupbyclass.groupby attribute)": [[10, "arkouda.groupbyclass.GroupBy.segments"]], "size (arkouda.groupbyclass.groupby attribute)": [[10, "arkouda.groupbyclass.GroupBy.size"]], "size() (arkouda.groupbyclass.groupby method)": [[10, "id0"]], "std() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.std"]], "sum() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.sum"]], "unique() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.unique"]], "unique() (in module arkouda.groupbyclass)": [[10, "arkouda.groupbyclass.unique"]], "unique_keys (arkouda.groupbyclass.groupby attribute)": [[10, "arkouda.groupbyclass.GroupBy.unique_keys"]], "unregister() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.unregister"]], "unregister_groupby_by_name() (arkouda.groupbyclass.groupby static method)": [[10, "arkouda.groupbyclass.GroupBy.unregister_groupby_by_name"]], "var() (arkouda.groupbyclass.groupby method)": [[10, "arkouda.groupbyclass.GroupBy.var"]], "and() (arkouda.groupby method)": [[11, "arkouda.GroupBy.AND"], [11, "id194"], [11, "id306"], [11, "id458"], [11, "id91"], [66, "arkouda.GroupBy.AND"]], "and() (arkouda.segarray method)": [[11, "arkouda.SegArray.AND"]], "arkouda_supported_dtypes (in module arkouda)": [[11, "arkouda.ARKOUDA_SUPPORTED_DTYPES"]], "allsymbols (in module arkouda)": [[11, "arkouda.AllSymbols"]], "arrayview (class in arkouda)": [[11, "arkouda.ArrayView"], [62, "arkouda.ArrayView"]], "binops (arkouda.categorical attribute)": [[11, "arkouda.Categorical.BinOps"], [11, "id396"], [11, "id607"]], "binops (arkouda.strings attribute)": [[11, "arkouda.Strings.BinOps"], [11, "id113"], [11, "id547"], [11, "id648"]], "binops (arkouda.pdarray attribute)": [[11, "arkouda.pdarray.BinOps"], [11, "id12"], [11, "id219"], [11, "id328"], [11, "id481"]], "bitvector (class in arkouda)": [[11, "arkouda.BitVector"]], "bitvectorizer() (in module arkouda)": [[11, "arkouda.BitVectorizer"]], "column_classes (arkouda.dataframe attribute)": [[11, "arkouda.DataFrame.COLUMN_CLASSES"]], "cachedaccessor (class in arkouda)": [[11, "arkouda.CachedAccessor"]], "categorical (class in arkouda)": [[11, "arkouda.Categorical"], [11, "id386"], [11, "id597"], [63, "arkouda.Categorical"]], "dtypeobjects (in module arkouda)": [[11, "arkouda.DTypeObjects"]], "dtypes (in module arkouda)": [[11, "arkouda.DTypes"]], "dataframe (class in arkouda)": [[11, "arkouda.DataFrame"], [65, "arkouda.DataFrame"]], "datetimeaccessor (class in arkouda)": [[11, "arkouda.DatetimeAccessor"]], "errormode (class in arkouda)": [[11, "arkouda.ErrorMode"]], "fields (class in arkouda)": [[11, "arkouda.Fields"]], "groupby_reduction_types (in module arkouda)": [[11, "arkouda.GROUPBY_REDUCTION_TYPES"]], "groupby (class in arkouda)": [[11, "arkouda.GroupBy"], [11, "id168"], [11, "id280"], [11, "id432"], [11, "id65"], [66, "arkouda.GroupBy"]], "groupby() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.GroupBy"], [11, "arkouda.DataFrame.groupby"]], "ipv4 (class in arkouda)": [[11, "arkouda.IPv4"]], "index (class in arkouda)": [[11, "arkouda.Index"], [59, "arkouda.Index"]], "multiindex (class in arkouda)": [[11, "arkouda.MultiIndex"]], "or() (arkouda.groupby method)": [[11, "arkouda.GroupBy.OR"], [11, "id193"], [11, "id305"], [11, "id457"], [11, "id90"], [66, "arkouda.GroupBy.OR"]], "or() (arkouda.segarray method)": [[11, "arkouda.SegArray.OR"]], "opeqops (arkouda.pdarray attribute)": [[11, "arkouda.pdarray.OpEqOps"], [11, "id13"], [11, "id220"], [11, "id329"], [11, "id482"]], "properties (class in arkouda)": [[11, "arkouda.Properties"]], "reductions (arkouda.groupby attribute)": [[11, "arkouda.GroupBy.Reductions"], [11, "id176"], [11, "id288"], [11, "id440"], [11, "id73"]], "registerablepieces (arkouda.categorical attribute)": [[11, "arkouda.Categorical.RegisterablePieces"], [11, "id397"], [11, "id608"]], "registeredsymbols (in module arkouda)": [[11, "arkouda.RegisteredSymbols"]], "registrationerror": [[11, "arkouda.RegistrationError"], [11, "id210"], [21, "arkouda.pdarrayclass.RegistrationError"]], "requiredpieces (arkouda.categorical attribute)": [[11, "arkouda.Categorical.RequiredPieces"], [11, "id398"], [11, "id609"]], "row (class in arkouda)": [[11, "arkouda.Row"]], "segarray (class in arkouda)": [[11, "arkouda.SegArray"]], "series (class in arkouda)": [[11, "arkouda.Series"], [71, "arkouda.Series"]], "stringaccessor (class in arkouda)": [[11, "arkouda.StringAccessor"]], "strings (class in arkouda)": [[11, "arkouda.Strings"], [11, "id105"], [11, "id539"], [11, "id640"]], "xor() (arkouda.groupby method)": [[11, "arkouda.GroupBy.XOR"], [11, "id195"], [11, "id307"], [11, "id459"], [11, "id92"], [66, "arkouda.GroupBy.XOR"]], "xor() (arkouda.segarray method)": [[11, "arkouda.SegArray.XOR"]], "abs() (in module arkouda)": [[11, "arkouda.abs"], [61, "arkouda.abs"]], "add() (arkouda.series method)": [[11, "arkouda.Series.add"]], "aggregate() (arkouda.groupby method)": [[11, "arkouda.GroupBy.aggregate"], [11, "id179"], [11, "id291"], [11, "id443"], [11, "id76"], [66, "arkouda.GroupBy.aggregate"]], "aggregate() (arkouda.segarray method)": [[11, "arkouda.SegArray.aggregate"]], "akbool (in module arkouda)": [[11, "arkouda.akbool"], [11, "id278"]], "akcast() (in module arkouda)": [[11, "arkouda.akcast"]], "akfloat64 (in module arkouda)": [[11, "arkouda.akfloat64"], [11, "id430"]], "akint64 (in module arkouda)": [[11, "arkouda.akint64"], [11, "id279"], [11, "id431"]], "akuint64 (in module arkouda)": [[11, "arkouda.akuint64"]], "align() (in module arkouda)": [[11, "arkouda.align"]], "all() (arkouda.groupby method)": [[11, "arkouda.GroupBy.all"], [11, "id192"], [11, "id304"], [11, "id456"], [11, "id89"], [66, "arkouda.GroupBy.all"]], "all() (arkouda.segarray method)": [[11, "arkouda.SegArray.all"]], "all() (arkouda.pdarray method)": [[11, "arkouda.pdarray.all"], [11, "id19"], [11, "id226"], [11, "id335"], [11, "id488"], [67, "arkouda.pdarray.all"]], "all() (in module arkouda)": [[11, "arkouda.all"], [61, "arkouda.all"]], "all_scalars (in module arkouda)": [[11, "arkouda.all_scalars"]], "any() (arkouda.groupby method)": [[11, "arkouda.GroupBy.any"], [11, "id191"], [11, "id303"], [11, "id455"], [11, "id88"], [66, "arkouda.GroupBy.any"]], "any() (arkouda.segarray method)": [[11, "arkouda.SegArray.any"]], "any() (arkouda.pdarray method)": [[11, "arkouda.pdarray.any"], [11, "id18"], [11, "id225"], [11, "id334"], [11, "id487"], [67, "arkouda.pdarray.any"]], "any() (in module arkouda)": [[11, "arkouda.any"], [61, "arkouda.any"]], "append() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.append"]], "append() (arkouda.segarray method)": [[11, "arkouda.SegArray.append"]], "append_single() (arkouda.segarray method)": [[11, "arkouda.SegArray.append_single"]], "apply_permutation() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.apply_permutation"]], "arange() (in module arkouda)": [[11, "arkouda.arange"], [11, "id268"], [11, "id377"], [11, "id530"], [11, "id63"], [64, "arkouda.arange"]], "argmax() (arkouda.groupby method)": [[11, "arkouda.GroupBy.argmax"], [11, "id189"], [11, "id301"], [11, "id453"], [11, "id86"], [66, "arkouda.GroupBy.argmax"]], "argmax() (arkouda.segarray method)": [[11, "arkouda.SegArray.argmax"]], "argmax() (arkouda.pdarray method)": [[11, "arkouda.pdarray.argmax"], [11, "id236"], [11, "id29"], [11, "id345"], [11, "id498"], [67, "arkouda.pdarray.argmax"]], "argmax() (in module arkouda)": [[11, "arkouda.argmax"], [61, "arkouda.argmax"]], "argmaxk() (arkouda.pdarray method)": [[11, "arkouda.pdarray.argmaxk"], [11, "id245"], [11, "id354"], [11, "id38"], [11, "id507"], [67, "arkouda.pdarray.argmaxk"]], "argmaxk() (in module arkouda)": [[11, "arkouda.argmaxk"], [61, "arkouda.argmaxk"]], "argmin() (arkouda.groupby method)": [[11, "arkouda.GroupBy.argmin"], [11, "id188"], [11, "id300"], [11, "id452"], [11, "id85"], [66, "arkouda.GroupBy.argmin"]], "argmin() (arkouda.segarray method)": [[11, "arkouda.SegArray.argmin"]], "argmin() (arkouda.pdarray method)": [[11, "arkouda.pdarray.argmin"], [11, "id235"], [11, "id28"], [11, "id344"], [11, "id497"], [67, "arkouda.pdarray.argmin"]], "argmin() (in module arkouda)": [[11, "arkouda.argmin"], [61, "arkouda.argmin"]], "argmink() (arkouda.pdarray method)": [[11, "arkouda.pdarray.argmink"], [11, "id244"], [11, "id353"], [11, "id37"], [11, "id506"], [67, "arkouda.pdarray.argmink"]], "argmink() (in module arkouda)": [[11, "arkouda.argmink"], [61, "arkouda.argmink"]], "argsort() (arkouda.categorical method)": [[11, "arkouda.Categorical.argsort"], [11, "id415"], [11, "id626"]], "argsort() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.argsort"]], "argsort() (arkouda.index method)": [[11, "arkouda.Index.argsort"]], "argsort() (arkouda.multiindex method)": [[11, "arkouda.MultiIndex.argsort"]], "argsort() (in module arkouda)": [[11, "arkouda.argsort"], [11, "id380"], [11, "id537"], [60, "arkouda.argsort"]], "arkouda": [[11, "module-arkouda"]], "array() (in module arkouda)": [[11, "arkouda.array"], [11, "id269"], [11, "id378"], [11, "id61"], [58, "arkouda.array"]], "astype() (arkouda.strings method)": [[11, "arkouda.Strings.astype"], [11, "id151"], [11, "id585"], [11, "id686"]], "astype() (arkouda.pdarray method)": [[11, "arkouda.pdarray.astype"], [11, "id252"], [11, "id361"], [11, "id45"], [11, "id514"]], "attach() (arkouda.categorical static method)": [[11, "arkouda.Categorical.attach"], [11, "id426"], [11, "id637"]], "attach() (arkouda.dataframe static method)": [[11, "arkouda.DataFrame.attach"]], "attach() (arkouda.groupby static method)": [[11, "arkouda.GroupBy.attach"], [11, "id101"], [11, "id204"], [11, "id316"], [11, "id468"], [66, "arkouda.GroupBy.attach"]], "attach() (arkouda.segarray class method)": [[11, "arkouda.SegArray.attach"]], "attach() (arkouda.series static method)": [[11, "arkouda.Series.attach"]], "attach() (arkouda.strings static method)": [[11, "arkouda.Strings.attach"], [11, "id161"], [11, "id595"], [11, "id696"]], "attach() (arkouda.pdarray static method)": [[11, "arkouda.pdarray.attach"], [11, "id267"], [11, "id376"], [11, "id529"], [11, "id60"]], "attach_pdarray() (in module arkouda)": [[11, "arkouda.attach_pdarray"]], "base (arkouda.arrayview attribute)": [[11, "arkouda.ArrayView.base"], [62, "arkouda.ArrayView.base"]], "bigint (in module arkouda)": [[11, "arkouda.bigint"], [11, "id429"]], "bigint_from_uint_arrays() (in module arkouda)": [[11, "arkouda.bigint_from_uint_arrays"]], "bigint_to_uint_arrays() (arkouda.pdarray method)": [[11, "arkouda.pdarray.bigint_to_uint_arrays"], [11, "id254"], [11, "id363"], [11, "id47"], [11, "id516"]], "bittype (in module arkouda)": [[11, "arkouda.bitType"], [11, "id4"]], "bool (in module arkouda)": [[11, "arkouda.bool"]], "bool_scalars (in module arkouda)": [[11, "arkouda.bool_scalars"]], "broadcast() (arkouda.groupby method)": [[11, "arkouda.GroupBy.broadcast"], [11, "id199"], [11, "id311"], [11, "id463"], [11, "id96"], [66, "arkouda.GroupBy.broadcast"]], "broadcast() (in module arkouda)": [[11, "arkouda.broadcast"], [11, "id104"], [11, "id207"], [11, "id471"]], "build_from_components() (arkouda.groupby static method)": [[11, "arkouda.GroupBy.build_from_components"], [11, "id200"], [11, "id312"], [11, "id464"], [11, "id97"], [66, "arkouda.GroupBy.build_from_components"]], "cached_regex_patterns() (arkouda.strings method)": [[11, "arkouda.Strings.cached_regex_patterns"], [11, "id127"], [11, "id561"], [11, "id662"]], "cast() (in module arkouda)": [[11, "arkouda.cast"], [69, "arkouda.cast"]], "categories (arkouda.categorical attribute)": [[11, "arkouda.Categorical.categories"], [11, "id387"], [11, "id598"], [63, "arkouda.Categorical.categories"]], "check_np_dtype() (in module arkouda)": [[11, "arkouda.check_np_dtype"]], "clear() (in module arkouda)": [[11, "arkouda.clear"]], "clz() (arkouda.pdarray method)": [[11, "arkouda.pdarray.clz"], [11, "id248"], [11, "id357"], [11, "id41"], [11, "id510"]], "clz() (in module arkouda)": [[11, "arkouda.clz"]], "coargsort() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.coargsort"]], "coargsort() (in module arkouda)": [[11, "arkouda.coargsort"], [11, "id383"], [11, "id538"], [60, "arkouda.coargsort"]], "codes (arkouda.categorical attribute)": [[11, "arkouda.Categorical.codes"], [11, "id388"], [11, "id599"], [63, "arkouda.Categorical.codes"]], "columns (arkouda.dataframe property)": [[11, "arkouda.DataFrame.columns"]], "compute_join_size() (in module arkouda)": [[11, "arkouda.compute_join_size"]], "concat() (arkouda.dataframe class method)": [[11, "arkouda.DataFrame.concat"]], "concat() (arkouda.index method)": [[11, "arkouda.Index.concat"]], "concat() (arkouda.multiindex method)": [[11, "arkouda.MultiIndex.concat"]], "concat() (arkouda.segarray class method)": [[11, "arkouda.SegArray.concat"]], "concat() (arkouda.series static method)": [[11, "arkouda.Series.concat"]], "concatenate() (arkouda.categorical method)": [[11, "arkouda.Categorical.concatenate"], [11, "id417"], [11, "id628"]], "concatenate() (in module arkouda)": [[11, "arkouda.concatenate"], [11, "id272"], [11, "id534"], [64, "arkouda.concatenate"]], "conserves (arkouda.bitvector attribute)": [[11, "arkouda.BitVector.conserves"]], "contains() (arkouda.categorical method)": [[11, "arkouda.Categorical.contains"], [11, "id409"], [11, "id620"], [63, "arkouda.Categorical.contains"]], "contains() (arkouda.strings method)": [[11, "arkouda.Strings.contains"], [11, "id137"], [11, "id571"], [11, "id672"], [74, "arkouda.Strings.contains"]], "convert_if_categorical() (in module arkouda)": [[11, "arkouda.convert_if_categorical"]], "copy() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.copy"]], "copy() (arkouda.segarray method)": [[11, "arkouda.SegArray.copy"]], "corr() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.corr"]], "corr() (arkouda.pdarray method)": [[11, "arkouda.pdarray.corr"], [11, "id241"], [11, "id34"], [11, "id350"], [11, "id503"]], "corr() (in module arkouda)": [[11, "arkouda.corr"]], "cos() (in module arkouda)": [[11, "arkouda.cos"], [61, "arkouda.cos"]], "count() (arkouda.groupby method)": [[11, "arkouda.GroupBy.count"], [11, "id178"], [11, "id290"], [11, "id442"], [11, "id75"], [66, "arkouda.GroupBy.count"]], "cov() (arkouda.pdarray method)": [[11, "arkouda.pdarray.cov"], [11, "id240"], [11, "id33"], [11, "id349"], [11, "id502"]], "cov() (in module arkouda)": [[11, "arkouda.cov"]], "create_pdarray() (in module arkouda)": [[11, "arkouda.create_pdarray"]], "ctz() (arkouda.pdarray method)": [[11, "arkouda.pdarray.ctz"], [11, "id249"], [11, "id358"], [11, "id42"], [11, "id511"]], "ctz() (in module arkouda)": [[11, "arkouda.ctz"]], "cumprod() (in module arkouda)": [[11, "arkouda.cumprod"], [61, "arkouda.cumprod"]], "cumsum() (in module arkouda)": [[11, "arkouda.cumsum"], [11, "id209"], [61, "arkouda.cumsum"]], "date_operators() (in module arkouda)": [[11, "arkouda.date_operators"]], "decode() (arkouda.strings method)": [[11, "arkouda.Strings.decode"], [11, "id119"], [11, "id553"], [11, "id654"]], "diff() (arkouda.series method)": [[11, "arkouda.Series.diff"]], "disableverbose() (in module arkouda)": [[11, "arkouda.disableVerbose"]], "drop() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.drop"]], "drop_duplicates() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.drop_duplicates"]], "dt (arkouda.series attribute)": [[11, "arkouda.Series.dt"]], "dtype (arkouda.arrayview attribute)": [[11, "arkouda.ArrayView.dtype"], [62, "arkouda.ArrayView.dtype"]], "dtype (arkouda.strings attribute)": [[11, "arkouda.Strings.dtype"], [11, "id111"], [11, "id545"], [11, "id646"]], "dtype (arkouda.pdarray attribute)": [[11, "arkouda.pdarray.dtype"], [11, "id214"], [11, "id323"], [11, "id476"], [11, "id7"], [69, "arkouda.pdarray.dtype"]], "dtype() (in module arkouda)": [[11, "arkouda.dtype"]], "dtypes (arkouda.dataframe property)": [[11, "arkouda.DataFrame.dtypes"]], "empty (arkouda.dataframe property)": [[11, "arkouda.DataFrame.empty"]], "enableverbose() (in module arkouda)": [[11, "arkouda.enableVerbose"]], "encode() (arkouda.strings method)": [[11, "arkouda.Strings.encode"], [11, "id118"], [11, "id552"], [11, "id653"]], "endswith() (arkouda.categorical method)": [[11, "arkouda.Categorical.endswith"], [11, "id411"], [11, "id622"], [63, "arkouda.Categorical.endswith"]], "endswith() (arkouda.strings method)": [[11, "arkouda.Strings.endswith"], [11, "id139"], [11, "id573"], [11, "id674"], [74, "arkouda.Strings.endswith"]], "entry (arkouda.strings attribute)": [[11, "arkouda.Strings.entry"], [11, "id106"], [11, "id540"], [11, "id641"]], "exp() (in module arkouda)": [[11, "arkouda.exp"], [61, "arkouda.exp"]], "export() (in module arkouda)": [[11, "arkouda.export"], [58, "arkouda.export"]], "factory() (arkouda.index static method)": [[11, "arkouda.Index.factory"]], "fill() (arkouda.pdarray method)": [[11, "arkouda.pdarray.fill"], [11, "id17"], [11, "id224"], [11, "id333"], [11, "id486"]], "filter_by_range() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.filter_by_range"]], "find() (in module arkouda)": [[11, "arkouda.find"]], "find_locations() (arkouda.strings method)": [[11, "arkouda.Strings.find_locations"], [11, "id129"], [11, "id563"], [11, "id664"], [74, "arkouda.Strings.find_locations"]], "findall() (arkouda.strings method)": [[11, "arkouda.Strings.findall"], [11, "id134"], [11, "id568"], [11, "id669"], [74, "arkouda.Strings.findall"]], "first() (arkouda.groupby method)": [[11, "arkouda.GroupBy.first"], [11, "id196"], [11, "id308"], [11, "id460"], [11, "id93"], [66, "arkouda.GroupBy.first"]], "flatten() (arkouda.strings method)": [[11, "arkouda.Strings.flatten"], [11, "id140"], [11, "id574"], [11, "id675"], [74, "arkouda.Strings.flatten"]], "float64 (in module arkouda)": [[11, "arkouda.float64"]], "float_scalars (in module arkouda)": [[11, "arkouda.float_scalars"]], "format() (arkouda.bitvector method)": [[11, "arkouda.BitVector.format"]], "format() (arkouda.fields method)": [[11, "arkouda.Fields.format"]], "format() (arkouda.ipv4 method)": [[11, "arkouda.IPv4.format"]], "format_other() (arkouda.pdarray method)": [[11, "arkouda.pdarray.format_other"], [11, "id15"], [11, "id222"], [11, "id331"], [11, "id484"]], "from_codes() (arkouda.categorical class method)": [[11, "arkouda.Categorical.from_codes"], [11, "id401"], [11, "id612"], [63, "arkouda.Categorical.from_codes"]], "from_multi_array() (arkouda.segarray class method)": [[11, "arkouda.SegArray.from_multi_array"]], "from_pandas() (arkouda.dataframe class method)": [[11, "arkouda.DataFrame.from_pandas"]], "from_parts() (arkouda.segarray class method)": [[11, "arkouda.SegArray.from_parts"]], "from_parts() (arkouda.strings static method)": [[11, "arkouda.Strings.from_parts"], [11, "id116"], [11, "id550"], [11, "id651"]], "from_return_msg() (arkouda.categorical static method)": [[11, "arkouda.Categorical.from_return_msg"], [11, "id404"], [11, "id615"]], "from_return_msg() (arkouda.dataframe static method)": [[11, "arkouda.DataFrame.from_return_msg"]], "from_return_msg() (arkouda.segarray class method)": [[11, "arkouda.SegArray.from_return_msg"]], "from_return_msg() (arkouda.series static method)": [[11, "arkouda.Series.from_return_msg"]], "from_return_msg() (arkouda.strings static method)": [[11, "arkouda.Strings.from_return_msg"], [11, "id115"], [11, "id549"], [11, "id650"]], "from_series() (in module arkouda)": [[11, "arkouda.from_series"]], "full() (in module arkouda)": [[11, "arkouda.full"], [11, "id531"]], "full_like() (in module arkouda)": [[11, "arkouda.full_like"]], "fullmatch() (arkouda.strings method)": [[11, "arkouda.Strings.fullmatch"], [11, "id132"], [11, "id566"], [11, "id667"], [74, "arkouda.Strings.fullmatch"]], "gen_ranges() (in module arkouda)": [[11, "arkouda.gen_ranges"], [11, "id273"]], "generic_concat() (in module arkouda)": [[11, "arkouda.generic_concat"]], "getarkoudalogger() (in module arkouda)": [[11, "arkouda.getArkoudaLogger"]], "get_byteorder() (in module arkouda)": [[11, "arkouda.get_byteorder"]], "get_callback() (in module arkouda)": [[11, "arkouda.get_callback"]], "get_columns() (in module arkouda)": [[11, "arkouda.get_columns"]], "get_datasets() (in module arkouda)": [[11, "arkouda.get_datasets"], [58, "arkouda.get_datasets"]], "get_filetype() (in module arkouda)": [[11, "arkouda.get_filetype"]], "get_jth() (arkouda.segarray method)": [[11, "arkouda.SegArray.get_jth"]], "get_length_n() (arkouda.segarray method)": [[11, "arkouda.SegArray.get_length_n"]], "get_lengths() (arkouda.strings method)": [[11, "arkouda.Strings.get_lengths"], [11, "id117"], [11, "id551"], [11, "id652"]], "get_ngrams() (arkouda.segarray method)": [[11, "arkouda.SegArray.get_ngrams"]], "get_null_indices() (in module arkouda)": [[11, "arkouda.get_null_indices"]], "get_prefixes() (arkouda.segarray method)": [[11, "arkouda.SegArray.get_prefixes"]], "get_prefixes() (arkouda.strings method)": [[11, "arkouda.Strings.get_prefixes"], [11, "id145"], [11, "id579"], [11, "id680"]], "get_server_byteorder() (in module arkouda)": [[11, "arkouda.get_server_byteorder"]], "get_suffixes() (arkouda.segarray method)": [[11, "arkouda.SegArray.get_suffixes"]], "get_suffixes() (arkouda.strings method)": [[11, "arkouda.Strings.get_suffixes"], [11, "id146"], [11, "id580"], [11, "id681"]], "group() (arkouda.categorical method)": [[11, "arkouda.Categorical.group"], [11, "id414"], [11, "id625"]], "group() (arkouda.strings method)": [[11, "arkouda.Strings.group"], [11, "id148"], [11, "id582"], [11, "id683"]], "hash() (arkouda.strings method)": [[11, "arkouda.Strings.hash"], [11, "id147"], [11, "id581"], [11, "id682"]], "hash() (in module arkouda)": [[11, "arkouda.hash"]], "head() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.head"]], "head() (arkouda.series method)": [[11, "arkouda.Series.head"]], "histogram() (in module arkouda)": [[11, "arkouda.histogram"], [67, "arkouda.histogram"]], "ignore (arkouda.errormode attribute)": [[11, "arkouda.ErrorMode.ignore"]], "import_data() (in module arkouda)": [[11, "arkouda.import_data"], [58, "arkouda.import_data"]], "in1d() (arkouda.categorical method)": [[11, "arkouda.Categorical.in1d"], [11, "id412"], [11, "id623"]], "in1d() (in module arkouda)": [[11, "arkouda.in1d"], [11, "id381"], [11, "id535"], [72, "arkouda.in1d"]], "in1d_intervals() (in module arkouda)": [[11, "arkouda.in1d_intervals"]], "index (arkouda.dataframe property)": [[11, "arkouda.DataFrame.index"]], "index (arkouda.index property)": [[11, "arkouda.Index.index"]], "index (arkouda.multiindex property)": [[11, "arkouda.MultiIndex.index"]], "info (arkouda.dataframe property)": [[11, "arkouda.DataFrame.info"]], "info() (arkouda.categorical method)": [[11, "arkouda.Categorical.info"], [11, "id424"], [11, "id635"]], "info() (arkouda.strings method)": [[11, "arkouda.Strings.info"], [11, "id157"], [11, "id591"], [11, "id692"]], "info() (arkouda.pdarray method)": [[11, "arkouda.pdarray.info"], [11, "id21"], [11, "id228"], [11, "id337"], [11, "id490"]], "information() (in module arkouda)": [[11, "arkouda.information"]], "int64 (in module arkouda)": [[11, "arkouda.int64"]], "inttypes (in module arkouda)": [[11, "arkouda.intTypes"], [11, "id3"]], "int_scalars (in module arkouda)": [[11, "arkouda.int_scalars"]], "intersect() (arkouda.segarray method)": [[11, "arkouda.SegArray.intersect"]], "intersect() (in module arkouda)": [[11, "arkouda.intersect"]], "intersect1d() (in module arkouda)": [[11, "arkouda.intersect1d"], [72, "arkouda.intersect1d"]], "interval_lookup() (in module arkouda)": [[11, "arkouda.interval_lookup"]], "intx() (in module arkouda)": [[11, "arkouda.intx"]], "invert_permutation() (in module arkouda)": [[11, "arkouda.invert_permutation"]], "ip_address() (in module arkouda)": [[11, "arkouda.ip_address"]], "issupportedint() (in module arkouda)": [[11, "arkouda.isSupportedInt"], [11, "id165"]], "is_cosorted() (in module arkouda)": [[11, "arkouda.is_cosorted"]], "is_ipv4() (in module arkouda)": [[11, "arkouda.is_ipv4"]], "is_ipv6() (in module arkouda)": [[11, "arkouda.is_ipv6"]], "is_lower() (arkouda.strings method)": [[11, "arkouda.Strings.is_lower"], [11, "id123"], [11, "id557"], [11, "id658"]], "is_registered() (arkouda.categorical method)": [[11, "arkouda.Categorical.is_registered"], [11, "id423"], [11, "id634"]], "is_registered() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.is_registered"]], "is_registered() (arkouda.groupby method)": [[11, "arkouda.GroupBy.is_registered"], [11, "id100"], [11, "id203"], [11, "id315"], [11, "id467"], [66, "arkouda.GroupBy.is_registered"]], "is_registered() (arkouda.index method)": [[11, "arkouda.Index.is_registered"]], "is_registered() (arkouda.segarray method)": [[11, "arkouda.SegArray.is_registered"]], "is_registered() (arkouda.series method)": [[11, "arkouda.Series.is_registered"]], "is_registered() (arkouda.strings method)": [[11, "arkouda.Strings.is_registered"], [11, "id156"], [11, "id590"], [11, "id691"]], "is_registered() (arkouda.pdarray method)": [[11, "arkouda.pdarray.is_registered"], [11, "id20"], [11, "id227"], [11, "id336"], [11, "id489"]], "is_sorted() (arkouda.pdarray method)": [[11, "arkouda.pdarray.is_sorted"], [11, "id23"], [11, "id230"], [11, "id339"], [11, "id492"], [67, "arkouda.pdarray.is_sorted"]], "is_sorted() (in module arkouda)": [[11, "arkouda.is_sorted"], [11, "id211"], [61, "arkouda.is_sorted"]], "is_title() (arkouda.strings method)": [[11, "arkouda.Strings.is_title"], [11, "id125"], [11, "id559"], [11, "id660"]], "is_unique (arkouda.index property)": [[11, "arkouda.Index.is_unique"]], "is_upper() (arkouda.strings method)": [[11, "arkouda.Strings.is_upper"], [11, "id124"], [11, "id558"], [11, "id659"]], "isin() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.isin"]], "isin() (arkouda.series method)": [[11, "arkouda.Series.isin"]], "isna() (arkouda.categorical method)": [[11, "arkouda.Categorical.isna"], [11, "id407"], [11, "id618"]], "isnan() (in module arkouda)": [[11, "arkouda.isnan"]], "itemsize (arkouda.arrayview attribute)": [[11, "arkouda.ArrayView.itemsize"], [62, "arkouda.ArrayView.itemsize"]], "itemsize (arkouda.pdarray attribute)": [[11, "arkouda.pdarray.itemsize"], [11, "id11"], [11, "id218"], [11, "id327"], [11, "id480"], [69, "arkouda.pdarray.itemsize"]], "join_on_eq_with_dt() (in module arkouda)": [[11, "arkouda.join_on_eq_with_dt"]], "left_align() (in module arkouda)": [[11, "arkouda.left_align"]], "lengths (arkouda.segarray property)": [[11, "arkouda.SegArray.lengths"]], "linspace() (in module arkouda)": [[11, "arkouda.linspace"], [64, "arkouda.linspace"]], "list_registry() (in module arkouda)": [[11, "arkouda.list_registry"], [11, "id208"], [11, "id320"]], "list_symbol_table() (in module arkouda)": [[11, "arkouda.list_symbol_table"]], "load() (arkouda.dataframe class method)": [[11, "arkouda.DataFrame.load"]], "load() (arkouda.segarray class method)": [[11, "arkouda.SegArray.load"]], "load() (in module arkouda)": [[11, "arkouda.load"]], "load_all() (in module arkouda)": [[11, "arkouda.load_all"]], "locate() (arkouda.series method)": [[11, "arkouda.Series.locate"]], "log() (in module arkouda)": [[11, "arkouda.log"], [61, "arkouda.log"]], "logger (arkouda.groupby attribute)": [[11, "arkouda.GroupBy.logger"], [11, "id175"], [11, "id287"], [11, "id439"], [11, "id72"], [66, "arkouda.GroupBy.logger"]], "logger (arkouda.strings attribute)": [[11, "arkouda.Strings.logger"], [11, "id112"], [11, "id546"], [11, "id647"]], "lookup() (arkouda.index method)": [[11, "arkouda.Index.lookup"]], "lookup() (arkouda.multiindex method)": [[11, "arkouda.MultiIndex.lookup"]], "lookup() (in module arkouda)": [[11, "arkouda.lookup"]], "ls() (in module arkouda)": [[11, "arkouda.ls"]], "ls_csv() (in module arkouda)": [[11, "arkouda.ls_csv"]], "lstick() (arkouda.strings method)": [[11, "arkouda.Strings.lstick"], [11, "id144"], [11, "id578"], [11, "id679"], [74, "arkouda.Strings.lstick"]], "match() (arkouda.strings method)": [[11, "arkouda.Strings.match"], [11, "id131"], [11, "id565"], [11, "id666"], [74, "arkouda.Strings.match"]], "max() (arkouda.groupby method)": [[11, "arkouda.GroupBy.max"], [11, "id187"], [11, "id299"], [11, "id451"], [11, "id84"], [66, "arkouda.GroupBy.max"]], "max() (arkouda.segarray method)": [[11, "arkouda.SegArray.max"]], "max() (arkouda.pdarray method)": [[11, "arkouda.pdarray.max"], [11, "id234"], [11, "id27"], [11, "id343"], [11, "id496"], [67, "arkouda.pdarray.max"]], "max() (in module arkouda)": [[11, "arkouda.max"], [61, "arkouda.max"]], "maxk() (arkouda.pdarray method)": [[11, "arkouda.pdarray.maxk"], [11, "id243"], [11, "id352"], [11, "id36"], [11, "id505"], [67, "arkouda.pdarray.maxk"]], "maxk() (in module arkouda)": [[11, "arkouda.maxk"], [61, "arkouda.maxk"]], "mean() (arkouda.groupby method)": [[11, "arkouda.GroupBy.mean"], [11, "id184"], [11, "id296"], [11, "id448"], [11, "id81"], [66, "arkouda.GroupBy.mean"]], "mean() (arkouda.segarray method)": [[11, "arkouda.SegArray.mean"]], "mean() (arkouda.pdarray method)": [[11, "arkouda.pdarray.mean"], [11, "id237"], [11, "id30"], [11, "id346"], [11, "id499"], [67, "arkouda.pdarray.mean"]], "mean() (in module arkouda)": [[11, "arkouda.mean"], [61, "arkouda.mean"]], "median() (arkouda.groupby method)": [[11, "arkouda.GroupBy.median"], [11, "id185"], [11, "id297"], [11, "id449"], [11, "id82"], [66, "arkouda.GroupBy.median"]], "memory_usage() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.memory_usage"]], "min() (arkouda.groupby method)": [[11, "arkouda.GroupBy.min"], [11, "id186"], [11, "id298"], [11, "id450"], [11, "id83"], [66, "arkouda.GroupBy.min"]], "min() (arkouda.segarray method)": [[11, "arkouda.SegArray.min"]], "min() (arkouda.pdarray method)": [[11, "arkouda.pdarray.min"], [11, "id233"], [11, "id26"], [11, "id342"], [11, "id495"], [67, "arkouda.pdarray.min"]], "min() (in module arkouda)": [[11, "arkouda.min"], [61, "arkouda.min"]], "mink() (arkouda.pdarray method)": [[11, "arkouda.pdarray.mink"], [11, "id242"], [11, "id35"], [11, "id351"], [11, "id504"], [67, "arkouda.pdarray.mink"]], "mink() (in module arkouda)": [[11, "arkouda.mink"], [61, "arkouda.mink"]], "mode() (arkouda.groupby method)": [[11, "arkouda.GroupBy.mode"], [11, "id197"], [11, "id309"], [11, "id461"], [11, "id94"], [66, "arkouda.GroupBy.mode"]], "most_common() (arkouda.groupby method)": [[11, "arkouda.GroupBy.most_common"], [11, "id103"], [11, "id206"], [11, "id318"], [11, "id470"], [66, "arkouda.GroupBy.most_common"]], "name (arkouda.pdarray attribute)": [[11, "arkouda.pdarray.name"], [11, "id213"], [11, "id322"], [11, "id475"], [11, "id6"], [69, "arkouda.pdarray.name"]], "nbytes (arkouda.strings attribute)": [[11, "arkouda.Strings.nbytes"], [11, "id108"], [11, "id542"], [11, "id643"]], "ndim (arkouda.arrayview attribute)": [[11, "arkouda.ArrayView.ndim"], [62, "arkouda.ArrayView.ndim"]], "ndim (arkouda.categorical attribute)": [[11, "arkouda.Categorical.ndim"], [11, "id393"], [11, "id604"], [63, "arkouda.Categorical.ndim"]], "ndim (arkouda.strings attribute)": [[11, "arkouda.Strings.ndim"], [11, "id109"], [11, "id543"], [11, "id644"]], "ndim (arkouda.pdarray attribute)": [[11, "arkouda.pdarray.ndim"], [11, "id216"], [11, "id325"], [11, "id478"], [11, "id9"], [69, "arkouda.pdarray.ndim"]], "ngroups (arkouda.groupby attribute)": [[11, "arkouda.GroupBy.ngroups"], [11, "id173"], [11, "id285"], [11, "id437"], [11, "id70"], [66, "arkouda.GroupBy.ngroups"]], "nkeys (arkouda.groupby attribute)": [[11, "arkouda.GroupBy.nkeys"], [11, "id169"], [11, "id281"], [11, "id433"], [11, "id66"], [66, "arkouda.GroupBy.nkeys"]], "nlevels (arkouda.categorical attribute)": [[11, "arkouda.Categorical.nlevels"], [11, "id392"], [11, "id603"], [63, "arkouda.Categorical.nlevels"]], "non_empty (arkouda.segarray property)": [[11, "arkouda.SegArray.non_empty"]], "non_empty_count (arkouda.segarray property)": [[11, "arkouda.SegArray.non_empty_count"]], "normalize() (arkouda.ipv4 method)": [[11, "arkouda.IPv4.normalize"]], "numeric_scalars (in module arkouda)": [[11, "arkouda.numeric_scalars"]], "numpy_scalars (in module arkouda)": [[11, "arkouda.numpy_scalars"]], "nunique() (arkouda.groupby method)": [[11, "arkouda.GroupBy.nunique"], [11, "id190"], [11, "id302"], [11, "id454"], [11, "id87"], [66, "arkouda.GroupBy.nunique"]], "nunique() (arkouda.segarray method)": [[11, "arkouda.SegArray.nunique"]], "objtype (arkouda.categorical property)": [[11, "arkouda.Categorical.objtype"], [11, "id395"], [11, "id606"]], "objtype (arkouda.segarray property)": [[11, "arkouda.SegArray.objtype"]], "objtype (arkouda.strings attribute)": [[11, "arkouda.Strings.objtype"], [11, "id114"], [11, "id548"], [11, "id649"]], "objtype (arkouda.pdarray attribute)": [[11, "arkouda.pdarray.objtype"], [11, "id14"], [11, "id221"], [11, "id330"], [11, "id483"]], "ones() (in module arkouda)": [[11, "arkouda.ones"], [11, "id270"], [11, "id379"], [11, "id532"], [64, "arkouda.ones"]], "ones_like() (in module arkouda)": [[11, "arkouda.ones_like"], [64, "arkouda.ones_like"]], "opeq() (arkouda.bitvector method)": [[11, "arkouda.BitVector.opeq"]], "opeq() (arkouda.fields method)": [[11, "arkouda.Fields.opeq"]], "opeq() (arkouda.ipv4 method)": [[11, "arkouda.IPv4.opeq"]], "opeq() (arkouda.pdarray method)": [[11, "arkouda.pdarray.opeq"], [11, "id16"], [11, "id223"], [11, "id332"], [11, "id485"]], "order (arkouda.arrayview attribute)": [[11, "arkouda.ArrayView.order"], [62, "arkouda.ArrayView.order"]], "parity() (arkouda.pdarray method)": [[11, "arkouda.pdarray.parity"], [11, "id247"], [11, "id356"], [11, "id40"], [11, "id509"]], "parity() (in module arkouda)": [[11, "arkouda.parity"]], "parse_hdf_categoricals() (arkouda.categorical static method)": [[11, "arkouda.Categorical.parse_hdf_categoricals"], [11, "id428"], [11, "id639"]], "pdarray (class in arkouda)": [[11, "arkouda.pdarray"], [11, "id212"], [11, "id321"], [11, "id474"], [11, "id5"], [69, "arkouda.pdarray"]], "pdconcat() (arkouda.series static method)": [[11, "arkouda.Series.pdconcat"]], "peel() (arkouda.strings method)": [[11, "arkouda.Strings.peel"], [11, "id141"], [11, "id575"], [11, "id676"], [74, "arkouda.Strings.peel"]], "permutation (arkouda.categorical attribute)": [[11, "arkouda.Categorical.permutation"], [11, "id163"], [11, "id389"], [11, "id399"], [11, "id600"], [11, "id610"], [63, "arkouda.Categorical.permutation"]], "permutation (arkouda.groupby attribute)": [[11, "arkouda.GroupBy.permutation"], [11, "id171"], [11, "id283"], [11, "id435"], [11, "id68"], [66, "arkouda.GroupBy.permutation"]], "plot_dist() (in module arkouda)": [[11, "arkouda.plot_dist"]], "popcount() (arkouda.pdarray method)": [[11, "arkouda.pdarray.popcount"], [11, "id246"], [11, "id355"], [11, "id39"], [11, "id508"]], "popcount() (in module arkouda)": [[11, "arkouda.popcount"]], "power() (in module arkouda)": [[11, "arkouda.power"]], "prepend_single() (arkouda.segarray method)": [[11, "arkouda.SegArray.prepend_single"]], "pretty_print_info() (arkouda.categorical method)": [[11, "arkouda.Categorical.pretty_print_info"], [11, "id425"], [11, "id636"]], "pretty_print_info() (arkouda.strings method)": [[11, "arkouda.Strings.pretty_print_info"], [11, "id158"], [11, "id592"], [11, "id693"]], "pretty_print_info() (arkouda.pdarray method)": [[11, "arkouda.pdarray.pretty_print_info"], [11, "id22"], [11, "id229"], [11, "id338"], [11, "id491"]], "pretty_print_information() (in module arkouda)": [[11, "arkouda.pretty_print_information"]], "prod() (arkouda.groupby method)": [[11, "arkouda.GroupBy.prod"], [11, "id181"], [11, "id293"], [11, "id445"], [11, "id78"], [66, "arkouda.GroupBy.prod"]], "prod() (arkouda.segarray method)": [[11, "arkouda.SegArray.prod"]], "prod() (arkouda.pdarray method)": [[11, "arkouda.pdarray.prod"], [11, "id232"], [11, "id25"], [11, "id341"], [11, "id494"], [67, "arkouda.pdarray.prod"]], "prod() (in module arkouda)": [[11, "arkouda.prod"], [61, "arkouda.prod"]], "purge_cached_regex_patterns() (arkouda.strings method)": [[11, "arkouda.Strings.purge_cached_regex_patterns"], [11, "id128"], [11, "id562"], [11, "id663"]], "randint() (in module arkouda)": [[11, "arkouda.randint"], [64, "arkouda.randint"]], "random_strings_lognormal() (in module arkouda)": [[11, "arkouda.random_strings_lognormal"]], "random_strings_uniform() (in module arkouda)": [[11, "arkouda.random_strings_uniform"]], "read() (in module arkouda)": [[11, "arkouda.read"], [58, "arkouda.read"]], "read_csv() (arkouda.dataframe class method)": [[11, "arkouda.DataFrame.read_csv"]], "read_csv() (in module arkouda)": [[11, "arkouda.read_csv"]], "read_hdf() (in module arkouda)": [[11, "arkouda.read_hdf"]], "read_parquet() (in module arkouda)": [[11, "arkouda.read_parquet"]], "register() (arkouda.categorical method)": [[11, "arkouda.Categorical.register"], [11, "id421"], [11, "id632"]], "register() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.register"]], "register() (arkouda.groupby method)": [[11, "arkouda.GroupBy.register"], [11, "id201"], [11, "id313"], [11, "id465"], [11, "id98"], [66, "arkouda.GroupBy.register"]], "register() (arkouda.index method)": [[11, "arkouda.Index.register"]], "register() (arkouda.multiindex method)": [[11, "arkouda.MultiIndex.register"]], "register() (arkouda.segarray method)": [[11, "arkouda.SegArray.register"]], "register() (arkouda.series method)": [[11, "arkouda.Series.register"]], "register() (arkouda.strings method)": [[11, "arkouda.Strings.register"], [11, "id159"], [11, "id593"], [11, "id694"]], "register() (arkouda.pdarray method)": [[11, "arkouda.pdarray.register"], [11, "id265"], [11, "id374"], [11, "id527"], [11, "id58"]], "register() (in module arkouda)": [[11, "arkouda.register"]], "remove_repeats() (arkouda.segarray method)": [[11, "arkouda.SegArray.remove_repeats"]], "rename() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.rename"]], "reset_categories() (arkouda.categorical method)": [[11, "arkouda.Categorical.reset_categories"], [11, "id408"], [11, "id619"]], "reset_index() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.reset_index"]], "reshape() (arkouda.pdarray method)": [[11, "arkouda.pdarray.reshape"], [11, "id255"], [11, "id364"], [11, "id48"], [11, "id517"]], "resolve_scalar_dtype() (in module arkouda)": [[11, "arkouda.resolve_scalar_dtype"]], "return_validity (arkouda.errormode attribute)": [[11, "arkouda.ErrorMode.return_validity"]], "right_align() (in module arkouda)": [[11, "arkouda.right_align"]], "rotl() (arkouda.pdarray method)": [[11, "arkouda.pdarray.rotl"], [11, "id250"], [11, "id359"], [11, "id43"], [11, "id512"]], "rotl() (in module arkouda)": [[11, "arkouda.rotl"]], "rotr() (arkouda.pdarray method)": [[11, "arkouda.pdarray.rotr"], [11, "id251"], [11, "id360"], [11, "id44"], [11, "id513"]], "rotr() (in module arkouda)": [[11, "arkouda.rotr"]], "rpeel() (arkouda.strings method)": [[11, "arkouda.Strings.rpeel"], [11, "id142"], [11, "id576"], [11, "id677"], [74, "arkouda.Strings.rpeel"]], "sample() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.sample"]], "save() (arkouda.categorical method)": [[11, "arkouda.Categorical.save"], [11, "id420"], [11, "id631"]], "save() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.save"]], "save() (arkouda.index method)": [[11, "arkouda.Index.save"]], "save() (arkouda.segarray method)": [[11, "arkouda.SegArray.save"]], "save() (arkouda.strings method)": [[11, "arkouda.Strings.save"], [11, "id155"], [11, "id589"], [11, "id690"]], "save() (arkouda.pdarray method)": [[11, "arkouda.pdarray.save"], [11, "id264"], [11, "id373"], [11, "id526"], [11, "id57"]], "save_all() (in module arkouda)": [[11, "arkouda.save_all"]], "search() (arkouda.strings method)": [[11, "arkouda.Strings.search"], [11, "id130"], [11, "id564"], [11, "id665"], [74, "arkouda.Strings.search"]], "search_intervals() (in module arkouda)": [[11, "arkouda.search_intervals"]], "segarray() (in module arkouda)": [[11, "arkouda.segarray"]], "segments (arkouda.categorical attribute)": [[11, "arkouda.Categorical.segments"], [11, "id164"], [11, "id390"], [11, "id400"], [11, "id601"], [11, "id611"], [63, "arkouda.Categorical.segments"]], "segments (arkouda.groupby attribute)": [[11, "arkouda.GroupBy.segments"], [11, "id174"], [11, "id286"], [11, "id438"], [11, "id71"], [66, "arkouda.GroupBy.segments"]], "set_categories() (arkouda.categorical method)": [[11, "arkouda.Categorical.set_categories"], [11, "id403"], [11, "id614"]], "set_dtype() (arkouda.index method)": [[11, "arkouda.Index.set_dtype"]], "set_dtype() (arkouda.multiindex method)": [[11, "arkouda.MultiIndex.set_dtype"]], "set_jth() (arkouda.segarray method)": [[11, "arkouda.SegArray.set_jth"]], "setdiff() (arkouda.segarray method)": [[11, "arkouda.SegArray.setdiff"]], "setdiff1d() (in module arkouda)": [[11, "arkouda.setdiff1d"], [72, "arkouda.setdiff1d"]], "setxor() (arkouda.segarray method)": [[11, "arkouda.SegArray.setxor"]], "setxor1d() (in module arkouda)": [[11, "arkouda.setxor1d"], [72, "arkouda.setxor1d"]], "shape (arkouda.arrayview attribute)": [[11, "arkouda.ArrayView.shape"], [62, "arkouda.ArrayView.shape"]], "shape (arkouda.categorical attribute)": [[11, "arkouda.Categorical.shape"], [11, "id394"], [11, "id605"], [63, "arkouda.Categorical.shape"]], "shape (arkouda.dataframe property)": [[11, "arkouda.DataFrame.shape"]], "shape (arkouda.index property)": [[11, "arkouda.Index.shape"]], "shape (arkouda.series property)": [[11, "arkouda.Series.shape"]], "shape (arkouda.strings attribute)": [[11, "arkouda.Strings.shape"], [11, "id110"], [11, "id544"], [11, "id645"]], "shape (arkouda.pdarray attribute)": [[11, "arkouda.pdarray.shape"], [11, "id10"], [11, "id217"], [11, "id326"], [11, "id479"], [69, "arkouda.pdarray.shape"]], "sin() (in module arkouda)": [[11, "arkouda.sin"], [61, "arkouda.sin"]], "size (arkouda.arrayview attribute)": [[11, "arkouda.ArrayView.size"], [62, "arkouda.ArrayView.size"]], "size (arkouda.categorical attribute)": [[11, "arkouda.Categorical.size"], [11, "id391"], [11, "id602"], [63, "arkouda.Categorical.size"]], "size (arkouda.dataframe property)": [[11, "arkouda.DataFrame.size"]], "size (arkouda.groupby attribute)": [[11, "arkouda.GroupBy.size"], [11, "id170"], [11, "id282"], [11, "id434"], [11, "id67"], [66, "arkouda.GroupBy.size"]], "size (arkouda.strings attribute)": [[11, "arkouda.Strings.size"], [11, "id107"], [11, "id541"], [11, "id642"]], "size (arkouda.pdarray attribute)": [[11, "arkouda.pdarray.size"], [11, "id215"], [11, "id324"], [11, "id477"], [11, "id8"], [69, "arkouda.pdarray.size"]], "size() (arkouda.groupby method)": [[11, "id0"], [11, "id177"], [11, "id289"], [11, "id441"], [11, "id74"], [66, "id0"]], "slice_bits() (arkouda.pdarray method)": [[11, "arkouda.pdarray.slice_bits"], [11, "id253"], [11, "id362"], [11, "id46"], [11, "id515"]], "sort() (arkouda.categorical method)": [[11, "arkouda.Categorical.sort"], [11, "id416"], [11, "id627"]], "sort() (in module arkouda)": [[11, "arkouda.sort"]], "sort_index() (arkouda.series method)": [[11, "arkouda.Series.sort_index"]], "sort_values() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.sort_values"]], "sort_values() (arkouda.series method)": [[11, "arkouda.Series.sort_values"]], "sorted() (in module arkouda)": [[11, "arkouda.sorted"]], "split() (arkouda.strings method)": [[11, "arkouda.Strings.split"], [11, "id133"], [11, "id567"], [11, "id668"], [74, "arkouda.Strings.split"]], "sqrt() (in module arkouda)": [[11, "arkouda.sqrt"]], "standard_normal() (in module arkouda)": [[11, "arkouda.standard_normal"]], "standardize_categories() (arkouda.categorical class method)": [[11, "arkouda.Categorical.standardize_categories"], [11, "id402"], [11, "id613"]], "startswith() (arkouda.categorical method)": [[11, "arkouda.Categorical.startswith"], [11, "id410"], [11, "id621"], [63, "arkouda.Categorical.startswith"]], "startswith() (arkouda.strings method)": [[11, "arkouda.Strings.startswith"], [11, "id138"], [11, "id572"], [11, "id673"], [74, "arkouda.Strings.startswith"]], "std() (arkouda.groupby method)": [[11, "arkouda.GroupBy.std"], [11, "id183"], [11, "id295"], [11, "id447"], [11, "id80"], [66, "arkouda.GroupBy.std"]], "std() (arkouda.pdarray method)": [[11, "arkouda.pdarray.std"], [11, "id239"], [11, "id32"], [11, "id348"], [11, "id501"], [67, "arkouda.pdarray.std"]], "std() (in module arkouda)": [[11, "arkouda.std"], [61, "arkouda.std"]], "stick() (arkouda.strings method)": [[11, "arkouda.Strings.stick"], [11, "id143"], [11, "id577"], [11, "id678"], [74, "arkouda.Strings.stick"]], "str_ (in module arkouda)": [[11, "arkouda.str_"], [11, "id166"]], "str_acc (arkouda.series attribute)": [[11, "arkouda.Series.str_acc"]], "str_scalars (in module arkouda)": [[11, "arkouda.str_scalars"]], "strict (arkouda.errormode attribute)": [[11, "arkouda.ErrorMode.strict"]], "string_operators() (in module arkouda)": [[11, "arkouda.string_operators"]], "strip() (arkouda.strings method)": [[11, "arkouda.Strings.strip"], [11, "id126"], [11, "id560"], [11, "id661"]], "sub() (arkouda.strings method)": [[11, "arkouda.Strings.sub"], [11, "id135"], [11, "id569"], [11, "id670"], [74, "arkouda.Strings.sub"]], "subn() (arkouda.strings method)": [[11, "arkouda.Strings.subn"], [11, "id136"], [11, "id570"], [11, "id671"], [74, "arkouda.Strings.subn"]], "sum() (arkouda.groupby method)": [[11, "arkouda.GroupBy.sum"], [11, "id180"], [11, "id292"], [11, "id444"], [11, "id77"], [66, "arkouda.GroupBy.sum"]], "sum() (arkouda.segarray method)": [[11, "arkouda.SegArray.sum"]], "sum() (arkouda.pdarray method)": [[11, "arkouda.pdarray.sum"], [11, "id231"], [11, "id24"], [11, "id340"], [11, "id493"], [67, "arkouda.pdarray.sum"]], "sum() (in module arkouda)": [[11, "arkouda.sum"], [61, "arkouda.sum"]], "tail() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.tail"]], "tail() (arkouda.series method)": [[11, "arkouda.Series.tail"]], "to_csv() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.to_csv"]], "to_csv() (arkouda.index method)": [[11, "arkouda.Index.to_csv"]], "to_csv() (arkouda.strings method)": [[11, "arkouda.Strings.to_csv"], [11, "id154"], [11, "id588"], [11, "id689"]], "to_csv() (arkouda.pdarray method)": [[11, "arkouda.pdarray.to_csv"], [11, "id261"], [11, "id370"], [11, "id523"], [11, "id54"]], "to_csv() (in module arkouda)": [[11, "arkouda.to_csv"]], "to_cuda() (arkouda.pdarray method)": [[11, "arkouda.pdarray.to_cuda"], [11, "id258"], [11, "id367"], [11, "id51"], [11, "id520"]], "to_dataframe() (arkouda.series method)": [[11, "arkouda.Series.to_dataframe"]], "to_dict() (arkouda.index method)": [[11, "arkouda.Index.to_dict"]], "to_dict() (arkouda.multiindex method)": [[11, "arkouda.MultiIndex.to_dict"]], "to_hdf() (arkouda.arrayview method)": [[11, "arkouda.ArrayView.to_hdf"]], "to_hdf() (arkouda.categorical method)": [[11, "arkouda.Categorical.to_hdf"], [11, "id418"], [11, "id629"]], "to_hdf() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.to_hdf"]], "to_hdf() (arkouda.index method)": [[11, "arkouda.Index.to_hdf"]], "to_hdf() (arkouda.segarray method)": [[11, "arkouda.SegArray.to_hdf"]], "to_hdf() (arkouda.strings method)": [[11, "arkouda.Strings.to_hdf"], [11, "id153"], [11, "id587"], [11, "id688"]], "to_hdf() (arkouda.pdarray method)": [[11, "arkouda.pdarray.to_hdf"], [11, "id260"], [11, "id369"], [11, "id522"], [11, "id53"]], "to_hdf() (in module arkouda)": [[11, "arkouda.to_hdf"]], "to_list() (arkouda.arrayview method)": [[11, "arkouda.ArrayView.to_list"]], "to_list() (arkouda.bitvector method)": [[11, "arkouda.BitVector.to_list"]], "to_list() (arkouda.categorical method)": [[11, "arkouda.Categorical.to_list"], [11, "id406"], [11, "id617"]], "to_list() (arkouda.ipv4 method)": [[11, "arkouda.IPv4.to_list"]], "to_list() (arkouda.index method)": [[11, "arkouda.Index.to_list"]], "to_list() (arkouda.segarray method)": [[11, "arkouda.SegArray.to_list"]], "to_list() (arkouda.strings method)": [[11, "arkouda.Strings.to_list"], [11, "id150"], [11, "id584"], [11, "id685"]], "to_list() (arkouda.pdarray method)": [[11, "arkouda.pdarray.to_list"], [11, "id257"], [11, "id366"], [11, "id50"], [11, "id519"]], "to_lower() (arkouda.strings method)": [[11, "arkouda.Strings.to_lower"], [11, "id120"], [11, "id554"], [11, "id655"]], "to_ndarray() (arkouda.arrayview method)": [[11, "arkouda.ArrayView.to_ndarray"]], "to_ndarray() (arkouda.bitvector method)": [[11, "arkouda.BitVector.to_ndarray"]], "to_ndarray() (arkouda.categorical method)": [[11, "arkouda.Categorical.to_ndarray"], [11, "id405"], [11, "id616"]], "to_ndarray() (arkouda.ipv4 method)": [[11, "arkouda.IPv4.to_ndarray"]], "to_ndarray() (arkouda.index method)": [[11, "arkouda.Index.to_ndarray"]], "to_ndarray() (arkouda.segarray method)": [[11, "arkouda.SegArray.to_ndarray"]], "to_ndarray() (arkouda.strings method)": [[11, "arkouda.Strings.to_ndarray"], [11, "id149"], [11, "id583"], [11, "id684"]], "to_ndarray() (arkouda.pdarray method)": [[11, "arkouda.pdarray.to_ndarray"], [11, "id256"], [11, "id365"], [11, "id49"], [11, "id518"]], "to_pandas() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.to_pandas"]], "to_pandas() (arkouda.index method)": [[11, "arkouda.Index.to_pandas"]], "to_pandas() (arkouda.multiindex method)": [[11, "arkouda.MultiIndex.to_pandas"]], "to_pandas() (arkouda.series method)": [[11, "arkouda.Series.to_pandas"]], "to_parquet() (arkouda.categorical method)": [[11, "arkouda.Categorical.to_parquet"], [11, "id419"], [11, "id630"]], "to_parquet() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.to_parquet"]], "to_parquet() (arkouda.index method)": [[11, "arkouda.Index.to_parquet"]], "to_parquet() (arkouda.strings method)": [[11, "arkouda.Strings.to_parquet"], [11, "id152"], [11, "id586"], [11, "id687"]], "to_parquet() (arkouda.pdarray method)": [[11, "arkouda.pdarray.to_parquet"], [11, "id259"], [11, "id368"], [11, "id52"], [11, "id521"]], "to_parquet() (in module arkouda)": [[11, "arkouda.to_parquet"]], "to_title() (arkouda.strings method)": [[11, "arkouda.Strings.to_title"], [11, "id122"], [11, "id556"], [11, "id657"]], "to_upper() (arkouda.strings method)": [[11, "arkouda.Strings.to_upper"], [11, "id121"], [11, "id555"], [11, "id656"]], "topn() (arkouda.series method)": [[11, "arkouda.Series.topn"]], "translate_np_dtype() (in module arkouda)": [[11, "arkouda.translate_np_dtype"], [11, "id167"]], "uint64 (in module arkouda)": [[11, "arkouda.uint64"]], "uint8 (in module arkouda)": [[11, "arkouda.uint8"]], "uniform() (in module arkouda)": [[11, "arkouda.uniform"]], "union() (arkouda.segarray method)": [[11, "arkouda.SegArray.union"]], "union1d() (in module arkouda)": [[11, "arkouda.union1d"], [72, "arkouda.union1d"]], "unique() (arkouda.categorical method)": [[11, "arkouda.Categorical.unique"], [11, "id413"], [11, "id624"]], "unique() (arkouda.groupby method)": [[11, "arkouda.GroupBy.unique"], [11, "id198"], [11, "id310"], [11, "id462"], [11, "id95"], [66, "arkouda.GroupBy.unique"]], "unique() (arkouda.segarray method)": [[11, "arkouda.SegArray.unique"]], "unique() (in module arkouda)": [[11, "arkouda.unique"], [11, "id319"], [11, "id472"], [72, "arkouda.unique"]], "unique_keys (arkouda.groupby attribute)": [[11, "arkouda.GroupBy.unique_keys"], [11, "id172"], [11, "id284"], [11, "id436"], [11, "id69"], [66, "arkouda.GroupBy.unique_keys"]], "unregister() (arkouda.categorical method)": [[11, "arkouda.Categorical.unregister"], [11, "id422"], [11, "id633"]], "unregister() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.unregister"]], "unregister() (arkouda.groupby method)": [[11, "arkouda.GroupBy.unregister"], [11, "id202"], [11, "id314"], [11, "id466"], [11, "id99"], [66, "arkouda.GroupBy.unregister"]], "unregister() (arkouda.segarray method)": [[11, "arkouda.SegArray.unregister"]], "unregister() (arkouda.strings method)": [[11, "arkouda.Strings.unregister"], [11, "id160"], [11, "id594"], [11, "id695"]], "unregister() (arkouda.pdarray method)": [[11, "arkouda.pdarray.unregister"], [11, "id266"], [11, "id375"], [11, "id528"], [11, "id59"]], "unregister_categorical_by_name() (arkouda.categorical static method)": [[11, "arkouda.Categorical.unregister_categorical_by_name"], [11, "id427"], [11, "id638"]], "unregister_dataframe_by_name() (arkouda.dataframe static method)": [[11, "arkouda.DataFrame.unregister_dataframe_by_name"]], "unregister_groupby_by_name() (arkouda.groupby static method)": [[11, "arkouda.GroupBy.unregister_groupby_by_name"], [11, "id102"], [11, "id205"], [11, "id317"], [11, "id469"], [66, "arkouda.GroupBy.unregister_groupby_by_name"]], "unregister_pdarray_by_name() (in module arkouda)": [[11, "arkouda.unregister_pdarray_by_name"]], "unregister_segarray_by_name() (arkouda.segarray static method)": [[11, "arkouda.SegArray.unregister_segarray_by_name"]], "unregister_strings_by_name() (arkouda.strings static method)": [[11, "arkouda.Strings.unregister_strings_by_name"], [11, "id162"], [11, "id596"], [11, "id697"]], "unsqueeze() (in module arkouda)": [[11, "arkouda.unsqueeze"]], "update_size() (arkouda.dataframe method)": [[11, "arkouda.DataFrame.update_size"]], "valsize (arkouda.segarray attribute)": [[11, "arkouda.SegArray.valsize"]], "value_counts() (arkouda.series method)": [[11, "arkouda.Series.value_counts"]], "value_counts() (in module arkouda)": [[11, "arkouda.value_counts"], [67, "arkouda.value_counts"]], "var() (arkouda.groupby method)": [[11, "arkouda.GroupBy.var"], [11, "id182"], [11, "id294"], [11, "id446"], [11, "id79"], [66, "arkouda.GroupBy.var"]], "var() (arkouda.pdarray method)": [[11, "arkouda.pdarray.var"], [11, "id238"], [11, "id31"], [11, "id347"], [11, "id500"], [67, "arkouda.pdarray.var"]], "var() (in module arkouda)": [[11, "arkouda.var"], [61, "arkouda.var"]], "where() (in module arkouda)": [[11, "arkouda.where"], [11, "id473"], [11, "id64"], [61, "arkouda.where"]], "zero_up() (in module arkouda)": [[11, "arkouda.zero_up"]], "zeros() (in module arkouda)": [[11, "arkouda.zeros"], [11, "id271"], [11, "id533"], [11, "id62"], [64, "arkouda.zeros"]], "zeros_like() (in module arkouda)": [[11, "arkouda.zeros_like"], [64, "arkouda.zeros_like"]], "index (class in arkouda.index)": [[12, "arkouda.index.Index"]], "multiindex (class in arkouda.index)": [[12, "arkouda.index.MultiIndex"]], "argsort() (arkouda.index.index method)": [[12, "arkouda.index.Index.argsort"]], "argsort() (arkouda.index.multiindex method)": [[12, "arkouda.index.MultiIndex.argsort"]], "arkouda.index": [[12, "module-arkouda.index"]], "concat() (arkouda.index.index method)": [[12, "arkouda.index.Index.concat"]], "concat() (arkouda.index.multiindex method)": [[12, "arkouda.index.MultiIndex.concat"]], "factory() (arkouda.index.index static method)": [[12, "arkouda.index.Index.factory"]], "index (arkouda.index.index property)": [[12, "arkouda.index.Index.index"]], "index (arkouda.index.multiindex property)": [[12, "arkouda.index.MultiIndex.index"]], "is_registered() (arkouda.index.index method)": [[12, "arkouda.index.Index.is_registered"]], "is_unique (arkouda.index.index property)": [[12, "arkouda.index.Index.is_unique"]], "lookup() (arkouda.index.index method)": [[12, "arkouda.index.Index.lookup"]], "lookup() (arkouda.index.multiindex method)": [[12, "arkouda.index.MultiIndex.lookup"]], "register() (arkouda.index.index method)": [[12, "arkouda.index.Index.register"]], "register() (arkouda.index.multiindex method)": [[12, "arkouda.index.MultiIndex.register"]], "save() (arkouda.index.index method)": [[12, "arkouda.index.Index.save"]], "set_dtype() (arkouda.index.index method)": [[12, "arkouda.index.Index.set_dtype"]], "set_dtype() (arkouda.index.multiindex method)": [[12, "arkouda.index.MultiIndex.set_dtype"]], "shape (arkouda.index.index property)": [[12, "arkouda.index.Index.shape"]], "to_csv() (arkouda.index.index method)": [[12, "arkouda.index.Index.to_csv"]], "to_dict() (arkouda.index.index method)": [[12, "arkouda.index.Index.to_dict"]], "to_dict() (arkouda.index.multiindex method)": [[12, "arkouda.index.MultiIndex.to_dict"]], "to_hdf() (arkouda.index.index method)": [[12, "arkouda.index.Index.to_hdf"]], "to_list() (arkouda.index.index method)": [[12, "arkouda.index.Index.to_list"]], "to_ndarray() (arkouda.index.index method)": [[12, "arkouda.index.Index.to_ndarray"]], "to_pandas() (arkouda.index.index method)": [[12, "arkouda.index.Index.to_pandas"]], "to_pandas() (arkouda.index.multiindex method)": [[12, "arkouda.index.MultiIndex.to_pandas"]], "to_parquet() (arkouda.index.index method)": [[12, "arkouda.index.Index.to_parquet"]], "allsymbols (in module arkouda.infoclass)": [[13, "arkouda.infoclass.AllSymbols"]], "registeredsymbols (in module arkouda.infoclass)": [[13, "arkouda.infoclass.RegisteredSymbols"]], "arkouda.infoclass": [[13, "module-arkouda.infoclass"]], "information() (in module arkouda.infoclass)": [[13, "arkouda.infoclass.information"]], "list_registry() (in module arkouda.infoclass)": [[13, "arkouda.infoclass.list_registry"]], "list_symbol_table() (in module arkouda.infoclass)": [[13, "arkouda.infoclass.list_symbol_table"]], "pretty_print_information() (in module arkouda.infoclass)": [[13, "arkouda.infoclass.pretty_print_information"]], "arkouda.io": [[14, "module-arkouda.io"]], "export() (in module arkouda.io)": [[14, "arkouda.io.export"]], "get_columns() (in module arkouda.io)": [[14, "arkouda.io.get_columns"]], "get_datasets() (in module arkouda.io)": [[14, "arkouda.io.get_datasets"]], "get_filetype() (in module arkouda.io)": [[14, "arkouda.io.get_filetype"]], "get_null_indices() (in module arkouda.io)": [[14, "arkouda.io.get_null_indices"]], "import_data() (in module arkouda.io)": [[14, "arkouda.io.import_data"]], "load() (in module arkouda.io)": [[14, "arkouda.io.load"]], "load_all() (in module arkouda.io)": [[14, "arkouda.io.load_all"]], "ls() (in module arkouda.io)": [[14, "arkouda.io.ls"]], "ls_csv() (in module arkouda.io)": [[14, "arkouda.io.ls_csv"]], "read() (in module arkouda.io)": [[14, "arkouda.io.read"]], "read_csv() (in module arkouda.io)": [[14, "arkouda.io.read_csv"]], "read_hdf() (in module arkouda.io)": [[14, "arkouda.io.read_hdf"]], "read_parquet() (in module arkouda.io)": [[14, "arkouda.io.read_parquet"]], "save_all() (in module arkouda.io)": [[14, "arkouda.io.save_all"]], "to_csv() (in module arkouda.io)": [[14, "arkouda.io.to_csv"]], "to_hdf() (in module arkouda.io)": [[14, "arkouda.io.to_hdf"]], "to_parquet() (in module arkouda.io)": [[14, "arkouda.io.to_parquet"]], "arkouda.io_util": [[15, "module-arkouda.io_util"]], "delimited_file_to_dict() (in module arkouda.io_util)": [[15, "arkouda.io_util.delimited_file_to_dict"]], "dict_to_delimited_file() (in module arkouda.io_util)": [[15, "arkouda.io_util.dict_to_delimited_file"]], "get_directory() (in module arkouda.io_util)": [[15, "arkouda.io_util.get_directory"]], "write_line_to_file() (in module arkouda.io_util)": [[15, "arkouda.io_util.write_line_to_file"]], "arkouda.join": [[16, "module-arkouda.join"]], "compute_join_size() (in module arkouda.join)": [[16, "arkouda.join.compute_join_size"]], "gen_ranges() (in module arkouda.join)": [[16, "arkouda.join.gen_ranges"]], "join_on_eq_with_dt() (in module arkouda.join)": [[16, "arkouda.join.join_on_eq_with_dt"]], "arkouda.logger": [[17, "module-arkouda.logger"]], "disableverbose() (in module arkouda.logger)": [[17, "arkouda.logger.disableVerbose"]], "enableverbose() (in module arkouda.logger)": [[17, "arkouda.logger.enableVerbose"]], "match (class in arkouda.match)": [[18, "arkouda.match.Match"]], "arkouda.match": [[18, "module-arkouda.match"]], "end() (arkouda.match.match method)": [[18, "arkouda.match.Match.end"], [74, "arkouda.match.Match.end"]], "find_matches() (arkouda.match.match method)": [[18, "arkouda.match.Match.find_matches"], [74, "arkouda.match.Match.find_matches"]], "group() (arkouda.match.match method)": [[18, "arkouda.match.Match.group"], [74, "arkouda.match.Match.group"]], "match_type() (arkouda.match.match method)": [[18, "arkouda.match.Match.match_type"], [74, "arkouda.match.Match.match_type"]], "matched() (arkouda.match.match method)": [[18, "arkouda.match.Match.matched"], [74, "arkouda.match.Match.matched"]], "start() (arkouda.match.match method)": [[18, "arkouda.match.Match.start"], [74, "arkouda.match.Match.start"]], "locationsinfo (arkouda.matcher.matcher attribute)": [[19, "arkouda.matcher.Matcher.LocationsInfo"]], "matcher (class in arkouda.matcher)": [[19, "arkouda.matcher.Matcher"]], "arkouda.matcher": [[19, "module-arkouda.matcher"]], "find_locations() (arkouda.matcher.matcher method)": [[19, "arkouda.matcher.Matcher.find_locations"]], "findall() (arkouda.matcher.matcher method)": [[19, "arkouda.matcher.Matcher.findall"]], "get_match() (arkouda.matcher.matcher method)": [[19, "arkouda.matcher.Matcher.get_match"]], "split() (arkouda.matcher.matcher method)": [[19, "arkouda.matcher.Matcher.split"]], "sub() (arkouda.matcher.matcher method)": [[19, "arkouda.matcher.Matcher.sub"]], "errormode (class in arkouda.numeric)": [[20, "arkouda.numeric.ErrorMode"]], "abs() (in module arkouda.numeric)": [[20, "arkouda.numeric.abs"]], "arkouda.numeric": [[20, "module-arkouda.numeric"]], "cast() (in module arkouda.numeric)": [[20, "arkouda.numeric.cast"]], "cos() (in module arkouda.numeric)": [[20, "arkouda.numeric.cos"]], "cumprod() (in module arkouda.numeric)": [[20, "arkouda.numeric.cumprod"]], "cumsum() (in module arkouda.numeric)": [[20, "arkouda.numeric.cumsum"]], "exp() (in module arkouda.numeric)": [[20, "arkouda.numeric.exp"]], "hash() (in module arkouda.numeric)": [[20, "arkouda.numeric.hash"]], "histogram() (in module arkouda.numeric)": [[20, "arkouda.numeric.histogram"]], "ignore (arkouda.numeric.errormode attribute)": [[20, "arkouda.numeric.ErrorMode.ignore"]], "isnan() (in module arkouda.numeric)": [[20, "arkouda.numeric.isnan"]], "log() (in module arkouda.numeric)": [[20, "arkouda.numeric.log"]], "return_validity (arkouda.numeric.errormode attribute)": [[20, "arkouda.numeric.ErrorMode.return_validity"]], "sin() (in module arkouda.numeric)": [[20, "arkouda.numeric.sin"]], "strict (arkouda.numeric.errormode attribute)": [[20, "arkouda.numeric.ErrorMode.strict"]], "value_counts() (in module arkouda.numeric)": [[20, "arkouda.numeric.value_counts"]], "where() (in module arkouda.numeric)": [[20, "arkouda.numeric.where"]], "binops (arkouda.pdarrayclass.pdarray attribute)": [[21, "arkouda.pdarrayclass.pdarray.BinOps"]], "opeqops (arkouda.pdarrayclass.pdarray attribute)": [[21, "arkouda.pdarrayclass.pdarray.OpEqOps"]], "all() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.all"]], "all() (in module arkouda.pdarrayclass)": [[21, "arkouda.pdarrayclass.all"]], "any() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.any"]], "any() (in module arkouda.pdarrayclass)": [[21, "arkouda.pdarrayclass.any"]], "argmax() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.argmax"]], "argmax() (in module arkouda.pdarrayclass)": [[21, "arkouda.pdarrayclass.argmax"]], "argmaxk() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.argmaxk"]], "argmaxk() (in module arkouda.pdarrayclass)": [[21, "arkouda.pdarrayclass.argmaxk"]], "argmin() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.argmin"]], "argmin() (in module arkouda.pdarrayclass)": [[21, "arkouda.pdarrayclass.argmin"]], "argmink() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.argmink"]], "argmink() (in module arkouda.pdarrayclass)": [[21, "arkouda.pdarrayclass.argmink"]], "arkouda.pdarrayclass": [[21, "module-arkouda.pdarrayclass"]], "astype() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.astype"]], "attach() (arkouda.pdarrayclass.pdarray static method)": [[21, "arkouda.pdarrayclass.pdarray.attach"]], "attach_pdarray() (in module arkouda.pdarrayclass)": [[21, "arkouda.pdarrayclass.attach_pdarray"]], "bigint_to_uint_arrays() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.bigint_to_uint_arrays"]], "clear() (in module arkouda.pdarrayclass)": [[21, "arkouda.pdarrayclass.clear"]], "clz() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.clz"]], "clz() (in module arkouda.pdarrayclass)": [[21, "arkouda.pdarrayclass.clz"]], "corr() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.corr"]], "corr() (in module arkouda.pdarrayclass)": [[21, "arkouda.pdarrayclass.corr"]], "cov() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.cov"]], "cov() (in module arkouda.pdarrayclass)": [[21, "arkouda.pdarrayclass.cov"]], "ctz() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.ctz"]], "ctz() (in module arkouda.pdarrayclass)": [[21, "arkouda.pdarrayclass.ctz"]], "dtype (arkouda.pdarrayclass.pdarray attribute)": [[21, "arkouda.pdarrayclass.pdarray.dtype"]], "fill() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.fill"]], "format_other() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.format_other"]], "info() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.info"]], "is_registered() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.is_registered"]], "is_sorted() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.is_sorted"]], "is_sorted() (in module arkouda.pdarrayclass)": [[21, "arkouda.pdarrayclass.is_sorted"]], "itemsize (arkouda.pdarrayclass.pdarray attribute)": [[21, "arkouda.pdarrayclass.pdarray.itemsize"]], "max() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.max"]], "max() (in module arkouda.pdarrayclass)": [[21, "arkouda.pdarrayclass.max"]], "maxk() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.maxk"]], "maxk() (in module arkouda.pdarrayclass)": [[21, "arkouda.pdarrayclass.maxk"]], "mean() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.mean"]], "mean() (in module arkouda.pdarrayclass)": [[21, "arkouda.pdarrayclass.mean"]], "min() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.min"]], "min() (in module arkouda.pdarrayclass)": [[21, "arkouda.pdarrayclass.min"]], "mink() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.mink"]], "mink() (in module arkouda.pdarrayclass)": [[21, "arkouda.pdarrayclass.mink"]], "name (arkouda.pdarrayclass.pdarray attribute)": [[21, "arkouda.pdarrayclass.pdarray.name"]], "ndim (arkouda.pdarrayclass.pdarray attribute)": [[21, "arkouda.pdarrayclass.pdarray.ndim"]], "objtype (arkouda.pdarrayclass.pdarray attribute)": [[21, "arkouda.pdarrayclass.pdarray.objtype"]], "opeq() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.opeq"]], "parity() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.parity"]], "parity() (in module arkouda.pdarrayclass)": [[21, "arkouda.pdarrayclass.parity"]], "pdarray (class in arkouda.pdarrayclass)": [[21, "arkouda.pdarrayclass.pdarray"]], "popcount() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.popcount"]], "popcount() (in module arkouda.pdarrayclass)": [[21, "arkouda.pdarrayclass.popcount"]], "power() (in module arkouda.pdarrayclass)": [[21, "arkouda.pdarrayclass.power"]], "pretty_print_info() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.pretty_print_info"]], "prod() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.prod"]], "prod() (in module arkouda.pdarrayclass)": [[21, "arkouda.pdarrayclass.prod"]], "register() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.register"]], "reshape() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.reshape"]], "rotl() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.rotl"]], "rotl() (in module arkouda.pdarrayclass)": [[21, "arkouda.pdarrayclass.rotl"]], "rotr() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.rotr"]], "rotr() (in module arkouda.pdarrayclass)": [[21, "arkouda.pdarrayclass.rotr"]], "save() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.save"]], "shape (arkouda.pdarrayclass.pdarray attribute)": [[21, "arkouda.pdarrayclass.pdarray.shape"]], "size (arkouda.pdarrayclass.pdarray attribute)": [[21, "arkouda.pdarrayclass.pdarray.size"]], "slice_bits() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.slice_bits"]], "sqrt() (in module arkouda.pdarrayclass)": [[21, "arkouda.pdarrayclass.sqrt"]], "std() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.std"]], "std() (in module arkouda.pdarrayclass)": [[21, "arkouda.pdarrayclass.std"]], "sum() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.sum"]], "sum() (in module arkouda.pdarrayclass)": [[21, "arkouda.pdarrayclass.sum"]], "to_csv() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.to_csv"]], "to_cuda() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.to_cuda"]], "to_hdf() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.to_hdf"]], "to_list() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.to_list"]], "to_ndarray() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.to_ndarray"]], "to_parquet() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.to_parquet"]], "unregister() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.unregister"]], "unregister_pdarray_by_name() (in module arkouda.pdarrayclass)": [[21, "arkouda.pdarrayclass.unregister_pdarray_by_name"]], "var() (arkouda.pdarrayclass.pdarray method)": [[21, "arkouda.pdarrayclass.pdarray.var"]], "var() (in module arkouda.pdarrayclass)": [[21, "arkouda.pdarrayclass.var"]], "arange() (in module arkouda.pdarraycreation)": [[22, "arkouda.pdarraycreation.arange"]], "arkouda.pdarraycreation": [[22, "module-arkouda.pdarraycreation"]], "array() (in module arkouda.pdarraycreation)": [[22, "arkouda.pdarraycreation.array"]], "bigint_from_uint_arrays() (in module arkouda.pdarraycreation)": [[22, "arkouda.pdarraycreation.bigint_from_uint_arrays"]], "from_series() (in module arkouda.pdarraycreation)": [[22, "arkouda.pdarraycreation.from_series"]], "full() (in module arkouda.pdarraycreation)": [[22, "arkouda.pdarraycreation.full"]], "full_like() (in module arkouda.pdarraycreation)": [[22, "arkouda.pdarraycreation.full_like"]], "linspace() (in module arkouda.pdarraycreation)": [[22, "arkouda.pdarraycreation.linspace"]], "ones() (in module arkouda.pdarraycreation)": [[22, "arkouda.pdarraycreation.ones"]], "ones_like() (in module arkouda.pdarraycreation)": [[22, "arkouda.pdarraycreation.ones_like"]], "randint() (in module arkouda.pdarraycreation)": [[22, "arkouda.pdarraycreation.randint"]], "random_strings_lognormal() (in module arkouda.pdarraycreation)": [[22, "arkouda.pdarraycreation.random_strings_lognormal"]], "random_strings_uniform() (in module arkouda.pdarraycreation)": [[22, "arkouda.pdarraycreation.random_strings_uniform"]], "standard_normal() (in module arkouda.pdarraycreation)": [[22, "arkouda.pdarraycreation.standard_normal"]], "uniform() (in module arkouda.pdarraycreation)": [[22, "arkouda.pdarraycreation.uniform"]], "zeros() (in module arkouda.pdarraycreation)": [[22, "arkouda.pdarraycreation.zeros"]], "zeros_like() (in module arkouda.pdarraycreation)": [[22, "arkouda.pdarraycreation.zeros_like"]], "arkouda.pdarraysetops": [[23, "module-arkouda.pdarraysetops"]], "concatenate() (in module arkouda.pdarraysetops)": [[23, "arkouda.pdarraysetops.concatenate"]], "in1d() (in module arkouda.pdarraysetops)": [[23, "arkouda.pdarraysetops.in1d"]], "intersect1d() (in module arkouda.pdarraysetops)": [[23, "arkouda.pdarraysetops.intersect1d"]], "setdiff1d() (in module arkouda.pdarraysetops)": [[23, "arkouda.pdarraysetops.setdiff1d"]], "setxor1d() (in module arkouda.pdarraysetops)": [[23, "arkouda.pdarraysetops.setxor1d"]], "union1d() (in module arkouda.pdarraysetops)": [[23, "arkouda.pdarraysetops.union1d"]], "arkouda.plotting": [[24, "module-arkouda.plotting"]], "plot_dist() (in module arkouda.plotting)": [[24, "arkouda.plotting.plot_dist"]], "row (class in arkouda.row)": [[25, "arkouda.row.Row"]], "arkouda.row": [[25, "module-arkouda.row"]], "arkouda.security": [[26, "module-arkouda.security"]], "generate_token() (in module arkouda.security)": [[26, "arkouda.security.generate_token"]], "generate_username_token_json() (in module arkouda.security)": [[26, "arkouda.security.generate_username_token_json"]], "get_arkouda_client_directory() (in module arkouda.security)": [[26, "arkouda.security.get_arkouda_client_directory"]], "get_home_directory() (in module arkouda.security)": [[26, "arkouda.security.get_home_directory"]], "get_username() (in module arkouda.security)": [[26, "arkouda.security.get_username"]], "username_tokenizer (in module arkouda.security)": [[26, "arkouda.security.username_tokenizer"]], "and() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.AND"]], "or() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.OR"]], "segarray (class in arkouda.segarray)": [[27, "arkouda.segarray.SegArray"]], "xor() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.XOR"]], "aggregate() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.aggregate"]], "all() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.all"]], "any() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.any"]], "append() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.append"]], "append_single() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.append_single"]], "argmax() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.argmax"]], "argmin() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.argmin"]], "arkouda.segarray": [[27, "module-arkouda.segarray"]], "attach() (arkouda.segarray.segarray class method)": [[27, "arkouda.segarray.SegArray.attach"]], "concat() (arkouda.segarray.segarray class method)": [[27, "arkouda.segarray.SegArray.concat"]], "copy() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.copy"]], "from_multi_array() (arkouda.segarray.segarray class method)": [[27, "arkouda.segarray.SegArray.from_multi_array"]], "from_parts() (arkouda.segarray.segarray class method)": [[27, "arkouda.segarray.SegArray.from_parts"]], "from_return_msg() (arkouda.segarray.segarray class method)": [[27, "arkouda.segarray.SegArray.from_return_msg"]], "gen_ranges() (in module arkouda.segarray)": [[27, "arkouda.segarray.gen_ranges"]], "get_jth() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.get_jth"]], "get_length_n() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.get_length_n"]], "get_ngrams() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.get_ngrams"]], "get_prefixes() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.get_prefixes"]], "get_suffixes() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.get_suffixes"]], "intersect() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.intersect"]], "is_registered() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.is_registered"]], "lengths (arkouda.segarray.segarray property)": [[27, "arkouda.segarray.SegArray.lengths"]], "load() (arkouda.segarray.segarray class method)": [[27, "arkouda.segarray.SegArray.load"]], "max() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.max"]], "mean() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.mean"]], "min() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.min"]], "non_empty (arkouda.segarray.segarray property)": [[27, "arkouda.segarray.SegArray.non_empty"]], "non_empty_count (arkouda.segarray.segarray property)": [[27, "arkouda.segarray.SegArray.non_empty_count"]], "nunique() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.nunique"]], "objtype (arkouda.segarray.segarray property)": [[27, "arkouda.segarray.SegArray.objtype"]], "prepend_single() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.prepend_single"]], "prod() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.prod"]], "register() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.register"]], "remove_repeats() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.remove_repeats"]], "save() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.save"]], "segarray() (in module arkouda.segarray)": [[27, "arkouda.segarray.segarray"]], "set_jth() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.set_jth"]], "setdiff() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.setdiff"]], "setxor() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.setxor"]], "sum() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.sum"]], "to_hdf() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.to_hdf"]], "to_list() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.to_list"]], "to_ndarray() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.to_ndarray"]], "union() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.union"]], "unique() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.unique"]], "unregister() (arkouda.segarray.segarray method)": [[27, "arkouda.segarray.SegArray.unregister"]], "unregister_segarray_by_name() (arkouda.segarray.segarray static method)": [[27, "arkouda.segarray.SegArray.unregister_segarray_by_name"]], "valsize (arkouda.segarray.segarray attribute)": [[27, "arkouda.segarray.SegArray.valsize"]], "series (class in arkouda.series)": [[28, "arkouda.series.Series"]], "add() (arkouda.series.series method)": [[28, "arkouda.series.Series.add"]], "arkouda.series": [[28, "module-arkouda.series"]], "attach() (arkouda.series.series static method)": [[28, "arkouda.series.Series.attach"]], "concat() (arkouda.series.series static method)": [[28, "arkouda.series.Series.concat"]], "diff() (arkouda.series.series method)": [[28, "arkouda.series.Series.diff"]], "dt (arkouda.series.series attribute)": [[28, "arkouda.series.Series.dt"]], "from_return_msg() (arkouda.series.series static method)": [[28, "arkouda.series.Series.from_return_msg"]], "head() (arkouda.series.series method)": [[28, "arkouda.series.Series.head"]], "is_registered() (arkouda.series.series method)": [[28, "arkouda.series.Series.is_registered"]], "isin() (arkouda.series.series method)": [[28, "arkouda.series.Series.isin"]], "locate() (arkouda.series.series method)": [[28, "arkouda.series.Series.locate"]], "pdconcat() (arkouda.series.series static method)": [[28, "arkouda.series.Series.pdconcat"]], "register() (arkouda.series.series method)": [[28, "arkouda.series.Series.register"]], "shape (arkouda.series.series property)": [[28, "arkouda.series.Series.shape"]], "sort_index() (arkouda.series.series method)": [[28, "arkouda.series.Series.sort_index"]], "sort_values() (arkouda.series.series method)": [[28, "arkouda.series.Series.sort_values"]], "str_acc (arkouda.series.series attribute)": [[28, "arkouda.series.Series.str_acc"]], "tail() (arkouda.series.series method)": [[28, "arkouda.series.Series.tail"]], "to_dataframe() (arkouda.series.series method)": [[28, "arkouda.series.Series.to_dataframe"]], "to_pandas() (arkouda.series.series method)": [[28, "arkouda.series.Series.to_pandas"]], "topn() (arkouda.series.series method)": [[28, "arkouda.series.Series.topn"]], "value_counts() (arkouda.series.series method)": [[28, "arkouda.series.Series.value_counts"]], "argsort() (in module arkouda.sorting)": [[29, "arkouda.sorting.argsort"]], "arkouda.sorting": [[29, "module-arkouda.sorting"]], "coargsort() (in module arkouda.sorting)": [[29, "arkouda.sorting.coargsort"]], "sort() (in module arkouda.sorting)": [[29, "arkouda.sorting.sort"]], "binops (arkouda.strings.strings attribute)": [[30, "arkouda.strings.Strings.BinOps"]], "strings (class in arkouda.strings)": [[30, "arkouda.strings.Strings"]], "arkouda.strings": [[30, "module-arkouda.strings"]], "astype() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.astype"]], "attach() (arkouda.strings.strings static method)": [[30, "arkouda.strings.Strings.attach"]], "cached_regex_patterns() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.cached_regex_patterns"]], "contains() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.contains"]], "decode() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.decode"]], "dtype (arkouda.strings.strings attribute)": [[30, "arkouda.strings.Strings.dtype"]], "encode() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.encode"]], "endswith() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.endswith"]], "entry (arkouda.strings.strings attribute)": [[30, "arkouda.strings.Strings.entry"]], "find_locations() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.find_locations"]], "findall() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.findall"]], "flatten() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.flatten"]], "from_parts() (arkouda.strings.strings static method)": [[30, "arkouda.strings.Strings.from_parts"]], "from_return_msg() (arkouda.strings.strings static method)": [[30, "arkouda.strings.Strings.from_return_msg"]], "fullmatch() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.fullmatch"]], "get_lengths() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.get_lengths"]], "get_prefixes() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.get_prefixes"]], "get_suffixes() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.get_suffixes"]], "group() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.group"]], "hash() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.hash"]], "info() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.info"]], "is_lower() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.is_lower"]], "is_registered() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.is_registered"]], "is_title() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.is_title"]], "is_upper() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.is_upper"]], "logger (arkouda.strings.strings attribute)": [[30, "arkouda.strings.Strings.logger"]], "lstick() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.lstick"]], "match() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.match"]], "nbytes (arkouda.strings.strings attribute)": [[30, "arkouda.strings.Strings.nbytes"]], "ndim (arkouda.strings.strings attribute)": [[30, "arkouda.strings.Strings.ndim"]], "objtype (arkouda.strings.strings attribute)": [[30, "arkouda.strings.Strings.objtype"]], "peel() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.peel"]], "pretty_print_info() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.pretty_print_info"]], "purge_cached_regex_patterns() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.purge_cached_regex_patterns"]], "register() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.register"]], "rpeel() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.rpeel"]], "save() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.save"]], "search() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.search"]], "shape (arkouda.strings.strings attribute)": [[30, "arkouda.strings.Strings.shape"]], "size (arkouda.strings.strings attribute)": [[30, "arkouda.strings.Strings.size"]], "split() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.split"]], "startswith() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.startswith"]], "stick() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.stick"]], "strip() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.strip"]], "sub() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.sub"]], "subn() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.subn"]], "to_csv() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.to_csv"]], "to_hdf() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.to_hdf"]], "to_list() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.to_list"]], "to_lower() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.to_lower"]], "to_ndarray() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.to_ndarray"]], "to_parquet() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.to_parquet"]], "to_title() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.to_title"]], "to_upper() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.to_upper"]], "unregister() (arkouda.strings.strings method)": [[30, "arkouda.strings.Strings.unregister"]], "unregister_strings_by_name() (arkouda.strings.strings static method)": [[30, "arkouda.strings.Strings.unregister_strings_by_name"]], "datetime (class in arkouda.timeclass)": [[31, "arkouda.timeclass.Datetime"]], "timedelta (class in arkouda.timeclass)": [[31, "arkouda.timeclass.Timedelta"]], "abs() (arkouda.timeclass.timedelta method)": [[31, "arkouda.timeclass.Timedelta.abs"]], "arkouda.timeclass": [[31, "module-arkouda.timeclass"]], "components (arkouda.timeclass.timedelta property)": [[31, "arkouda.timeclass.Timedelta.components"]], "date (arkouda.timeclass.datetime property)": [[31, "arkouda.timeclass.Datetime.date"]], "date_range() (in module arkouda.timeclass)": [[31, "arkouda.timeclass.date_range"]], "day (arkouda.timeclass.datetime property)": [[31, "arkouda.timeclass.Datetime.day"]], "day_of_week (arkouda.timeclass.datetime property)": [[31, "arkouda.timeclass.Datetime.day_of_week"]], "day_of_year (arkouda.timeclass.datetime property)": [[31, "arkouda.timeclass.Datetime.day_of_year"]], "dayofweek (arkouda.timeclass.datetime property)": [[31, "arkouda.timeclass.Datetime.dayofweek"]], "dayofyear (arkouda.timeclass.datetime property)": [[31, "arkouda.timeclass.Datetime.dayofyear"]], "days (arkouda.timeclass.timedelta property)": [[31, "arkouda.timeclass.Timedelta.days"]], "hour (arkouda.timeclass.datetime property)": [[31, "arkouda.timeclass.Datetime.hour"]], "is_leap_year (arkouda.timeclass.datetime property)": [[31, "arkouda.timeclass.Datetime.is_leap_year"]], "isocalendar() (arkouda.timeclass.datetime method)": [[31, "arkouda.timeclass.Datetime.isocalendar"]], "microsecond (arkouda.timeclass.datetime property)": [[31, "arkouda.timeclass.Datetime.microsecond"]], "microseconds (arkouda.timeclass.timedelta property)": [[31, "arkouda.timeclass.Timedelta.microseconds"]], "millisecond (arkouda.timeclass.datetime property)": [[31, "arkouda.timeclass.Datetime.millisecond"]], "minute (arkouda.timeclass.datetime property)": [[31, "arkouda.timeclass.Datetime.minute"]], "month (arkouda.timeclass.datetime property)": [[31, "arkouda.timeclass.Datetime.month"]], "nanosecond (arkouda.timeclass.datetime property)": [[31, "arkouda.timeclass.Datetime.nanosecond"]], "nanoseconds (arkouda.timeclass.timedelta property)": [[31, "arkouda.timeclass.Timedelta.nanoseconds"]], "second (arkouda.timeclass.datetime property)": [[31, "arkouda.timeclass.Datetime.second"]], "seconds (arkouda.timeclass.timedelta property)": [[31, "arkouda.timeclass.Timedelta.seconds"]], "std() (arkouda.timeclass.timedelta method)": [[31, "arkouda.timeclass.Timedelta.std"]], "sum() (arkouda.timeclass.datetime method)": [[31, "arkouda.timeclass.Datetime.sum"]], "sum() (arkouda.timeclass.timedelta method)": [[31, "arkouda.timeclass.Timedelta.sum"]], "supported_opeq (arkouda.timeclass.datetime attribute)": [[31, "arkouda.timeclass.Datetime.supported_opeq"]], "supported_opeq (arkouda.timeclass.timedelta attribute)": [[31, "arkouda.timeclass.Timedelta.supported_opeq"]], "supported_with_datetime (arkouda.timeclass.datetime attribute)": [[31, "arkouda.timeclass.Datetime.supported_with_datetime"]], "supported_with_datetime (arkouda.timeclass.timedelta attribute)": [[31, "arkouda.timeclass.Timedelta.supported_with_datetime"]], "supported_with_pdarray (arkouda.timeclass.datetime attribute)": [[31, "arkouda.timeclass.Datetime.supported_with_pdarray"]], "supported_with_pdarray (arkouda.timeclass.timedelta attribute)": [[31, "arkouda.timeclass.Timedelta.supported_with_pdarray"]], "supported_with_r_datetime (arkouda.timeclass.datetime attribute)": [[31, "arkouda.timeclass.Datetime.supported_with_r_datetime"]], "supported_with_r_datetime (arkouda.timeclass.timedelta attribute)": [[31, "arkouda.timeclass.Timedelta.supported_with_r_datetime"]], "supported_with_r_pdarray (arkouda.timeclass.datetime attribute)": [[31, "arkouda.timeclass.Datetime.supported_with_r_pdarray"]], "supported_with_r_pdarray (arkouda.timeclass.timedelta attribute)": [[31, "arkouda.timeclass.Timedelta.supported_with_r_pdarray"]], "supported_with_r_timedelta (arkouda.timeclass.datetime attribute)": [[31, "arkouda.timeclass.Datetime.supported_with_r_timedelta"]], "supported_with_r_timedelta (arkouda.timeclass.timedelta attribute)": [[31, "arkouda.timeclass.Timedelta.supported_with_r_timedelta"]], "supported_with_timedelta (arkouda.timeclass.datetime attribute)": [[31, "arkouda.timeclass.Datetime.supported_with_timedelta"]], "supported_with_timedelta (arkouda.timeclass.timedelta attribute)": [[31, "arkouda.timeclass.Timedelta.supported_with_timedelta"]], "timedelta_range() (in module arkouda.timeclass)": [[31, "arkouda.timeclass.timedelta_range"]], "to_pandas() (arkouda.timeclass.datetime method)": [[31, "arkouda.timeclass.Datetime.to_pandas"]], "to_pandas() (arkouda.timeclass.timedelta method)": [[31, "arkouda.timeclass.Timedelta.to_pandas"]], "total_seconds() (arkouda.timeclass.timedelta method)": [[31, "arkouda.timeclass.Timedelta.total_seconds"]], "week (arkouda.timeclass.datetime property)": [[31, "arkouda.timeclass.Datetime.week"]], "weekday (arkouda.timeclass.datetime property)": [[31, "arkouda.timeclass.Datetime.weekday"]], "weekofyear (arkouda.timeclass.datetime property)": [[31, "arkouda.timeclass.Datetime.weekofyear"]], "year (arkouda.timeclass.datetime property)": [[31, "arkouda.timeclass.Datetime.year"]], "arkouda.util": [[32, "module-arkouda.util"]], "attach() (in module arkouda.util)": [[32, "arkouda.util.attach"]], "attach_all() (in module arkouda.util)": [[32, "arkouda.util.attach_all"]], "concatenate() (in module arkouda.util)": [[32, "arkouda.util.concatenate"]], "convert_if_categorical() (in module arkouda.util)": [[32, "arkouda.util.convert_if_categorical"]], "enrich_inplace() (in module arkouda.util)": [[32, "arkouda.util.enrich_inplace"]], "expand() (in module arkouda.util)": [[32, "arkouda.util.expand"]], "generic_concat() (in module arkouda.util)": [[32, "arkouda.util.generic_concat"]], "get_callback() (in module arkouda.util)": [[32, "arkouda.util.get_callback"]], "identity() (in module arkouda.util)": [[32, "arkouda.util.identity"]], "invert_permutation() (in module arkouda.util)": [[32, "arkouda.util.invert_permutation"]], "most_common() (in module arkouda.util)": [[32, "arkouda.util.most_common"]], "register() (in module arkouda.util)": [[32, "arkouda.util.register"]], "register_all() (in module arkouda.util)": [[32, "arkouda.util.register_all"]], "report_mem() (in module arkouda.util)": [[32, "arkouda.util.report_mem"]], "unregister_all() (in module arkouda.util)": [[32, "arkouda.util.unregister_all"]], "unregister_by_name() (in module arkouda.util)": [[32, "arkouda.util.unregister_by_name"]], "to_ndarray() (in module arkouda.strings)": [[58, "arkouda.Strings.to_ndarray"], [74, "arkouda.Strings.to_ndarray"]], "to_ndarray() (in module arkouda.pdarray)": [[58, "arkouda.pdarray.to_ndarray"], [69, "arkouda.pdarray.to_ndarray"]], "argsort() (in module arkouda.index)": [[59, "arkouda.Index.argsort"]], "argsort() (in module arkouda.multiindex)": [[59, "arkouda.MultiIndex.argsort"]], "concat() (in module arkouda.index)": [[59, "arkouda.Index.concat"]], "concat() (in module arkouda.multiindex)": [[59, "arkouda.MultiIndex.concat"]], "lookup() (in module arkouda.index)": [[59, "arkouda.Index.lookup"]], "lookup() (in module arkouda.multiindex)": [[59, "arkouda.MultiIndex.lookup"]], "set_dtype() (in module arkouda.index)": [[59, "arkouda.Index.set_dtype"]], "set_dtype() (in module arkouda.multiindex)": [[59, "arkouda.MultiIndex.set_dtype"]], "to_ndarray() (in module arkouda.arrayview)": [[62, "arkouda.ArrayView.to_ndarray"]], "to_ndarray() (in module arkouda.categorical)": [[63, "arkouda.Categorical.to_ndarray"]], "apply_permutation() (in module arkouda.dataframe)": [[65, "arkouda.DataFrame.apply_permutation"]], "argsort() (in module arkouda.dataframe)": [[65, "arkouda.DataFrame.argsort"]], "coargsort() (in module arkouda.dataframe)": [[65, "arkouda.DataFrame.coargsort"]], "concat() (in module arkouda.dataframe)": [[65, "arkouda.DataFrame.concat"]], "copy() (in module arkouda.dataframe)": [[65, "arkouda.DataFrame.copy"]], "drop() (in module arkouda.dataframe)": [[65, "arkouda.DataFrame.drop"]], "drop_duplicates() (in module arkouda.dataframe)": [[65, "arkouda.DataFrame.drop_duplicates"]], "groupby() (in module arkouda.dataframe)": [[65, "arkouda.DataFrame.groupby"]], "head() (in module arkouda.dataframe)": [[65, "arkouda.DataFrame.head"]], "rename() (in module arkouda.dataframe)": [[65, "arkouda.DataFrame.rename"]], "reset_index() (in module arkouda.dataframe)": [[65, "arkouda.DataFrame.reset_index"]], "sort_values() (in module arkouda.dataframe)": [[65, "arkouda.DataFrame.sort_values"]], "tail() (in module arkouda.dataframe)": [[65, "arkouda.DataFrame.tail"]], "to_pandas() (in module arkouda.dataframe)": [[65, "arkouda.DataFrame.to_pandas"]], "append() (in module arkouda.segarray)": [[70, "arkouda.SegArray.append"]], "append_single() (in module arkouda.segarray)": [[70, "arkouda.SegArray.append_single"]], "get_jth() (in module arkouda.segarray)": [[70, "arkouda.SegArray.get_jth"]], "get_length_n() (in module arkouda.segarray)": [[70, "arkouda.SegArray.get_length_n"]], "get_ngrams() (in module arkouda.segarray)": [[70, "arkouda.SegArray.get_ngrams"]], "get_prefixes() (in module arkouda.segarray)": [[70, "arkouda.SegArray.get_prefixes"]], "get_suffixes() (in module arkouda.segarray)": [[70, "arkouda.SegArray.get_suffixes"]], "intersect() (in module arkouda.segarray)": [[70, "arkouda.SegArray.intersect"]], "prepend_single() (in module arkouda.segarray)": [[70, "arkouda.SegArray.prepend_single"]], "remove_repeats() (in module arkouda.segarray)": [[70, "arkouda.SegArray.remove_repeats"]], "set_jth() (in module arkouda.segarray)": [[70, "arkouda.SegArray.set_jth"]], "setdiff() (in module arkouda.segarray)": [[70, "arkouda.SegArray.setdiff"]], "setxor() (in module arkouda.segarray)": [[70, "arkouda.SegArray.setxor"]], "to_ndarray() (in module arkouda.segarray)": [[70, "arkouda.SegArray.to_ndarray"]], "union() (in module arkouda.segarray)": [[70, "arkouda.SegArray.union"]], "head() (in module arkouda.series)": [[71, "arkouda.Series.head"]], "locate() (in module arkouda.series)": [[71, "arkouda.Series.locate"], [71, "id0"]], "pdconcat() (in module arkouda.series)": [[71, "arkouda.Series.pdconcat"]], "sort_index() (in module arkouda.series)": [[71, "arkouda.Series.sort_index"]], "sort_values() (in module arkouda.series)": [[71, "arkouda.Series.sort_values"]], "tail() (in module arkouda.series)": [[71, "arkouda.Series.tail"]], "to_pandas() (in module arkouda.series)": [[71, "arkouda.Series.to_pandas"]], "topn() (in module arkouda.series)": [[71, "arkouda.Series.topn"]], "value_counts() (in module arkouda.series)": [[71, "arkouda.Series.value_counts"]], "connect() (in module arkouda)": [[73, "arkouda.connect"]]}})