.. default-domain:: chpl

.. module:: MultiTypeRegEntry

MultiTypeRegEntry
=================
**Usage**

.. code-block:: chapel

   use MultiTypeRegEntry;


or

.. code-block:: chapel

   import MultiTypeRegEntry;

.. data:: const regLogger = new Logger(logLevel, logChannel)

.. enum:: enum RegistryEntryType { AbstractRegEntry, GenRegEntry, ArrayRegEntry, DataFrameRegEntry, GroupByRegEntry, CategoricalRegEntry, SegArrayRegEntry, IndexRegEntry, SeriesRegEntry, BitVectorRegEntry }

.. class:: AbstractRegEntry

   .. attribute:: var entryType: RegistryEntryType

   .. attribute:: var assignableTypes: set(RegistryEntryType)

   .. attribute:: var name = ""

   .. method:: proc init()

   .. method:: proc setName(name: string)

.. class:: GenRegEntry : AbstractRegEntry

   .. attribute:: var objType: ObjType

   .. method:: proc init(objType: ObjType)

   .. method:: proc toDataFrameRegEntry()

.. class:: ArrayRegEntry : GenRegEntry

   .. attribute:: var array: string

   .. method:: proc init(array_name: string, objType: ObjType)

   .. method:: proc asMap(st: borrowed SymTab): map(string, string) throws

.. class:: BitVectorRegEntry : GenRegEntry

   .. attribute:: var array: string

   .. attribute:: var width: int

   .. attribute:: var reverse: bool

   .. method:: proc init(array_name: string, width: int, reverse: bool)

   .. method:: proc asMap(st: borrowed SymTab): map(string, string) throws

.. class:: SegArrayRegEntry : GenRegEntry

   .. attribute:: var segments: string

   .. attribute:: var values: shared ArrayRegEntry

   .. attribute:: var lengths: string

   .. method:: proc init(segments: string, values: shared ArrayRegEntry, lengths: string)

   .. method:: proc asMap(st: borrowed SymTab): map(string, string) throws

.. class:: DataFrameRegEntry : GenRegEntry

   .. attribute:: var idx: string

   .. attribute:: var column_names: list(string)

   .. attribute:: var columns: list(shared AbstractRegEntry)

   .. method:: proc init(idx: string, column_names: list(string), columns: list(shared AbstractRegEntry))

   .. method:: proc asMap(st: borrowed SymTab): map(string, string) throws

.. class:: GroupByRegEntry : GenRegEntry

   .. attribute:: var segments: string

   .. attribute:: var permutation: string

   .. attribute:: var keys: list(shared AbstractRegEntry)

   .. attribute:: var uki: string

   .. method:: proc init(segments: string, permutation: string, keys: list(shared AbstractRegEntry), uki: string)

   .. method:: proc asMap(st: borrowed SymTab): map(string, string) throws

.. class:: CategoricalRegEntry : GenRegEntry

   .. attribute:: var codes: string

   .. attribute:: var categories: string

   .. attribute:: var permutation: string

   .. attribute:: var segments: string

   .. attribute:: var naCode: string

   .. method:: proc init(codes: string, categories: string, naCode: string, permutation: string, segments: string)

   .. method:: proc asMap(st: borrowed SymTab): map(string, string) throws

.. class:: IndexRegEntry : GenRegEntry

   .. attribute:: var idx: list(shared AbstractRegEntry)

   .. method:: proc init(idx: list(shared AbstractRegEntry), objType: ObjType)

   .. method:: proc asMap(st: borrowed SymTab): map(string, string) throws

.. class:: SeriesRegEntry : GenRegEntry

   .. attribute:: var idx: shared IndexRegEntry

   .. attribute:: var values: shared GenRegEntry

   .. method:: proc init(idx: shared IndexRegEntry, values: shared GenRegEntry)

   .. method:: proc asMap(st: borrowed SymTab): map(string, string) throws

