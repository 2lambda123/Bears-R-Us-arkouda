.. default-domain:: chpl

.. module:: MetricsMsg

MetricsMsg
==========
**Usage**

.. code-block:: chapel

   use MetricsMsg;


or

.. code-block:: chapel

   import MetricsMsg;

.. enum:: enum MetricCategory { ALL, NUM_REQUESTS, RESPONSE_TIME, SYSTEM, SERVER, SERVER_INFO }

.. enum:: enum MetricScope { GLOBAL, LOCALE, REQUEST, USER }

.. data:: const mLogger = new Logger(logLevel)

.. data:: var metricScope = ServerConfig.getEnv(name = METRIC_SCOPE, default = MetricScope.REQUEST)

.. data:: var serverMetrics = new CounterTable()

.. data:: var requestMetrics = new CounterTable()

.. data:: var responseTimeMetrics = new MeasurementTable()

.. data:: var users = new Users()

.. data:: var userMetrics = new UserMetrics()

.. record:: User

   .. attribute:: var name: string

.. class:: Users

   .. attribute:: var users = new map(string, User)

   .. method:: proc getUser(name: string)

   .. method:: proc getUserNames()

   .. method:: proc getUsers()

.. class:: UserMetrics

   .. attribute:: var metrics = new map(keyType = User, valType = shared CounterTable)

   .. attribute:: var users = new Users()

   .. method:: proc getUserMetrics(user: User)

   .. method:: proc incrementPerUserRequestMetrics(userName: string, metricName: string, increment: int = 1)

   .. method:: proc getPerUserNumRequestsPerCommandMetrics(userName: string)

   .. method:: proc getPerUserNumRequestsPerCommandForAllUsersMetrics()

   .. method:: proc incrementNumRequestsPerCommand(userName: string, cmd: string, increment: int = 1)

   .. method:: proc incrementTotalNumRequests(userName: string, increment: int = 1)

.. class:: MeasurementTable

   .. attribute:: var measurements = new map(string, real)

   .. method:: proc get(metric: string): int

   .. method:: proc set(metric: string, measurement: real)

   .. method:: proc items()

   .. method:: proc size()

.. class:: CounterTable

   .. attribute:: var counts = new map(string, int)

   .. method:: proc get(metric: string): int

   .. method:: proc set(metric: string, count: int)

   .. method:: proc increment(metric: string, increment: int = 1)

   .. method:: proc decrement(metric: string, increment: int = 1)

   .. method:: proc items()

      
      * Set new metric value to current minus the increment 
      

   .. method:: proc size()

   .. method:: proc total()

.. function:: proc exportAllMetrics() throws

.. function:: proc getUserRequestMetrics(userName: string) throws

.. function:: proc getAllUserRequestMetrics() throws

.. function:: proc getServerMetrics() throws

.. function:: proc getNumRequestMetrics() throws

.. function:: proc getPerUserNumRequestMetrics() throws

.. function:: proc getResponseTimeMetrics() throws

.. function:: proc getSystemMetrics() throws

.. function:: proc getServerInfo() throws

.. class:: Metric

   .. attribute:: var name: string

   .. attribute:: var category: MetricCategory

   .. attribute:: var scope: MetricScope

   .. attribute:: var timestamp: datetime

   .. attribute:: var value: real

   .. method:: proc init(name: string, category: MetricCategory, scope: MetricScope = MetricScope.GLOBAL, timestamp: datetime = datetime.now(), value: real)

.. class:: UserMetric : Metric

   .. attribute:: var user: string

   .. method:: proc init(name: string, category: MetricCategory, scope: MetricScope = MetricScope.USER, timestamp: datetime = datetime.now(), value: real, user: string)

.. class:: LocaleInfo

   .. attribute:: var name: string

   .. attribute:: var id: string

   .. attribute:: var hostname: string

   .. attribute:: var number_of_processing_units: int

   .. attribute:: var physical_memory: int

   .. attribute:: var max_number_of_tasks: int

.. class:: ServerInfo

   .. attribute:: var hostname: string

   .. attribute:: var version: string

   .. attribute:: var server_port: int

   .. attribute:: var locales: [0..numLocales-1] owned nilable LocaleInfo

   .. attribute:: var number_of_locales: int

   .. method:: proc init(hostname: string, version: string, server_port: int, locales)

.. class:: LocaleMetric : Metric

   .. attribute:: var locale_num: int

   .. attribute:: var locale_name: string

   .. attribute:: var locale_hostname: string

   .. method:: proc init(name: string, category: MetricCategory, scope: MetricScope = MetricScope.LOCALE, timestamp: datetime = datetime.now(), value: real, locale_num: int, locale_name: string, locale_hostname: string)

.. function:: proc metricsMsg(cmd: string, payload: string, argSize: int, st: borrowed SymTab): MsgTuple throws

