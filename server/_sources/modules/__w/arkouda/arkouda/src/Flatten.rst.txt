.. default-domain:: chpl

.. module:: Flatten

Flatten
=======
**Usage**

.. code-block:: chapel

   use Flatten;


or

.. code-block:: chapel

   import Flatten;

.. data:: config const NULL_STRINGS_VALUE = 0: uint(8)

.. function:: proc interpretAsBytes(bytearray: [?D] uint(8), region: range(?), borrow = false): bytes

   
   Interpret a region of a byte array as bytes. Modeled after interpretAsString
   

.. method:: proc SegString.flattenRegex(delim: string, returnSegs: bool) throws

.. method:: proc SegString.split(pattern: string, initMaxSplit: int, returnSegs: bool) throws

   
   Split string by the occurrences of pattern. If maxsplit is nonzero, at most maxsplit splits occur
   If returnSegs is set to True, a mapping between the original strings and new array elements will be returned
   
   :arg pattern: regex pattern used to split strings into substrings
   :type pattern: string
   
   :arg initMaxSplit: If maxsplit is nonzero, at most maxsplit splits occur. If zero, split on all occurences of pattern
   :type initMaxSplit: int
   
   :arg returnSegs: If True, also return mapping of original strings to first substring in return array
   :type returnSegs: bool
   
   :returns: Strings – Substrings with pattern matches removed and (optional) int64 pdarray – For each original string, the index of first corresponding substring in the return array
   

.. method:: proc SegString.flatten(delim: string, returnSegs: bool, regex: bool = false) throws

