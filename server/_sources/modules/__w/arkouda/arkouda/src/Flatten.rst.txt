.. default-domain:: chpl

.. module:: Flatten

Flatten
=======
**Usage**

.. code-block:: chapel

   use Flatten;


or

.. code-block:: chapel

   import Flatten;

.. data:: config const NULL_STRINGS_VALUE = 0: uint(8)

.. function:: proc interpretAsBytes(bytearray: [?D] uint(8), region: range(?), borrow = false): bytes

   
   Interpret a region of a byte array as bytes. Modeled after interpretAsString
   

.. method:: proc SegString.flattenRegex(delim: string, returnSegs: bool) throws

   
   Given a SegString where each string encodes a variable-length sequence delimited by a regex,
   flattenRegex unpacks the sequences into a flat array of individual elements.
   If returnSegs is set to True, a mapping between the original strings and new array elements will be returned
   
   Note: the regular expression engine used, re2, does not support lookahead/lookbehind
   
   :arg delim: regex delimter used to split strings into substrings
   :type delim: string
   
   :arg returnSegs: If True, also return mapping of original strings to first substring in return array
   :type returnSegs: bool
   
   :returns: Strings – Flattened substrings with delimiters removed and (optional) int64 pdarray – For each original string, the index of first corresponding substring in the return array
   

.. method:: proc SegString.flatten(delim: string, returnSegs: bool, regex: bool = false) throws

