.. default-domain:: chpl

.. module:: Cast

Cast
====
**Usage**

.. code-block:: chapel

   use Cast;


or

.. code-block:: chapel

   import Cast;

.. data:: const castLogger = new Logger(logLevel)

.. function:: proc castGenSymEntry(gse: borrowed GenSymEntry, st: borrowed SymTab, type fromType, type toType): string throws

.. function:: proc castGenSymEntryToBigInt(gse: borrowed GenSymEntry, st: borrowed SymTab, type fromType): string throws

.. function:: proc castGenSymEntryToString(gse: borrowed GenSymEntry, st: borrowed SymTab, type fromType): string throws

.. enum:: enum ErrorMode { strict, ignore, return_validity }

.. function:: proc stringToNumericStrict(ref values, rng, type toType): toType throws

.. function:: proc stringToNumericIgnore(ref values, rng, type toType): toType

.. function:: proc stringToNumericReturnValidity(ref values, rng, type toType): (toType, bool)

.. function:: proc castStringToSymEntry(s: SegString, st: borrowed SymTab, type toType, errors: ErrorMode): string throws

.. function:: proc castStringToBigInt(s: SegString, st: borrowed SymTab, errors: ErrorMode): string throws

