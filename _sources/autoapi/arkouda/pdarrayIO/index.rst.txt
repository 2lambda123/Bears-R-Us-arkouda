:py:mod:`arkouda.pdarrayIO`
===========================

.. py:module:: arkouda.pdarrayIO


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   arkouda.pdarrayIO.ls
   arkouda.pdarrayIO.read
   arkouda.pdarrayIO.get_null_indices
   arkouda.pdarrayIO.load
   arkouda.pdarrayIO.get_datasets
   arkouda.pdarrayIO.get_filetype
   arkouda.pdarrayIO.load_all
   arkouda.pdarrayIO.save_all
   arkouda.pdarrayIO.import_data
   arkouda.pdarrayIO.export
   arkouda.pdarrayIO.read_hdf5_multi_dim
   arkouda.pdarrayIO.write_hdf5_multi_dim



.. py:function:: ls(filename: str) -> List[str]

   This function calls the h5ls utility on a HDF5 file visible to the
   arkouda server or calls a function that imitates the result of h5ls
   on a Parquet file.

   :param filename: The name of the file to pass to the server
   :type filename: str

   :returns: The string output of the datasets from the server
   :rtype: str

   :raises TypeError: Raised if filename is not a str
   :raises ValueError: Raised if filename is empty or contains only whitespace
   :raises RuntimeError: Raised if error occurs in executing ls on an HDF5 file


.. py:function:: read(filenames: Union[str, List[str]], datasets: Optional[Union[str, List[str]]] = None, iterative: bool = False, strictTypes: bool = True, allow_errors: bool = False, calc_string_offsets=False, file_format: str = 'infer') -> Union[arkouda.pdarrayclass.pdarray, arkouda.strings.Strings, Mapping[str, Union[arkouda.pdarrayclass.pdarray, arkouda.strings.Strings]]]

   Read datasets from HDF5 or Parquet files.

   :param filenames: Either a list of filenames or shell expression
   :type filenames: list or str
   :param datasets: (List of) name(s) of dataset(s) to read (default: all available)
   :type datasets: list or str or None
   :param iterative: Iterative (True) or Single (False) function call(s) to server
   :type iterative: bool
   :param strictTypes: If True (default), require all dtypes of a given dataset to have the
                       same precision and sign. If False, allow dtypes of different
                       precision and sign across different files. For example, if one
                       file contains a uint32 dataset and another contains an int64
                       dataset with the same name, the contents of both will be read
                       into an int64 pdarray.
   :type strictTypes: bool
   :param allow_errors: Default False, if True will allow files with read errors to be skipped
                        instead of failing.  A warning will be included in the return containing
                        the total number of files skipped due to failure and up to 10 filenames.
   :type allow_errors: bool
   :param calc_string_offsets: Default False, if True this will tell the server to calculate the
                               offsets/segments array on the server versus loading them from HDF5 files.
                               In the future this option may be set to True as the default.
   :type calc_string_offsets: bool
   :param file_format: Default 'infer', if 'HDF5' or 'Parquet' (case insensitive), the file
                       type checking will be skipped and will execute expecting all files in
                       filenames to be of the specified type. Otherwise, will infer filetype
                       based off of first file in filenames, expanded if a glob expression.
   :type file_format: str

   :returns: * *For a single dataset returns an Arkouda pdarray or Arkouda Strings object*
             * *and for multiple datasets returns a dictionary of Arkouda pdarrays or*
             * *Arkouda Strings.* -- Dictionary of {datasetName: pdarray or String}

   :raises ValueError: Raised if all datasets are not present in all hdf5/parquet files or if one or
       more of the specified files do not exist
   :raises RuntimeError: Raised if one or more of the specified files cannot be opened.
       If `allow_errors` is true this may be raised if no values are returned
       from the server.
   :raises TypeError: Raised if we receive an unknown arkouda_type returned from the server

   .. seealso:: :obj:`read`, :obj:`get_datasets`, :obj:`ls`

   .. rubric:: Notes

   If filenames is a string, it is interpreted as a shell expression
   (a single filename is a valid expression, so it will work) and is
   expanded with glob to read all matching files.

   If iterative == True each dataset name and file names are passed to
   the server as independent sequential strings while if iterative == False
   all dataset names and file names are passed to the server in a single
   string.

   If datasets is None, infer the names of datasets from the first file
   and read all of them. Use ``get_datasets`` to show the names of datasets
   to HDF5/Parquet files.

   .. rubric:: Examples

   Read with file Extension
   >>> x = ak.read('path/name_prefix.h5') # load HDF5 - processing determines file type not extension
   Read without file Extension
   >>> x = ak.read('path/name_prefix.parquet', file_format='Parquet') # load Parquet
   Read Glob Expression
   >>> x = ak.read('path/name_prefix*') # Reads HDF5


.. py:function:: get_null_indices(filenames, datasets) -> Union[arkouda.pdarrayclass.pdarray, Mapping[str, arkouda.pdarrayclass.pdarray]]

   Get null indices of a string column in a Parquet file.

   :param filenames: Either a list of filenames or shell expression
   :type filenames: list or str
   :param datasets: (List of) name(s) of dataset(s) to read. Each dataset must be a string
                    column. There is no default value for this funciton, the datasets to be
                    read must be specified.
   :type datasets: list or str or None

   :returns: * *For a single dataset returns an Arkouda pdarray and for multiple datasets*
             * *returns a dictionary of Arkouda pdarrays* -- Dictionary of {datasetName: pdarray}

   :raises RuntimeError: Raised if one or more of the specified files cannot be opened.
   :raises TypeError: Raised if we receive an unknown arkouda_type returned from the server

   .. seealso:: :obj:`get_datasets`, :obj:`ls`


.. py:function:: load(path_prefix: str, file_format: str = 'INFER', dataset: str = 'array', calc_string_offsets: bool = False) -> Union[arkouda.pdarrayclass.pdarray, arkouda.strings.Strings, Mapping[str, Union[arkouda.pdarrayclass.pdarray, arkouda.strings.Strings]]]

   Load a pdarray previously saved with ``pdarray.save()``.

   :param path_prefix: Filename prefix used to save the original pdarray
   :type path_prefix: str
   :param file_format: 'INFER', 'HDF5' or 'Parquet'. Defaults to 'INFER'. Used to indicate the file type being loaded.
                       If INFER, this will be detected during processing
   :type file_format: str
   :param dataset: Dataset name where the pdarray was saved, defaults to 'array'
   :type dataset: str
   :param calc_string_offsets: If True the server will ignore Segmented Strings 'offsets' array and derive
                               it from the null-byte terminators.  Defaults to False currently
   :type calc_string_offsets: bool

   :returns: The pdarray or Strings that was previously saved
   :rtype: Union[pdarray, Strings]

   :raises TypeError: Raised if either path_prefix or dataset is not a str
   :raises ValueError: Raised if invalid file_format or if the dataset is not present in all hdf5 files or if the
       path_prefix does not correspond to files accessible to Arkouda
   :raises RuntimeError: Raised if the hdf5 files are present but there is an error in opening
       one or more of them

   .. seealso:: :obj:`save`, :obj:`load_all`, :obj:`read`

   .. rubric:: Notes

   If you have a previously saved Parquet file that is raising a FileNotFound error, try loading it
   with a .parquet appended to the prefix_path.
   Parquet files were previously ALWAYS stored with a ``.parquet`` extension.

   .. rubric:: Examples

   >>> # Loading from file without extension
   >>> obj = a.load('path/prefix')
   Loads the array from numLocales files with the name ``cwd/path/name_prefix_LOCALE####``.
   The file type is inferred during processing.

   >>> # Loading with an extension (HDF5)
   >>> obj = a.load('path/prefix.test')
   Loads the object from numLocales files with the name ``cwd/path/name_prefix_LOCALE####.test`` where
   #### is replaced by each locale numbers. Because filetype is inferred during processing,
   the extension is not required to be a specific format.


.. py:function:: get_datasets(filename: str) -> List[str]

   Get the names of datasets in an HDF5 file.

   :param filename: Name of an HDF5/Parquet file visible to the arkouda server
   :type filename: str

   :returns: Names of the datasets in the file
   :rtype: List[str]

   :raises TypeError: Raised if filename is not a str
   :raises ValueError: Raised if filename is empty or contains only whitespace
   :raises RuntimeError: Raised if error occurs in executing ls on an HDF5 file

   .. seealso:: :obj:`ls`


.. py:function:: get_filetype(filenames: Union[str, List[str]]) -> str

   Get the type of a file accessible to the server. Supported
   file types and possible return strings are 'HDF5' and 'Parquet'.

   :param filenames: A file or list of files visible to the arkouda server
   :type filenames: Union[str, List[str]]

   :returns: Type of the file returned as a string, either 'HDF5' or 'Parquet'
   :rtype: str

   :raises ValueError: Raised if filename is empty or contains only whitespace

   .. seealso:: :obj:`read`


.. py:function:: load_all(path_prefix: str, file_format: str = 'INFER') -> Mapping[str, Union[arkouda.pdarrayclass.pdarray, arkouda.strings.Strings, arkouda.categorical.Categorical]]

   Load multiple pdarrays or Strings previously saved with ``save_all()``.

   :param path_prefix: Filename prefix used to save the original pdarray
   :type path_prefix: str
   :param file_format: 'INFER', 'HDF5' or 'Parquet'. Defaults to 'INFER'. Indicates the format being loaded.
                       When 'INFER' the processing will detect the format
                       Defaults to 'HDF5'
   :type file_format: str

   :returns: Dictionary of {datsetName: pdarray} with the previously saved pdarrays
   :rtype: Mapping[str,pdarray]

   :raises TypeError:: Raised if path_prefix is not a str
   :raises ValueError: Raised if file_format/extension is encountered that is not hdf5 or parquet or
       if all datasets are not present in all hdf5/parquet files or if the
       path_prefix does not correspond to files accessible to Arkouda
   :raises RuntimeError: Raised if the hdf5 files are present but there is an error in opening
       one or more of them

   .. seealso:: :obj:`save_all`, :obj:`load`, :obj:`read`

   .. rubric:: Notes

   This function has been updated to determine the file extension based on the file format variable


.. py:function:: save_all(columns: Union[Mapping[str, arkouda.pdarrayclass.pdarray], List[arkouda.pdarrayclass.pdarray]], prefix_path: str, names: List[str] = None, file_format='HDF5', mode: str = 'truncate') -> None

   Save multiple named pdarrays to HDF5 files.

   :param columns: Collection of arrays to save
   :type columns: dict or list of pdarrays
   :param prefix_path: Directory and filename prefix for output files
   :type prefix_path: str
   :param names: Dataset names for the pdarrays
   :type names: list of str
   :param file_format: 'HDF5' or 'Parquet'. Defaults to hdf5
   :type file_format: str
   :param mode: By default, truncate (overwrite) the output files if they exist.
                If 'append', attempt to create new dataset in existing files.
   :type mode: {'truncate' | 'append'}

   :rtype: None

   :raises ValueError: Raised if (1) the lengths of columns and values differ or (2) the mode
       is not 'truncate' or 'append'

   .. seealso:: :obj:`save`, :obj:`load_all`

   .. rubric:: Notes

   Creates one file per locale containing that locale's chunk of each pdarray.
   If columns is a dictionary, the keys are used as the HDF5 dataset names.
   Otherwise, if no names are supplied, 0-up integers are used. By default,
   any existing files at path_prefix will be overwritten, unless the user
   specifies the 'append' mode, in which case arkouda will attempt to add
   <columns> as new datasets to existing files. If the wrong number of files
   is present or dataset names already exist, a RuntimeError is raised.

   .. rubric:: Examples

   >>> a = ak.arange(25)
   >>> b = ak.arange(25)

   >>> # Save with mapping defining dataset names
   >>> ak.save_all({'a': a, 'b': b}, 'path/name_prefix', file_format='Parquet')

   >>> # Save using names instead of mapping
   >>> ak.save_all([a, b], 'path/name_prefix', names=['a', 'b'], file_format='Parquet')


.. py:function:: import_data(read_path: str, write_file: str = None, return_obj: bool = True, index: bool = False)

   Import data from a file saved by Pandas (HDF5/Parquet) to Arkouda object and/or
   a file formatted to be read by Arkouda.

   :param read_path: path to file where pandas data is stored. This can be glob expression for parquet formats.
   :type read_path: str
   :param write_file: path to file to write arkouda formatted data to. Only write file if provided
   :type write_file: str, optional
   :param return_obj: Default True. When True return the Arkouda DataFrame object, otherwise return None
   :type return_obj: bool, optional
   :param index: Default False. When True, maintain the indexes loaded from the pandas file
   :type index: bool, optional

   :raises RuntimeWarning: - Export attempted on Parquet file. Arkouda formatted Parquet files are readable by pandas.
   :raises RuntimeError: - Unsupported file type

   :returns: When `return_obj=True`
   :rtype: pd.DataFrame

   .. seealso:: :obj:`pandas.DataFrame.to_parquet`, :obj:`pandas.DataFrame.to_hdf`, :obj:`pandas.DataFrame.read_parquet`, :obj:`pandas.DataFrame.read_hdf`, :obj:`ak.export`

   .. rubric:: Notes

   - Import can only be performed from hdf5 or parquet files written by pandas.


.. py:function:: export(read_path: str, dataset_name: str = 'ak_data', write_file: str = None, return_obj: bool = True, index: bool = False)

   Export data from Arkouda file (Parquet/HDF5) to Pandas object or file formatted to be
   readable by Pandas

   :param read_path: path to file where arkouda data is stored.
   :type read_path: str
   :param dataset_name: name to store dataset under
   :type dataset_name: str
   :param index: Default False. When True, maintain the indexes loaded from the pandas file
   :type index: bool
   :param write_file: path to file to write pandas formatted data to. Only write the file if this is set
   :type write_file: str, optional
   :param return_obj: Default True. When True return the Pandas DataFrame object, otherwise return None
   :type return_obj: bool, optional

   :raises RuntimeError: - Unsupported file type

   :returns: When `return_obj=True`
   :rtype: pd.DataFrame

   .. seealso:: :obj:`pandas.DataFrame.to_parquet`, :obj:`pandas.DataFrame.to_hdf`, :obj:`pandas.DataFrame.read_parquet`, :obj:`pandas.DataFrame.read_hdf`, :obj:`ak.import_data`

   .. rubric:: Notes

   - If Arkouda file is exported for pandas, the format will not change. This mean parquet files
   will remain parquet and hdf5 will remain hdf5.
   - Export can only be performed from hdf5 or parquet files written by Arkouda. The result will be
   the same file type, but formatted to be read by Pandas.


.. py:function:: read_hdf5_multi_dim(file_path: str, dset: str) -> arkouda.array_view.ArrayView

   Read a multi-dimensional object from an HDF5 file

   :param file_path: path to the file to read from
   :type file_path: str
   :param dset: name of the dataset to read
   :type dset: str

   :rtype: ArrayView object representing the data read from file

   .. seealso:: :obj:`ak.write_hdf5_multi_dim`

   .. rubric:: Notes

   - Error handling done on server to prevent multiple server calls
   - This is an initial implementation and updates will be coming soon
   - dset currently only reading a single dataset is supported
   - file_path will need to support list[str] and str for glob
   - Currently, order is always assumed to be row major


.. py:function:: write_hdf5_multi_dim(obj: arkouda.array_view.ArrayView, file_path: str, dset: str, mode: str = 'truncate', storage: str = 'Flat')

   Write a multi-dimensional ArrayView object to an HDF5 file

   :param obj: The object that will be written to the file
   :type obj: ArrayView
   :param file_path: Path to the file to write the dataset to
   :type file_path: str
   :param dset: Name of the dataset to write
   :type dset: str
   :param mode: Default: truncate
                Mode to write the dataset in. Truncate will overwrite any existing files.
                Append will add the dataset to an existing file.
   :type mode: str (truncate | append)
   :param storage: Default: Flat
                   Method to use when storing the dataset.
                   Flat - flatten the multi-dimensional object into a 1-D array of values
                   Multi - Store the object in the multidimensional presentation.
   :type storage: str (Flat | Multi)

   .. seealso:: :obj:`ak.read_hdf5_multi_dim`

   .. rubric:: Notes

   - If a file does not exist, it will be created regardless of the mode value
   - This function is currently standalone functionality for multi-dimensional datasets
   - Error handling done on server to prevent multiple server calls


