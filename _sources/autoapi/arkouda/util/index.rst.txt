:py:mod:`arkouda.util`
======================

.. py:module:: arkouda.util


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   arkouda.util.identity
   arkouda.util.get_callback
   arkouda.util.concatenate
   arkouda.util.generic_concat
   arkouda.util.report_mem
   arkouda.util.register
   arkouda.util.register_all
   arkouda.util.attach_all
   arkouda.util.unregister_all
   arkouda.util.enrich_inplace
   arkouda.util.expand
   arkouda.util.invert_permutation
   arkouda.util.most_common
   arkouda.util.arkouda_to_numpy
   arkouda.util.numpy_to_arkouda
   arkouda.util.convert_if_categorical
   arkouda.util.attach
   arkouda.util.unregister_by_name



.. py:function:: identity(x)


.. py:function:: get_callback(x)


.. py:function:: concatenate(items, ordered=True)


.. py:function:: generic_concat(items, ordered=True)


.. py:function:: report_mem(pre='')


.. py:function:: register(a, name)

   Register an arkouda object with a user-specified name. Backwards compatible
   with earlier arkouda versions.


.. py:function:: register_all(data, prefix, overwrite=True)


.. py:function:: attach_all(prefix)


.. py:function:: unregister_all(prefix)


.. py:function:: enrich_inplace(data, keynames, aggregations, **kwargs)


.. py:function:: expand(size, segs, vals)

   Expand an array with values placed into the indicated segments.

   :param size: The size of the array to be expanded
   :type size: ak.pdarray
   :param segs: The indices where the values should be placed
   :type segs: ak.pdarray
   :param vals: The values to be placed in each segment
   :type vals: ak.pdarray

   :returns: The expanded array.
   :rtype: pdarray

   .. rubric:: Notes

   This function (with different order of arguments) is now in arkouda
   proper as ak.broadcast. It is retained here for backwards compatibility.


.. py:function:: invert_permutation(perm)

   Find the inverse of a permutation array.

   :param perm: The permutation array.
   :type perm: ak.pdarray

   :returns: The inverse of the permutation array.
   :rtype: ak.array


.. py:function:: most_common(g, values)


.. py:function:: arkouda_to_numpy(A: arkouda.pdarrayclass.pdarray, tmp_dir: str = '') -> numpy.ndarray

   Convert from arkouda to numpy using disk rather than sockets.


.. py:function:: numpy_to_arkouda(A: numpy.ndarray, tmp_dir: str = '') -> Union[arkouda.pdarrayclass.pdarray, arkouda.strings.Strings, Mapping[str, Union[arkouda.pdarrayclass.pdarray, arkouda.strings.Strings]]]

   Convert from numpy to arkouda using disk rather than sockets.


.. py:function:: convert_if_categorical(values)

   Convert a Categorical array to Strings for display


.. py:function:: attach(name: str, dtype: str = 'infer')

   Attaches to a known element name. If a type is passed, the server will use that type
   to pull the corresponding parts, otherwise the server will try to infer the type


.. py:function:: unregister_by_name(name: str, dtype: str = 'infer')

   Unregisters all components of a given registered object's name

   :param name: Name of the object to be unregistered
   :type name: str
   :param dtype: Name of the type of object being unregistered. If no type is given, we will attempt
                 to identify the type based on registered symbols
                 Supported types are: pdarray, strings, categorical, segarray, and series
   :type dtype: str


