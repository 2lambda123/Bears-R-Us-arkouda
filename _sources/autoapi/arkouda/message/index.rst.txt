:py:mod:`arkouda.message`
=========================

.. py:module:: arkouda.message


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   arkouda.message.ObjectType
   arkouda.message.ParameterObject
   arkouda.message.MessageFormat
   arkouda.message.MessageType
   arkouda.message.RequestMessage
   arkouda.message.ReplyMessage




.. py:class:: ObjectType

   Bases: :py:obj:`enum.Enum`

   Class used for assigning object types in the JSON string
   sent to the server for processing

   .. py:attribute:: PDARRAY
      :annotation: = PDARRAY

      

   .. py:attribute:: STRINGS
      :annotation: = SEGSTRING

      

   .. py:attribute:: LIST
      :annotation: = LIST

      

   .. py:attribute:: DICT
      :annotation: = DICT

      

   .. py:attribute:: VALUE
      :annotation: = VALUE

      

   .. py:attribute:: DATETIME
      :annotation: = DATETIME

      

   .. py:attribute:: TIMEDELTA
      :annotation: = TIMEDELTA

      

   .. py:method:: __str__() -> str

      Overridden method returns value, which is useful in outputting
      a MessageType object to JSON.


   .. py:method:: __repr__() -> str

      Overridden method returns value, which is useful in outputting
      a MessageType object to JSON.



.. py:class:: ParameterObject(key, objType, dtype, val)

   .. py:property:: dict


   .. py:attribute:: __slots
      :annotation: = ['key', 'objType', 'dtype', 'val']

      

   .. py:attribute:: key
      :annotation: :str

      

   .. py:attribute:: objType
      :annotation: :MessageFormat

      

   .. py:attribute:: dtype
      :annotation: :str

      

   .. py:attribute:: val
      :annotation: :str

      

   .. py:method:: _build_pdarray_param(key: str, val) -> ParameterObject
      :staticmethod:

      Create a ParameterObject from a pdarray value

      :param key: key from the dictionary object
      :type key: str
      :param val: pdarray object ot load from the symbol table

      :rtype: ParameterObject


   .. py:method:: _build_strings_param(key: str, val) -> ParameterObject
      :staticmethod:

      Create a ParameterObject from a Strings value

      :param key: key from the dictionary object
      :type key: str
      :param val: Strings object ot load from the symbol table

      :rtype: ParameterObject


   .. py:method:: _build_list_param(key: str, val: list) -> ParameterObject
      :staticmethod:

      Create a ParameterObject from a list

      :param key: key from the dictionary object
      :type key: str
      :param val: list object to format as string
      :type val: list

      :rtype: ParameterObject


   .. py:method:: _build_dict_param(key: str, val: Dict) -> ParameterObject
      :staticmethod:


   .. py:method:: _build_gen_param(key: str, val) -> ParameterObject
      :staticmethod:

      Create a ParameterObject from a single value

      :param key: key from the dictionary object
      :type key: str
      :param val: singular value to use. This could be str, int, float, etc

      :rtype: ParameterObject


   .. py:method:: generate_dispatch() -> Dict
      :staticmethod:

      Builds and returns the dispatch table used to build parameter object.

      :rtype: Dictionary - mapping the parameter type to the build function


   .. py:method:: factory(key: str, val) -> ParameterObject
      :classmethod:

      Factory method used to build ParameterObject given a key value pair

      :param key: key from the dictionary object
      :type key: str
      :param val: the value corresponding to the provided key from the dictionary

      :rtype: ParameterObject - The parameter object formatted to be parsed by the chapel server



.. py:class:: MessageFormat

   Bases: :py:obj:`enum.Enum`

   Generic enumeration.

   Derive from this class to define new enumerations.

   .. py:attribute:: STRING
      :annotation: = STRING

      

   .. py:attribute:: BINARY
      :annotation: = BINARY

      

   .. py:method:: __str__() -> str

      Overridden method returns value, which is useful in outputting
      a MessageFormat object to JSON.


   .. py:method:: __repr__() -> str

      Overridden method returns value, which is useful in outputting
      a MessageFormat object to JSON.



.. py:class:: MessageType

   Bases: :py:obj:`enum.Enum`

   Generic enumeration.

   Derive from this class to define new enumerations.

   .. py:attribute:: NORMAL
      :annotation: = NORMAL

      

   .. py:attribute:: WARNING
      :annotation: = WARNING

      

   .. py:attribute:: ERROR
      :annotation: = ERROR

      

   .. py:method:: __str__() -> str

      Overridden method returns value, which is useful in outputting
      a MessageType object to JSON.


   .. py:method:: __repr__() -> str

      Overridden method returns value, which is useful in outputting
      a MessageType object to JSON.



.. py:class:: RequestMessage(user: str, cmd: str, token: str = None, format: MessageFormat = MessageFormat.STRING, args: str = None, size: int = -1)

   .. py:attribute:: __slots
      :annotation: = ['user', 'token', 'cmd', 'format', 'args', 'size']

      

   .. py:attribute:: user
      :annotation: :str

      

   .. py:attribute:: token
      :annotation: :str

      

   .. py:attribute:: cmd
      :annotation: :str

      

   .. py:attribute:: format
      :annotation: :MessageFormat

      

   .. py:attribute:: args
      :annotation: :str

      

   .. py:attribute:: size
      :annotation: :str

      

   .. py:method:: asdict() -> Dict

      Overridden asdict implementation sets the values of non-required
      fields to an empty space (for Chapel JSON processing) and invokes
      str() on the format instance attribute.

      :returns: A dict object encapsulating ReplyMessage state
      :rtype: Dict



.. py:class:: ReplyMessage

   .. py:attribute:: __slots__
      :annotation: = ['msg', 'msgType', 'user']

      

   .. py:attribute:: msg
      :annotation: :str

      

   .. py:attribute:: msgType
      :annotation: :MessageType

      

   .. py:attribute:: user
      :annotation: :str

      

   .. py:method:: fromdict(values: Dict) -> ReplyMessage
      :staticmethod:

      Generates a ReplyMessage from a dict encapsulating the data and
      metadata from a reply returned by the Arkouda server.

      :param values: The dict object encapsulating the fields required to instantiate
                     a ReplyMessage
      :type values: Dict

      :returns: The ReplyMessage composed of values encapsulated within values dict
      :rtype: ReplyMessage

      :raises ValueError: Raised if the values Dict is missing fields or contains malformed values



