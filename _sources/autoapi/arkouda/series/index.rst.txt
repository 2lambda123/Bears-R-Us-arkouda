:py:mod:`arkouda.series`
========================

.. py:module:: arkouda.series


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   arkouda.series.Series




.. py:class:: Series(data: Union[Tuple, List, arkouda.groupbyclass.groupable_element_type], index: Optional[Union[arkouda.pdarrayclass.pdarray, arkouda.strings.Strings]] = None)

   One-dimensional arkouda array with axis labels.

   :param index: an array of indices associated with the data array.
                 If empty, it will default to a range of ints whose size match the size of the data.
                 optional
   :type index: pdarray, Strings
   :param data: a 1D array. Must not be None if ar_tuple is not provided.
   :type data: Tuple, List, groupable_element_type

   :raises TypeError: Raised if index is not a pdarray or Strings object
       Raised if data is not a pdarray, Strings, or Categorical object
   :raises ValueError: Raised if the index size does not match data size

   .. rubric:: Notes

   The Series class accepts either positional arguments or keyword arguments.
   If entering positional arguments,
       2 arguments entered:
           argument 1 - index
           argument 2 - data
       1 argument entered:
           argument 1 - data
   If entering 1 positional argument, it is assumed that this is the data argument.
   If entering keywords,
       'data' (see Parameters)
       'index' (optional) must match size of 'data'

   .. py:attribute:: dt
      

      

   .. py:attribute:: str
      

      

   .. py:method:: __len__(self)


   .. py:method:: __repr__(self)

      Return ascii-formatted version of the series.


   .. py:method:: __getitem__(self, key)


   .. py:method:: shape(self)
      :property:


   .. py:method:: isin(self, lst)

      Find series elements whose values are in the specified list

      Input
      -----
      Either a python list or an arkouda array.

      :rtype: Arkouda boolean which is true for elements that are in the list and false otherwise.


   .. py:method:: locate(self, key)

      Lookup values by index label

      The input can be a scalar, a list of scalers, or a list of lists (if the series has a MultiIndex).
      As a special case, if a Series is used as the key, the series labels are preserved with its values
      use as the key.

      Keys will be turned into arkouda arrays as needed.

      :rtype: A Series containing the values corresponding to the key.


   .. py:method:: _make_binop(cls, operator)
      :classmethod:


   .. py:method:: _make_unaryop(cls, operator)
      :classmethod:


   .. py:method:: _make_aggop(cls, name)
      :classmethod:


   .. py:method:: add(self, b)


   .. py:method:: topn(self, n=10)

      Return the top values of the series

      :param n:
      :type n: Number of values to return

      :rtype: A new Series with the top values


   .. py:method:: sort_index(self, ascending=True)

      Sort the series by its index

      :rtype: A new Series sorted.


   .. py:method:: sort_values(self, ascending=True)

      Sort the series numerically

      :rtype: A new Series sorted smallest to largest


   .. py:method:: tail(self, n=10)

      Return the last n values of the series


   .. py:method:: head(self, n=10)

      Return the first n values of the series


   .. py:method:: to_pandas(self)

      Convert the series to a local PANDAS series


   .. py:method:: value_counts(self, sort=True)

      Return a Series containing counts of unique values.

      The resulting object will be in descending order so that the
      first element is the most frequently-occurring element.

      :param sort:
      :type sort: Boolean. Whether or not to sort the results.  Default is true.


   .. py:method:: diff(self)

      Diffs consecutive values of the series.

      Returns a new series with the same index and length.  First value is set to NaN.


   .. py:method:: to_dataframe(self, index_labels=None, value_label=None)

      Converts series to an arkouda data frame

             Parameters
      ----------
      index_labels:  column names(s) to label the index.
      value_label:  column name to label values.
      :rtype: An arkouda dataframe.


   .. py:method:: register(self, label)

      Register the series with arkouda

      :param label:
      :type label: Arkouda name used for the series

      :rtype: Numer of keys


   .. py:method:: attach(label, nkeys=1)
      :staticmethod:

      Retrieve a series registered with arkouda

      :param label:
      :type label: name used to register the series
      :param nkeys:
      :type nkeys: number of keys, if a multi-index was registerd


   .. py:method:: is_registered(self)

      Checks if all components of the Series object are registered

      :returns: True if all components are registered, false if not
      :rtype: bool

      .. seealso:: :obj:`register`, :obj:`unregister`, :obj:`attach`


   .. py:method:: _all_aligned(array)
      :staticmethod:

      Is an array of Series indexed aligned?


   .. py:method:: concat(arrays, axis=0, index_labels=None, value_labels=None)
      :staticmethod:

      Concatenate in arkouda a list of arkouda Series or grouped arkouda arrays horizontally or vertically.

      If a list of grouped arkouda arrays is passed they are converted to a series. Each grouping is a 2-tuple
      with the first item being the key(s) and the second being the value.

      If horizontal, each series or grouping must have the same length and the same index. The index of the series is
      converted to a column in the dataframe.  If it is a multi-index,each level is converted to a column.

      :param arrays:
      :type arrays: The list of series/groupings to concat.
      :param axis:
      :type axis: Whether or not to do a verticle (axis=0) or horizontal (axis=1) concatenation
      :param index_labels:
      :type index_labels: column names(s) to label the index.
      :param value_labels:
      :type value_labels: column names to label values of each series.

      :returns: * **axis=0** (*an arkouda series.*)
                * **axis=1** (*an arkouda dataframe.*)


   .. py:method:: pdconcat(arrays, axis=0, labels=None)
      :staticmethod:

      Concatenate a list of arkouda Series or grouped arkouda arrays, returning a PANDAS object.

      If a list of grouped arkouda arrays is passed they are converted to a series. Each grouping is a 2-tuple
      with the first item being the key(s) and the second being the value.

      If horizontal, each series or grouping must have the same length and the same index. The index of the series is
      converted to a column in the dataframe.  If it is a multi-index,each level is converted to a column.

      :param arrays:
      :type arrays: The list of series/groupings to concat.
      :param axis:
      :type axis: Whether or not to do a verticle (axis=0) or horizontal (axis=1) concatenation
      :param labels:
      :type labels: names to give the columns of the data frame.

      :returns: * **axis=0** (*a local PANDAS series*)
                * **axis=1** (*a local PANDAS dataframe*)



